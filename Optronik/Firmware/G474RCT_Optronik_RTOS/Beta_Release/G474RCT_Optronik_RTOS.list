
G474RCT_Optronik_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001075c  20000098  0800a570  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200107f4  0800a570  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047d1b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000084e4  00000000  00000000  00067ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002efb3  00000000  00000000  000702c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002168  00000000  00000000  0009f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007c70  00000000  00000000  000a13e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f8eb  00000000  00000000  000a9050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000421fa  00000000  00000000  000d893b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001117e2  00000000  00000000  0011ab35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0022c317  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007518  00000000  00000000  0022c368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ce8 	.word	0x08009ce8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	08009ce8 	.word	0x08009ce8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	b0a6      	sub	sp, #152	; 0x98
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* definition and creation of m_camera_state */
	osMutexDef(m_camera_state);
 80005c8:	2500      	movs	r5, #0
	m_camera_stateHandle = osMutexCreate(osMutex(m_camera_state));
 80005ca:	4668      	mov	r0, sp
	osMutexDef(m_camera_state);
 80005cc:	9500      	str	r5, [sp, #0]
	m_camera_stateHandle = osMutexCreate(osMutex(m_camera_state));
 80005ce:	f003 ff95 	bl	80044fc <osMutexCreate>
 80005d2:	4b5b      	ldr	r3, [pc, #364]	; (8000740 <MX_FREERTOS_Init+0x17c>)

	/* definition and creation of m_lrf_state */
	osMutexDef(m_lrf_state);
 80005d4:	9501      	str	r5, [sp, #4]
	m_camera_stateHandle = osMutexCreate(osMutex(m_camera_state));
 80005d6:	4602      	mov	r2, r0
	m_lrf_stateHandle = osMutexCreate(osMutex(m_lrf_state));
 80005d8:	a801      	add	r0, sp, #4
	m_camera_stateHandle = osMutexCreate(osMutex(m_camera_state));
 80005da:	601a      	str	r2, [r3, #0]
	m_lrf_stateHandle = osMutexCreate(osMutex(m_lrf_state));
 80005dc:	f003 ff8e 	bl	80044fc <osMutexCreate>
 80005e0:	4b58      	ldr	r3, [pc, #352]	; (8000744 <MX_FREERTOS_Init+0x180>)
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of cameraNotifTimer */
	osTimerDef(cameraNotifTimer, osTimerCameraNotifCallback);
 80005e2:	4c59      	ldr	r4, [pc, #356]	; (8000748 <MX_FREERTOS_Init+0x184>)
	m_lrf_stateHandle = osMutexCreate(osMutex(m_lrf_state));
 80005e4:	6018      	str	r0, [r3, #0]
	cameraNotifTimerHandle = osTimerCreate(osTimer(cameraNotifTimer), osTimerPeriodic, NULL);
 80005e6:	462a      	mov	r2, r5
 80005e8:	2101      	movs	r1, #1
 80005ea:	a802      	add	r0, sp, #8
	osTimerDef(cameraNotifTimer, osTimerCameraNotifCallback);
 80005ec:	9402      	str	r4, [sp, #8]
	cameraNotifTimerHandle = osTimerCreate(osTimer(cameraNotifTimer), osTimerPeriodic, NULL);
 80005ee:	f003 ff17 	bl	8004420 <osTimerCreate>
 80005f2:	4b56      	ldr	r3, [pc, #344]	; (800074c <MX_FREERTOS_Init+0x188>)

	/* definition and creation of cameraTimeoutTimer */
	osTimerDef(cameraTimeoutTimer, osTimerCameraTimeoutCallback);
 80005f4:	4c56      	ldr	r4, [pc, #344]	; (8000750 <MX_FREERTOS_Init+0x18c>)
	cameraNotifTimerHandle = osTimerCreate(osTimer(cameraNotifTimer), osTimerPeriodic, NULL);
 80005f6:	6018      	str	r0, [r3, #0]
	cameraTimeoutTimerHandle = osTimerCreate(osTimer(cameraTimeoutTimer), osTimerOnce, NULL);
 80005f8:	462a      	mov	r2, r5
 80005fa:	4629      	mov	r1, r5
 80005fc:	a803      	add	r0, sp, #12
	osTimerDef(cameraTimeoutTimer, osTimerCameraTimeoutCallback);
 80005fe:	9403      	str	r4, [sp, #12]
	cameraTimeoutTimerHandle = osTimerCreate(osTimer(cameraTimeoutTimer), osTimerOnce, NULL);
 8000600:	f003 ff0e 	bl	8004420 <osTimerCreate>
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <MX_FREERTOS_Init+0x190>)

	/* definition and creation of lrfNotifTimer */
	osTimerDef(lrfNotifTimer, osTimerLrfNotifCallback);
 8000606:	4c54      	ldr	r4, [pc, #336]	; (8000758 <MX_FREERTOS_Init+0x194>)
	cameraTimeoutTimerHandle = osTimerCreate(osTimer(cameraTimeoutTimer), osTimerOnce, NULL);
 8000608:	6018      	str	r0, [r3, #0]
	lrfNotifTimerHandle = osTimerCreate(osTimer(lrfNotifTimer), osTimerPeriodic, NULL);
 800060a:	462a      	mov	r2, r5
 800060c:	2101      	movs	r1, #1
 800060e:	a804      	add	r0, sp, #16
	osTimerDef(lrfNotifTimer, osTimerLrfNotifCallback);
 8000610:	9404      	str	r4, [sp, #16]
	lrfNotifTimerHandle = osTimerCreate(osTimer(lrfNotifTimer), osTimerPeriodic, NULL);
 8000612:	f003 ff05 	bl	8004420 <osTimerCreate>
 8000616:	4b51      	ldr	r3, [pc, #324]	; (800075c <MX_FREERTOS_Init+0x198>)

	/* definition and creation of lrfTimeoutTimer */
	osTimerDef(lrfTimeoutTimer, osTimerLrfTimeoutCallback);
 8000618:	4951      	ldr	r1, [pc, #324]	; (8000760 <MX_FREERTOS_Init+0x19c>)
 800061a:	9105      	str	r1, [sp, #20]
	lrfTimeoutTimerHandle = osTimerCreate(osTimer(lrfTimeoutTimer), osTimerOnce, NULL);
 800061c:	462a      	mov	r2, r5
	lrfNotifTimerHandle = osTimerCreate(osTimer(lrfNotifTimer), osTimerPeriodic, NULL);
 800061e:	6018      	str	r0, [r3, #0]
	lrfTimeoutTimerHandle = osTimerCreate(osTimer(lrfTimeoutTimer), osTimerOnce, NULL);
 8000620:	4629      	mov	r1, r5
 8000622:	a805      	add	r0, sp, #20
 8000624:	f003 fefc 	bl	8004420 <osTimerCreate>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of q_camera */
	osMessageQDef(q_camera, 6, uint8_t);
 8000628:	4c4e      	ldr	r4, [pc, #312]	; (8000764 <MX_FREERTOS_Init+0x1a0>)
	lrfTimeoutTimerHandle = osTimerCreate(osTimer(lrfTimeoutTimer), osTimerOnce, NULL);
 800062a:	4a4f      	ldr	r2, [pc, #316]	; (8000768 <MX_FREERTOS_Init+0x1a4>)
 800062c:	6010      	str	r0, [r2, #0]
	osMessageQDef(q_camera, 6, uint8_t);
 800062e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000632:	ab06      	add	r3, sp, #24
 8000634:	e883 0003 	stmia.w	r3, {r0, r1}
	q_cameraHandle = osMessageCreate(osMessageQ(q_camera), NULL);
 8000638:	4629      	mov	r1, r5
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fff0 	bl	8004620 <osMessageCreate>
 8000640:	4a4a      	ldr	r2, [pc, #296]	; (800076c <MX_FREERTOS_Init+0x1a8>)
 8000642:	6010      	str	r0, [r2, #0]

	/* definition and creation of q_lrf */
	osMessageQDef(q_lrf, 6, uint8_t);
 8000644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000648:	ab08      	add	r3, sp, #32
 800064a:	e883 0003 	stmia.w	r3, {r0, r1}
	q_lrfHandle = osMessageCreate(osMessageQ(q_lrf), NULL);
 800064e:	4629      	mov	r1, r5
 8000650:	4618      	mov	r0, r3
 8000652:	f003 ffe5 	bl	8004620 <osMessageCreate>

	/* definition and creation of q_manager */
	osMessageQDef(q_manager, 6, uint16_t);
 8000656:	f104 0308 	add.w	r3, r4, #8
	q_lrfHandle = osMessageCreate(osMessageQ(q_lrf), NULL);
 800065a:	4606      	mov	r6, r0
	osMessageQDef(q_manager, 6, uint16_t);
 800065c:	e893 0003 	ldmia.w	r3, {r0, r1}
	q_lrfHandle = osMessageCreate(osMessageQ(q_lrf), NULL);
 8000660:	4a43      	ldr	r2, [pc, #268]	; (8000770 <MX_FREERTOS_Init+0x1ac>)
	osMessageQDef(q_manager, 6, uint16_t);
 8000662:	ab0a      	add	r3, sp, #40	; 0x28
 8000664:	e883 0003 	stmia.w	r3, {r0, r1}
	q_managerHandle = osMessageCreate(osMessageQ(q_manager), NULL);
 8000668:	4629      	mov	r1, r5
 800066a:	4618      	mov	r0, r3
	q_lrfHandle = osMessageCreate(osMessageQ(q_lrf), NULL);
 800066c:	6016      	str	r6, [r2, #0]
	q_managerHandle = osMessageCreate(osMessageQ(q_manager), NULL);
 800066e:	f003 ffd7 	bl	8004620 <osMessageCreate>
 8000672:	4b40      	ldr	r3, [pc, #256]	; (8000774 <MX_FREERTOS_Init+0x1b0>)
}

static void mail_set_bus_recv()
{
	/* Create the mail queue used by the bus_recv tasks to pass the struct Bus_Rx_Buffer_t */
	osMailQDef(mail, 5, Bus_Rx_Buffer_t); /* Define mail queue */
 8000674:	ae1b      	add	r6, sp, #108	; 0x6c
	q_managerHandle = osMessageCreate(osMessageQ(q_manager), NULL);
 8000676:	6018      	str	r0, [r3, #0]
	osMailQDef(mail, 5, Bus_Rx_Buffer_t); /* Define mail queue */
 8000678:	2205      	movs	r2, #5
 800067a:	234c      	movs	r3, #76	; 0x4c
	mail_bus_recv = osMailCreate(osMailQ(mail), NULL); /* create mail queue */
 800067c:	4629      	mov	r1, r5
 800067e:	a820      	add	r0, sp, #128	; 0x80
	osMailQDef(mail, 5, Bus_Rx_Buffer_t); /* Define mail queue */
 8000680:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000684:	9622      	str	r6, [sp, #136]	; 0x88
	mail_bus_recv = osMailCreate(osMailQ(mail), NULL); /* create mail queue */
 8000686:	f004 f841 	bl	800470c <osMailCreate>
 800068a:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MX_FREERTOS_Init+0x1b4>)
	osThreadDef(TManager, t_manager, osPriorityHigh, 0, 256);
 800068c:	f104 0e10 	add.w	lr, r4, #16
	mail_bus_recv = osMailCreate(osMailQ(mail), NULL); /* create mail queue */
 8000690:	6018      	str	r0, [r3, #0]
	osThreadDef(TManager, t_manager, osPriorityHigh, 0, 256);
 8000692:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000696:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800069a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800069e:	f8de 3000 	ldr.w	r3, [lr]
 80006a2:	f8cc 3000 	str.w	r3, [ip]
	TManagerHandle = osThreadCreate(osThread(TManager), NULL);
 80006a6:	4629      	mov	r1, r5
 80006a8:	a80c      	add	r0, sp, #48	; 0x30
 80006aa:	f003 fe89 	bl	80043c0 <osThreadCreate>
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <MX_FREERTOS_Init+0x1b8>)
	osThreadDef(TBusSend, t_bus_send, osPriorityLow, 0, 256);
 80006b0:	f104 0e24 	add.w	lr, r4, #36	; 0x24
	TManagerHandle = osThreadCreate(osThread(TManager), NULL);
 80006b4:	6018      	str	r0, [r3, #0]
	osThreadDef(TBusSend, t_bus_send, osPriorityLow, 0, 256);
 80006b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80006ba:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80006be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006c2:	f8de 3000 	ldr.w	r3, [lr]
 80006c6:	f8cc 3000 	str.w	r3, [ip]
	TBusSendHandle = osThreadCreate(osThread(TBusSend), NULL);
 80006ca:	4629      	mov	r1, r5
 80006cc:	a811      	add	r0, sp, #68	; 0x44
 80006ce:	f003 fe77 	bl	80043c0 <osThreadCreate>
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_FREERTOS_Init+0x1bc>)
	osThreadDef(TCamera, t_camera, osPriorityBelowNormal, 0, 768);
 80006d4:	f104 0e38 	add.w	lr, r4, #56	; 0x38
	TBusSendHandle = osThreadCreate(osThread(TBusSend), NULL);
 80006d8:	6018      	str	r0, [r3, #0]
	osThreadDef(TCamera, t_camera, osPriorityBelowNormal, 0, 768);
 80006da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80006de:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 80006e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e6:	f8de 3000 	ldr.w	r3, [lr]
 80006ea:	f8cc 3000 	str.w	r3, [ip]
	TCameraHandle = osThreadCreate(osThread(TCamera), NULL);
 80006ee:	4629      	mov	r1, r5
 80006f0:	a816      	add	r0, sp, #88	; 0x58
 80006f2:	f003 fe65 	bl	80043c0 <osThreadCreate>
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_FREERTOS_Init+0x1c0>)
	osThreadDef(TLrf, t_lrf, osPriorityNormal, 0, 512);
 80006f8:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
	TCameraHandle = osThreadCreate(osThread(TCamera), NULL);
 80006fc:	6018      	str	r0, [r3, #0]
	osThreadDef(TLrf, t_lrf, osPriorityNormal, 0, 512);
 80006fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000702:	46b4      	mov	ip, r6
 8000704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000708:	f8de 3000 	ldr.w	r3, [lr]
 800070c:	f8cc 3000 	str.w	r3, [ip]
	TLrfHandle = osThreadCreate(osThread(TLrf), NULL);
 8000710:	4629      	mov	r1, r5
 8000712:	4630      	mov	r0, r6
 8000714:	f003 fe54 	bl	80043c0 <osThreadCreate>
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_FREERTOS_Init+0x1c4>)
	osThreadDef(TBusRecv, t_bus_recv, osPriorityAboveNormal, 0, 512);
 800071a:	3460      	adds	r4, #96	; 0x60
	TLrfHandle = osThreadCreate(osThread(TLrf), NULL);
 800071c:	6018      	str	r0, [r3, #0]
	osThreadDef(TBusRecv, t_bus_recv, osPriorityAboveNormal, 0, 512);
 800071e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000720:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8000724:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	f8cc 3000 	str.w	r3, [ip]
	TBusRecvHandle = osThreadCreate(osThread(TBusRecv), NULL);
 800072e:	4629      	mov	r1, r5
 8000730:	a820      	add	r0, sp, #128	; 0x80
 8000732:	f003 fe45 	bl	80043c0 <osThreadCreate>
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_FREERTOS_Init+0x1c8>)
 8000738:	6018      	str	r0, [r3, #0]
}
 800073a:	b026      	add	sp, #152	; 0x98
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	bf00      	nop
 8000740:	200000d8 	.word	0x200000d8
 8000744:	200000dc 	.word	0x200000dc
 8000748:	08007595 	.word	0x08007595
 800074c:	200000c8 	.word	0x200000c8
 8000750:	080075a9 	.word	0x080075a9
 8000754:	200000cc 	.word	0x200000cc
 8000758:	08007961 	.word	0x08007961
 800075c:	200000d0 	.word	0x200000d0
 8000760:	08007975 	.word	0x08007975
 8000764:	08009d00 	.word	0x08009d00
 8000768:	200000d4 	.word	0x200000d4
 800076c:	200000e4 	.word	0x200000e4
 8000770:	200000e8 	.word	0x200000e8
 8000774:	200000ec 	.word	0x200000ec
 8000778:	200000e0 	.word	0x200000e0
 800077c:	200000c4 	.word	0x200000c4
 8000780:	200000b8 	.word	0x200000b8
 8000784:	200000bc 	.word	0x200000bc
 8000788:	200000c0 	.word	0x200000c0
 800078c:	200000b4 	.word	0x200000b4

08000790 <opt_get_timer>:
	switch (tID)
 8000790:	2803      	cmp	r0, #3
 8000792:	d80f      	bhi.n	80007b4 <opt_get_timer+0x24>
 8000794:	e8df f000 	tbb	[pc, r0]
 8000798:	0205080b 	.word	0x0205080b
		return lrfTimeoutTimerHandle;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <opt_get_timer+0x28>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	4770      	bx	lr
		return lrfNotifTimerHandle;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <opt_get_timer+0x2c>)
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	4770      	bx	lr
		return cameraTimeoutTimerHandle;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <opt_get_timer+0x30>)
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	4770      	bx	lr
		return cameraNotifTimerHandle;
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <opt_get_timer+0x34>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	4770      	bx	lr
	switch (tID)
 80007b4:	2000      	movs	r0, #0
}
 80007b6:	4770      	bx	lr
 80007b8:	200000d4 	.word	0x200000d4
 80007bc:	200000d0 	.word	0x200000d0
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	200000c8 	.word	0x200000c8

080007c8 <opt_get_queue>:
	switch (qID)
 80007c8:	2801      	cmp	r0, #1
 80007ca:	d004      	beq.n	80007d6 <opt_get_queue+0xe>
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d008      	beq.n	80007e2 <opt_get_queue+0x1a>
 80007d0:	b120      	cbz	r0, 80007dc <opt_get_queue+0x14>
 80007d2:	2000      	movs	r0, #0
}
 80007d4:	4770      	bx	lr
		return q_lrfHandle;
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <opt_get_queue+0x20>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	4770      	bx	lr
		return q_cameraHandle;
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <opt_get_queue+0x24>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	4770      	bx	lr
		return q_managerHandle;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <opt_get_queue+0x28>)
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	4770      	bx	lr
 80007e8:	200000e8 	.word	0x200000e8
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	200000ec 	.word	0x200000ec

080007f4 <opt_get_mutex>:
	switch (mID)
 80007f4:	b130      	cbz	r0, 8000804 <opt_get_mutex+0x10>
 80007f6:	2801      	cmp	r0, #1
 80007f8:	d102      	bne.n	8000800 <opt_get_mutex+0xc>
		return m_lrf_stateHandle;
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <opt_get_mutex+0x18>)
 80007fc:	6818      	ldr	r0, [r3, #0]
}
 80007fe:	4770      	bx	lr
	switch (mID)
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
		return m_camera_stateHandle;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <opt_get_mutex+0x1c>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	200000dc 	.word	0x200000dc
 8000810:	200000d8 	.word	0x200000d8

08000814 <opt_get_bus_mail>:
	return mail_bus_recv;
 8000814:	4b01      	ldr	r3, [pc, #4]	; (800081c <opt_get_bus_mail+0x8>)
}
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200000e0 	.word	0x200000e0

08000820 <HAL_Delay>:
}

void HAL_Delay(uint32_t Delay)
{
	osDelay(Delay);
 8000820:	f003 bdf6 	b.w	8004410 <osDelay>

08000824 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_DMA_Init+0x40>)
{
 8000826:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000828:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800082a:	f041 0104 	orr.w	r1, r1, #4
 800082e:	6499      	str	r1, [r3, #72]	; 0x48
 8000830:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 8000832:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000834:	f004 0404 	and.w	r4, r4, #4
 8000838:	9400      	str	r4, [sp, #0]
 800083a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800083e:	f044 0401 	orr.w	r4, r4, #1
 8000842:	649c      	str	r4, [r3, #72]	; 0x48
 8000844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800084c:	200b      	movs	r0, #11
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000854:	f000 fe20 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000858:	200b      	movs	r0, #11

}
 800085a:	b002      	add	sp, #8
 800085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000860:	f000 be58 	b.w	8001514 <HAL_NVIC_EnableIRQ>
 8000864:	40021000 	.word	0x40021000

08000868 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_FDCAN1_Init+0x48>)
{
 800086a:	b510      	push	{r4, lr}
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800086c:	2200      	movs	r2, #0
  hfdcan1.Instance = FDCAN1;
 800086e:	4c11      	ldr	r4, [pc, #68]	; (80008b4 <MX_FDCAN1_Init+0x4c>)
 8000870:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.NominalPrescaler = 1;
  hfdcan1.Init.NominalSyncJumpWidth = 22;
  hfdcan1.Init.NominalTimeSeg1 = 147;
  hfdcan1.Init.NominalTimeSeg2 = 22;
  hfdcan1.Init.DataPrescaler = 1;
  hfdcan1.Init.DataSyncJumpWidth = 8;
 8000872:	2308      	movs	r3, #8
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000874:	2101      	movs	r1, #1
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000876:	f44f 7440 	mov.w	r4, #768	; 0x300
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800087a:	60c2      	str	r2, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800087c:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 800087e:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.DataTimeSeg1 = 8;
  hfdcan1.Init.DataTimeSeg2 = 8;
  hfdcan1.Init.StdFiltersNbr = 28;
  hfdcan1.Init.ExtFiltersNbr = 8;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000880:	63c2      	str	r2, [r0, #60]	; 0x3c
  hfdcan1.Init.StdFiltersNbr = 28;
 8000882:	221c      	movs	r2, #28
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000884:	e9c0 1401 	strd	r1, r4, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 8;
 8000888:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hfdcan1.Init.NominalSyncJumpWidth = 22;
 800088c:	2416      	movs	r4, #22
  hfdcan1.Init.StdFiltersNbr = 28;
 800088e:	e9c0 320c 	strd	r3, r2, [r0, #48]	; 0x30
  hfdcan1.Init.ExtFiltersNbr = 8;
 8000892:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.NominalTimeSeg1 = 147;
 8000894:	2393      	movs	r3, #147	; 0x93
  hfdcan1.Init.NominalPrescaler = 1;
 8000896:	6141      	str	r1, [r0, #20]
  hfdcan1.Init.DataPrescaler = 1;
 8000898:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalSyncJumpWidth = 22;
 800089a:	6184      	str	r4, [r0, #24]
  hfdcan1.Init.NominalTimeSeg2 = 22;
 800089c:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.NominalTimeSeg1 = 147;
 800089e:	61c3      	str	r3, [r0, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008a0:	f000 fffc 	bl	800189c <HAL_FDCAN_Init>
 80008a4:	b900      	cbnz	r0, 80008a8 <MX_FDCAN1_Init+0x40>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008a6:	bd10      	pop	{r4, pc}
 80008a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80008ac:	f000 ba4a 	b.w	8000d44 <Error_Handler>
 80008b0:	200000f0 	.word	0x200000f0
 80008b4:	40006400 	.word	0x40006400

080008b8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4604      	mov	r4, r0
 80008bc:	b09c      	sub	sp, #112	; 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	2254      	movs	r2, #84	; 0x54
 80008c2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80008c8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80008cc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ce:	f008 f929 	bl	8008b24 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <HAL_FDCAN_MspInit+0xbc>)
 80008d4:	6822      	ldr	r2, [r4, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d001      	beq.n	80008de <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80008da:	b01c      	add	sp, #112	; 0x70
 80008dc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008e8:	9207      	str	r2, [sp, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008ea:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	f002 f9c6 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d13b      	bne.n	800096c <HAL_FDCAN_MspInit+0xb4>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_FDCAN_MspInit+0xc0>)
 80008f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008fc:	659a      	str	r2, [r3, #88]	; 0x58
 80008fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000900:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800090a:	f042 0201 	orr.w	r2, r2, #1
 800090e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091c:	2302      	movs	r3, #2
 800091e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000922:	2409      	movs	r4, #9
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000926:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800092a:	2201      	movs	r2, #1
 800092c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000932:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f001 fbed 	bl	8002114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800093a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093e:	2302      	movs	r3, #2
 8000940:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000946:	2303      	movs	r3, #3
 8000948:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800094e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000952:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f001 fbde 	bl	8002114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2105      	movs	r1, #5
 800095c:	2015      	movs	r0, #21
 800095e:	f000 fd9b 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000962:	2015      	movs	r0, #21
 8000964:	f000 fdd6 	bl	8001514 <HAL_NVIC_EnableIRQ>
}
 8000968:	b01c      	add	sp, #112	; 0x70
 800096a:	bd10      	pop	{r4, pc}
      Error_Handler();
 800096c:	f000 f9ea 	bl	8000d44 <Error_Handler>
 8000970:	e7c0      	b.n	80008f4 <HAL_FDCAN_MspInit+0x3c>
 8000972:	bf00      	nop
 8000974:	40006400 	.word	0x40006400
 8000978:	40021000 	.word	0x40021000

0800097c <MX_GPIO_Init>:
     PB1   ------> QUADSPI1_BK1_IO0
     PC10   ------> UART4_TX
     PC11   ------> UART4_RX
*/
void MX_GPIO_Init(void)
{
 800097c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	2400      	movs	r4, #0
{
 8000982:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000988:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b70      	ldr	r3, [pc, #448]	; (8000b50 <MX_GPIO_Init+0x1d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_SELECT_GPIO_Port, CAMERA_SELECT_Pin, GPIO_PIN_RESET);
 8000992:	4d70      	ldr	r5, [pc, #448]	; (8000b54 <MX_GPIO_Init+0x1d8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LRF_ENABLE_GPIO_Port, LRF_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8000994:	4e70      	ldr	r6, [pc, #448]	; (8000b58 <MX_GPIO_Init+0x1dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	f042 0204 	orr.w	r2, r2, #4
 800099a:	64da      	str	r2, [r3, #76]	; 0x4c
 800099c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800099e:	f002 0204 	and.w	r2, r2, #4
 80009a2:	9200      	str	r2, [sp, #0]
 80009a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a8:	f042 0220 	orr.w	r2, r2, #32
 80009ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009b0:	f002 0220 	and.w	r2, r2, #32
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009be:	64da      	str	r2, [r3, #76]	; 0x4c
 80009c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80009c6:	9202      	str	r2, [sp, #8]
 80009c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009cc:	f042 0201 	orr.w	r2, r2, #1
 80009d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80009d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d4:	f002 0201 	and.w	r2, r2, #1
 80009d8:	9203      	str	r2, [sp, #12]
 80009da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009de:	f042 0202 	orr.w	r2, r2, #2
 80009e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80009e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e6:	f002 0202 	and.w	r2, r2, #2
 80009ea:	9204      	str	r2, [sp, #16]
 80009ec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f0:	f042 0208 	orr.w	r2, r2, #8
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(CAMERA_SELECT_GPIO_Port, CAMERA_SELECT_Pin, GPIO_PIN_RESET);
 80009fe:	4622      	mov	r2, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(CAMERA_SELECT_GPIO_Port, CAMERA_SELECT_Pin, GPIO_PIN_RESET);
 8000a08:	f001 fc7c 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LRF_ENABLE_GPIO_Port, LRF_ENABLE_Pin, GPIO_PIN_SET);
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2104      	movs	r1, #4
 8000a12:	f001 fc77 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8000a16:	4630      	mov	r0, r6
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	f001 fc71 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(THERMAL_ENABLE_GPIO_Port, THERMAL_ENABLE_Pin, GPIO_PIN_RESET);
 8000a22:	4622      	mov	r2, r4
 8000a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 fc6a 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_SELECT_Pin;
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	2301      	movs	r3, #1
 8000a36:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAMERA_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	a906      	add	r1, sp, #24
 8000a3c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CAMERA_SELECT_Pin;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2300      	movs	r3, #0
 8000a42:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(CAMERA_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f001 fb65 	bl	8002114 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	a906      	add	r1, sp, #24
 8000a4c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8000a4e:	f24c 32f8 	movw	r2, #50168	; 0xc3f8
 8000a52:	2303      	movs	r3, #3
 8000a54:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f001 fb5b 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a64:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a66:	483d      	ldr	r0, [pc, #244]	; (8000b5c <MX_GPIO_Init+0x1e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	9408      	str	r4, [sp, #32]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LRF_ENABLE_Pin;
 8000a6a:	f04f 0800 	mov.w	r8, #0
 8000a6e:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a72:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f001 fb4d 	bl	8002114 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LRF_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	a906      	add	r1, sp, #24
 8000a7c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LRF_ENABLE_Pin;
 8000a7e:	2204      	movs	r2, #4
 8000a80:	2301      	movs	r3, #1
 8000a82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000a86:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(LRF_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f001 fb43 	bl	8002114 <HAL_GPIO_Init>
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a90:	f240 1233 	movw	r2, #307	; 0x133
 8000a94:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  /*Configure GPIO pins : PA2 PA3 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a9e:	270a      	movs	r7, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f001 fb37 	bl	8002114 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000aa8:	22cc      	movs	r2, #204	; 0xcc
 8000aaa:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000ab0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000ab4:	e9cd 8908 	strd	r8, r9, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ab8:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f001 fb2b 	bl	8002114 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	a906      	add	r1, sp, #24
 8000ac0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000aca:	e9cd 8908 	strd	r8, r9, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ace:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f001 fb20 	bl	8002114 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	a906      	add	r1, sp, #24
 8000ad6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000ad8:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 8000adc:	2303      	movs	r3, #3
 8000ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f001 fb16 	bl	8002114 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	a906      	add	r1, sp, #24
 8000aea:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000aec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af0:	2301      	movs	r3, #1
 8000af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000af6:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f001 fb0b 	bl	8002114 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = THERMAL_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(THERMAL_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000afe:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = THERMAL_ENABLE_Pin;
 8000b00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b04:	2301      	movs	r3, #1
  HAL_GPIO_Init(THERMAL_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = THERMAL_ENABLE_Pin;
 8000b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000b0e:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(THERMAL_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f001 faff 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RXD_Pin|IMU_TXD_Pin;
 8000b16:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000b20:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	4628      	mov	r0, r5
 8000b24:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000b26:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = IMU_RXD_Pin|IMU_TXD_Pin;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f001 faf0 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot0_Pin;
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Boot0_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	a906      	add	r1, sp, #24
 8000b3c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = Boot0_Pin;
 8000b3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Boot0_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f001 fae6 	bl	8002114 <HAL_GPIO_Init>

}
 8000b48:	b00d      	add	sp, #52	; 0x34
 8000b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000800 	.word	0x48000800
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48001800 	.word	0x48001800

08000b60 <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <MX_IWDG_Init+0x24>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000b62:	4909      	ldr	r1, [pc, #36]	; (8000b88 <MX_IWDG_Init+0x28>)
{
 8000b64:	b508      	push	{r3, lr}
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000b66:	2203      	movs	r2, #3
  hiwdg.Init.Window = 2000;
 8000b68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000b6c:	e9c0 1200 	strd	r1, r2, [r0]
  hiwdg.Init.Reload = 2000;
 8000b70:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b74:	f001 fbd6 	bl	8002324 <HAL_IWDG_Init>
 8000b78:	b900      	cbnz	r0, 8000b7c <MX_IWDG_Init+0x1c>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b7a:	bd08      	pop	{r3, pc}
 8000b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b80:	f000 b8e0 	b.w	8000d44 <Error_Handler>
 8000b84:	20000154 	.word	0x20000154
 8000b88:	40003000 	.word	0x40003000
 8000b8c:	00000000 	.word	0x00000000

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b500      	push	{lr}
 8000b92:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b94:	2238      	movs	r2, #56	; 0x38
 8000b96:	2100      	movs	r1, #0
 8000b98:	a806      	add	r0, sp, #24
 8000b9a:	f007 ffc3 	bl	8008b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	e9cd 0000 	strd	r0, r0, [sp]
 8000ba4:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8000ba8:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000baa:	f001 fbed 	bl	8002388 <HAL_PWREx_ControlVoltageScaling>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000bb4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c10 <SystemClock_Config+0x80>
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bc4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bc6:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000bca:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bce:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bd6:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f001 fc5b 	bl	8002494 <HAL_RCC_OscConfig>
 8000bde:	b108      	cbz	r0, 8000be4 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000be2:	e7fe      	b.n	8000be2 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000c18 <SystemClock_Config+0x88>
 8000be8:	ed8d 7b00 	vstr	d7, [sp]
 8000bec:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000c20 <SystemClock_Config+0x90>
 8000bf0:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfc:	f001 fece 	bl	800299c <HAL_RCC_ClockConfig>
 8000c00:	b108      	cbz	r0, 8000c06 <SystemClock_Config+0x76>
 8000c02:	b672      	cpsid	i
	while (1) {
 8000c04:	e7fe      	b.n	8000c04 <SystemClock_Config+0x74>
  HAL_RCC_EnableCSS();
 8000c06:	f002 f821 	bl	8002c4c <HAL_RCC_EnableCSS>
}
 8000c0a:	b015      	add	sp, #84	; 0x54
 8000c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c10:	0000000b 	.word	0x0000000b
 8000c14:	00010000 	.word	0x00010000
 8000c18:	0000000f 	.word	0x0000000f
 8000c1c:	00000003 	.word	0x00000003
	...

08000c28 <main>:
{
 8000c28:	b508      	push	{r3, lr}
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <main+0xec>)
 8000c2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	db56      	blt.n	8000ce2 <main+0xba>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000c34:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000c38:	0050      	lsls	r0, r2, #1
 8000c3a:	d40f      	bmi.n	8000c5c <main+0x34>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000c3c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000c40:	0091      	lsls	r1, r2, #2
 8000c42:	d465      	bmi.n	8000d10 <main+0xe8>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000c44:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	d45f      	bmi.n	8000d0c <main+0xe4>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		ret = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000c50:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000c54:	bf0c      	ite	eq
 8000c56:	2300      	moveq	r3, #0
 8000c58:	2305      	movne	r3, #5
 8000c5a:	e000      	b.n	8000c5e <main+0x36>
		ret = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000c5c:	2302      	movs	r3, #2
	g_reset_cause = get_reset_source();
 8000c5e:	4c2e      	ldr	r4, [pc, #184]	; (8000d18 <main+0xf0>)
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c60:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <main+0xec>)
	g_reset_cause = get_reset_source();
 8000c62:	7023      	strb	r3, [r4, #0]
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c64:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  HAL_Init();
 8000c70:	f000 fbde 	bl	8001430 <HAL_Init>
  SystemClock_Config();
 8000c74:	f7ff ff8c 	bl	8000b90 <SystemClock_Config>
  MX_GPIO_Init();
 8000c78:	f7ff fe80 	bl	800097c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c7c:	f000 f9dc 	bl	8001038 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c80:	f000 fa1e 	bl	80010c0 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000c84:	f7ff fdf0 	bl	8000868 <MX_FDCAN1_Init>
  MX_DMA_Init();
 8000c88:	f7ff fdcc 	bl	8000824 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000c8c:	f000 f944 	bl	8000f18 <MX_LPUART1_UART_Init>
  MX_UART5_Init();
 8000c90:	f000 f98e 	bl	8000fb0 <MX_UART5_Init>
  MX_IWDG_Init();
 8000c94:	f7ff ff64 	bl	8000b60 <MX_IWDG_Init>
	retarget_init();
 8000c98:	f007 fc1c 	bl	80084d4 <retarget_init>
	LOG("====\r\n");
 8000c9c:	f000 fbe4 	bl	8001468 <HAL_GetTick>
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <main+0xf4>)
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	2388      	movs	r3, #136	; 0x88
 8000ca6:	481e      	ldr	r0, [pc, #120]	; (8000d20 <main+0xf8>)
 8000ca8:	f007 ff44 	bl	8008b34 <iprintf>
	LOG("Optronik firmware!\r\n");
 8000cac:	f000 fbdc 	bl	8001468 <HAL_GetTick>
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <main+0xf4>)
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	2389      	movs	r3, #137	; 0x89
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <main+0xfc>)
 8000cb8:	f007 ff3c 	bl	8008b34 <iprintf>
	LOG("====\r\n");
 8000cbc:	f000 fbd4 	bl	8001468 <HAL_GetTick>
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <main+0xf4>)
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	238a      	movs	r3, #138	; 0x8a
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <main+0xf8>)
 8000cc8:	f007 ff34 	bl	8008b34 <iprintf>
			|| (g_reset_cause == RESET_CAUSE_SOFTWARE_RESET)) {
 8000ccc:	7823      	ldrb	r3, [r4, #0]
	if ((g_reset_cause == RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET)
 8000cce:	1eda      	subs	r2, r3, #3
 8000cd0:	2a01      	cmp	r2, #1
 8000cd2:	d908      	bls.n	8000ce6 <main+0xbe>
	if (g_reset_cause == RESET_CAUSE_EXTERNAL_RESET_PIN_RESET)
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d010      	beq.n	8000cfa <main+0xd2>
  MX_FREERTOS_Init();
 8000cd8:	f7ff fc74 	bl	80005c4 <MX_FREERTOS_Init>
  osKernelStart();
 8000cdc:	f003 fb62 	bl	80043a4 <osKernelStart>
	while (1) {
 8000ce0:	e7fe      	b.n	8000ce0 <main+0xb8>
		ret = RESET_CAUSE_LOW_POWER_RESET;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e7bb      	b.n	8000c5e <main+0x36>
		LOG("system is reset from IWDG or s/w reset!\r\n");
 8000ce6:	f000 fbbf 	bl	8001468 <HAL_GetTick>
 8000cea:	238e      	movs	r3, #142	; 0x8e
 8000cec:	4601      	mov	r1, r0
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <main+0xf4>)
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <main+0x100>)
 8000cf2:	f007 ff1f 	bl	8008b34 <iprintf>
	if (g_reset_cause == RESET_CAUSE_EXTERNAL_RESET_PIN_RESET)
 8000cf6:	7823      	ldrb	r3, [r4, #0]
 8000cf8:	e7ec      	b.n	8000cd4 <main+0xac>
		LOG("do you reset this chip?\r\n");
 8000cfa:	f000 fbb5 	bl	8001468 <HAL_GetTick>
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <main+0xf4>)
 8000d00:	4601      	mov	r1, r0
 8000d02:	2392      	movs	r3, #146	; 0x92
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <main+0x104>)
 8000d06:	f007 ff15 	bl	8008b34 <iprintf>
 8000d0a:	e7e5      	b.n	8000cd8 <main+0xb0>
		ret = RESET_CAUSE_SOFTWARE_RESET;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e7a6      	b.n	8000c5e <main+0x36>
		ret = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e7a4      	b.n	8000c5e <main+0x36>
 8000d14:	40021000 	.word	0x40021000
 8000d18:	20000164 	.word	0x20000164
 8000d1c:	08009db0 	.word	0x08009db0
 8000d20:	08009db8 	.word	0x08009db8
 8000d24:	08009dcc 	.word	0x08009dcc
 8000d28:	08009df0 	.word	0x08009df0
 8000d2c:	08009e28 	.word	0x08009e28

08000d30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM20) {
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000d32:	6802      	ldr	r2, [r0, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d000      	beq.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000d38:	4770      	bx	lr
    HAL_IncTick();
 8000d3a:	f000 bb89 	b.w	8001450 <HAL_IncTick>
 8000d3e:	bf00      	nop
 8000d40:	40015000 	.word	0x40015000

08000d44 <Error_Handler>:
 8000d44:	b672      	cpsid	i
	while (1) {
 8000d46:	e7fe      	b.n	8000d46 <Error_Handler+0x2>

08000d48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x40>)
{
 8000d4a:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000d4e:	f040 0001 	orr.w	r0, r0, #1
 8000d52:	6618      	str	r0, [r3, #96]	; 0x60
 8000d54:	6e1c      	ldr	r4, [r3, #96]	; 0x60
{
 8000d56:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	f004 0401 	and.w	r4, r4, #1
 8000d5c:	9400      	str	r4, [sp, #0]
 8000d5e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8000d62:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000d66:	659c      	str	r4, [r3, #88]	; 0x58
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	210f      	movs	r1, #15
 8000d74:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7a:	f000 fb8d 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	b002      	add	sp, #8
 8000d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d84:	f001 bb7e 	b.w	8002484 <HAL_PWREx_DisableUCPDDeadBattery>
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_InitTick+0x80>)
{
 8000d8e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM20_CLK_ENABLE();
 8000d90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  uwTimclock = HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8000d92:	4c1f      	ldr	r4, [pc, #124]	; (8000e10 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM20_CLK_ENABLE();
 8000d94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d98:	661a      	str	r2, [r3, #96]	; 0x60
 8000d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8000d9c:	b088      	sub	sp, #32
  __HAL_RCC_TIM20_CLK_ENABLE();
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM20_CLK_ENABLE();
 8000da4:	9302      	str	r3, [sp, #8]
{
 8000da6:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM20_CLK_ENABLE();
 8000daa:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dac:	f001 ff2c 	bl	8002c08 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000db0:	f001 ff18 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_InitTick+0x88>)
  htim20.Instance = TIM20;
 8000db6:	4918      	ldr	r1, [pc, #96]	; (8000e18 <HAL_InitTick+0x8c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db8:	fba2 2300 	umull	r2, r3, r2, r0
 8000dbc:	0c9b      	lsrs	r3, r3, #18
 8000dbe:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000U / 1000U) - 1U;
  htim20.Init.Prescaler = uwPrescalerValue;
  htim20.Init.ClockDivision = 0;
 8000dc0:	2200      	movs	r2, #0
  htim20.Init.Prescaler = uwPrescalerValue;
 8000dc2:	e9c4 1300 	strd	r1, r3, [r4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim20);
 8000dc6:	4620      	mov	r0, r4
  htim20.Init.Period = (1000000U / 1000U) - 1U;
 8000dc8:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim20.Init.ClockDivision = 0;
 8000dcc:	6122      	str	r2, [r4, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	60a2      	str	r2, [r4, #8]
  htim20.Init.Period = (1000000U / 1000U) - 1U;
 8000dd0:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim20);
 8000dd2:	f002 f8dd 	bl	8002f90 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000dd6:	4605      	mov	r5, r0
 8000dd8:	b110      	cbz	r0, 8000de0 <HAL_InitTick+0x54>
      }
    }
  }
 /* Return function status */
  return status;
}
 8000dda:	4628      	mov	r0, r5
 8000ddc:	b008      	add	sp, #32
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim20);
 8000de0:	4620      	mov	r0, r4
 8000de2:	f002 f96f 	bl	80030c4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000de6:	4605      	mov	r5, r0
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d1f6      	bne.n	8000dda <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM20_UP_IRQn);
 8000dec:	204e      	movs	r0, #78	; 0x4e
 8000dee:	f000 fb91 	bl	8001514 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	2e0f      	cmp	r6, #15
 8000df4:	d901      	bls.n	8000dfa <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 8000df6:	2501      	movs	r5, #1
 8000df8:	e7ef      	b.n	8000dda <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority, 0U);
 8000dfa:	462a      	mov	r2, r5
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	204e      	movs	r0, #78	; 0x4e
 8000e00:	f000 fb4a 	bl	8001498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_InitTick+0x90>)
 8000e06:	601e      	str	r6, [r3, #0]
 8000e08:	e7e7      	b.n	8000dda <HAL_InitTick+0x4e>
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	20000168 	.word	0x20000168
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40015000 	.word	0x40015000
 8000e1c:	20000008 	.word	0x20000008

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000e22:	f001 ff1d 	bl	8002c60 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000e26:	e7fe      	b.n	8000e26 <NMI_Handler+0x6>

08000e28 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <HardFault_Handler>
 8000e2a:	bf00      	nop

08000e2c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler>
 8000e2e:	bf00      	nop

08000e30 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <BusFault_Handler>
 8000e32:	bf00      	nop

08000e34 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler>
 8000e36:	bf00      	nop

08000e38 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e3c:	4801      	ldr	r0, [pc, #4]	; (8000e44 <DMA1_Channel1_IRQHandler+0x8>)
 8000e3e:	f000 bcdf 	b.w	8001800 <HAL_DMA_IRQHandler>
 8000e42:	bf00      	nop
 8000e44:	200001b8 	.word	0x200001b8

08000e48 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e48:	4801      	ldr	r0, [pc, #4]	; (8000e50 <FDCAN1_IT0_IRQHandler+0x8>)
 8000e4a:	f001 b89f 	b.w	8001f8c <HAL_FDCAN_IRQHandler>
 8000e4e:	bf00      	nop
 8000e50:	200000f0 	.word	0x200000f0

08000e54 <TIM20_UP_IRQHandler>:
void TIM20_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 8000e54:	4801      	ldr	r0, [pc, #4]	; (8000e5c <TIM20_UP_IRQHandler+0x8>)
 8000e56:	f002 b97f 	b.w	8003158 <HAL_TIM_IRQHandler>
 8000e5a:	bf00      	nop
 8000e5c:	20000168 	.word	0x20000168

08000e60 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e60:	4801      	ldr	r0, [pc, #4]	; (8000e68 <LPUART1_IRQHandler+0x8>)
 8000e62:	f002 bbdd 	b.w	8003620 <HAL_UART_IRQHandler>
 8000e66:	bf00      	nop
 8000e68:	20000218 	.word	0x20000218

08000e6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	1e16      	subs	r6, r2, #0
 8000e70:	dd07      	ble.n	8000e82 <_read+0x16>
 8000e72:	460c      	mov	r4, r1
 8000e74:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000e76:	f007 fb4d 	bl	8008514 <__io_getchar>
 8000e7a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	42a5      	cmp	r5, r4
 8000e80:	d1f9      	bne.n	8000e76 <_read+0xa>
	}

return len;
}
 8000e82:	4630      	mov	r0, r6
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
 8000e86:	bf00      	nop

08000e88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e88:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	1e16      	subs	r6, r2, #0
 8000e8c:	dd07      	ble.n	8000e9e <_write+0x16>
 8000e8e:	460c      	mov	r4, r1
 8000e90:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000e92:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000e96:	f007 fb37 	bl	8008508 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	42ac      	cmp	r4, r5
 8000e9c:	d1f9      	bne.n	8000e92 <_write+0xa>
	}
	return len;
}
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
 8000ea2:	bf00      	nop

08000ea4 <_close>:

int _close(int file)
{
	return -1;
}
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	4770      	bx	lr

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec2:	4c0c      	ldr	r4, [pc, #48]	; (8000ef4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <_sbrk+0x38>)
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000ec8:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eca:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8000ecc:	b12a      	cbz	r2, 8000eda <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4410      	add	r0, r2
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	d807      	bhi.n	8000ee4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ed4:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <_sbrk+0x40>)
 8000edc:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4410      	add	r0, r2
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	d9f7      	bls.n	8000ed4 <_sbrk+0x14>
    errno = ENOMEM;
 8000ee4:	f007 fde6 	bl	8008ab4 <__errno>
 8000ee8:	230c      	movs	r3, #12
    return (void *)-1;
 8000eea:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8000eee:	6003      	str	r3, [r0, #0]
}
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	bd10      	pop	{r4, pc}
 8000ef4:	200001b4 	.word	0x200001b4
 8000ef8:	20020000 	.word	0x20020000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	200107f8 	.word	0x200107f8

08000f04 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <SystemInit+0x10>)
 8000f06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f18:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8000fa0 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 8000f1c:	4822      	ldr	r0, [pc, #136]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f1e:	4923      	ldr	r1, [pc, #140]	; (8000fac <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 115200;
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
{
 8000f24:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 8000f28:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000f2e:	2110      	movs	r1, #16
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f34:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f38:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f40:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000f42:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f44:	63c2      	str	r2, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f46:	f003 f89f 	bl	8004088 <HAL_UART_Init>
 8000f4a:	b970      	cbnz	r0, 8000f6a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4c:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f003 f97e 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8000f54:	b988      	cbnz	r0, 8000f7a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f003 f9bb 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f5e:	b9a0      	cbnz	r0, 8000f8a <MX_LPUART1_UART_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f62:	f003 f957 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 8000f66:	b9b8      	cbnz	r0, 8000f98 <MX_LPUART1_UART_Init+0x80>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f68:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f6a:	f7ff feeb 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	f003 f96d 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d0ed      	beq.n	8000f56 <MX_LPUART1_UART_Init+0x3e>
    Error_Handler();
 8000f7a:	f7ff fee3 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	f003 f9a7 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d0ea      	beq.n	8000f60 <MX_LPUART1_UART_Init+0x48>
    Error_Handler();
 8000f8a:	f7ff fedb 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_LPUART1_UART_Init+0x90>)
 8000f90:	f003 f940 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d0e7      	beq.n	8000f68 <MX_LPUART1_UART_Init+0x50>
}
 8000f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000f9c:	f7ff bed2 	b.w	8000d44 <Error_Handler>
	...
 8000fa8:	20000218 	.word	0x20000218
 8000fac:	40008000 	.word	0x40008000

08000fb0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000fb0:	b510      	push	{r4, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000fb2:	481f      	ldr	r0, [pc, #124]	; (8001030 <MX_UART5_Init+0x80>)
 8000fb4:	4c1f      	ldr	r4, [pc, #124]	; (8001034 <MX_UART5_Init+0x84>)
  huart5.Init.BaudRate = 38400;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	2300      	movs	r3, #0
  huart5.Init.BaudRate = 38400;
 8000fb8:	f44f 4116 	mov.w	r1, #38400	; 0x9600
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 38400;
 8000fbe:	e9c0 4100 	strd	r4, r1, [r0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000fc2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000fc6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fca:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fce:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fd4:	f003 f858 	bl	8004088 <HAL_UART_Init>
 8000fd8:	b970      	cbnz	r0, 8000ff8 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <MX_UART5_Init+0x80>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f003 f937 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe2:	b988      	cbnz	r0, 8001008 <MX_UART5_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <MX_UART5_Init+0x80>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f003 f974 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000fec:	b9a0      	cbnz	r0, 8001018 <MX_UART5_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000fee:	4810      	ldr	r0, [pc, #64]	; (8001030 <MX_UART5_Init+0x80>)
 8000ff0:	f003 f910 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 8000ff4:	b9b8      	cbnz	r0, 8001026 <MX_UART5_Init+0x76>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ff6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ff8:	f7ff fea4 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_UART5_Init+0x80>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	f003 f926 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	2800      	cmp	r0, #0
 8001006:	d0ed      	beq.n	8000fe4 <MX_UART5_Init+0x34>
    Error_Handler();
 8001008:	f7ff fe9c 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <MX_UART5_Init+0x80>)
 800100e:	2100      	movs	r1, #0
 8001010:	f003 f960 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001014:	2800      	cmp	r0, #0
 8001016:	d0ea      	beq.n	8000fee <MX_UART5_Init+0x3e>
    Error_Handler();
 8001018:	f7ff fe94 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_UART5_Init+0x80>)
 800101e:	f003 f8f9 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 8001022:	2800      	cmp	r0, #0
 8001024:	d0e7      	beq.n	8000ff6 <MX_UART5_Init+0x46>
}
 8001026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800102a:	f7ff be8b 	b.w	8000d44 <Error_Handler>
 800102e:	bf00      	nop
 8001030:	200003c8 	.word	0x200003c8
 8001034:	40005000 	.word	0x40005000

08001038 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001038:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800103a:	481f      	ldr	r0, [pc, #124]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 800103c:	4c1f      	ldr	r4, [pc, #124]	; (80010bc <MX_USART1_UART_Init+0x84>)
  huart1.Init.BaudRate = 921600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 921600;
 8001040:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 8001046:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800104a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800104e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001052:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001056:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105c:	f003 f814 	bl	8004088 <HAL_UART_Init>
 8001060:	b970      	cbnz	r0, 8001080 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001062:	4815      	ldr	r0, [pc, #84]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 8001064:	2100      	movs	r1, #0
 8001066:	f003 f8f3 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 800106a:	b988      	cbnz	r0, 8001090 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 800106e:	2100      	movs	r1, #0
 8001070:	f003 f930 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001074:	b9a0      	cbnz	r0, 80010a0 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 8001078:	f003 f8cc 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 800107c:	b9b8      	cbnz	r0, 80010ae <MX_USART1_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001080:	f7ff fe60 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 8001086:	2100      	movs	r1, #0
 8001088:	f003 f8e2 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 800108c:	2800      	cmp	r0, #0
 800108e:	d0ed      	beq.n	800106c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8001090:	f7ff fe58 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 8001096:	2100      	movs	r1, #0
 8001098:	f003 f91c 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 800109c:	2800      	cmp	r0, #0
 800109e:	d0ea      	beq.n	8001076 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 80010a0:	f7ff fe50 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_USART1_UART_Init+0x80>)
 80010a6:	f003 f8b5 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d0e7      	beq.n	800107e <MX_USART1_UART_Init+0x46>
}
 80010ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80010b2:	f7ff be47 	b.w	8000d44 <Error_Handler>
 80010b6:	bf00      	nop
 80010b8:	200002a8 	.word	0x200002a8
 80010bc:	40013800 	.word	0x40013800

080010c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010c0:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c2:	481f      	ldr	r0, [pc, #124]	; (8001140 <MX_USART2_UART_Init+0x80>)
 80010c4:	4c1f      	ldr	r4, [pc, #124]	; (8001144 <MX_USART2_UART_Init+0x84>)
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 38400;
 80010c8:	f44f 4116 	mov.w	r1, #38400	; 0x9600
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 38400;
 80010ce:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010da:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010de:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e4:	f002 ffd0 	bl	8004088 <HAL_UART_Init>
 80010e8:	b970      	cbnz	r0, 8001108 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_USART2_UART_Init+0x80>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	f003 f8af 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 80010f2:	b988      	cbnz	r0, 8001118 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f4:	4812      	ldr	r0, [pc, #72]	; (8001140 <MX_USART2_UART_Init+0x80>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	f003 f8ec 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 80010fc:	b9a0      	cbnz	r0, 8001128 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010fe:	4810      	ldr	r0, [pc, #64]	; (8001140 <MX_USART2_UART_Init+0x80>)
 8001100:	f003 f888 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 8001104:	b9b8      	cbnz	r0, 8001136 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001108:	f7ff fe1c 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_USART2_UART_Init+0x80>)
 800110e:	2100      	movs	r1, #0
 8001110:	f003 f89e 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8001114:	2800      	cmp	r0, #0
 8001116:	d0ed      	beq.n	80010f4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001118:	f7ff fe14 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x80>)
 800111e:	2100      	movs	r1, #0
 8001120:	f003 f8d8 	bl	80042d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001124:	2800      	cmp	r0, #0
 8001126:	d0ea      	beq.n	80010fe <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001128:	f7ff fe0c 	bl	8000d44 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_USART2_UART_Init+0x80>)
 800112e:	f003 f871 	bl	8004214 <HAL_UARTEx_DisableFifoMode>
 8001132:	2800      	cmp	r0, #0
 8001134:	d0e7      	beq.n	8001106 <MX_USART2_UART_Init+0x46>
}
 8001136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800113a:	f7ff be03 	b.w	8000d44 <Error_Handler>
 800113e:	bf00      	nop
 8001140:	20000338 	.word	0x20000338
 8001144:	40004400 	.word	0x40004400

08001148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	4604      	mov	r4, r0
 800114c:	b0a4      	sub	sp, #144	; 0x90

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	2254      	movs	r2, #84	; 0x54
 8001152:	a80f      	add	r0, sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8001158:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 800115c:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115e:	f007 fce1 	bl	8008b24 <memset>
  if(uartHandle->Instance==LPUART1)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	4a93      	ldr	r2, [pc, #588]	; (80013b4 <HAL_UART_MspInit+0x26c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d04b      	beq.n	8001202 <HAL_UART_MspInit+0xba>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 800116a:	4a93      	ldr	r2, [pc, #588]	; (80013b8 <HAL_UART_MspInit+0x270>)
 800116c:	4293      	cmp	r3, r2
 800116e:	f000 809e 	beq.w	80012ae <HAL_UART_MspInit+0x166>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8001172:	4a92      	ldr	r2, [pc, #584]	; (80013bc <HAL_UART_MspInit+0x274>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f000 80e3 	beq.w	8001340 <HAL_UART_MspInit+0x1f8>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800117a:	4a91      	ldr	r2, [pc, #580]	; (80013c0 <HAL_UART_MspInit+0x278>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001180:	b024      	add	sp, #144	; 0x90
 8001182:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001184:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001186:	a80f      	add	r0, sp, #60	; 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001188:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118a:	f001 fd77 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 800118e:	2800      	cmp	r0, #0
 8001190:	f040 810d 	bne.w	80013ae <HAL_UART_MspInit+0x266>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001194:	4b8b      	ldr	r3, [pc, #556]	; (80013c4 <HAL_UART_MspInit+0x27c>)
    HAL_GPIO_Init(SONY_RXD_GPIO_Port, &GPIO_InitStruct);
 8001196:	488c      	ldr	r0, [pc, #560]	; (80013c8 <HAL_UART_MspInit+0x280>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800119a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800119e:	659a      	str	r2, [r3, #88]	; 0x58
 80011a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011a2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80011a6:	9208      	str	r2, [sp, #32]
 80011a8:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ac:	f042 0202 	orr.w	r2, r2, #2
 80011b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = SONY_RXD_Pin;
 80011ba:	2208      	movs	r2, #8
 80011bc:	2302      	movs	r3, #2
 80011be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c2:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c6:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(SONY_RXD_GPIO_Port, &GPIO_InitStruct);
 80011c8:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = SONY_RXD_Pin;
 80011ca:	2200      	movs	r2, #0
 80011cc:	2303      	movs	r3, #3
 80011ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(SONY_RXD_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f000 ff9f 	bl	8002114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SONY_TXD_Pin;
 80011d6:	2210      	movs	r2, #16
 80011d8:	2302      	movs	r3, #2
 80011da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(SONY_TXD_GPIO_Port, &GPIO_InitStruct);
 80011de:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = SONY_TXD_Pin;
 80011e0:	2303      	movs	r3, #3
 80011e2:	2201      	movs	r2, #1
    HAL_GPIO_Init(SONY_TXD_GPIO_Port, &GPIO_InitStruct);
 80011e4:	4878      	ldr	r0, [pc, #480]	; (80013c8 <HAL_UART_MspInit+0x280>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e6:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = SONY_TXD_Pin;
 80011e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(SONY_TXD_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f000 ff92 	bl	8002114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011f0:	2026      	movs	r0, #38	; 0x26
 80011f2:	2200      	movs	r2, #0
 80011f4:	2105      	movs	r1, #5
 80011f6:	f000 f94f 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011fa:	2026      	movs	r0, #38	; 0x26
 80011fc:	f000 f98a 	bl	8001514 <HAL_NVIC_EnableIRQ>
}
 8001200:	e7be      	b.n	8001180 <HAL_UART_MspInit+0x38>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001202:	2220      	movs	r2, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001204:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	a80f      	add	r0, sp, #60	; 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800120a:	920f      	str	r2, [sp, #60]	; 0x3c
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800120c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120e:	f001 fd35 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8001212:	2800      	cmp	r0, #0
 8001214:	f040 80c2 	bne.w	800139c <HAL_UART_MspInit+0x254>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_UART_MspInit+0x27c>)
    HAL_GPIO_Init(LRF_TXD_GPIO_Port, &GPIO_InitStruct);
 800121a:	486c      	ldr	r0, [pc, #432]	; (80013cc <HAL_UART_MspInit+0x284>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800121c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800121e:	4d6c      	ldr	r5, [pc, #432]	; (80013d0 <HAL_UART_MspInit+0x288>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	65da      	str	r2, [r3, #92]	; 0x5c
 8001226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001228:	f002 0201 	and.w	r2, r2, #1
 800122c:	9201      	str	r2, [sp, #4]
 800122e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001232:	f042 0204 	orr.w	r2, r2, #4
 8001236:	64da      	str	r2, [r3, #76]	; 0x4c
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = LRF_TXD_Pin;
 800123e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001242:	2608      	movs	r6, #8
    GPIO_InitStruct.Pin = LRF_TXD_Pin;
 8001244:	2302      	movs	r3, #2
    HAL_GPIO_Init(LRF_TXD_GPIO_Port, &GPIO_InitStruct);
 8001246:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = LRF_TXD_Pin;
 8001248:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800124c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001250:	960e      	str	r6, [sp, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(LRF_TXD_GPIO_Port, &GPIO_InitStruct);
 8001254:	f000 ff5e 	bl	8002114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LRF_RXD_Pin;
 8001258:	2202      	movs	r2, #2
 800125a:	2302      	movs	r3, #2
 800125c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(LRF_RXD_GPIO_Port, &GPIO_InitStruct);
 8001260:	485a      	ldr	r0, [pc, #360]	; (80013cc <HAL_UART_MspInit+0x284>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001262:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = LRF_RXD_Pin;
 8001264:	2200      	movs	r2, #0
 8001266:	2302      	movs	r3, #2
    HAL_GPIO_Init(LRF_RXD_GPIO_Port, &GPIO_InitStruct);
 8001268:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = LRF_RXD_Pin;
 800126a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(LRF_RXD_GPIO_Port, &GPIO_InitStruct);
 800126e:	f000 ff51 	bl	8002114 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001272:	4958      	ldr	r1, [pc, #352]	; (80013d4 <HAL_UART_MspInit+0x28c>)
 8001274:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001276:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001278:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800127c:	4628      	mov	r0, r5
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127e:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001280:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001288:	e9c5 3306 	strd	r3, r3, [r5, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800128e:	f000 f94f 	bl	8001530 <HAL_DMA_Init>
 8001292:	2800      	cmp	r0, #0
 8001294:	d17f      	bne.n	8001396 <HAL_UART_MspInit+0x24e>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800129a:	67e5      	str	r5, [r4, #124]	; 0x7c
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800129c:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800129e:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80012a0:	f000 f8fa 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80012a4:	205b      	movs	r0, #91	; 0x5b
 80012a6:	f000 f935 	bl	8001514 <HAL_NVIC_EnableIRQ>
}
 80012aa:	b024      	add	sp, #144	; 0x90
 80012ac:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80012ae:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	a80f      	add	r0, sp, #60	; 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80012b2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f001 fce2 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d172      	bne.n	80013a2 <HAL_UART_MspInit+0x25a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_UART_MspInit+0x27c>)
    HAL_GPIO_Init(THERMAL_RXD_GPIO_Port, &GPIO_InitStruct);
 80012be:	4843      	ldr	r0, [pc, #268]	; (80013cc <HAL_UART_MspInit+0x284>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80012c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012c6:	659a      	str	r2, [r3, #88]	; 0x58
 80012c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80012ce:	9203      	str	r2, [sp, #12]
 80012d0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012dc:	f002 0204 	and.w	r2, r2, #4
 80012e0:	9204      	str	r2, [sp, #16]
 80012e2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e6:	f042 0208 	orr.w	r2, r2, #8
 80012ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = THERMAL_RXD_Pin;
 80012f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f8:	2302      	movs	r3, #2
 80012fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80012fe:	2405      	movs	r4, #5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001300:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001302:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(THERMAL_RXD_GPIO_Port, &GPIO_InitStruct);
 8001304:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = THERMAL_RXD_Pin;
 8001306:	2200      	movs	r2, #0
 8001308:	2303      	movs	r3, #3
 800130a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(THERMAL_RXD_GPIO_Port, &GPIO_InitStruct);
 800130e:	f000 ff01 	bl	8002114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = THERMAL_TXD_Pin;
 8001312:	2204      	movs	r2, #4
 8001314:	2302      	movs	r3, #2
 8001316:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(THERMAL_TXD_GPIO_Port, &GPIO_InitStruct);
 800131a:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = THERMAL_TXD_Pin;
 800131c:	2303      	movs	r3, #3
 800131e:	2201      	movs	r2, #1
    HAL_GPIO_Init(THERMAL_TXD_GPIO_Port, &GPIO_InitStruct);
 8001320:	482d      	ldr	r0, [pc, #180]	; (80013d8 <HAL_UART_MspInit+0x290>)
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001322:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = THERMAL_TXD_Pin;
 8001324:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(THERMAL_TXD_GPIO_Port, &GPIO_InitStruct);
 8001328:	f000 fef4 	bl	8002114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	4621      	mov	r1, r4
 8001330:	2035      	movs	r0, #53	; 0x35
 8001332:	f000 f8b1 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001336:	2035      	movs	r0, #53	; 0x35
 8001338:	f000 f8ec 	bl	8001514 <HAL_NVIC_EnableIRQ>
}
 800133c:	b024      	add	sp, #144	; 0x90
 800133e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001340:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	a80f      	add	r0, sp, #60	; 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001344:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	f001 fc99 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 800134a:	bb68      	cbnz	r0, 80013a8 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART1_CLK_ENABLE();
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0x27c>)
 800134e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001350:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001354:	661a      	str	r2, [r3, #96]	; 0x60
 8001356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001358:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800135c:	9206      	str	r2, [sp, #24]
 800135e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	64da      	str	r2, [r3, #76]	; 0x4c
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800136a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800136e:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001374:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800137e:	2401      	movs	r4, #1
 8001380:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001386:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	9a07      	ldr	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800138c:	930e      	str	r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f000 fec1 	bl	8002114 <HAL_GPIO_Init>
}
 8001392:	b024      	add	sp, #144	; 0x90
 8001394:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001396:	f7ff fcd5 	bl	8000d44 <Error_Handler>
 800139a:	e77c      	b.n	8001296 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 800139c:	f7ff fcd2 	bl	8000d44 <Error_Handler>
 80013a0:	e73a      	b.n	8001218 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80013a2:	f7ff fccf 	bl	8000d44 <Error_Handler>
 80013a6:	e789      	b.n	80012bc <HAL_UART_MspInit+0x174>
      Error_Handler();
 80013a8:	f7ff fccc 	bl	8000d44 <Error_Handler>
 80013ac:	e7ce      	b.n	800134c <HAL_UART_MspInit+0x204>
      Error_Handler();
 80013ae:	f7ff fcc9 	bl	8000d44 <Error_Handler>
 80013b2:	e6ef      	b.n	8001194 <HAL_UART_MspInit+0x4c>
 80013b4:	40008000 	.word	0x40008000
 80013b8:	40005000 	.word	0x40005000
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48000800 	.word	0x48000800
 80013d0:	200001b8 	.word	0x200001b8
 80013d4:	40020008 	.word	0x40020008
 80013d8:	48000c00 	.word	0x48000c00

080013dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001406:	f7ff fd7d 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f007 fb59 	bl	8008ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140e:	f7ff fc0b 	bl	8000c28 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   r0, =_estack
 8001414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001420:	0800a4dc 	.word	0x0800a4dc
  ldr r2, =_sbss
 8001424:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001428:	200107f4 	.word	0x200107f4

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 f81e 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001438:	200f      	movs	r0, #15
 800143a:	f7ff fca7 	bl	8000d8c <HAL_InitTick>
 800143e:	b110      	cbz	r0, 8001446 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8001440:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8001442:	4620      	mov	r0, r4
 8001444:	bd10      	pop	{r4, pc}
 8001446:	4604      	mov	r4, r0
    HAL_MspInit();
 8001448:	f7ff fc7e 	bl	8000d48 <HAL_MspInit>
}
 800144c:	4620      	mov	r0, r4
 800144e:	bd10      	pop	{r4, pc}

08001450 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001450:	4a03      	ldr	r2, [pc, #12]	; (8001460 <HAL_IncTick+0x10>)
 8001452:	4904      	ldr	r1, [pc, #16]	; (8001464 <HAL_IncTick+0x14>)
 8001454:	6813      	ldr	r3, [r2, #0]
 8001456:	6809      	ldr	r1, [r1, #0]
 8001458:	440b      	add	r3, r1
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000458 	.word	0x20000458
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <HAL_GetTick+0x8>)
 800146a:	6818      	ldr	r0, [r3, #0]
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000458 	.word	0x20000458

08001474 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001476:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001486:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800148e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_NVIC_SetPriority+0x74>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a2:	f1c3 0e07 	rsb	lr, r3, #7
 80014a6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ae:	bf28      	it	cs
 80014b0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b4:	f1bc 0f06 	cmp.w	ip, #6
 80014b8:	d91b      	bls.n	80014f2 <HAL_NVIC_SetPriority+0x5a>
 80014ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 3cff 	mov.w	ip, #4294967295
 80014c0:	fa0c fc03 	lsl.w	ip, ip, r3
 80014c4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 3cff 	mov.w	ip, #4294967295
 80014cc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80014d0:	ea21 010c 	bic.w	r1, r1, ip
 80014d4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80014d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80014dc:	db0c      	blt.n	80014f8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80014e2:	0109      	lsls	r1, r1, #4
 80014e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80014e8:	b2c9      	uxtb	r1, r1
 80014ea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f4:	4613      	mov	r3, r2
 80014f6:	e7e7      	b.n	80014c8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_NVIC_SetPriority+0x78>)
 80014fa:	f000 000f 	and.w	r0, r0, #15
 80014fe:	0109      	lsls	r1, r1, #4
 8001500:	4403      	add	r3, r0
 8001502:	b2c9      	uxtb	r1, r1
 8001504:	7619      	strb	r1, [r3, #24]
 8001506:	f85d fb04 	ldr.w	pc, [sp], #4
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	e000ecfc 	.word	0xe000ecfc

08001514 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001514:	2800      	cmp	r0, #0
 8001516:	db08      	blt.n	800152a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_NVIC_EnableIRQ+0x18>)
 800151a:	0941      	lsrs	r1, r0, #5
 800151c:	2301      	movs	r3, #1
 800151e:	f000 001f 	and.w	r0, r0, #31
 8001522:	fa03 f000 	lsl.w	r0, r3, r0
 8001526:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100

08001530 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001530:	2800      	cmp	r0, #0
 8001532:	d078      	beq.n	8001626 <HAL_DMA_Init+0xf6>
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_DMA_Init+0xfc>)
 8001538:	6804      	ldr	r4, [r0, #0]
 800153a:	429c      	cmp	r4, r3
 800153c:	d95f      	bls.n	80015fe <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800153e:	4a3c      	ldr	r2, [pc, #240]	; (8001630 <HAL_DMA_Init+0x100>)
 8001540:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8001542:	493d      	ldr	r1, [pc, #244]	; (8001638 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001544:	4422      	add	r2, r4
 8001546:	fba3 3202 	umull	r3, r2, r3, r2
 800154a:	0912      	lsrs	r2, r2, #4
 800154c:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800154e:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001550:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001552:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001556:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001558:	69c6      	ldr	r6, [r0, #28]
 800155a:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155e:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8001560:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001562:	430b      	orrs	r3, r1
 8001564:	6941      	ldr	r1, [r0, #20]
 8001566:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	6981      	ldr	r1, [r0, #24]
 800156a:	430b      	orrs	r3, r1
 800156c:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800156e:	fa5f fc84 	uxtb.w	ip, r4
 8001572:	4e30      	ldr	r6, [pc, #192]	; (8001634 <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 8001574:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001576:	f1ac 0c08 	sub.w	ip, ip, #8
 800157a:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 800157e:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001580:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8001584:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001588:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 800158a:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800158c:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800158e:	4e2b      	ldr	r6, [pc, #172]	; (800163c <HAL_DMA_Init+0x10c>)
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_DMA_Init+0xfc>)
 8001592:	492b      	ldr	r1, [pc, #172]	; (8001640 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001594:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001598:	429c      	cmp	r4, r3
 800159a:	bf98      	it	ls
 800159c:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800159e:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015a2:	4c28      	ldr	r4, [pc, #160]	; (8001644 <HAL_DMA_Init+0x114>)
 80015a4:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015a6:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015aa:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015ac:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015b0:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015b2:	6484      	str	r4, [r0, #72]	; 0x48
 80015b4:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015b8:	d02a      	beq.n	8001610 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015ba:	6845      	ldr	r5, [r0, #4]
 80015bc:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015be:	3d01      	subs	r5, #1
 80015c0:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015c2:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015ca:	d827      	bhi.n	800161c <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015ce:	491f      	ldr	r1, [pc, #124]	; (800164c <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015d0:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015d2:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015d4:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015d6:	f004 041f 	and.w	r4, r4, #31
 80015da:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015de:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015e0:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015e4:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015e6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_DMA_Init+0x120>)
 80015ea:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ec:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80015ee:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80015f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80015f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80015fa:	4618      	mov	r0, r3
}
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <HAL_DMA_Init+0x124>)
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8001602:	4915      	ldr	r1, [pc, #84]	; (8001658 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001604:	4422      	add	r2, r4
 8001606:	fba3 3202 	umull	r3, r2, r3, r2
 800160a:	0912      	lsrs	r2, r2, #4
 800160c:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800160e:	e79e      	b.n	800154e <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001610:	2400      	movs	r4, #0
 8001612:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001614:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001618:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 800161c:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800161e:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001622:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001624:	e7e2      	b.n	80015ec <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8001626:	2001      	movs	r0, #1
}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40020407 	.word	0x40020407
 8001630:	bffdfbf8 	.word	0xbffdfbf8
 8001634:	cccccccd 	.word	0xcccccccd
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020820 	.word	0x40020820
 8001644:	40020880 	.word	0x40020880
 8001648:	1000823f 	.word	0x1000823f
 800164c:	40020940 	.word	0x40020940
 8001650:	40020900 	.word	0x40020900
 8001654:	bffdfff8 	.word	0xbffdfff8
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_DMA_Start_IT>:
{
 800165c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800165e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001662:	2c01      	cmp	r4, #1
 8001664:	d051      	beq.n	800170a <HAL_DMA_Start_IT+0xae>
 8001666:	2401      	movs	r4, #1
 8001668:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800166c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001670:	2c01      	cmp	r4, #1
 8001672:	d005      	beq.n	8001680 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8001674:	2300      	movs	r3, #0
 8001676:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800167a:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800167c:	2002      	movs	r0, #2
}
 800167e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	2402      	movs	r4, #2
 8001682:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	2400      	movs	r4, #0
 8001688:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800168a:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 800168e:	6825      	ldr	r5, [r4, #0]
 8001690:	f025 0501 	bic.w	r5, r5, #1
 8001694:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001696:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 800169a:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 800169c:	b115      	cbz	r5, 80016a4 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169e:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 80016a2:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016a4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80016a6:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80016a8:	f006 0c1f 	and.w	ip, r6, #31
 80016ac:	2601      	movs	r6, #1
 80016ae:	fa06 f60c 	lsl.w	r6, r6, ip
 80016b2:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80016b4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b6:	6883      	ldr	r3, [r0, #8]
 80016b8:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80016ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 80016bc:	bf0b      	itete	eq
 80016be:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80016c0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80016c2:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80016c4:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80016c6:	b1bb      	cbz	r3, 80016f8 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	f043 030e 	orr.w	r3, r3, #14
 80016ce:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	03d2      	lsls	r2, r2, #15
 80016d6:	d503      	bpl.n	80016e0 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016de:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80016e0:	b11d      	cbz	r5, 80016ea <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80016f2:	6023      	str	r3, [r4, #0]
}
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	f043 030a 	orr.w	r3, r3, #10
 8001706:	6023      	str	r3, [r4, #0]
 8001708:	e7e2      	b.n	80016d0 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 800170a:	2002      	movs	r0, #2
}
 800170c:	bcf0      	pop	{r4, r5, r6, r7}
 800170e:	4770      	bx	lr

08001710 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001710:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001714:	2a02      	cmp	r2, #2
{
 8001716:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001718:	d009      	beq.n	800172e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	2204      	movs	r2, #4
 800171c:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800171e:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8001720:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8001722:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8001724:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800172c:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001730:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8001732:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001734:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001736:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001738:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	f020 000e 	bic.w	r0, r0, #14
 800173e:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001746:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8001748:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800174a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 800174c:	f020 0001 	bic.w	r0, r0, #1
 8001750:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001752:	f001 011f 	and.w	r1, r1, #31
 8001756:	2201      	movs	r2, #1
 8001758:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175a:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800175e:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001760:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8001762:	b138      	cbz	r0, 8001774 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001764:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001766:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800176a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800176e:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001770:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001772:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001774:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8001776:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001778:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001780:	bc30      	pop	{r4, r5}
 8001782:	4770      	bx	lr

08001784 <HAL_DMA_Abort_IT>:
{
 8001784:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001786:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800178a:	2b02      	cmp	r3, #2
 800178c:	d009      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 800178e:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8001792:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001794:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001796:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 800179e:	4618      	mov	r0, r3
}
 80017a0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017a4:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a6:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80017aa:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	f021 010e 	bic.w	r1, r1, #14
 80017b0:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80017b2:	6819      	ldr	r1, [r3, #0]
 80017b4:	f021 0101 	bic.w	r1, r1, #1
 80017b8:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017ba:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017bc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2301      	movs	r3, #1
 80017ca:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017cc:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017d0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017d2:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80017d4:	b132      	cbz	r2, 80017e4 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017d6:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017d8:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e2:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80017e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80017e8:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80017ee:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80017f2:	b113      	cbz	r3, 80017fa <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 80017f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	4620      	mov	r0, r4
}
 80017f8:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	4618      	mov	r0, r3
}
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
 80017fe:	bf00      	nop

08001800 <HAL_DMA_IRQHandler>:
{
 8001800:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001802:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001804:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001806:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001808:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800180a:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2204      	movs	r2, #4
 8001812:	409a      	lsls	r2, r3
 8001814:	420a      	tst	r2, r1
 8001816:	d00e      	beq.n	8001836 <HAL_DMA_IRQHandler+0x36>
 8001818:	f014 0f04 	tst.w	r4, #4
 800181c:	d00b      	beq.n	8001836 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181e:	682b      	ldr	r3, [r5, #0]
 8001820:	069b      	lsls	r3, r3, #26
 8001822:	d403      	bmi.n	800182c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800182c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800182e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001830:	b1cb      	cbz	r3, 8001866 <HAL_DMA_IRQHandler+0x66>
}
 8001832:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001834:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001836:	2202      	movs	r2, #2
 8001838:	409a      	lsls	r2, r3
 800183a:	420a      	tst	r2, r1
 800183c:	d015      	beq.n	800186a <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800183e:	f014 0f02 	tst.w	r4, #2
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	0699      	lsls	r1, r3, #26
 8001848:	d406      	bmi.n	8001858 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	f023 030a 	bic.w	r3, r3, #10
 8001850:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001852:	2301      	movs	r3, #1
 8001854:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8001858:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800185a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800185c:	2100      	movs	r1, #0
 800185e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e5      	bne.n	8001832 <HAL_DMA_IRQHandler+0x32>
}
 8001866:	bc70      	pop	{r4, r5, r6}
 8001868:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800186a:	2208      	movs	r2, #8
 800186c:	409a      	lsls	r2, r3
 800186e:	420a      	tst	r2, r1
 8001870:	d0f9      	beq.n	8001866 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8001872:	0722      	lsls	r2, r4, #28
 8001874:	d5f7      	bpl.n	8001866 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001876:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8001878:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	f022 020e 	bic.w	r2, r2, #14
 800187e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001880:	2201      	movs	r2, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001886:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001888:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800188a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800188c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001890:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001894:	2900      	cmp	r1, #0
 8001896:	d0e6      	beq.n	8001866 <HAL_DMA_IRQHandler+0x66>
}
 8001898:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800189a:	4708      	bx	r1

0800189c <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800189c:	2800      	cmp	r0, #0
 800189e:	f000 8149 	beq.w	8001b34 <HAL_FDCAN_Init+0x298>
{
 80018a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80018a6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80018aa:	4604      	mov	r4, r0
 80018ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d073      	beq.n	800199c <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6993      	ldr	r3, [r2, #24]
 80018b8:	f023 0310 	bic.w	r3, r3, #16
 80018bc:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018be:	f7ff fdd3 	bl	8001468 <HAL_GetTick>
 80018c2:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018c4:	e004      	b.n	80018d0 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018c6:	f7ff fdcf 	bl	8001468 <HAL_GetTick>
 80018ca:	1b43      	subs	r3, r0, r5
 80018cc:	2b0a      	cmp	r3, #10
 80018ce:	d85b      	bhi.n	8001988 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	0711      	lsls	r1, r2, #28
 80018d6:	d4f6      	bmi.n	80018c6 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e0:	f7ff fdc2 	bl	8001468 <HAL_GetTick>
 80018e4:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018e6:	e004      	b.n	80018f2 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018e8:	f7ff fdbe 	bl	8001468 <HAL_GetTick>
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	280a      	cmp	r0, #10
 80018f0:	d84a      	bhi.n	8001988 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	07d2      	lsls	r2, r2, #31
 80018f8:	d5f6      	bpl.n	80018e8 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018fa:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018fc:	4996      	ldr	r1, [pc, #600]	; (8001b58 <HAL_FDCAN_Init+0x2bc>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018fe:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8001902:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001904:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8001906:	f000 8110 	beq.w	8001b2a <HAL_FDCAN_Init+0x28e>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800190a:	7c22      	ldrb	r2, [r4, #16]
 800190c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	bf0c      	ite	eq
 8001912:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001916:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800191a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800191c:	7c62      	ldrb	r2, [r4, #17]
 800191e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001920:	699a      	ldr	r2, [r3, #24]
 8001922:	bf0c      	ite	eq
 8001924:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001928:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800192c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800192e:	7ca2      	ldrb	r2, [r4, #18]
 8001930:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	bf0c      	ite	eq
 8001936:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800193a:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800193e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001944:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001946:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800194a:	4302      	orrs	r2, r0
 800194c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001954:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001956:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001958:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800195a:	f022 0210 	bic.w	r2, r2, #16
 800195e:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001960:	d021      	beq.n	80019a6 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001962:	b321      	cbz	r1, 80019ae <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001964:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001966:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001968:	f000 80f2 	beq.w	8001b50 <HAL_FDCAN_Init+0x2b4>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800196c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001970:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001972:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001974:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001976:	f042 0210 	orr.w	r2, r2, #16
 800197a:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800197c:	d117      	bne.n	80019ae <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	619a      	str	r2, [r3, #24]
 8001986:	e012      	b.n	80019ae <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001988:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800198a:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001992:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001996:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 800199c:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80019a0:	f7fe ff8a 	bl	80008b8 <HAL_FDCAN_MspInit>
 80019a4:	e786      	b.n	80018b4 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	f042 0204 	orr.w	r2, r2, #4
 80019ac:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ae:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019b2:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019b4:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019b6:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019b8:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019bc:	6a21      	ldr	r1, [r4, #32]
 80019be:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019c0:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019c2:	6961      	ldr	r1, [r4, #20]
 80019c4:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019ca:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ce:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019d0:	d10e      	bne.n	80019f0 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019d2:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019d8:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019da:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019dc:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019de:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019e0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80019e4:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019e8:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019ee:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019f0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80019f6:	4959      	ldr	r1, [pc, #356]	; (8001b5c <HAL_FDCAN_Init+0x2c0>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019f8:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 80019fa:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8001a00:	f000 809a 	beq.w	8001b38 <HAL_FDCAN_Init+0x29c>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001a04:	4a56      	ldr	r2, [pc, #344]	; (8001b60 <HAL_FDCAN_Init+0x2c4>)
 8001a06:	4e57      	ldr	r6, [pc, #348]	; (8001b64 <HAL_FDCAN_Init+0x2c8>)
 8001a08:	4f57      	ldr	r7, [pc, #348]	; (8001b68 <HAL_FDCAN_Init+0x2cc>)
 8001a0a:	4d58      	ldr	r5, [pc, #352]	; (8001b6c <HAL_FDCAN_Init+0x2d0>)
 8001a0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001a10:	428b      	cmp	r3, r1
 8001a12:	bf18      	it	ne
 8001a14:	4691      	movne	r9, r2
 8001a16:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8001a1a:	f1a2 0218 	sub.w	r2, r2, #24
 8001a1e:	f101 0110 	add.w	r1, r1, #16
 8001a22:	bf18      	it	ne
 8001a24:	4616      	movne	r6, r2
 8001a26:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8001a2a:	bf14      	ite	ne
 8001a2c:	4617      	movne	r7, r2
 8001a2e:	468e      	moveq	lr, r1
 8001a30:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8001a34:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8001a38:	bf14      	ite	ne
 8001a3a:	4696      	movne	lr, r2
 8001a3c:	4688      	moveq	r8, r1
 8001a3e:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8001a42:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8001a46:	bf14      	ite	ne
 8001a48:	4690      	movne	r8, r2
 8001a4a:	468c      	moveq	ip, r1
 8001a4c:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8001a50:	f5a1 7154 	sub.w	r1, r1, #848	; 0x350
 8001a54:	bf14      	ite	ne
 8001a56:	4694      	movne	ip, r2
 8001a58:	46a9      	moveq	r9, r5
 8001a5a:	f5a2 7254 	sub.w	r2, r2, #848	; 0x350
 8001a5e:	bf08      	it	eq
 8001a60:	460a      	moveq	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001a62:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8001a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001a68:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001a6a:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8001a6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001a72:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a76:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8001a7a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a7c:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a80:	f10c 30ff 	add.w	r0, ip, #4294967295
 8001a84:	1a80      	subs	r0, r0, r2
 8001a86:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001a8a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 8001a8e:	0885      	lsrs	r5, r0, #2
 8001a90:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a94:	3501      	adds	r5, #1
 8001a96:	1c51      	adds	r1, r2, #1
 8001a98:	458c      	cmp	ip, r1
 8001a9a:	bf38      	it	cc
 8001a9c:	2501      	movcc	r5, #1
 8001a9e:	2817      	cmp	r0, #23

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001aa0:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001aa4:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001aa8:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8001aac:	d91a      	bls.n	8001ae4 <HAL_FDCAN_Init+0x248>
 8001aae:	458c      	cmp	ip, r1
 8001ab0:	bf2c      	ite	cs
 8001ab2:	2100      	movcs	r1, #0
 8001ab4:	2101      	movcc	r1, #1
 8001ab6:	b9a9      	cbnz	r1, 8001ae4 <HAL_FDCAN_Init+0x248>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ab8:	4616      	mov	r6, r2
 8001aba:	b10b      	cbz	r3, 8001ac0 <HAL_FDCAN_Init+0x224>
 8001abc:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ac0:	1aed      	subs	r5, r5, r3
 8001ac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ac6:	086a      	lsrs	r2, r5, #1
 8001ac8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001acc:	2000      	movs	r0, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d1fb      	bne.n	8001ad0 <HAL_FDCAN_Init+0x234>
 8001ad8:	f025 0301 	bic.w	r3, r5, #1
 8001adc:	429d      	cmp	r5, r3
 8001ade:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8001ae2:	d01a      	beq.n	8001b1a <HAL_FDCAN_Init+0x27e>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001aec:	458c      	cmp	ip, r1
 8001aee:	d914      	bls.n	8001b1a <HAL_FDCAN_Init+0x27e>
 8001af0:	f102 0108 	add.w	r1, r2, #8
 8001af4:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001af6:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001af8:	d90f      	bls.n	8001b1a <HAL_FDCAN_Init+0x27e>
 8001afa:	f102 010c 	add.w	r1, r2, #12
 8001afe:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b00:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b02:	d90a      	bls.n	8001b1a <HAL_FDCAN_Init+0x27e>
 8001b04:	f102 0110 	add.w	r1, r2, #16
 8001b08:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b0a:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b0c:	d905      	bls.n	8001b1a <HAL_FDCAN_Init+0x27e>
 8001b0e:	f102 0114 	add.w	r1, r2, #20
 8001b12:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b14:	6113      	str	r3, [r2, #16]
 8001b16:	bf88      	it	hi
 8001b18:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b1a:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b1c:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b1e:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b20:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b24:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8001b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_FDCAN_Init+0x2d4>)
 8001b2c:	6861      	ldr	r1, [r4, #4]
 8001b2e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 8001b32:	e6ea      	b.n	800190a <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8001b34:	2001      	movs	r0, #1
}
 8001b36:	4770      	bx	lr
 8001b38:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001b80 <HAL_FDCAN_Init+0x2e4>
 8001b3c:	4e0d      	ldr	r6, [pc, #52]	; (8001b74 <HAL_FDCAN_Init+0x2d8>)
 8001b3e:	4f0e      	ldr	r7, [pc, #56]	; (8001b78 <HAL_FDCAN_Init+0x2dc>)
 8001b40:	f8df e040 	ldr.w	lr, [pc, #64]	; 8001b84 <HAL_FDCAN_Init+0x2e8>
 8001b44:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001b88 <HAL_FDCAN_Init+0x2ec>
 8001b48:	f8df c040 	ldr.w	ip, [pc, #64]	; 8001b8c <HAL_FDCAN_Init+0x2f0>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_FDCAN_Init+0x2e0>)
 8001b4e:	e788      	b.n	8001a62 <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b50:	f042 0220 	orr.w	r2, r2, #32
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	e72a      	b.n	80019ae <HAL_FDCAN_Init+0x112>
 8001b58:	40006400 	.word	0x40006400
 8001b5c:	40006800 	.word	0x40006800
 8001b60:	4000a678 	.word	0x4000a678
 8001b64:	4000ad00 	.word	0x4000ad00
 8001b68:	4000ac28 	.word	0x4000ac28
 8001b6c:	4000ad18 	.word	0x4000ad18
 8001b70:	40006000 	.word	0x40006000
 8001b74:	4000a9b0 	.word	0x4000a9b0
 8001b78:	4000a8d8 	.word	0x4000a8d8
 8001b7c:	4000a750 	.word	0x4000a750
 8001b80:	4000a9c8 	.word	0x4000a9c8
 8001b84:	4000a800 	.word	0x4000a800
 8001b88:	4000a7c0 	.word	0x4000a7c0
 8001b8c:	4000aaa0 	.word	0x4000aaa0

08001b90 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b90:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b94:	3a01      	subs	r2, #1
 8001b96:	2a01      	cmp	r2, #1
{
 8001b98:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b9a:	d905      	bls.n	8001ba8 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b9c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001b9e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ba4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001ba6:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001ba8:	6808      	ldr	r0, [r1, #0]
{
 8001baa:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001bac:	b978      	cbnz	r0, 8001bce <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 8001bae:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8001bb2:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bb4:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 8001bb8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bba:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001bbc:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bbe:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8001bc0:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8001bc6:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 8001bca:	bc30      	pop	{r4, r5}
 8001bcc:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001bce:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001bd0:	688a      	ldr	r2, [r1, #8]
 8001bd2:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001bd4:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001bd6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001bda:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001bde:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001be2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8001be6:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8001bea:	2000      	movs	r0, #0
}
 8001bec:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8001bee:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8001bf4:	b530      	push	{r4, r5, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001bf6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8001bfa:	2c01      	cmp	r4, #1
{
 8001bfc:	4684      	mov	ip, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001bfe:	d006      	beq.n	8001c0e <HAL_FDCAN_ConfigGlobalFilter+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c00:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c02:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c08:	f8cc 3060 	str.w	r3, [ip, #96]	; 0x60
}
 8001c0c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001c0e:	f8dc 5000 	ldr.w	r5, [ip]
 8001c12:	4696      	mov	lr, r2
 8001c14:	9a03      	ldr	r2, [sp, #12]
 8001c16:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 8001c1a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8001c1e:	ea43 028e 	orr.w	r2, r3, lr, lsl #2
 8001c22:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8001c26:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
 8001c2a:	4319      	orrs	r1, r3
 8001c2c:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
    return HAL_OK;
 8001c30:	2000      	movs	r0, #0
}
 8001c32:	bd30      	pop	{r4, r5, pc}

08001c34 <HAL_FDCAN_ConfigTxDelayCompensation>:
{
 8001c34:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c36:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8001c3a:	2801      	cmp	r0, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_FDCAN_ConfigTxDelayCompensation+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c40:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c46:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001c48:	4770      	bx	lr
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c50:	649a      	str	r2, [r3, #72]	; 0x48
    return HAL_OK;
 8001c52:	2000      	movs	r0, #0
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop

08001c58 <HAL_FDCAN_EnableTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c58:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8001c5c:	2a01      	cmp	r2, #1
{
 8001c5e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c60:	d005      	beq.n	8001c6e <HAL_FDCAN_EnableTxDelayCompensation+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c62:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001c64:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001c6c:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	68d3      	ldr	r3, [r2, #12]
 8001c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    return HAL_OK;
 8001c76:	2000      	movs	r0, #0
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001c78:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001c7a:	4770      	bx	lr

08001c7c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c7c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8001c80:	2a01      	cmp	r2, #1
{
 8001c82:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c84:	d005      	beq.n	8001c92 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c86:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001c88:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8001c8c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001c90:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c92:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c9a:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c9c:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8001ca4:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ca6:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001cae:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001cb2:	2b02      	cmp	r3, #2
{
 8001cb4:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001cb8:	6805      	ldr	r5, [r0, #0]
 8001cba:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8001cbe:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001cc4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001ccc:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cd2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cda:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ce0:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001ce4:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ce6:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13a      	bne.n	8001d64 <HAL_FDCAN_AddMessageToTxFifoQ+0xb8>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8001cee:	688b      	ldr	r3, [r1, #8]
 8001cf0:	690f      	ldr	r7, [r1, #16]
 8001cf2:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8001cf4:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cf6:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cfa:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8001cfe:	694c      	ldr	r4, [r1, #20]
 8001d00:	4303      	orrs	r3, r0
 8001d02:	68c8      	ldr	r0, [r1, #12]
 8001d04:	4323      	orrs	r3, r4
 8001d06:	6a0c      	ldr	r4, [r1, #32]
 8001d08:	4303      	orrs	r3, r0
 8001d0a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d0e:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8001d12:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d16:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d1a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001d1e:	4c15      	ldr	r4, [pc, #84]	; (8001d74 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8001d20:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001d22:	89cb      	ldrh	r3, [r1, #14]
 8001d24:	5ce3      	ldrb	r3, [r4, r3]
 8001d26:	b1a3      	cbz	r3, 8001d52 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d28:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d2a:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d2c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d2e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8001d32:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d34:	433b      	orrs	r3, r7
 8001d36:	7857      	ldrb	r7, [r2, #1]
 8001d38:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d3c:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001d40:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d44:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001d46:	89cb      	ldrh	r3, [r1, #14]
 8001d48:	5ce3      	ldrb	r3, [r4, r3]
 8001d4a:	459c      	cmp	ip, r3
 8001d4c:	f102 0204 	add.w	r2, r2, #4
 8001d50:	d3ea      	bcc.n	8001d28 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001d52:	2301      	movs	r3, #1
 8001d54:	fa03 f606 	lsl.w	r6, r3, r6
 8001d58:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    return HAL_OK;
 8001d5c:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001d5e:	f8ce 6058 	str.w	r6, [lr, #88]	; 0x58
}
 8001d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8001d64:	690b      	ldr	r3, [r1, #16]
 8001d66:	680f      	ldr	r7, [r1, #0]
 8001d68:	431f      	orrs	r7, r3
 8001d6a:	688b      	ldr	r3, [r1, #8]
 8001d6c:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d6e:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8001d72:	e7c2      	b.n	8001cfa <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8001d74:	08009e68 	.word	0x08009e68

08001d78 <HAL_FDCAN_GetRxMessage>:
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d7c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d10d      	bne.n	8001da0 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d84:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001d86:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d8a:	d00f      	beq.n	8001dac <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001d8c:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8001d90:	0700      	lsls	r0, r0, #28
 8001d92:	d15f      	bne.n	8001e54 <HAL_FDCAN_GetRxMessage+0xdc>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8001d9a:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d9c:	6623      	str	r3, [r4, #96]	; 0x60
}
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001da0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001da2:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8001da6:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001da8:	6623      	str	r3, [r4, #96]	; 0x60
}
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001dac:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8001db0:	0705      	lsls	r5, r0, #28
 8001db2:	d0ef      	beq.n	8001d94 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001db4:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001db8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001dba:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001dbe:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8001dc2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001dc6:	6828      	ldr	r0, [r5, #0]
 8001dc8:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8001dcc:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d14f      	bne.n	8001e72 <HAL_FDCAN_GetRxMessage+0xfa>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001dd2:	6828      	ldr	r0, [r5, #0]
 8001dd4:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8001dd8:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001dda:	6828      	ldr	r0, [r5, #0]
 8001ddc:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8001de0:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001de2:	6828      	ldr	r0, [r5, #0]
 8001de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001de8:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001dea:	88a8      	ldrh	r0, [r5, #4]
 8001dec:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001dee:	6868      	ldr	r0, [r5, #4]
 8001df0:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8001df4:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001df6:	686e      	ldr	r6, [r5, #4]
 8001df8:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8001dfc:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001dfe:	686e      	ldr	r6, [r5, #4]
 8001e00:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8001e04:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001e06:	79ee      	ldrb	r6, [r5, #7]
 8001e08:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001e0c:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001e0e:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001e10:	4e1a      	ldr	r6, [pc, #104]	; (8001e7c <HAL_FDCAN_GetRxMessage+0x104>)
 8001e12:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001e16:	6868      	ldr	r0, [r5, #4]
 8001e18:	0fc0      	lsrs	r0, r0, #31
 8001e1a:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001e1c:	f1be 0f00 	cmp.w	lr, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_FDCAN_GetRxMessage+0xcc>
 8001e22:	f103 3eff 	add.w	lr, r3, #4294967295
 8001e26:	f105 0c07 	add.w	ip, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8001e30:	f80e 0f01 	strb.w	r0, [lr, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001e34:	89d0      	ldrh	r0, [r2, #14]
 8001e36:	3b06      	subs	r3, #6
 8001e38:	5c30      	ldrb	r0, [r6, r0]
 8001e3a:	1b5b      	subs	r3, r3, r5
 8001e3c:	4298      	cmp	r0, r3
 8001e3e:	d8f4      	bhi.n	8001e2a <HAL_FDCAN_GetRxMessage+0xb2>
 8001e40:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001e44:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8001e46:	bf0c      	ite	eq
 8001e48:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8001e4c:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8001e50:	2000      	movs	r0, #0
}
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001e54:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001e58:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001e5a:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001e5e:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8001e62:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001e66:	6828      	ldr	r0, [r5, #0]
 8001e68:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8001e6c:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d0af      	beq.n	8001dd2 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001e72:	6828      	ldr	r0, [r5, #0]
 8001e74:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8001e78:	e7ae      	b.n	8001dd8 <HAL_FDCAN_GetRxMessage+0x60>
 8001e7a:	bf00      	nop
 8001e7c:	08009e68 	.word	0x08009e68

08001e80 <HAL_FDCAN_ActivateNotification>:
{
 8001e80:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e82:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e86:	3801      	subs	r0, #1
 8001e88:	2801      	cmp	r0, #1
 8001e8a:	d905      	bls.n	8001e98 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e8e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e94:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001e96:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001e98:	681b      	ldr	r3, [r3, #0]
{
 8001e9a:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001e9c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ea0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ea2:	d03d      	beq.n	8001f20 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ea4:	07c4      	lsls	r4, r0, #31
 8001ea6:	d43b      	bmi.n	8001f20 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001ea8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001eaa:	f044 0401 	orr.w	r4, r4, #1
 8001eae:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001eb0:	b1cd      	cbz	r5, 8001ee6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001eb2:	07c5      	lsls	r5, r0, #31
 8001eb4:	d517      	bpl.n	8001ee6 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001eb6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001eb8:	f040 0002 	orr.w	r0, r0, #2
 8001ebc:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ebe:	060c      	lsls	r4, r1, #24
 8001ec0:	d504      	bpl.n	8001ecc <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ec2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8001ec6:	4310      	orrs	r0, r2
 8001ec8:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ecc:	05c8      	lsls	r0, r1, #23
 8001ece:	d504      	bpl.n	8001eda <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001ed0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001eda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001edc:	4311      	orrs	r1, r2
    return HAL_OK;
 8001ede:	2000      	movs	r0, #0
}
 8001ee0:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001ee2:	6559      	str	r1, [r3, #84]	; 0x54
}
 8001ee4:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001ee6:	f011 0f38 	tst.w	r1, #56	; 0x38
 8001eea:	d001      	beq.n	8001ef0 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001eec:	0784      	lsls	r4, r0, #30
 8001eee:	d4e2      	bmi.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x36>
 8001ef0:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8001ef4:	d131      	bne.n	8001f5a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ef6:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8001efa:	d001      	beq.n	8001f00 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001efc:	0704      	lsls	r4, r0, #28
 8001efe:	d4da      	bmi.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x36>
 8001f00:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8001f04:	d001      	beq.n	8001f0a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001f06:	06c5      	lsls	r5, r0, #27
 8001f08:	d4d5      	bmi.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x36>
 8001f0a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8001f0e:	d001      	beq.n	8001f14 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001f10:	0684      	lsls	r4, r0, #26
 8001f12:	d4d0      	bmi.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x36>
 8001f14:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8001f18:	d0d1      	beq.n	8001ebe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001f1a:	0645      	lsls	r5, r0, #25
 8001f1c:	d5cf      	bpl.n	8001ebe <HAL_FDCAN_ActivateNotification+0x3e>
 8001f1e:	e7ca      	b.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001f20:	f011 0f38 	tst.w	r1, #56	; 0x38
 8001f24:	d001      	beq.n	8001f2a <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001f26:	0784      	lsls	r4, r0, #30
 8001f28:	d5be      	bpl.n	8001ea8 <HAL_FDCAN_ActivateNotification+0x28>
 8001f2a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8001f2e:	d117      	bne.n	8001f60 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001f30:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8001f34:	d001      	beq.n	8001f3a <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001f36:	0704      	lsls	r4, r0, #28
 8001f38:	d5b6      	bpl.n	8001ea8 <HAL_FDCAN_ActivateNotification+0x28>
 8001f3a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8001f3e:	d001      	beq.n	8001f44 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001f40:	06c4      	lsls	r4, r0, #27
 8001f42:	d5b1      	bpl.n	8001ea8 <HAL_FDCAN_ActivateNotification+0x28>
 8001f44:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8001f48:	d001      	beq.n	8001f4e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001f4a:	0684      	lsls	r4, r0, #26
 8001f4c:	d5ac      	bpl.n	8001ea8 <HAL_FDCAN_ActivateNotification+0x28>
 8001f4e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8001f52:	d0ad      	beq.n	8001eb0 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001f54:	0644      	lsls	r4, r0, #25
 8001f56:	d4ab      	bmi.n	8001eb0 <HAL_FDCAN_ActivateNotification+0x30>
 8001f58:	e7a6      	b.n	8001ea8 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001f5a:	0745      	lsls	r5, r0, #29
 8001f5c:	d4ab      	bmi.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x36>
 8001f5e:	e7ca      	b.n	8001ef6 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001f60:	0744      	lsls	r4, r0, #29
 8001f62:	d5a1      	bpl.n	8001ea8 <HAL_FDCAN_ActivateNotification+0x28>
 8001f64:	e7e4      	b.n	8001f30 <HAL_FDCAN_ActivateNotification+0xb0>
 8001f66:	bf00      	nop

08001f68 <HAL_FDCAN_TxEventFifoCallback>:
}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop

08001f6c <HAL_FDCAN_RxFifo1Callback>:
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <HAL_FDCAN_TxFifoEmptyCallback>:
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <HAL_FDCAN_TxBufferCompleteCallback>:
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <HAL_FDCAN_TxBufferAbortCallback>:
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <HAL_FDCAN_TimestampWraparoundCallback>:
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <HAL_FDCAN_TimeoutOccurredCallback>:
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop

08001f84 <HAL_FDCAN_HighPriorityMessageCallback>:
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <HAL_FDCAN_ErrorCallback>:
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <HAL_FDCAN_IRQHandler>:
{
 8001f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001f90:	6803      	ldr	r3, [r0, #0]
 8001f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001f94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f96:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001f9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001f9e:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001fa0:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001fa6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001fa8:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8001faa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001fac:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8001fae:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fb2:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	0652      	lsls	r2, r2, #25
{
 8001fb8:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001fba:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001fbe:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001fc2:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8001fc6:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001fca:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001fce:	d502      	bpl.n	8001fd6 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fd2:	0651      	lsls	r1, r2, #25
 8001fd4:	d473      	bmi.n	80020be <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd8:	05d2      	lsls	r2, r2, #23
 8001fda:	d502      	bpl.n	8001fe2 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fde:	05d0      	lsls	r0, r2, #23
 8001fe0:	d45d      	bmi.n	800209e <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8001fe2:	f1b9 0f00 	cmp.w	r9, #0
 8001fe6:	d14a      	bne.n	800207e <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8001fe8:	f1b8 0f00 	cmp.w	r8, #0
 8001fec:	d137      	bne.n	800205e <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8001fee:	2f00      	cmp	r7, #0
 8001ff0:	d13e      	bne.n	8002070 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff4:	0591      	lsls	r1, r2, #22
 8001ff6:	d502      	bpl.n	8001ffe <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ffa:	0592      	lsls	r2, r2, #22
 8001ffc:	d475      	bmi.n	80020ea <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002000:	0617      	lsls	r7, r2, #24
 8002002:	d502      	bpl.n	800200a <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002006:	0610      	lsls	r0, r2, #24
 8002008:	d477      	bmi.n	80020fa <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800200a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200c:	0491      	lsls	r1, r2, #18
 800200e:	d502      	bpl.n	8002016 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002012:	0492      	lsls	r2, r2, #18
 8002014:	d459      	bmi.n	80020ca <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002018:	0417      	lsls	r7, r2, #16
 800201a:	d502      	bpl.n	8002022 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800201c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800201e:	0410      	lsls	r0, r2, #16
 8002020:	d45b      	bmi.n	80020da <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002024:	0451      	lsls	r1, r2, #17
 8002026:	d509      	bpl.n	800203c <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800202a:	0452      	lsls	r2, r2, #17
 800202c:	d506      	bpl.n	800203c <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800202e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002032:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002034:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203a:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 800203c:	b94e      	cbnz	r6, 8002052 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 800203e:	b125      	cbz	r5, 800204a <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8002044:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002046:	431d      	orrs	r5, r3
 8002048:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800204a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800204c:	bb13      	cbnz	r3, 8002094 <HAL_FDCAN_IRQHandler+0x108>
}
 800204e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002052:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002054:	4631      	mov	r1, r6
 8002056:	4620      	mov	r0, r4
 8002058:	f006 fc78 	bl	800894c <HAL_FDCAN_ErrorStatusCallback>
 800205c:	e7ef      	b.n	800203e <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800205e:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002062:	4641      	mov	r1, r8
 8002064:	4620      	mov	r0, r4
 8002066:	f006 fc37 	bl	80088d8 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800206a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 800206c:	2f00      	cmp	r7, #0
 800206e:	d0c0      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002070:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002072:	4639      	mov	r1, r7
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff79 	bl	8001f6c <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	e7b9      	b.n	8001ff2 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800207e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002082:	4649      	mov	r1, r9
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ff6f 	bl	8001f68 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800208a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 800208c:	f1b8 0f00 	cmp.w	r8, #0
 8002090:	d0ad      	beq.n	8001fee <HAL_FDCAN_IRQHandler+0x62>
 8002092:	e7e4      	b.n	800205e <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002094:	4620      	mov	r0, r4
 8002096:	f7ff ff77 	bl	8001f88 <HAL_FDCAN_ErrorCallback>
}
 800209a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800209e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80020a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80020a6:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80020a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ac:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7ff ff62 	bl	8001f78 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80020b4:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80020b6:	f1b9 0f00 	cmp.w	r9, #0
 80020ba:	d095      	beq.n	8001fe8 <HAL_FDCAN_IRQHandler+0x5c>
 80020bc:	e7df      	b.n	800207e <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80020c2:	f7ff ff5f 	bl	8001f84 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	e785      	b.n	8001fd6 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80020ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ce:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff ff53 	bl	8001f7c <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	e79d      	b.n	8002016 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80020da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff ff4d 	bl	8001f80 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	e79b      	b.n	8002022 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff ff3d 	bl	8001f70 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	e781      	b.n	8001ffe <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80020fa:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80020fe:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002102:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff ff33 	bl	8001f74 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	e77b      	b.n	800200a <HAL_FDCAN_IRQHandler+0x7e>
 8002112:	bf00      	nop

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002118:	680c      	ldr	r4, [r1, #0]
{
 800211a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 800211c:	2c00      	cmp	r4, #0
 800211e:	f000 8083 	beq.w	8002228 <HAL_GPIO_Init+0x114>
 8002122:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8002300 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 800212a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800212c:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002130:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002132:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8002136:	ea15 0804 	ands.w	r8, r5, r4
 800213a:	d06f      	beq.n	800221c <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800213c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002140:	f007 0203 	and.w	r2, r7, #3
 8002144:	1e51      	subs	r1, r2, #1
 8002146:	2901      	cmp	r1, #1
 8002148:	d971      	bls.n	800222e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214a:	2a03      	cmp	r2, #3
 800214c:	f040 80b0 	bne.w	80022b0 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002150:	fa02 f20c 	lsl.w	r2, r2, ip
 8002154:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8002156:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002158:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215a:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002160:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002162:	d05b      	beq.n	800221c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002164:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8002170:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8002174:	f002 0201 	and.w	r2, r2, #1
 8002178:	9203      	str	r2, [sp, #12]
 800217a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002184:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002188:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800218c:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800218e:	00ad      	lsls	r5, r5, #2
 8002190:	260f      	movs	r6, #15
 8002192:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002196:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800219a:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800219e:	d019      	beq.n	80021d4 <HAL_GPIO_Init+0xc0>
 80021a0:	4e51      	ldr	r6, [pc, #324]	; (80022e8 <HAL_GPIO_Init+0x1d4>)
 80021a2:	42b0      	cmp	r0, r6
 80021a4:	f000 808f 	beq.w	80022c6 <HAL_GPIO_Init+0x1b2>
 80021a8:	4e50      	ldr	r6, [pc, #320]	; (80022ec <HAL_GPIO_Init+0x1d8>)
 80021aa:	42b0      	cmp	r0, r6
 80021ac:	f000 808f 	beq.w	80022ce <HAL_GPIO_Init+0x1ba>
 80021b0:	4e4f      	ldr	r6, [pc, #316]	; (80022f0 <HAL_GPIO_Init+0x1dc>)
 80021b2:	42b0      	cmp	r0, r6
 80021b4:	f000 8081 	beq.w	80022ba <HAL_GPIO_Init+0x1a6>
 80021b8:	4e4e      	ldr	r6, [pc, #312]	; (80022f4 <HAL_GPIO_Init+0x1e0>)
 80021ba:	42b0      	cmp	r0, r6
 80021bc:	f000 808d 	beq.w	80022da <HAL_GPIO_Init+0x1c6>
 80021c0:	4e4d      	ldr	r6, [pc, #308]	; (80022f8 <HAL_GPIO_Init+0x1e4>)
 80021c2:	42b0      	cmp	r0, r6
 80021c4:	bf0c      	ite	eq
 80021c6:	f04f 0e05 	moveq.w	lr, #5
 80021ca:	f04f 0e06 	movne.w	lr, #6
 80021ce:	fa0e f505 	lsl.w	r5, lr, r5
 80021d2:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d6:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80021d8:	4948      	ldr	r1, [pc, #288]	; (80022fc <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 80021da:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80021dc:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e0:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 80021e2:	bf54      	ite	pl
 80021e4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80021e6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 80021ea:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 80021ec:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ee:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80021f0:	4942      	ldr	r1, [pc, #264]	; (80022fc <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80021f2:	bf54      	ite	pl
 80021f4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80021f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80021fa:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 80021fc:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002200:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8002202:	bf54      	ite	pl
 8002204:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002206:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 800220a:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800220c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800220e:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002210:	493a      	ldr	r1, [pc, #232]	; (80022fc <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8002212:	bf54      	ite	pl
 8002214:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002216:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 800221a:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 800221c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221e:	fa34 f203 	lsrs.w	r2, r4, r3
 8002222:	f10c 0c02 	add.w	ip, ip, #2
 8002226:	d184      	bne.n	8002132 <HAL_GPIO_Init+0x1e>
  }
}
 8002228:	b005      	add	sp, #20
 800222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800222e:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002230:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002234:	f04f 0e03 	mov.w	lr, #3
 8002238:	fa0e fe0c 	lsl.w	lr, lr, ip
 800223c:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002240:	fa06 f60c 	lsl.w	r6, r6, ip
 8002244:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8002246:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002248:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 800224c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002250:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002254:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8002258:	409d      	lsls	r5, r3
 800225a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 800225e:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8002260:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002262:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002266:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800226a:	fa05 f50c 	lsl.w	r5, r5, ip
 800226e:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002274:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	fa02 f20c 	lsl.w	r2, r2, ip
 800227a:	f47f af6c 	bne.w	8002156 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800227e:	08dd      	lsrs	r5, r3, #3
 8002280:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002284:	9501      	str	r5, [sp, #4]
 8002286:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002288:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800228c:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800228e:	f003 0e07 	and.w	lr, r3, #7
 8002292:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002296:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002298:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800229c:	fa06 fe0e 	lsl.w	lr, r6, lr
 80022a0:	9e00      	ldr	r6, [sp, #0]
 80022a2:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80022a6:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022a8:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80022ac:	6235      	str	r5, [r6, #32]
 80022ae:	e752      	b.n	8002156 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b0:	2103      	movs	r1, #3
 80022b2:	fa01 f10c 	lsl.w	r1, r1, ip
 80022b6:	43c9      	mvns	r1, r1
 80022b8:	e7d2      	b.n	8002260 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ba:	f04f 0e03 	mov.w	lr, #3
 80022be:	fa0e f505 	lsl.w	r5, lr, r5
 80022c2:	4329      	orrs	r1, r5
 80022c4:	e786      	b.n	80021d4 <HAL_GPIO_Init+0xc0>
 80022c6:	fa0b f505 	lsl.w	r5, fp, r5
 80022ca:	4329      	orrs	r1, r5
 80022cc:	e782      	b.n	80021d4 <HAL_GPIO_Init+0xc0>
 80022ce:	f04f 0e02 	mov.w	lr, #2
 80022d2:	fa0e f505 	lsl.w	r5, lr, r5
 80022d6:	4329      	orrs	r1, r5
 80022d8:	e77c      	b.n	80021d4 <HAL_GPIO_Init+0xc0>
 80022da:	f04f 0e04 	mov.w	lr, #4
 80022de:	fa0e f505 	lsl.w	r5, lr, r5
 80022e2:	4329      	orrs	r1, r5
 80022e4:	e776      	b.n	80021d4 <HAL_GPIO_Init+0xc0>
 80022e6:	bf00      	nop
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	48001000 	.word	0x48001000
 80022f8:	48001400 	.word	0x48001400
 80022fc:	40010400 	.word	0x40010400
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002304:	b10a      	cbz	r2, 800230a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	6181      	str	r1, [r0, #24]
 8002308:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002310:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002312:	ea01 0203 	and.w	r2, r1, r3
 8002316:	ea21 0103 	bic.w	r1, r1, r3
 800231a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800231e:	6181      	str	r1, [r0, #24]
}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002324:	b340      	cbz	r0, 8002378 <HAL_IWDG_Init+0x54>
{
 8002326:	b538      	push	{r3, r4, r5, lr}
  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002328:	e9d0 3100 	ldrd	r3, r1, [r0]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800232c:	6882      	ldr	r2, [r0, #8]
 800232e:	4604      	mov	r4, r0
  __HAL_IWDG_START(hiwdg);
 8002330:	f64c 40cc 	movw	r0, #52428	; 0xcccc
 8002334:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002336:	f245 5055 	movw	r0, #21845	; 0x5555
 800233a:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800233c:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800233e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002340:	f7ff f892 	bl	8001468 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002344:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002346:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	0751      	lsls	r1, r2, #29
 800234c:	d00a      	beq.n	8002364 <HAL_IWDG_Init+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800234e:	f7ff f88b 	bl	8001468 <HAL_GetTick>
 8002352:	1b43      	subs	r3, r0, r5
 8002354:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002356:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002358:	d9f6      	bls.n	8002348 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	0752      	lsls	r2, r2, #29
 800235e:	d0f3      	beq.n	8002348 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8002362:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002364:	68e2      	ldr	r2, [r4, #12]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	4291      	cmp	r1, r2
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800236a:	bf0a      	itet	eq
 800236c:	f64a 22aa 	movweq	r2, #43690	; 0xaaaa
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002370:	611a      	strne	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002372:	601a      	streq	r2, [r3, #0]
  return HAL_OK;
 8002374:	2000      	movs	r0, #0
}
 8002376:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
}
 800237a:	4770      	bx	lr

0800237c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800237c:	6803      	ldr	r3, [r0, #0]
 800237e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8002382:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	4770      	bx	lr

08002388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002388:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800238a:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800238c:	b970      	cbnz	r0, 80023ac <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002398:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800239c:	d023      	beq.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800239e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80023a2:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80023aa:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80023b0:	d009      	beq.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023b2:	6813      	ldr	r3, [r2, #0]
}
 80023b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 80023c0:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023d4:	d02f      	beq.n	8002436 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80023da:	2000      	movs	r0, #0
}
 80023dc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80023e4:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ee:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023f0:	4c22      	ldr	r4, [pc, #136]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80023f2:	4823      	ldr	r0, [pc, #140]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f4:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80023f8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80023fc:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	2132      	movs	r1, #50	; 0x32
 8002402:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002406:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002408:	fba0 0303 	umull	r0, r3, r0, r3
 800240c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240e:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002410:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002414:	d506      	bpl.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8002416:	e000      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x92>
 8002418:	b123      	cbz	r3, 8002424 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800241a:	6951      	ldr	r1, [r2, #20]
 800241c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800241e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002422:	d4f9      	bmi.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 800242a:	bf54      	ite	pl
 800242c:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800242e:	2003      	movmi	r0, #3
}
 8002430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002434:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800243e:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002440:	4c0e      	ldr	r4, [pc, #56]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002442:	480f      	ldr	r0, [pc, #60]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002444:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002448:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800244c:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	2132      	movs	r1, #50	; 0x32
 8002452:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002456:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002458:	fba0 0303 	umull	r0, r3, r0, r3
 800245c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245e:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002460:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002464:	d5de      	bpl.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8002466:	e001      	b.n	800246c <HAL_PWREx_ControlVoltageScaling+0xe4>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0db      	beq.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800246c:	6951      	ldr	r1, [r2, #20]
 800246e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002470:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002474:	d5d6      	bpl.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8002476:	e7f7      	b.n	8002468 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8002478:	40007000 	.word	0x40007000
 800247c:	20000000 	.word	0x20000000
 8002480:	431bde83 	.word	0x431bde83

08002484 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002486:	6893      	ldr	r3, [r2, #8]
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6093      	str	r3, [r2, #8]
}
 800248e:	4770      	bx	lr
 8002490:	40007000 	.word	0x40007000

08002494 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	2800      	cmp	r0, #0
 8002496:	f000 81c3 	beq.w	8002820 <HAL_RCC_OscConfig+0x38c>
{
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	07d9      	lsls	r1, r3, #31
{
 80024a2:	b082      	sub	sp, #8
 80024a4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	d52d      	bpl.n	8002504 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a8:	49a6      	ldr	r1, [pc, #664]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ac:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024b2:	2a0c      	cmp	r2, #12
 80024b4:	f000 810a 	beq.w	80026cc <HAL_RCC_OscConfig+0x238>
 80024b8:	2a08      	cmp	r2, #8
 80024ba:	f000 810c 	beq.w	80026d6 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	6863      	ldr	r3, [r4, #4]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	f000 8133 	beq.w	800272e <HAL_RCC_OscConfig+0x29a>
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	f000 819b 	beq.w	8002806 <HAL_RCC_OscConfig+0x372>
 80024d0:	4d9c      	ldr	r5, [pc, #624]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024d8:	602a      	str	r2, [r5, #0]
 80024da:	682a      	ldr	r2, [r5, #0]
 80024dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024e0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 8128 	bne.w	8002738 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe ffbe 	bl	8001468 <HAL_GetTick>
 80024ec:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	e005      	b.n	80024fc <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe ffba 	bl	8001468 <HAL_GetTick>
 80024f4:	1b80      	subs	r0, r0, r6
 80024f6:	2864      	cmp	r0, #100	; 0x64
 80024f8:	f200 8142 	bhi.w	8002780 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	039f      	lsls	r7, r3, #14
 8002500:	d4f6      	bmi.n	80024f0 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	079e      	lsls	r6, r3, #30
 8002506:	d528      	bpl.n	800255a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002508:	4a8e      	ldr	r2, [pc, #568]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 800250a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002512:	2b0c      	cmp	r3, #12
 8002514:	f000 80ec 	beq.w	80026f0 <HAL_RCC_OscConfig+0x25c>
 8002518:	2b04      	cmp	r3, #4
 800251a:	f000 80ee 	beq.w	80026fa <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4d88      	ldr	r5, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 811d 	beq.w	8002762 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe ff9a 	bl	8001468 <HAL_GetTick>
 8002534:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002536:	e005      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe ff96 	bl	8001468 <HAL_GetTick>
 800253c:	1b80      	subs	r0, r0, r6
 800253e:	2802      	cmp	r0, #2
 8002540:	f200 811e 	bhi.w	8002780 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	0558      	lsls	r0, r3, #21
 8002548:	d5f6      	bpl.n	8002538 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	686b      	ldr	r3, [r5, #4]
 800254c:	6922      	ldr	r2, [r4, #16]
 800254e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002552:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002556:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	071a      	lsls	r2, r3, #28
 800255c:	d519      	bpl.n	8002592 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002560:	4d78      	ldr	r5, [pc, #480]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 809e 	beq.w	80026a4 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8002568:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe ff78 	bl	8001468 <HAL_GetTick>
 8002578:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257a:	e005      	b.n	8002588 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe ff74 	bl	8001468 <HAL_GetTick>
 8002580:	1b80      	subs	r0, r0, r6
 8002582:	2802      	cmp	r0, #2
 8002584:	f200 80fc 	bhi.w	8002780 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002588:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800258c:	079f      	lsls	r7, r3, #30
 800258e:	d5f5      	bpl.n	800257c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	0759      	lsls	r1, r3, #29
 8002594:	d541      	bpl.n	800261a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002596:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800259a:	00d2      	lsls	r2, r2, #3
 800259c:	f100 80f4 	bmi.w	8002788 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025b2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b4:	4e64      	ldr	r6, [pc, #400]	; (8002748 <HAL_RCC_OscConfig+0x2b4>)
 80025b6:	6833      	ldr	r3, [r6, #0]
 80025b8:	05df      	lsls	r7, r3, #23
 80025ba:	f140 8113 	bpl.w	80027e4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	68a3      	ldr	r3, [r4, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f000 80e3 	beq.w	800278c <HAL_RCC_OscConfig+0x2f8>
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	f000 8169 	beq.w	800289e <HAL_RCC_OscConfig+0x40a>
 80025cc:	4e5d      	ldr	r6, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 80025ce:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80025da:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80d7 	bne.w	800279a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe ff3c 	bl	8001468 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025f4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f6:	e005      	b.n	8002604 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe ff36 	bl	8001468 <HAL_GetTick>
 80025fc:	1bc0      	subs	r0, r0, r7
 80025fe:	4540      	cmp	r0, r8
 8002600:	f200 80be 	bhi.w	8002780 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002604:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002608:	079a      	lsls	r2, r3, #30
 800260a:	d4f5      	bmi.n	80025f8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800260c:	b125      	cbz	r5, 8002618 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260e:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002610:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	d518      	bpl.n	8002650 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800261e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002620:	4d48      	ldr	r5, [pc, #288]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80ca 	beq.w	80027bc <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8002628:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe ff18 	bl	8001468 <HAL_GetTick>
 8002638:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800263a:	e005      	b.n	8002648 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263c:	f7fe ff14 	bl	8001468 <HAL_GetTick>
 8002640:	1b80      	subs	r0, r0, r6
 8002642:	2802      	cmp	r0, #2
 8002644:	f200 809c 	bhi.w	8002780 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002648:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800264c:	079f      	lsls	r7, r3, #30
 800264e:	d5f5      	bpl.n	800263c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002650:	69e0      	ldr	r0, [r4, #28]
 8002652:	b318      	cbz	r0, 800269c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002654:	4d3b      	ldr	r5, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002656:	68ab      	ldr	r3, [r5, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b0c      	cmp	r3, #12
 800265e:	f000 812c 	beq.w	80028ba <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002664:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266c:	f000 80da 	beq.w	8002824 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002670:	68eb      	ldr	r3, [r5, #12]
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002678:	68eb      	ldr	r3, [r5, #12]
 800267a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fef0 	bl	8001468 <HAL_GetTick>
 8002688:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	e004      	b.n	8002696 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe feec 	bl	8001468 <HAL_GetTick>
 8002690:	1b00      	subs	r0, r0, r4
 8002692:	2802      	cmp	r0, #2
 8002694:	d874      	bhi.n	8002780 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	019b      	lsls	r3, r3, #6
 800269a:	d4f7      	bmi.n	800268c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800269c:	2000      	movs	r0, #0
}
 800269e:	b002      	add	sp, #8
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80026a4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026b0:	f7fe feda 	bl	8001468 <HAL_GetTick>
 80026b4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b6:	e004      	b.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fed6 	bl	8001468 <HAL_GetTick>
 80026bc:	1b80      	subs	r0, r0, r6
 80026be:	2802      	cmp	r0, #2
 80026c0:	d85e      	bhi.n	8002780 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026c6:	0798      	lsls	r0, r3, #30
 80026c8:	d4f6      	bmi.n	80026b8 <HAL_RCC_OscConfig+0x224>
 80026ca:	e761      	b.n	8002590 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026cc:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026d0:	2903      	cmp	r1, #3
 80026d2:	f47f aef4 	bne.w	80024be <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	0392      	lsls	r2, r2, #14
 80026dc:	f57f af12 	bpl.w	8002504 <HAL_RCC_OscConfig+0x70>
 80026e0:	6862      	ldr	r2, [r4, #4]
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	f47f af0e 	bne.w	8002504 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
}
 80026ea:	b002      	add	sp, #8
 80026ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80026f4:	2a02      	cmp	r2, #2
 80026f6:	f47f af12 	bne.w	800251e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	055d      	lsls	r5, r3, #21
 8002700:	d502      	bpl.n	8002708 <HAL_RCC_OscConfig+0x274>
 8002702:	68e3      	ldr	r3, [r4, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ef      	beq.n	80026e8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 800270a:	6920      	ldr	r0, [r4, #16]
 800270c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800270e:	490f      	ldr	r1, [pc, #60]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002714:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002718:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800271a:	6808      	ldr	r0, [r1, #0]
 800271c:	f7fe fb36 	bl	8000d8c <HAL_InitTick>
 8002720:	2800      	cmp	r0, #0
 8002722:	d1e1      	bne.n	80026e8 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	071a      	lsls	r2, r3, #28
 8002728:	f57f af33 	bpl.w	8002592 <HAL_RCC_OscConfig+0xfe>
 800272c:	e717      	b.n	800255e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002730:	6813      	ldr	r3, [r2, #0]
 8002732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002738:	f7fe fe96 	bl	8001468 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273c:	4e01      	ldr	r6, [pc, #4]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800273e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x2c6>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fe8a 	bl	8001468 <HAL_GetTick>
 8002754:	1b40      	subs	r0, r0, r5
 8002756:	2864      	cmp	r0, #100	; 0x64
 8002758:	d812      	bhi.n	8002780 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275a:	6833      	ldr	r3, [r6, #0]
 800275c:	039b      	lsls	r3, r3, #14
 800275e:	d5f7      	bpl.n	8002750 <HAL_RCC_OscConfig+0x2bc>
 8002760:	e6cf      	b.n	8002502 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8002762:	682b      	ldr	r3, [r5, #0]
 8002764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002768:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800276a:	f7fe fe7d 	bl	8001468 <HAL_GetTick>
 800276e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	0559      	lsls	r1, r3, #21
 8002774:	d5d6      	bpl.n	8002724 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe fe77 	bl	8001468 <HAL_GetTick>
 800277a:	1b80      	subs	r0, r0, r6
 800277c:	2802      	cmp	r0, #2
 800277e:	d9f7      	bls.n	8002770 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8002780:	2003      	movs	r0, #3
}
 8002782:	b002      	add	sp, #8
 8002784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002788:	2500      	movs	r5, #0
 800278a:	e713      	b.n	80025b4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_RCC_OscConfig+0x490>)
 800278e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800279a:	f7fe fe65 	bl	8001468 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279e:	4f61      	ldr	r7, [pc, #388]	; (8002924 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80027a0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	e004      	b.n	80027b2 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fe5e 	bl	8001468 <HAL_GetTick>
 80027ac:	1b80      	subs	r0, r0, r6
 80027ae:	4540      	cmp	r0, r8
 80027b0:	d8e6      	bhi.n	8002780 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b6:	0799      	lsls	r1, r3, #30
 80027b8:	d5f6      	bpl.n	80027a8 <HAL_RCC_OscConfig+0x314>
 80027ba:	e727      	b.n	800260c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80027bc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80027c8:	f7fe fe4e 	bl	8001468 <HAL_GetTick>
 80027cc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027ce:	e004      	b.n	80027da <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d0:	f7fe fe4a 	bl	8001468 <HAL_GetTick>
 80027d4:	1b80      	subs	r0, r0, r6
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d8d2      	bhi.n	8002780 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027da:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80027de:	0798      	lsls	r0, r3, #30
 80027e0:	d4f6      	bmi.n	80027d0 <HAL_RCC_OscConfig+0x33c>
 80027e2:	e735      	b.n	8002650 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	6833      	ldr	r3, [r6, #0]
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80027ec:	f7fe fe3c 	bl	8001468 <HAL_GetTick>
 80027f0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f2:	6833      	ldr	r3, [r6, #0]
 80027f4:	05d8      	lsls	r0, r3, #23
 80027f6:	f53f aee2 	bmi.w	80025be <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe fe35 	bl	8001468 <HAL_GetTick>
 80027fe:	1bc0      	subs	r0, r0, r7
 8002800:	2802      	cmp	r0, #2
 8002802:	d9f6      	bls.n	80027f2 <HAL_RCC_OscConfig+0x35e>
 8002804:	e7bc      	b.n	8002780 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002806:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800280a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800281c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281e:	e78b      	b.n	8002738 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8002820:	2001      	movs	r0, #1
}
 8002822:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002824:	f7fe fe20 	bl	8001468 <HAL_GetTick>
 8002828:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282a:	e004      	b.n	8002836 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe fe1c 	bl	8001468 <HAL_GetTick>
 8002830:	1b80      	subs	r0, r0, r6
 8002832:	2802      	cmp	r0, #2
 8002834:	d8a4      	bhi.n	8002780 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002836:	682b      	ldr	r3, [r5, #0]
 8002838:	0199      	lsls	r1, r3, #6
 800283a:	d4f7      	bmi.n	800282c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283c:	68e9      	ldr	r1, [r5, #12]
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCC_OscConfig+0x494>)
 8002840:	6a22      	ldr	r2, [r4, #32]
 8002842:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002844:	4e37      	ldr	r6, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002846:	400b      	ands	r3, r1
 8002848:	4313      	orrs	r3, r2
 800284a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800284e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002852:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002856:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800285a:	3801      	subs	r0, #1
 800285c:	0849      	lsrs	r1, r1, #1
 800285e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002862:	3901      	subs	r1, #1
 8002864:	0852      	lsrs	r2, r2, #1
 8002866:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800286a:	3a01      	subs	r2, #1
 800286c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002870:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002878:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800287a:	68eb      	ldr	r3, [r5, #12]
 800287c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002880:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002882:	f7fe fdf1 	bl	8001468 <HAL_GetTick>
 8002886:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	e005      	b.n	8002896 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fded 	bl	8001468 <HAL_GetTick>
 800288e:	1b00      	subs	r0, r0, r4
 8002890:	2802      	cmp	r0, #2
 8002892:	f63f af75 	bhi.w	8002780 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	6833      	ldr	r3, [r6, #0]
 8002898:	019a      	lsls	r2, r3, #6
 800289a:	d5f6      	bpl.n	800288a <HAL_RCC_OscConfig+0x3f6>
 800289c:	e6fe      	b.n	800269c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x490>)
 80028a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028a4:	f042 0204 	orr.w	r2, r2, #4
 80028a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80028ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b8:	e76f      	b.n	800279a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ba:	2801      	cmp	r0, #1
 80028bc:	f43f aeef 	beq.w	800269e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80028c0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	6a22      	ldr	r2, [r4, #32]
 80028c4:	f003 0103 	and.w	r1, r3, #3
 80028c8:	4291      	cmp	r1, r2
 80028ca:	f47f af0d 	bne.w	80026e8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028d4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80028da:	f47f af05 	bne.w	80026e8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028e8:	f47f aefe 	bne.w	80026e8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80028ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80028f6:	f47f aef7 	bne.w	80026e8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028fc:	0852      	lsrs	r2, r2, #1
 80028fe:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002902:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002904:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002908:	f47f aeee 	bne.w	80026e8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800290c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800290e:	0852      	lsrs	r2, r2, #1
 8002910:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002914:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002916:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800291a:	bf14      	ite	ne
 800291c:	2001      	movne	r0, #1
 800291e:	2000      	moveq	r0, #0
 8002920:	e6bd      	b.n	800269e <HAL_RCC_OscConfig+0x20a>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	019f800c 	.word	0x019f800c

0800292c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_RCC_GetSysClockFreq+0x64>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	f002 020c 	and.w	r2, r2, #12
 8002934:	2a04      	cmp	r2, #4
 8002936:	d027      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	f002 020c 	and.w	r2, r2, #12
 800293e:	2a08      	cmp	r2, #8
 8002940:	d024      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	f002 020c 	and.w	r2, r2, #12
 8002948:	2a0c      	cmp	r2, #12
 800294a:	d001      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800294c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800294e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002950:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002952:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002954:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8002958:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800295a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800295e:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002962:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002964:	bf0c      	ite	eq
 8002966:	4b0b      	ldreq	r3, [pc, #44]	; (8002994 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002968:	4b0b      	ldrne	r3, [pc, #44]	; (8002998 <HAL_RCC_GetSysClockFreq+0x6c>)
 800296a:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_RCC_GetSysClockFreq+0x64>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002976:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800297a:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800297c:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002980:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002982:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002986:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <HAL_RCC_GetSysClockFreq+0x6c>)
 800298a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800298c:	4801      	ldr	r0, [pc, #4]	; (8002994 <HAL_RCC_GetSysClockFreq+0x68>)
 800298e:	4770      	bx	lr
 8002990:	40021000 	.word	0x40021000
 8002994:	007a1200 	.word	0x007a1200
 8002998:	00f42400 	.word	0x00f42400

0800299c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800299c:	2800      	cmp	r0, #0
 800299e:	f000 80ee 	beq.w	8002b7e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a2:	4a7f      	ldr	r2, [pc, #508]	; (8002ba0 <HAL_RCC_ClockConfig+0x204>)
{
 80029a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	428b      	cmp	r3, r1
 80029b0:	460d      	mov	r5, r1
 80029b2:	4604      	mov	r4, r0
 80029b4:	d20c      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	f023 030f 	bic.w	r3, r3, #15
 80029bc:	430b      	orrs	r3, r1
 80029be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	428b      	cmp	r3, r1
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
}
 80029cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	07df      	lsls	r7, r3, #31
 80029d4:	d563      	bpl.n	8002a9e <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	6862      	ldr	r2, [r4, #4]
 80029d8:	2a03      	cmp	r2, #3
 80029da:	f000 809a 	beq.w	8002b12 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b71      	ldr	r3, [pc, #452]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e0:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e4:	f000 8091 	beq.w	8002b0a <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	055b      	lsls	r3, r3, #21
 80029ea:	d5ee      	bpl.n	80029ca <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80029ec:	f7ff ff9e 	bl	800292c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80029f0:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_RCC_ClockConfig+0x20c>)
 80029f2:	4298      	cmp	r0, r3
 80029f4:	f200 80c5 	bhi.w	8002b82 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029f8:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029fa:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4e69      	ldr	r6, [pc, #420]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002a00:	68b3      	ldr	r3, [r6, #8]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	431a      	orrs	r2, r3
 8002a08:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fd2d 	bl	8001468 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a14:	e004      	b.n	8002a20 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a16:	f7fe fd27 	bl	8001468 <HAL_GetTick>
 8002a1a:	1bc0      	subs	r0, r0, r7
 8002a1c:	4540      	cmp	r0, r8
 8002a1e:	d871      	bhi.n	8002b04 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a20:	68b3      	ldr	r3, [r6, #8]
 8002a22:	6862      	ldr	r2, [r4, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a2c:	d1f3      	bne.n	8002a16 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	079f      	lsls	r7, r3, #30
 8002a32:	d436      	bmi.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8002a34:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8002a38:	d103      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a3a:	68b3      	ldr	r3, [r6, #8]
 8002a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a40:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a42:	4e57      	ldr	r6, [pc, #348]	; (8002ba0 <HAL_RCC_ClockConfig+0x204>)
 8002a44:	6833      	ldr	r3, [r6, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	42ab      	cmp	r3, r5
 8002a4c:	d846      	bhi.n	8002adc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	075a      	lsls	r2, r3, #29
 8002a52:	d506      	bpl.n	8002a62 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4953      	ldr	r1, [pc, #332]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002a56:	68e0      	ldr	r0, [r4, #12]
 8002a58:	688a      	ldr	r2, [r1, #8]
 8002a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	071b      	lsls	r3, r3, #28
 8002a64:	d507      	bpl.n	8002a76 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a66:	4a4f      	ldr	r2, [pc, #316]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002a68:	6921      	ldr	r1, [r4, #16]
 8002a6a:	6893      	ldr	r3, [r2, #8]
 8002a6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a74:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a76:	f7ff ff59 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8002a7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002a7c:	4c4b      	ldr	r4, [pc, #300]	; (8002bac <HAL_RCC_ClockConfig+0x210>)
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	494b      	ldr	r1, [pc, #300]	; (8002bb0 <HAL_RCC_ClockConfig+0x214>)
 8002a82:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002a86:	4603      	mov	r3, r0
 8002a88:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8002a8a:	484a      	ldr	r0, [pc, #296]	; (8002bb4 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	40d3      	lsrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8002a94:	6800      	ldr	r0, [r0, #0]
}
 8002a96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002a9a:	f7fe b977 	b.w	8000d8c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9e:	079e      	lsls	r6, r3, #30
 8002aa0:	d5cf      	bpl.n	8002a42 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa2:	0758      	lsls	r0, r3, #29
 8002aa4:	d504      	bpl.n	8002ab0 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa6:	493f      	ldr	r1, [pc, #252]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002aa8:	688a      	ldr	r2, [r1, #8]
 8002aaa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002aae:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	0719      	lsls	r1, r3, #28
 8002ab2:	d506      	bpl.n	8002ac2 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002ab6:	6893      	ldr	r3, [r2, #8]
 8002ab8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002abc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac2:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002ac4:	68a1      	ldr	r1, [r4, #8]
 8002ac6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4e35      	ldr	r6, [pc, #212]	; (8002ba0 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad2:	6833      	ldr	r3, [r6, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	42ab      	cmp	r3, r5
 8002ada:	d9b8      	bls.n	8002a4e <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002adc:	6833      	ldr	r3, [r6, #0]
 8002ade:	f023 030f 	bic.w	r3, r3, #15
 8002ae2:	432b      	orrs	r3, r5
 8002ae4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ae6:	f7fe fcbf 	bl	8001468 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aea:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002aee:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af0:	6833      	ldr	r3, [r6, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	42ab      	cmp	r3, r5
 8002af8:	d0a9      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afa:	f7fe fcb5 	bl	8001468 <HAL_GetTick>
 8002afe:	1bc0      	subs	r0, r0, r7
 8002b00:	4540      	cmp	r0, r8
 8002b02:	d9f5      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8002b04:	2003      	movs	r0, #3
}
 8002b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	039a      	lsls	r2, r3, #14
 8002b0c:	f53f af6e 	bmi.w	80029ec <HAL_RCC_ClockConfig+0x50>
 8002b10:	e75b      	b.n	80029ca <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	4924      	ldr	r1, [pc, #144]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002b14:	6808      	ldr	r0, [r1, #0]
 8002b16:	0180      	lsls	r0, r0, #6
 8002b18:	f57f af57 	bpl.w	80029ca <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1c:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b1e:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b20:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8002b22:	4f21      	ldr	r7, [pc, #132]	; (8002ba8 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b24:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8002b28:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b2a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b2e:	bf0c      	ite	eq
 8002b30:	4e21      	ldreq	r6, [pc, #132]	; (8002bb8 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b32:	4e22      	ldrne	r6, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b34:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b36:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b3a:	4e1a      	ldr	r6, [pc, #104]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b3c:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002b40:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b44:	68f0      	ldr	r0, [r6, #12]
 8002b46:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8002b4e:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8002b52:	42b9      	cmp	r1, r7
 8002b54:	d920      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b56:	68b1      	ldr	r1, [r6, #8]
 8002b58:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8002b5c:	d005      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x1ce>
 8002b5e:	f013 0902 	ands.w	r9, r3, #2
 8002b62:	f43f af4c 	beq.w	80029fe <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b66:	68a3      	ldr	r3, [r4, #8]
 8002b68:	b9b3      	cbnz	r3, 8002b98 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b6a:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002b6c:	688b      	ldr	r3, [r1, #8]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b76:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b78:	f04f 0980 	mov.w	r9, #128	; 0x80
 8002b7c:	e73f      	b.n	80029fe <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8002b7e:	2001      	movs	r0, #1
}
 8002b80:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_RCC_ClockConfig+0x208>)
 8002b84:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b86:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b8e:	ea43 0309 	orr.w	r3, r3, r9
 8002b92:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b94:	6862      	ldr	r2, [r4, #4]
 8002b96:	e732      	b.n	80029fe <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b98:	f04f 0900 	mov.w	r9, #0
 8002b9c:	e72f      	b.n	80029fe <HAL_RCC_ClockConfig+0x62>
 8002b9e:	bf00      	nop
 8002ba0:	40022000 	.word	0x40022000
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	04c4b400 	.word	0x04c4b400
 8002bac:	08009e50 	.word	0x08009e50
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	007a1200 	.word	0x007a1200
 8002bbc:	00f42400 	.word	0x00f42400

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bc2:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002bc6:	4906      	ldr	r1, [pc, #24]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002bcc:	6808      	ldr	r0, [r1, #0]
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
}
 8002bd4:	40d8      	lsrs	r0, r3
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08009e60 	.word	0x08009e60
 8002be0:	20000000 	.word	0x20000000

08002be4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002be6:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002be8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002bea:	4906      	ldr	r1, [pc, #24]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bec:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002bf0:	6808      	ldr	r0, [r1, #0]
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
}
 8002bf8:	40d8      	lsrs	r0, r3
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08009e60 	.word	0x08009e60
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002c1c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002c24:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	08db      	lsrs	r3, r3, #3
{
 8002c2a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c30:	4c05      	ldr	r4, [pc, #20]	; (8002c48 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c32:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c34:	6823      	ldr	r3, [r4, #0]
}
 8002c36:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	600b      	str	r3, [r1, #0]
}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40022000 	.word	0x40022000

08002c4c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002c4c:	4a02      	ldr	r2, [pc, #8]	; (8002c58 <HAL_RCC_EnableCSS+0xc>)
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	4770      	bx	lr
 8002c58:	40021000 	.word	0x40021000

08002c5c <HAL_RCC_CSSCallback>:
}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_RCC_NMI_IRQHandler>:
{
 8002c60:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c62:	4c05      	ldr	r4, [pc, #20]	; (8002c78 <HAL_RCC_NMI_IRQHandler+0x18>)
 8002c64:	69e3      	ldr	r3, [r4, #28]
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	d400      	bmi.n	8002c6c <HAL_RCC_NMI_IRQHandler+0xc>
}
 8002c6a:	bd10      	pop	{r4, pc}
    HAL_RCC_CSSCallback();
 8002c6c:	f7ff fff6 	bl	8002c5c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c74:	6223      	str	r3, [r4, #32]
}
 8002c76:	bd10      	pop	{r4, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c80:	6803      	ldr	r3, [r0, #0]
{
 8002c82:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c84:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8002c88:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c8a:	d056      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8c:	4bac      	ldr	r3, [pc, #688]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c90:	00d5      	lsls	r5, r2, #3
 8002c92:	f140 813e 	bpl.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4daa      	ldr	r5, [pc, #680]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fbe1 	bl	8001468 <HAL_GetTick>
 8002ca6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fbdd 	bl	8001468 <HAL_GetTick>
 8002cae:	1b83      	subs	r3, r0, r6
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	f200 8139 	bhi.w	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	05d8      	lsls	r0, r3, #23
 8002cba:	d5f6      	bpl.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cbc:	4da0      	ldr	r5, [pc, #640]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002cc6:	d027      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002cc8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d025      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cce:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cde:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cea:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cee:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8002cf0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf4:	f140 8148 	bpl.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fbb6 	bl	8001468 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d02:	e005      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fbb0 	bl	8001468 <HAL_GetTick>
 8002d08:	1b80      	subs	r0, r0, r6
 8002d0a:	4540      	cmp	r0, r8
 8002d0c:	f200 810c 	bhi.w	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d10:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002d14:	079b      	lsls	r3, r3, #30
 8002d16:	d5f5      	bpl.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002d1a:	4989      	ldr	r1, [pc, #548]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002d20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d2a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2c:	b127      	cbz	r7, 8002d38 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4a84      	ldr	r2, [pc, #528]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d30:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	07dd      	lsls	r5, r3, #31
 8002d3c:	d508      	bpl.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3e:	4980      	ldr	r1, [pc, #512]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d40:	6865      	ldr	r5, [r4, #4]
 8002d42:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d46:	f022 0203 	bic.w	r2, r2, #3
 8002d4a:	432a      	orrs	r2, r5
 8002d4c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d50:	0799      	lsls	r1, r3, #30
 8002d52:	d508      	bpl.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d54:	497a      	ldr	r1, [pc, #488]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d56:	68a5      	ldr	r5, [r4, #8]
 8002d58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d5c:	f022 020c 	bic.w	r2, r2, #12
 8002d60:	432a      	orrs	r2, r5
 8002d62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d66:	075a      	lsls	r2, r3, #29
 8002d68:	d508      	bpl.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d6a:	4975      	ldr	r1, [pc, #468]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d6c:	68e5      	ldr	r5, [r4, #12]
 8002d6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d72:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002d76:	432a      	orrs	r2, r5
 8002d78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7c:	071f      	lsls	r7, r3, #28
 8002d7e:	d508      	bpl.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d80:	496f      	ldr	r1, [pc, #444]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d82:	6925      	ldr	r5, [r4, #16]
 8002d84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d8c:	432a      	orrs	r2, r5
 8002d8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d92:	06de      	lsls	r6, r3, #27
 8002d94:	d508      	bpl.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d96:	496a      	ldr	r1, [pc, #424]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d98:	6965      	ldr	r5, [r4, #20]
 8002d9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002da2:	432a      	orrs	r2, r5
 8002da4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da8:	069d      	lsls	r5, r3, #26
 8002daa:	d508      	bpl.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dac:	4964      	ldr	r1, [pc, #400]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dae:	69a5      	ldr	r5, [r4, #24]
 8002db0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002db4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002db8:	432a      	orrs	r2, r5
 8002dba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dbe:	0659      	lsls	r1, r3, #25
 8002dc0:	d508      	bpl.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc2:	495f      	ldr	r1, [pc, #380]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dc4:	69e5      	ldr	r5, [r4, #28]
 8002dc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002dce:	432a      	orrs	r2, r5
 8002dd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd4:	061a      	lsls	r2, r3, #24
 8002dd6:	d508      	bpl.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd8:	4959      	ldr	r1, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dda:	6a25      	ldr	r5, [r4, #32]
 8002ddc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002de0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002de4:	432a      	orrs	r2, r5
 8002de6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dea:	05df      	lsls	r7, r3, #23
 8002dec:	d508      	bpl.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dee:	4954      	ldr	r1, [pc, #336]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002df2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002df6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002dfa:	432a      	orrs	r2, r5
 8002dfc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e00:	039e      	lsls	r6, r3, #14
 8002e02:	d508      	bpl.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e04:	494e      	ldr	r1, [pc, #312]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e06:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002e08:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002e0c:	f022 0203 	bic.w	r2, r2, #3
 8002e10:	432a      	orrs	r2, r5
 8002e12:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e16:	059d      	lsls	r5, r3, #22
 8002e18:	d508      	bpl.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e1a:	4949      	ldr	r1, [pc, #292]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e1c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002e1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e22:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002e26:	432a      	orrs	r2, r5
 8002e28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e2c:	0559      	lsls	r1, r3, #21
 8002e2e:	d50b      	bpl.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e30:	4943      	ldr	r1, [pc, #268]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e32:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002e34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e38:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002e3c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e3e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e46:	d071      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e48:	051a      	lsls	r2, r3, #20
 8002e4a:	d50b      	bpl.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e4c:	493c      	ldr	r1, [pc, #240]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e4e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002e50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e54:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002e58:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e5a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e62:	d068      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e64:	04df      	lsls	r7, r3, #19
 8002e66:	d50b      	bpl.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e68:	4935      	ldr	r1, [pc, #212]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e6a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002e6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e74:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e76:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e7e:	d063      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e80:	049e      	lsls	r6, r3, #18
 8002e82:	d50b      	bpl.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e84:	492e      	ldr	r1, [pc, #184]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e86:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002e88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e8c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002e90:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e92:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e9a:	d05a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9c:	045d      	lsls	r5, r3, #17
 8002e9e:	d50b      	bpl.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea0:	4927      	ldr	r1, [pc, #156]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002ea4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ea8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002eac:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eae:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eb2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb6:	d051      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eb8:	0419      	lsls	r1, r3, #16
 8002eba:	d50b      	bpl.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ebc:	4920      	ldr	r1, [pc, #128]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebe:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002ec0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002eca:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ece:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ed2:	d048      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ed4:	03da      	lsls	r2, r3, #15
 8002ed6:	d50b      	bpl.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ed8:	4919      	ldr	r1, [pc, #100]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eda:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002edc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ee0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002ee4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ee6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002eea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002eee:	d03f      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ef0:	035b      	lsls	r3, r3, #13
 8002ef2:	d50b      	bpl.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ef6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002ef8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002efc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002f00:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f02:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f06:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f0a:	d036      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8002f0c:	b002      	add	sp, #8
 8002f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f24:	2701      	movs	r7, #1
 8002f26:	e6b7      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e6ff      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f2c:	68ca      	ldr	r2, [r1, #12]
 8002f2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f32:	60ca      	str	r2, [r1, #12]
 8002f34:	e788      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f36:	68ca      	ldr	r2, [r1, #12]
 8002f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f3c:	60ca      	str	r2, [r1, #12]
 8002f3e:	e791      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f48:	68ca      	ldr	r2, [r1, #12]
 8002f4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f4e:	60ca      	str	r2, [r1, #12]
 8002f50:	e796      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f52:	68ca      	ldr	r2, [r1, #12]
 8002f54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f58:	60ca      	str	r2, [r1, #12]
 8002f5a:	e79f      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f5c:	68ca      	ldr	r2, [r1, #12]
 8002f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f62:	60ca      	str	r2, [r1, #12]
 8002f64:	e7a8      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f66:	68ca      	ldr	r2, [r1, #12]
 8002f68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f6c:	60ca      	str	r2, [r1, #12]
 8002f6e:	e7b1      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f70:	68ca      	ldr	r2, [r1, #12]
 8002f72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f76:	60ca      	str	r2, [r1, #12]
 8002f78:	e7ba      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7a:	68d3      	ldr	r3, [r2, #12]
 8002f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f80:	60d3      	str	r3, [r2, #12]
}
 8002f82:	b002      	add	sp, #8
 8002f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f88:	4613      	mov	r3, r2
 8002f8a:	e6c6      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9e>

08002f8c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002f90:	2800      	cmp	r0, #0
 8002f92:	f000 808c 	beq.w	80030ae <HAL_TIM_Base_Init+0x11e>
{
 8002f96:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d078      	beq.n	8003098 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa8:	4944      	ldr	r1, [pc, #272]	; (80030bc <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002fb2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	d05c      	beq.n	8003070 <HAL_TIM_Base_Init+0xe0>
 8002fb6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002fba:	d02c      	beq.n	8003016 <HAL_TIM_Base_Init+0x86>
 8002fbc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002fc0:	428a      	cmp	r2, r1
 8002fc2:	d028      	beq.n	8003016 <HAL_TIM_Base_Init+0x86>
 8002fc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fc8:	428a      	cmp	r2, r1
 8002fca:	d024      	beq.n	8003016 <HAL_TIM_Base_Init+0x86>
 8002fcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fd0:	428a      	cmp	r2, r1
 8002fd2:	d020      	beq.n	8003016 <HAL_TIM_Base_Init+0x86>
 8002fd4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8002fd8:	428a      	cmp	r2, r1
 8002fda:	d049      	beq.n	8003070 <HAL_TIM_Base_Init+0xe0>
 8002fdc:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8002fe0:	428a      	cmp	r2, r1
 8002fe2:	d066      	beq.n	80030b2 <HAL_TIM_Base_Init+0x122>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe4:	4936      	ldr	r1, [pc, #216]	; (80030c0 <HAL_TIM_Base_Init+0x130>)
 8002fe6:	428a      	cmp	r2, r1
 8002fe8:	d05b      	beq.n	80030a2 <HAL_TIM_Base_Init+0x112>
 8002fea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fee:	428a      	cmp	r2, r1
 8002ff0:	d057      	beq.n	80030a2 <HAL_TIM_Base_Init+0x112>
 8002ff2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002ff6:	428a      	cmp	r2, r1
 8002ff8:	d053      	beq.n	80030a2 <HAL_TIM_Base_Init+0x112>
 8002ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ffe:	428a      	cmp	r2, r1
 8003000:	d04f      	beq.n	80030a2 <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003002:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003004:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800300c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800300e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003012:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003014:	e010      	b.n	8003038 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8003016:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003018:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800301e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003026:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003030:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003032:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003034:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003036:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	2301      	movs	r3, #1
 800303a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003044:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003048:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800304c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800305c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003060:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003064:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003068:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800306c:	2000      	movs	r0, #0
}
 800306e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8003070:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003072:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003078:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800307a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003080:	69a1      	ldr	r1, [r4, #24]
 8003082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003086:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003088:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800308e:	6863      	ldr	r3, [r4, #4]
 8003090:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003092:	6963      	ldr	r3, [r4, #20]
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	e7cf      	b.n	8003038 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8003098:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800309c:	f7ff ff76 	bl	8002f8c <HAL_TIM_Base_MspInit>
 80030a0:	e781      	b.n	8002fa6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030aa:	4303      	orrs	r3, r0
 80030ac:	e7e9      	b.n	8003082 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
}
 80030b0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80030b2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030b8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	e793      	b.n	8002fe4 <HAL_TIM_Base_Init+0x54>
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40014000 	.word	0x40014000

080030c4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80030c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d132      	bne.n	8003132 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ce:	491b      	ldr	r1, [pc, #108]	; (800313c <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	2202      	movs	r2, #2
 80030d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e0:	d019      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e6:	d016      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_TIM_Base_Start_IT+0x7c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 80030ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00f      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 80030f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 80030fe:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 8003106:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x52>
 800310e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_TIM_Base_Start_IT+0x80>)
 800311a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311c:	2a06      	cmp	r2, #6
 800311e:	d00a      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x72>
 8003120:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003124:	d007      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800312c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4770      	bx	lr
    return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
 8003134:	4770      	bx	lr
  return HAL_OK;
 8003136:	2000      	movs	r0, #0
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	00010007 	.word	0x00010007

08003148 <HAL_TIM_OC_DelayElapsedCallback>:
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <HAL_TIM_IC_CaptureCallback>:
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop

08003154 <HAL_TIM_TriggerCallback>:
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003158:	6803      	ldr	r3, [r0, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	0791      	lsls	r1, r2, #30
{
 800315e:	b510      	push	{r4, lr}
 8003160:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003162:	d503      	bpl.n	800316c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	0792      	lsls	r2, r2, #30
 8003168:	f100 808a 	bmi.w	8003280 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	0752      	lsls	r2, r2, #29
 8003170:	d502      	bpl.n	8003178 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	0750      	lsls	r0, r2, #29
 8003176:	d470      	bmi.n	800325a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	0711      	lsls	r1, r2, #28
 800317c:	d502      	bpl.n	8003184 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	0712      	lsls	r2, r2, #28
 8003182:	d458      	bmi.n	8003236 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	06d1      	lsls	r1, r2, #27
 8003188:	d502      	bpl.n	8003190 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	06d2      	lsls	r2, r2, #27
 800318e:	d43e      	bmi.n	800320e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	07d0      	lsls	r0, r2, #31
 8003194:	d503      	bpl.n	800319e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	07d1      	lsls	r1, r2, #31
 800319a:	f100 808a 	bmi.w	80032b2 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	0612      	lsls	r2, r2, #24
 80031a2:	d503      	bpl.n	80031ac <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	0610      	lsls	r0, r2, #24
 80031a8:	f100 808b 	bmi.w	80032c2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	05d1      	lsls	r1, r2, #23
 80031b0:	d503      	bpl.n	80031ba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	0612      	lsls	r2, r2, #24
 80031b6:	f100 808c 	bmi.w	80032d2 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	0650      	lsls	r0, r2, #25
 80031be:	d503      	bpl.n	80031c8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	0651      	lsls	r1, r2, #25
 80031c4:	f100 808d 	bmi.w	80032e2 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	0692      	lsls	r2, r2, #26
 80031cc:	d503      	bpl.n	80031d6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	0690      	lsls	r0, r2, #26
 80031d2:	f100 808e 	bmi.w	80032f2 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	02d1      	lsls	r1, r2, #11
 80031da:	d503      	bpl.n	80031e4 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	02d2      	lsls	r2, r2, #11
 80031e0:	f100 808f 	bmi.w	8003302 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	0290      	lsls	r0, r2, #10
 80031e8:	d503      	bpl.n	80031f2 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	0291      	lsls	r1, r2, #10
 80031ee:	f100 8090 	bmi.w	8003312 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	0252      	lsls	r2, r2, #9
 80031f6:	d503      	bpl.n	8003200 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	0250      	lsls	r0, r2, #9
 80031fc:	f100 8091 	bmi.w	8003322 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	0211      	lsls	r1, r2, #8
 8003204:	d502      	bpl.n	800320c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	0212      	lsls	r2, r2, #8
 800320a:	d44a      	bmi.n	80032a2 <HAL_TIM_IRQHandler+0x14a>
}
 800320c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800320e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003212:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003214:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003216:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800321e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003220:	f040 8090 	bne.w	8003344 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003224:	f7ff ff90 	bl	8003148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ff91 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003230:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	7722      	strb	r2, [r4, #28]
 8003234:	e7ac      	b.n	8003190 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003236:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800323c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003244:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003246:	d17a      	bne.n	800333e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003248:	f7ff ff7e 	bl	8003148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff ff7f 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003254:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	7722      	strb	r2, [r4, #28]
 8003258:	e794      	b.n	8003184 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800325a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003260:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800326c:	d164      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	f7ff ff6b 	bl	8003148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff ff6c 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003278:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800327a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327c:	7722      	strb	r2, [r4, #28]
 800327e:	e77b      	b.n	8003178 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003280:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003284:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003286:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003288:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0799      	lsls	r1, r3, #30
 800328e:	d150      	bne.n	8003332 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003290:	f7ff ff5a 	bl	8003148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff ff5b 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800329c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	7722      	strb	r2, [r4, #28]
 80032a0:	e764      	b.n	800316c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80032a2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80032a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80032a8:	611a      	str	r2, [r3, #16]
}
 80032aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80032ae:	f000 b859 	b.w	8003364 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032b2:	f06f 0201 	mvn.w	r2, #1
 80032b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7fd fd39 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	e76d      	b.n	800319e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 f841 	bl	8003350 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	e76c      	b.n	80031ac <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80032d8:	4620      	mov	r0, r4
 80032da:	f000 f83b 	bl	8003354 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	e76b      	b.n	80031ba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff33 	bl	8003154 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	e76a      	b.n	80031c8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f2:	f06f 0220 	mvn.w	r2, #32
 80032f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 f827 	bl	800334c <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	e769      	b.n	80031d6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003302:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003306:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003308:	4620      	mov	r0, r4
 800330a:	f000 f825 	bl	8003358 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	e768      	b.n	80031e4 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003312:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003316:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003318:	4620      	mov	r0, r4
 800331a:	f000 f81f 	bl	800335c <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	e767      	b.n	80031f2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003322:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003326:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8003328:	4620      	mov	r0, r4
 800332a:	f000 f819 	bl	8003360 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	e766      	b.n	8003200 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003332:	f7ff ff0b 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8003336:	e7b0      	b.n	800329a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8003338:	f7ff ff08 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 800333c:	e79c      	b.n	8003278 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	f7ff ff05 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8003342:	e786      	b.n	8003252 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8003344:	f7ff ff02 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8003348:	e771      	b.n	800322e <HAL_TIM_IRQHandler+0xd6>
 800334a:	bf00      	nop

0800334c <HAL_TIMEx_CommutCallback>:
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <HAL_TIMEx_BreakCallback>:
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop

08003354 <HAL_TIMEx_Break2Callback>:
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop

08003358 <HAL_TIMEx_EncoderIndexCallback>:
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_TIMEx_DirectionChangeCallback>:
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <HAL_TIMEx_IndexErrorCallback>:
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_TIMEx_TransitionErrorCallback>:
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	4605      	mov	r5, r0
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800336e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8003372:	2820      	cmp	r0, #32
 8003374:	d153      	bne.n	800341e <HAL_UART_Receive+0xb6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003376:	468a      	mov	sl, r1
 8003378:	2900      	cmp	r1, #0
 800337a:	d04d      	beq.n	8003418 <HAL_UART_Receive+0xb0>
 800337c:	4614      	mov	r4, r2
 800337e:	2a00      	cmp	r2, #0
 8003380:	d04a      	beq.n	8003418 <HAL_UART_Receive+0xb0>
 8003382:	461e      	mov	r6, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8003384:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8003388:	2b01      	cmp	r3, #1
 800338a:	d048      	beq.n	800341e <HAL_UART_Receive+0xb6>
 800338c:	2301      	movs	r3, #1
 800338e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	2700      	movs	r7, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003394:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	f8c5 708c 	str.w	r7, [r5, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800339a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	66ef      	str	r7, [r5, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033a0:	f7fe f862 	bl	8001468 <HAL_GetTick>

    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033a4:	68ab      	ldr	r3, [r5, #8]
    huart->RxXferSize  = Size;
 80033a6:	f8a5 405c 	strh.w	r4, [r5, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80033ae:	f8a5 405e 	strh.w	r4, [r5, #94]	; 0x5e
    tickstart = HAL_GetTick();
 80033b2:	4680      	mov	r8, r0
    UART_MASK_COMPUTATION(huart);
 80033b4:	d036      	beq.n	8003424 <HAL_UART_Receive+0xbc>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 809e 	bne.w	80034f8 <HAL_UART_Receive+0x190>
 80033bc:	692b      	ldr	r3, [r5, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80a5 	beq.w	800350e <HAL_UART_Receive+0x1a6>
 80033c4:	277f      	movs	r7, #127	; 0x7f
 80033c6:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
      pdata16bits = (uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 80033ca:	f04f 0900 	mov.w	r9, #0
    }

    __HAL_UNLOCK(huart);

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033ce:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    __HAL_UNLOCK(huart);
 80033d2:	2200      	movs	r2, #0
    while (huart->RxXferCount > 0U)
 80033d4:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80033d6:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 80033da:	b1bb      	cbz	r3, 800340c <HAL_UART_Receive+0xa4>
 80033dc:	682c      	ldr	r4, [r5, #0]
 80033de:	1c71      	adds	r1, r6, #1
 80033e0:	d12a      	bne.n	8003438 <HAL_UART_Receive+0xd0>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e2:	69e2      	ldr	r2, [r4, #28]
 80033e4:	0692      	lsls	r2, r2, #26
 80033e6:	d5fc      	bpl.n	80033e2 <HAL_UART_Receive+0x7a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033ea:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80033ec:	f1ba 0f00 	cmp.w	sl, #0
 80033f0:	d073      	beq.n	80034da <HAL_UART_Receive+0x172>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033f2:	f80a 3b01 	strb.w	r3, [sl], #1
      huart->RxXferCount--;
 80033f6:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003402:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e7      	bne.n	80033dc <HAL_UART_Receive+0x74>
    huart->RxState = HAL_UART_STATE_READY;
 800340c:	2320      	movs	r3, #32
 800340e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    return HAL_OK;
 8003412:	2000      	movs	r0, #0
}
 8003414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}
 800341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800341e:	2002      	movs	r0, #2
}
 8003420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 8003424:	692b      	ldr	r3, [r5, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d16c      	bne.n	8003504 <HAL_UART_Receive+0x19c>
 800342a:	f240 17ff 	movw	r7, #511	; 0x1ff
 800342e:	46d1      	mov	r9, sl
 8003430:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
      pdata8bits  = NULL;
 8003434:	469a      	mov	sl, r3
 8003436:	e7ca      	b.n	80033ce <HAL_UART_Receive+0x66>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	69e3      	ldr	r3, [r4, #28]
 800343a:	069b      	lsls	r3, r3, #26
 800343c:	d4d4      	bmi.n	80033e8 <HAL_UART_Receive+0x80>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343e:	f7fe f813 	bl	8001468 <HAL_GetTick>
 8003442:	eba0 0008 	sub.w	r0, r0, r8
 8003446:	4286      	cmp	r6, r0
 8003448:	682c      	ldr	r4, [r5, #0]
 800344a:	d328      	bcc.n	800349e <HAL_UART_Receive+0x136>
 800344c:	b33e      	cbz	r6, 800349e <HAL_UART_Receive+0x136>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	075b      	lsls	r3, r3, #29
 8003452:	d5c4      	bpl.n	80033de <HAL_UART_Receive+0x76>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003454:	69e3      	ldr	r3, [r4, #28]
 8003456:	0518      	lsls	r0, r3, #20
 8003458:	d5c1      	bpl.n	80033de <HAL_UART_Receive+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800345a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800345e:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	e854 3f00 	ldrex	r3, [r4]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003464:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	e844 3200 	strex	r2, r3, [r4]
 800346c:	2a00      	cmp	r2, #0
 800346e:	d1f7      	bne.n	8003460 <HAL_UART_Receive+0xf8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	f104 0308 	add.w	r3, r4, #8
 8003474:	e853 3f00 	ldrex	r3, [r3]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003478:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	f104 0108 	add.w	r1, r4, #8
 8003480:	e841 3200 	strex	r2, r3, [r1]
 8003484:	2a00      	cmp	r2, #0
 8003486:	d1f3      	bne.n	8003470 <HAL_UART_Receive+0x108>

          huart->gState = HAL_UART_STATE_READY;
 8003488:	2320      	movs	r3, #32
 800348a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800348e:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003492:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8003496:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003498:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          return HAL_TIMEOUT;
 800349c:	e7bd      	b.n	800341a <HAL_UART_Receive+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	e844 3200 	strex	r2, r3, [r4]
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	d1f7      	bne.n	800349e <HAL_UART_Receive+0x136>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	f104 0308 	add.w	r3, r4, #8
 80034b2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	f104 0108 	add.w	r1, r4, #8
 80034be:	e841 3200 	strex	r2, r3, [r1]
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d1f3      	bne.n	80034ae <HAL_UART_Receive+0x146>
        huart->gState = HAL_UART_STATE_READY;
 80034c6:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80034c8:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80034cc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80034d0:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80034d2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 80034d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034da:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80034de:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80034ea:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f af74 	bne.w	80033de <HAL_UART_Receive+0x76>
 80034f6:	e789      	b.n	800340c <HAL_UART_Receive+0xa4>
    UART_MASK_COMPUTATION(huart);
 80034f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fc:	d00b      	beq.n	8003516 <HAL_UART_Receive+0x1ae>
 80034fe:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 8003502:	e762      	b.n	80033ca <HAL_UART_Receive+0x62>
      pdata16bits = NULL;
 8003504:	46b9      	mov	r9, r7
 8003506:	27ff      	movs	r7, #255	; 0xff
 8003508:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	e75f      	b.n	80033ce <HAL_UART_Receive+0x66>
    UART_MASK_COMPUTATION(huart);
 800350e:	27ff      	movs	r7, #255	; 0xff
 8003510:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 8003514:	e759      	b.n	80033ca <HAL_UART_Receive+0x62>
 8003516:	692b      	ldr	r3, [r5, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f43f af53 	beq.w	80033c4 <HAL_UART_Receive+0x5c>
 800351e:	273f      	movs	r7, #63	; 0x3f
 8003520:	f8a5 7060 	strh.w	r7, [r5, #96]	; 0x60
 8003524:	e751      	b.n	80033ca <HAL_UART_Receive+0x62>
 8003526:	bf00      	nop

08003528 <HAL_UART_TxCpltCallback>:
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <HAL_UART_RxCpltCallback>:
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <HAL_UART_RxHalfCpltCallback>:
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <HAL_UART_ErrorCallback>:
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003538:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800353a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800353c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 8003540:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003542:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	0612      	lsls	r2, r2, #24
 800354a:	d501      	bpl.n	8003550 <UART_DMAError+0x18>
 800354c:	2921      	cmp	r1, #33	; 0x21
 800354e:	d00d      	beq.n	800356c <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	0652      	lsls	r2, r2, #25
 8003554:	d501      	bpl.n	800355a <UART_DMAError+0x22>
 8003556:	2c22      	cmp	r4, #34	; 0x22
 8003558:	d023      	beq.n	80035a2 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800355a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800355e:	f043 0310 	orr.w	r3, r3, #16
 8003562:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003566:	f7ff ffe5 	bl	8003534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356a:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800356c:	2200      	movs	r2, #0
 800356e:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003576:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	e843 2100 	strex	r1, r2, [r3]
 800357e:	2900      	cmp	r1, #0
 8003580:	d1f7      	bne.n	8003572 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	f103 0208 	add.w	r2, r3, #8
 8003586:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800358a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	f103 0c08 	add.w	ip, r3, #8
 8003592:	e84c 2100 	strex	r1, r2, [ip]
 8003596:	2900      	cmp	r1, #0
 8003598:	d1f3      	bne.n	8003582 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800359a:	2220      	movs	r2, #32
 800359c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 80035a0:	e7d6      	b.n	8003550 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	e843 2100 	strex	r1, r2, [r3]
 80035b4:	2900      	cmp	r1, #0
 80035b6:	d1f7      	bne.n	80035a8 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035b8:	4c13      	ldr	r4, [pc, #76]	; (8003608 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	f103 0208 	add.w	r2, r3, #8
 80035be:	e852 2f00 	ldrex	r2, [r2]
 80035c2:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	f103 0c08 	add.w	ip, r3, #8
 80035c8:	e84c 2100 	strex	r1, r2, [ip]
 80035cc:	2900      	cmp	r1, #0
 80035ce:	d1f4      	bne.n	80035ba <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80035d2:	2a01      	cmp	r2, #1
 80035d4:	d006      	beq.n	80035e4 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 80035de:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e0:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 80035e2:	e7ba      	b.n	800355a <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	e843 2100 	strex	r1, r2, [r3]
 80035f0:	2900      	cmp	r1, #0
 80035f2:	d0f0      	beq.n	80035d6 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	e853 2f00 	ldrex	r2, [r3]
 80035f8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	e843 2100 	strex	r1, r2, [r3]
 8003600:	2900      	cmp	r1, #0
 8003602:	d1ef      	bne.n	80035e4 <UART_DMAError+0xac>
 8003604:	e7e7      	b.n	80035d6 <UART_DMAError+0x9e>
 8003606:	bf00      	nop
 8003608:	effffffe 	.word	0xeffffffe

0800360c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800360c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800360e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003616:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800361a:	f7ff ff8b 	bl	8003534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800361e:	bd08      	pop	{r3, pc}

08003620 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003624:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8003628:	ea12 0f0c 	tst.w	r2, ip
{
 800362c:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362e:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003630:	6899      	ldr	r1, [r3, #8]
{
 8003632:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003634:	f000 80ea 	beq.w	800380c <HAL_UART_IRQHandler+0x1ec>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003638:	4e9a      	ldr	r6, [pc, #616]	; (80038a4 <HAL_UART_IRQHandler+0x284>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800363a:	489b      	ldr	r0, [pc, #620]	; (80038a8 <HAL_UART_IRQHandler+0x288>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800363c:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003640:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003642:	ea5c 0600 	orrs.w	r6, ip, r0
 8003646:	d155      	bne.n	80036f4 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800364a:	2801      	cmp	r0, #1
 800364c:	d022      	beq.n	8003694 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800364e:	02d0      	lsls	r0, r2, #11
 8003650:	d502      	bpl.n	8003658 <HAL_UART_IRQHandler+0x38>
 8003652:	024e      	lsls	r6, r1, #9
 8003654:	f100 8103 	bmi.w	800385e <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003658:	0610      	lsls	r0, r2, #24
 800365a:	d506      	bpl.n	800366a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800365c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003660:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003664:	4301      	orrs	r1, r0
 8003666:	f040 80f2 	bne.w	800384e <HAL_UART_IRQHandler+0x22e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800366a:	0651      	lsls	r1, r2, #25
 800366c:	d534      	bpl.n	80036d8 <HAL_UART_IRQHandler+0xb8>
 800366e:	066e      	lsls	r6, r5, #25
 8003670:	d532      	bpl.n	80036d8 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	e843 2100 	strex	r1, r2, [r3]
 800367e:	2900      	cmp	r1, #0
 8003680:	d1f7      	bne.n	8003672 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003682:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003684:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003686:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800368a:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800368c:	4620      	mov	r0, r4
 800368e:	f7ff ff4b 	bl	8003528 <HAL_UART_TxCpltCallback>
}
 8003692:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003694:	06d6      	lsls	r6, r2, #27
 8003696:	d5da      	bpl.n	800364e <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003698:	06e8      	lsls	r0, r5, #27
 800369a:	d5d8      	bpl.n	800364e <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800369c:	2210      	movs	r2, #16
 800369e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	0652      	lsls	r2, r2, #25
 80036a4:	f140 8106 	bpl.w	80038b4 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80036aa:	6801      	ldr	r1, [r0, #0]
 80036ac:	684a      	ldr	r2, [r1, #4]
 80036ae:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80036b0:	2a00      	cmp	r2, #0
 80036b2:	d0ee      	beq.n	8003692 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036b4:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80036b8:	4295      	cmp	r5, r2
 80036ba:	d9ea      	bls.n	8003692 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 80036bc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036c0:	680a      	ldr	r2, [r1, #0]
 80036c2:	0696      	lsls	r6, r2, #26
 80036c4:	f140 812b 	bpl.w	800391e <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036c8:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 80036cc:	1a69      	subs	r1, r5, r1
 80036ce:	4620      	mov	r0, r4
 80036d0:	b289      	uxth	r1, r1
 80036d2:	f004 fe6b 	bl	80083ac <HAL_UARTEx_RxEventCallback>
}
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80036d8:	0210      	lsls	r0, r2, #8
 80036da:	d502      	bpl.n	80036e2 <HAL_UART_IRQHandler+0xc2>
 80036dc:	0069      	lsls	r1, r5, #1
 80036de:	f100 80db 	bmi.w	8003898 <HAL_UART_IRQHandler+0x278>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80036e2:	01d3      	lsls	r3, r2, #7
 80036e4:	d5d5      	bpl.n	8003692 <HAL_UART_IRQHandler+0x72>
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	dad3      	bge.n	8003692 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036ea:	4620      	mov	r0, r4
}
 80036ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036f0:	f000 bd8c 	b.w	800420c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036f4:	07d6      	lsls	r6, r2, #31
 80036f6:	d509      	bpl.n	800370c <HAL_UART_IRQHandler+0xec>
 80036f8:	05ee      	lsls	r6, r5, #23
 80036fa:	d507      	bpl.n	800370c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036fc:	2601      	movs	r6, #1
 80036fe:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003700:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8003704:	f046 0601 	orr.w	r6, r6, #1
 8003708:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800370c:	0796      	lsls	r6, r2, #30
 800370e:	f140 808f 	bpl.w	8003830 <HAL_UART_IRQHandler+0x210>
 8003712:	07ce      	lsls	r6, r1, #31
 8003714:	d50a      	bpl.n	800372c <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003716:	2602      	movs	r6, #2
 8003718:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800371a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800371e:	f046 0604 	orr.w	r6, r6, #4
 8003722:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003726:	0756      	lsls	r6, r2, #29
 8003728:	f100 8088 	bmi.w	800383c <HAL_UART_IRQHandler+0x21c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800372c:	0716      	lsls	r6, r2, #28
 800372e:	d50b      	bpl.n	8003748 <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003730:	f005 0620 	and.w	r6, r5, #32
 8003734:	4330      	orrs	r0, r6
 8003736:	d007      	beq.n	8003748 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003738:	2008      	movs	r0, #8
 800373a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003740:	f040 0008 	orr.w	r0, r0, #8
 8003744:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003748:	0510      	lsls	r0, r2, #20
 800374a:	d50a      	bpl.n	8003762 <HAL_UART_IRQHandler+0x142>
 800374c:	016e      	lsls	r6, r5, #5
 800374e:	d508      	bpl.n	8003762 <HAL_UART_IRQHandler+0x142>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003750:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003754:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003756:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800375a:	f040 0020 	orr.w	r0, r0, #32
 800375e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003762:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003766:	2800      	cmp	r0, #0
 8003768:	d093      	beq.n	8003692 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800376a:	0690      	lsls	r0, r2, #26
 800376c:	d50b      	bpl.n	8003786 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800376e:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003772:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8003776:	ea55 0201 	orrs.w	r2, r5, r1
 800377a:	d004      	beq.n	8003786 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800377c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800377e:	b112      	cbz	r2, 8003786 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8003780:	4620      	mov	r0, r4
 8003782:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003784:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003786:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800378a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800378c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003790:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003794:	4315      	orrs	r5, r2
 8003796:	f000 80f3 	beq.w	8003980 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800379e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	e843 2100 	strex	r1, r2, [r3]
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d1f7      	bne.n	800379a <HAL_UART_IRQHandler+0x17a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037aa:	4840      	ldr	r0, [pc, #256]	; (80038ac <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	f103 0208 	add.w	r2, r3, #8
 80037b0:	e852 2f00 	ldrex	r2, [r2]
 80037b4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f103 0508 	add.w	r5, r3, #8
 80037ba:	e845 2100 	strex	r1, r2, [r5]
 80037be:	2900      	cmp	r1, #0
 80037c0:	d1f4      	bne.n	80037ac <HAL_UART_IRQHandler+0x18c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80037c4:	2a01      	cmp	r2, #1
 80037c6:	d052      	beq.n	800386e <HAL_UART_IRQHandler+0x24e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80037ca:	2120      	movs	r1, #32
 80037cc:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d2:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80037d4:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d6:	064a      	lsls	r2, r1, #25
 80037d8:	d55a      	bpl.n	8003890 <HAL_UART_IRQHandler+0x270>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	f103 0208 	add.w	r2, r3, #8
 80037de:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	f103 0008 	add.w	r0, r3, #8
 80037ea:	e840 2100 	strex	r1, r2, [r0]
 80037ee:	2900      	cmp	r1, #0
 80037f0:	d1f3      	bne.n	80037da <HAL_UART_IRQHandler+0x1ba>
          if (huart->hdmarx != NULL)
 80037f2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d04b      	beq.n	8003890 <HAL_UART_IRQHandler+0x270>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_UART_IRQHandler+0x290>)
 80037fa:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037fc:	f7fd ffc2 	bl	8001784 <HAL_DMA_Abort_IT>
 8003800:	2800      	cmp	r0, #0
 8003802:	f43f af46 	beq.w	8003692 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003806:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003808:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800380a:	e00e      	b.n	800382a <HAL_UART_IRQHandler+0x20a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800380c:	0696      	lsls	r6, r2, #26
 800380e:	f57f af1b 	bpl.w	8003648 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003812:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003816:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800381a:	ea56 060c 	orrs.w	r6, r6, ip
 800381e:	f43f af13 	beq.w	8003648 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8003822:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003824:	2b00      	cmp	r3, #0
 8003826:	f43f af34 	beq.w	8003692 <HAL_UART_IRQHandler+0x72>
}
 800382a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800382e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003830:	0756      	lsls	r6, r2, #29
 8003832:	f57f af7b 	bpl.w	800372c <HAL_UART_IRQHandler+0x10c>
 8003836:	07ce      	lsls	r6, r1, #31
 8003838:	f57f af78 	bpl.w	800372c <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800383c:	2604      	movs	r6, #4
 800383e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003840:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8003844:	f046 0602 	orr.w	r6, r6, #2
 8003848:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800384c:	e76e      	b.n	800372c <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 800384e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003850:	2b00      	cmp	r3, #0
 8003852:	f43f af1e 	beq.w	8003692 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8003856:	4620      	mov	r0, r4
}
 8003858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800385c:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800385e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003862:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800386a:	f000 bccd 	b.w	8004208 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	e843 2100 	strex	r1, r2, [r3]
 800387a:	2900      	cmp	r1, #0
 800387c:	d0a4      	beq.n	80037c8 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	e853 2f00 	ldrex	r2, [r3]
 8003882:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	e843 2100 	strex	r1, r2, [r3]
 800388a:	2900      	cmp	r1, #0
 800388c:	d1ef      	bne.n	800386e <HAL_UART_IRQHandler+0x24e>
 800388e:	e79b      	b.n	80037c8 <HAL_UART_IRQHandler+0x1a8>
            HAL_UART_ErrorCallback(huart);
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fe4f 	bl	8003534 <HAL_UART_ErrorCallback>
}
 8003896:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003898:	4620      	mov	r0, r4
}
 800389a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800389e:	f000 bcb7 	b.w	8004210 <HAL_UARTEx_TxFifoEmptyCallback>
 80038a2:	bf00      	nop
 80038a4:	04000120 	.word	0x04000120
 80038a8:	10000001 	.word	0x10000001
 80038ac:	effffffe 	.word	0xeffffffe
 80038b0:	0800360d 	.word	0x0800360d
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 80038b8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80038bc:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038be:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80038c0:	2a00      	cmp	r2, #0
 80038c2:	f43f aee6 	beq.w	8003692 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c6:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80038ca:	1a51      	subs	r1, r2, r1
 80038cc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80038ce:	2900      	cmp	r1, #0
 80038d0:	f43f aedf 	beq.w	8003692 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	e843 2000 	strex	r0, r2, [r3]
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d1f7      	bne.n	80038d4 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038e4:	4d29      	ldr	r5, [pc, #164]	; (800398c <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	f103 0208 	add.w	r2, r3, #8
 80038ea:	e852 2f00 	ldrex	r2, [r2]
 80038ee:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	f103 0608 	add.w	r6, r3, #8
 80038f4:	e846 2000 	strex	r0, r2, [r6]
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1f4      	bne.n	80038e6 <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 80038fc:	2220      	movs	r2, #32
 80038fe:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8003902:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003904:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	e843 2000 	strex	r0, r2, [r3]
 8003912:	2800      	cmp	r0, #0
 8003914:	d1f7      	bne.n	8003906 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003916:	4620      	mov	r0, r4
 8003918:	f004 fd48 	bl	80083ac <HAL_UARTEx_RxEventCallback>
}
 800391c:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	e843 2100 	strex	r1, r2, [r3]
 800392a:	2900      	cmp	r1, #0
 800392c:	d1f7      	bne.n	800391e <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	f103 0208 	add.w	r2, r3, #8
 8003932:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	f103 0508 	add.w	r5, r3, #8
 800393e:	e845 2100 	strex	r1, r2, [r5]
 8003942:	2900      	cmp	r1, #0
 8003944:	d1f3      	bne.n	800392e <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	f103 0208 	add.w	r2, r3, #8
 800394a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	f103 0508 	add.w	r5, r3, #8
 8003956:	e845 2100 	strex	r1, r2, [r5]
 800395a:	2900      	cmp	r1, #0
 800395c:	d1f3      	bne.n	8003946 <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 800395e:	2220      	movs	r2, #32
 8003960:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	e843 2100 	strex	r1, r2, [r3]
 8003972:	2900      	cmp	r1, #0
 8003974:	d1f7      	bne.n	8003966 <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003976:	f7fd fecb 	bl	8001710 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800397a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800397e:	e6a3      	b.n	80036c8 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8003980:	4620      	mov	r0, r4
 8003982:	f7ff fdd7 	bl	8003534 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003986:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	effffffe 	.word	0xeffffffe

08003990 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003990:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003992:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d002      	beq.n	80039a0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800399a:	f7ff fdc9 	bl	8003530 <HAL_UART_RxHalfCpltCallback>
}
 800399e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039a0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80039a4:	0849      	lsrs	r1, r1, #1
 80039a6:	f004 fd01 	bl	80083ac <HAL_UARTEx_RxEventCallback>
}
 80039aa:	bd08      	pop	{r3, pc}

080039ac <UART_DMAReceiveCplt>:
{
 80039ac:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039ae:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f012 0220 	ands.w	r2, r2, #32
 80039b8:	d128      	bne.n	8003a0c <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 80039ba:	6803      	ldr	r3, [r0, #0]
 80039bc:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	e843 2100 	strex	r1, r2, [r3]
 80039cc:	2900      	cmp	r1, #0
 80039ce:	d1f7      	bne.n	80039c0 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	f103 0208 	add.w	r2, r3, #8
 80039d4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	f103 0c08 	add.w	ip, r3, #8
 80039e0:	e84c 2100 	strex	r1, r2, [ip]
 80039e4:	2900      	cmp	r1, #0
 80039e6:	d1f3      	bne.n	80039d0 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	f103 0208 	add.w	r2, r3, #8
 80039ec:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	f103 0c08 	add.w	ip, r3, #8
 80039f8:	e84c 2100 	strex	r1, r2, [ip]
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d1f3      	bne.n	80039e8 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003a08:	2a01      	cmp	r2, #1
 8003a0a:	d005      	beq.n	8003a18 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d013      	beq.n	8003a3a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003a12:	f7ff fd8b 	bl	800352c <HAL_UART_RxCpltCallback>
}
 8003a16:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	e843 2100 	strex	r1, r2, [r3]
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d0f1      	beq.n	8003a0c <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	e853 2f00 	ldrex	r2, [r3]
 8003a2c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	e843 2100 	strex	r1, r2, [r3]
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d1ef      	bne.n	8003a18 <UART_DMAReceiveCplt+0x6c>
 8003a38:	e7e8      	b.n	8003a0c <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a3a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8003a3e:	f004 fcb5 	bl	80083ac <HAL_UARTEx_RxEventCallback>
}
 8003a42:	bd08      	pop	{r3, pc}

08003a44 <UART_SetConfig>:
{
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a48:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a4a:	6882      	ldr	r2, [r0, #8]
 8003a4c:	6900      	ldr	r0, [r0, #16]
 8003a4e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a52:	4302      	orrs	r2, r0
 8003a54:	430a      	orrs	r2, r1
 8003a56:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a58:	49b3      	ldr	r1, [pc, #716]	; (8003d28 <UART_SetConfig+0x2e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a5c:	4029      	ands	r1, r5
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68e1      	ldr	r1, [r4, #12]
 8003a66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a6a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a6c:	49af      	ldr	r1, [pc, #700]	; (8003d2c <UART_SetConfig+0x2e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a6e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a70:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a72:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a74:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a76:	f000 8081 	beq.w	8003b7c <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8003a7a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a7c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8003a80:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8003a84:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a8e:	f022 020f 	bic.w	r2, r2, #15
 8003a92:	430a      	orrs	r2, r1
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a96:	4aa6      	ldr	r2, [pc, #664]	; (8003d30 <UART_SetConfig+0x2ec>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d027      	beq.n	8003aec <UART_SetConfig+0xa8>
 8003a9c:	4aa5      	ldr	r2, [pc, #660]	; (8003d34 <UART_SetConfig+0x2f0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04b      	beq.n	8003b3a <UART_SetConfig+0xf6>
 8003aa2:	4aa5      	ldr	r2, [pc, #660]	; (8003d38 <UART_SetConfig+0x2f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f000 8113 	beq.w	8003cd0 <UART_SetConfig+0x28c>
 8003aaa:	4aa4      	ldr	r2, [pc, #656]	; (8003d3c <UART_SetConfig+0x2f8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	f000 80ba 	beq.w	8003c26 <UART_SetConfig+0x1e2>
 8003ab2:	4aa3      	ldr	r2, [pc, #652]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d111      	bne.n	8003adc <UART_SetConfig+0x98>
 8003ab8:	4ba2      	ldr	r3, [pc, #648]	; (8003d44 <UART_SetConfig+0x300>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac6:	f000 8128 	beq.w	8003d1a <UART_SetConfig+0x2d6>
 8003aca:	f200 80d7 	bhi.w	8003c7c <UART_SetConfig+0x238>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80db 	beq.w	8003c8a <UART_SetConfig+0x246>
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad8:	f000 80b1 	beq.w	8003c3e <UART_SetConfig+0x1fa>
        ret = HAL_ERROR;
 8003adc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003ade:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8003ae0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8003ae4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8003ae8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aec:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <UART_SetConfig+0x300>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	f240 808e 	bls.w	8003c1a <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003b02:	f000 8105 	beq.w	8003d10 <UART_SetConfig+0x2cc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b06:	f7ff f86d 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	f000 80de 	beq.w	8003ccc <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b12:	6862      	ldr	r2, [r4, #4]
 8003b14:	4b8c      	ldr	r3, [pc, #560]	; (8003d48 <UART_SetConfig+0x304>)
 8003b16:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003b1a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b22:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003b26:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2a:	f1a3 0210 	sub.w	r2, r3, #16
 8003b2e:	428a      	cmp	r2, r1
 8003b30:	d8d4      	bhi.n	8003adc <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	2000      	movs	r0, #0
 8003b36:	60d3      	str	r3, [r2, #12]
 8003b38:	e7d1      	b.n	8003ade <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b3a:	4b82      	ldr	r3, [pc, #520]	; (8003d44 <UART_SetConfig+0x300>)
 8003b3c:	4a83      	ldr	r2, [pc, #524]	; (8003d4c <UART_SetConfig+0x308>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b48:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003b4c:	d07d      	beq.n	8003c4a <UART_SetConfig+0x206>
    switch (clocksource)
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d8c4      	bhi.n	8003adc <UART_SetConfig+0x98>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0x114>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003c85 	.word	0x08003c85
 8003b5c:	08003b07 	.word	0x08003b07
 8003b60:	08003d07 	.word	0x08003d07
 8003b64:	08003add 	.word	0x08003add
 8003b68:	08003c45 	.word	0x08003c45
 8003b6c:	08003add 	.word	0x08003add
 8003b70:	08003add 	.word	0x08003add
 8003b74:	08003add 	.word	0x08003add
 8003b78:	08003cf7 	.word	0x08003cf7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b7c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8003b80:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b8c:	486d      	ldr	r0, [pc, #436]	; (8003d44 <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b8e:	f022 020f 	bic.w	r2, r2, #15
 8003b92:	430a      	orrs	r2, r1
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b96:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003b9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	f000 80ae 	beq.w	8003d02 <UART_SetConfig+0x2be>
 8003ba6:	d80b      	bhi.n	8003bc0 <UART_SetConfig+0x17c>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d039      	beq.n	8003c20 <UART_SetConfig+0x1dc>
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d194      	bne.n	8003adc <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe febb 	bl	800292c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	f000 8088 	beq.w	8003ccc <UART_SetConfig+0x288>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bbe:	e004      	b.n	8003bca <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc4:	d18a      	bne.n	8003adc <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bca:	4b5f      	ldr	r3, [pc, #380]	; (8003d48 <UART_SetConfig+0x304>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bcc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bce:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8003bd2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bd6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8003bda:	4299      	cmp	r1, r3
 8003bdc:	f63f af7e 	bhi.w	8003adc <UART_SetConfig+0x98>
 8003be0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003be4:	f63f af7a 	bhi.w	8003adc <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be8:	2300      	movs	r3, #0
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fc fb68 	bl	80002c0 <__aeabi_uldivmod>
 8003bf0:	0209      	lsls	r1, r1, #8
 8003bf2:	0203      	lsls	r3, r0, #8
 8003bf4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003bf8:	0868      	lsrs	r0, r5, #1
 8003bfa:	1818      	adds	r0, r3, r0
 8003bfc:	462a      	mov	r2, r5
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f141 0100 	adc.w	r1, r1, #0
 8003c06:	f7fc fb5b 	bl	80002c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c0a:	4a51      	ldr	r2, [pc, #324]	; (8003d50 <UART_SetConfig+0x30c>)
 8003c0c:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003c10:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c12:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c14:	f63f af62 	bhi.w	8003adc <UART_SetConfig+0x98>
 8003c18:	e78b      	b.n	8003b32 <UART_SetConfig+0xee>
 8003c1a:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <UART_SetConfig+0x310>)
 8003c1c:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c1e:	e793      	b.n	8003b48 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7fe ffce 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
        break;
 8003c24:	e7c7      	b.n	8003bb6 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <UART_SetConfig+0x300>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d072      	beq.n	8003d1a <UART_SetConfig+0x2d6>
 8003c34:	d862      	bhi.n	8003cfc <UART_SetConfig+0x2b8>
 8003c36:	b343      	cbz	r3, 8003c8a <UART_SetConfig+0x246>
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	f47f af4f 	bne.w	8003adc <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c42:	d062      	beq.n	8003d0a <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c44:	f7fe fe72 	bl	800292c <HAL_RCC_GetSysClockFreq>
        break;
 8003c48:	e75f      	b.n	8003b0a <UART_SetConfig+0xc6>
    switch (clocksource)
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	f63f af46 	bhi.w	8003adc <UART_SetConfig+0x98>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x214>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c91 	.word	0x08003c91
 8003c5c:	08003d11 	.word	0x08003d11
 8003c60:	08003d17 	.word	0x08003d17
 8003c64:	08003add 	.word	0x08003add
 8003c68:	08003d0b 	.word	0x08003d0b
 8003c6c:	08003add 	.word	0x08003add
 8003c70:	08003add 	.word	0x08003add
 8003c74:	08003add 	.word	0x08003add
 8003c78:	08003c99 	.word	0x08003c99
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c80:	d036      	beq.n	8003cf0 <UART_SetConfig+0x2ac>
 8003c82:	e72b      	b.n	8003adc <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe ff9c 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
        break;
 8003c88:	e73f      	b.n	8003b0a <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c8e:	d1f9      	bne.n	8003c84 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7fe ff96 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c94:	b1d0      	cbz	r0, 8003ccc <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c98:	6862      	ldr	r2, [r4, #4]
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <UART_SetConfig+0x304>)
 8003c9c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8003ca0:	fbb0 f0f1 	udiv	r0, r0, r1
 8003ca4:	0853      	lsrs	r3, r2, #1
 8003ca6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cae:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb2:	f1a0 0210 	sub.w	r2, r0, #16
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f63f af10 	bhi.w	8003adc <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cbc:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8003cc0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc2:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc4:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003cc8:	4318      	orrs	r0, r3
 8003cca:	60d0      	str	r0, [r2, #12]
 8003ccc:	2000      	movs	r0, #0
 8003cce:	e706      	b.n	8003ade <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <UART_SetConfig+0x300>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d01d      	beq.n	8003d1a <UART_SetConfig+0x2d6>
 8003cde:	d804      	bhi.n	8003cea <UART_SetConfig+0x2a6>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0d2      	beq.n	8003c8a <UART_SetConfig+0x246>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d0aa      	beq.n	8003c3e <UART_SetConfig+0x1fa>
 8003ce8:	e6f8      	b.n	8003adc <UART_SetConfig+0x98>
 8003cea:	2b30      	cmp	r3, #48	; 0x30
 8003cec:	f47f aef6 	bne.w	8003adc <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003cf4:	d0d0      	beq.n	8003c98 <UART_SetConfig+0x254>
    switch (clocksource)
 8003cf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cfa:	e70a      	b.n	8003b12 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8003cfe:	d0f7      	beq.n	8003cf0 <UART_SetConfig+0x2ac>
 8003d00:	e6ec      	b.n	8003adc <UART_SetConfig+0x98>
 8003d02:	4815      	ldr	r0, [pc, #84]	; (8003d58 <UART_SetConfig+0x314>)
 8003d04:	e761      	b.n	8003bca <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 8003d06:	4814      	ldr	r0, [pc, #80]	; (8003d58 <UART_SetConfig+0x314>)
 8003d08:	e703      	b.n	8003b12 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7fe fe0f 	bl	800292c <HAL_RCC_GetSysClockFreq>
        break;
 8003d0e:	e7c1      	b.n	8003c94 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7fe ff68 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
        break;
 8003d14:	e7be      	b.n	8003c94 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 8003d16:	4810      	ldr	r0, [pc, #64]	; (8003d58 <UART_SetConfig+0x314>)
 8003d18:	e7be      	b.n	8003c98 <UART_SetConfig+0x254>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8003d1e:	480e      	ldr	r0, [pc, #56]	; (8003d58 <UART_SetConfig+0x314>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d20:	f47f aef7 	bne.w	8003b12 <UART_SetConfig+0xce>
 8003d24:	e7b8      	b.n	8003c98 <UART_SetConfig+0x254>
 8003d26:	bf00      	nop
 8003d28:	cfff69f3 	.word	0xcfff69f3
 8003d2c:	40008000 	.word	0x40008000
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40004400 	.word	0x40004400
 8003d38:	40004800 	.word	0x40004800
 8003d3c:	40004c00 	.word	0x40004c00
 8003d40:	40005000 	.word	0x40005000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08009e8c 	.word	0x08009e8c
 8003d4c:	08009e7c 	.word	0x08009e7c
 8003d50:	000ffcff 	.word	0x000ffcff
 8003d54:	08009e78 	.word	0x08009e78
 8003d58:	00f42400 	.word	0x00f42400

08003d5c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d5e:	07da      	lsls	r2, r3, #31
{
 8003d60:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d62:	d506      	bpl.n	8003d72 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d64:	6801      	ldr	r1, [r0, #0]
 8003d66:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d68:	684a      	ldr	r2, [r1, #4]
 8003d6a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003d6e:	4322      	orrs	r2, r4
 8003d70:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d72:	079c      	lsls	r4, r3, #30
 8003d74:	d506      	bpl.n	8003d84 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d76:	6801      	ldr	r1, [r0, #0]
 8003d78:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d7a:	684a      	ldr	r2, [r1, #4]
 8003d7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d80:	4322      	orrs	r2, r4
 8003d82:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d84:	0759      	lsls	r1, r3, #29
 8003d86:	d506      	bpl.n	8003d96 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d88:	6801      	ldr	r1, [r0, #0]
 8003d8a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d8c:	684a      	ldr	r2, [r1, #4]
 8003d8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d92:	4322      	orrs	r2, r4
 8003d94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d96:	071a      	lsls	r2, r3, #28
 8003d98:	d506      	bpl.n	8003da8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d9a:	6801      	ldr	r1, [r0, #0]
 8003d9c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d9e:	684a      	ldr	r2, [r1, #4]
 8003da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da4:	4322      	orrs	r2, r4
 8003da6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	06dc      	lsls	r4, r3, #27
 8003daa:	d506      	bpl.n	8003dba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dac:	6801      	ldr	r1, [r0, #0]
 8003dae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003db6:	4322      	orrs	r2, r4
 8003db8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dba:	0699      	lsls	r1, r3, #26
 8003dbc:	d506      	bpl.n	8003dcc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dbe:	6801      	ldr	r1, [r0, #0]
 8003dc0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003dc2:	688a      	ldr	r2, [r1, #8]
 8003dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc8:	4322      	orrs	r2, r4
 8003dca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	065a      	lsls	r2, r3, #25
 8003dce:	d509      	bpl.n	8003de4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd0:	6801      	ldr	r1, [r0, #0]
 8003dd2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003dd4:	684a      	ldr	r2, [r1, #4]
 8003dd6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003dda:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ddc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003de0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de2:	d00b      	beq.n	8003dfc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	d506      	bpl.n	8003df6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de8:	6802      	ldr	r2, [r0, #0]
 8003dea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003dec:	6853      	ldr	r3, [r2, #4]
 8003dee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003df2:	430b      	orrs	r3, r1
 8003df4:	6053      	str	r3, [r2, #4]
}
 8003df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dfa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dfc:	684a      	ldr	r2, [r1, #4]
 8003dfe:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003e00:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003e04:	4322      	orrs	r2, r4
 8003e06:	604a      	str	r2, [r1, #4]
 8003e08:	e7ec      	b.n	8003de4 <UART_AdvFeatureConfig+0x88>
 8003e0a:	bf00      	nop

08003e0c <UART_WaitOnFlagUntilTimeout>:
{
 8003e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	6804      	ldr	r4, [r0, #0]
{
 8003e16:	4607      	mov	r7, r0
 8003e18:	460e      	mov	r6, r1
 8003e1a:	4615      	mov	r5, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003e22:	d10a      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	69e3      	ldr	r3, [r4, #28]
 8003e26:	ea36 0303 	bics.w	r3, r6, r3
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	429d      	cmp	r5, r3
 8003e32:	d0f7      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8003e34:	2000      	movs	r0, #0
}
 8003e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3a:	69e3      	ldr	r3, [r4, #28]
 8003e3c:	ea36 0303 	bics.w	r3, r6, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	42ab      	cmp	r3, r5
 8003e48:	d1f4      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd fb0d 	bl	8001468 <HAL_GetTick>
 8003e4e:	eba0 0009 	sub.w	r0, r0, r9
 8003e52:	4540      	cmp	r0, r8
 8003e54:	d833      	bhi.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e56:	f1b8 0f00 	cmp.w	r8, #0
 8003e5a:	d030      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e5c:	683c      	ldr	r4, [r7, #0]
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	0759      	lsls	r1, r3, #29
 8003e62:	4622      	mov	r2, r4
 8003e64:	d5db      	bpl.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e66:	69e3      	ldr	r3, [r4, #28]
 8003e68:	051b      	lsls	r3, r3, #20
 8003e6a:	d5d8      	bpl.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e70:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	e844 3100 	strex	r1, r3, [r4]
 8003e7e:	b139      	cbz	r1, 8003e90 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	e852 3f00 	ldrex	r3, [r2]
 8003e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	e842 3100 	strex	r1, r3, [r2]
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d1f7      	bne.n	8003e80 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	f102 0308 	add.w	r3, r2, #8
 8003e94:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	f102 0008 	add.w	r0, r2, #8
 8003ea0:	e840 3100 	strex	r1, r3, [r0]
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d1f3      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003eae:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8003eb6:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8003ebc:	e7bb      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x2a>
 8003ebe:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	e842 3100 	strex	r1, r3, [r2]
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d1f7      	bne.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	f102 0308 	add.w	r3, r2, #8
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	f102 0008 	add.w	r0, r2, #8
 8003ee0:	e840 3100 	strex	r1, r3, [r0]
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d1f3      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8003eee:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	e79d      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x2a>
 8003efa:	bf00      	nop

08003efc <HAL_UART_Transmit>:
{
 8003efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f00:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003f02:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8003f06:	2820      	cmp	r0, #32
{
 8003f08:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0a:	f040 8090 	bne.w	800402e <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	4689      	mov	r9, r1
 8003f10:	2900      	cmp	r1, #0
 8003f12:	d048      	beq.n	8003fa6 <HAL_UART_Transmit+0xaa>
 8003f14:	4614      	mov	r4, r2
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	d045      	beq.n	8003fa6 <HAL_UART_Transmit+0xaa>
 8003f1a:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8003f1c:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f000 8084 	beq.w	800402e <HAL_UART_Transmit+0x132>
 8003f26:	2301      	movs	r3, #1
 8003f28:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f30:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f36:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8003f3a:	f7fd fa95 	bl	8001468 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3e:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8003f40:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003f48:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 8003f4c:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4e:	d072      	beq.n	8004036 <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 8003f50:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8003f54:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003f56:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003f58:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8003f5c:	b1b3      	cbz	r3, 8003f8c <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	682c      	ldr	r4, [r5, #0]
 8003f60:	1c71      	adds	r1, r6, #1
 8003f62:	d124      	bne.n	8003fae <HAL_UART_Transmit+0xb2>
 8003f64:	69e2      	ldr	r2, [r4, #28]
 8003f66:	0612      	lsls	r2, r2, #24
 8003f68:	d5fc      	bpl.n	8003f64 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8003f6a:	f1b9 0f00 	cmp.w	r9, #0
 8003f6e:	d059      	beq.n	8004024 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f70:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003f74:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003f76:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f82:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e9      	bne.n	8003f60 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8c:	9600      	str	r6, [sp, #0]
 8003f8e:	463b      	mov	r3, r7
 8003f90:	2200      	movs	r2, #0
 8003f92:	2140      	movs	r1, #64	; 0x40
 8003f94:	4628      	mov	r0, r5
 8003f96:	f7ff ff39 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d171      	bne.n	8004082 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8003fa4:	e000      	b.n	8003fa8 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8003fa6:	2001      	movs	r0, #1
}
 8003fa8:	b003      	add	sp, #12
 8003faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fae:	69e3      	ldr	r3, [r4, #28]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	d4da      	bmi.n	8003f6a <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7fd fa58 	bl	8001468 <HAL_GetTick>
 8003fb8:	1bc0      	subs	r0, r0, r7
 8003fba:	4286      	cmp	r6, r0
 8003fbc:	d341      	bcc.n	8004042 <HAL_UART_Transmit+0x146>
 8003fbe:	2e00      	cmp	r6, #0
 8003fc0:	d03f      	beq.n	8004042 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc2:	682c      	ldr	r4, [r5, #0]
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	0752      	lsls	r2, r2, #29
 8003fc8:	4623      	mov	r3, r4
 8003fca:	d5c9      	bpl.n	8003f60 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fcc:	69e2      	ldr	r2, [r4, #28]
 8003fce:	0510      	lsls	r0, r2, #20
 8003fd0:	d5c6      	bpl.n	8003f60 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd6:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	e844 2100 	strex	r1, r2, [r4]
 8003fe4:	b139      	cbz	r1, 8003ff6 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	e853 2f00 	ldrex	r2, [r3]
 8003fea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	e843 2100 	strex	r1, r2, [r3]
 8003ff2:	2900      	cmp	r1, #0
 8003ff4:	d1f7      	bne.n	8003fe6 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	f103 0208 	add.w	r2, r3, #8
 8003ffa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	f103 0008 	add.w	r0, r3, #8
 8004006:	e840 2100 	strex	r1, r2, [r0]
 800400a:	2900      	cmp	r1, #0
 800400c:	d1f3      	bne.n	8003ff6 <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800400e:	2320      	movs	r3, #32
 8004010:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004014:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004018:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 800401c:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800401e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8004022:	e7c1      	b.n	8003fa8 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004024:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402c:	e7a2      	b.n	8003f74 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 800402e:	2002      	movs	r0, #2
}
 8004030:	b003      	add	sp, #12
 8004032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004036:	692b      	ldr	r3, [r5, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d189      	bne.n	8003f50 <HAL_UART_Transmit+0x54>
 800403c:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800403e:	4699      	mov	r9, r3
 8004040:	e786      	b.n	8003f50 <HAL_UART_Transmit+0x54>
 8004042:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	e843 2100 	strex	r1, r2, [r3]
 8004050:	2900      	cmp	r1, #0
 8004052:	d1f7      	bne.n	8004044 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f103 0208 	add.w	r2, r3, #8
 8004058:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	f103 0008 	add.w	r0, r3, #8
 8004064:	e840 2100 	strex	r1, r2, [r0]
 8004068:	2900      	cmp	r1, #0
 800406a:	d1f3      	bne.n	8004054 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 800406c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800406e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8004070:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8004074:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004078:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800407c:	b003      	add	sp, #12
 800407e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8004082:	2003      	movs	r0, #3
 8004084:	e790      	b.n	8003fa8 <HAL_UART_Transmit+0xac>
 8004086:	bf00      	nop

08004088 <HAL_UART_Init>:
  if (huart == NULL)
 8004088:	2800      	cmp	r0, #0
 800408a:	d066      	beq.n	800415a <HAL_UART_Init+0xd2>
{
 800408c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800408e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8004092:	b082      	sub	sp, #8
 8004094:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	2b00      	cmp	r3, #0
 8004098:	d04c      	beq.n	8004134 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800409a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	2324      	movs	r3, #36	; 0x24
 800409e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80040aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ac:	f7ff fcca 	bl	8003a44 <UART_SetConfig>
 80040b0:	2801      	cmp	r0, #1
 80040b2:	d03c      	beq.n	800412e <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d135      	bne.n	8004126 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80040c2:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c4:	6899      	ldr	r1, [r3, #8]
 80040c6:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80040ca:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80040cc:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80040d0:	f041 0101 	orr.w	r1, r1, #1
 80040d4:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80040da:	f7fd f9c5 	bl	8001468 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80040e4:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e6:	d40e      	bmi.n	8004106 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	075b      	lsls	r3, r3, #29
 80040ec:	d427      	bmi.n	800413e <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80040f6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 80040fe:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004102:	b002      	add	sp, #8
 8004104:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004106:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	462a      	mov	r2, r5
 800410e:	4603      	mov	r3, r0
 8004110:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004114:	4620      	mov	r0, r4
 8004116:	f7ff fe79 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 800411a:	b9e0      	cbnz	r0, 8004156 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	075b      	lsls	r3, r3, #29
 8004122:	d40c      	bmi.n	800413e <HAL_UART_Init+0xb6>
 8004124:	e7e3      	b.n	80040ee <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8004126:	4620      	mov	r0, r4
 8004128:	f7ff fe18 	bl	8003d5c <UART_AdvFeatureConfig>
 800412c:	e7c5      	b.n	80040ba <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800412e:	2001      	movs	r0, #1
}
 8004130:	b002      	add	sp, #8
 8004132:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004134:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8004138:	f7fd f806 	bl	8001148 <HAL_UART_MspInit>
 800413c:	e7ad      	b.n	800409a <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800413e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	4633      	mov	r3, r6
 8004148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800414c:	4620      	mov	r0, r4
 800414e:	f7ff fe5d 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8004152:	2800      	cmp	r0, #0
 8004154:	d0cb      	beq.n	80040ee <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8004156:	2003      	movs	r0, #3
 8004158:	e7d3      	b.n	8004102 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800415a:	2001      	movs	r0, #1
}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <UART_Start_Receive_DMA>:
{
 8004160:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004162:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	2500      	movs	r5, #0
 8004166:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 800416a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800416c:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800416e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004172:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8004176:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8004178:	b168      	cbz	r0, 8004196 <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800417a:	4e20      	ldr	r6, [pc, #128]	; (80041fc <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800417c:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800417e:	4613      	mov	r3, r2
 8004180:	460a      	mov	r2, r1
 8004182:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004184:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004186:	4e1e      	ldr	r6, [pc, #120]	; (8004200 <UART_Start_Receive_DMA+0xa0>)
 8004188:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800418a:	4e1e      	ldr	r6, [pc, #120]	; (8004204 <UART_Start_Receive_DMA+0xa4>)
 800418c:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800418e:	3124      	adds	r1, #36	; 0x24
 8004190:	f7fd fa64 	bl	800165c <HAL_DMA_Start_IT>
 8004194:	bb40      	cbnz	r0, 80041e8 <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004196:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8004198:	2200      	movs	r2, #0
 800419a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800419e:	b14b      	cbz	r3, 80041b4 <UART_Start_Receive_DMA+0x54>
 80041a0:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	e843 2100 	strex	r1, r2, [r3]
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d1f7      	bne.n	80041a2 <UART_Start_Receive_DMA+0x42>
 80041b2:	e000      	b.n	80041b6 <UART_Start_Receive_DMA+0x56>
 80041b4:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	f103 0208 	add.w	r2, r3, #8
 80041ba:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	f103 0008 	add.w	r0, r3, #8
 80041c6:	e840 2100 	strex	r1, r2, [r0]
 80041ca:	2900      	cmp	r1, #0
 80041cc:	d1f3      	bne.n	80041b6 <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	f103 0208 	add.w	r2, r3, #8
 80041d2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	f103 0108 	add.w	r1, r3, #8
 80041de:	e841 2000 	strex	r0, r2, [r1]
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1f3      	bne.n	80041ce <UART_Start_Receive_DMA+0x6e>
}
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041e8:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 80041ea:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 80041ec:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041f0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 80041f4:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 80041f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	080039ad 	.word	0x080039ad
 8004200:	08003991 	.word	0x08003991
 8004204:	08003539 	.word	0x08003539

08004208 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop

0800420c <HAL_UARTEx_RxFifoFullCallback>:
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <HAL_UARTEx_TxFifoEmptyCallback>:
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop

08004214 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004214:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004218:	2b01      	cmp	r3, #1
 800421a:	d017      	beq.n	800424c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800421c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800421e:	2324      	movs	r3, #36	; 0x24
{
 8004220:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8004222:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004226:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004228:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800422a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800422c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004230:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004234:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004236:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004238:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800423a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800423e:	2220      	movs	r2, #32
 8004240:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8004244:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8004248:	4618      	mov	r0, r3
}
 800424a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800424c:	2002      	movs	r0, #2
}
 800424e:	4770      	bx	lr

08004250 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004250:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8004254:	2a01      	cmp	r2, #1
 8004256:	d037      	beq.n	80042c8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800425a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	2024      	movs	r0, #36	; 0x24
{
 800425e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004264:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004266:	6810      	ldr	r0, [r2, #0]
 8004268:	f020 0001 	bic.w	r0, r0, #1
 800426c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800426e:	6890      	ldr	r0, [r2, #8]
 8004270:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8004274:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004276:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004278:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800427a:	b310      	cbz	r0, 80042c2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800427c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800427e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8004280:	4d12      	ldr	r5, [pc, #72]	; (80042cc <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004282:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004286:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800428a:	4911      	ldr	r1, [pc, #68]	; (80042d0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800428c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004290:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004294:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004298:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800429c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800429e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042a0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042a4:	fbb1 f1f5 	udiv	r1, r1, r5
 80042a8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80042ac:	2100      	movs	r1, #0
 80042ae:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80042b2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042b4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80042b6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80042ba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80042c0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80042c2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80042c4:	4608      	mov	r0, r1
 80042c6:	e7ef      	b.n	80042a8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80042c8:	2002      	movs	r0, #2
}
 80042ca:	4770      	bx	lr
 80042cc:	08009ea4 	.word	0x08009ea4
 80042d0:	08009eac 	.word	0x08009eac

080042d4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80042d4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80042d8:	2a01      	cmp	r2, #1
 80042da:	d037      	beq.n	800434c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042de:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042e0:	2024      	movs	r0, #36	; 0x24
{
 80042e2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042e8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80042ea:	6810      	ldr	r0, [r2, #0]
 80042ec:	f020 0001 	bic.w	r0, r0, #1
 80042f0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042f2:	6890      	ldr	r0, [r2, #8]
 80042f4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80042f8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042fa:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042fc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042fe:	b310      	cbz	r0, 8004346 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004300:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004302:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004304:	4d12      	ldr	r5, [pc, #72]	; (8004350 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004306:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800430a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800430e:	4911      	ldr	r1, [pc, #68]	; (8004354 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004310:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004314:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004318:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800431c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004320:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004322:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004324:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004328:	fbb1 f1f5 	udiv	r1, r1, r5
 800432c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8004330:	2100      	movs	r1, #0
 8004332:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8004336:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004338:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800433a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800433e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8004340:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8004344:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8004346:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004348:	4608      	mov	r0, r1
 800434a:	e7ef      	b.n	800432c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800434c:	2002      	movs	r0, #2
}
 800434e:	4770      	bx	lr
 8004350:	08009ea4 	.word	0x08009ea4
 8004354:	08009eac 	.word	0x08009eac

08004358 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8004358:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800435a:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800435e:	2e20      	cmp	r6, #32
 8004360:	d112      	bne.n	8004388 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8004362:	b179      	cbz	r1, 8004384 <HAL_UARTEx_ReceiveToIdle_DMA+0x2c>
 8004364:	b172      	cbz	r2, 8004384 <HAL_UARTEx_ReceiveToIdle_DMA+0x2c>
    __HAL_LOCK(huart);
 8004366:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800436a:	2b01      	cmp	r3, #1
 800436c:	4604      	mov	r4, r0
 800436e:	d00b      	beq.n	8004388 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
 8004370:	2301      	movs	r3, #1
 8004372:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004376:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004378:	f7ff fef2 	bl	8004160 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800437c:	b918      	cbnz	r0, 8004386 <HAL_UARTEx_ReceiveToIdle_DMA+0x2e>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d003      	beq.n	800438c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
      return HAL_ERROR;
 8004384:	2001      	movs	r0, #1
}
 8004386:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8004388:	2002      	movs	r0, #2
}
 800438a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	2310      	movs	r3, #16
 8004390:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004396:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	e842 3100 	strex	r1, r3, [r2]
 800439e:	2900      	cmp	r1, #0
 80043a0:	d1f7      	bne.n	8004392 <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
}
 80043a2:	bd70      	pop	{r4, r5, r6, pc}

080043a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043a4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80043a6:	f001 fe23 	bl	8005ff0 <vTaskStartScheduler>
  
  return osOK;
}
 80043aa:	2000      	movs	r0, #0
 80043ac:	bd08      	pop	{r3, pc}
 80043ae:	bf00      	nop

080043b0 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b0:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80043b4:	b10b      	cbz	r3, 80043ba <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80043b6:	f001 bf25 	b.w	8006204 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80043ba:	f001 bf1d 	b.w	80061f8 <xTaskGetTickCount>
 80043be:	bf00      	nop

080043c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4684      	mov	ip, r0
 80043c4:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043c6:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 80043ca:	f8dc 1000 	ldr.w	r1, [ip]
 80043ce:	f9bc c008 	ldrsh.w	ip, [ip, #8]
 80043d2:	6840      	ldr	r0, [r0, #4]
{
 80043d4:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 80043d6:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80043da:	bf14      	ite	ne
 80043dc:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043e0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043e2:	9400      	str	r4, [sp, #0]
 80043e4:	ac03      	add	r4, sp, #12
 80043e6:	9401      	str	r4, [sp, #4]
 80043e8:	f001 fbdc 	bl	8005ba4 <xTaskCreate>
 80043ec:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043ee:	bf0c      	ite	eq
 80043f0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80043f2:	2000      	movne	r0, #0
}
 80043f4:	b004      	add	sp, #16
 80043f6:	bd10      	pop	{r4, pc}

080043f8 <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 80043f8:	f002 b8a6 	b.w	8006548 <xTaskGetCurrentTaskHandle>

080043fc <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 80043fc:	b508      	push	{r3, lr}
  if (priority != osPriorityError) {
 80043fe:	2984      	cmp	r1, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004400:	bf14      	ite	ne
 8004402:	3103      	addne	r1, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004404:	2100      	moveq	r1, #0
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 8004406:	f001 fd81 	bl	8005f0c <vTaskPrioritySet>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800440a:	2000      	movs	r0, #0
 800440c:	bd08      	pop	{r3, pc}
 800440e:	bf00      	nop

08004410 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004410:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004412:	2801      	cmp	r0, #1
 8004414:	bf38      	it	cc
 8004416:	2001      	movcc	r0, #1
 8004418:	f001 fd48 	bl	8005eac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800441c:	2000      	movs	r0, #0
 800441e:	bd08      	pop	{r3, pc}

08004420 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004420:	b500      	push	{lr}
 8004422:	b083      	sub	sp, #12
 8004424:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8004426:	6802      	ldr	r2, [r0, #0]
 8004428:	9200      	str	r2, [sp, #0]
 800442a:	f1a1 0201 	sub.w	r2, r1, #1
 800442e:	fab2 f282 	clz	r2, r2
 8004432:	0952      	lsrs	r2, r2, #5
 8004434:	2101      	movs	r1, #1
 8004436:	4803      	ldr	r0, [pc, #12]	; (8004444 <osTimerCreate+0x24>)
 8004438:	f002 fb86 	bl	8006b48 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800443c:	b003      	add	sp, #12
 800443e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004442:	bf00      	nop
 8004444:	0800a070 	.word	0x0800a070

08004448 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8004448:	b510      	push	{r4, lr}
 800444a:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800444c:	2400      	movs	r4, #0
 800444e:	2901      	cmp	r1, #1
 8004450:	460a      	mov	r2, r1
 8004452:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8004454:	bf38      	it	cc
 8004456:	2201      	movcc	r2, #1
 8004458:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 800445c:	b14b      	cbz	r3, 8004472 <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800445e:	9400      	str	r4, [sp, #0]
 8004460:	ab03      	add	r3, sp, #12
 8004462:	2109      	movs	r1, #9
 8004464:	f002 fbd2 	bl	8006c0c <xTimerGenericCommand>
 8004468:	2801      	cmp	r0, #1
 800446a:	d00b      	beq.n	8004484 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 800446c:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800446e:	b004      	add	sp, #16
 8004470:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2104      	movs	r1, #4
 8004476:	f002 fbc9 	bl	8006c0c <xTimerGenericCommand>
 800447a:	2801      	cmp	r0, #1
 800447c:	d1f6      	bne.n	800446c <osTimerStart+0x24>
  osStatus result = osOK;
 800447e:	2000      	movs	r0, #0
}
 8004480:	b004      	add	sp, #16
 8004482:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f9      	beq.n	800447e <osTimerStart+0x36>
 800448a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800449e:	4620      	mov	r0, r4
}
 80044a0:	b004      	add	sp, #16
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80044a4:	b510      	push	{r4, lr}
 80044a6:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80044a8:	2400      	movs	r4, #0
 80044aa:	9403      	str	r4, [sp, #12]
 80044ac:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 80044b0:	b1b3      	cbz	r3, 80044e0 <osTimerStop+0x3c>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80044b2:	9400      	str	r4, [sp, #0]
 80044b4:	ab03      	add	r3, sp, #12
 80044b6:	4622      	mov	r2, r4
 80044b8:	2108      	movs	r1, #8
 80044ba:	f002 fba7 	bl	8006c0c <xTimerGenericCommand>
 80044be:	2801      	cmp	r0, #1
 80044c0:	d115      	bne.n	80044ee <osTimerStop+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044c2:	9b03      	ldr	r3, [sp, #12]
 80044c4:	b1b3      	cbz	r3, 80044f4 <osTimerStop+0x50>
 80044c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80044da:	4620      	mov	r0, r4
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 80044dc:	b004      	add	sp, #16
 80044de:	bd10      	pop	{r4, pc}
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	2103      	movs	r1, #3
 80044e6:	f002 fb91 	bl	8006c0c <xTimerGenericCommand>
 80044ea:	2801      	cmp	r0, #1
 80044ec:	d002      	beq.n	80044f4 <osTimerStop+0x50>
      result = osErrorOS;
 80044ee:	20ff      	movs	r0, #255	; 0xff
}
 80044f0:	b004      	add	sp, #16
 80044f2:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 80044f4:	2000      	movs	r0, #0
}
 80044f6:	b004      	add	sp, #16
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop

080044fc <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80044fc:	2001      	movs	r0, #1
 80044fe:	f000 bc5f 	b.w	8004dc0 <xQueueCreateMutex>
 8004502:	bf00      	nop

08004504 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004504:	b510      	push	{r4, lr}
 8004506:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004508:	2400      	movs	r4, #0
 800450a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800450c:	b310      	cbz	r0, 8004554 <osMutexWait+0x50>
 800450e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004512:	b933      	cbnz	r3, 8004522 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004514:	f000 fec8 	bl	80052a8 <xQueueSemaphoreTake>
 8004518:	2801      	cmp	r0, #1
 800451a:	d118      	bne.n	800454e <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 800451c:	2000      	movs	r0, #0
}
 800451e:	b002      	add	sp, #8
 8004520:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004522:	aa01      	add	r2, sp, #4
 8004524:	4621      	mov	r1, r4
 8004526:	f001 f849 	bl	80055bc <xQueueReceiveFromISR>
 800452a:	2801      	cmp	r0, #1
 800452c:	d10f      	bne.n	800454e <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f3      	beq.n	800451c <osMutexWait+0x18>
 8004534:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	f3bf 8f6f 	isb	sy
  return osOK;
 8004548:	4620      	mov	r0, r4
}
 800454a:	b002      	add	sp, #8
 800454c:	bd10      	pop	{r4, pc}
    return osErrorOS;
 800454e:	20ff      	movs	r0, #255	; 0xff
}
 8004550:	b002      	add	sp, #8
 8004552:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8004554:	2080      	movs	r0, #128	; 0x80
}
 8004556:	b002      	add	sp, #8
 8004558:	bd10      	pop	{r4, pc}
 800455a:	bf00      	nop

0800455c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800455c:	b510      	push	{r4, lr}
 800455e:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8004560:	2400      	movs	r4, #0
 8004562:	9401      	str	r4, [sp, #4]
 8004564:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8004568:	b19b      	cbz	r3, 8004592 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800456a:	a901      	add	r1, sp, #4
 800456c:	f000 fcc2 	bl	8004ef4 <xQueueGiveFromISR>
 8004570:	2801      	cmp	r0, #1
 8004572:	d114      	bne.n	800459e <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	b1ab      	cbz	r3, 80045a4 <osMutexRelease+0x48>
 8004578:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800457c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004580:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800458c:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800458e:	b002      	add	sp, #8
 8004590:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004592:	461a      	mov	r2, r3
 8004594:	4619      	mov	r1, r3
 8004596:	f000 fa95 	bl	8004ac4 <xQueueGenericSend>
 800459a:	2801      	cmp	r0, #1
 800459c:	d002      	beq.n	80045a4 <osMutexRelease+0x48>
    result = osErrorOS;
 800459e:	20ff      	movs	r0, #255	; 0xff
}
 80045a0:	b002      	add	sp, #8
 80045a2:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 80045a4:	2000      	movs	r0, #0
}
 80045a6:	b002      	add	sp, #8
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	bf00      	nop

080045ac <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	4606      	mov	r6, r0
 80045b0:	b083      	sub	sp, #12
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80045b2:	2014      	movs	r0, #20
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80045b4:	6874      	ldr	r4, [r6, #4]
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80045b6:	f002 fd25 	bl	8007004 <pvPortMalloc>

  
  if (thePool) {
 80045ba:	4605      	mov	r5, r0
 80045bc:	b1e8      	cbz	r0, 80045fa <osPoolCreate+0x4e>
    thePool->pool_sz = pool_def->pool_sz;
 80045be:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80045c0:	3403      	adds	r4, #3
 80045c2:	f024 0703 	bic.w	r7, r4, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 80045c6:	2400      	movs	r4, #0
    thePool->item_sz = itemSize;
 80045c8:	e9c5 0702 	strd	r0, r7, [r5, #8]
    thePool->currentIndex = 0;
 80045cc:	612c      	str	r4, [r5, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80045ce:	f002 fd19 	bl	8007004 <pvPortMalloc>
 80045d2:	6068      	str	r0, [r5, #4]
   
    if (thePool->markers) {
 80045d4:	b1a0      	cbz	r0, 8004600 <osPoolCreate+0x54>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80045d6:	6830      	ldr	r0, [r6, #0]
 80045d8:	fb07 f000 	mul.w	r0, r7, r0
 80045dc:	f002 fd12 	bl	8007004 <pvPortMalloc>
 80045e0:	4607      	mov	r7, r0
 80045e2:	6028      	str	r0, [r5, #0]
      
      if (thePool->pool) {
 80045e4:	b198      	cbz	r0, 800460e <osPoolCreate+0x62>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80045e6:	6833      	ldr	r3, [r6, #0]
 80045e8:	b13b      	cbz	r3, 80045fa <osPoolCreate+0x4e>
 80045ea:	4623      	mov	r3, r4
          thePool->markers[i] = 0;
 80045ec:	4621      	mov	r1, r4
 80045ee:	686a      	ldr	r2, [r5, #4]
 80045f0:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80045f2:	6832      	ldr	r2, [r6, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d8f9      	bhi.n	80045ee <osPoolCreate+0x42>
  return thePool;
 
#else
  return NULL;
#endif
}
 80045fa:	4628      	mov	r0, r5
 80045fc:	b003      	add	sp, #12
 80045fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004600:	9001      	str	r0, [sp, #4]
      vPortFree(thePool);
 8004602:	4628      	mov	r0, r5
 8004604:	f002 fdb6 	bl	8007174 <vPortFree>
      thePool = NULL;
 8004608:	9b01      	ldr	r3, [sp, #4]
 800460a:	461d      	mov	r5, r3
  return thePool;
 800460c:	e7f5      	b.n	80045fa <osPoolCreate+0x4e>
        vPortFree(thePool->markers);
 800460e:	6868      	ldr	r0, [r5, #4]
 8004610:	f002 fdb0 	bl	8007174 <vPortFree>
        vPortFree(thePool);
 8004614:	4628      	mov	r0, r5
 8004616:	f002 fdad 	bl	8007174 <vPortFree>
        thePool = NULL;
 800461a:	463d      	mov	r5, r7
 800461c:	e7ed      	b.n	80045fa <osPoolCreate+0x4e>
 800461e:	bf00      	nop

08004620 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004620:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004624:	2200      	movs	r2, #0
 8004626:	f000 ba11 	b.w	8004a4c <xQueueGenericCreate>
 800462a:	bf00      	nop

0800462c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800462c:	b510      	push	{r4, lr}
 800462e:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken = pdFALSE;
 8004630:	2400      	movs	r4, #0
{
 8004632:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004634:	9403      	str	r4, [sp, #12]
 8004636:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800463a:	b15b      	cbz	r3, 8004654 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800463c:	4623      	mov	r3, r4
 800463e:	aa03      	add	r2, sp, #12
 8004640:	a901      	add	r1, sp, #4
 8004642:	f000 fbf1 	bl	8004e28 <xQueueGenericSendFromISR>
 8004646:	2801      	cmp	r0, #1
 8004648:	d10c      	bne.n	8004664 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	b96b      	cbnz	r3, 800466a <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800464e:	2000      	movs	r0, #0
}
 8004650:	b004      	add	sp, #16
 8004652:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004654:	2a01      	cmp	r2, #1
 8004656:	bf38      	it	cc
 8004658:	2201      	movcc	r2, #1
 800465a:	a901      	add	r1, sp, #4
 800465c:	f000 fa32 	bl	8004ac4 <xQueueGenericSend>
 8004660:	2801      	cmp	r0, #1
 8004662:	d0f4      	beq.n	800464e <osMessagePut+0x22>
      return osErrorOS;
 8004664:	20ff      	movs	r0, #255	; 0xff
}
 8004666:	b004      	add	sp, #16
 8004668:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800466a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
  return osOK;
 800467e:	4620      	mov	r0, r4
}
 8004680:	b004      	add	sp, #16
 8004682:	bd10      	pop	{r4, pc}

08004684 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004684:	b530      	push	{r4, r5, lr}
 8004686:	460b      	mov	r3, r1
 8004688:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800468a:	2100      	movs	r1, #0
 800468c:	e9cd 1302 	strd	r1, r3, [sp, #8]
{
 8004690:	4604      	mov	r4, r0
  
  if (queue_id == NULL) {
 8004692:	b373      	cbz	r3, 80046f2 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8004694:	9100      	str	r1, [sp, #0]
 8004696:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800469a:	b991      	cbnz	r1, 80046c2 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800469c:	a902      	add	r1, sp, #8
 800469e:	4618      	mov	r0, r3
 80046a0:	4615      	mov	r5, r2
 80046a2:	f000 fc7f 	bl	8004fa4 <xQueueReceive>
 80046a6:	2801      	cmp	r0, #1
 80046a8:	d02d      	beq.n	8004706 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	bf18      	it	ne
 80046ae:	2540      	movne	r5, #64	; 0x40
 80046b0:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 80046b2:	ab04      	add	r3, sp, #16
 80046b4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80046b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80046bc:	4620      	mov	r0, r4
 80046be:	b005      	add	sp, #20
 80046c0:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80046c2:	466a      	mov	r2, sp
 80046c4:	4618      	mov	r0, r3
 80046c6:	a902      	add	r1, sp, #8
 80046c8:	f000 ff78 	bl	80055bc <xQueueReceiveFromISR>
    portEND_SWITCHING_ISR(taskWoken);
 80046cc:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80046ce:	2801      	cmp	r0, #1
 80046d0:	bf0c      	ite	eq
 80046d2:	2210      	moveq	r2, #16
 80046d4:	2200      	movne	r2, #0
 80046d6:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ea      	beq.n	80046b2 <osMessageGet+0x2e>
 80046dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80046e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	e7df      	b.n	80046b2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	9301      	str	r3, [sp, #4]
    return event;
 80046f6:	ab04      	add	r3, sp, #16
 80046f8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80046fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004700:	4620      	mov	r0, r4
 8004702:	b005      	add	sp, #20
 8004704:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 8004706:	2310      	movs	r3, #16
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	e7d2      	b.n	80046b2 <osMessageGet+0x2e>

0800470c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800470c:	b570      	push	{r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800470e:	e9d0 2300 	ldrd	r2, r3, [r0]
{
 8004712:	b084      	sub	sp, #16
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8004714:	6885      	ldr	r5, [r0, #8]
{
 8004716:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8004718:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800471a:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800471c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004720:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8004722:	f002 fc6f 	bl	8007004 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 8004726:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8004728:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 800472a:	681d      	ldr	r5, [r3, #0]
 800472c:	b195      	cbz	r5, 8004754 <osMailCreate+0x48>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800472e:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8004730:	4632      	mov	r2, r6
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	2104      	movs	r1, #4
 8004736:	f000 f989 	bl	8004a4c <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 800473a:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800473c:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 800473e:	681e      	ldr	r6, [r3, #0]
 8004740:	6875      	ldr	r5, [r6, #4]
 8004742:	b155      	cbz	r5, 800475a <osMailCreate+0x4e>
    vPortFree(*(queue_def->cb));
    return NULL;
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8004744:	a801      	add	r0, sp, #4
 8004746:	f7ff ff31 	bl	80045ac <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 800474a:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800474c:	60b0      	str	r0, [r6, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800474e:	681d      	ldr	r5, [r3, #0]
 8004750:	68ac      	ldr	r4, [r5, #8]
 8004752:	b134      	cbz	r4, 8004762 <osMailCreate+0x56>
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8004754:	4628      	mov	r0, r5
 8004756:	b004      	add	sp, #16
 8004758:	bd70      	pop	{r4, r5, r6, pc}
    vPortFree(*(queue_def->cb));
 800475a:	4630      	mov	r0, r6
 800475c:	f002 fd0a 	bl	8007174 <vPortFree>
    return NULL;
 8004760:	e7f8      	b.n	8004754 <osMailCreate+0x48>
    vPortFree(*(queue_def->cb));
 8004762:	4628      	mov	r0, r5
 8004764:	f002 fd06 	bl	8007174 <vPortFree>
    return NULL;
 8004768:	4625      	mov	r5, r4
 800476a:	e7f3      	b.n	8004754 <osMailCreate+0x48>

0800476c <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800476c:	2800      	cmp	r0, #0
 800476e:	d040      	beq.n	80047f2 <osMailAlloc+0x86>
{
 8004770:	b570      	push	{r4, r5, r6, lr}
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8004772:	6885      	ldr	r5, [r0, #8]
{
 8004774:	b082      	sub	sp, #8
 8004776:	f3ef 8605 	mrs	r6, IPSR
  if (inHandlerMode()) {
 800477a:	2e00      	cmp	r6, #0
 800477c:	d036      	beq.n	80047ec <osMailAlloc+0x80>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800477e:	f3ef 8611 	mrs	r6, BASEPRI
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
  for (i = 0; i < pool_id->pool_sz; i++) {
 8004792:	68a8      	ldr	r0, [r5, #8]
 8004794:	b1c0      	cbz	r0, 80047c8 <osMailAlloc+0x5c>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8004796:	692b      	ldr	r3, [r5, #16]
    if (pool_id->markers[index] == 0) {
 8004798:	6869      	ldr	r1, [r5, #4]
 800479a:	eb03 0e00 	add.w	lr, r3, r0
 800479e:	e001      	b.n	80047a4 <osMailAlloc+0x38>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80047a0:	459e      	cmp	lr, r3
 80047a2:	d018      	beq.n	80047d6 <osMailAlloc+0x6a>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80047a4:	fbb3 f2f0 	udiv	r2, r3, r0
 80047a8:	fb00 3212 	mls	r2, r0, r2, r3
    if (pool_id->markers[index] == 0) {
 80047ac:	eb01 0c02 	add.w	ip, r1, r2
 80047b0:	5c8c      	ldrb	r4, [r1, r2]
  for (i = 0; i < pool_id->pool_sz; i++) {
 80047b2:	3301      	adds	r3, #1
    if (pool_id->markers[index] == 0) {
 80047b4:	2c00      	cmp	r4, #0
 80047b6:	d1f3      	bne.n	80047a0 <osMailAlloc+0x34>
      pool_id->markers[index] = 1;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f88c 3000 	strb.w	r3, [ip]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80047be:	68eb      	ldr	r3, [r5, #12]
 80047c0:	6828      	ldr	r0, [r5, #0]
      pool_id->currentIndex = index;
 80047c2:	612a      	str	r2, [r5, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80047c4:	fb03 0002 	mla	r0, r3, r2, r0
 80047c8:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80047cc:	b143      	cbz	r3, 80047e0 <osMailAlloc+0x74>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047ce:	f386 8811 	msr	BASEPRI, r6
  
  return p;
}
 80047d2:	b002      	add	sp, #8
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
  void *p = NULL;
 80047d6:	2000      	movs	r0, #0
 80047d8:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f6      	bne.n	80047ce <osMailAlloc+0x62>
 80047e0:	9001      	str	r0, [sp, #4]
    vPortExitCritical();
 80047e2:	f002 fad1 	bl	8006d88 <vPortExitCritical>
 80047e6:	9801      	ldr	r0, [sp, #4]
}
 80047e8:	b002      	add	sp, #8
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
    vPortEnterCritical();
 80047ec:	f002 faaa 	bl	8006d44 <vPortEnterCritical>
 80047f0:	e7cf      	b.n	8004792 <osMailAlloc+0x26>
}
 80047f2:	4770      	bx	lr

080047f4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80047f4:	b510      	push	{r4, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80047fa:	b340      	cbz	r0, 800484e <osMailPut+0x5a>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 80047fc:	2400      	movs	r4, #0
 80047fe:	9403      	str	r4, [sp, #12]
 8004800:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8004804:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8004806:	b943      	cbnz	r3, 800481a <osMailPut+0x26>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8004808:	461a      	mov	r2, r3
 800480a:	a901      	add	r1, sp, #4
 800480c:	f000 f95a 	bl	8004ac4 <xQueueGenericSend>
 8004810:	2801      	cmp	r0, #1
 8004812:	d119      	bne.n	8004848 <osMailPut+0x54>
      return osErrorOS;
    }
  }
  
  return osOK;
 8004814:	2000      	movs	r0, #0
}
 8004816:	b004      	add	sp, #16
 8004818:	bd10      	pop	{r4, pc}
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800481a:	4623      	mov	r3, r4
 800481c:	aa03      	add	r2, sp, #12
 800481e:	a901      	add	r1, sp, #4
 8004820:	f000 fb02 	bl	8004e28 <xQueueGenericSendFromISR>
 8004824:	2801      	cmp	r0, #1
 8004826:	d10f      	bne.n	8004848 <osMailPut+0x54>
    portEND_SWITCHING_ISR(taskWoken);
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f2      	beq.n	8004814 <osMailPut+0x20>
 800482e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
  return osOK;
 8004842:	4620      	mov	r0, r4
}
 8004844:	b004      	add	sp, #16
 8004846:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8004848:	20ff      	movs	r0, #255	; 0xff
}
 800484a:	b004      	add	sp, #16
 800484c:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 800484e:	2080      	movs	r0, #128	; 0x80
}
 8004850:	b004      	add	sp, #16
 8004852:	bd10      	pop	{r4, pc}

08004854 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8004854:	b530      	push	{r4, r5, lr}
 8004856:	b085      	sub	sp, #20
 8004858:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800485a:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 800485c:	b379      	cbz	r1, 80048be <osMailGet+0x6a>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004866:	b993      	cbnz	r3, 800488e <osMailGet+0x3a>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8004868:	6848      	ldr	r0, [r1, #4]
 800486a:	a902      	add	r1, sp, #8
 800486c:	4615      	mov	r5, r2
 800486e:	f000 fb99 	bl	8004fa4 <xQueueReceive>
 8004872:	2801      	cmp	r0, #1
 8004874:	d02d      	beq.n	80048d2 <osMailGet+0x7e>
      /* We have mail */
      event.status = osEventMail;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004876:	2d00      	cmp	r5, #0
 8004878:	bf18      	it	ne
 800487a:	2540      	movne	r5, #64	; 0x40
 800487c:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 800487e:	ab04      	add	r3, sp, #16
 8004880:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004888:	4620      	mov	r0, r4
 800488a:	b005      	add	sp, #20
 800488c:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800488e:	466a      	mov	r2, sp
 8004890:	6848      	ldr	r0, [r1, #4]
 8004892:	a902      	add	r1, sp, #8
 8004894:	f000 fe92 	bl	80055bc <xQueueReceiveFromISR>
    portEND_SWITCHING_ISR(taskWoken);
 8004898:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 800489a:	2801      	cmp	r0, #1
 800489c:	bf0c      	ite	eq
 800489e:	2220      	moveq	r2, #32
 80048a0:	2200      	movne	r2, #0
 80048a2:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ea      	beq.n	800487e <osMailGet+0x2a>
 80048a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	e7df      	b.n	800487e <osMailGet+0x2a>
    event.status = osErrorParameter;
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	9301      	str	r3, [sp, #4]
    return event;
 80048c2:	ab04      	add	r3, sp, #16
 80048c4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80048c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80048cc:	4620      	mov	r0, r4
 80048ce:	b005      	add	sp, #20
 80048d0:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMail;
 80048d2:	2320      	movs	r3, #32
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	e7d2      	b.n	800487e <osMailGet+0x2a>

080048d8 <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 80048d8:	b1c8      	cbz	r0, 800490e <osMailFree+0x36>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 80048da:	6883      	ldr	r3, [r0, #8]
  if (pool_id == NULL) {
 80048dc:	b1bb      	cbz	r3, 800490e <osMailFree+0x36>
  if (block == NULL) {
 80048de:	b1b1      	cbz	r1, 800490e <osMailFree+0x36>
  if (block < pool_id->pool) {
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	4281      	cmp	r1, r0
 80048e4:	d313      	bcc.n	800490e <osMailFree+0x36>
{
 80048e6:	b410      	push	{r4}
  if (index % pool_id->item_sz) {
 80048e8:	68dc      	ldr	r4, [r3, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80048ea:	1a09      	subs	r1, r1, r0
  if (index % pool_id->item_sz) {
 80048ec:	fbb1 f2f4 	udiv	r2, r1, r4
 80048f0:	fb04 1012 	mls	r0, r4, r2, r1
 80048f4:	b938      	cbnz	r0, 8004906 <osMailFree+0x2e>
  if (index >= pool_id->pool_sz) {
 80048f6:	6899      	ldr	r1, [r3, #8]
 80048f8:	428a      	cmp	r2, r1
 80048fa:	d204      	bcs.n	8004906 <osMailFree+0x2e>
  pool_id->markers[index] = 0;
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	5498      	strb	r0, [r3, r2]
}
 8004900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004904:	4770      	bx	lr
    return osErrorParameter;
 8004906:	2080      	movs	r0, #128	; 0x80
}
 8004908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800490c:	4770      	bx	lr
    return osErrorParameter;
 800490e:	2080      	movs	r0, #128	; 0x80
}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop

08004914 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8004914:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8004916:	2901      	cmp	r1, #1
 8004918:	bf38      	it	cc
 800491a:	2101      	movcc	r1, #1
 800491c:	f001 fa72 	bl	8005e04 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8004920:	2000      	movs	r0, #0
 8004922:	bd08      	pop	{r3, pc}

08004924 <osMessageDelete>:
 8004924:	b510      	push	{r4, lr}
 8004926:	f3ef 8405 	mrs	r4, IPSR
 800492a:	b91c      	cbnz	r4, 8004934 <osMessageDelete+0x10>
 800492c:	f000 fea4 	bl	8005678 <vQueueDelete>
 8004930:	4620      	mov	r0, r4
 8004932:	bd10      	pop	{r4, pc}
 8004934:	2482      	movs	r4, #130	; 0x82
 8004936:	4620      	mov	r0, r4
 8004938:	bd10      	pop	{r4, pc}
 800493a:	bf00      	nop

0800493c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004944:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004946:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800494e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop

08004954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop

0800495c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800495c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004962:	6802      	ldr	r2, [r0, #0]
{
 8004964:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004966:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004968:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800496a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800496c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800496e:	6099      	str	r1, [r3, #8]
}
 8004970:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8004974:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004976:	6002      	str	r2, [r0, #0]
}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop

0800497c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800497c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800497e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004980:	1c6b      	adds	r3, r5, #1
 8004982:	d010      	beq.n	80049a6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004984:	f100 0308 	add.w	r3, r0, #8
 8004988:	461c      	mov	r4, r3
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	42aa      	cmp	r2, r5
 8004990:	d9fa      	bls.n	8004988 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004992:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004994:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004996:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004998:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800499a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800499c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800499e:	6108      	str	r0, [r1, #16]
}
 80049a0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80049a2:	6002      	str	r2, [r0, #0]
}
 80049a4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80049a6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	e7f2      	b.n	8004992 <vListInsert+0x16>

080049ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049ac:	6903      	ldr	r3, [r0, #16]
{
 80049ae:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049b0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049b4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049b6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80049b8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049ba:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049bc:	bf08      	it	eq
 80049be:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80049c0:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80049c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 80049c6:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80049c8:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 80049ca:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80049cc:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80049ce:	6818      	ldr	r0, [r3, #0]
}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop

080049d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049dc:	b920      	cbnz	r0, 80049e8 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	b34d      	cbz	r5, 8004a36 <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049e2:	3601      	adds	r6, #1
 80049e4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80049e8:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049ea:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80049ec:	b97d      	cbnz	r5, 8004a0e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049ee:	6860      	ldr	r0, [r4, #4]
 80049f0:	f004 f88a 	bl	8008b08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049f4:	6863      	ldr	r3, [r4, #4]
 80049f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049fa:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049fc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049fe:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a00:	bf24      	itt	cs
 8004a02:	6823      	ldrcs	r3, [r4, #0]
 8004a04:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a06:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004a08:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a0a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a0e:	68e0      	ldr	r0, [r4, #12]
 8004a10:	f004 f87a 	bl	8008b08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	4251      	negs	r1, r2
 8004a1a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a1c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a1e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d202      	bcs.n	8004a2a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a24:	68a3      	ldr	r3, [r4, #8]
 8004a26:	440b      	add	r3, r1
 8004a28:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004a2a:	2d02      	cmp	r5, #2
 8004a2c:	d008      	beq.n	8004a40 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a2e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004a30:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a32:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a36:	68a0      	ldr	r0, [r4, #8]
 8004a38:	f001 fdec 	bl	8006614 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a3c:	60a5      	str	r5, [r4, #8]
 8004a3e:	e7d0      	b.n	80049e2 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a40:	2e01      	cmp	r6, #1
 8004a42:	bf38      	it	cc
 8004a44:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8004a46:	2000      	movs	r0, #0
 8004a48:	e7cc      	b.n	80049e4 <prvCopyDataToQueue+0x10>
 8004a4a:	bf00      	nop

08004a4c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a4c:	b940      	cbnz	r0, 8004a60 <xQueueGenericCreate+0x14>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	e7fe      	b.n	8004a5e <xQueueGenericCreate+0x12>
	{
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a64:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a68:	3048      	adds	r0, #72	; 0x48
 8004a6a:	460e      	mov	r6, r1
 8004a6c:	f002 faca 	bl	8007004 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004a70:	4604      	mov	r4, r0
 8004a72:	b318      	cbz	r0, 8004abc <xQueueGenericCreate+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a74:	b326      	cbz	r6, 8004ac0 <xQueueGenericCreate+0x74>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a76:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a7a:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004a7c:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8004a80:	f002 f960 	bl	8006d44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a84:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8004a88:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a8a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a8c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a90:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a92:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a94:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a96:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a98:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004a9a:	22ff      	movs	r2, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a9c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a9e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004aa0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aa4:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8004aa8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aac:	f7ff ff46 	bl	800493c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ab0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ab4:	f7ff ff42 	bl	800493c <vListInitialise>
	taskEXIT_CRITICAL();
 8004ab8:	f002 f966 	bl	8006d88 <vPortExitCritical>
	}
 8004abc:	4620      	mov	r0, r4
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	e7da      	b.n	8004a7a <xQueueGenericCreate+0x2e>

08004ac4 <xQueueGenericSend>:
{
 8004ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004acc:	2800      	cmp	r0, #0
 8004ace:	f000 80a4 	beq.w	8004c1a <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad2:	4688      	mov	r8, r1
 8004ad4:	461f      	mov	r7, r3
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	f000 8091 	beq.w	8004c00 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ade:	2f02      	cmp	r7, #2
 8004ae0:	d10b      	bne.n	8004afa <xQueueGenericSend+0x36>
 8004ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d008      	beq.n	8004afa <xQueueGenericSend+0x36>
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	e7fe      	b.n	8004af8 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004afa:	f001 fd2b 	bl	8006554 <xTaskGetSchedulerState>
 8004afe:	4605      	mov	r5, r0
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f000 8093 	beq.w	8004c2c <xQueueGenericSend+0x168>
 8004b06:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b08:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8004b0c:	f002 f91a 	bl	8006d44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b14:	429a      	cmp	r2, r3
 8004b16:	f0c0 80ef 	bcc.w	8004cf8 <xQueueGenericSend+0x234>
 8004b1a:	2f02      	cmp	r7, #2
 8004b1c:	f000 80ec 	beq.w	8004cf8 <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b20:	9801      	ldr	r0, [sp, #4]
 8004b22:	2800      	cmp	r0, #0
 8004b24:	f000 8101 	beq.w	8004d2a <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	f000 80e1 	beq.w	8004cf0 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8004b2e:	f002 f92b 	bl	8006d88 <vPortExitCritical>
		vTaskSuspendAll();
 8004b32:	f001 fb49 	bl	80061c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b36:	f002 f905 	bl	8006d44 <vPortEnterCritical>
 8004b3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b3e:	2bff      	cmp	r3, #255	; 0xff
 8004b40:	bf04      	itt	eq
 8004b42:	2300      	moveq	r3, #0
 8004b44:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8004b48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004b4c:	2bff      	cmp	r3, #255	; 0xff
 8004b4e:	bf04      	itt	eq
 8004b50:	2300      	moveq	r3, #0
 8004b52:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004b56:	f002 f917 	bl	8006d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5a:	a901      	add	r1, sp, #4
 8004b5c:	a802      	add	r0, sp, #8
 8004b5e:	f001 fca5 	bl	80064ac <xTaskCheckForTimeOut>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f040 80e6 	bne.w	8004d34 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b68:	f002 f8ec 	bl	8006d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d068      	beq.n	8004c46 <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004b74:	f002 f908 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004b78:	f002 f8e4 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004b7c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8004b80:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	dc04      	bgt.n	8004b90 <xQueueGenericSend+0xcc>
 8004b86:	e011      	b.n	8004bac <xQueueGenericSend+0xe8>
			--cTxLock;
 8004b88:	1e6a      	subs	r2, r5, #1
 8004b8a:	b2d3      	uxtb	r3, r2
 8004b8c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b8e:	b16b      	cbz	r3, 8004bac <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b92:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b94:	b153      	cbz	r3, 8004bac <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b96:	f001 fc35 	bl	8006404 <xTaskRemoveFromEventList>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d0f4      	beq.n	8004b88 <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8004b9e:	f001 fccd 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 8004ba2:	1e6a      	subs	r2, r5, #1
 8004ba4:	b2d3      	uxtb	r3, r2
 8004ba6:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f1      	bne.n	8004b90 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 8004bac:	23ff      	movs	r3, #255	; 0xff
 8004bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004bb2:	f002 f8e9 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004bb6:	f002 f8c5 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004bba:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8004bbe:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bc0:	2d00      	cmp	r5, #0
 8004bc2:	dd14      	ble.n	8004bee <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bc4:	f104 0910 	add.w	r9, r4, #16
 8004bc8:	e003      	b.n	8004bd2 <xQueueGenericSend+0x10e>
				--cRxLock;
 8004bca:	1e6a      	subs	r2, r5, #1
 8004bcc:	b2d3      	uxtb	r3, r2
 8004bce:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd0:	b16b      	cbz	r3, 8004bee <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd6:	b153      	cbz	r3, 8004bee <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd8:	f001 fc14 	bl	8006404 <xTaskRemoveFromEventList>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d0f4      	beq.n	8004bca <xQueueGenericSend+0x106>
					vTaskMissedYield();
 8004be0:	f001 fcac 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 8004be4:	1e6a      	subs	r2, r5, #1
 8004be6:	b2d3      	uxtb	r3, r2
 8004be8:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f1      	bne.n	8004bd2 <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 8004bee:	23ff      	movs	r3, #255	; 0xff
 8004bf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004bf4:	f002 f8c8 	bl	8006d88 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8004bf8:	f001 faee 	bl	80061d8 <xTaskResumeAll>
 8004bfc:	2501      	movs	r5, #1
 8004bfe:	e785      	b.n	8004b0c <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c00:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f43f af6b 	beq.w	8004ade <xQueueGenericSend+0x1a>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSend+0x154>
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004c2a:	e7fe      	b.n	8004c2a <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c2c:	9b01      	ldr	r3, [sp, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f43f af6a 	beq.w	8004b08 <xQueueGenericSend+0x44>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c46:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8004c4a:	f002 f89d 	bl	8006d88 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c4e:	9901      	ldr	r1, [sp, #4]
 8004c50:	4648      	mov	r0, r9
 8004c52:	f001 fb27 	bl	80062a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8004c56:	f002 f875 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004c5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c5e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	dc04      	bgt.n	8004c6e <xQueueGenericSend+0x1aa>
 8004c64:	e011      	b.n	8004c8a <xQueueGenericSend+0x1c6>
			--cTxLock;
 8004c66:	1e6b      	subs	r3, r5, #1
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c6c:	b16a      	cbz	r2, 8004c8a <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c70:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c72:	b153      	cbz	r3, 8004c8a <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c74:	f001 fbc6 	bl	8006404 <xTaskRemoveFromEventList>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d0f4      	beq.n	8004c66 <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8004c7c:	f001 fc5e 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 8004c80:	1e6b      	subs	r3, r5, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	d1f1      	bne.n	8004c6e <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8004c8a:	23ff      	movs	r3, #255	; 0xff
 8004c8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004c90:	f002 f87a 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004c94:	f002 f856 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004c98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c9c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	dc04      	bgt.n	8004cac <xQueueGenericSend+0x1e8>
 8004ca2:	e011      	b.n	8004cc8 <xQueueGenericSend+0x204>
				--cRxLock;
 8004ca4:	1e6b      	subs	r3, r5, #1
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004caa:	b16a      	cbz	r2, 8004cc8 <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cac:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cae:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb0:	b153      	cbz	r3, 8004cc8 <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb2:	f001 fba7 	bl	8006404 <xTaskRemoveFromEventList>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d0f4      	beq.n	8004ca4 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8004cba:	f001 fc3f 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 8004cbe:	1e6b      	subs	r3, r5, #1
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	d1f1      	bne.n	8004cac <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8004cc8:	23ff      	movs	r3, #255	; 0xff
 8004cca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004cce:	f002 f85b 	bl	8006d88 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8004cd2:	f001 fa81 	bl	80061d8 <xTaskResumeAll>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d190      	bne.n	8004bfc <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8004cda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e785      	b.n	8004bfc <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cf0:	a802      	add	r0, sp, #8
 8004cf2:	f001 fbcf 	bl	8006494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cf6:	e71a      	b.n	8004b2e <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f7ff fe69 	bl	80049d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d153      	bne.n	8004db0 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8004d08:	b148      	cbz	r0, 8004d1e <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8004d0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004d1e:	f002 f833 	bl	8006d88 <vPortExitCritical>
				return pdPASS;
 8004d22:	2001      	movs	r0, #1
}
 8004d24:	b005      	add	sp, #20
 8004d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d2a:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8004d2c:	f002 f82c 	bl	8006d88 <vPortExitCritical>
					return errQUEUE_FULL;
 8004d30:	9800      	ldr	r0, [sp, #0]
 8004d32:	e7f7      	b.n	8004d24 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8004d34:	f002 f806 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004d38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d3c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d3e:	2d00      	cmp	r5, #0
 8004d40:	dd10      	ble.n	8004d64 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d42:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8004d46:	e003      	b.n	8004d50 <xQueueGenericSend+0x28c>
			--cTxLock;
 8004d48:	1e6b      	subs	r3, r5, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d4e:	b14a      	cbz	r2, 8004d64 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d52:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d54:	b133      	cbz	r3, 8004d64 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d56:	f001 fb55 	bl	8006404 <xTaskRemoveFromEventList>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d0f4      	beq.n	8004d48 <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8004d5e:	f001 fbed 	bl	800653c <vTaskMissedYield>
 8004d62:	e7f1      	b.n	8004d48 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8004d64:	23ff      	movs	r3, #255	; 0xff
 8004d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004d6a:	f002 f80d 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004d6e:	f001 ffe9 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004d72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d76:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	dd10      	ble.n	8004d9e <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7c:	f104 0610 	add.w	r6, r4, #16
 8004d80:	e003      	b.n	8004d8a <xQueueGenericSend+0x2c6>
				--cRxLock;
 8004d82:	1e6b      	subs	r3, r5, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d88:	b14a      	cbz	r2, 8004d9e <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d8a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d8c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d8e:	b133      	cbz	r3, 8004d9e <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d90:	f001 fb38 	bl	8006404 <xTaskRemoveFromEventList>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d0f4      	beq.n	8004d82 <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8004d98:	f001 fbd0 	bl	800653c <vTaskMissedYield>
 8004d9c:	e7f1      	b.n	8004d82 <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8004d9e:	23ff      	movs	r3, #255	; 0xff
 8004da0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004da4:	f001 fff0 	bl	8006d88 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8004da8:	f001 fa16 	bl	80061d8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004dac:	2000      	movs	r0, #0
 8004dae:	e7b9      	b.n	8004d24 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004db4:	f001 fb26 	bl	8006404 <xTaskRemoveFromEventList>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d0b0      	beq.n	8004d1e <xQueueGenericSend+0x25a>
 8004dbc:	e7a5      	b.n	8004d0a <xQueueGenericSend+0x246>
 8004dbe:	bf00      	nop

08004dc0 <xQueueCreateMutex>:
	{
 8004dc0:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dc2:	2048      	movs	r0, #72	; 0x48
 8004dc4:	f002 f91e 	bl	8007004 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004dc8:	4604      	mov	r4, r0
 8004dca:	b350      	cbz	r0, 8004e22 <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 8004dcc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8004dce:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dd0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004dd2:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8004dd6:	f001 ffb5 	bl	8006d44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dda:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8004dde:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004de0:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de2:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de6:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dea:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dec:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dee:	22ff      	movs	r2, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004df0:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004df2:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004df4:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8004df8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dfc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e00:	f7ff fd9c 	bl	800493c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e08:	f7ff fd98 	bl	800493c <vListInitialise>
	taskEXIT_CRITICAL();
 8004e0c:	f001 ffbc 	bl	8006d88 <vPortExitCritical>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e10:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e12:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e14:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e16:	462b      	mov	r3, r5
 8004e18:	462a      	mov	r2, r5
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7ff fe51 	bl	8004ac4 <xQueueGenericSend>
	}
 8004e22:	4620      	mov	r0, r4
 8004e24:	bd38      	pop	{r3, r4, r5, pc}
 8004e26:	bf00      	nop

08004e28 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d04b      	beq.n	8004ec4 <xQueueGenericSendFromISR+0x9c>
{
 8004e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e30:	460e      	mov	r6, r1
 8004e32:	4617      	mov	r7, r2
 8004e34:	461d      	mov	r5, r3
 8004e36:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e38:	b321      	cbz	r1, 8004e84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e3a:	2d02      	cmp	r5, #2
 8004e3c:	d10b      	bne.n	8004e56 <xQueueGenericSendFromISR+0x2e>
 8004e3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d008      	beq.n	8004e56 <xQueueGenericSendFromISR+0x2e>
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	e7fe      	b.n	8004e54 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e56:	f002 f8a7 	bl	8006fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8004e5a:	f3ef 8811 	mrs	r8, BASEPRI
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d312      	bcc.n	8004e9c <xQueueGenericSendFromISR+0x74>
 8004e76:	2d02      	cmp	r5, #2
 8004e78:	d010      	beq.n	8004e9c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8004e7a:	2000      	movs	r0, #0
	__asm volatile
 8004e7c:	f388 8811 	msr	BASEPRI, r8
}
 8004e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0d7      	beq.n	8004e3a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	e7fe      	b.n	8004e9a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e9c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea4:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ea6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7ff fd93 	bl	80049d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004eae:	1c6b      	adds	r3, r5, #1
 8004eb0:	d011      	beq.n	8004ed6 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eb2:	1c6b      	adds	r3, r5, #1
 8004eb4:	b25b      	sxtb	r3, r3
 8004eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8004eba:	2001      	movs	r0, #1
	__asm volatile
 8004ebc:	f388 8811 	msr	BASEPRI, r8
}
 8004ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004ed4:	e7fe      	b.n	8004ed4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004edc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ee0:	f001 fa90 	bl	8006404 <xTaskRemoveFromEventList>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d0e8      	beq.n	8004eba <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8004ee8:	2f00      	cmp	r7, #0
 8004eea:	d0e6      	beq.n	8004eba <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004eec:	2001      	movs	r0, #1
 8004eee:	6038      	str	r0, [r7, #0]
 8004ef0:	e7c4      	b.n	8004e7c <xQueueGenericSendFromISR+0x54>
 8004ef2:	bf00      	nop

08004ef4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004ef4:	b370      	cbz	r0, 8004f54 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ef6:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004efc:	b143      	cbz	r3, 8004f10 <xQueueGiveFromISR+0x1c>
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	e7fe      	b.n	8004f0e <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f10:	6803      	ldr	r3, [r0, #0]
 8004f12:	460c      	mov	r4, r1
 8004f14:	b33b      	cbz	r3, 8004f66 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f16:	f002 f847 	bl	8006fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8004f1a:	f3ef 8511 	mrs	r5, BASEPRI
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f2e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004f30:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d923      	bls.n	8004f7e <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f36:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f3a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004f3c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f3e:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f40:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8004f42:	d020      	beq.n	8004f86 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f44:	3301      	adds	r3, #1
 8004f46:	b25b      	sxtb	r3, r3
 8004f48:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8004f4c:	2001      	movs	r0, #1
	__asm volatile
 8004f4e:	f385 8811 	msr	BASEPRI, r5
}
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004f64:	e7fe      	b.n	8004f64 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f66:	6883      	ldr	r3, [r0, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0d4      	beq.n	8004f16 <xQueueGiveFromISR+0x22>
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8004f7e:	2000      	movs	r0, #0
	__asm volatile
 8004f80:	f385 8811 	msr	BASEPRI, r5
}
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0df      	beq.n	8004f4c <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f8c:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8004f90:	f001 fa38 	bl	8006404 <xTaskRemoveFromEventList>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d0d9      	beq.n	8004f4c <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8004f98:	2c00      	cmp	r4, #0
 8004f9a:	d0d7      	beq.n	8004f4c <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	6020      	str	r0, [r4, #0]
 8004fa0:	e7ee      	b.n	8004f80 <xQueueGiveFromISR+0x8c>
 8004fa2:	bf00      	nop

08004fa4 <xQueueReceive>:
{
 8004fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f000 815f 	beq.w	8005270 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb2:	460f      	mov	r7, r1
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	f000 8094 	beq.w	80050e4 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fbc:	f001 faca 	bl	8006554 <xTaskGetSchedulerState>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f000 809c 	beq.w	80050fe <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8004fc6:	f001 febd 	bl	8006d44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	d172      	bne.n	80050b6 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fd0:	9b01      	ldr	r3, [sp, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80f1 	beq.w	80051ba <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fd8:	a802      	add	r0, sp, #8
 8004fda:	f001 fa5b 	bl	8006494 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8004fde:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8004fe4:	f001 fed0 	bl	8006d88 <vPortExitCritical>
		vTaskSuspendAll();
 8004fe8:	f001 f8ee 	bl	80061c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fec:	f001 feaa 	bl	8006d44 <vPortEnterCritical>
 8004ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004ff4:	2bff      	cmp	r3, #255	; 0xff
 8004ff6:	bf08      	it	eq
 8004ff8:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004ffc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005000:	2bff      	cmp	r3, #255	; 0xff
 8005002:	bf08      	it	eq
 8005004:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005008:	f001 febe 	bl	8006d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800500c:	a901      	add	r1, sp, #4
 800500e:	a802      	add	r0, sp, #8
 8005010:	f001 fa4c 	bl	80064ac <xTaskCheckForTimeOut>
 8005014:	2800      	cmp	r0, #0
 8005016:	d17f      	bne.n	8005118 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8005018:	f001 fe94 	bl	8006d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800501c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80d1 	beq.w	80051c6 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8005024:	f001 feb0 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005028:	f001 fe8c 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800502c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005030:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005032:	2d00      	cmp	r5, #0
 8005034:	dc04      	bgt.n	8005040 <xQueueReceive+0x9c>
 8005036:	e011      	b.n	800505c <xQueueReceive+0xb8>
			--cTxLock;
 8005038:	1e6b      	subs	r3, r5, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800503e:	b16a      	cbz	r2, 800505c <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005040:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005042:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005044:	b153      	cbz	r3, 800505c <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005046:	f001 f9dd 	bl	8006404 <xTaskRemoveFromEventList>
 800504a:	2800      	cmp	r0, #0
 800504c:	d0f4      	beq.n	8005038 <xQueueReceive+0x94>
						vTaskMissedYield();
 800504e:	f001 fa75 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 8005052:	1e6b      	subs	r3, r5, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005058:	2a00      	cmp	r2, #0
 800505a:	d1f1      	bne.n	8005040 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 800505c:	23ff      	movs	r3, #255	; 0xff
 800505e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005062:	f001 fe91 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005066:	f001 fe6d 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800506a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800506e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005070:	2d00      	cmp	r5, #0
 8005072:	dd14      	ble.n	800509e <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005074:	f104 0910 	add.w	r9, r4, #16
 8005078:	e003      	b.n	8005082 <xQueueReceive+0xde>
				--cRxLock;
 800507a:	1e6b      	subs	r3, r5, #1
 800507c:	b2da      	uxtb	r2, r3
 800507e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005080:	b16a      	cbz	r2, 800509e <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005082:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005084:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005086:	b153      	cbz	r3, 800509e <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005088:	f001 f9bc 	bl	8006404 <xTaskRemoveFromEventList>
 800508c:	2800      	cmp	r0, #0
 800508e:	d0f4      	beq.n	800507a <xQueueReceive+0xd6>
					vTaskMissedYield();
 8005090:	f001 fa54 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 8005094:	1e6b      	subs	r3, r5, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800509a:	2a00      	cmp	r2, #0
 800509c:	d1f1      	bne.n	8005082 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 800509e:	23ff      	movs	r3, #255	; 0xff
 80050a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80050a4:	f001 fe70 	bl	8006d88 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80050a8:	f001 f896 	bl	80061d8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80050ac:	f001 fe4a 	bl	8006d44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	d07d      	beq.n	80051b2 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050b8:	b152      	cbz	r2, 80050d0 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ba:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050bc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050be:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050c0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050c2:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c4:	bf24      	itt	cs
 80050c6:	6821      	ldrcs	r1, [r4, #0]
 80050c8:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050ca:	4638      	mov	r0, r7
 80050cc:	f003 fd1c 	bl	8008b08 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d0:	3d01      	subs	r5, #1
 80050d2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 80d3 	bne.w	8005282 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 80050dc:	f001 fe54 	bl	8006d88 <vPortExitCritical>
				return pdPASS;
 80050e0:	2001      	movs	r0, #1
 80050e2:	e06d      	b.n	80051c0 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f43f af68 	beq.w	8004fbc <xQueueReceive+0x18>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	e7fe      	b.n	80050fc <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f43f af60 	beq.w	8004fc6 <xQueueReceive+0x22>
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	e7fe      	b.n	8005116 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8005118:	f001 fe14 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800511c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005120:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005122:	2d00      	cmp	r5, #0
 8005124:	dc04      	bgt.n	8005130 <xQueueReceive+0x18c>
 8005126:	e011      	b.n	800514c <xQueueReceive+0x1a8>
			--cTxLock;
 8005128:	1e6b      	subs	r3, r5, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800512e:	b16a      	cbz	r2, 800514c <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005130:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005132:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005134:	b153      	cbz	r3, 800514c <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005136:	f001 f965 	bl	8006404 <xTaskRemoveFromEventList>
 800513a:	2800      	cmp	r0, #0
 800513c:	d0f4      	beq.n	8005128 <xQueueReceive+0x184>
						vTaskMissedYield();
 800513e:	f001 f9fd 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 8005142:	1e6b      	subs	r3, r5, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005148:	2a00      	cmp	r2, #0
 800514a:	d1f1      	bne.n	8005130 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 800514c:	23ff      	movs	r3, #255	; 0xff
 800514e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005152:	f001 fe19 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005156:	f001 fdf5 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800515a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800515e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005160:	2d00      	cmp	r5, #0
 8005162:	dd14      	ble.n	800518e <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005164:	f104 0910 	add.w	r9, r4, #16
 8005168:	e003      	b.n	8005172 <xQueueReceive+0x1ce>
				--cRxLock;
 800516a:	1e6b      	subs	r3, r5, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005170:	b16a      	cbz	r2, 800518e <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005172:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005174:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005176:	b153      	cbz	r3, 800518e <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005178:	f001 f944 	bl	8006404 <xTaskRemoveFromEventList>
 800517c:	2800      	cmp	r0, #0
 800517e:	d0f4      	beq.n	800516a <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8005180:	f001 f9dc 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 8005184:	1e6b      	subs	r3, r5, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800518a:	2a00      	cmp	r2, #0
 800518c:	d1f1      	bne.n	8005172 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 800518e:	23ff      	movs	r3, #255	; 0xff
 8005190:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005194:	f001 fdf8 	bl	8006d88 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005198:	f001 f81e 	bl	80061d8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800519c:	f001 fdd2 	bl	8006d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051a2:	b153      	cbz	r3, 80051ba <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 80051a4:	f001 fdf0 	bl	8006d88 <vPortExitCritical>
		taskENTER_CRITICAL();
 80051a8:	f001 fdcc 	bl	8006d44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ae:	2d00      	cmp	r5, #0
 80051b0:	d181      	bne.n	80050b6 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 80051b2:	9b01      	ldr	r3, [sp, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f af15 	bne.w	8004fe4 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 80051ba:	f001 fde5 	bl	8006d88 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80051be:	2000      	movs	r0, #0
}
 80051c0:	b005      	add	sp, #20
 80051c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80051c6:	f001 fddf 	bl	8006d88 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051ca:	9901      	ldr	r1, [sp, #4]
 80051cc:	4630      	mov	r0, r6
 80051ce:	f001 f869 	bl	80062a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80051d2:	f001 fdb7 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80051d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80051da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051dc:	2d00      	cmp	r5, #0
 80051de:	dc04      	bgt.n	80051ea <xQueueReceive+0x246>
 80051e0:	e011      	b.n	8005206 <xQueueReceive+0x262>
			--cTxLock;
 80051e2:	1e6b      	subs	r3, r5, #1
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051e8:	b16a      	cbz	r2, 8005206 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ec:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ee:	b153      	cbz	r3, 8005206 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051f0:	f001 f908 	bl	8006404 <xTaskRemoveFromEventList>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d0f4      	beq.n	80051e2 <xQueueReceive+0x23e>
						vTaskMissedYield();
 80051f8:	f001 f9a0 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 80051fc:	1e6b      	subs	r3, r5, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005202:	2a00      	cmp	r2, #0
 8005204:	d1f1      	bne.n	80051ea <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8005206:	23ff      	movs	r3, #255	; 0xff
 8005208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800520c:	f001 fdbc 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005210:	f001 fd98 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005214:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005218:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800521a:	2d00      	cmp	r5, #0
 800521c:	dd14      	ble.n	8005248 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800521e:	f104 0910 	add.w	r9, r4, #16
 8005222:	e003      	b.n	800522c <xQueueReceive+0x288>
				--cRxLock;
 8005224:	1e6b      	subs	r3, r5, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800522a:	b16a      	cbz	r2, 8005248 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800522e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005230:	b153      	cbz	r3, 8005248 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005232:	f001 f8e7 	bl	8006404 <xTaskRemoveFromEventList>
 8005236:	2800      	cmp	r0, #0
 8005238:	d0f4      	beq.n	8005224 <xQueueReceive+0x280>
					vTaskMissedYield();
 800523a:	f001 f97f 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 800523e:	1e6b      	subs	r3, r5, #1
 8005240:	b2da      	uxtb	r2, r3
 8005242:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1f1      	bne.n	800522c <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8005248:	23ff      	movs	r3, #255	; 0xff
 800524a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800524e:	f001 fd9b 	bl	8006d88 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005252:	f000 ffc1 	bl	80061d8 <xTaskResumeAll>
 8005256:	2800      	cmp	r0, #0
 8005258:	d1a6      	bne.n	80051a8 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 800525a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800526e:	e79b      	b.n	80051a8 <xQueueReceive+0x204>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005280:	e7fe      	b.n	8005280 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005282:	f104 0010 	add.w	r0, r4, #16
 8005286:	f001 f8bd 	bl	8006404 <xTaskRemoveFromEventList>
 800528a:	2800      	cmp	r0, #0
 800528c:	f43f af26 	beq.w	80050dc <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8005290:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005298:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	e71a      	b.n	80050dc <xQueueReceive+0x138>
 80052a6:	bf00      	nop

080052a8 <xQueueSemaphoreTake>:
{
 80052a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d05c      	beq.n	800536e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 80052b4:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80052b6:	4604      	mov	r4, r0
 80052b8:	b147      	cbz	r7, 80052cc <xQueueSemaphoreTake+0x24>
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	e7fe      	b.n	80052ca <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052cc:	f001 f942 	bl	8006554 <xTaskGetSchedulerState>
 80052d0:	4605      	mov	r5, r0
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d054      	beq.n	8005380 <xQueueSemaphoreTake+0xd8>
 80052d6:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80052dc:	f001 fd32 	bl	8006d44 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80052e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 8148 	bne.w	8005578 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e8:	9b01      	ldr	r3, [sp, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 813a 	beq.w	8005564 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 80052f0:	2d00      	cmp	r5, #0
 80052f2:	f000 809d 	beq.w	8005430 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 80052f6:	f001 fd47 	bl	8006d88 <vPortExitCritical>
		vTaskSuspendAll();
 80052fa:	f000 ff65 	bl	80061c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052fe:	f001 fd21 	bl	8006d44 <vPortEnterCritical>
 8005302:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005306:	2bff      	cmp	r3, #255	; 0xff
 8005308:	bf04      	itt	eq
 800530a:	2300      	moveq	r3, #0
 800530c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005310:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005314:	2bff      	cmp	r3, #255	; 0xff
 8005316:	bf04      	itt	eq
 8005318:	2300      	moveq	r3, #0
 800531a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800531e:	f001 fd33 	bl	8006d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005322:	a901      	add	r1, sp, #4
 8005324:	a802      	add	r0, sp, #8
 8005326:	f001 f8c1 	bl	80064ac <xTaskCheckForTimeOut>
 800532a:	2800      	cmp	r0, #0
 800532c:	d135      	bne.n	800539a <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 800532e:	f001 fd09 	bl	8006d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80a4 	beq.w	8005482 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 800533a:	f001 fd25 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 800533e:	f001 fd01 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005342:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005346:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005348:	2d00      	cmp	r5, #0
 800534a:	dc05      	bgt.n	8005358 <xQueueSemaphoreTake+0xb0>
 800534c:	e074      	b.n	8005438 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800534e:	1e6b      	subs	r3, r5, #1
 8005350:	b2da      	uxtb	r2, r3
 8005352:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005354:	2a00      	cmp	r2, #0
 8005356:	d06f      	beq.n	8005438 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005358:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800535a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535c:	2b00      	cmp	r3, #0
 800535e:	d06b      	beq.n	8005438 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005360:	f001 f850 	bl	8006404 <xTaskRemoveFromEventList>
 8005364:	2800      	cmp	r0, #0
 8005366:	d0f2      	beq.n	800534e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8005368:	f001 f8e8 	bl	800653c <vTaskMissedYield>
 800536c:	e7ef      	b.n	800534e <xQueueSemaphoreTake+0xa6>
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800537e:	e7fe      	b.n	800537e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80d4 	beq.w	8005530 <xQueueSemaphoreTake+0x288>
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	e7fe      	b.n	8005398 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 800539a:	f001 fcd3 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800539e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80053a2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	dc04      	bgt.n	80053b2 <xQueueSemaphoreTake+0x10a>
 80053a8:	e011      	b.n	80053ce <xQueueSemaphoreTake+0x126>
			--cTxLock;
 80053aa:	1e6b      	subs	r3, r5, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053b0:	b16a      	cbz	r2, 80053ce <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b6:	b153      	cbz	r3, 80053ce <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b8:	f001 f824 	bl	8006404 <xTaskRemoveFromEventList>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0f4      	beq.n	80053aa <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 80053c0:	f001 f8bc 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 80053c4:	1e6b      	subs	r3, r5, #1
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d1f1      	bne.n	80053b2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 80053ce:	23ff      	movs	r3, #255	; 0xff
 80053d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80053d4:	f001 fcd8 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 80053d8:	f001 fcb4 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80053dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80053e0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	dd14      	ble.n	8005410 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e6:	f104 0810 	add.w	r8, r4, #16
 80053ea:	e003      	b.n	80053f4 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 80053ec:	1e6b      	subs	r3, r5, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053f2:	b16a      	cbz	r2, 8005410 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f6:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f8:	b153      	cbz	r3, 8005410 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053fa:	f001 f803 	bl	8006404 <xTaskRemoveFromEventList>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d0f4      	beq.n	80053ec <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 8005402:	f001 f89b 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 8005406:	1e6b      	subs	r3, r5, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800540c:	2a00      	cmp	r2, #0
 800540e:	d1f1      	bne.n	80053f4 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 8005410:	23ff      	movs	r3, #255	; 0xff
 8005412:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005416:	f001 fcb7 	bl	8006d88 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800541a:	f000 fedd 	bl	80061d8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800541e:	f001 fc91 	bl	8006d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d07c      	beq.n	8005522 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 8005428:	f001 fcae 	bl	8006d88 <vPortExitCritical>
	return xReturn;
 800542c:	2501      	movs	r5, #1
 800542e:	e755      	b.n	80052dc <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005430:	a802      	add	r0, sp, #8
 8005432:	f001 f82f 	bl	8006494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005436:	e75e      	b.n	80052f6 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8005438:	23ff      	movs	r3, #255	; 0xff
 800543a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800543e:	f001 fca3 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005442:	f001 fc7f 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005446:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800544a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800544c:	2d00      	cmp	r5, #0
 800544e:	dd10      	ble.n	8005472 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005450:	f104 0810 	add.w	r8, r4, #16
 8005454:	e003      	b.n	800545e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8005456:	1e6b      	subs	r3, r5, #1
 8005458:	b2da      	uxtb	r2, r3
 800545a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800545c:	b14a      	cbz	r2, 8005472 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800545e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005460:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005462:	b133      	cbz	r3, 8005472 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005464:	f000 ffce 	bl	8006404 <xTaskRemoveFromEventList>
 8005468:	2800      	cmp	r0, #0
 800546a:	d0f4      	beq.n	8005456 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 800546c:	f001 f866 	bl	800653c <vTaskMissedYield>
 8005470:	e7f1      	b.n	8005456 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 8005472:	23ff      	movs	r3, #255	; 0xff
 8005474:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005478:	f001 fc86 	bl	8006d88 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800547c:	f000 feac 	bl	80061d8 <xTaskResumeAll>
 8005480:	e7d4      	b.n	800542c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 8005482:	f001 fc81 	bl	8006d88 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d062      	beq.n	8005552 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800548c:	9901      	ldr	r1, [sp, #4]
 800548e:	4630      	mov	r0, r6
 8005490:	f000 ff08 	bl	80062a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005494:	f001 fc56 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005498:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800549c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800549e:	2d00      	cmp	r5, #0
 80054a0:	dc04      	bgt.n	80054ac <xQueueSemaphoreTake+0x204>
 80054a2:	e00d      	b.n	80054c0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
 80054a4:	1e6b      	subs	r3, r5, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054aa:	b14a      	cbz	r2, 80054c0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ae:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b0:	b133      	cbz	r3, 80054c0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b2:	f000 ffa7 	bl	8006404 <xTaskRemoveFromEventList>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d0f4      	beq.n	80054a4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 80054ba:	f001 f83f 	bl	800653c <vTaskMissedYield>
 80054be:	e7f1      	b.n	80054a4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 80054c0:	23ff      	movs	r3, #255	; 0xff
 80054c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80054c6:	f001 fc5f 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 80054ca:	f001 fc3b 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80054ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80054d2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	dd10      	ble.n	80054fa <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	f104 0810 	add.w	r8, r4, #16
 80054dc:	e003      	b.n	80054e6 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 80054de:	1e6b      	subs	r3, r5, #1
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054e4:	b14a      	cbz	r2, 80054fa <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ea:	b133      	cbz	r3, 80054fa <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ec:	f000 ff8a 	bl	8006404 <xTaskRemoveFromEventList>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0f4      	beq.n	80054de <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 80054f4:	f001 f822 	bl	800653c <vTaskMissedYield>
 80054f8:	e7f1      	b.n	80054de <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 80054fa:	23ff      	movs	r3, #255	; 0xff
 80054fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005500:	f001 fc42 	bl	8006d88 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005504:	f000 fe68 	bl	80061d8 <xTaskResumeAll>
 8005508:	2800      	cmp	r0, #0
 800550a:	d18f      	bne.n	800542c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 800550c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005514:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	e784      	b.n	800542c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 8005522:	f001 fc31 	bl	8006d88 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8005526:	b92f      	cbnz	r7, 8005534 <xQueueSemaphoreTake+0x28c>
}
 8005528:	4638      	mov	r0, r7
 800552a:	b004      	add	sp, #16
 800552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005530:	4607      	mov	r7, r0
 8005532:	e6d1      	b.n	80052d8 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8005534:	f001 fc06 	bl	8006d44 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005538:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800553a:	b119      	cbz	r1, 8005544 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800553c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005544:	68a0      	ldr	r0, [r4, #8]
 8005546:	f001 f8c1 	bl	80066cc <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800554a:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 800554c:	f001 fc1c 	bl	8006d88 <vPortExitCritical>
 8005550:	e7ea      	b.n	8005528 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 8005552:	f001 fbf7 	bl	8006d44 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005556:	68a0      	ldr	r0, [r4, #8]
 8005558:	f001 f80c 	bl	8006574 <xTaskPriorityInherit>
 800555c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800555e:	f001 fc13 	bl	8006d88 <vPortExitCritical>
 8005562:	e793      	b.n	800548c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005564:	b197      	cbz	r7, 800558c <xQueueSemaphoreTake+0x2e4>
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	e7fe      	b.n	8005576 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005578:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800557a:	3b01      	subs	r3, #1
 800557c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800557e:	b1ca      	cbz	r2, 80055b4 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	b933      	cbnz	r3, 8005592 <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 8005584:	f001 fc00 	bl	8006d88 <vPortExitCritical>
				return pdPASS;
 8005588:	2701      	movs	r7, #1
 800558a:	e7cd      	b.n	8005528 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 800558c:	f001 fbfc 	bl	8006d88 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005590:	e7ca      	b.n	8005528 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005592:	f104 0010 	add.w	r0, r4, #16
 8005596:	f000 ff35 	bl	8006404 <xTaskRemoveFromEventList>
 800559a:	2800      	cmp	r0, #0
 800559c:	d0f2      	beq.n	8005584 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 800559e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	e7e7      	b.n	8005584 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055b4:	f001 f8ea 	bl	800678c <pvTaskIncrementMutexHeldCount>
 80055b8:	60a0      	str	r0, [r4, #8]
 80055ba:	e7e1      	b.n	8005580 <xQueueSemaphoreTake+0x2d8>

080055bc <xQueueReceiveFromISR>:
{
 80055bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80055c0:	b310      	cbz	r0, 8005608 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c2:	460e      	mov	r6, r1
 80055c4:	4617      	mov	r7, r2
 80055c6:	4604      	mov	r4, r0
 80055c8:	b191      	cbz	r1, 80055f0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ca:	f001 fced 	bl	8006fa8 <vPortValidateInterruptPriority>
	__asm volatile
 80055ce:	f3ef 8911 	mrs	r9, BASEPRI
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e4:	b9cd      	cbnz	r5, 800561a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80055e6:	4628      	mov	r0, r5
	__asm volatile
 80055e8:	f389 8811 	msr	BASEPRI, r9
}
 80055ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0e9      	beq.n	80055ca <xQueueReceiveFromISR+0xe>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	e7fe      	b.n	8005606 <xQueueReceiveFromISR+0x4a>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005618:	e7fe      	b.n	8005618 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800561a:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800561e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005620:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005624:	b152      	cbz	r2, 800563c <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005626:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005628:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800562a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800562c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800562e:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005630:	bf24      	itt	cs
 8005632:	6821      	ldrcs	r1, [r4, #0]
 8005634:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005636:	4630      	mov	r0, r6
 8005638:	f003 fa66 	bl	8008b08 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800563c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800563e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005642:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005644:	d009      	beq.n	800565a <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005646:	f108 0301 	add.w	r3, r8, #1
 800564a:	b25b      	sxtb	r3, r3
 800564c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8005650:	2001      	movs	r0, #1
	__asm volatile
 8005652:	f389 8811 	msr	BASEPRI, r9
}
 8005656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f7      	beq.n	8005650 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005660:	f104 0010 	add.w	r0, r4, #16
 8005664:	f000 fece 	bl	8006404 <xTaskRemoveFromEventList>
 8005668:	2800      	cmp	r0, #0
 800566a:	d0f1      	beq.n	8005650 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 800566c:	2f00      	cmp	r7, #0
 800566e:	d0ef      	beq.n	8005650 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005670:	2001      	movs	r0, #1
 8005672:	6038      	str	r0, [r7, #0]
 8005674:	e7b8      	b.n	80055e8 <xQueueReceiveFromISR+0x2c>
 8005676:	bf00      	nop

08005678 <vQueueDelete>:
	configASSERT( pxQueue );
 8005678:	b1e0      	cbz	r0, 80056b4 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800567a:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <vQueueDelete+0x80>)
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	4290      	cmp	r0, r2
 8005680:	d021      	beq.n	80056c6 <vQueueDelete+0x4e>
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	4290      	cmp	r0, r2
 8005686:	d029      	beq.n	80056dc <vQueueDelete+0x64>
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	4290      	cmp	r0, r2
 800568c:	d028      	beq.n	80056e0 <vQueueDelete+0x68>
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	4290      	cmp	r0, r2
 8005692:	d027      	beq.n	80056e4 <vQueueDelete+0x6c>
 8005694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005696:	4290      	cmp	r0, r2
 8005698:	d026      	beq.n	80056e8 <vQueueDelete+0x70>
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4290      	cmp	r0, r2
 800569e:	d01b      	beq.n	80056d8 <vQueueDelete+0x60>
 80056a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a2:	4290      	cmp	r0, r2
 80056a4:	d022      	beq.n	80056ec <vQueueDelete+0x74>
 80056a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a8:	4290      	cmp	r0, r2
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056aa:	bf08      	it	eq
 80056ac:	2207      	moveq	r2, #7
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80056ae:	d00b      	beq.n	80056c8 <vQueueDelete+0x50>
		vPortFree( pxQueue );
 80056b0:	f001 bd60 	b.w	8007174 <vPortFree>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80056c4:	e7fe      	b.n	80056c4 <vQueueDelete+0x4c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056c6:	2200      	movs	r2, #0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80056c8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80056f0 <vQueueDelete+0x78>
 80056cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d0:	ed83 7b00 	vstr	d7, [r3]
		vPortFree( pxQueue );
 80056d4:	f001 bd4e 	b.w	8007174 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056d8:	2205      	movs	r2, #5
 80056da:	e7f5      	b.n	80056c8 <vQueueDelete+0x50>
 80056dc:	2201      	movs	r2, #1
 80056de:	e7f3      	b.n	80056c8 <vQueueDelete+0x50>
 80056e0:	2202      	movs	r2, #2
 80056e2:	e7f1      	b.n	80056c8 <vQueueDelete+0x50>
 80056e4:	2203      	movs	r2, #3
 80056e6:	e7ef      	b.n	80056c8 <vQueueDelete+0x50>
 80056e8:	2204      	movs	r2, #4
 80056ea:	e7ed      	b.n	80056c8 <vQueueDelete+0x50>
 80056ec:	2206      	movs	r2, #6
 80056ee:	e7eb      	b.n	80056c8 <vQueueDelete+0x50>
	...
 80056f8:	20000460 	.word	0x20000460

080056fc <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056fc:	4b12      	ldr	r3, [pc, #72]	; (8005748 <vQueueAddToRegistry+0x4c>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	b17a      	cbz	r2, 8005722 <vQueueAddToRegistry+0x26>
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	b162      	cbz	r2, 8005720 <vQueueAddToRegistry+0x24>
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	b192      	cbz	r2, 8005730 <vQueueAddToRegistry+0x34>
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	b192      	cbz	r2, 8005734 <vQueueAddToRegistry+0x38>
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	b192      	cbz	r2, 8005738 <vQueueAddToRegistry+0x3c>
 8005712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005714:	b192      	cbz	r2, 800573c <vQueueAddToRegistry+0x40>
 8005716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005718:	b192      	cbz	r2, 8005740 <vQueueAddToRegistry+0x44>
 800571a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571c:	b192      	cbz	r2, 8005744 <vQueueAddToRegistry+0x48>
	}
 800571e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005720:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005722:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005726:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800572a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 800572e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005730:	2202      	movs	r2, #2
 8005732:	e7f6      	b.n	8005722 <vQueueAddToRegistry+0x26>
 8005734:	2203      	movs	r2, #3
 8005736:	e7f4      	b.n	8005722 <vQueueAddToRegistry+0x26>
 8005738:	2204      	movs	r2, #4
 800573a:	e7f2      	b.n	8005722 <vQueueAddToRegistry+0x26>
 800573c:	2205      	movs	r2, #5
 800573e:	e7f0      	b.n	8005722 <vQueueAddToRegistry+0x26>
 8005740:	2206      	movs	r2, #6
 8005742:	e7ee      	b.n	8005722 <vQueueAddToRegistry+0x26>
 8005744:	2207      	movs	r2, #7
 8005746:	e7ec      	b.n	8005722 <vQueueAddToRegistry+0x26>
 8005748:	20000460 	.word	0x20000460

0800574c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4605      	mov	r5, r0
 8005750:	460e      	mov	r6, r1
 8005752:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005754:	f001 faf6 	bl	8006d44 <vPortEnterCritical>
 8005758:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800575c:	2bff      	cmp	r3, #255	; 0xff
 800575e:	bf04      	itt	eq
 8005760:	2300      	moveq	r3, #0
 8005762:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 8005766:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800576a:	2bff      	cmp	r3, #255	; 0xff
 800576c:	bf04      	itt	eq
 800576e:	2300      	moveq	r3, #0
 8005770:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8005774:	f001 fb08 	bl	8006d88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005778:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d043      	beq.n	8005806 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 800577e:	f001 fae1 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005782:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8005786:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005788:	2c00      	cmp	r4, #0
 800578a:	dd14      	ble.n	80057b6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800578c:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005790:	e003      	b.n	800579a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8005792:	1e63      	subs	r3, r4, #1
 8005794:	b2da      	uxtb	r2, r3
 8005796:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005798:	b16a      	cbz	r2, 80057b6 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800579a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800579c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800579e:	b153      	cbz	r3, 80057b6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057a0:	f000 fe30 	bl	8006404 <xTaskRemoveFromEventList>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0f4      	beq.n	8005792 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80057a8:	f000 fec8 	bl	800653c <vTaskMissedYield>
			--cTxLock;
 80057ac:	1e63      	subs	r3, r4, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	d1f1      	bne.n	800579a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 80057b6:	23ff      	movs	r3, #255	; 0xff
 80057b8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80057bc:	f001 fae4 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 80057c0:	f001 fac0 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80057c4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80057c8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	dd14      	ble.n	80057f8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ce:	f105 0610 	add.w	r6, r5, #16
 80057d2:	e003      	b.n	80057dc <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 80057d4:	1e63      	subs	r3, r4, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057da:	b16a      	cbz	r2, 80057f8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057dc:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057de:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e0:	b153      	cbz	r3, 80057f8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057e2:	f000 fe0f 	bl	8006404 <xTaskRemoveFromEventList>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d0f4      	beq.n	80057d4 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80057ea:	f000 fea7 	bl	800653c <vTaskMissedYield>
				--cRxLock;
 80057ee:	1e63      	subs	r3, r4, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	d1f1      	bne.n	80057dc <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80057f8:	23ff      	movs	r3, #255	; 0xff
 80057fa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80057fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005802:	f001 bac1 	b.w	8006d88 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005806:	4622      	mov	r2, r4
 8005808:	4631      	mov	r1, r6
 800580a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800580e:	f000 fd99 	bl	8006344 <vTaskPlaceOnEventListRestricted>
 8005812:	e7b4      	b.n	800577e <vQueueWaitForMessageRestricted+0x32>

08005814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	4d16      	ldr	r5, [pc, #88]	; (8005870 <prvIdleTask+0x5c>)
 8005818:	4f16      	ldr	r7, [pc, #88]	; (8005874 <prvIdleTask+0x60>)
 800581a:	4e17      	ldr	r6, [pc, #92]	; (8005878 <prvIdleTask+0x64>)
 800581c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800587c <prvIdleTask+0x68>
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8005820:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8005824:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8005828:	e014      	b.n	8005854 <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 800582a:	f001 fa8b 	bl	8006d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005832:	1d20      	adds	r0, r4, #4
 8005834:	f7ff f8ba 	bl	80049ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800583e:	682b      	ldr	r3, [r5, #0]
 8005840:	3b01      	subs	r3, #1
 8005842:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8005844:	f001 faa0 	bl	8006d88 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005848:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800584a:	f001 fc93 	bl	8007174 <vPortFree>
			vPortFree( pxTCB );
 800584e:	4620      	mov	r0, r4
 8005850:	f001 fc90 	bl	8007174 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e7      	bne.n	800582a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800585a:	f8d8 3000 	ldr.w	r3, [r8]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d9f8      	bls.n	8005854 <prvIdleTask+0x40>
				taskYIELD();
 8005862:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	e7f1      	b.n	8005854 <prvIdleTask+0x40>
 8005870:	2000053c 	.word	0x2000053c
 8005874:	200005b0 	.word	0x200005b0
 8005878:	20000538 	.word	0x20000538
 800587c:	200004ac 	.word	0x200004ac

08005880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005882:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005884:	4e1b      	ldr	r6, [pc, #108]	; (80058f4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8005886:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005888:	6833      	ldr	r3, [r6, #0]
{
 800588a:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588c:	1d18      	adds	r0, r3, #4
{
 800588e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005890:	f7ff f88c 	bl	80049ac <uxListRemove>
 8005894:	b948      	cbnz	r0, 80058aa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005896:	6833      	ldr	r3, [r6, #0]
 8005898:	4917      	ldr	r1, [pc, #92]	; (80058f8 <prvAddCurrentTaskToDelayedList+0x78>)
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	2301      	movs	r3, #1
 800589e:	fa03 f202 	lsl.w	r2, r3, r2
 80058a2:	680b      	ldr	r3, [r1, #0]
 80058a4:	ea23 0302 	bic.w	r3, r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058aa:	1c6b      	adds	r3, r5, #1
 80058ac:	d017      	beq.n	80058de <prvAddCurrentTaskToDelayedList+0x5e>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ae:	6833      	ldr	r3, [r6, #0]
 80058b0:	1964      	adds	r4, r4, r5
 80058b2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80058b4:	d307      	bcc.n	80058c6 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b6:	4b11      	ldr	r3, [pc, #68]	; (80058fc <prvAddCurrentTaskToDelayedList+0x7c>)
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c0:	3104      	adds	r1, #4
 80058c2:	f7ff b85b 	b.w	800497c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <prvAddCurrentTaskToDelayedList+0x80>)
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	6831      	ldr	r1, [r6, #0]
 80058cc:	3104      	adds	r1, #4
 80058ce:	f7ff f855 	bl	800497c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <prvAddCurrentTaskToDelayedList+0x84>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80058d8:	bf88      	it	hi
 80058da:	601c      	strhi	r4, [r3, #0]
}
 80058dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d0e5      	beq.n	80058ae <prvAddCurrentTaskToDelayedList+0x2e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e2:	6831      	ldr	r1, [r6, #0]
 80058e4:	4808      	ldr	r0, [pc, #32]	; (8005908 <prvAddCurrentTaskToDelayedList+0x88>)
}
 80058e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ea:	3104      	adds	r1, #4
 80058ec:	f7ff b836 	b.w	800495c <vListInsertEnd>
 80058f0:	200005c4 	.word	0x200005c4
 80058f4:	200004a0 	.word	0x200004a0
 80058f8:	20000548 	.word	0x20000548
 80058fc:	200004a8 	.word	0x200004a8
 8005900:	200004a4 	.word	0x200004a4
 8005904:	20000578 	.word	0x20000578
 8005908:	2000059c 	.word	0x2000059c

0800590c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005910:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <xTaskIncrementTick.part.0+0x130>)
 8005912:	681d      	ldr	r5, [r3, #0]
 8005914:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 8005916:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8005918:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800591a:	2d00      	cmp	r5, #0
 800591c:	d045      	beq.n	80059aa <xTaskIncrementTick.part.0+0x9e>
 800591e:	4b48      	ldr	r3, [pc, #288]	; (8005a40 <xTaskIncrementTick.part.0+0x134>)
 8005920:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	429d      	cmp	r5, r3
 8005926:	d34d      	bcc.n	80059c4 <xTaskIncrementTick.part.0+0xb8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005928:	4e46      	ldr	r6, [pc, #280]	; (8005a44 <xTaskIncrementTick.part.0+0x138>)
 800592a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8005a58 <xTaskIncrementTick.part.0+0x14c>
 800592e:	6833      	ldr	r3, [r6, #0]
 8005930:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005a5c <xTaskIncrementTick.part.0+0x150>
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	2c00      	cmp	r4, #0
 8005938:	d07a      	beq.n	8005a30 <xTaskIncrementTick.part.0+0x124>
					prvAddTaskToReadyList( pxTCB );
 800593a:	4f43      	ldr	r7, [pc, #268]	; (8005a48 <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 800593c:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 800593e:	f04f 0a01 	mov.w	sl, #1
 8005942:	e024      	b.n	800598e <xTaskIncrementTick.part.0+0x82>
 8005944:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005946:	f7ff f831 	bl	80049ac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800594a:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800594e:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005950:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005954:	b112      	cbz	r2, 800595c <xTaskIncrementTick.part.0+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005956:	f7ff f829 	bl	80049ac <uxListRemove>
 800595a:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 800595c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	fa0a f200 	lsl.w	r2, sl, r0
 8005966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800596a:	431a      	orrs	r2, r3
 800596c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005970:	603a      	str	r2, [r7, #0]
 8005972:	f7fe fff3 	bl	800495c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005976:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800597a:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800597c:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8005980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005982:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8005984:	4291      	cmp	r1, r2
 8005986:	bf28      	it	cs
 8005988:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598a:	2b00      	cmp	r3, #0
 800598c:	d050      	beq.n	8005a30 <xTaskIncrementTick.part.0+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598e:	6833      	ldr	r3, [r6, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005996:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599a:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 800599e:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059a0:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80059a2:	d2cf      	bcs.n	8005944 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059a8:	e011      	b.n	80059ce <xTaskIncrementTick.part.0+0xc2>
			taskSWITCH_DELAYED_LISTS();
 80059aa:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <xTaskIncrementTick.part.0+0x138>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	b30a      	cbz	r2, 80059f6 <xTaskIncrementTick.part.0+0xea>
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	e7fe      	b.n	80059c2 <xTaskIncrementTick.part.0+0xb6>
 80059c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005a58 <xTaskIncrementTick.part.0+0x14c>
 80059c8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005a5c <xTaskIncrementTick.part.0+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 80059cc:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ce:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 80059d2:	491e      	ldr	r1, [pc, #120]	; (8005a4c <xTaskIncrementTick.part.0+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80059e0:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80059e2:	2a02      	cmp	r2, #2
 80059e4:	bf28      	it	cs
 80059e6:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80059e8:	2b00      	cmp	r3, #0
}
 80059ea:	bf0c      	ite	eq
 80059ec:	4620      	moveq	r0, r4
 80059ee:	2001      	movne	r0, #1
 80059f0:	b003      	add	sp, #12
 80059f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <xTaskIncrementTick.part.0+0x144>)
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	6811      	ldr	r1, [r2, #0]
 80059fc:	6019      	str	r1, [r3, #0]
 80059fe:	4915      	ldr	r1, [pc, #84]	; (8005a54 <xTaskIncrementTick.part.0+0x148>)
 8005a00:	6010      	str	r0, [r2, #0]
 8005a02:	680a      	ldr	r2, [r1, #0]
 8005a04:	3201      	adds	r2, #1
 8005a06:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	b93a      	cbnz	r2, 8005a1e <xTaskIncrementTick.part.0+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <xTaskIncrementTick.part.0+0x134>)
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	e781      	b.n	8005922 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a20:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <xTaskIncrementTick.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a22:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a24:	9201      	str	r2, [sp, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4613      	mov	r3, r2
}
 8005a2e:	e778      	b.n	8005922 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a30:	9a01      	ldr	r2, [sp, #4]
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295
 8005a36:	6013      	str	r3, [r2, #0]
					break;
 8005a38:	e7c9      	b.n	80059ce <xTaskIncrementTick.part.0+0xc2>
 8005a3a:	bf00      	nop
 8005a3c:	200005c4 	.word	0x200005c4
 8005a40:	20000578 	.word	0x20000578
 8005a44:	200004a4 	.word	0x200004a4
 8005a48:	20000548 	.word	0x20000548
 8005a4c:	200005c8 	.word	0x200005c8
 8005a50:	200004a8 	.word	0x200004a8
 8005a54:	2000057c 	.word	0x2000057c
 8005a58:	200004ac 	.word	0x200004ac
 8005a5c:	200004a0 	.word	0x200004a0

08005a60 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8005a64:	4c45      	ldr	r4, [pc, #276]	; (8005b7c <xTaskResumeAll.part.0+0x11c>)
BaseType_t xTaskResumeAll( void )
 8005a66:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005a68:	f001 f96c 	bl	8006d44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d167      	bne.n	8005b48 <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a78:	4b41      	ldr	r3, [pc, #260]	; (8005b80 <xTaskResumeAll.part.0+0x120>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d063      	beq.n	8005b48 <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a80:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005b9c <xTaskResumeAll.part.0+0x13c>
 8005a84:	f8db 3000 	ldr.w	r3, [fp]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d073      	beq.n	8005b74 <xTaskResumeAll.part.0+0x114>
 8005a8c:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <xTaskResumeAll.part.0+0x124>)
 8005a8e:	4d3e      	ldr	r5, [pc, #248]	; (8005b88 <xTaskResumeAll.part.0+0x128>)
 8005a90:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8005ba0 <xTaskResumeAll.part.0+0x140>
 8005a94:	4f3d      	ldr	r7, [pc, #244]	; (8005b8c <xTaskResumeAll.part.0+0x12c>)
 8005a96:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8005a98:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9a:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005a9e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa2:	f10a 0904 	add.w	r9, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aa6:	f10a 0018 	add.w	r0, sl, #24
 8005aaa:	f7fe ff7f 	bl	80049ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aae:	4648      	mov	r0, r9
 8005ab0:	f7fe ff7c 	bl	80049ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ab4:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8005ab8:	682a      	ldr	r2, [r5, #0]
 8005aba:	fa06 f300 	lsl.w	r3, r6, r0
 8005abe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005aca:	602b      	str	r3, [r5, #0]
 8005acc:	f7fe ff46 	bl	800495c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d33d      	bcc.n	8005b58 <xTaskResumeAll.part.0+0xf8>
						xYieldPending = pdTRUE;
 8005adc:	9b01      	ldr	r3, [sp, #4]
 8005ade:	601e      	str	r6, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ae0:	f8db 3000 	ldr.w	r3, [fp]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1d8      	bne.n	8005a9a <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae8:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <xTaskResumeAll.part.0+0x130>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	2a00      	cmp	r2, #0
 8005af0:	d03b      	beq.n	8005b6a <xTaskResumeAll.part.0+0x10a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <xTaskResumeAll.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	6852      	ldr	r2, [r2, #4]
 8005afc:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005afe:	4e26      	ldr	r6, [pc, #152]	; (8005b98 <xTaskResumeAll.part.0+0x138>)
 8005b00:	6835      	ldr	r5, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005b02:	b195      	cbz	r5, 8005b2a <xTaskResumeAll.part.0+0xca>
								xYieldPending = pdTRUE;
 8005b04:	2701      	movs	r7, #1
 8005b06:	e006      	b.n	8005b16 <xTaskResumeAll.part.0+0xb6>
 8005b08:	f7ff ff00 	bl	800590c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8005b0c:	b108      	cbz	r0, 8005b12 <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b12:	3d01      	subs	r5, #1
 8005b14:	d008      	beq.n	8005b28 <xTaskResumeAll.part.0+0xc8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f5      	beq.n	8005b08 <xTaskResumeAll.part.0+0xa8>
		++xPendedTicks;
 8005b1c:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b1e:	3d01      	subs	r5, #1
		++xPendedTicks;
 8005b20:	f103 0301 	add.w	r3, r3, #1
 8005b24:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b26:	d1f6      	bne.n	8005b16 <xTaskResumeAll.part.0+0xb6>
						xPendedTicks = 0;
 8005b28:	6035      	str	r5, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	b15b      	cbz	r3, 8005b48 <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8005b30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005b44:	2001      	movs	r0, #1
 8005b46:	e000      	b.n	8005b4a <xTaskResumeAll.part.0+0xea>
BaseType_t xAlreadyYielded = pdFALSE;
 8005b48:	2000      	movs	r0, #0
 8005b4a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005b4c:	f001 f91c 	bl	8006d88 <vPortExitCritical>
}
 8005b50:	9801      	ldr	r0, [sp, #4]
 8005b52:	b003      	add	sp, #12
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b58:	f8db 3000 	ldr.w	r3, [fp]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d19c      	bne.n	8005a9a <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <xTaskResumeAll.part.0+0x130>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d1c3      	bne.n	8005af2 <xTaskResumeAll.part.0+0x92>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <xTaskResumeAll.part.0+0x134>)
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e7c4      	b.n	8005afe <xTaskResumeAll.part.0+0x9e>
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <xTaskResumeAll.part.0+0x124>)
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	e7c1      	b.n	8005afe <xTaskResumeAll.part.0+0x9e>
 8005b7a:	bf00      	nop
 8005b7c:	20000540 	.word	0x20000540
 8005b80:	20000538 	.word	0x20000538
 8005b84:	200005c8 	.word	0x200005c8
 8005b88:	20000548 	.word	0x20000548
 8005b8c:	200004a0 	.word	0x200004a0
 8005b90:	200004a4 	.word	0x200004a4
 8005b94:	20000578 	.word	0x20000578
 8005b98:	20000580 	.word	0x20000580
 8005b9c:	20000584 	.word	0x20000584
 8005ba0:	200004ac 	.word	0x200004ac

08005ba4 <xTaskCreate>:
	{
 8005ba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ba8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8005bac:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bae:	4650      	mov	r0, sl
	{
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bb4:	f001 fa26 	bl	8007004 <pvPortMalloc>
			if( pxStack != NULL )
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f000 80c4 	beq.w	8005d46 <xTaskCreate+0x1a2>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bbe:	4683      	mov	fp, r0
 8005bc0:	2054      	movs	r0, #84	; 0x54
 8005bc2:	f001 fa1f 	bl	8007004 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	f000 80c9 	beq.w	8005d60 <xTaskCreate+0x1bc>
					pxNewTCB->pxStack = pxStack;
 8005bce:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	if( pcName != NULL )
 8005bd2:	2d00      	cmp	r5, #0
 8005bd4:	f000 80d6 	beq.w	8005d84 <xTaskCreate+0x1e0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bd8:	782b      	ldrb	r3, [r5, #0]
 8005bda:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005bde:	782b      	ldrb	r3, [r5, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d04d      	beq.n	8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005be4:	786b      	ldrb	r3, [r5, #1]
 8005be6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8005bea:	786b      	ldrb	r3, [r5, #1]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d047      	beq.n	8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bf0:	78ab      	ldrb	r3, [r5, #2]
 8005bf2:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8005bf6:	78ab      	ldrb	r3, [r5, #2]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d041      	beq.n	8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bfc:	78eb      	ldrb	r3, [r5, #3]
 8005bfe:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005c02:	78eb      	ldrb	r3, [r5, #3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d03b      	beq.n	8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c08:	792b      	ldrb	r3, [r5, #4]
 8005c0a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8005c0e:	792b      	ldrb	r3, [r5, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d035      	beq.n	8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c14:	796b      	ldrb	r3, [r5, #5]
 8005c16:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8005c1a:	796b      	ldrb	r3, [r5, #5]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02f      	beq.n	8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c20:	79ab      	ldrb	r3, [r5, #6]
 8005c22:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8005c26:	79ab      	ldrb	r3, [r5, #6]
 8005c28:	b353      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c2a:	79eb      	ldrb	r3, [r5, #7]
 8005c2c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8005c30:	79eb      	ldrb	r3, [r5, #7]
 8005c32:	b32b      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c34:	7a2b      	ldrb	r3, [r5, #8]
 8005c36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8005c3a:	7a2b      	ldrb	r3, [r5, #8]
 8005c3c:	b303      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c3e:	7a6b      	ldrb	r3, [r5, #9]
 8005c40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005c44:	7a6b      	ldrb	r3, [r5, #9]
 8005c46:	b1db      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c48:	7aab      	ldrb	r3, [r5, #10]
 8005c4a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8005c4e:	7aab      	ldrb	r3, [r5, #10]
 8005c50:	b1b3      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c52:	7aeb      	ldrb	r3, [r5, #11]
 8005c54:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005c58:	7aeb      	ldrb	r3, [r5, #11]
 8005c5a:	b18b      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c5c:	7b2b      	ldrb	r3, [r5, #12]
 8005c5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8005c62:	7b2b      	ldrb	r3, [r5, #12]
 8005c64:	b163      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c66:	7b6b      	ldrb	r3, [r5, #13]
 8005c68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8005c6c:	7b6b      	ldrb	r3, [r5, #13]
 8005c6e:	b13b      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c70:	7bab      	ldrb	r3, [r5, #14]
 8005c72:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8005c76:	7bab      	ldrb	r3, [r5, #14]
 8005c78:	b113      	cbz	r3, 8005c80 <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c7a:	7beb      	ldrb	r3, [r5, #15]
 8005c7c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c80:	2300      	movs	r3, #0
 8005c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c86:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005c88:	2e06      	cmp	r6, #6
 8005c8a:	bf28      	it	cs
 8005c8c:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005c8e:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c90:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8005c94:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005c96:	6466      	str	r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c98:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 8005c9a:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c9c:	f7fe fe5a 	bl	8004954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ca0:	f104 0018 	add.w	r0, r4, #24
 8005ca4:	f7fe fe56 	bl	8004954 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ca8:	f1aa 0204 	sub.w	r2, sl, #4
 8005cac:	eb0b 0002 	add.w	r0, fp, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb0:	f1c6 0607 	rsb	r6, r6, #7
		pxNewTCB->ulNotifiedValue = 0;
 8005cb4:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb6:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cb8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cbc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cbe:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f020 0007 	bic.w	r0, r0, #7
 8005cc8:	f001 f814 	bl	8006cf4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8005ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cce:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005cd0:	b103      	cbz	r3, 8005cd4 <xTaskCreate+0x130>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cd2:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8005cd4:	f001 f836 	bl	8006d44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005cd8:	4a3d      	ldr	r2, [pc, #244]	; (8005dd0 <xTaskCreate+0x22c>)
		if( pxCurrentTCB == NULL )
 8005cda:	4e3e      	ldr	r6, [pc, #248]	; (8005dd4 <xTaskCreate+0x230>)
		uxCurrentNumberOfTasks++;
 8005cdc:	6813      	ldr	r3, [r2, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ce2:	6833      	ldr	r3, [r6, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d044      	beq.n	8005d72 <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 8005ce8:	4f3b      	ldr	r7, [pc, #236]	; (8005dd8 <xTaskCreate+0x234>)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	b37b      	cbz	r3, 8005d4e <xTaskCreate+0x1aa>
		prvAddTaskToReadyList( pxNewTCB );
 8005cee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005cf0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8005e00 <xTaskCreate+0x25c>
		uxTaskNumber++;
 8005cf4:	4d39      	ldr	r5, [pc, #228]	; (8005ddc <xTaskCreate+0x238>)
		prvAddTaskToReadyList( pxNewTCB );
 8005cf6:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <xTaskCreate+0x23c>)
		uxTaskNumber++;
 8005cf8:	682b      	ldr	r3, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005cfa:	f8d2 c000 	ldr.w	ip, [r2]
		uxTaskNumber++;
 8005cfe:	3301      	adds	r3, #1
 8005d00:	602b      	str	r3, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005d02:	2501      	movs	r5, #1
 8005d04:	fa05 f300 	lsl.w	r3, r5, r0
 8005d08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d0c:	ea43 030c 	orr.w	r3, r3, ip
 8005d10:	4649      	mov	r1, r9
 8005d12:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	f7fe fe20 	bl	800495c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005d1c:	f001 f834 	bl	8006d88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	b31b      	cbz	r3, 8005d6c <xTaskCreate+0x1c8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d24:	6832      	ldr	r2, [r6, #0]
 8005d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d21e      	bcs.n	8005d6c <xTaskCreate+0x1c8>
			taskYIELD_IF_USING_PREEMPTION();
 8005d2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8005d42:	4628      	mov	r0, r5
 8005d44:	e001      	b.n	8005d4a <xTaskCreate+0x1a6>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005d4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d4e:	6833      	ldr	r3, [r6, #0]
 8005d50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005e00 <xTaskCreate+0x25c>
 8005d58:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8005d5a:	bf98      	it	ls
 8005d5c:	6034      	strls	r4, [r6, #0]
 8005d5e:	e7c9      	b.n	8005cf4 <xTaskCreate+0x150>
					vPortFree( pxStack );
 8005d60:	4658      	mov	r0, fp
 8005d62:	f001 fa07 	bl	8007174 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d66:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6a:	e7ee      	b.n	8005d4a <xTaskCreate+0x1a6>
			xReturn = pdPASS;
 8005d6c:	4628      	mov	r0, r5
	}
 8005d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8005d72:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d74:	6813      	ldr	r3, [r2, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d007      	beq.n	8005d8a <xTaskCreate+0x1e6>
		prvAddTaskToReadyList( pxNewTCB );
 8005d7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005d7c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8005e00 <xTaskCreate+0x25c>
 8005d80:	4f15      	ldr	r7, [pc, #84]	; (8005dd8 <xTaskCreate+0x234>)
 8005d82:	e7b7      	b.n	8005cf4 <xTaskCreate+0x150>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d84:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 8005d88:	e77d      	b.n	8005c86 <xTaskCreate+0xe2>
 8005d8a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005e00 <xTaskCreate+0x25c>
 8005d8e:	4645      	mov	r5, r8
 8005d90:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d94:	4628      	mov	r0, r5
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d96:	3514      	adds	r5, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d98:	f7fe fdd0 	bl	800493c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9c:	42bd      	cmp	r5, r7
 8005d9e:	d1f9      	bne.n	8005d94 <xTaskCreate+0x1f0>
	vListInitialise( &xDelayedTaskList1 );
 8005da0:	4f10      	ldr	r7, [pc, #64]	; (8005de4 <xTaskCreate+0x240>)
	vListInitialise( &xDelayedTaskList2 );
 8005da2:	4d11      	ldr	r5, [pc, #68]	; (8005de8 <xTaskCreate+0x244>)
	vListInitialise( &xDelayedTaskList1 );
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7fe fdc9 	bl	800493c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7fe fdc6 	bl	800493c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db0:	480e      	ldr	r0, [pc, #56]	; (8005dec <xTaskCreate+0x248>)
 8005db2:	f7fe fdc3 	bl	800493c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005db6:	480e      	ldr	r0, [pc, #56]	; (8005df0 <xTaskCreate+0x24c>)
 8005db8:	f7fe fdc0 	bl	800493c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005dbc:	480d      	ldr	r0, [pc, #52]	; (8005df4 <xTaskCreate+0x250>)
 8005dbe:	f7fe fdbd 	bl	800493c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <xTaskCreate+0x254>)
		prvAddTaskToReadyList( pxNewTCB );
 8005dc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc6:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <xTaskCreate+0x258>)
 8005dca:	4f03      	ldr	r7, [pc, #12]	; (8005dd8 <xTaskCreate+0x234>)
 8005dcc:	601d      	str	r5, [r3, #0]
}
 8005dce:	e791      	b.n	8005cf4 <xTaskCreate+0x150>
 8005dd0:	20000538 	.word	0x20000538
 8005dd4:	200004a0 	.word	0x200004a0
 8005dd8:	20000598 	.word	0x20000598
 8005ddc:	20000544 	.word	0x20000544
 8005de0:	20000548 	.word	0x20000548
 8005de4:	2000054c 	.word	0x2000054c
 8005de8:	20000560 	.word	0x20000560
 8005dec:	20000584 	.word	0x20000584
 8005df0:	200005b0 	.word	0x200005b0
 8005df4:	2000059c 	.word	0x2000059c
 8005df8:	200004a4 	.word	0x200004a4
 8005dfc:	200004a8 	.word	0x200004a8
 8005e00:	200004ac 	.word	0x200004ac

08005e04 <vTaskDelayUntil>:
	{
 8005e04:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8005e06:	b328      	cbz	r0, 8005e54 <vTaskDelayUntil+0x50>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005e08:	b941      	cbnz	r1, 8005e1c <vTaskDelayUntil+0x18>
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	e7fe      	b.n	8005e1a <vTaskDelayUntil+0x16>
		configASSERT( uxSchedulerSuspended == 0 );
 8005e1c:	4c21      	ldr	r4, [pc, #132]	; (8005ea4 <vTaskDelayUntil+0xa0>)
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	bb0b      	cbnz	r3, 8005e66 <vTaskDelayUntil+0x62>
	++uxSchedulerSuspended;
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	6023      	str	r3, [r4, #0]
			const TickType_t xConstTickCount = xTickCount;
 8005e28:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <vTaskDelayUntil+0xa4>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005e2a:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8005e2c:	681d      	ldr	r5, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005e2e:	1853      	adds	r3, r2, r1
 8005e30:	bf2c      	ite	cs
 8005e32:	2101      	movcs	r1, #1
 8005e34:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8005e36:	42aa      	cmp	r2, r5
			*pxPreviousWakeTime = xTimeToWake;
 8005e38:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8005e3a:	d91d      	bls.n	8005e78 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005e3c:	b9e9      	cbnz	r1, 8005e7a <vTaskDelayUntil+0x76>
	configASSERT( uxSchedulerSuspended );
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	bb13      	cbnz	r3, 8005e88 <vTaskDelayUntil+0x84>
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	e7fe      	b.n	8005e52 <vTaskDelayUntil+0x4e>
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8005e64:	e7fe      	b.n	8005e64 <vTaskDelayUntil+0x60>
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
 8005e76:	e7fe      	b.n	8005e76 <vTaskDelayUntil+0x72>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005e78:	b909      	cbnz	r1, 8005e7e <vTaskDelayUntil+0x7a>
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	d2df      	bcs.n	8005e3e <vTaskDelayUntil+0x3a>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005e7e:	2100      	movs	r1, #0
 8005e80:	1b58      	subs	r0, r3, r5
 8005e82:	f7ff fcfd 	bl	8005880 <prvAddCurrentTaskToDelayedList>
 8005e86:	e7da      	b.n	8005e3e <vTaskDelayUntil+0x3a>
 8005e88:	f7ff fdea 	bl	8005a60 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005e8c:	b948      	cbnz	r0, 8005ea2 <vTaskDelayUntil+0x9e>
			portYIELD_WITHIN_API();
 8005e8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e96:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
	}
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	20000540 	.word	0x20000540
 8005ea8:	200005c4 	.word	0x200005c4

08005eac <vTaskDelay>:
	{
 8005eac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005eae:	b950      	cbnz	r0, 8005ec6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	f3bf 8f6f 	isb	sy
	}
 8005ec4:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005ec6:	4c10      	ldr	r4, [pc, #64]	; (8005f08 <vTaskDelay+0x5c>)
 8005ec8:	6821      	ldr	r1, [r4, #0]
 8005eca:	b141      	cbz	r1, 8005ede <vTaskDelay+0x32>
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	e7fe      	b.n	8005edc <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ee4:	f7ff fccc 	bl	8005880 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	b943      	cbnz	r3, 8005efe <vTaskDelay+0x52>
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	e7fe      	b.n	8005efc <vTaskDelay+0x50>
 8005efe:	f7ff fdaf 	bl	8005a60 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d0d4      	beq.n	8005eb0 <vTaskDelay+0x4>
	}
 8005f06:	bd10      	pop	{r4, pc}
 8005f08:	20000540 	.word	0x20000540

08005f0c <vTaskPrioritySet>:
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005f0c:	2906      	cmp	r1, #6
 8005f0e:	d908      	bls.n	8005f22 <vTaskPrioritySet+0x16>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	e7fe      	b.n	8005f20 <vTaskPrioritySet+0x14>
	{
 8005f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f24:	4604      	mov	r4, r0
 8005f26:	b083      	sub	sp, #12
 8005f28:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8005f2a:	f000 ff0b 	bl	8006d44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d036      	beq.n	8005fa0 <vTaskPrioritySet+0x94>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005f32:	6c63      	ldr	r3, [r4, #68]	; 0x44
			if( uxCurrentBasePriority != uxNewPriority )
 8005f34:	429d      	cmp	r5, r3
 8005f36:	d02e      	beq.n	8005f96 <vTaskPrioritySet+0x8a>
					if( pxTCB != pxCurrentTCB )
 8005f38:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <vTaskPrioritySet+0xd8>)
				if( uxNewPriority > uxCurrentBasePriority )
 8005f3a:	d909      	bls.n	8005f50 <vTaskPrioritySet+0x44>
					if( pxTCB != pxCurrentTCB )
 8005f3c:	6811      	ldr	r1, [r2, #0]
 8005f3e:	42a1      	cmp	r1, r4
 8005f40:	d04d      	beq.n	8005fde <vTaskPrioritySet+0xd2>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 8005f46:	42af      	cmp	r7, r5
 8005f48:	bf8c      	ite	hi
 8005f4a:	2700      	movhi	r7, #0
 8005f4c:	2701      	movls	r7, #1
 8005f4e:	e004      	b.n	8005f5a <vTaskPrioritySet+0x4e>
				else if( pxTCB == pxCurrentTCB )
 8005f50:	6817      	ldr	r7, [r2, #0]
 8005f52:	1b3f      	subs	r7, r7, r4
 8005f54:	fab7 f787 	clz	r7, r7
 8005f58:	097f      	lsrs	r7, r7, #5
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 8005f5c:	6465      	str	r5, [r4, #68]	; 0x44
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005f5e:	42b3      	cmp	r3, r6
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f60:	69a3      	ldr	r3, [r4, #24]
						pxTCB->uxPriority = uxNewPriority;
 8005f62:	bf08      	it	eq
 8005f64:	62e5      	streq	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f66:	2b00      	cmp	r3, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f68:	bfa4      	itt	ge
 8005f6a:	f1c5 0507 	rsbge	r5, r5, #7
 8005f6e:	61a5      	strge	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f70:	4d1d      	ldr	r5, [pc, #116]	; (8005fe8 <vTaskPrioritySet+0xdc>)
 8005f72:	6962      	ldr	r2, [r4, #20]
 8005f74:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8005f78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d012      	beq.n	8005fa6 <vTaskPrioritySet+0x9a>
				if( xYieldRequired != pdFALSE )
 8005f80:	b14f      	cbz	r7, 8005f96 <vTaskPrioritySet+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8005f82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	f3bf 8f6f 	isb	sy
	}
 8005f96:	b003      	add	sp, #12
 8005f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		taskEXIT_CRITICAL();
 8005f9c:	f000 bef4 	b.w	8006d88 <vPortExitCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8005fa0:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <vTaskPrioritySet+0xd8>)
 8005fa2:	681c      	ldr	r4, [r3, #0]
 8005fa4:	e7c5      	b.n	8005f32 <vTaskPrioritySet+0x26>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa6:	1d21      	adds	r1, r4, #4
 8005fa8:	4608      	mov	r0, r1
 8005faa:	9101      	str	r1, [sp, #4]
 8005fac:	f7fe fcfe 	bl	80049ac <uxListRemove>
 8005fb0:	9901      	ldr	r1, [sp, #4]
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <vTaskPrioritySet+0xe0>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb4:	b930      	cbnz	r0, 8005fc4 <vTaskPrioritySet+0xb8>
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	fa02 f606 	lsl.w	r6, r2, r6
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	ea22 0206 	bic.w	r2, r2, r6
 8005fc2:	601a      	str	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
 8005fc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fc6:	681c      	ldr	r4, [r3, #0]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4082      	lsls	r2, r0
 8005fcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fd0:	4322      	orrs	r2, r4
 8005fd2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f7fe fcc0 	bl	800495c <vListInsertEnd>
 8005fdc:	e7d0      	b.n	8005f80 <vTaskPrioritySet+0x74>
	BaseType_t xYieldRequired = pdFALSE;
 8005fde:	2700      	movs	r7, #0
 8005fe0:	e7bb      	b.n	8005f5a <vTaskPrioritySet+0x4e>
 8005fe2:	bf00      	nop
 8005fe4:	200004a0 	.word	0x200004a0
 8005fe8:	200004ac 	.word	0x200004ac
 8005fec:	20000548 	.word	0x20000548

08005ff0 <vTaskStartScheduler>:
{
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ff4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005ff8:	f001 f804 	bl	8007004 <pvPortMalloc>
			if( pxStack != NULL )
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d06b      	beq.n	80060d8 <vTaskStartScheduler+0xe8>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006000:	4605      	mov	r5, r0
 8006002:	2054      	movs	r0, #84	; 0x54
 8006004:	f000 fffe 	bl	8007004 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006008:	4604      	mov	r4, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	d061      	beq.n	80060d2 <vTaskStartScheduler+0xe2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800600e:	4b5c      	ldr	r3, [pc, #368]	; (8006180 <vTaskStartScheduler+0x190>)
 8006010:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006012:	1d07      	adds	r7, r0, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006014:	e9c0 530c 	strd	r5, r3, [r0, #48]	; 0x30
		pxNewTCB->uxMutexesHeld = 0;
 8006018:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800601c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006020:	f880 6043 	strb.w	r6, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8006024:	62c6      	str	r6, [r0, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006026:	4638      	mov	r0, r7
 8006028:	f7fe fc94 	bl	8004954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800602c:	f104 0018 	add.w	r0, r4, #24
 8006030:	f7fe fc90 	bl	8004954 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006034:	2307      	movs	r3, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006036:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800603a:	4632      	mov	r2, r6
 800603c:	4951      	ldr	r1, [pc, #324]	; (8006184 <vTaskStartScheduler+0x194>)
		pxNewTCB->ulNotifiedValue = 0;
 800603e:	64e6      	str	r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006040:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006042:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006044:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006046:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800604a:	f020 0007 	bic.w	r0, r0, #7
 800604e:	f000 fe51 	bl	8006cf4 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006052:	4b4d      	ldr	r3, [pc, #308]	; (8006188 <vTaskStartScheduler+0x198>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006054:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006056:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8006058:	f000 fe74 	bl	8006d44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800605c:	4a4b      	ldr	r2, [pc, #300]	; (800618c <vTaskStartScheduler+0x19c>)
		if( pxCurrentTCB == NULL )
 800605e:	4d4c      	ldr	r5, [pc, #304]	; (8006190 <vTaskStartScheduler+0x1a0>)
		uxCurrentNumberOfTasks++;
 8006060:	6813      	ldr	r3, [r2, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006066:	682b      	ldr	r3, [r5, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d05b      	beq.n	8006124 <vTaskStartScheduler+0x134>
			if( xSchedulerRunning == pdFALSE )
 800606c:	4e49      	ldr	r6, [pc, #292]	; (8006194 <vTaskStartScheduler+0x1a4>)
 800606e:	6833      	ldr	r3, [r6, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d03a      	beq.n	80060ea <vTaskStartScheduler+0xfa>
		prvAddTaskToReadyList( pxNewTCB );
 8006074:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006076:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80061c0 <vTaskStartScheduler+0x1d0>
 800607a:	4a47      	ldr	r2, [pc, #284]	; (8006198 <vTaskStartScheduler+0x1a8>)
 800607c:	4639      	mov	r1, r7
		uxTaskNumber++;
 800607e:	4f47      	ldr	r7, [pc, #284]	; (800619c <vTaskStartScheduler+0x1ac>)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006086:	6817      	ldr	r7, [r2, #0]
 8006088:	2301      	movs	r3, #1
 800608a:	4083      	lsls	r3, r0
 800608c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006090:	433b      	orrs	r3, r7
 8006092:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	f7fe fc60 	bl	800495c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800609c:	f000 fe74 	bl	8006d88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	b173      	cbz	r3, 80060c2 <vTaskStartScheduler+0xd2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060a4:	682a      	ldr	r2, [r5, #0]
 80060a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d209      	bcs.n	80060c2 <vTaskStartScheduler+0xd2>
			taskYIELD_IF_USING_PREEMPTION();
 80060ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
 80060c2:	f000 fcf5 	bl	8006ab0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80060c6:	2801      	cmp	r0, #1
 80060c8:	d018      	beq.n	80060fc <vTaskStartScheduler+0x10c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060ca:	3001      	adds	r0, #1
 80060cc:	d004      	beq.n	80060d8 <vTaskStartScheduler+0xe8>
}
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80060d2:	4628      	mov	r0, r5
 80060d4:	f001 f84e 	bl	8007174 <vPortFree>
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060e8:	e7fe      	b.n	80060e8 <vTaskStartScheduler+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80061c0 <vTaskStartScheduler+0x1d0>
 80060f4:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 80060f6:	bf98      	it	ls
 80060f8:	602c      	strls	r4, [r5, #0]
 80060fa:	e7be      	b.n	800607a <vTaskStartScheduler+0x8a>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <vTaskStartScheduler+0x1b0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800610e:	4b25      	ldr	r3, [pc, #148]	; (80061a4 <vTaskStartScheduler+0x1b4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006110:	f04f 31ff 	mov.w	r1, #4294967295
 8006114:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006116:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
 8006118:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800611a:	601a      	str	r2, [r3, #0]
}
 800611c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006120:	f000 bea2 	b.w	8006e68 <xPortStartScheduler>
			pxCurrentTCB = pxNewTCB;
 8006124:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d004      	beq.n	8006136 <vTaskStartScheduler+0x146>
		prvAddTaskToReadyList( pxNewTCB );
 800612c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800612e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80061c0 <vTaskStartScheduler+0x1d0>
 8006132:	4e18      	ldr	r6, [pc, #96]	; (8006194 <vTaskStartScheduler+0x1a4>)
 8006134:	e7a1      	b.n	800607a <vTaskStartScheduler+0x8a>
 8006136:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80061c0 <vTaskStartScheduler+0x1d0>
 800613a:	4646      	mov	r6, r8
 800613c:	f108 098c 	add.w	r9, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006140:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006142:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006144:	f7fe fbfa 	bl	800493c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006148:	45b1      	cmp	r9, r6
 800614a:	d1f9      	bne.n	8006140 <vTaskStartScheduler+0x150>
	vListInitialise( &xDelayedTaskList1 );
 800614c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80061c4 <vTaskStartScheduler+0x1d4>
	vListInitialise( &xDelayedTaskList2 );
 8006150:	4e15      	ldr	r6, [pc, #84]	; (80061a8 <vTaskStartScheduler+0x1b8>)
	vListInitialise( &xDelayedTaskList1 );
 8006152:	4648      	mov	r0, r9
 8006154:	f7fe fbf2 	bl	800493c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006158:	4630      	mov	r0, r6
 800615a:	f7fe fbef 	bl	800493c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800615e:	4813      	ldr	r0, [pc, #76]	; (80061ac <vTaskStartScheduler+0x1bc>)
 8006160:	f7fe fbec 	bl	800493c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006164:	4812      	ldr	r0, [pc, #72]	; (80061b0 <vTaskStartScheduler+0x1c0>)
 8006166:	f7fe fbe9 	bl	800493c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800616a:	4812      	ldr	r0, [pc, #72]	; (80061b4 <vTaskStartScheduler+0x1c4>)
 800616c:	f7fe fbe6 	bl	800493c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <vTaskStartScheduler+0x1c8>)
		prvAddTaskToReadyList( pxNewTCB );
 8006172:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8006174:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006178:	4b10      	ldr	r3, [pc, #64]	; (80061bc <vTaskStartScheduler+0x1cc>)
 800617a:	601e      	str	r6, [r3, #0]
 800617c:	4e05      	ldr	r6, [pc, #20]	; (8006194 <vTaskStartScheduler+0x1a4>)
}
 800617e:	e77c      	b.n	800607a <vTaskStartScheduler+0x8a>
 8006180:	454c4449 	.word	0x454c4449
 8006184:	08005815 	.word	0x08005815
 8006188:	20000574 	.word	0x20000574
 800618c:	20000538 	.word	0x20000538
 8006190:	200004a0 	.word	0x200004a0
 8006194:	20000598 	.word	0x20000598
 8006198:	20000548 	.word	0x20000548
 800619c:	20000544 	.word	0x20000544
 80061a0:	20000578 	.word	0x20000578
 80061a4:	200005c4 	.word	0x200005c4
 80061a8:	20000560 	.word	0x20000560
 80061ac:	20000584 	.word	0x20000584
 80061b0:	200005b0 	.word	0x200005b0
 80061b4:	2000059c 	.word	0x2000059c
 80061b8:	200004a4 	.word	0x200004a4
 80061bc:	200004a8 	.word	0x200004a8
 80061c0:	200004ac 	.word	0x200004ac
 80061c4:	2000054c 	.word	0x2000054c

080061c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80061c8:	4a02      	ldr	r2, [pc, #8]	; (80061d4 <vTaskSuspendAll+0xc>)
 80061ca:	6813      	ldr	r3, [r2, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000540 	.word	0x20000540

080061d8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <xTaskResumeAll+0x1c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	b943      	cbnz	r3, 80061f0 <xTaskResumeAll+0x18>
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	e7fe      	b.n	80061ee <xTaskResumeAll+0x16>
 80061f0:	f7ff bc36 	b.w	8005a60 <xTaskResumeAll.part.0>
 80061f4:	20000540 	.word	0x20000540

080061f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80061f8:	4b01      	ldr	r3, [pc, #4]	; (8006200 <xTaskGetTickCount+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
}
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	200005c4 	.word	0x200005c4

08006204 <xTaskGetTickCountFromISR>:
{
 8006204:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006206:	f000 fecf 	bl	8006fa8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800620a:	4b01      	ldr	r3, [pc, #4]	; (8006210 <xTaskGetTickCountFromISR+0xc>)
 800620c:	6818      	ldr	r0, [r3, #0]
}
 800620e:	bd08      	pop	{r3, pc}
 8006210:	200005c4 	.word	0x200005c4

08006214 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <xTaskIncrementTick+0x18>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b90b      	cbnz	r3, 800621e <xTaskIncrementTick+0xa>
 800621a:	f7ff bb77 	b.w	800590c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800621e:	4a04      	ldr	r2, [pc, #16]	; (8006230 <xTaskIncrementTick+0x1c>)
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	3301      	adds	r3, #1
}
 8006224:	2000      	movs	r0, #0
		++xPendedTicks;
 8006226:	6013      	str	r3, [r2, #0]
}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000540 	.word	0x20000540
 8006230:	20000580 	.word	0x20000580

08006234 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <vTaskSwitchContext+0x5c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	b11b      	cbz	r3, 8006242 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <vTaskSwitchContext+0x60>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006242:	4914      	ldr	r1, [pc, #80]	; (8006294 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006244:	4a14      	ldr	r2, [pc, #80]	; (8006298 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 8006246:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006248:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f1c3 031f 	rsb	r3, r3, #31
 8006254:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006258:	4a10      	ldr	r2, [pc, #64]	; (800629c <vTaskSwitchContext+0x68>)
 800625a:	0099      	lsls	r1, r3, #2
 800625c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006260:	5850      	ldr	r0, [r2, r1]
 8006262:	b940      	cbnz	r0, 8006276 <vTaskSwitchContext+0x42>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	e7fe      	b.n	8006274 <vTaskSwitchContext+0x40>
 8006276:	6858      	ldr	r0, [r3, #4]
 8006278:	3108      	adds	r1, #8
 800627a:	6840      	ldr	r0, [r0, #4]
 800627c:	6058      	str	r0, [r3, #4]
 800627e:	440a      	add	r2, r1
 8006280:	4290      	cmp	r0, r2
 8006282:	bf04      	itt	eq
 8006284:	6840      	ldreq	r0, [r0, #4]
 8006286:	6058      	streq	r0, [r3, #4]
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <vTaskSwitchContext+0x6c>)
 800628a:	68c2      	ldr	r2, [r0, #12]
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	4770      	bx	lr
 8006290:	20000540 	.word	0x20000540
 8006294:	200005c8 	.word	0x200005c8
 8006298:	20000548 	.word	0x20000548
 800629c:	200004ac 	.word	0x200004ac
 80062a0:	200004a0 	.word	0x200004a0

080062a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80062a4:	b320      	cbz	r0, 80062f0 <vTaskPlaceOnEventList+0x4c>
{
 80062a6:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a8:	4d1f      	ldr	r5, [pc, #124]	; (8006328 <vTaskPlaceOnEventList+0x84>)
 80062aa:	460c      	mov	r4, r1
 80062ac:	6829      	ldr	r1, [r5, #0]
 80062ae:	3118      	adds	r1, #24
 80062b0:	f7fe fb64 	bl	800497c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80062b4:	4b1d      	ldr	r3, [pc, #116]	; (800632c <vTaskPlaceOnEventList+0x88>)
 80062b6:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b8:	6828      	ldr	r0, [r5, #0]
 80062ba:	3004      	adds	r0, #4
 80062bc:	f7fe fb76 	bl	80049ac <uxListRemove>
 80062c0:	b940      	cbnz	r0, 80062d4 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	491a      	ldr	r1, [pc, #104]	; (8006330 <vTaskPlaceOnEventList+0x8c>)
 80062c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062c8:	680b      	ldr	r3, [r1, #0]
 80062ca:	2201      	movs	r2, #1
 80062cc:	4082      	lsls	r2, r0
 80062ce:	ea23 0302 	bic.w	r3, r3, r2
 80062d2:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062d4:	1c63      	adds	r3, r4, #1
 80062d6:	d014      	beq.n	8006302 <vTaskPlaceOnEventList+0x5e>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	19a4      	adds	r4, r4, r6
 80062dc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062de:	d317      	bcc.n	8006310 <vTaskPlaceOnEventList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e0:	4b14      	ldr	r3, [pc, #80]	; (8006334 <vTaskPlaceOnEventList+0x90>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	6829      	ldr	r1, [r5, #0]
}
 80062e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ea:	3104      	adds	r1, #4
 80062ec:	f7fe bb46 	b.w	800497c <vListInsert>
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006300:	e7fe      	b.n	8006300 <vTaskPlaceOnEventList+0x5c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006302:	6829      	ldr	r1, [r5, #0]
 8006304:	480c      	ldr	r0, [pc, #48]	; (8006338 <vTaskPlaceOnEventList+0x94>)
}
 8006306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800630a:	3104      	adds	r1, #4
 800630c:	f7fe bb26 	b.w	800495c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <vTaskPlaceOnEventList+0x98>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	6829      	ldr	r1, [r5, #0]
 8006316:	3104      	adds	r1, #4
 8006318:	f7fe fb30 	bl	800497c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <vTaskPlaceOnEventList+0x9c>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8006322:	bf38      	it	cc
 8006324:	601c      	strcc	r4, [r3, #0]
}
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	200004a0 	.word	0x200004a0
 800632c:	200005c4 	.word	0x200005c4
 8006330:	20000548 	.word	0x20000548
 8006334:	200004a8 	.word	0x200004a8
 8006338:	2000059c 	.word	0x2000059c
 800633c:	200004a4 	.word	0x200004a4
 8006340:	20000578 	.word	0x20000578

08006344 <vTaskPlaceOnEventListRestricted>:
	{
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8006346:	2800      	cmp	r0, #0
 8006348:	d044      	beq.n	80063d4 <vTaskPlaceOnEventListRestricted+0x90>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800634a:	4d27      	ldr	r5, [pc, #156]	; (80063e8 <vTaskPlaceOnEventListRestricted+0xa4>)
 800634c:	460c      	mov	r4, r1
 800634e:	6829      	ldr	r1, [r5, #0]
 8006350:	3118      	adds	r1, #24
 8006352:	4616      	mov	r6, r2
 8006354:	f7fe fb02 	bl	800495c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8006358:	4b24      	ldr	r3, [pc, #144]	; (80063ec <vTaskPlaceOnEventListRestricted+0xa8>)
 800635a:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800635c:	6828      	ldr	r0, [r5, #0]
 800635e:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8006360:	b14e      	cbz	r6, 8006376 <vTaskPlaceOnEventListRestricted+0x32>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006362:	f7fe fb23 	bl	80049ac <uxListRemove>
 8006366:	b1a8      	cbz	r0, 8006394 <vTaskPlaceOnEventListRestricted+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006368:	6829      	ldr	r1, [r5, #0]
 800636a:	4821      	ldr	r0, [pc, #132]	; (80063f0 <vTaskPlaceOnEventListRestricted+0xac>)
	}
 800636c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006370:	3104      	adds	r1, #4
 8006372:	f7fe baf3 	b.w	800495c <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006376:	f7fe fb19 	bl	80049ac <uxListRemove>
 800637a:	b168      	cbz	r0, 8006398 <vTaskPlaceOnEventListRestricted+0x54>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	193c      	adds	r4, r7, r4
 8006380:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006382:	d31b      	bcc.n	80063bc <vTaskPlaceOnEventListRestricted+0x78>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <vTaskPlaceOnEventListRestricted+0xb0>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	6829      	ldr	r1, [r5, #0]
	}
 800638a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638e:	3104      	adds	r1, #4
 8006390:	f7fe baf4 	b.w	800497c <vListInsert>
			xTicksToWait = portMAX_DELAY;
 8006394:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	4917      	ldr	r1, [pc, #92]	; (80063f8 <vTaskPlaceOnEventListRestricted+0xb4>)
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	2301      	movs	r3, #1
 80063a0:	fa03 f202 	lsl.w	r2, r3, r2
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	ea23 0302 	bic.w	r3, r3, r2
 80063aa:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063ac:	1c63      	adds	r3, r4, #1
 80063ae:	d1e5      	bne.n	800637c <vTaskPlaceOnEventListRestricted+0x38>
 80063b0:	2e00      	cmp	r6, #0
 80063b2:	d1d9      	bne.n	8006368 <vTaskPlaceOnEventListRestricted+0x24>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	193c      	adds	r4, r7, r4
 80063b8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063ba:	d2e3      	bcs.n	8006384 <vTaskPlaceOnEventListRestricted+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <vTaskPlaceOnEventListRestricted+0xb8>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	6829      	ldr	r1, [r5, #0]
 80063c2:	3104      	adds	r1, #4
 80063c4:	f7fe fada 	bl	800497c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063c8:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <vTaskPlaceOnEventListRestricted+0xbc>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4294      	cmp	r4, r2
 80063ce:	d200      	bcs.n	80063d2 <vTaskPlaceOnEventListRestricted+0x8e>
					xNextTaskUnblockTime = xTimeToWake;
 80063d0:	601c      	str	r4, [r3, #0]
	}
 80063d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80063e4:	e7fe      	b.n	80063e4 <vTaskPlaceOnEventListRestricted+0xa0>
 80063e6:	bf00      	nop
 80063e8:	200004a0 	.word	0x200004a0
 80063ec:	200005c4 	.word	0x200005c4
 80063f0:	2000059c 	.word	0x2000059c
 80063f4:	200004a8 	.word	0x200004a8
 80063f8:	20000548 	.word	0x20000548
 80063fc:	200004a4 	.word	0x200004a4
 8006400:	20000578 	.word	0x20000578

08006404 <xTaskRemoveFromEventList>:
{
 8006404:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006406:	68c3      	ldr	r3, [r0, #12]
 8006408:	68dc      	ldr	r4, [r3, #12]
{
 800640a:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 800640c:	2c00      	cmp	r4, #0
 800640e:	d02c      	beq.n	800646a <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006410:	f104 0518 	add.w	r5, r4, #24
 8006414:	4628      	mov	r0, r5
 8006416:	f7fe fac9 	bl	80049ac <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641a:	4b18      	ldr	r3, [pc, #96]	; (800647c <xTaskRemoveFromEventList+0x78>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	b17b      	cbz	r3, 8006440 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006420:	4817      	ldr	r0, [pc, #92]	; (8006480 <xTaskRemoveFromEventList+0x7c>)
 8006422:	4629      	mov	r1, r5
 8006424:	f7fe fa9a 	bl	800495c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <xTaskRemoveFromEventList+0x80>)
 800642a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006432:	bf85      	ittet	hi
 8006434:	4b14      	ldrhi	r3, [pc, #80]	; (8006488 <xTaskRemoveFromEventList+0x84>)
 8006436:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8006438:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800643a:	6018      	strhi	r0, [r3, #0]
}
 800643c:	b002      	add	sp, #8
 800643e:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006440:	1d21      	adds	r1, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006442:	4d12      	ldr	r5, [pc, #72]	; (800648c <xTaskRemoveFromEventList+0x88>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006444:	9101      	str	r1, [sp, #4]
 8006446:	4608      	mov	r0, r1
 8006448:	f7fe fab0 	bl	80049ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800644c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800644e:	682e      	ldr	r6, [r5, #0]
 8006450:	480f      	ldr	r0, [pc, #60]	; (8006490 <xTaskRemoveFromEventList+0x8c>)
 8006452:	9901      	ldr	r1, [sp, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	409a      	lsls	r2, r3
 8006458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800645c:	4332      	orrs	r2, r6
 800645e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006462:	602a      	str	r2, [r5, #0]
 8006464:	f7fe fa7a 	bl	800495c <vListInsertEnd>
 8006468:	e7de      	b.n	8006428 <xTaskRemoveFromEventList+0x24>
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800647a:	e7fe      	b.n	800647a <xTaskRemoveFromEventList+0x76>
 800647c:	20000540 	.word	0x20000540
 8006480:	20000584 	.word	0x20000584
 8006484:	200004a0 	.word	0x200004a0
 8006488:	200005c8 	.word	0x200005c8
 800648c:	20000548 	.word	0x20000548
 8006490:	200004ac 	.word	0x200004ac

08006494 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006494:	4a03      	ldr	r2, [pc, #12]	; (80064a4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006498:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	e9c0 2300 	strd	r2, r3, [r0]
}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	2000057c 	.word	0x2000057c
 80064a8:	200005c4 	.word	0x200005c4

080064ac <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80064ac:	b328      	cbz	r0, 80064fa <xTaskCheckForTimeOut+0x4e>
{
 80064ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b0:	460d      	mov	r5, r1
 80064b2:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 80064b4:	b1c1      	cbz	r1, 80064e8 <xTaskCheckForTimeOut+0x3c>
 80064b6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80064b8:	f000 fc44 	bl	8006d44 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80064bc:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 80064c0:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80064c2:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80064c4:	d030      	beq.n	8006528 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064c6:	f8df c070 	ldr.w	ip, [pc, #112]	; 8006538 <xTaskCheckForTimeOut+0x8c>
 80064ca:	e9d4 6000 	ldrd	r6, r0, [r4]
 80064ce:	f8dc 7000 	ldr.w	r7, [ip]
 80064d2:	42be      	cmp	r6, r7
 80064d4:	d01a      	beq.n	800650c <xTaskCheckForTimeOut+0x60>
 80064d6:	4288      	cmp	r0, r1
 80064d8:	d818      	bhi.n	800650c <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 80064da:	2001      	movs	r0, #1
 80064dc:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80064de:	f000 fc53 	bl	8006d88 <vPortExitCritical>
}
 80064e2:	9801      	ldr	r0, [sp, #4]
 80064e4:	b003      	add	sp, #12
 80064e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80064f8:	e7fe      	b.n	80064f8 <xTaskCheckForTimeOut+0x4c>
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800650a:	e7fe      	b.n	800650a <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800650c:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006510:	4573      	cmp	r3, lr
 8006512:	d90b      	bls.n	800652c <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8006514:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006516:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800651a:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 800651c:	4403      	add	r3, r0
 800651e:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8006520:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006522:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8006526:	e7d9      	b.n	80064dc <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8006528:	2000      	movs	r0, #0
 800652a:	e7d7      	b.n	80064dc <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006530:	2001      	movs	r0, #1
 8006532:	e7d3      	b.n	80064dc <xTaskCheckForTimeOut+0x30>
 8006534:	200005c4 	.word	0x200005c4
 8006538:	2000057c 	.word	0x2000057c

0800653c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800653c:	4b01      	ldr	r3, [pc, #4]	; (8006544 <vTaskMissedYield+0x8>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	4770      	bx	lr
 8006544:	200005c8 	.word	0x200005c8

08006548 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8006548:	4b01      	ldr	r3, [pc, #4]	; (8006550 <xTaskGetCurrentTaskHandle+0x8>)
 800654a:	6818      	ldr	r0, [r3, #0]
	}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	200004a0 	.word	0x200004a0

08006554 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <xTaskGetSchedulerState+0x18>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	b133      	cbz	r3, 8006568 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <xTaskGetSchedulerState+0x1c>)
 800655c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800655e:	2b00      	cmp	r3, #0
 8006560:	bf0c      	ite	eq
 8006562:	2002      	moveq	r0, #2
 8006564:	2000      	movne	r0, #0
 8006566:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006568:	2001      	movs	r0, #1
	}
 800656a:	4770      	bx	lr
 800656c:	20000598 	.word	0x20000598
 8006570:	20000540 	.word	0x20000540

08006574 <xTaskPriorityInherit>:
	{
 8006574:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8006576:	4604      	mov	r4, r0
	{
 8006578:	b083      	sub	sp, #12
		if( pxMutexHolder != NULL )
 800657a:	b1c8      	cbz	r0, 80065b0 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800657c:	4d22      	ldr	r5, [pc, #136]	; (8006608 <xTaskPriorityInherit+0x94>)
 800657e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006580:	682a      	ldr	r2, [r5, #0]
 8006582:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006584:	4293      	cmp	r3, r2
 8006586:	d215      	bcs.n	80065b4 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006588:	6982      	ldr	r2, [r0, #24]
 800658a:	2a00      	cmp	r2, #0
 800658c:	db04      	blt.n	8006598 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658e:	682a      	ldr	r2, [r5, #0]
 8006590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006592:	f1c2 0207 	rsb	r2, r2, #7
 8006596:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006598:	4e1c      	ldr	r6, [pc, #112]	; (800660c <xTaskPriorityInherit+0x98>)
 800659a:	6962      	ldr	r2, [r4, #20]
 800659c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d00e      	beq.n	80065c6 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80065ae:	2001      	movs	r0, #1
	}
 80065b0:	b003      	add	sp, #12
 80065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	4298      	cmp	r0, r3
 80065bc:	bf2c      	ite	cs
 80065be:	2000      	movcs	r0, #0
 80065c0:	2001      	movcc	r0, #1
	}
 80065c2:	b003      	add	sp, #12
 80065c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c6:	1d21      	adds	r1, r4, #4
 80065c8:	4608      	mov	r0, r1
 80065ca:	9101      	str	r1, [sp, #4]
 80065cc:	f7fe f9ee 	bl	80049ac <uxListRemove>
 80065d0:	9901      	ldr	r1, [sp, #4]
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80065d2:	4a0f      	ldr	r2, [pc, #60]	; (8006610 <xTaskPriorityInherit+0x9c>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065d4:	b930      	cbnz	r0, 80065e4 <xTaskPriorityInherit+0x70>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80065d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80065d8:	6813      	ldr	r3, [r2, #0]
 80065da:	2001      	movs	r0, #1
 80065dc:	40b8      	lsls	r0, r7
 80065de:	ea23 0300 	bic.w	r3, r3, r0
 80065e2:	6013      	str	r3, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065e4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065e6:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80065ea:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065ec:	2401      	movs	r4, #1
 80065ee:	fa04 f300 	lsl.w	r3, r4, r0
 80065f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065f6:	432b      	orrs	r3, r5
 80065f8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	f7fe f9ad 	bl	800495c <vListInsertEnd>
				xReturn = pdTRUE;
 8006602:	4620      	mov	r0, r4
 8006604:	e7d4      	b.n	80065b0 <xTaskPriorityInherit+0x3c>
 8006606:	bf00      	nop
 8006608:	200004a0 	.word	0x200004a0
 800660c:	200004ac 	.word	0x200004ac
 8006610:	20000548 	.word	0x20000548

08006614 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006614:	b320      	cbz	r0, 8006660 <xTaskPriorityDisinherit+0x4c>
	{
 8006616:	b5f0      	push	{r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006618:	4b29      	ldr	r3, [pc, #164]	; (80066c0 <xTaskPriorityDisinherit+0xac>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4283      	cmp	r3, r0
	{
 800661e:	b083      	sub	sp, #12
 8006620:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006622:	d008      	beq.n	8006636 <xTaskPriorityDisinherit+0x22>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	e7fe      	b.n	8006634 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006638:	b14b      	cbz	r3, 800664e <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800663a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800663c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800663e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006640:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006642:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006644:	d000      	beq.n	8006648 <xTaskPriorityDisinherit+0x34>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006646:	b16b      	cbz	r3, 8006664 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8006648:	2000      	movs	r0, #0
	}
 800664a:	b003      	add	sp, #12
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800665e:	e7fe      	b.n	800665e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006660:	2000      	movs	r0, #0
	}
 8006662:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006664:	1d01      	adds	r1, r0, #4
 8006666:	4608      	mov	r0, r1
 8006668:	9101      	str	r1, [sp, #4]
 800666a:	f7fe f99f 	bl	80049ac <uxListRemove>
 800666e:	9901      	ldr	r1, [sp, #4]
 8006670:	b1a0      	cbz	r0, 800669c <xTaskPriorityDisinherit+0x88>
 8006672:	4814      	ldr	r0, [pc, #80]	; (80066c4 <xTaskPriorityDisinherit+0xb0>)
 8006674:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <xTaskPriorityDisinherit+0xb4>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006676:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8006678:	6816      	ldr	r6, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800667a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800667c:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667e:	f1c3 0707 	rsb	r7, r3, #7
 8006682:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006684:	fa05 f403 	lsl.w	r4, r5, r3
 8006688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800668c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006690:	4334      	orrs	r4, r6
 8006692:	6014      	str	r4, [r2, #0]
 8006694:	f7fe f962 	bl	800495c <vListInsertEnd>
					xReturn = pdTRUE;
 8006698:	4628      	mov	r0, r5
		return xReturn;
 800669a:	e7d6      	b.n	800664a <xTaskPriorityDisinherit+0x36>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800669c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800669e:	4809      	ldr	r0, [pc, #36]	; (80066c4 <xTaskPriorityDisinherit+0xb0>)
 80066a0:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <xTaskPriorityDisinherit+0xb4>)
 80066a2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	58c3      	ldr	r3, [r0, r3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e3      	bne.n	8006676 <xTaskPriorityDisinherit+0x62>
 80066ae:	2301      	movs	r3, #1
 80066b0:	fa03 f505 	lsl.w	r5, r3, r5
 80066b4:	6813      	ldr	r3, [r2, #0]
 80066b6:	ea23 0305 	bic.w	r3, r3, r5
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e7db      	b.n	8006676 <xTaskPriorityDisinherit+0x62>
 80066be:	bf00      	nop
 80066c0:	200004a0 	.word	0x200004a0
 80066c4:	200004ac 	.word	0x200004ac
 80066c8:	20000548 	.word	0x20000548

080066cc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d043      	beq.n	8006758 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	{
 80066d0:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 80066d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 80066d4:	b083      	sub	sp, #12
 80066d6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80066d8:	b153      	cbz	r3, 80066f0 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066da:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066de:	4281      	cmp	r1, r0
 80066e0:	bf38      	it	cc
 80066e2:	4601      	movcc	r1, r0
 80066e4:	428a      	cmp	r2, r1
 80066e6:	d001      	beq.n	80066ec <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d00a      	beq.n	8006702 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 80066ec:	b003      	add	sp, #12
 80066ee:	bd30      	pop	{r4, r5, pc}
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006700:	e7fe      	b.n	8006700 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8006702:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	42a3      	cmp	r3, r4
 8006708:	d027      	beq.n	800675a <vTaskPriorityDisinheritAfterTimeout+0x8e>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800670a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800670c:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800670e:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006710:	bfa8      	it	ge
 8006712:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006716:	4d1b      	ldr	r5, [pc, #108]	; (8006784 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006718:	bfa8      	it	ge
 800671a:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800671c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006720:	6961      	ldr	r1, [r4, #20]
 8006722:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8006726:	4299      	cmp	r1, r3
 8006728:	d1e0      	bne.n	80066ec <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800672a:	1d21      	adds	r1, r4, #4
 800672c:	4608      	mov	r0, r1
 800672e:	9101      	str	r1, [sp, #4]
 8006730:	f7fe f93c 	bl	80049ac <uxListRemove>
 8006734:	9901      	ldr	r1, [sp, #4]
 8006736:	b1c8      	cbz	r0, 800676c <vTaskPriorityDisinheritAfterTimeout+0xa0>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006738:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800673c:	2301      	movs	r3, #1
 800673e:	4083      	lsls	r3, r0
						prvAddTaskToReadyList( pxTCB );
 8006740:	6814      	ldr	r4, [r2, #0]
 8006742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006746:	4323      	orrs	r3, r4
 8006748:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800674c:	6013      	str	r3, [r2, #0]
	}
 800674e:	b003      	add	sp, #12
 8006750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8006754:	f7fe b902 	b.w	800495c <vListInsertEnd>
 8006758:	4770      	bx	lr
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800676a:	e7fe      	b.n	800676a <vTaskPriorityDisinheritAfterTimeout+0x9e>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800676c:	4a06      	ldr	r2, [pc, #24]	; (8006788 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800676e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006770:	6814      	ldr	r4, [r2, #0]
 8006772:	2301      	movs	r3, #1
 8006774:	4083      	lsls	r3, r0
 8006776:	ea24 0403 	bic.w	r4, r4, r3
 800677a:	6014      	str	r4, [r2, #0]
 800677c:	e7e0      	b.n	8006740 <vTaskPriorityDisinheritAfterTimeout+0x74>
 800677e:	bf00      	nop
 8006780:	200004a0 	.word	0x200004a0
 8006784:	200004ac 	.word	0x200004ac
 8006788:	20000548 	.word	0x20000548

0800678c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800678c:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <pvTaskIncrementMutexHeldCount+0x14>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	b11a      	cbz	r2, 800679a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006796:	3201      	adds	r2, #1
 8006798:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800679a:	6818      	ldr	r0, [r3, #0]
	}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200004a0 	.word	0x200004a0

080067a4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067a8:	4e22      	ldr	r6, [pc, #136]	; (8006834 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 80067aa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800683c <prvSwitchTimerLists+0x98>
{
 80067ae:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80067b0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b4:	e00d      	b.n	80067d2 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ba:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067bc:	1d25      	adds	r5, r4, #4
 80067be:	4628      	mov	r0, r5
 80067c0:	f7fe f8f4 	bl	80049ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067c4:	6a23      	ldr	r3, [r4, #32]
 80067c6:	4620      	mov	r0, r4
 80067c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80067ce:	075b      	lsls	r3, r3, #29
 80067d0:	d40a      	bmi.n	80067e8 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067d2:	6833      	ldr	r3, [r6, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d1ed      	bne.n	80067b6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <prvSwitchTimerLists+0x94>)
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 80067e0:	6013      	str	r3, [r2, #0]
}
 80067e2:	b005      	add	sp, #20
 80067e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067e8:	69a3      	ldr	r3, [r4, #24]
 80067ea:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80067ec:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ee:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 80067f0:	d205      	bcs.n	80067fe <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f2:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067f4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f8:	f7fe f8c0 	bl	800497c <vListInsert>
 80067fc:	e7e9      	b.n	80067d2 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 80067fe:	f8d9 3000 	ldr.w	r3, [r9]
 8006802:	b16b      	cbz	r3, 8006820 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006804:	e9cd 8701 	strd	r8, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006808:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800680a:	f7ff fea3 	bl	8006554 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800680e:	2300      	movs	r3, #0
 8006810:	f8d9 0000 	ldr.w	r0, [r9]
 8006814:	461a      	mov	r2, r3
 8006816:	a901      	add	r1, sp, #4
 8006818:	f7fe f954 	bl	8004ac4 <xQueueGenericSend>
				configASSERT( xResult );
 800681c:	2800      	cmp	r0, #0
 800681e:	d1d8      	bne.n	80067d2 <prvSwitchTimerLists+0x2e>
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	e7fe      	b.n	8006830 <prvSwitchTimerLists+0x8c>
 8006832:	bf00      	nop
 8006834:	200005cc 	.word	0x200005cc
 8006838:	200005d0 	.word	0x200005d0
 800683c:	20000600 	.word	0x20000600

08006840 <prvTimerTask>:
{
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	4e96      	ldr	r6, [pc, #600]	; (8006aa0 <prvTimerTask+0x260>)
 8006846:	4d97      	ldr	r5, [pc, #604]	; (8006aa4 <prvTimerTask+0x264>)
 8006848:	4c97      	ldr	r4, [pc, #604]	; (8006aa8 <prvTimerTask+0x268>)
 800684a:	b089      	sub	sp, #36	; 0x24
					portYIELD_WITHIN_API();
 800684c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8006850:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	681f      	ldr	r7, [r3, #0]
 8006858:	2f00      	cmp	r7, #0
 800685a:	f000 809f 	beq.w	800699c <prvTimerTask+0x15c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8006862:	f7ff fcb1 	bl	80061c8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006866:	f7ff fcc7 	bl	80061f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800686a:	682a      	ldr	r2, [r5, #0]
 800686c:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 800686e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006870:	f200 80a5 	bhi.w	80069be <prvTimerTask+0x17e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006874:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8006876:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006878:	f240 80ab 	bls.w	80069d2 <prvTimerTask+0x192>
 800687c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	eba7 010a 	sub.w	r1, r7, sl
 8006884:	f7fe ff62 	bl	800574c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006888:	f7ff fca6 	bl	80061d8 <xTaskResumeAll>
 800688c:	b928      	cbnz	r0, 800689a <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 800688e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800689a:	6820      	ldr	r0, [r4, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	a902      	add	r1, sp, #8
 80068a0:	f7fe fb80 	bl	8004fa4 <xQueueReceive>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d0d5      	beq.n	8006854 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dbf5      	blt.n	800689a <prvTimerTask+0x5a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068ae:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	b113      	cbz	r3, 80068ba <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068b4:	1d38      	adds	r0, r7, #4
 80068b6:	f7fe f879 	bl	80049ac <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80068ba:	f7ff fc9d 	bl	80061f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80068c2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80068c4:	f0c0 8082 	bcc.w	80069cc <prvTimerTask+0x18c>
			switch( xMessage.xMessageID )
 80068c8:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80068ca:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 80068ce:	2b09      	cmp	r3, #9
 80068d0:	d8e3      	bhi.n	800689a <prvTimerTask+0x5a>
 80068d2:	e8df f003 	tbb	[pc, r3]
 80068d6:	0505      	.short	0x0505
 80068d8:	5a3d5305 	.word	0x5a3d5305
 80068dc:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068e4:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e6:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	1899      	adds	r1, r3, r2
 80068f4:	bf2c      	ite	cs
 80068f6:	2001      	movcs	r0, #1
 80068f8:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80068fa:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068fc:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80068fe:	f200 8083 	bhi.w	8006a08 <prvTimerTask+0x1c8>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006902:	ebaa 0303 	sub.w	r3, sl, r3
 8006906:	429a      	cmp	r2, r3
 8006908:	d832      	bhi.n	8006970 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	4638      	mov	r0, r7
 800690e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006910:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006914:	075b      	lsls	r3, r3, #29
 8006916:	d5c0      	bpl.n	800689a <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	b183      	cbz	r3, 800693e <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 800691c:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800691e:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8006920:	9205      	str	r2, [sp, #20]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006922:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006924:	9707      	str	r7, [sp, #28]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006926:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006928:	9306      	str	r3, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800692a:	f7ff fe13 	bl	8006554 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800692e:	2300      	movs	r3, #0
 8006930:	6820      	ldr	r0, [r4, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	a905      	add	r1, sp, #20
 8006936:	f7fe f8c5 	bl	8004ac4 <xQueueGenericSend>
							configASSERT( xResult );
 800693a:	2800      	cmp	r0, #0
 800693c:	d1ad      	bne.n	800689a <prvTimerTask+0x5a>
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	e7fe      	b.n	800694e <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006950:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800695c:	9b03      	ldr	r3, [sp, #12]
 800695e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8094 	beq.w	8006a8e <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006966:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8006968:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800696a:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800696c:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800696e:	d855      	bhi.n	8006a1c <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006970:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <prvTimerTask+0x26c>)
 8006972:	1d39      	adds	r1, r7, #4
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f7fe f801 	bl	800497c <vListInsert>
	return xProcessTimerNow;
 800697a:	e78e      	b.n	800689a <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800697c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8006988:	e787      	b.n	800689a <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800698a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800698e:	079a      	lsls	r2, r3, #30
 8006990:	d549      	bpl.n	8006a26 <prvTimerTask+0x1e6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800699a:	e77e      	b.n	800689a <prvTimerTask+0x5a>
	vTaskSuspendAll();
 800699c:	f7ff fc14 	bl	80061c8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80069a0:	f7ff fc2a 	bl	80061f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80069a4:	682a      	ldr	r2, [r5, #0]
 80069a6:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 80069a8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80069aa:	d808      	bhi.n	80069be <prvTimerTask+0x17e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069ac:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 80069ae:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	fab2 f282 	clz	r2, r2
 80069ba:	0952      	lsrs	r2, r2, #5
 80069bc:	e75f      	b.n	800687e <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 80069be:	f7ff fef1 	bl	80067a4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80069c2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80069c6:	f7ff fc07 	bl	80061d8 <xTaskResumeAll>
 80069ca:	e766      	b.n	800689a <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 80069cc:	f7ff feea 	bl	80067a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069d0:	e77a      	b.n	80068c8 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 80069d2:	f7ff fc01 	bl	80061d8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	6832      	ldr	r2, [r6, #0]
 80069d8:	68d2      	ldr	r2, [r2, #12]
 80069da:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069de:	f10b 0104 	add.w	r1, fp, #4
 80069e2:	4608      	mov	r0, r1
 80069e4:	9101      	str	r1, [sp, #4]
 80069e6:	f7fd ffe1 	bl	80049ac <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ea:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 80069ee:	9901      	ldr	r1, [sp, #4]
 80069f0:	f010 0f04 	tst.w	r0, #4
 80069f4:	d11b      	bne.n	8006a2e <prvTimerTask+0x1ee>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069f6:	f020 0001 	bic.w	r0, r0, #1
 80069fa:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069fe:	f8db 3020 	ldr.w	r3, [fp, #32]
 8006a02:	4658      	mov	r0, fp
 8006a04:	4798      	blx	r3
}
 8006a06:	e748      	b.n	800689a <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a08:	4553      	cmp	r3, sl
 8006a0a:	d902      	bls.n	8006a12 <prvTimerTask+0x1d2>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f43f af7c 	beq.w	800690a <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a12:	6830      	ldr	r0, [r6, #0]
 8006a14:	1d39      	adds	r1, r7, #4
 8006a16:	f7fd ffb1 	bl	800497c <vListInsert>
	return xProcessTimerNow;
 8006a1a:	e73e      	b.n	800689a <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a1c:	6830      	ldr	r0, [r6, #0]
 8006a1e:	1d39      	adds	r1, r7, #4
 8006a20:	f7fd ffac 	bl	800497c <vListInsert>
 8006a24:	e739      	b.n	800689a <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8006a26:	4638      	mov	r0, r7
 8006a28:	f000 fba4 	bl	8007174 <vPortFree>
 8006a2c:	e735      	b.n	800689a <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a2e:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a32:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a36:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8006a38:	4550      	cmp	r0, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a3a:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006a3e:	d903      	bls.n	8006a48 <prvTimerTask+0x208>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a40:	6830      	ldr	r0, [r6, #0]
 8006a42:	f7fd ff9b 	bl	800497c <vListInsert>
	return xProcessTimerNow;
 8006a46:	e7da      	b.n	80069fe <prvTimerTask+0x1be>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a48:	ebaa 0307 	sub.w	r3, sl, r7
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d819      	bhi.n	8006a84 <prvTimerTask+0x244>
	if( xTimerQueue != NULL )
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	b173      	cbz	r3, 8006a72 <prvTimerTask+0x232>
		xMessage.xMessageID = xCommandID;
 8006a54:	2300      	movs	r3, #0
 8006a56:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a58:	9706      	str	r7, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a5a:	f8cd b01c 	str.w	fp, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a5e:	f7ff fd79 	bl	8006554 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a62:	2300      	movs	r3, #0
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	a905      	add	r1, sp, #20
 8006a6a:	f7fe f82b 	bl	8004ac4 <xQueueGenericSend>
			configASSERT( xResult );
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d1c5      	bne.n	80069fe <prvTimerTask+0x1be>
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	e7fe      	b.n	8006a82 <prvTimerTask+0x242>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <prvTimerTask+0x26c>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	f7fd ff78 	bl	800497c <vListInsert>
	return xProcessTimerNow;
 8006a8c:	e7b7      	b.n	80069fe <prvTimerTask+0x1be>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a9e:	e7fe      	b.n	8006a9e <prvTimerTask+0x25e>
 8006aa0:	200005cc 	.word	0x200005cc
 8006aa4:	200005fc 	.word	0x200005fc
 8006aa8:	20000600 	.word	0x20000600
 8006aac:	200005d0 	.word	0x200005d0

08006ab0 <xTimerCreateTimerTask>:
{
 8006ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006ab2:	4c1c      	ldr	r4, [pc, #112]	; (8006b24 <xTimerCreateTimerTask+0x74>)
{
 8006ab4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8006ab6:	f000 f945 	bl	8006d44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	b1d5      	cbz	r5, 8006af4 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006abe:	f000 f963 	bl	8006d88 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	b15b      	cbz	r3, 8006ade <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <xTimerCreateTimerTask+0x78>)
 8006ac8:	4918      	ldr	r1, [pc, #96]	; (8006b2c <xTimerCreateTimerTask+0x7c>)
 8006aca:	4819      	ldr	r0, [pc, #100]	; (8006b30 <xTimerCreateTimerTask+0x80>)
 8006acc:	2302      	movs	r3, #2
 8006ace:	e9cd 3200 	strd	r3, r2, [sp]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ad8:	f7ff f864 	bl	8005ba4 <xTaskCreate>
	configASSERT( xReturn );
 8006adc:	b940      	cbnz	r0, 8006af0 <xTimerCreateTimerTask+0x40>
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	e7fe      	b.n	8006aee <xTimerCreateTimerTask+0x3e>
}
 8006af0:	b003      	add	sp, #12
 8006af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 8006af4:	4f0f      	ldr	r7, [pc, #60]	; (8006b34 <xTimerCreateTimerTask+0x84>)
			vListInitialise( &xActiveTimerList2 );
 8006af6:	4e10      	ldr	r6, [pc, #64]	; (8006b38 <xTimerCreateTimerTask+0x88>)
			vListInitialise( &xActiveTimerList1 );
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7fd ff1f 	bl	800493c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7fd ff1c 	bl	800493c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b04:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <xTimerCreateTimerTask+0x8c>)
 8006b06:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <xTimerCreateTimerTask+0x90>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006b0a:	462a      	mov	r2, r5
 8006b0c:	210c      	movs	r1, #12
 8006b0e:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8006b10:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006b12:	f7fd ff9b 	bl	8004a4c <xQueueGenericCreate>
 8006b16:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d0d0      	beq.n	8006abe <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b1c:	4909      	ldr	r1, [pc, #36]	; (8006b44 <xTimerCreateTimerTask+0x94>)
 8006b1e:	f7fe fded 	bl	80056fc <vQueueAddToRegistry>
 8006b22:	e7cc      	b.n	8006abe <xTimerCreateTimerTask+0xe>
 8006b24:	20000600 	.word	0x20000600
 8006b28:	20000604 	.word	0x20000604
 8006b2c:	08009ebc 	.word	0x08009ebc
 8006b30:	08006841 	.word	0x08006841
 8006b34:	200005d4 	.word	0x200005d4
 8006b38:	200005e8 	.word	0x200005e8
 8006b3c:	200005cc 	.word	0x200005cc
 8006b40:	200005d0 	.word	0x200005d0
 8006b44:	08009eb4 	.word	0x08009eb4

08006b48 <xTimerCreate>:
	{
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006b50:	2028      	movs	r0, #40	; 0x28
	{
 8006b52:	4688      	mov	r8, r1
 8006b54:	4616      	mov	r6, r2
 8006b56:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006b58:	f000 fa54 	bl	8007004 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	b1e8      	cbz	r0, 8006b9c <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b66:	f1b8 0f00 	cmp.w	r8, #0
 8006b6a:	d01b      	beq.n	8006ba4 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 8006b6c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8006c00 <xTimerCreate+0xb8>
	taskENTER_CRITICAL();
 8006b70:	f000 f8e8 	bl	8006d44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006b74:	f8da 2000 	ldr.w	r2, [sl]
 8006b78:	b1ea      	cbz	r2, 8006bb6 <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 8006b7a:	f000 f905 	bl	8006d88 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 8006b80:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8006b82:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006b86:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006b88:	1d20      	adds	r0, r4, #4
 8006b8a:	f7fd fee3 	bl	8004954 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006b8e:	b12e      	cbz	r6, 8006b9c <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006b90:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006b94:	f043 0304 	orr.w	r3, r3, #4
 8006b98:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	b003      	add	sp, #12
 8006ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006bb4:	e7fe      	b.n	8006bb4 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 8006bb6:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8006c04 <xTimerCreate+0xbc>
			vListInitialise( &xActiveTimerList2 );
 8006bba:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8006c08 <xTimerCreate+0xc0>
 8006bbe:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
 8006bc0:	4658      	mov	r0, fp
 8006bc2:	f7fd febb 	bl	800493c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bc6:	4648      	mov	r0, r9
 8006bc8:	f7fd feb8 	bl	800493c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bcc:	4809      	ldr	r0, [pc, #36]	; (8006bf4 <xTimerCreate+0xac>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006bce:	490a      	ldr	r1, [pc, #40]	; (8006bf8 <xTimerCreate+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 8006bd0:	f8c0 b000 	str.w	fp, [r0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bd4:	f8c1 9000 	str.w	r9, [r1]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	210c      	movs	r1, #12
 8006bdc:	200a      	movs	r0, #10
 8006bde:	f7fd ff35 	bl	8004a4c <xQueueGenericCreate>
 8006be2:	f8ca 0000 	str.w	r0, [sl]
				if( xTimerQueue != NULL )
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d0c7      	beq.n	8006b7a <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bea:	4904      	ldr	r1, [pc, #16]	; (8006bfc <xTimerCreate+0xb4>)
 8006bec:	f7fe fd86 	bl	80056fc <vQueueAddToRegistry>
 8006bf0:	e7c3      	b.n	8006b7a <xTimerCreate+0x32>
 8006bf2:	bf00      	nop
 8006bf4:	200005cc 	.word	0x200005cc
 8006bf8:	200005d0 	.word	0x200005d0
 8006bfc:	08009eb4 	.word	0x08009eb4
 8006c00:	20000600 	.word	0x20000600
 8006c04:	200005d4 	.word	0x200005d4
 8006c08:	200005e8 	.word	0x200005e8

08006c0c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006c0c:	b1c0      	cbz	r0, 8006c40 <xTimerGenericCommand+0x34>
{
 8006c0e:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8006c10:	4d18      	ldr	r5, [pc, #96]	; (8006c74 <xTimerGenericCommand+0x68>)
 8006c12:	682c      	ldr	r4, [r5, #0]
{
 8006c14:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8006c16:	b184      	cbz	r4, 8006c3a <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c18:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8006c1a:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c1e:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c20:	dc17      	bgt.n	8006c52 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c22:	f7ff fc97 	bl	8006554 <xTaskGetSchedulerState>
 8006c26:	2802      	cmp	r0, #2
 8006c28:	d01c      	beq.n	8006c64 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6828      	ldr	r0, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	a901      	add	r1, sp, #4
 8006c32:	f7fd ff47 	bl	8004ac4 <xQueueGenericSend>
}
 8006c36:	b005      	add	sp, #20
 8006c38:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8006c3a:	4620      	mov	r0, r4
}
 8006c3c:	b005      	add	sp, #20
 8006c3e:	bd30      	pop	{r4, r5, pc}
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006c50:	e7fe      	b.n	8006c50 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c52:	469c      	mov	ip, r3
 8006c54:	4662      	mov	r2, ip
 8006c56:	2300      	movs	r3, #0
 8006c58:	a901      	add	r1, sp, #4
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7fe f8e4 	bl	8004e28 <xQueueGenericSendFromISR>
}
 8006c60:	b005      	add	sp, #20
 8006c62:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c64:	6828      	ldr	r0, [r5, #0]
 8006c66:	9a08      	ldr	r2, [sp, #32]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	a901      	add	r1, sp, #4
 8006c6c:	f7fd ff2a 	bl	8004ac4 <xQueueGenericSend>
 8006c70:	e7e4      	b.n	8006c3c <xTimerGenericCommand+0x30>
 8006c72:	bf00      	nop
 8006c74:	20000600 	.word	0x20000600

08006c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c78:	4808      	ldr	r0, [pc, #32]	; (8006c9c <prvPortStartFirstTask+0x24>)
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f380 8808 	msr	MSP, r0
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8814 	msr	CONTROL, r0
 8006c8a:	b662      	cpsie	i
 8006c8c:	b661      	cpsie	f
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	df00      	svc	0
 8006c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c9a:	0000      	.short	0x0000
 8006c9c:	e000ed08 	.word	0xe000ed08

08006ca0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ca0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cb0 <vPortEnableVFP+0x10>
 8006ca4:	6801      	ldr	r1, [r0, #0]
 8006ca6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006caa:	6001      	str	r1, [r0, #0]
 8006cac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cae:	0000      	.short	0x0000
 8006cb0:	e000ed88 	.word	0xe000ed88

08006cb4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <prvTaskExitError+0x3c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
{
 8006cb8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006cba:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006cbc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8006cbe:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006cc0:	d008      	beq.n	8006cd4 <prvTaskExitError+0x20>
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	e7fe      	b.n	8006cd2 <prvTaskExitError+0x1e>
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006ce4:	9b01      	ldr	r3, [sp, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0fc      	beq.n	8006ce4 <prvTaskExitError+0x30>
}
 8006cea:	b002      	add	sp, #8
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000000c 	.word	0x2000000c

08006cf4 <pxPortInitialiseStack>:
{
 8006cf4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cfa:	4c07      	ldr	r4, [pc, #28]	; (8006d18 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cfc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d00:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d04:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d08:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d0c:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8006d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d14:	3844      	subs	r0, #68	; 0x44
 8006d16:	4770      	bx	lr
 8006d18:	08006cb5 	.word	0x08006cb5
 8006d1c:	00000000 	.word	0x00000000

08006d20 <SVC_Handler>:
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	4770      	bx	lr
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst2>:
 8006d40:	200004a0 	.word	0x200004a0

08006d44 <vPortEnterCritical>:
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006d54:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <vPortEnterCritical+0x40>)
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006d5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006d5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006d5e:	d000      	beq.n	8006d62 <vPortEnterCritical+0x1e>
}
 8006d60:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d66:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f7      	beq.n	8006d60 <vPortEnterCritical+0x1c>
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	e7fe      	b.n	8006d80 <vPortEnterCritical+0x3c>
 8006d82:	bf00      	nop
 8006d84:	2000000c 	.word	0x2000000c

08006d88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006d88:	4a08      	ldr	r2, [pc, #32]	; (8006dac <vPortExitCritical+0x24>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b943      	cbnz	r3, 8006da0 <vPortExitCritical+0x18>
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	e7fe      	b.n	8006d9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006da0:	3b01      	subs	r3, #1
 8006da2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006da4:	b90b      	cbnz	r3, 8006daa <vPortExitCritical+0x22>
	__asm volatile
 8006da6:	f383 8811 	msr	BASEPRI, r3
}
 8006daa:	4770      	bx	lr
 8006dac:	2000000c 	.word	0x2000000c

08006db0 <PendSV_Handler>:
	__asm volatile
 8006db0:	f3ef 8009 	mrs	r0, PSP
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <pxCurrentTCBConst>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f01e 0f10 	tst.w	lr, #16
 8006dc0:	bf08      	it	eq
 8006dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	6010      	str	r0, [r2, #0]
 8006dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dd4:	f380 8811 	msr	BASEPRI, r0
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f7ff fa28 	bl	8006234 <vTaskSwitchContext>
 8006de4:	f04f 0000 	mov.w	r0, #0
 8006de8:	f380 8811 	msr	BASEPRI, r0
 8006dec:	bc09      	pop	{r0, r3}
 8006dee:	6819      	ldr	r1, [r3, #0]
 8006df0:	6808      	ldr	r0, [r1, #0]
 8006df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df6:	f01e 0f10 	tst.w	lr, #16
 8006dfa:	bf08      	it	eq
 8006dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e00:	f380 8809 	msr	PSP, r0
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	f3af 8000 	nop.w

08006e10 <pxCurrentTCBConst>:
 8006e10:	200004a0 	.word	0x200004a0

08006e14 <SysTick_Handler>:
{
 8006e14:	b508      	push	{r3, lr}
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006e26:	f7ff f9f5 	bl	8006214 <xTaskIncrementTick>
 8006e2a:	b128      	cbz	r0, 8006e38 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f383 8811 	msr	BASEPRI, r3
}
 8006e3e:	bd08      	pop	{r3, pc}

08006e40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e40:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006e44:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e46:	4906      	ldr	r1, [pc, #24]	; (8006e60 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e48:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e4a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e4c:	680b      	ldr	r3, [r1, #0]
 8006e4e:	4805      	ldr	r0, [pc, #20]	; (8006e64 <vPortSetupTimerInterrupt+0x24>)
 8006e50:	fba0 0303 	umull	r0, r3, r0, r3
 8006e54:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e56:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e5c:	6111      	str	r1, [r2, #16]
}
 8006e5e:	4770      	bx	lr
 8006e60:	20000000 	.word	0x20000000
 8006e64:	10624dd3 	.word	0x10624dd3

08006e68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e6c:	4a48      	ldr	r2, [pc, #288]	; (8006f90 <xPortStartScheduler+0x128>)
 8006e6e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8006e72:	4291      	cmp	r1, r2
 8006e74:	d041      	beq.n	8006efa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e76:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006e7a:	4b46      	ldr	r3, [pc, #280]	; (8006f94 <xPortStartScheduler+0x12c>)
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d033      	beq.n	8006ee8 <xPortStartScheduler+0x80>
{
 8006e80:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e82:	4b45      	ldr	r3, [pc, #276]	; (8006f98 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e84:	4c45      	ldr	r4, [pc, #276]	; (8006f9c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e86:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e88:	4845      	ldr	r0, [pc, #276]	; (8006fa0 <xPortStartScheduler+0x138>)
{
 8006e8a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e8c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e92:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ea0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ea8:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eaa:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eac:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006eae:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eb0:	bf48      	it	mi
 8006eb2:	2206      	movmi	r2, #6
 8006eb4:	d50f      	bpl.n	8006ed6 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ec6:	061b      	lsls	r3, r3, #24
 8006ec8:	4611      	mov	r1, r2
 8006eca:	f102 32ff 	add.w	r2, r2, #4294967295
 8006ece:	d4f2      	bmi.n	8006eb6 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ed0:	2903      	cmp	r1, #3
 8006ed2:	d01b      	beq.n	8006f0c <xPortStartScheduler+0xa4>
 8006ed4:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	e7fe      	b.n	8006ee6 <xPortStartScheduler+0x7e>
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ef8:	e7fe      	b.n	8006ef8 <xPortStartScheduler+0x90>
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f0a:	e7fe      	b.n	8006f0a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f0c:	9b02      	ldr	r3, [sp, #8]
 8006f0e:	4a22      	ldr	r2, [pc, #136]	; (8006f98 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8006f10:	4d24      	ldr	r5, [pc, #144]	; (8006fa4 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f12:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f16:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f1a:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f1c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f1e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f20:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f28:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f2c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006f30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f34:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8006f38:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8006f3a:	f7ff ff81 	bl	8006e40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006f3e:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8006f40:	f7ff feae 	bl	8006ca0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f44:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006f48:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f4c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006f50:	f7ff fe92 	bl	8006c78 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006f54:	f7ff f96e 	bl	8006234 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8006f58:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8006f5a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	d008      	beq.n	8006f72 <xPortStartScheduler+0x10a>
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	e7fe      	b.n	8006f70 <xPortStartScheduler+0x108>
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0fc      	beq.n	8006f82 <xPortStartScheduler+0x11a>
}
 8006f88:	2000      	movs	r0, #0
 8006f8a:	b004      	add	sp, #16
 8006f8c:	bd70      	pop	{r4, r5, r6, pc}
 8006f8e:	bf00      	nop
 8006f90:	410fc271 	.word	0x410fc271
 8006f94:	410fc270 	.word	0x410fc270
 8006f98:	e000e400 	.word	0xe000e400
 8006f9c:	20000608 	.word	0x20000608
 8006fa0:	2000060c 	.word	0x2000060c
 8006fa4:	2000000c 	.word	0x2000000c

08006fa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d90e      	bls.n	8006fce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fb0:	4911      	ldr	r1, [pc, #68]	; (8006ff8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fb2:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fb4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fb6:	7812      	ldrb	r2, [r2, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d908      	bls.n	8006fce <vPortValidateInterruptPriority+0x26>
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	e7fe      	b.n	8006fcc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006fd2:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <vPortValidateInterruptPriority+0x58>)
 8006fd4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d908      	bls.n	8006ff4 <vPortValidateInterruptPriority+0x4c>
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	e7fe      	b.n	8006ff2 <vPortValidateInterruptPriority+0x4a>
	}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	e000e3f0 	.word	0xe000e3f0
 8006ffc:	20000608 	.word	0x20000608
 8007000:	2000060c 	.word	0x2000060c

08007004 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800700a:	f7ff f8dd 	bl	80061c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800700e:	4b52      	ldr	r3, [pc, #328]	; (8007158 <pvPortMalloc+0x154>)
 8007010:	681d      	ldr	r5, [r3, #0]
 8007012:	2d00      	cmp	r5, #0
 8007014:	d06e      	beq.n	80070f4 <pvPortMalloc+0xf0>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007016:	4b51      	ldr	r3, [pc, #324]	; (800715c <pvPortMalloc+0x158>)
 8007018:	681f      	ldr	r7, [r3, #0]
 800701a:	423e      	tst	r6, r7
 800701c:	d12e      	bne.n	800707c <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800701e:	b36e      	cbz	r6, 800707c <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8007020:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007024:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007026:	bf1c      	itt	ne
 8007028:	f024 0407 	bicne.w	r4, r4, #7
 800702c:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800702e:	b32c      	cbz	r4, 800707c <pvPortMalloc+0x78>
 8007030:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8007170 <pvPortMalloc+0x16c>
 8007034:	f8dc 6000 	ldr.w	r6, [ip]
 8007038:	42a6      	cmp	r6, r4
 800703a:	d31f      	bcc.n	800707c <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800703c:	4848      	ldr	r0, [pc, #288]	; (8007160 <pvPortMalloc+0x15c>)
 800703e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007040:	e003      	b.n	800704a <pvPortMalloc+0x46>
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	b122      	cbz	r2, 8007050 <pvPortMalloc+0x4c>
 8007046:	4618      	mov	r0, r3
 8007048:	4613      	mov	r3, r2
 800704a:	6859      	ldr	r1, [r3, #4]
 800704c:	42a1      	cmp	r1, r4
 800704e:	d3f8      	bcc.n	8007042 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007050:	42ab      	cmp	r3, r5
 8007052:	d013      	beq.n	800707c <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007054:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007056:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007058:	f858 eb08 	ldr.w	lr, [r8], #8
 800705c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007060:	2a10      	cmp	r2, #16
 8007062:	d929      	bls.n	80070b8 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007064:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007066:	0748      	lsls	r0, r1, #29
 8007068:	d00f      	beq.n	800708a <pvPortMalloc+0x86>
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	e7fe      	b.n	800707a <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800707c:	f7ff f8ac 	bl	80061d8 <xTaskResumeAll>
 8007080:	f04f 0800 	mov.w	r8, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8007084:	4640      	mov	r0, r8
 8007086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800708a:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800708c:	4a34      	ldr	r2, [pc, #208]	; (8007160 <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
 800708e:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007090:	4614      	mov	r4, r2
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	4291      	cmp	r1, r2
 8007096:	d8fb      	bhi.n	8007090 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007098:	6860      	ldr	r0, [r4, #4]
 800709a:	eb04 0e00 	add.w	lr, r4, r0
 800709e:	4571      	cmp	r1, lr
 80070a0:	d04a      	beq.n	8007138 <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070a2:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80070a6:	eb01 000e 	add.w	r0, r1, lr
 80070aa:	4282      	cmp	r2, r0
 80070ac:	d04b      	beq.n	8007146 <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070ae:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070b0:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070b2:	bf18      	it	ne
 80070b4:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070b6:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070b8:	4a2a      	ldr	r2, [pc, #168]	; (8007164 <pvPortMalloc+0x160>)
 80070ba:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070bc:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070be:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070c0:	bf38      	it	cc
 80070c2:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 80070c4:	4a28      	ldr	r2, [pc, #160]	; (8007168 <pvPortMalloc+0x164>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070c6:	f8cc 6000 	str.w	r6, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ca:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 80070cc:	2000      	movs	r0, #0
 80070ce:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80070d8:	f7ff f87e 	bl	80061d8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070dc:	f018 0f07 	tst.w	r8, #7
 80070e0:	d0d0      	beq.n	8007084 <pvPortMalloc+0x80>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	e7fe      	b.n	80070f2 <pvPortMalloc+0xee>
	uxAddress = ( size_t ) ucHeap;
 80070f4:	491d      	ldr	r1, [pc, #116]	; (800716c <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070f6:	4c19      	ldr	r4, [pc, #100]	; (800715c <pvPortMalloc+0x158>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070f8:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070fa:	bf14      	ite	ne
 80070fc:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070fe:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007100:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
	uxAddress -= xHeapStructSize;
 8007104:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007108:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800710c:	bf18      	it	ne
 800710e:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007112:	4914      	ldr	r1, [pc, #80]	; (8007164 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8007114:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007116:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007118:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800711a:	4a15      	ldr	r2, [pc, #84]	; (8007170 <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800711c:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800711e:	4910      	ldr	r1, [pc, #64]	; (8007160 <pvPortMalloc+0x15c>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007120:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007122:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8007126:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007128:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800712a:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800712c:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800712e:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007132:	e9c0 5300 	strd	r5, r3, [r0]
}
 8007136:	e770      	b.n	800701a <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007138:	6849      	ldr	r1, [r1, #4]
 800713a:	eb00 0e01 	add.w	lr, r0, r1
 800713e:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8007142:	4621      	mov	r1, r4
 8007144:	e7af      	b.n	80070a6 <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007146:	42aa      	cmp	r2, r5
 8007148:	d0b1      	beq.n	80070ae <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800714a:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007150:	4470      	add	r0, lr
 8007152:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007154:	e7ac      	b.n	80070b0 <pvPortMalloc+0xac>
 8007156:	bf00      	nop
 8007158:	20000610 	.word	0x20000610
 800715c:	20010614 	.word	0x20010614
 8007160:	20010628 	.word	0x20010628
 8007164:	2001061c 	.word	0x2001061c
 8007168:	20010620 	.word	0x20010620
 800716c:	20000614 	.word	0x20000614
 8007170:	20010618 	.word	0x20010618

08007174 <vPortFree>:
	if( pv != NULL )
 8007174:	b1d0      	cbz	r0, 80071ac <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007176:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <vPortFree+0xb0>)
 8007178:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800717c:	6812      	ldr	r2, [r2, #0]
 800717e:	4213      	tst	r3, r2
 8007180:	d00b      	beq.n	800719a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007182:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007186:	b191      	cbz	r1, 80071ae <vPortFree+0x3a>
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	e7fe      	b.n	8007198 <vPortFree+0x24>
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071aa:	e7fe      	b.n	80071aa <vPortFree+0x36>
 80071ac:	4770      	bx	lr
{
 80071ae:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071b0:	ea23 0302 	bic.w	r3, r3, r2
{
 80071b4:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071b6:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071ba:	4c1b      	ldr	r4, [pc, #108]	; (8007228 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071bc:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80071be:	f7ff f803 	bl	80061c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071c2:	9801      	ldr	r0, [sp, #4]
 80071c4:	6822      	ldr	r2, [r4, #0]
 80071c6:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071ca:	4b18      	ldr	r3, [pc, #96]	; (800722c <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071cc:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 80071ce:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071d0:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071d2:	461a      	mov	r2, r3
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4298      	cmp	r0, r3
 80071d8:	d8fb      	bhi.n	80071d2 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071da:	6854      	ldr	r4, [r2, #4]
 80071dc:	eb02 0e04 	add.w	lr, r2, r4
 80071e0:	4570      	cmp	r0, lr
 80071e2:	d01a      	beq.n	800721a <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071e4:	eb00 0c01 	add.w	ip, r0, r1
 80071e8:	4563      	cmp	r3, ip
 80071ea:	d00c      	beq.n	8007206 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071ec:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80071ee:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f0:	bf18      	it	ne
 80071f2:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80071f4:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <vPortFree+0xbc>)
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	3301      	adds	r3, #1
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	b002      	add	sp, #8
 80071fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007202:	f7fe bfe9 	b.w	80061d8 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007206:	4c0b      	ldr	r4, [pc, #44]	; (8007234 <vPortFree+0xc0>)
 8007208:	6824      	ldr	r4, [r4, #0]
 800720a:	42a3      	cmp	r3, r4
 800720c:	d0ee      	beq.n	80071ec <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720e:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007212:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007214:	e9c0 3100 	strd	r3, r1, [r0]
 8007218:	e7e9      	b.n	80071ee <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800721a:	4421      	add	r1, r4
 800721c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800721e:	4610      	mov	r0, r2
 8007220:	e7e0      	b.n	80071e4 <vPortFree+0x70>
 8007222:	bf00      	nop
 8007224:	20010614 	.word	0x20010614
 8007228:	20010618 	.word	0x20010618
 800722c:	20010628 	.word	0x20010628
 8007230:	20010624 	.word	0x20010624
 8007234:	20000610 	.word	0x20000610

08007238 <t_bus_send>:
#	define LOG(str, ...)
#	define LOG_E(str, ...)
#endif	//if DEBUG_BUS==1

void t_bus_send(void const *argument)
{
 8007238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static Camera_t _cam = { .busy = 0 };
	static Lrf_t _lrf = { .busy = 0 };

	*(uint8_t*) &_cam.command = 0;
	*(uint8_t*) &_cam.state = 0;
	*(uint8_t*) &_lrf.command = 0;
 800723c:	4c30      	ldr	r4, [pc, #192]	; (8007300 <t_bus_send+0xc8>)
	*(uint8_t*) &_cam.command = 0;
 800723e:	4f31      	ldr	r7, [pc, #196]	; (8007304 <t_bus_send+0xcc>)
 8007240:	4d31      	ldr	r5, [pc, #196]	; (8007308 <t_bus_send+0xd0>)
 8007242:	4e32      	ldr	r6, [pc, #200]	; (800730c <t_bus_send+0xd4>)
 8007244:	2300      	movs	r3, #0
{
 8007246:	b093      	sub	sp, #76	; 0x4c
	*(uint8_t*) &_cam.command = 0;
 8007248:	803b      	strh	r3, [r7, #0]
	*(uint8_t*) &_lrf.command = 0;
 800724a:	7023      	strb	r3, [r4, #0]

	_lrf.state.lrf_enable = 0;
 800724c:	70a3      	strb	r3, [r4, #2]
	_lrf.state.value.counter = _lrf.state.value.d[0] = _lrf.state.value.d[1] =
			_lrf.state.value.d[2] = 0;
 800724e:	8163      	strh	r3, [r4, #10]
	_lrf.state.value.counter = _lrf.state.value.d[0] = _lrf.state.value.d[1] =
 8007250:	f8c4 3006 	str.w	r3, [r4, #6]
 8007254:	7123      	strb	r3, [r4, #4]

	LOG("S: created!\r\n");
 8007256:	f7fd f8ab 	bl	80043b0 <osKernelSysTick>
 800725a:	2226      	movs	r2, #38	; 0x26
 800725c:	4601      	mov	r1, r0
 800725e:	482c      	ldr	r0, [pc, #176]	; (8007310 <t_bus_send+0xd8>)
 8007260:	f001 fc68 	bl	8008b34 <iprintf>

	while (g_camera_ready == 0 || g_lrf_ready == 0) {
 8007264:	e008      	b.n	8007278 <t_bus_send+0x40>
		osDelay(100);
 8007266:	f7fd f8d3 	bl	8004410 <osDelay>
		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 800726a:	2002      	movs	r0, #2
 800726c:	f7f9 faac 	bl	80007c8 <opt_get_queue>
 8007270:	2200      	movs	r2, #0
 8007272:	2108      	movs	r1, #8
 8007274:	f7fd f9da 	bl	800462c <osMessagePut>
	while (g_camera_ready == 0 || g_lrf_ready == 0) {
 8007278:	782b      	ldrb	r3, [r5, #0]
		osDelay(100);
 800727a:	2064      	movs	r0, #100	; 0x64
	while (g_camera_ready == 0 || g_lrf_ready == 0) {
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f2      	beq.n	8007266 <t_bus_send+0x2e>
 8007280:	7833      	ldrb	r3, [r6, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0ef      	beq.n	8007266 <t_bus_send+0x2e>
	}

	osDelay(T_Bus_Send_id);
 8007286:	2008      	movs	r0, #8
 8007288:	f7fd f8c2 	bl	8004410 <osDelay>
	uint8_t data[64];
	for ( ;; ) {
		osDelayUntil(&PreviousWakeTime, 100);

		/* get value from mutex */
		if (cam_read(&_cam, 10) == osOK)
 800728c:	4e1d      	ldr	r6, [pc, #116]	; (8007304 <t_bus_send+0xcc>)
			data[0] = *(uint8_t*) &_cam.state;

		if (lrf_read(&_lrf, 10) == osOK) {
 800728e:	4d1c      	ldr	r5, [pc, #112]	; (8007300 <t_bus_send+0xc8>)
		osDelayUntil(&PreviousWakeTime, 100);
 8007290:	2164      	movs	r1, #100	; 0x64
 8007292:	a801      	add	r0, sp, #4
 8007294:	f7fd fb3e 	bl	8004914 <osDelayUntil>
		if (cam_read(&_cam, 10) == osOK)
 8007298:	210a      	movs	r1, #10
 800729a:	4630      	mov	r0, r6
 800729c:	f000 fb44 	bl	8007928 <cam_read>
 80072a0:	4603      	mov	r3, r0
		if (lrf_read(&_lrf, 10) == osOK) {
 80072a2:	210a      	movs	r1, #10
 80072a4:	4628      	mov	r0, r5
		if (cam_read(&_cam, 10) == osOK)
 80072a6:	b913      	cbnz	r3, 80072ae <t_bus_send+0x76>
			data[0] = *(uint8_t*) &_cam.state;
 80072a8:	787b      	ldrb	r3, [r7, #1]
 80072aa:	f88d 3008 	strb.w	r3, [sp, #8]
		if (lrf_read(&_lrf, 10) == osOK) {
 80072ae:	f000 fc85 	bl	8007bbc <lrf_read>
 80072b2:	4603      	mov	r3, r0
				data[3 + (i * 2)] = _lrf.state.value.d[i] & 0xFF;
			}
		}

		/* Start the Transmission process */
		hal_bus_send(data);
 80072b4:	a802      	add	r0, sp, #8
		if (lrf_read(&_lrf, 10) == osOK) {
 80072b6:	b9c3      	cbnz	r3, 80072ea <t_bus_send+0xb2>
				data[2 + (i * 2)] = _lrf.state.value.d[i] >> 8;
 80072b8:	88e1      	ldrh	r1, [r4, #6]
 80072ba:	8922      	ldrh	r2, [r4, #8]
 80072bc:	8963      	ldrh	r3, [r4, #10]
			data[1] = _lrf.state.value.counter;
 80072be:	f894 9004 	ldrb.w	r9, [r4, #4]
 80072c2:	f88d 9009 	strb.w	r9, [sp, #9]
				data[2 + (i * 2)] = _lrf.state.value.d[i] >> 8;
 80072c6:	ea4f 2811 	mov.w	r8, r1, lsr #8
 80072ca:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 80072ce:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80072d2:	f88d 800a 	strb.w	r8, [sp, #10]
				data[3 + (i * 2)] = _lrf.state.value.d[i] & 0xFF;
 80072d6:	f88d 100b 	strb.w	r1, [sp, #11]
				data[2 + (i * 2)] = _lrf.state.value.d[i] >> 8;
 80072da:	f88d e00c 	strb.w	lr, [sp, #12]
				data[3 + (i * 2)] = _lrf.state.value.d[i] & 0xFF;
 80072de:	f88d 200d 	strb.w	r2, [sp, #13]
				data[2 + (i * 2)] = _lrf.state.value.d[i] >> 8;
 80072e2:	f88d c00e 	strb.w	ip, [sp, #14]
				data[3 + (i * 2)] = _lrf.state.value.d[i] & 0xFF;
 80072e6:	f88d 300f 	strb.w	r3, [sp, #15]
		hal_bus_send(data);
 80072ea:	f001 fad9 	bl	80088a0 <hal_bus_send>
		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 80072ee:	2002      	movs	r0, #2
 80072f0:	f7f9 fa6a 	bl	80007c8 <opt_get_queue>
 80072f4:	2200      	movs	r2, #0
 80072f6:	2108      	movs	r1, #8
 80072f8:	f7fd f998 	bl	800462c <osMessagePut>
		osDelayUntil(&PreviousWakeTime, 100);
 80072fc:	e7c8      	b.n	8007290 <t_bus_send+0x58>
 80072fe:	bf00      	nop
 8007300:	20010648 	.word	0x20010648
 8007304:	20010634 	.word	0x20010634
 8007308:	20010674 	.word	0x20010674
 800730c:	20010675 	.word	0x20010675
 8007310:	08009ec4 	.word	0x08009ec4

08007314 <t_bus_recv>:
	}
	/* USER CODE END t_bus_send */
}

void t_bus_recv(void const *argument)
{
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static Lrf_t _lrf = { .busy = 0 };
	uint16_t managerNotif = T_Bus_Recv_id;

	*(uint8_t*) &_cam.command = 0;
	*(uint8_t*) &_cam.state = 0;
	*(uint8_t*) &_lrf.command = 0;
 8007318:	4d41      	ldr	r5, [pc, #260]	; (8007420 <t_bus_recv+0x10c>)
	*(uint8_t*) &_cam.command = 0;
 800731a:	4e42      	ldr	r6, [pc, #264]	; (8007424 <t_bus_recv+0x110>)
 800731c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007434 <t_bus_recv+0x120>
 8007320:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8007438 <t_bus_recv+0x124>
			osMailFree(opt_get_bus_mail(), pRMail);
			/* toggle led indicator */
			HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
		}
		else if (event.status == osEventTimeout)
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8007324:	4c40      	ldr	r4, [pc, #256]	; (8007428 <t_bus_recv+0x114>)
				LOG("new lrf cmd: 0x%X x 0x%X\r\n", pRMail->data[3], *(uint8_t* ) &_lrf.command);
 8007326:	f8df a114 	ldr.w	sl, [pc, #276]	; 800743c <t_bus_recv+0x128>
	*(uint8_t*) &_cam.command = 0;
 800732a:	2300      	movs	r3, #0
{
 800732c:	b087      	sub	sp, #28
	*(uint8_t*) &_cam.command = 0;
 800732e:	8033      	strh	r3, [r6, #0]
	*(uint8_t*) &_lrf.command = 0;
 8007330:	702b      	strb	r3, [r5, #0]
			_lrf.state.value.d[2] = 0;
 8007332:	816b      	strh	r3, [r5, #10]
	_lrf.state.value.counter = _lrf.state.value.d[0] = _lrf.state.value.d[1] =
 8007334:	f8c5 3006 	str.w	r3, [r5, #6]
 8007338:	712b      	strb	r3, [r5, #4]
	LOG("R created!\r\n");
 800733a:	f7fd f839 	bl	80043b0 <osKernelSysTick>
 800733e:	2258      	movs	r2, #88	; 0x58
 8007340:	4601      	mov	r1, r0
 8007342:	483a      	ldr	r0, [pc, #232]	; (800742c <t_bus_recv+0x118>)
 8007344:	f001 fbf6 	bl	8008b34 <iprintf>
	hal_bus_init();
 8007348:	f001 fa84 	bl	8008854 <hal_bus_init>
	osDelay(1);
 800734c:	2001      	movs	r0, #1
 800734e:	f7fd f85f 	bl	8004410 <osDelay>
 8007352:	e008      	b.n	8007366 <t_bus_recv+0x52>
		else if (event.status == osEventTimeout)
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d02d      	beq.n	80073b4 <t_bus_recv+0xa0>

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 8007358:	2002      	movs	r0, #2
 800735a:	f7f9 fa35 	bl	80007c8 <opt_get_queue>
 800735e:	2200      	movs	r2, #0
 8007360:	2101      	movs	r1, #1
 8007362:	f7fd f963 	bl	800462c <osMessagePut>
		osEvent event = osMailGet(opt_get_bus_mail(), BUS_MAX_TIMEOUT);
 8007366:	f7f9 fa55 	bl	8000814 <opt_get_bus_mail>
 800736a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800736e:	4601      	mov	r1, r0
 8007370:	a803      	add	r0, sp, #12
 8007372:	f7fd fa6f 	bl	8004854 <osMailGet>
 8007376:	9b03      	ldr	r3, [sp, #12]
		if (event.status == osEventMail) {
 8007378:	2b20      	cmp	r3, #32
 800737a:	d1eb      	bne.n	8007354 <t_bus_recv+0x40>
			pRMail = event.value.p;
 800737c:	9f04      	ldr	r7, [sp, #16]
			if ((*(uint8_t*) &_cam.command != pRMail->data[1]) && (cam_is_busy() == 0)) {
 800737e:	7832      	ldrb	r2, [r6, #0]
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	429a      	cmp	r2, r3
 8007384:	d003      	beq.n	800738e <t_bus_recv+0x7a>
 8007386:	f000 fac9 	bl	800791c <cam_is_busy>
 800738a:	4683      	mov	fp, r0
 800738c:	b380      	cbz	r0, 80073f0 <t_bus_recv+0xdc>
			if ((*(uint8_t*) &_lrf.command != pRMail->data[3]) && (lrf_is_busy() == 0)) {
 800738e:	782a      	ldrb	r2, [r5, #0]
 8007390:	7a7b      	ldrb	r3, [r7, #9]
 8007392:	429a      	cmp	r2, r3
 8007394:	d003      	beq.n	800739e <t_bus_recv+0x8a>
 8007396:	f000 fc0b 	bl	8007bb0 <lrf_is_busy>
 800739a:	4683      	mov	fp, r0
 800739c:	b188      	cbz	r0, 80073c2 <t_bus_recv+0xae>
			osMailFree(opt_get_bus_mail(), pRMail);
 800739e:	f7f9 fa39 	bl	8000814 <opt_get_bus_mail>
 80073a2:	4639      	mov	r1, r7
 80073a4:	f7fd fa98 	bl	80048d8 <osMailFree>
			HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 80073a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7fa ffaf 	bl	8002310 <HAL_GPIO_TogglePin>
 80073b2:	e7d1      	b.n	8007358 <t_bus_recv+0x44>
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80073b4:	2201      	movs	r2, #1
 80073b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7fa ffa2 	bl	8002304 <HAL_GPIO_WritePin>
 80073c0:	e7ca      	b.n	8007358 <t_bus_recv+0x44>
				LOG("new lrf cmd: 0x%X x 0x%X\r\n", pRMail->data[3], *(uint8_t* ) &_lrf.command);
 80073c2:	f7fc fff5 	bl	80043b0 <osKernelSysTick>
 80073c6:	782a      	ldrb	r2, [r5, #0]
 80073c8:	7a7b      	ldrb	r3, [r7, #9]
 80073ca:	9200      	str	r2, [sp, #0]
 80073cc:	4601      	mov	r1, r0
 80073ce:	2271      	movs	r2, #113	; 0x71
 80073d0:	4650      	mov	r0, sl
 80073d2:	f001 fbaf 	bl	8008b34 <iprintf>
				if (g_lrf_ready == 1) {
 80073d6:	f898 0000 	ldrb.w	r0, [r8]
 80073da:	2801      	cmp	r0, #1
 80073dc:	d1df      	bne.n	800739e <t_bus_recv+0x8a>
					osMessagePut(opt_get_queue(Q_LRF_NOTIF), pRMail->data[3], 0);
 80073de:	f7f9 f9f3 	bl	80007c8 <opt_get_queue>
 80073e2:	7a79      	ldrb	r1, [r7, #9]
 80073e4:	465a      	mov	r2, fp
 80073e6:	f7fd f921 	bl	800462c <osMessagePut>
					*(uint8_t*) &_lrf.command = pRMail->data[3];
 80073ea:	7a7b      	ldrb	r3, [r7, #9]
 80073ec:	702b      	strb	r3, [r5, #0]
 80073ee:	e7d6      	b.n	800739e <t_bus_recv+0x8a>
				LOG("new cam cmd: 0x%X x 0x%X\r\n", pRMail->data[1], *(uint8_t* ) &_cam.command);
 80073f0:	f7fc ffde 	bl	80043b0 <osKernelSysTick>
 80073f4:	7832      	ldrb	r2, [r6, #0]
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	9200      	str	r2, [sp, #0]
 80073fa:	4601      	mov	r1, r0
 80073fc:	2268      	movs	r2, #104	; 0x68
 80073fe:	480c      	ldr	r0, [pc, #48]	; (8007430 <t_bus_recv+0x11c>)
 8007400:	f001 fb98 	bl	8008b34 <iprintf>
				if (g_camera_ready == 1) {
 8007404:	f899 3000 	ldrb.w	r3, [r9]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d1c0      	bne.n	800738e <t_bus_recv+0x7a>
					osMessagePut(opt_get_queue(Q_CAMERA_NOTIF), pRMail->data[1], 0);
 800740c:	4658      	mov	r0, fp
 800740e:	f7f9 f9db 	bl	80007c8 <opt_get_queue>
 8007412:	79f9      	ldrb	r1, [r7, #7]
 8007414:	465a      	mov	r2, fp
 8007416:	f7fd f909 	bl	800462c <osMessagePut>
					*(uint8_t*) &_cam.command = pRMail->data[1];
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	7033      	strb	r3, [r6, #0]
 800741e:	e7b6      	b.n	800738e <t_bus_recv+0x7a>
 8007420:	20010638 	.word	0x20010638
 8007424:	20010630 	.word	0x20010630
 8007428:	48000400 	.word	0x48000400
 800742c:	08009ee0 	.word	0x08009ee0
 8007430:	08009efc 	.word	0x08009efc
 8007434:	20010674 	.word	0x20010674
 8007438:	20010675 	.word	0x20010675
 800743c:	08009f28 	.word	0x08009f28

08007440 <cam_timer_stop>:
	osTimerStart(opt_get_timer(Tim_Camera_Timeout_id), 10000);
	LOG("timer start\r\n");
}

static void cam_timer_stop()
{
 8007440:	b508      	push	{r3, lr}
	osTimerStop(opt_get_timer(Tim_Camera_Notif_id));
 8007442:	2000      	movs	r0, #0
 8007444:	f7f9 f9a4 	bl	8000790 <opt_get_timer>
 8007448:	f7fd f82c 	bl	80044a4 <osTimerStop>
	osTimerStop(opt_get_timer(Tim_Camera_Timeout_id));
 800744c:	2001      	movs	r0, #1
 800744e:	f7f9 f99f 	bl	8000790 <opt_get_timer>
 8007452:	f7fd f827 	bl	80044a4 <osTimerStop>
	LOG("timer stop\r\n");
 8007456:	f7fc ffab 	bl	80043b0 <osKernelSysTick>
}
 800745a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG("timer stop\r\n");
 800745e:	4601      	mov	r1, r0
 8007460:	2239      	movs	r2, #57	; 0x39
 8007462:	4801      	ldr	r0, [pc, #4]	; (8007468 <cam_timer_stop+0x28>)
 8007464:	f001 bb66 	b.w	8008b34 <iprintf>
 8007468:	08009f54 	.word	0x08009f54

0800746c <cam_timer_start>:
{
 800746c:	b508      	push	{r3, lr}
	osTimerStart(opt_get_timer(Tim_Camera_Notif_id), 500);
 800746e:	2000      	movs	r0, #0
 8007470:	f7f9 f98e 	bl	8000790 <opt_get_timer>
 8007474:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007478:	f7fc ffe6 	bl	8004448 <osTimerStart>
	osTimerStart(opt_get_timer(Tim_Camera_Timeout_id), 10000);
 800747c:	2001      	movs	r0, #1
 800747e:	f7f9 f987 	bl	8000790 <opt_get_timer>
 8007482:	f242 7110 	movw	r1, #10000	; 0x2710
 8007486:	f7fc ffdf 	bl	8004448 <osTimerStart>
	LOG("timer start\r\n");
 800748a:	f7fc ff91 	bl	80043b0 <osKernelSysTick>
}
 800748e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG("timer start\r\n");
 8007492:	4601      	mov	r1, r0
 8007494:	2232      	movs	r2, #50	; 0x32
 8007496:	4801      	ldr	r0, [pc, #4]	; (800749c <cam_timer_start+0x30>)
 8007498:	f001 bb4c 	b.w	8008b34 <iprintf>
 800749c:	08009f70 	.word	0x08009f70

080074a0 <cam_select>:
	camera_power = &tbt_power;
	camera_set_video_mode = &tbt_set_video_mode;
}

static void cam_select(const uint8_t cam_num)
{
 80074a0:	b570      	push	{r4, r5, r6, lr}
	if (cam_num == CAM_SELECT_DAY) {
 80074a2:	b348      	cbz	r0, 80074f8 <cam_select+0x58>
		/* sony cam power on */
		camera_power(1);
	}
	else if (cam_num == CAM_SELECT_THERMAL) {
		/* sony cam power off */
		camera_power(0);
 80074a4:	4c28      	ldr	r4, [pc, #160]	; (8007548 <cam_select+0xa8>)
	camera_auto_focus_start = &tbt_auto_focus_start;
 80074a6:	4d29      	ldr	r5, [pc, #164]	; (800754c <cam_select+0xac>)
		camera_power(0);
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	2000      	movs	r0, #0
 80074ac:	4798      	blx	r3
		HAL_GPIO_WritePin(THERMAL_ENABLE_GPIO_Port, THERMAL_ENABLE_Pin, GPIO_PIN_SET);
 80074ae:	2201      	movs	r2, #1
 80074b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074b8:	f7fa ff24 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAMERA_SELECT_GPIO_Port, CAMERA_SELECT_Pin, GPIO_PIN_SET);
 80074bc:	4824      	ldr	r0, [pc, #144]	; (8007550 <cam_select+0xb0>)
 80074be:	2201      	movs	r2, #1
 80074c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074c4:	f7fa ff1e 	bl	8002304 <HAL_GPIO_WritePin>
	camera_zoom_direct = &tbt_zoom;
 80074c8:	4b22      	ldr	r3, [pc, #136]	; (8007554 <cam_select+0xb4>)
	camera_auto_focus_start = &tbt_auto_focus_start;
 80074ca:	4823      	ldr	r0, [pc, #140]	; (8007558 <cam_select+0xb8>)
	camera_man_focus_near_speed_start = &tbt_man_focus_near_speed_start;
 80074cc:	4923      	ldr	r1, [pc, #140]	; (800755c <cam_select+0xbc>)
	camera_zoom_direct = &tbt_zoom;
 80074ce:	4a24      	ldr	r2, [pc, #144]	; (8007560 <cam_select+0xc0>)
 80074d0:	601a      	str	r2, [r3, #0]
	camera_auto_focus_start = &tbt_auto_focus_start;
 80074d2:	6005      	str	r5, [r0, #0]
	camera_man_focus_far_speed_start = &tbt_man_focus_far_speed_start;
 80074d4:	4b23      	ldr	r3, [pc, #140]	; (8007564 <cam_select+0xc4>)
	camera_man_focus_near_speed_start = &tbt_man_focus_near_speed_start;
 80074d6:	4824      	ldr	r0, [pc, #144]	; (8007568 <cam_select+0xc8>)
 80074d8:	6008      	str	r0, [r1, #0]
	camera_man_focus_stop = &tbt_man_focus_stop;
 80074da:	4a24      	ldr	r2, [pc, #144]	; (800756c <cam_select+0xcc>)
	camera_man_focus_far_speed_start = &tbt_man_focus_far_speed_start;
 80074dc:	4824      	ldr	r0, [pc, #144]	; (8007570 <cam_select+0xd0>)
 80074de:	6018      	str	r0, [r3, #0]
	camera_man_focus_stop = &tbt_man_focus_stop;
 80074e0:	4924      	ldr	r1, [pc, #144]	; (8007574 <cam_select+0xd4>)
	camera_power = &tbt_power;
 80074e2:	4b25      	ldr	r3, [pc, #148]	; (8007578 <cam_select+0xd8>)
 80074e4:	6023      	str	r3, [r4, #0]
	camera_man_focus_stop = &tbt_man_focus_stop;
 80074e6:	6011      	str	r1, [r2, #0]
		cam_tbt_selected();
		camera_init();
 80074e8:	f001 f926 	bl	8008738 <tbt_init>
		/* todo wait comm to ready */
		HAL_Delay(5000);
//		camera_set_video_mode(1);
//		cam_thermal_start_timer = osKernelSysTick() + 60000;
	}
}
 80074ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_Delay(5000);
 80074f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80074f4:	f7f9 b994 	b.w	8000820 <HAL_Delay>
 80074f8:	4604      	mov	r4, r0
		HAL_GPIO_WritePin(CAMERA_SELECT_GPIO_Port, CAMERA_SELECT_Pin, GPIO_PIN_RESET);
 80074fa:	4622      	mov	r2, r4
 80074fc:	4814      	ldr	r0, [pc, #80]	; (8007550 <cam_select+0xb0>)
	camera_auto_focus_start = &sony_auto_focus_start;
 80074fe:	4d1f      	ldr	r5, [pc, #124]	; (800757c <cam_select+0xdc>)
		HAL_GPIO_WritePin(CAMERA_SELECT_GPIO_Port, CAMERA_SELECT_Pin, GPIO_PIN_RESET);
 8007500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007504:	f7fa fefe 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(THERMAL_ENABLE_GPIO_Port, THERMAL_ENABLE_Pin, GPIO_PIN_RESET);
 8007508:	4622      	mov	r2, r4
 800750a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800750e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007512:	f7fa fef7 	bl	8002304 <HAL_GPIO_WritePin>
	camera_zoom_direct = &sony_zoom;
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <cam_select+0xb4>)
	camera_auto_focus_start = &sony_auto_focus_start;
 8007518:	480f      	ldr	r0, [pc, #60]	; (8007558 <cam_select+0xb8>)
	camera_man_focus_near_speed_start = &sony_man_focus_near_speed_start;
 800751a:	4910      	ldr	r1, [pc, #64]	; (800755c <cam_select+0xbc>)
	camera_zoom_direct = &sony_zoom;
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <cam_select+0xe0>)
 800751e:	601a      	str	r2, [r3, #0]
	camera_auto_focus_start = &sony_auto_focus_start;
 8007520:	6005      	str	r5, [r0, #0]
	camera_man_focus_far_speed_start = &sony_man_focus_far_speed_start;
 8007522:	4b10      	ldr	r3, [pc, #64]	; (8007564 <cam_select+0xc4>)
	camera_man_focus_near_speed_start = &sony_man_focus_near_speed_start;
 8007524:	4817      	ldr	r0, [pc, #92]	; (8007584 <cam_select+0xe4>)
	camera_power = &sony_power;
 8007526:	4c08      	ldr	r4, [pc, #32]	; (8007548 <cam_select+0xa8>)
	camera_man_focus_near_speed_start = &sony_man_focus_near_speed_start;
 8007528:	6008      	str	r0, [r1, #0]
	camera_man_focus_stop = &sony_man_focus_stop;
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <cam_select+0xcc>)
	camera_man_focus_far_speed_start = &sony_man_focus_far_speed_start;
 800752c:	4816      	ldr	r0, [pc, #88]	; (8007588 <cam_select+0xe8>)
 800752e:	6018      	str	r0, [r3, #0]
	camera_man_focus_stop = &sony_man_focus_stop;
 8007530:	4916      	ldr	r1, [pc, #88]	; (800758c <cam_select+0xec>)
	camera_power = &sony_power;
 8007532:	4b17      	ldr	r3, [pc, #92]	; (8007590 <cam_select+0xf0>)
 8007534:	6023      	str	r3, [r4, #0]
	camera_man_focus_stop = &sony_man_focus_stop;
 8007536:	6011      	str	r1, [r2, #0]
		camera_init();
 8007538:	f001 f820 	bl	800857c <sony_init>
		camera_power(1);
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	2001      	movs	r0, #1
}
 8007540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		camera_power(1);
 8007544:	4718      	bx	r3
 8007546:	bf00      	nop
 8007548:	2001066c 	.word	0x2001066c
 800754c:	0800877d 	.word	0x0800877d
 8007550:	48000800 	.word	0x48000800
 8007554:	20010670 	.word	0x20010670
 8007558:	20010658 	.word	0x20010658
 800755c:	20010664 	.word	0x20010664
 8007560:	08008745 	.word	0x08008745
 8007564:	20010660 	.word	0x20010660
 8007568:	080087ad 	.word	0x080087ad
 800756c:	20010668 	.word	0x20010668
 8007570:	080087e1 	.word	0x080087e1
 8007574:	08008815 	.word	0x08008815
 8007578:	08008845 	.word	0x08008845
 800757c:	080085e5 	.word	0x080085e5
 8007580:	080085a5 	.word	0x080085a5
 8007584:	08008619 	.word	0x08008619
 8007588:	08008661 	.word	0x08008661
 800758c:	080086a9 	.word	0x080086a9
 8007590:	080086dd 	.word	0x080086dd

08007594 <osTimerCameraNotifCallback>:
{
 8007594:	b508      	push	{r3, lr}
	osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 8007596:	2002      	movs	r0, #2
 8007598:	f7f9 f916 	bl	80007c8 <opt_get_queue>
}
 800759c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 80075a0:	2200      	movs	r2, #0
 80075a2:	2102      	movs	r1, #2
 80075a4:	f7fd b842 	b.w	800462c <osMessagePut>

080075a8 <osTimerCameraTimeoutCallback>:
{
 80075a8:	b508      	push	{r3, lr}
	osTimerStop(opt_get_timer(Tim_Camera_Notif_id));
 80075aa:	2000      	movs	r0, #0
 80075ac:	f7f9 f8f0 	bl	8000790 <opt_get_timer>
 80075b0:	f7fc ff78 	bl	80044a4 <osTimerStop>
	osTimerStop(opt_get_timer(Tim_Camera_Timeout_id));
 80075b4:	2001      	movs	r0, #1
 80075b6:	f7f9 f8eb 	bl	8000790 <opt_get_timer>
 80075ba:	f7fc ff73 	bl	80044a4 <osTimerStop>
	LOG("timer stop\r\n");
 80075be:	f7fc fef7 	bl	80043b0 <osKernelSysTick>
 80075c2:	2239      	movs	r2, #57	; 0x39
 80075c4:	4601      	mov	r1, r0
 80075c6:	4804      	ldr	r0, [pc, #16]	; (80075d8 <osTimerCameraTimeoutCallback+0x30>)
 80075c8:	f001 fab4 	bl	8008b34 <iprintf>
}
 80075cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_E("timeout!\r\n");
 80075d0:	4802      	ldr	r0, [pc, #8]	; (80075dc <osTimerCameraTimeoutCallback+0x34>)
 80075d2:	214d      	movs	r1, #77	; 0x4d
 80075d4:	f001 baae 	b.w	8008b34 <iprintf>
 80075d8:	08009f54 	.word	0x08009f54
 80075dc:	08009f8c 	.word	0x08009f8c

080075e0 <t_camera>:
{
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	b087      	sub	sp, #28
	LOG("created!\r\n");
 80075e6:	f7fc fee3 	bl	80043b0 <osKernelSysTick>
	cam_select(camera_info.state.cameraActive);
 80075ea:	4cb9      	ldr	r4, [pc, #740]	; (80078d0 <t_camera+0x2f0>)
 80075ec:	4db9      	ldr	r5, [pc, #740]	; (80078d4 <t_camera+0x2f4>)
					LOG_E("mutex timeout!\r\n");
 80075ee:	f8df b310 	ldr.w	fp, [pc, #784]	; 8007900 <t_camera+0x320>
	LOG("created!\r\n");
 80075f2:	4601      	mov	r1, r0
 80075f4:	2256      	movs	r2, #86	; 0x56
 80075f6:	48b8      	ldr	r0, [pc, #736]	; (80078d8 <t_camera+0x2f8>)
 80075f8:	f001 fa9c 	bl	8008b34 <iprintf>
	cam_select(camera_info.state.cameraActive);
 80075fc:	7860      	ldrb	r0, [r4, #1]
 80075fe:	f000 0001 	and.w	r0, r0, #1
 8007602:	f7ff ff4d 	bl	80074a0 <cam_select>
	LOG("camera ready!\r\n");
 8007606:	f7fc fed3 	bl	80043b0 <osKernelSysTick>
 800760a:	2267      	movs	r2, #103	; 0x67
 800760c:	4601      	mov	r1, r0
 800760e:	48b3      	ldr	r0, [pc, #716]	; (80078dc <t_camera+0x2fc>)
 8007610:	f001 fa90 	bl	8008b34 <iprintf>
	osDelay(T_Camera_id);
 8007614:	2002      	movs	r0, #2
 8007616:	f7fc fefb 	bl	8004410 <osDelay>
	uint8_t _focus_speed = 7;
 800761a:	2307      	movs	r3, #7
 800761c:	9301      	str	r3, [sp, #4]
		osEvent event = osMessageGet(opt_get_queue(Q_CAMERA_NOTIF), 1000);
 800761e:	f04f 0900 	mov.w	r9, #0
 8007622:	e015      	b.n	8007650 <t_camera+0x70>
		if ((g_camera_ready == 0) && (osKernelSysTick() >= 7500)) {
 8007624:	782b      	ldrb	r3, [r5, #0]
 8007626:	b963      	cbnz	r3, 8007642 <t_camera+0x62>
 8007628:	f7fc fec2 	bl	80043b0 <osKernelSysTick>
 800762c:	f641 534b 	movw	r3, #7499	; 0x1d4b
 8007630:	4298      	cmp	r0, r3
 8007632:	d906      	bls.n	8007642 <t_camera+0x62>
			cam_select(camera_info.state.cameraActive);
 8007634:	7860      	ldrb	r0, [r4, #1]
 8007636:	f000 0001 	and.w	r0, r0, #1
 800763a:	f7ff ff31 	bl	80074a0 <cam_select>
			g_camera_ready = 1;
 800763e:	2301      	movs	r3, #1
 8007640:	702b      	strb	r3, [r5, #0]
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 8007642:	2002      	movs	r0, #2
 8007644:	f7f9 f8c0 	bl	80007c8 <opt_get_queue>
 8007648:	2200      	movs	r2, #0
 800764a:	2102      	movs	r1, #2
 800764c:	f7fc ffee 	bl	800462c <osMessagePut>
		osEvent event = osMessageGet(opt_get_queue(Q_CAMERA_NOTIF), 1000);
 8007650:	2000      	movs	r0, #0
 8007652:	f7f9 f8b9 	bl	80007c8 <opt_get_queue>
 8007656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800765a:	4601      	mov	r1, r0
 800765c:	a803      	add	r0, sp, #12
 800765e:	f7fd f811 	bl	8004684 <osMessageGet>
		if (event.status == osEventMessage) {
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	2b10      	cmp	r3, #16
 8007666:	d1dd      	bne.n	8007624 <t_camera+0x44>
			*(uint8_t*) &notif = (uint8_t) event.value.v;
 8007668:	f89d 7010 	ldrb.w	r7, [sp, #16]
			if (*(uint8_t*) &camera_info.command != *(uint8_t*) &notif) {
 800766c:	7823      	ldrb	r3, [r4, #0]
 800766e:	42bb      	cmp	r3, r7
 8007670:	d0d8      	beq.n	8007624 <t_camera+0x44>
				if (osMutexWait(opt_get_mutex(M_CAMERA_STATE), 100) == osOK) {
 8007672:	2000      	movs	r0, #0
 8007674:	f7f9 f8be 	bl	80007f4 <opt_get_mutex>
 8007678:	2164      	movs	r1, #100	; 0x64
 800767a:	f7fc ff43 	bl	8004504 <osMutexWait>
 800767e:	4680      	mov	r8, r0
 8007680:	bb60      	cbnz	r0, 80076dc <t_camera+0xfc>
					if (camera_info.command.cameraActive != notif.cameraActive) {
 8007682:	7823      	ldrb	r3, [r4, #0]
 8007684:	407b      	eors	r3, r7
					camera_info.busy = 1;
 8007686:	f04f 0a01 	mov.w	sl, #1
					if (camera_info.command.cameraActive != notif.cameraActive) {
 800768a:	07da      	lsls	r2, r3, #31
					camera_info.busy = 1;
 800768c:	f884 a002 	strb.w	sl, [r4, #2]
					if (camera_info.command.cameraActive != notif.cameraActive) {
 8007690:	d429      	bmi.n	80076e6 <t_camera+0x106>
						if (camera_info.command.zoom != notif.zoom) {
 8007692:	f013 0f06 	tst.w	r3, #6
 8007696:	d016      	beq.n	80076c6 <t_camera+0xe6>
							if (notif.zoom == ZF_IN) {
 8007698:	f007 0306 	and.w	r3, r7, #6
 800769c:	2b02      	cmp	r3, #2
 800769e:	f000 80af 	beq.w	8007800 <t_camera+0x220>
							else if (notif.zoom == ZF_OUT) {
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	f000 80cd 	beq.w	8007842 <t_camera+0x262>
							camera_info.command.zoom = notif.zoom;
 80076a8:	7822      	ldrb	r2, [r4, #0]
 80076aa:	f3c7 0341 	ubfx	r3, r7, #1, #2
 80076ae:	f363 0242 	bfi	r2, r3, #1, #2
							if (camera_info.command.zoom == OPT_ZOOM_LEVEL_1)
 80076b2:	b2d3      	uxtb	r3, r2
							camera_info.command.zoom = notif.zoom;
 80076b4:	7022      	strb	r2, [r4, #0]
							if (camera_info.command.zoom == OPT_ZOOM_LEVEL_1)
 80076b6:	f012 0206 	ands.w	r2, r2, #6
						if (camera_info.command.focus != notif.focus) {
 80076ba:	ea83 0307 	eor.w	r3, r3, r7
							if (camera_info.command.zoom == OPT_ZOOM_LEVEL_1)
 80076be:	f040 8098 	bne.w	80077f2 <t_camera+0x212>
								_focus_speed = 4;
 80076c2:	2204      	movs	r2, #4
 80076c4:	9201      	str	r2, [sp, #4]
						if (camera_info.command.focus != notif.focus) {
 80076c6:	f013 0f18 	tst.w	r3, #24
 80076ca:	d15c      	bne.n	8007786 <t_camera+0x1a6>
					osMutexRelease(opt_get_mutex(M_CAMERA_STATE));
 80076cc:	2000      	movs	r0, #0
					camera_info.busy = 0;
 80076ce:	f884 9002 	strb.w	r9, [r4, #2]
					osMutexRelease(opt_get_mutex(M_CAMERA_STATE));
 80076d2:	f7f9 f88f 	bl	80007f4 <opt_get_mutex>
 80076d6:	f7fc ff41 	bl	800455c <osMutexRelease>
 80076da:	e7a3      	b.n	8007624 <t_camera+0x44>
					LOG_E("mutex timeout!\r\n");
 80076dc:	21e4      	movs	r1, #228	; 0xe4
 80076de:	4658      	mov	r0, fp
 80076e0:	f001 fa28 	bl	8008b34 <iprintf>
 80076e4:	e79e      	b.n	8007624 <t_camera+0x44>
						LOG("cmd to %d\r\n", notif.cameraActive);
 80076e6:	f7fc fe63 	bl	80043b0 <osKernelSysTick>
 80076ea:	ea07 060a 	and.w	r6, r7, sl
 80076ee:	4633      	mov	r3, r6
 80076f0:	2278      	movs	r2, #120	; 0x78
 80076f2:	4601      	mov	r1, r0
 80076f4:	487a      	ldr	r0, [pc, #488]	; (80078e0 <t_camera+0x300>)
 80076f6:	f001 fa1d 	bl	8008b34 <iprintf>
	osTimerStart(opt_get_timer(Tim_Camera_Notif_id), 500);
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7f9 f848 	bl	8000790 <opt_get_timer>
 8007700:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007704:	f7fc fea0 	bl	8004448 <osTimerStart>
	osTimerStart(opt_get_timer(Tim_Camera_Timeout_id), 10000);
 8007708:	4650      	mov	r0, sl
 800770a:	f7f9 f841 	bl	8000790 <opt_get_timer>
 800770e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007712:	f7fc fe99 	bl	8004448 <osTimerStart>
	LOG("timer start\r\n");
 8007716:	f7fc fe4b 	bl	80043b0 <osKernelSysTick>
 800771a:	2232      	movs	r2, #50	; 0x32
 800771c:	4601      	mov	r1, r0
 800771e:	4871      	ldr	r0, [pc, #452]	; (80078e4 <t_camera+0x304>)
 8007720:	f001 fa08 	bl	8008b34 <iprintf>
						cam_select(notif.cameraActive);
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff febb 	bl	80074a0 <cam_select>
						camera_info.command.cameraActive = notif.cameraActive;
 800772a:	7822      	ldrb	r2, [r4, #0]
						if (notif.cameraActive == CAM_SELECT_DAY) {
 800772c:	f017 0701 	ands.w	r7, r7, #1
						camera_info.command.cameraActive = notif.cameraActive;
 8007730:	f366 0200 	bfi	r2, r6, #0, #1
 8007734:	7022      	strb	r2, [r4, #0]
						if (notif.cameraActive == CAM_SELECT_DAY) {
 8007736:	d110      	bne.n	800775a <t_camera+0x17a>
							camera_zoom_direct(
 8007738:	4b6b      	ldr	r3, [pc, #428]	; (80078e8 <t_camera+0x308>)

static uint32_t cam_get_zoom_value(const uint8_t cam_num, const uint8_t zoom_level)
{
	uint32_t ret = 0;

	if (cam_num == CAM_SELECT_THERMAL) {
 800773a:	4556      	cmp	r6, sl
							camera_zoom_direct(
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	bf14      	ite	ne
 8007740:	f44f 5000 	movne.w	r0, #8192	; 0x2000
 8007744:	4650      	moveq	r0, sl
 8007746:	4790      	blx	r2
							camera_auto_focus_start();
 8007748:	4b68      	ldr	r3, [pc, #416]	; (80078ec <t_camera+0x30c>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	4790      	blx	r2
							camera_info.state.zoomLevel = OPT_ZOOM_LEVEL_1;
 800774e:	7862      	ldrb	r2, [r4, #1]
							_focus_speed = 7;
 8007750:	2307      	movs	r3, #7
							camera_info.state.zoomLevel = OPT_ZOOM_LEVEL_1;
 8007752:	f367 0242 	bfi	r2, r7, #1, #2
 8007756:	7062      	strb	r2, [r4, #1]
							_focus_speed = 7;
 8007758:	9301      	str	r3, [sp, #4]
						camera_info.state.cameraActive = notif.cameraActive;
 800775a:	7862      	ldrb	r2, [r4, #1]
	osTimerStop(opt_get_timer(Tim_Camera_Notif_id));
 800775c:	2000      	movs	r0, #0
						camera_info.state.cameraActive = notif.cameraActive;
 800775e:	f366 0200 	bfi	r2, r6, #0, #1
 8007762:	7062      	strb	r2, [r4, #1]
	osTimerStop(opt_get_timer(Tim_Camera_Notif_id));
 8007764:	f7f9 f814 	bl	8000790 <opt_get_timer>
 8007768:	f7fc fe9c 	bl	80044a4 <osTimerStop>
	osTimerStop(opt_get_timer(Tim_Camera_Timeout_id));
 800776c:	2001      	movs	r0, #1
 800776e:	f7f9 f80f 	bl	8000790 <opt_get_timer>
 8007772:	f7fc fe97 	bl	80044a4 <osTimerStop>
	LOG("timer stop\r\n");
 8007776:	f7fc fe1b 	bl	80043b0 <osKernelSysTick>
 800777a:	2239      	movs	r2, #57	; 0x39
 800777c:	4601      	mov	r1, r0
 800777e:	485c      	ldr	r0, [pc, #368]	; (80078f0 <t_camera+0x310>)
 8007780:	f001 f9d8 	bl	8008b34 <iprintf>
}
 8007784:	e7a2      	b.n	80076cc <t_camera+0xec>
	osTimerStart(opt_get_timer(Tim_Camera_Notif_id), 500);
 8007786:	2000      	movs	r0, #0
 8007788:	f7f9 f802 	bl	8000790 <opt_get_timer>
 800778c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007790:	f7fc fe5a 	bl	8004448 <osTimerStart>
	osTimerStart(opt_get_timer(Tim_Camera_Timeout_id), 10000);
 8007794:	2001      	movs	r0, #1
 8007796:	f7f8 fffb 	bl	8000790 <opt_get_timer>
 800779a:	f242 7110 	movw	r1, #10000	; 0x2710
 800779e:	f7fc fe53 	bl	8004448 <osTimerStart>
	LOG("timer start\r\n");
 80077a2:	f7fc fe05 	bl	80043b0 <osKernelSysTick>
 80077a6:	2232      	movs	r2, #50	; 0x32
 80077a8:	4601      	mov	r1, r0
 80077aa:	484e      	ldr	r0, [pc, #312]	; (80078e4 <t_camera+0x304>)
 80077ac:	f001 f9c2 	bl	8008b34 <iprintf>
							if (notif.focus == ZF_IN) {
 80077b0:	f007 0318 	and.w	r3, r7, #24
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d03f      	beq.n	8007838 <t_camera+0x258>
							else if (notif.focus == ZF_OUT) {
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d06e      	beq.n	800789a <t_camera+0x2ba>
								camera_man_focus_stop();
 80077bc:	4b4d      	ldr	r3, [pc, #308]	; (80078f4 <t_camera+0x314>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4798      	blx	r3
	osTimerStop(opt_get_timer(Tim_Camera_Notif_id));
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7f8 ffe4 	bl	8000790 <opt_get_timer>
 80077c8:	f7fc fe6c 	bl	80044a4 <osTimerStop>
	osTimerStop(opt_get_timer(Tim_Camera_Timeout_id));
 80077cc:	2001      	movs	r0, #1
 80077ce:	f7f8 ffdf 	bl	8000790 <opt_get_timer>
 80077d2:	f7fc fe67 	bl	80044a4 <osTimerStop>
	LOG("timer stop\r\n");
 80077d6:	f7fc fdeb 	bl	80043b0 <osKernelSysTick>
 80077da:	2239      	movs	r2, #57	; 0x39
 80077dc:	4601      	mov	r1, r0
 80077de:	4844      	ldr	r0, [pc, #272]	; (80078f0 <t_camera+0x310>)
 80077e0:	f001 f9a8 	bl	8008b34 <iprintf>
							camera_info.command.focus = notif.focus;
 80077e4:	7823      	ldrb	r3, [r4, #0]
 80077e6:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 80077ea:	f367 03c4 	bfi	r3, r7, #3, #2
 80077ee:	7023      	strb	r3, [r4, #0]
 80077f0:	e76c      	b.n	80076cc <t_camera+0xec>
							else if (camera_info.command.zoom == OPT_ZOOM_LEVEL_2)
 80077f2:	2a02      	cmp	r2, #2
 80077f4:	d04e      	beq.n	8007894 <t_camera+0x2b4>
							else if (camera_info.command.zoom == OPT_ZOOM_LEVEL_3)
 80077f6:	2a04      	cmp	r2, #4
								_focus_speed = 2;
 80077f8:	bf04      	itt	eq
 80077fa:	2202      	moveq	r2, #2
 80077fc:	9201      	streq	r2, [sp, #4]
 80077fe:	e762      	b.n	80076c6 <t_camera+0xe6>
								if (camera_info.state.zoomLevel < OPT_ZOOM_LEVEL_3) {
 8007800:	7863      	ldrb	r3, [r4, #1]
 8007802:	f3c3 0241 	ubfx	r2, r3, #1, #2
 8007806:	2a01      	cmp	r2, #1
 8007808:	f63f af4e 	bhi.w	80076a8 <t_camera+0xc8>
									camera_info.state.zoomLevel++;
 800780c:	3201      	adds	r2, #1
 800780e:	f362 0342 	bfi	r3, r2, #1, #2
 8007812:	7063      	strb	r3, [r4, #1]
									cam_timer_start();
 8007814:	f7ff fe2a 	bl	800746c <cam_timer_start>
													camera_info.state.zoomLevel));
 8007818:	7863      	ldrb	r3, [r4, #1]
									camera_zoom_direct(
 800781a:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <t_camera+0x308>)
	if (cam_num == CAM_SELECT_THERMAL) {
 800781c:	07de      	lsls	r6, r3, #31
									camera_zoom_direct(
 800781e:	6811      	ldr	r1, [r2, #0]
 8007820:	f3c3 0241 	ubfx	r2, r3, #1, #2
	if (cam_num == CAM_SELECT_THERMAL) {
 8007824:	d46e      	bmi.n	8007904 <t_camera+0x324>
			ret = 11999;
		else
			ret = 1;
	}
	else {
		if (zoom_level == OPT_ZOOM_LEVEL_2)
 8007826:	2a01      	cmp	r2, #1
 8007828:	d044      	beq.n	80078b4 <t_camera+0x2d4>
			ret = 0x4000;
		else if (zoom_level == OPT_ZOOM_LEVEL_3)
			ret = 0x6000;
		else
			ret = 0x2000;
 800782a:	2a02      	cmp	r2, #2
 800782c:	bf0c      	ite	eq
 800782e:	f44f 40c0 	moveq.w	r0, #24576	; 0x6000
 8007832:	f44f 5000 	movne.w	r0, #8192	; 0x2000
 8007836:	e020      	b.n	800787a <t_camera+0x29a>
								camera_man_focus_far_speed_start(_focus_speed);
 8007838:	4b2f      	ldr	r3, [pc, #188]	; (80078f8 <t_camera+0x318>)
 800783a:	9801      	ldr	r0, [sp, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4798      	blx	r3
 8007840:	e7bf      	b.n	80077c2 <t_camera+0x1e2>
								if (camera_info.state.zoomLevel > OPT_ZOOM_LEVEL_1) {
 8007842:	7863      	ldrb	r3, [r4, #1]
 8007844:	f013 0f06 	tst.w	r3, #6
 8007848:	f43f af2e 	beq.w	80076a8 <t_camera+0xc8>
									camera_info.state.zoomLevel--;
 800784c:	f3c3 0241 	ubfx	r2, r3, #1, #2
 8007850:	3203      	adds	r2, #3
 8007852:	f362 0342 	bfi	r3, r2, #1, #2
 8007856:	7063      	strb	r3, [r4, #1]
									cam_timer_start();
 8007858:	f7ff fe08 	bl	800746c <cam_timer_start>
													camera_info.state.zoomLevel));
 800785c:	7862      	ldrb	r2, [r4, #1]
									camera_zoom_direct(
 800785e:	4b22      	ldr	r3, [pc, #136]	; (80078e8 <t_camera+0x308>)
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	f3c2 0341 	ubfx	r3, r2, #1, #2
	if (cam_num == CAM_SELECT_THERMAL) {
 8007866:	07d2      	lsls	r2, r2, #31
 8007868:	d41c      	bmi.n	80078a4 <t_camera+0x2c4>
		if (zoom_level == OPT_ZOOM_LEVEL_2)
 800786a:	2b01      	cmp	r3, #1
 800786c:	d022      	beq.n	80078b4 <t_camera+0x2d4>
			ret = 0x2000;
 800786e:	2b02      	cmp	r3, #2
 8007870:	bf0c      	ite	eq
 8007872:	f44f 40c0 	moveq.w	r0, #24576	; 0x6000
 8007876:	f44f 5000 	movne.w	r0, #8192	; 0x2000
									camera_zoom_direct(
 800787a:	4788      	blx	r1
									if (camera_info.state.cameraActive == CAM_SELECT_THERMAL)
 800787c:	7863      	ldrb	r3, [r4, #1]
 800787e:	07d8      	lsls	r0, r3, #31
 8007880:	d420      	bmi.n	80078c4 <t_camera+0x2e4>
									camera_auto_focus_start();
 8007882:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <t_camera+0x30c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4798      	blx	r3
									if (camera_info.state.cameraActive == CAM_SELECT_THERMAL)
 8007888:	7863      	ldrb	r3, [r4, #1]
 800788a:	07d9      	lsls	r1, r3, #31
 800788c:	d415      	bmi.n	80078ba <t_camera+0x2da>
									cam_timer_stop();
 800788e:	f7ff fdd7 	bl	8007440 <cam_timer_stop>
 8007892:	e709      	b.n	80076a8 <t_camera+0xc8>
								_focus_speed = 3;
 8007894:	2203      	movs	r2, #3
 8007896:	9201      	str	r2, [sp, #4]
 8007898:	e715      	b.n	80076c6 <t_camera+0xe6>
								camera_man_focus_near_speed_start(_focus_speed);
 800789a:	4b18      	ldr	r3, [pc, #96]	; (80078fc <t_camera+0x31c>)
 800789c:	9801      	ldr	r0, [sp, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4798      	blx	r3
 80078a2:	e78e      	b.n	80077c2 <t_camera+0x1e2>
		if (zoom_level == OPT_ZOOM_LEVEL_2)
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d035      	beq.n	8007914 <t_camera+0x334>
			ret = 1;
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	f642 60df 	movw	r0, #11999	; 0x2edf
 80078ae:	bf18      	it	ne
 80078b0:	2001      	movne	r0, #1
 80078b2:	e7e2      	b.n	800787a <t_camera+0x29a>
			ret = 0x4000;
 80078b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80078b8:	e7df      	b.n	800787a <t_camera+0x29a>
										osDelay(3000);
 80078ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80078be:	f7fc fda7 	bl	8004410 <osDelay>
 80078c2:	e7e4      	b.n	800788e <t_camera+0x2ae>
										osDelay(3000);
 80078c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80078c8:	f7fc fda2 	bl	8004410 <osDelay>
 80078cc:	e7d9      	b.n	8007882 <t_camera+0x2a2>
 80078ce:	bf00      	nop
 80078d0:	2001065c 	.word	0x2001065c
 80078d4:	20010674 	.word	0x20010674
 80078d8:	08009fa8 	.word	0x08009fa8
 80078dc:	08009fc4 	.word	0x08009fc4
 80078e0:	08009fe4 	.word	0x08009fe4
 80078e4:	08009f70 	.word	0x08009f70
 80078e8:	20010670 	.word	0x20010670
 80078ec:	20010658 	.word	0x20010658
 80078f0:	08009f54 	.word	0x08009f54
 80078f4:	20010668 	.word	0x20010668
 80078f8:	20010660 	.word	0x20010660
 80078fc:	20010664 	.word	0x20010664
 8007900:	0800a000 	.word	0x0800a000
		if (zoom_level == OPT_ZOOM_LEVEL_2)
 8007904:	2a01      	cmp	r2, #1
 8007906:	d005      	beq.n	8007914 <t_camera+0x334>
			ret = 1;
 8007908:	2a02      	cmp	r2, #2
 800790a:	f642 60df 	movw	r0, #11999	; 0x2edf
 800790e:	bf18      	it	ne
 8007910:	2001      	movne	r0, #1
 8007912:	e7b2      	b.n	800787a <t_camera+0x29a>
			ret = 5780;
 8007914:	f241 6094 	movw	r0, #5780	; 0x1694
 8007918:	e7af      	b.n	800787a <t_camera+0x29a>
 800791a:	bf00      	nop

0800791c <cam_is_busy>:
	return camera_info.busy;
 800791c:	4b01      	ldr	r3, [pc, #4]	; (8007924 <cam_is_busy+0x8>)
}
 800791e:	7898      	ldrb	r0, [r3, #2]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2001065c 	.word	0x2001065c

08007928 <cam_read>:
{
 8007928:	b510      	push	{r4, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	4604      	mov	r4, r0
	osStatus ret = osMutexWait(opt_get_mutex(M_CAMERA_STATE), timeout);
 800792e:	2000      	movs	r0, #0
{
 8007930:	9101      	str	r1, [sp, #4]
	osStatus ret = osMutexWait(opt_get_mutex(M_CAMERA_STATE), timeout);
 8007932:	f7f8 ff5f 	bl	80007f4 <opt_get_mutex>
 8007936:	9901      	ldr	r1, [sp, #4]
 8007938:	f7fc fde4 	bl	8004504 <osMutexWait>
	if (ret == osOK) {
 800793c:	b108      	cbz	r0, 8007942 <cam_read+0x1a>
}
 800793e:	b002      	add	sp, #8
 8007940:	bd10      	pop	{r4, pc}
		*cam = camera_info;
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <cam_read+0x34>)
 8007944:	881a      	ldrh	r2, [r3, #0]
 8007946:	789b      	ldrb	r3, [r3, #2]
 8007948:	8022      	strh	r2, [r4, #0]
 800794a:	70a3      	strb	r3, [r4, #2]
		ret = osMutexRelease(opt_get_mutex(M_CAMERA_STATE));
 800794c:	f7f8 ff52 	bl	80007f4 <opt_get_mutex>
}
 8007950:	b002      	add	sp, #8
 8007952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = osMutexRelease(opt_get_mutex(M_CAMERA_STATE));
 8007956:	f7fc be01 	b.w	800455c <osMutexRelease>
 800795a:	bf00      	nop
 800795c:	2001065c 	.word	0x2001065c

08007960 <osTimerLrfNotifCallback>:
	osTimerStop(opt_get_timer(Tim_Lrf_Timeout_id));
	LOG("timer stop\r\n");
}

void osTimerLrfNotifCallback(void const *argument)
{
 8007960:	b508      	push	{r3, lr}
	/* USER CODE BEGIN osTimerCallback */
	(void) argument;

	/* send notif to task manager that this thread is still running */
	osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 8007962:	2002      	movs	r0, #2
 8007964:	f7f8 ff30 	bl	80007c8 <opt_get_queue>

	/* USER CODE END osTimerCallback */
}
 8007968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	2104      	movs	r1, #4
 8007970:	f7fc be5c 	b.w	800462c <osMessagePut>

08007974 <osTimerLrfTimeoutCallback>:

void osTimerLrfTimeoutCallback(void const *argument)
{
 8007974:	b508      	push	{r3, lr}
	osTimerStop(opt_get_timer(Tim_Lrf_Notif_id));
 8007976:	2002      	movs	r0, #2
 8007978:	f7f8 ff0a 	bl	8000790 <opt_get_timer>
 800797c:	f7fc fd92 	bl	80044a4 <osTimerStop>
	osTimerStop(opt_get_timer(Tim_Lrf_Timeout_id));
 8007980:	2003      	movs	r0, #3
 8007982:	f7f8 ff05 	bl	8000790 <opt_get_timer>
 8007986:	f7fc fd8d 	bl	80044a4 <osTimerStop>
	LOG("timer stop\r\n");
 800798a:	f7fc fd11 	bl	80043b0 <osKernelSysTick>
 800798e:	2225      	movs	r2, #37	; 0x25
 8007990:	4601      	mov	r1, r0
 8007992:	4804      	ldr	r0, [pc, #16]	; (80079a4 <osTimerLrfTimeoutCallback+0x30>)
 8007994:	f001 f8ce 	bl	8008b34 <iprintf>

	lrf_timer_stop();
	LOG_E("timeout!\r\n");

	/* USER CODE END osTimerCallback */
}
 8007998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_E("timeout!\r\n");
 800799c:	4802      	ldr	r0, [pc, #8]	; (80079a8 <osTimerLrfTimeoutCallback+0x34>)
 800799e:	2139      	movs	r1, #57	; 0x39
 80079a0:	f001 b8c8 	b.w	8008b34 <iprintf>
 80079a4:	0800a020 	.word	0x0800a020
 80079a8:	0800a03c 	.word	0x0800a03c

080079ac <t_lrf>:

void t_lrf(void const *argument)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
	/* USER CODE BEGIN t_lrf */

	LOG("created!\r\n");
 80079b0:	f7fc fcfe 	bl	80043b0 <osKernelSysTick>
 80079b4:	2242      	movs	r2, #66	; 0x42
 80079b6:	4601      	mov	r1, r0
 80079b8:	4872      	ldr	r0, [pc, #456]	; (8007b84 <t_lrf+0x1d8>)
 80079ba:	4d73      	ldr	r5, [pc, #460]	; (8007b88 <t_lrf+0x1dc>)
					lrf_timer_stop();
					lrf_info.busy = 0;
					osMutexRelease(opt_get_mutex(M_LRF_STATE));
				}
				else
					LOG_E("mutex timeout\r\n");
 80079bc:	4f73      	ldr	r7, [pc, #460]	; (8007b8c <t_lrf+0x1e0>)
	LOG("timer start\r\n");
 80079be:	4e74      	ldr	r6, [pc, #464]	; (8007b90 <t_lrf+0x1e4>)
	LOG("created!\r\n");
 80079c0:	f001 f8b8 	bl	8008b34 <iprintf>
	lrf_init();
 80079c4:	f000 ffc8 	bl	8008958 <lrf_init>
	g_lrf_ready = 1;
 80079c8:	4b72      	ldr	r3, [pc, #456]	; (8007b94 <t_lrf+0x1e8>)
 80079ca:	2201      	movs	r2, #1
	osDelay(T_Lrf_id);
 80079cc:	2004      	movs	r0, #4
	g_lrf_ready = 1;
 80079ce:	701a      	strb	r2, [r3, #0]
	osDelay(T_Lrf_id);
 80079d0:	f7fc fd1e 	bl	8004410 <osDelay>
 80079d4:	e03f      	b.n	8007a56 <t_lrf+0xaa>
					lrf_info.busy = 1;
 80079d6:	f04f 0901 	mov.w	r9, #1
	osTimerStart(opt_get_timer(Tim_Lrf_Notif_id), 500);
 80079da:	2002      	movs	r0, #2
					lrf_info.busy = 1;
 80079dc:	f885 900c 	strb.w	r9, [r5, #12]
	osTimerStart(opt_get_timer(Tim_Lrf_Notif_id), 500);
 80079e0:	f7f8 fed6 	bl	8000790 <opt_get_timer>
 80079e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80079e8:	f7fc fd2e 	bl	8004448 <osTimerStart>
	osTimerStart(opt_get_timer(Tim_Lrf_Timeout_id), 10000);
 80079ec:	2003      	movs	r0, #3
 80079ee:	f7f8 fecf 	bl	8000790 <opt_get_timer>
 80079f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80079f6:	f7fc fd27 	bl	8004448 <osTimerStart>
	LOG("timer start\r\n");
 80079fa:	f7fc fcd9 	bl	80043b0 <osKernelSysTick>
 80079fe:	221e      	movs	r2, #30
 8007a00:	4601      	mov	r1, r0
 8007a02:	4630      	mov	r0, r6
 8007a04:	f001 f896 	bl	8008b34 <iprintf>
					if (lrf_info.command.lrfEnable != notif.lrfEnable) {
 8007a08:	782b      	ldrb	r3, [r5, #0]
 8007a0a:	4063      	eors	r3, r4
 8007a0c:	ea13 0809 	ands.w	r8, r3, r9
 8007a10:	d13f      	bne.n	8007a92 <t_lrf+0xe6>
						if (lrf_info.state.lrf_enable == 1) {
 8007a12:	78ab      	ldrb	r3, [r5, #2]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d067      	beq.n	8007ae8 <t_lrf+0x13c>
	osTimerStop(opt_get_timer(Tim_Lrf_Notif_id));
 8007a18:	2002      	movs	r0, #2
 8007a1a:	f7f8 feb9 	bl	8000790 <opt_get_timer>
 8007a1e:	f7fc fd41 	bl	80044a4 <osTimerStop>
	osTimerStop(opt_get_timer(Tim_Lrf_Timeout_id));
 8007a22:	2003      	movs	r0, #3
 8007a24:	f7f8 feb4 	bl	8000790 <opt_get_timer>
 8007a28:	f7fc fd3c 	bl	80044a4 <osTimerStop>
	LOG("timer stop\r\n");
 8007a2c:	f7fc fcc0 	bl	80043b0 <osKernelSysTick>
 8007a30:	2225      	movs	r2, #37	; 0x25
 8007a32:	4601      	mov	r1, r0
 8007a34:	4858      	ldr	r0, [pc, #352]	; (8007b98 <t_lrf+0x1ec>)
 8007a36:	f001 f87d 	bl	8008b34 <iprintf>
					lrf_info.busy = 0;
 8007a3a:	2300      	movs	r3, #0
					osMutexRelease(opt_get_mutex(M_LRF_STATE));
 8007a3c:	2001      	movs	r0, #1
					lrf_info.busy = 0;
 8007a3e:	732b      	strb	r3, [r5, #12]
					osMutexRelease(opt_get_mutex(M_LRF_STATE));
 8007a40:	f7f8 fed8 	bl	80007f4 <opt_get_mutex>
 8007a44:	f7fc fd8a 	bl	800455c <osMutexRelease>
			}
		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), managerNotif, 0);
 8007a48:	2002      	movs	r0, #2
 8007a4a:	f7f8 febd 	bl	80007c8 <opt_get_queue>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2104      	movs	r1, #4
 8007a52:	f7fc fdeb 	bl	800462c <osMessagePut>
		osEvent event = osMessageGet(opt_get_queue(Q_LRF_NOTIF), 1000);
 8007a56:	2001      	movs	r0, #1
 8007a58:	f7f8 feb6 	bl	80007c8 <opt_get_queue>
 8007a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a60:	4601      	mov	r1, r0
 8007a62:	a807      	add	r0, sp, #28
 8007a64:	f7fc fe0e 	bl	8004684 <osMessageGet>
		if (event.status == osEventMessage) {
 8007a68:	9b07      	ldr	r3, [sp, #28]
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d1ec      	bne.n	8007a48 <t_lrf+0x9c>
			*(uint8_t*) &notif = (uint8_t) event.value.v;
 8007a6e:	f89d 4020 	ldrb.w	r4, [sp, #32]
			if (*(uint8_t*) &lrf_info.command != *(uint8_t*) &notif) {
 8007a72:	782b      	ldrb	r3, [r5, #0]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d0e7      	beq.n	8007a48 <t_lrf+0x9c>
				if (osMutexWait(opt_get_mutex(M_LRF_STATE), 100) == osOK) {
 8007a78:	2001      	movs	r0, #1
 8007a7a:	f7f8 febb 	bl	80007f4 <opt_get_mutex>
 8007a7e:	2164      	movs	r1, #100	; 0x64
 8007a80:	f7fc fd40 	bl	8004504 <osMutexWait>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d0a6      	beq.n	80079d6 <t_lrf+0x2a>
					LOG_E("mutex timeout\r\n");
 8007a88:	2196      	movs	r1, #150	; 0x96
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	f001 f852 	bl	8008b34 <iprintf>
 8007a90:	e7da      	b.n	8007a48 <t_lrf+0x9c>
						LOG("lrf power set to %d\r\n", notif.lrfEnable);
 8007a92:	f7fc fc8d 	bl	80043b0 <osKernelSysTick>
 8007a96:	ea04 0309 	and.w	r3, r4, r9
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	2258      	movs	r2, #88	; 0x58
 8007a9e:	483f      	ldr	r0, [pc, #252]	; (8007b9c <t_lrf+0x1f0>)
 8007aa0:	f001 f848 	bl	8008b34 <iprintf>
						if (notif.lrfEnable == 1) {
 8007aa4:	ea14 0409 	ands.w	r4, r4, r9
 8007aa8:	d012      	beq.n	8007ad0 <t_lrf+0x124>
							if (lrf_power(1) == HAL_OK) {
 8007aaa:	4648      	mov	r0, r9
 8007aac:	f000 ff60 	bl	8008970 <lrf_power>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d1b1      	bne.n	8007a18 <t_lrf+0x6c>
								lrf_info.command.lrfEnable = 1;
 8007ab4:	782b      	ldrb	r3, [r5, #0]
								lrf_info.state.lrf_enable = 1;
 8007ab6:	f885 9002 	strb.w	r9, [r5, #2]
								lrf_info.command.lrfEnable = 1;
 8007aba:	ea43 0309 	orr.w	r3, r3, r9
								osDelay(300);
 8007abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
								lrf_info.command.lrfEnable = 1;
 8007ac2:	702b      	strb	r3, [r5, #0]
								osDelay(300);
 8007ac4:	f7fc fca4 	bl	8004410 <osDelay>
								lrf_set_pointer(1);
 8007ac8:	4648      	mov	r0, r9
 8007aca:	f000 ff57 	bl	800897c <lrf_set_pointer>
 8007ace:	e7a3      	b.n	8007a18 <t_lrf+0x6c>
							osDelay(100);
 8007ad0:	2064      	movs	r0, #100	; 0x64
 8007ad2:	f7fc fc9d 	bl	8004410 <osDelay>
							lrf_power(0);
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 ff4a 	bl	8008970 <lrf_power>
							lrf_info.command.lrfEnable = lrf_info.state.lrf_enable = 0;
 8007adc:	782b      	ldrb	r3, [r5, #0]
 8007ade:	70ac      	strb	r4, [r5, #2]
 8007ae0:	f364 0300 	bfi	r3, r4, #0, #1
 8007ae4:	702b      	strb	r3, [r5, #0]
 8007ae6:	e797      	b.n	8007a18 <t_lrf+0x6c>
							LOG("new lrf command: %d\r\n", *(uint8_t* )&notif);
 8007ae8:	f7fc fc62 	bl	80043b0 <osKernelSysTick>
 8007aec:	4623      	mov	r3, r4
 8007aee:	4601      	mov	r1, r0
 8007af0:	2273      	movs	r2, #115	; 0x73
 8007af2:	482b      	ldr	r0, [pc, #172]	; (8007ba0 <t_lrf+0x1f4>)
 8007af4:	f001 f81e 	bl	8008b34 <iprintf>
							if (lrf_info.command.lrfStart != notif.lrfStart) {
 8007af8:	782b      	ldrb	r3, [r5, #0]
 8007afa:	4063      	eors	r3, r4
 8007afc:	0799      	lsls	r1, r3, #30
 8007afe:	d40a      	bmi.n	8007b16 <t_lrf+0x16a>
							if (lrf_info.command.lrfPointerActive != notif.lrfPointerActive) {
 8007b00:	071a      	lsls	r2, r3, #28
 8007b02:	d413      	bmi.n	8007b2c <t_lrf+0x180>
							if (lrf_info.command.lrfContinousMode != notif.lrfContinousMode) {
 8007b04:	075b      	lsls	r3, r3, #29
 8007b06:	d587      	bpl.n	8007a18 <t_lrf+0x6c>
								lrf_info.command.lrfContinousMode = notif.lrfContinousMode;
 8007b08:	782b      	ldrb	r3, [r5, #0]
 8007b0a:	f3c4 0480 	ubfx	r4, r4, #2, #1
 8007b0e:	f364 0382 	bfi	r3, r4, #2, #1
 8007b12:	702b      	strb	r3, [r5, #0]
 8007b14:	e780      	b.n	8007a18 <t_lrf+0x6c>
								if (lrf_measure_start_with_status(&status) == HAL_OK) {
 8007b16:	f10d 001b 	add.w	r0, sp, #27
								uint8_t status = 0;
 8007b1a:	f88d 801b 	strb.w	r8, [sp, #27]
								if (lrf_measure_start_with_status(&status) == HAL_OK) {
 8007b1e:	f000 ff33 	bl	8008988 <lrf_measure_start_with_status>
 8007b22:	b1b8      	cbz	r0, 8007b54 <t_lrf+0x1a8>
							if (lrf_info.command.lrfPointerActive != notif.lrfPointerActive) {
 8007b24:	782b      	ldrb	r3, [r5, #0]
 8007b26:	4063      	eors	r3, r4
 8007b28:	071a      	lsls	r2, r3, #28
 8007b2a:	d5eb      	bpl.n	8007b04 <t_lrf+0x158>
								LOG("pointer set to: %d\r\n", notif.lrfPointerActive);
 8007b2c:	f7fc fc40 	bl	80043b0 <osKernelSysTick>
 8007b30:	f3c4 08c0 	ubfx	r8, r4, #3, #1
 8007b34:	4601      	mov	r1, r0
 8007b36:	4643      	mov	r3, r8
 8007b38:	2283      	movs	r2, #131	; 0x83
 8007b3a:	481a      	ldr	r0, [pc, #104]	; (8007ba4 <t_lrf+0x1f8>)
 8007b3c:	f000 fffa 	bl	8008b34 <iprintf>
								lrf_set_pointer(notif.lrfPointerActive);
 8007b40:	4640      	mov	r0, r8
 8007b42:	f000 ff1b 	bl	800897c <lrf_set_pointer>
								lrf_info.command.lrfPointerActive = notif.lrfPointerActive;
 8007b46:	782a      	ldrb	r2, [r5, #0]
 8007b48:	f368 02c3 	bfi	r2, r8, #3, #1
							if (lrf_info.command.lrfContinousMode != notif.lrfContinousMode) {
 8007b4c:	b2d3      	uxtb	r3, r2
								lrf_info.command.lrfPointerActive = notif.lrfPointerActive;
 8007b4e:	702a      	strb	r2, [r5, #0]
							if (lrf_info.command.lrfContinousMode != notif.lrfContinousMode) {
 8007b50:	4063      	eors	r3, r4
 8007b52:	e7d7      	b.n	8007b04 <t_lrf+0x158>
									lrf_info.state.value.counter = lrf_get_counter();
 8007b54:	f000 ff1e 	bl	8008994 <lrf_get_counter>
 8007b58:	7128      	strb	r0, [r5, #4]
									lrf_get_value((uint32_t*) lrf_info.state.value.d);
 8007b5a:	4813      	ldr	r0, [pc, #76]	; (8007ba8 <t_lrf+0x1fc>)
 8007b5c:	f000 ff20 	bl	80089a0 <lrf_get_value>
									LOG("c=%d;d[3]= %d %d %d\r\n", lrf_get_counter(),
 8007b60:	f7fc fc26 	bl	80043b0 <osKernelSysTick>
 8007b64:	9005      	str	r0, [sp, #20]
 8007b66:	f000 ff15 	bl	8008994 <lrf_get_counter>
 8007b6a:	896a      	ldrh	r2, [r5, #10]
 8007b6c:	9202      	str	r2, [sp, #8]
 8007b6e:	892a      	ldrh	r2, [r5, #8]
 8007b70:	9201      	str	r2, [sp, #4]
 8007b72:	88ea      	ldrh	r2, [r5, #6]
 8007b74:	9200      	str	r2, [sp, #0]
 8007b76:	4603      	mov	r3, r0
 8007b78:	9905      	ldr	r1, [sp, #20]
 8007b7a:	480c      	ldr	r0, [pc, #48]	; (8007bac <t_lrf+0x200>)
 8007b7c:	227c      	movs	r2, #124	; 0x7c
 8007b7e:	f000 ffd9 	bl	8008b34 <iprintf>
 8007b82:	e7cf      	b.n	8007b24 <t_lrf+0x178>
 8007b84:	0800a058 	.word	0x0800a058
 8007b88:	20010678 	.word	0x20010678
 8007b8c:	0800a120 	.word	0x0800a120
 8007b90:	0800a074 	.word	0x0800a074
 8007b94:	20010675 	.word	0x20010675
 8007b98:	0800a020 	.word	0x0800a020
 8007b9c:	0800a090 	.word	0x0800a090
 8007ba0:	0800a0b4 	.word	0x0800a0b4
 8007ba4:	0800a0fc 	.word	0x0800a0fc
 8007ba8:	2001067e 	.word	0x2001067e
 8007bac:	0800a0d8 	.word	0x0800a0d8

08007bb0 <lrf_is_busy>:
	/* USER CODE END t_lrf */
}

uint8_t lrf_is_busy()
{
	return lrf_info.busy;
 8007bb0:	4b01      	ldr	r3, [pc, #4]	; (8007bb8 <lrf_is_busy+0x8>)
}
 8007bb2:	7b18      	ldrb	r0, [r3, #12]
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20010678 	.word	0x20010678

08007bbc <lrf_read>:

osStatus lrf_read(Lrf_t *lrf, const uint32_t timeout)
{
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	4604      	mov	r4, r0
	osStatus ret = osMutexWait(opt_get_mutex(M_LRF_STATE), timeout);
 8007bc2:	2001      	movs	r0, #1
{
 8007bc4:	9101      	str	r1, [sp, #4]
	osStatus ret = osMutexWait(opt_get_mutex(M_LRF_STATE), timeout);
 8007bc6:	f7f8 fe15 	bl	80007f4 <opt_get_mutex>
 8007bca:	9901      	ldr	r1, [sp, #4]
 8007bcc:	f7fc fc9a 	bl	8004504 <osMutexWait>
	if (ret == osOK) {
 8007bd0:	b108      	cbz	r0, 8007bd6 <lrf_read+0x1a>

		ret = osMutexRelease(opt_get_mutex(M_LRF_STATE));
	}

	return ret;
}
 8007bd2:	b002      	add	sp, #8
 8007bd4:	bd10      	pop	{r4, pc}
		*lrf = lrf_info;
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <lrf_read+0x38>)
 8007bd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bda:	6020      	str	r0, [r4, #0]
 8007bdc:	6061      	str	r1, [r4, #4]
 8007bde:	60a2      	str	r2, [r4, #8]
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	81a3      	strh	r3, [r4, #12]
		ret = osMutexRelease(opt_get_mutex(M_LRF_STATE));
 8007be4:	2001      	movs	r0, #1
 8007be6:	f7f8 fe05 	bl	80007f4 <opt_get_mutex>
}
 8007bea:	b002      	add	sp, #8
 8007bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = osMutexRelease(opt_get_mutex(M_LRF_STATE));
 8007bf0:	f7fc bcb4 	b.w	800455c <osMutexRelease>
 8007bf4:	20010678 	.word	0x20010678

08007bf8 <t_manager>:
#	define LOG(str, ...)
#	define LOG_E(str, ...)
#endif	//if DEBUG_MANAGER==1

void t_manager(void const *argument)
{
 8007bf8:	b530      	push	{r4, r5, lr}
 8007bfa:	b085      	sub	sp, #20
	/* USER CODE BEGIN t_manager */
	LOG("created!\r\n");

	osThreadSetPriority(osThreadGetId(), osPriorityIdle);
 8007bfc:	f7fc fbfc 	bl	80043f8 <osThreadGetId>
 8007c00:	f06f 0102 	mvn.w	r1, #2
 8007c04:	f7fc fbfa 	bl	80043fc <osThreadSetPriority>

	osDelay(T_Manager_id);
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f7fc fc01 	bl	8004410 <osDelay>
//#endif	//if DEBUG_CAMERA==1

			if (allNotif >= 0b1111) {
				allNotif = 0;
				/* refresh wdt timer */
				HAL_IWDG_Refresh(&hiwdg);
 8007c0e:	4d0c      	ldr	r5, [pc, #48]	; (8007c40 <t_manager+0x48>)
	uint16_t allNotif = 0;
 8007c10:	2400      	movs	r4, #0
		osEvent event = osMessageGet(opt_get_queue(Q_MANAGER_NOTIF), 1000);
 8007c12:	2002      	movs	r0, #2
 8007c14:	f7f8 fdd8 	bl	80007c8 <opt_get_queue>
 8007c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	a801      	add	r0, sp, #4
 8007c20:	f7fc fd30 	bl	8004684 <osMessageGet>
		if (event.status == osEventMessage) {
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	2b10      	cmp	r3, #16
 8007c28:	d1f3      	bne.n	8007c12 <t_manager+0x1a>
			allNotif |= notif;
 8007c2a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007c2e:	431c      	orrs	r4, r3
			if (allNotif >= 0b1111) {
 8007c30:	2c0e      	cmp	r4, #14
				HAL_IWDG_Refresh(&hiwdg);
 8007c32:	4628      	mov	r0, r5
			if (allNotif >= 0b1111) {
 8007c34:	d9ed      	bls.n	8007c12 <t_manager+0x1a>
				HAL_IWDG_Refresh(&hiwdg);
 8007c36:	f7fa fba1 	bl	800237c <HAL_IWDG_Refresh>
				allNotif = 0;
 8007c3a:	2400      	movs	r4, #0
	for ( ;; ) {
 8007c3c:	e7e9      	b.n	8007c12 <t_manager+0x1a>
 8007c3e:	bf00      	nop
 8007c40:	20000154 	.word	0x20000154

08007c44 <_VISCA_send_packet_with_reply>:
	return _VISCA_write_packet_data(iface, camera, packet);
}

static uint32_t _VISCA_send_packet_with_reply(VISCAInterface_t *iface, VISCACamera_t *camera,
		VISCAPacket_t *packet)
{
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((iface->address > 7) || (camera->address > 7) || (iface->broadcast)) {
 8007c46:	6846      	ldr	r6, [r0, #4]
 8007c48:	2e07      	cmp	r6, #7
 8007c4a:	dc2b      	bgt.n	8007ca4 <_VISCA_send_packet_with_reply+0x60>
 8007c4c:	680d      	ldr	r5, [r1, #0]
 8007c4e:	2d07      	cmp	r5, #7
 8007c50:	dc28      	bgt.n	8007ca4 <_VISCA_send_packet_with_reply+0x60>
 8007c52:	6887      	ldr	r7, [r0, #8]
 8007c54:	4604      	mov	r4, r0
 8007c56:	bb2f      	cbnz	r7, 8007ca4 <_VISCA_send_packet_with_reply+0x60>
		packet->bytes[0] |= camera->address;
 8007c58:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8007c5c:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8007c60:	7015      	strb	r5, [r2, #0]
	packet->bytes[packet->length] = byte;
 8007c62:	6a15      	ldr	r5, [r2, #32]
 8007c64:	26ff      	movs	r6, #255	; 0xff
 8007c66:	5556      	strb	r6, [r2, r5]
	(packet->length)++;
 8007c68:	3501      	adds	r5, #1
 8007c6a:	6215      	str	r5, [r2, #32]
	return _VISCA_write_packet_data(iface, camera, packet);
 8007c6c:	f000 f8b6 	bl	8007ddc <_VISCA_write_packet_data>
	if (_VISCA_send_packet(iface, camera, packet) != VISCA_SUCCESS)
 8007c70:	b9c0      	cbnz	r0, 8007ca4 <_VISCA_send_packet_with_reply+0x60>
	if (_VISCA_get_packet(iface) != VISCA_SUCCESS)
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 f8bc 	bl	8007df0 <_VISCA_get_packet>
 8007c78:	4605      	mov	r5, r0
 8007c7a:	b120      	cbz	r0, 8007c86 <_VISCA_send_packet_with_reply+0x42>
 8007c7c:	e012      	b.n	8007ca4 <_VISCA_send_packet_with_reply+0x60>
		if (_VISCA_get_packet(iface) != VISCA_SUCCESS)
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 f8b6 	bl	8007df0 <_VISCA_get_packet>
 8007c84:	b970      	cbnz	r0, 8007ca4 <_VISCA_send_packet_with_reply+0x60>
	iface->type = iface->ibuf[1] & 0xF0;
 8007c86:	7b63      	ldrb	r3, [r4, #13]
 8007c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	while (iface->type == VISCA_RESPONSE_ACK) {
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
	iface->type = iface->ibuf[1] & 0xF0;
 8007c8e:	6323      	str	r3, [r4, #48]	; 0x30
	while (iface->type == VISCA_RESPONSE_ACK) {
 8007c90:	d0f5      	beq.n	8007c7e <_VISCA_send_packet_with_reply+0x3a>
	switch (iface->type)
 8007c92:	2b50      	cmp	r3, #80	; 0x50
 8007c94:	d007      	beq.n	8007ca6 <_VISCA_send_packet_with_reply+0x62>
 8007c96:	2b60      	cmp	r3, #96	; 0x60
 8007c98:	d005      	beq.n	8007ca6 <_VISCA_send_packet_with_reply+0x62>
 8007c9a:	2b30      	cmp	r3, #48	; 0x30
 8007c9c:	bf18      	it	ne
 8007c9e:	25ff      	movne	r5, #255	; 0xff

	if (_VISCA_get_reply(iface, camera) != VISCA_SUCCESS)
		return VISCA_FAILURE;

	return VISCA_SUCCESS;
}
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return VISCA_FAILURE;
 8007ca4:	25ff      	movs	r5, #255	; 0xff
}
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007caa:	bf00      	nop

08007cac <VISCA_set_power>:
/***********************************/
/*       COMMAND FUNCTIONS         */
/***********************************/

uint32_t VISCA_set_power(VISCAInterface_t *iface, VISCACamera_t *camera, uint8_t power)
{
 8007cac:	b500      	push	{lr}
 8007cae:	b08b      	sub	sp, #44	; 0x2c
 8007cb0:	4694      	mov	ip, r2
	packet->bytes[packet->length] = byte;
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f88d 2005 	strb.w	r2, [sp, #5]
 8007cba:	f8ad 3006 	strh.w	r3, [sp, #6]
	_VISCA_append_byte(&packet, VISCA_COMMAND);
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_POWER);
	_VISCA_append_byte(&packet, power);

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007cbe:	aa01      	add	r2, sp, #4
	(packet->length)++;
 8007cc0:	2305      	movs	r3, #5
	packet->bytes[packet->length] = byte;
 8007cc2:	f88d c008 	strb.w	ip, [sp, #8]
	(packet->length)++;
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007cc8:	f7ff ffbc 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007ccc:	b00b      	add	sp, #44	; 0x2c
 8007cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd2:	bf00      	nop

08007cd4 <VISCA_set_zoom_value>:
	return _VISCA_send_packet_with_reply(iface, camera, &packet);

}

uint32_t VISCA_set_zoom_value(VISCAInterface_t *iface, VISCACamera_t *camera, uint32_t zoom)
{
 8007cd4:	b500      	push	{lr}
 8007cd6:	b08b      	sub	sp, #44	; 0x2c
	packet->bytes[packet->length] = byte;
 8007cd8:	f04f 0c01 	mov.w	ip, #1
 8007cdc:	f88d c005 	strb.w	ip, [sp, #5]
 8007ce0:	f244 7304 	movw	r3, #18180	; 0x4704

	_VISCA_init_packet(&packet);
	_VISCA_append_byte(&packet, VISCA_COMMAND);
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_ZOOM_VALUE);
	_VISCA_append_byte(&packet, (zoom & 0xF000) >> 12);
 8007ce4:	f3c2 3c03 	ubfx	ip, r2, #12, #4
	packet->bytes[packet->length] = byte;
 8007ce8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007cec:	f88d c008 	strb.w	ip, [sp, #8]
	_VISCA_append_byte(&packet, (zoom & 0x0F00) >> 8);
 8007cf0:	f3c2 2303 	ubfx	r3, r2, #8, #4
	_VISCA_append_byte(&packet, (zoom & 0x00F0) >> 4);
 8007cf4:	f3c2 1c03 	ubfx	ip, r2, #4, #4
	_VISCA_append_byte(&packet, (zoom & 0x000F));
 8007cf8:	f002 020f 	and.w	r2, r2, #15
	packet->bytes[packet->length] = byte;
 8007cfc:	f88d 3009 	strb.w	r3, [sp, #9]
 8007d00:	f88d 200b 	strb.w	r2, [sp, #11]
	(packet->length)++;
 8007d04:	2308      	movs	r3, #8

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d06:	aa01      	add	r2, sp, #4
	packet->bytes[packet->length] = byte;
 8007d08:	f88d c00a 	strb.w	ip, [sp, #10]
	(packet->length)++;
 8007d0c:	9309      	str	r3, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d0e:	f7ff ff99 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007d12:	b00b      	add	sp, #44	; 0x2c
 8007d14:	f85d fb04 	ldr.w	pc, [sp], #4

08007d18 <VISCA_set_focus_stop>:

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
}

uint32_t VISCA_set_focus_stop(VISCAInterface_t *iface, VISCACamera_t *camera)
{
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	b08a      	sub	sp, #40	; 0x28
	(packet->length)++;
 8007d1c:	2305      	movs	r3, #5
	packet->bytes[packet->length] = byte;
 8007d1e:	4c04      	ldr	r4, [pc, #16]	; (8007d30 <VISCA_set_focus_stop+0x18>)
 8007d20:	f8cd 4005 	str.w	r4, [sp, #5]
	_VISCA_append_byte(&packet, VISCA_COMMAND);
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_FOCUS);
	_VISCA_append_byte(&packet, VISCA_FOCUS_STOP);

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d24:	aa01      	add	r2, sp, #4
	(packet->length)++;
 8007d26:	9309      	str	r3, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d28:	f7ff ff8c 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007d2c:	b00a      	add	sp, #40	; 0x28
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	00080401 	.word	0x00080401

08007d34 <VISCA_set_focus_far_speed>:

uint32_t VISCA_set_focus_far_speed(VISCAInterface_t *iface, VISCACamera_t *camera, uint32_t speed)
{
 8007d34:	b510      	push	{r4, lr}
 8007d36:	b08a      	sub	sp, #40	; 0x28

	_VISCA_init_packet(&packet);
	_VISCA_append_byte(&packet, VISCA_COMMAND);
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_FOCUS);
	_VISCA_append_byte(&packet, VISCA_FOCUS_FAR_SPEED | (speed & 0x7));
 8007d38:	f002 0207 	and.w	r2, r2, #7
	packet->bytes[packet->length] = byte;
 8007d3c:	f640 0404 	movw	r4, #2052	; 0x804
	_VISCA_append_byte(&packet, VISCA_FOCUS_FAR_SPEED | (speed & 0x7));
 8007d40:	f042 0320 	orr.w	r3, r2, #32
	packet->bytes[packet->length] = byte;
 8007d44:	f04f 0c01 	mov.w	ip, #1
 8007d48:	f8ad 4006 	strh.w	r4, [sp, #6]

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d4c:	aa01      	add	r2, sp, #4
	(packet->length)++;
 8007d4e:	2405      	movs	r4, #5
	packet->bytes[packet->length] = byte;
 8007d50:	f88d c005 	strb.w	ip, [sp, #5]
 8007d54:	f88d 3008 	strb.w	r3, [sp, #8]
	(packet->length)++;
 8007d58:	9409      	str	r4, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d5a:	f7ff ff73 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007d5e:	b00a      	add	sp, #40	; 0x28
 8007d60:	bd10      	pop	{r4, pc}
 8007d62:	bf00      	nop

08007d64 <VISCA_set_focus_near_speed>:

uint32_t VISCA_set_focus_near_speed(VISCAInterface_t *iface, VISCACamera_t *camera, uint32_t speed)
{
 8007d64:	b510      	push	{r4, lr}
 8007d66:	b08a      	sub	sp, #40	; 0x28

	_VISCA_init_packet(&packet);
	_VISCA_append_byte(&packet, VISCA_COMMAND);
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_FOCUS);
	_VISCA_append_byte(&packet, VISCA_FOCUS_NEAR_SPEED | (speed & 0x7));
 8007d68:	f002 0207 	and.w	r2, r2, #7
	packet->bytes[packet->length] = byte;
 8007d6c:	f640 0404 	movw	r4, #2052	; 0x804
	_VISCA_append_byte(&packet, VISCA_FOCUS_NEAR_SPEED | (speed & 0x7));
 8007d70:	f042 0330 	orr.w	r3, r2, #48	; 0x30
	packet->bytes[packet->length] = byte;
 8007d74:	f04f 0c01 	mov.w	ip, #1
 8007d78:	f8ad 4006 	strh.w	r4, [sp, #6]

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d7c:	aa01      	add	r2, sp, #4
	(packet->length)++;
 8007d7e:	2405      	movs	r4, #5
	packet->bytes[packet->length] = byte;
 8007d80:	f88d c005 	strb.w	ip, [sp, #5]
 8007d84:	f88d 3008 	strb.w	r3, [sp, #8]
	(packet->length)++;
 8007d88:	9409      	str	r4, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007d8a:	f7ff ff5b 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007d8e:	b00a      	add	sp, #40	; 0x28
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	bf00      	nop

08007d94 <VISCA_set_focus_auto>:

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
}

uint32_t VISCA_set_focus_auto(VISCAInterface_t *iface, VISCACamera_t *camera, uint8_t power)
{
 8007d94:	b500      	push	{lr}
 8007d96:	b08b      	sub	sp, #44	; 0x2c
 8007d98:	4694      	mov	ip, r2
	packet->bytes[packet->length] = byte;
 8007d9a:	f643 0304 	movw	r3, #14340	; 0x3804
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f88d 2005 	strb.w	r2, [sp, #5]
 8007da4:	f8ad 3006 	strh.w	r3, [sp, #6]
	_VISCA_append_byte(&packet, VISCA_COMMAND);
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_FOCUS_AUTO);
	_VISCA_append_byte(&packet, power);

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007da8:	aa01      	add	r2, sp, #4
	(packet->length)++;
 8007daa:	2305      	movs	r3, #5
	packet->bytes[packet->length] = byte;
 8007dac:	f88d c008 	strb.w	ip, [sp, #8]
	(packet->length)++;
 8007db0:	9309      	str	r3, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007db2:	f7ff ff47 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007db6:	b00b      	add	sp, #44	; 0x2c
 8007db8:	f85d fb04 	ldr.w	pc, [sp], #4

08007dbc <VISCA_memory_recall>:

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
}

uint32_t VISCA_memory_recall(VISCAInterface_t *iface, VISCACamera_t *camera, uint8_t channel)
{
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
	(packet->length)++;
 8007dc0:	2306      	movs	r3, #6
	packet->bytes[packet->length] = byte;
 8007dc2:	f88d 2009 	strb.w	r2, [sp, #9]
 8007dc6:	4c04      	ldr	r4, [pc, #16]	; (8007dd8 <VISCA_memory_recall+0x1c>)
 8007dc8:	f8cd 4005 	str.w	r4, [sp, #5]
	_VISCA_append_byte(&packet, VISCA_CATEGORY_CAMERA1);
	_VISCA_append_byte(&packet, VISCA_MEMORY);
	_VISCA_append_byte(&packet, VISCA_MEMORY_RECALL);
	_VISCA_append_byte(&packet, channel);

	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007dcc:	aa01      	add	r2, sp, #4
	(packet->length)++;
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
	return _VISCA_send_packet_with_reply(iface, camera, &packet);
 8007dd0:	f7ff ff38 	bl	8007c44 <_VISCA_send_packet_with_reply>
}
 8007dd4:	b00a      	add	sp, #40	; 0x28
 8007dd6:	bd10      	pop	{r4, pc}
 8007dd8:	023f0401 	.word	0x023f0401

08007ddc <_VISCA_write_packet_data>:
/********************************/
/*      PRIVATE FUNCTIONS       */
/********************************/
uint32_t _VISCA_write_packet_data(VISCAInterface_t *iface, VISCACamera_t *camera,
		VISCAPacket_t *packet)
{
 8007ddc:	b508      	push	{r3, lr}
 8007dde:	4611      	mov	r1, r2
	HAL_UART_Transmit(iface->port_fd, packet->bytes, packet->length, VISCA_SERIAL_WAIT);
 8007de0:	2364      	movs	r3, #100	; 0x64
 8007de2:	8c12      	ldrh	r2, [r2, #32]
 8007de4:	6800      	ldr	r0, [r0, #0]
 8007de6:	f7fc f889 	bl	8003efc <HAL_UART_Transmit>
//	}
//	printf("\r\n");
//#endif	//if DEBUG_VISCA==1

	return VISCA_SUCCESS;
}
 8007dea:	2000      	movs	r0, #0
 8007dec:	bd08      	pop	{r3, pc}
 8007dee:	bf00      	nop

08007df0 <_VISCA_get_packet>:

uint32_t _VISCA_get_packet(VISCAInterface_t *iface)
{
 8007df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4680      	mov	r8, r0
 8007df6:	b087      	sub	sp, #28
	uint32_t ret = VISCA_FAILURE;

	/* create queue */
	osMessageQDef(q_sony, VISCA_INPUT_BUFFER_SIZE, uint8_t);
	q_sonyHandle = osMessageCreate(osMessageQ(q_sony), NULL);
 8007df8:	2100      	movs	r1, #0
	osMessageQDef(q_sony, VISCA_INPUT_BUFFER_SIZE, uint8_t);
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	2301      	movs	r3, #1
	q_sonyHandle = osMessageCreate(osMessageQ(q_sony), NULL);
 8007dfe:	4668      	mov	r0, sp
	osMessageQDef(q_sony, VISCA_INPUT_BUFFER_SIZE, uint8_t);
 8007e00:	e9cd 2300 	strd	r2, r3, [sp]
	q_sonyHandle = osMessageCreate(osMessageQ(q_sony), NULL);
 8007e04:	f7fc fc0c 	bl	8004620 <osMessageCreate>

	/* enable uart in receive interrupt */
	__HAL_UART_ENABLE_IT(iface->port_fd, UART_IT_RXNE);
 8007e08:	f8d8 3000 	ldr.w	r3, [r8]
	q_sonyHandle = osMessageCreate(osMessageQ(q_sony), NULL);
 8007e0c:	4d26      	ldr	r5, [pc, #152]	; (8007ea8 <_VISCA_get_packet+0xb8>)
	__HAL_UART_ENABLE_IT(iface->port_fd, UART_IT_RXNE);
 8007e0e:	681a      	ldr	r2, [r3, #0]
	q_sonyHandle = osMessageCreate(osMessageQ(q_sony), NULL);
 8007e10:	6028      	str	r0, [r5, #0]
	__HAL_UART_ENABLE_IT(iface->port_fd, UART_IT_RXNE);
 8007e12:	6813      	ldr	r3, [r2, #0]
	while (HAL_GetTick() < timer) {
		osEvent event = osMessageGet(q_sonyHandle, VISCA_SERIAL_WAIT);
		if (event.status == osEventMessage) {
			iface->ibuf[pos] = (uint8_t) event.value.v;
#if DEBUG_VISCA==1
			printf("[%02X]", iface->ibuf[pos]);
 8007e14:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8007eb8 <_VISCA_get_packet+0xc8>
	__HAL_UART_ENABLE_IT(iface->port_fd, UART_IT_RXNE);
 8007e18:	f043 0320 	orr.w	r3, r3, #32
 8007e1c:	6013      	str	r3, [r2, #0]
	uint32_t timer = HAL_GetTick() + VISCA_SERIAL_LONG_WAIT;
 8007e1e:	f7f9 fb23 	bl	8001468 <HAL_GetTick>
 8007e22:	f500 549c 	add.w	r4, r0, #4992	; 0x1380
	printf("\r\nrecv: ");
 8007e26:	4821      	ldr	r0, [pc, #132]	; (8007eac <_VISCA_get_packet+0xbc>)
 8007e28:	f000 fe84 	bl	8008b34 <iprintf>
	uint32_t timer = HAL_GetTick() + VISCA_SERIAL_LONG_WAIT;
 8007e2c:	3408      	adds	r4, #8
	uint32_t pos = 0;
 8007e2e:	2700      	movs	r7, #0
	while (HAL_GetTick() < timer) {
 8007e30:	f7f9 fb1a 	bl	8001468 <HAL_GetTick>
 8007e34:	4603      	mov	r3, r0
 8007e36:	42a3      	cmp	r3, r4
		osEvent event = osMessageGet(q_sonyHandle, VISCA_SERIAL_WAIT);
 8007e38:	f04f 0264 	mov.w	r2, #100	; 0x64
 8007e3c:	a803      	add	r0, sp, #12
	while (HAL_GetTick() < timer) {
 8007e3e:	d215      	bcs.n	8007e6c <_VISCA_get_packet+0x7c>
		osEvent event = osMessageGet(q_sonyHandle, VISCA_SERIAL_WAIT);
 8007e40:	6829      	ldr	r1, [r5, #0]
 8007e42:	f7fc fc1f 	bl	8004684 <osMessageGet>
		if (event.status == osEventMessage) {
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d1f1      	bne.n	8007e30 <_VISCA_get_packet+0x40>
			iface->ibuf[pos] = (uint8_t) event.value.v;
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	eb08 0607 	add.w	r6, r8, r7
			printf("[%02X]", iface->ibuf[pos]);
 8007e52:	b2d9      	uxtb	r1, r3
			iface->ibuf[pos] = (uint8_t) event.value.v;
 8007e54:	7333      	strb	r3, [r6, #12]
			printf("[%02X]", iface->ibuf[pos]);
 8007e56:	4648      	mov	r0, r9
 8007e58:	f000 fe6c 	bl	8008b34 <iprintf>
#endif	//if DEBUG_VISCA==1

			if (iface->ibuf[pos] == VISCA_TERMINATOR)
 8007e5c:	7b33      	ldrb	r3, [r6, #12]
 8007e5e:	2bff      	cmp	r3, #255	; 0xff
 8007e60:	d004      	beq.n	8007e6c <_VISCA_get_packet+0x7c>
				break;
			else {
				if (++pos >= VISCA_INPUT_BUFFER_SIZE) {
 8007e62:	3701      	adds	r7, #1
 8007e64:	2f1f      	cmp	r7, #31
 8007e66:	d9e3      	bls.n	8007e30 <_VISCA_get_packet+0x40>
	}
	iface->bytes = pos + 1;

	if (HAL_GetTick() >= timer) {
		printf("timeout\r\n");
		ret = VISCA_FAILURE;
 8007e68:	24ff      	movs	r4, #255	; 0xff
 8007e6a:	e00a      	b.n	8007e82 <_VISCA_get_packet+0x92>
	iface->bytes = pos + 1;
 8007e6c:	3701      	adds	r7, #1
 8007e6e:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
	if (HAL_GetTick() >= timer) {
 8007e72:	f7f9 faf9 	bl	8001468 <HAL_GetTick>
 8007e76:	42a0      	cmp	r0, r4
 8007e78:	d211      	bcs.n	8007e9e <_VISCA_get_packet+0xae>
	}
	else {
		printf("\r\n");
 8007e7a:	480d      	ldr	r0, [pc, #52]	; (8007eb0 <_VISCA_get_packet+0xc0>)
 8007e7c:	f000 fee0 	bl	8008c40 <puts>
		ret = VISCA_SUCCESS;
 8007e80:	2400      	movs	r4, #0
	}

	exit:
	/* disable uart in receive interrupt */
	__HAL_UART_DISABLE_IT(iface->port_fd, UART_IT_RXNE);
 8007e82:	f8d8 3000 	ldr.w	r3, [r8]
	/* delete queue */
	osMessageDelete(q_sonyHandle);
 8007e86:	6828      	ldr	r0, [r5, #0]
	__HAL_UART_DISABLE_IT(iface->port_fd, UART_IT_RXNE);
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	f023 0320 	bic.w	r3, r3, #32
 8007e90:	6013      	str	r3, [r2, #0]
	osMessageDelete(q_sonyHandle);
 8007e92:	f7fc fd47 	bl	8004924 <osMessageDelete>

	return ret;
}
 8007e96:	4620      	mov	r0, r4
 8007e98:	b007      	add	sp, #28
 8007e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("timeout\r\n");
 8007e9e:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <_VISCA_get_packet+0xc4>)
 8007ea0:	f000 fece 	bl	8008c40 <puts>
		ret = VISCA_FAILURE;
 8007ea4:	24ff      	movs	r4, #255	; 0xff
 8007ea6:	e7ec      	b.n	8007e82 <_VISCA_get_packet+0x92>
 8007ea8:	20010688 	.word	0x20010688
 8007eac:	0800a140 	.word	0x0800a140
 8007eb0:	0800a160 	.word	0x0800a160
 8007eb4:	0800a154 	.word	0x0800a154
 8007eb8:	0800a14c 	.word	0x0800a14c

08007ebc <USART2_IRQHandler>:
	return VISCA_SUCCESS;
}

void USART2_IRQHandler(void)
{
	uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <USART2_IRQHandler+0x1c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69da      	ldr	r2, [r3, #28]
	/* UART in mode Receiver ---------------------------------------------------*/
	if ((isrflags & USART_ISR_RXNE) != 0U) {
 8007ec2:	0692      	lsls	r2, r2, #26
 8007ec4:	d400      	bmi.n	8007ec8 <USART2_IRQHandler+0xc>

		uint8_t recv_byte = (huart2.Instance->RDR & 0xFF);
		osMessagePut(q_sonyHandle, recv_byte, 0);
	}
}
 8007ec6:	4770      	bx	lr
		uint8_t recv_byte = (huart2.Instance->RDR & 0xFF);
 8007ec8:	6a59      	ldr	r1, [r3, #36]	; 0x24
		osMessagePut(q_sonyHandle, recv_byte, 0);
 8007eca:	4b04      	ldr	r3, [pc, #16]	; (8007edc <USART2_IRQHandler+0x20>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	b2c9      	uxtb	r1, r1
 8007ed2:	f7fc bbab 	b.w	800462c <osMessagePut>
 8007ed6:	bf00      	nop
 8007ed8:	20000338 	.word	0x20000338
 8007edc:	20010688 	.word	0x20010688

08007ee0 <noptel_init>:
	iface->ilen = 0;
}

HAL_StatusTypeDef noptel_init(Noptel_t *noptel, UART_HandleTypeDef *huart, GPIO_TypeDef *port,
		const uint16_t pin)
{
 8007ee0:	b510      	push	{r4, lr}
	noptel->iface.port_fd = huart;
	noptel->iface.reset_port = NULL;
	if (port != NULL) {
		noptel->iface.reset_port = port;
 8007ee2:	e9c0 1200 	strd	r1, r2, [r0]
	if (port != NULL) {
 8007ee6:	b102      	cbz	r2, 8007eea <noptel_init+0xa>
		noptel->iface.reset_pin = pin;
 8007ee8:	8103      	strh	r3, [r0, #8]
	}

	noptel->value.counter = 0;
 8007eea:	2400      	movs	r4, #0
	noptel->value.distance[0] = noptel->value.distance[1] = noptel->value.distance[2] = 0;
 8007eec:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	noptel->value.counter = 0;
 8007ef0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
	noptel->value.distance[0] = noptel->value.distance[1] = noptel->value.distance[2] = 0;
 8007ef4:	6384      	str	r4, [r0, #56]	; 0x38

	LOG("init done\r\n");
 8007ef6:	f7f9 fab7 	bl	8001468 <HAL_GetTick>
 8007efa:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <noptel_init+0x2c>)
 8007efc:	4601      	mov	r1, r0
 8007efe:	234d      	movs	r3, #77	; 0x4d
 8007f00:	4803      	ldr	r0, [pc, #12]	; (8007f10 <noptel_init+0x30>)
 8007f02:	f000 fe17 	bl	8008b34 <iprintf>
	return HAL_OK;
}
 8007f06:	4620      	mov	r0, r4
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0800a164 	.word	0x0800a164
 8007f10:	0800a170 	.word	0x0800a170

08007f14 <noptel_power>:

HAL_StatusTypeDef noptel_power(Noptel_t *noptel, const uint8_t power)
{
 8007f14:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_OK;

	/* set reset pin */
	if (noptel->iface.reset_port != NULL) {
 8007f16:	6843      	ldr	r3, [r0, #4]
{
 8007f18:	b082      	sub	sp, #8
 8007f1a:	460c      	mov	r4, r1
	if (noptel->iface.reset_port != NULL) {
 8007f1c:	b143      	cbz	r3, 8007f30 <noptel_power+0x1c>
		GPIO_PinState pinState = GPIO_PIN_RESET;
		if (power == 1)
			pinState = GPIO_PIN_SET;
		HAL_GPIO_WritePin(noptel->iface.reset_port, noptel->iface.reset_pin, pinState);
 8007f1e:	f1a4 0201 	sub.w	r2, r4, #1
 8007f22:	fab2 f282 	clz	r2, r2
 8007f26:	8901      	ldrh	r1, [r0, #8]
 8007f28:	0952      	lsrs	r2, r2, #5
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fa f9ea 	bl	8002304 <HAL_GPIO_WritePin>
	}

	LOG("power: %d\r\n", power);
 8007f30:	f7f9 fa9a 	bl	8001468 <HAL_GetTick>
 8007f34:	4a04      	ldr	r2, [pc, #16]	; (8007f48 <noptel_power+0x34>)
 8007f36:	9400      	str	r4, [sp, #0]
 8007f38:	4601      	mov	r1, r0
 8007f3a:	235d      	movs	r3, #93	; 0x5d
 8007f3c:	4803      	ldr	r0, [pc, #12]	; (8007f4c <noptel_power+0x38>)
 8007f3e:	f000 fdf9 	bl	8008b34 <iprintf>

	return ret;
}
 8007f42:	2000      	movs	r0, #0
 8007f44:	b002      	add	sp, #8
 8007f46:	bd10      	pop	{r4, pc}
 8007f48:	0800a164 	.word	0x0800a164
 8007f4c:	0800a188 	.word	0x0800a188

08007f50 <noptel_set_pointer>:

HAL_StatusTypeDef noptel_set_pointer(Noptel_t *noptel, const uint8_t power)
{
 8007f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memset(iface->ibuf, 0, NOPTEL_INPUT_BUFFER_SIZE);
 8007f54:	2220      	movs	r2, #32
{
 8007f56:	4605      	mov	r5, r0
 8007f58:	b082      	sub	sp, #8
 8007f5a:	4688      	mov	r8, r1
	memset(iface->ibuf, 0, NOPTEL_INPUT_BUFFER_SIZE);
 8007f5c:	300a      	adds	r0, #10
 8007f5e:	2100      	movs	r1, #0
 8007f60:	f000 fde0 	bl	8008b24 <memset>
	iface->oBuf[iface->olen++] = byte;
 8007f64:	f1b8 0f01 	cmp.w	r8, #1
 8007f68:	bf14      	ite	ne
 8007f6a:	2200      	movne	r2, #0
 8007f6c:	2203      	moveq	r2, #3
			cb += iface->oBuf[i];
 8007f6e:	f1a2 033b 	sub.w	r3, r2, #59	; 0x3b
	iface->ilen = 0;
 8007f72:	f44f 4145 	mov.w	r1, #50432	; 0xc500
		cb ^= 0x50;
 8007f76:	f083 0350 	eor.w	r3, r3, #80	; 0x50
	iface->ilen = 0;
 8007f7a:	8569      	strh	r1, [r5, #42]	; 0x2a
	iface->oBuf[iface->olen++] = byte;
 8007f7c:	2103      	movs	r1, #3
 8007f7e:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 8007f82:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
 8007f86:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
		_append_byte(&noptel->iface, NOPTEL_SET_POINTER_MODE_ON);
	else
		_append_byte(&noptel->iface, NOPTEL_SET_POINTER_MODE_OFF);
	_append_byte(&noptel->iface, _get_check_byte(&noptel->iface));

	LOG("send %dB: ", noptel->iface.olen);
 8007f8a:	f7f9 fa6d 	bl	8001468 <HAL_GetTick>
 8007f8e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4601      	mov	r1, r0
 8007f96:	236e      	movs	r3, #110	; 0x6e
 8007f98:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <noptel_set_pointer+0xa0>)
 8007f9a:	4816      	ldr	r0, [pc, #88]	; (8007ff4 <noptel_set_pointer+0xa4>)
 8007f9c:	f000 fdca 	bl	8008b34 <iprintf>
	for ( int i = 0; i < noptel->iface.olen; i++ )
 8007fa0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8007fa4:	b17b      	cbz	r3, 8007fc6 <noptel_set_pointer+0x76>
 8007fa6:	f06f 062a 	mvn.w	r6, #42	; 0x2a
		printf("[%02X]", noptel->iface.oBuf[i]);
 8007faa:	4f13      	ldr	r7, [pc, #76]	; (8007ff8 <noptel_set_pointer+0xa8>)
 8007fac:	f105 042b 	add.w	r4, r5, #43	; 0x2b
 8007fb0:	1b76      	subs	r6, r6, r5
 8007fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f000 fdbc 	bl	8008b34 <iprintf>
	for ( int i = 0; i < noptel->iface.olen; i++ )
 8007fbc:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
 8007fc0:	1933      	adds	r3, r6, r4
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	dcf5      	bgt.n	8007fb2 <noptel_set_pointer+0x62>
	printf("\r\n");
 8007fc6:	480d      	ldr	r0, [pc, #52]	; (8007ffc <noptel_set_pointer+0xac>)
 8007fc8:	f000 fe3a 	bl	8008c40 <puts>
	return _NOPTEL_write_packet_data(iface, 1);
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f97a 	bl	80082c8 <_NOPTEL_write_packet_data>
////					}
////				}
//		}
//	}

	LOG("pointer: %d\r\n", power);
 8007fd4:	f7f9 fa48 	bl	8001468 <HAL_GetTick>
 8007fd8:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <noptel_set_pointer+0xa0>)
 8007fda:	f8cd 8000 	str.w	r8, [sp]
 8007fde:	4601      	mov	r1, r0
 8007fe0:	239c      	movs	r3, #156	; 0x9c
 8007fe2:	4807      	ldr	r0, [pc, #28]	; (8008000 <noptel_set_pointer+0xb0>)
 8007fe4:	f000 fda6 	bl	8008b34 <iprintf>

	return HAL_OK;
}
 8007fe8:	2000      	movs	r0, #0
 8007fea:	b002      	add	sp, #8
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff0:	0800a164 	.word	0x0800a164
 8007ff4:	0800a1a0 	.word	0x0800a1a0
 8007ff8:	0800a14c 	.word	0x0800a14c
 8007ffc:	0800a160 	.word	0x0800a160
 8008000:	0800a1b8 	.word	0x0800a1b8

08008004 <noptel_measure_start_with_status>:

	return ret;
}

HAL_StatusTypeDef noptel_measure_start_with_status(Noptel_t *noptel, uint8_t *status)
{
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset(iface->ibuf, 0, NOPTEL_INPUT_BUFFER_SIZE);
 8008008:	2220      	movs	r2, #32
{
 800800a:	4605      	mov	r5, r0
 800800c:	b085      	sub	sp, #20
 800800e:	4688      	mov	r8, r1
	memset(iface->ibuf, 0, NOPTEL_INPUT_BUFFER_SIZE);
 8008010:	300a      	adds	r0, #10
 8008012:	2100      	movs	r1, #0
 8008014:	f000 fd86 	bl	8008b24 <memset>
	iface->ilen = 0;
 8008018:	f44f 5190 	mov.w	r1, #4608	; 0x1200
	iface->oBuf[iface->olen++] = byte;
 800801c:	2202      	movs	r2, #2
 800801e:	2342      	movs	r3, #66	; 0x42
	iface->ilen = 0;
 8008020:	8569      	strh	r1, [r5, #42]	; 0x2a
	iface->oBuf[iface->olen++] = byte;
 8008022:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
 8008026:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c

	_init_packet(iface);
	_append_byte(iface, NOPTEL_SET_MEASURE_DISTANCE_STATUS);
	_append_byte(iface, _get_check_byte(iface));

	LOG("send %dB: ", noptel->iface.olen);
 800802a:	f7f9 fa1d 	bl	8001468 <HAL_GetTick>
 800802e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	4601      	mov	r1, r0
 8008036:	23ef      	movs	r3, #239	; 0xef
 8008038:	4a9d      	ldr	r2, [pc, #628]	; (80082b0 <noptel_measure_start_with_status+0x2ac>)
 800803a:	489e      	ldr	r0, [pc, #632]	; (80082b4 <noptel_measure_start_with_status+0x2b0>)
 800803c:	f000 fd7a 	bl	8008b34 <iprintf>
	for ( int i = 0; i < noptel->iface.olen; i++ )
 8008040:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8008044:	b17b      	cbz	r3, 8008066 <noptel_measure_start_with_status+0x62>
 8008046:	f06f 062a 	mvn.w	r6, #42	; 0x2a
		printf("[%02X]", noptel->iface.oBuf[i]);
 800804a:	4f9b      	ldr	r7, [pc, #620]	; (80082b8 <noptel_measure_start_with_status+0x2b4>)
 800804c:	f105 042b 	add.w	r4, r5, #43	; 0x2b
 8008050:	1b76      	subs	r6, r6, r5
 8008052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008056:	4638      	mov	r0, r7
 8008058:	f000 fd6c 	bl	8008b34 <iprintf>
	for ( int i = 0; i < noptel->iface.olen; i++ )
 800805c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
 8008060:	1933      	adds	r3, r6, r4
 8008062:	429a      	cmp	r2, r3
 8008064:	dcf5      	bgt.n	8008052 <noptel_measure_start_with_status+0x4e>
	printf("\r\n");
 8008066:	4895      	ldr	r0, [pc, #596]	; (80082bc <noptel_measure_start_with_status+0x2b8>)
 8008068:	f000 fdea 	bl	8008c40 <puts>
	return _NOPTEL_write_packet_data(iface, 1);
 800806c:	2101      	movs	r1, #1
 800806e:	4628      	mov	r0, r5
 8008070:	f000 f92a 	bl	80082c8 <_NOPTEL_write_packet_data>

	if (_NOPTEL_write_packet_data_with_reply(iface) == HAL_OK) {
 8008074:	b128      	cbz	r0, 8008082 <noptel_measure_start_with_status+0x7e>
	HAL_StatusTypeDef ret = HAL_ERROR;
 8008076:	f04f 0801 	mov.w	r8, #1
			}
		}
	}

	return ret;
}
 800807a:	4640      	mov	r0, r8
 800807c:	b005      	add	sp, #20
 800807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (iface->ilen > 2) {
 8008082:	f895 602a 	ldrb.w	r6, [r5, #42]	; 0x2a
 8008086:	2e02      	cmp	r6, #2
 8008088:	d9f5      	bls.n	8008076 <noptel_measure_start_with_status+0x72>
	for ( int i = 0; i < iface->ilen; i++ ) {
 800808a:	f105 0109 	add.w	r1, r5, #9
 800808e:	4603      	mov	r3, r0
 8008090:	e003      	b.n	800809a <noptel_measure_start_with_status+0x96>
 8008092:	4296      	cmp	r6, r2
 8008094:	f000 8105 	beq.w	80082a2 <noptel_measure_start_with_status+0x29e>
 8008098:	4613      	mov	r3, r2
		if (iface->ibuf[i] == NOPTEL_ACK_SYNC_HEADER_BYTE) {
 800809a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800809e:	2c59      	cmp	r4, #89	; 0x59
	for ( int i = 0; i < iface->ilen; i++ ) {
 80080a0:	f103 0201 	add.w	r2, r3, #1
		if (iface->ibuf[i] == NOPTEL_ACK_SYNC_HEADER_BYTE) {
 80080a4:	d1f5      	bne.n	8008092 <noptel_measure_start_with_status+0x8e>
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80080a6:	3e01      	subs	r6, #1
 80080a8:	42b3      	cmp	r3, r6
 80080aa:	4619      	mov	r1, r3
 80080ac:	f280 80fb 	bge.w	80082a6 <noptel_measure_start_with_status+0x2a2>
 80080b0:	4633      	mov	r3, r6
 80080b2:	1e5a      	subs	r2, r3, #1
 80080b4:	1a52      	subs	r2, r2, r1
 80080b6:	1a5c      	subs	r4, r3, r1
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bfd8      	it	le
 80080bc:	2401      	movle	r4, #1
 80080be:	2a06      	cmp	r2, #6
 80080c0:	f240 80f4 	bls.w	80082ac <noptel_measure_start_with_status+0x2a8>
 80080c4:	428b      	cmp	r3, r1
 80080c6:	f340 80f1 	ble.w	80082ac <noptel_measure_start_with_status+0x2a8>
 80080ca:	f101 000a 	add.w	r0, r1, #10
 80080ce:	08a7      	lsrs	r7, r4, #2
 80080d0:	2f01      	cmp	r7, #1
			cb += iface->ibuf[i];
 80080d2:	582a      	ldr	r2, [r5, r0]
 80080d4:	4428      	add	r0, r5
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80080d6:	d057      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 80080d8:	6846      	ldr	r6, [r0, #4]
 80080da:	f002 3c7f 	and.w	ip, r2, #2139062143	; 0x7f7f7f7f
 80080de:	4072      	eors	r2, r6
 80080e0:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 80080e4:	4466      	add	r6, ip
 80080e6:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 80080ea:	2f02      	cmp	r7, #2
 80080ec:	ea82 0206 	eor.w	r2, r2, r6
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80080f0:	d04a      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 80080f2:	6886      	ldr	r6, [r0, #8]
 80080f4:	f002 3c7f 	and.w	ip, r2, #2139062143	; 0x7f7f7f7f
 80080f8:	4072      	eors	r2, r6
 80080fa:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 80080fe:	4466      	add	r6, ip
 8008100:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008104:	2f03      	cmp	r7, #3
 8008106:	ea82 0206 	eor.w	r2, r2, r6
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 800810a:	d03d      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 800810c:	68c6      	ldr	r6, [r0, #12]
 800810e:	f002 3c7f 	and.w	ip, r2, #2139062143	; 0x7f7f7f7f
 8008112:	4072      	eors	r2, r6
 8008114:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8008118:	4466      	add	r6, ip
 800811a:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 800811e:	2f04      	cmp	r7, #4
 8008120:	ea82 0206 	eor.w	r2, r2, r6
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 8008124:	d030      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 8008126:	6906      	ldr	r6, [r0, #16]
 8008128:	f002 3c7f 	and.w	ip, r2, #2139062143	; 0x7f7f7f7f
 800812c:	4072      	eors	r2, r6
 800812e:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8008132:	4466      	add	r6, ip
 8008134:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008138:	2f05      	cmp	r7, #5
 800813a:	ea82 0206 	eor.w	r2, r2, r6
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 800813e:	d023      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 8008140:	6946      	ldr	r6, [r0, #20]
 8008142:	f002 3c7f 	and.w	ip, r2, #2139062143	; 0x7f7f7f7f
 8008146:	4072      	eors	r2, r6
 8008148:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 800814c:	4466      	add	r6, ip
 800814e:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008152:	2f06      	cmp	r7, #6
 8008154:	ea82 0206 	eor.w	r2, r2, r6
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 8008158:	d016      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 800815a:	6986      	ldr	r6, [r0, #24]
 800815c:	f002 3c7f 	and.w	ip, r2, #2139062143	; 0x7f7f7f7f
 8008160:	4072      	eors	r2, r6
 8008162:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8008166:	4466      	add	r6, ip
 8008168:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 800816c:	2f07      	cmp	r7, #7
 800816e:	ea82 0206 	eor.w	r2, r2, r6
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 8008172:	d009      	beq.n	8008188 <noptel_measure_start_with_status+0x184>
			cb += iface->ibuf[i];
 8008174:	69c0      	ldr	r0, [r0, #28]
 8008176:	f002 367f 	and.w	r6, r2, #2139062143	; 0x7f7f7f7f
 800817a:	4042      	eors	r2, r0
 800817c:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8008180:	4430      	add	r0, r6
 8008182:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008186:	4042      	eors	r2, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 8008188:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800818c:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8008190:	4410      	add	r0, r2
 8008192:	4430      	add	r0, r6
 8008194:	f024 0603 	bic.w	r6, r4, #3
 8008198:	eb00 6212 	add.w	r2, r0, r2, lsr #24
 800819c:	42b4      	cmp	r4, r6
 800819e:	b2d0      	uxtb	r0, r2
 80081a0:	eb06 0201 	add.w	r2, r6, r1
 80081a4:	d02d      	beq.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081a6:	18ac      	adds	r4, r5, r2
 80081a8:	7aa4      	ldrb	r4, [r4, #10]
 80081aa:	4420      	add	r0, r4
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081ac:	1c54      	adds	r4, r2, #1
 80081ae:	42a3      	cmp	r3, r4
			cb += iface->ibuf[i];
 80081b0:	b2c0      	uxtb	r0, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081b2:	dd26      	ble.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081b4:	442c      	add	r4, r5
 80081b6:	7aa4      	ldrb	r4, [r4, #10]
 80081b8:	4420      	add	r0, r4
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081ba:	1c94      	adds	r4, r2, #2
 80081bc:	42a3      	cmp	r3, r4
			cb += iface->ibuf[i];
 80081be:	b2c0      	uxtb	r0, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081c0:	dd1f      	ble.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081c2:	442c      	add	r4, r5
 80081c4:	7aa4      	ldrb	r4, [r4, #10]
 80081c6:	4420      	add	r0, r4
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081c8:	1cd4      	adds	r4, r2, #3
 80081ca:	42a3      	cmp	r3, r4
			cb += iface->ibuf[i];
 80081cc:	b2c0      	uxtb	r0, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081ce:	dd18      	ble.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081d0:	442c      	add	r4, r5
 80081d2:	7aa4      	ldrb	r4, [r4, #10]
 80081d4:	4420      	add	r0, r4
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081d6:	1d14      	adds	r4, r2, #4
 80081d8:	42a3      	cmp	r3, r4
			cb += iface->ibuf[i];
 80081da:	b2c0      	uxtb	r0, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081dc:	dd11      	ble.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081de:	442c      	add	r4, r5
 80081e0:	7aa4      	ldrb	r4, [r4, #10]
 80081e2:	4420      	add	r0, r4
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081e4:	1d54      	adds	r4, r2, #5
 80081e6:	42a3      	cmp	r3, r4
			cb += iface->ibuf[i];
 80081e8:	b2c0      	uxtb	r0, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081ea:	dd0a      	ble.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081ec:	442c      	add	r4, r5
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081ee:	3206      	adds	r2, #6
			cb += iface->ibuf[i];
 80081f0:	7aa4      	ldrb	r4, [r4, #10]
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081f2:	4293      	cmp	r3, r2
			cb += iface->ibuf[i];
 80081f4:	4420      	add	r0, r4
 80081f6:	b2c0      	uxtb	r0, r0
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80081f8:	dd03      	ble.n	8008202 <noptel_measure_start_with_status+0x1fe>
			cb += iface->ibuf[i];
 80081fa:	442a      	add	r2, r5
 80081fc:	7a92      	ldrb	r2, [r2, #10]
 80081fe:	4410      	add	r0, r2
 8008200:	b2c0      	uxtb	r0, r0
		cb ^= 0x50;
 8008202:	f080 0050 	eor.w	r0, r0, #80	; 0x50
 8008206:	b2c0      	uxtb	r0, r0
		if (cb == iface->ibuf[iface->ilen - 1])
 8008208:	442b      	add	r3, r5
 800820a:	7a9b      	ldrb	r3, [r3, #10]
 800820c:	4283      	cmp	r3, r0
 800820e:	f47f af32 	bne.w	8008076 <noptel_measure_start_with_status+0x72>
			if (iface->ibuf[startPos + 1] == NOPTEL_SET_MEASURE_DISTANCE_STATUS) {
 8008212:	186b      	adds	r3, r5, r1
 8008214:	7ada      	ldrb	r2, [r3, #11]
 8008216:	2a12      	cmp	r2, #18
 8008218:	f47f af2d 	bne.w	8008076 <noptel_measure_start_with_status+0x72>
				*status = iface->ibuf[startPos + 8];
 800821c:	7c9a      	ldrb	r2, [r3, #18]
				d[0] = (uint16_t) iface->ibuf[startPos + 3] << 8 | iface->ibuf[startPos + 2];
 800821e:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8008222:	7b1f      	ldrb	r7, [r3, #12]
				d[1] = (uint16_t) iface->ibuf[startPos + 5] << 8 | iface->ibuf[startPos + 4];
 8008224:	f893 a00f 	ldrb.w	sl, [r3, #15]
 8008228:	7b9e      	ldrb	r6, [r3, #14]
				d[2] = (uint16_t) iface->ibuf[startPos + 7] << 8 | iface->ibuf[startPos + 6];
 800822a:	f893 9011 	ldrb.w	r9, [r3, #17]
 800822e:	7c1c      	ldrb	r4, [r3, #16]
				*status = iface->ibuf[startPos + 8];
 8008230:	f888 2000 	strb.w	r2, [r8]
				LOG("[st= %02X]\r\n", *status);
 8008234:	f7f9 f918 	bl	8001468 <HAL_GetTick>
 8008238:	f898 3000 	ldrb.w	r3, [r8]
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	4601      	mov	r1, r0
 8008240:	23fc      	movs	r3, #252	; 0xfc
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <noptel_measure_start_with_status+0x2ac>)
 8008244:	481e      	ldr	r0, [pc, #120]	; (80082c0 <noptel_measure_start_with_status+0x2bc>)
 8008246:	f000 fc75 	bl	8008b34 <iprintf>
				if ((READ_BIT(*status,(1<<NOPTEL_STATUS_B3_ERR_bit)) == 0)
 800824a:	f898 3000 	ldrb.w	r3, [r8]
 800824e:	f013 0830 	ands.w	r8, r3, #48	; 0x30
 8008252:	f47f af10 	bne.w	8008076 <noptel_measure_start_with_status+0x72>
					if (READ_BIT(*status,(1<<NOPTEL_STATUS_B3_MT_bit)) != 0)
 8008256:	065b      	lsls	r3, r3, #25
						noptel->value.multi_target = 1;
 8008258:	bf44      	itt	mi
 800825a:	2301      	movmi	r3, #1
 800825c:	f885 3044 	strbmi.w	r3, [r5, #68]	; 0x44
					noptel->value.counter++;
 8008260:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
					noptel->value.distance[0] = d[0];
 8008264:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
					noptel->value.counter++;
 8008268:	3301      	adds	r3, #1
					noptel->value.distance[1] = d[1];
 800826a:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
					noptel->value.distance[2] = d[2];
 800826e:	ea44 2409 	orr.w	r4, r4, r9, lsl #8
					noptel->value.counter++;
 8008272:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
					noptel->value.distance[1] = d[1];
 8008276:	e9c5 760e 	strd	r7, r6, [r5, #56]	; 0x38
					noptel->value.distance[2] = d[2];
 800827a:	642c      	str	r4, [r5, #64]	; 0x40
					LOG("[c=%d]d= %ld %ld %ld\r\n", noptel->value.counter,
 800827c:	f7f9 f8f4 	bl	8001468 <HAL_GetTick>
 8008280:	e9d5 320f 	ldrd	r3, r2, [r5, #60]	; 0x3c
 8008284:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008288:	4601      	mov	r1, r0
 800828a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800828e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008290:	4a07      	ldr	r2, [pc, #28]	; (80082b0 <noptel_measure_start_with_status+0x2ac>)
 8008292:	e9cd 3000 	strd	r3, r0, [sp]
 8008296:	f240 1309 	movw	r3, #265	; 0x109
 800829a:	480a      	ldr	r0, [pc, #40]	; (80082c4 <noptel_measure_start_with_status+0x2c0>)
 800829c:	f000 fc4a 	bl	8008b34 <iprintf>
					ret = HAL_OK;
 80082a0:	e6eb      	b.n	800807a <noptel_measure_start_with_status+0x76>
		for ( int i = *startPos; i < iface->ilen - 1; i++ )
 80082a2:	2100      	movs	r1, #0
 80082a4:	e705      	b.n	80080b2 <noptel_measure_start_with_status+0xae>
 80082a6:	2050      	movs	r0, #80	; 0x50
 80082a8:	4633      	mov	r3, r6
 80082aa:	e7ad      	b.n	8008208 <noptel_measure_start_with_status+0x204>
 80082ac:	460a      	mov	r2, r1
 80082ae:	e77a      	b.n	80081a6 <noptel_measure_start_with_status+0x1a2>
 80082b0:	0800a164 	.word	0x0800a164
 80082b4:	0800a1a0 	.word	0x0800a1a0
 80082b8:	0800a14c 	.word	0x0800a14c
 80082bc:	0800a160 	.word	0x0800a160
 80082c0:	0800a1f8 	.word	0x0800a1f8
 80082c4:	0800a1d4 	.word	0x0800a1d4

080082c8 <_NOPTEL_write_packet_data>:

	return ret;
}

HAL_StatusTypeDef _NOPTEL_write_packet_data(Noptel_interface_t *iface, const uint8_t get_reply)
{
 80082c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082cc:	4604      	mov	r4, r0
 80082ce:	b084      	sub	sp, #16
	if (get_reply != 0) {
 80082d0:	b961      	cbnz	r1, 80082ec <_NOPTEL_write_packet_data+0x24>
		HAL_UART_Transmit(iface->port_fd, iface->oBuf, iface->olen, NOPTEL_SERIAL_WAIT);

		return _NOPTEL_get_packet(iface);
	}
	else
		HAL_UART_Transmit(iface->port_fd, iface->oBuf, iface->olen, NOPTEL_SERIAL_WAIT);
 80082d2:	460d      	mov	r5, r1
 80082d4:	4601      	mov	r1, r0
 80082d6:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 80082da:	f851 0b2b 	ldr.w	r0, [r1], #43
 80082de:	2364      	movs	r3, #100	; 0x64
 80082e0:	f7fb fe0c 	bl	8003efc <HAL_UART_Transmit>

	return HAL_OK;
}
 80082e4:	4628      	mov	r0, r5
 80082e6:	b004      	add	sp, #16
 80082e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	osMessageQDef(q_noptel, NOPTEL_INPUT_BUFFER_SIZE, uint8_t);
 80082ec:	2301      	movs	r3, #1
 80082ee:	2220      	movs	r2, #32
	q_noptelHandle = osMessageCreate(osMessageQ(q_noptel), NULL);
 80082f0:	2100      	movs	r1, #0
 80082f2:	4668      	mov	r0, sp
	osMessageQDef(q_noptel, NOPTEL_INPUT_BUFFER_SIZE, uint8_t);
 80082f4:	e9cd 2300 	strd	r2, r3, [sp]
	q_noptelHandle = osMessageCreate(osMessageQ(q_noptel), NULL);
 80082f8:	f7fc f992 	bl	8004620 <osMessageCreate>
 80082fc:	4f26      	ldr	r7, [pc, #152]	; (8008398 <_NOPTEL_write_packet_data+0xd0>)
	ret = HAL_UARTEx_ReceiveToIdle_DMA(iface->port_fd, (uint8_t*) iface->ibuf,
 80082fe:	4621      	mov	r1, r4
	q_noptelHandle = osMessageCreate(osMessageQ(q_noptel), NULL);
 8008300:	6038      	str	r0, [r7, #0]
	ret = HAL_UARTEx_ReceiveToIdle_DMA(iface->port_fd, (uint8_t*) iface->ibuf,
 8008302:	2220      	movs	r2, #32
 8008304:	f851 0b0a 	ldr.w	r0, [r1], #10
 8008308:	f7fc f826 	bl	8004358 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(iface->port_fd->hdmarx, DMA_IT_HT);
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008310:	6819      	ldr	r1, [r3, #0]
 8008312:	680a      	ldr	r2, [r1, #0]
 8008314:	f022 0204 	bic.w	r2, r2, #4
 8008318:	600a      	str	r2, [r1, #0]
		HAL_UART_Transmit(iface->port_fd, iface->oBuf, iface->olen, NOPTEL_SERIAL_WAIT);
 800831a:	2364      	movs	r3, #100	; 0x64
 800831c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8008320:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8008324:	f7fb fdea 	bl	8003efc <HAL_UART_Transmit>
	osEvent event = osMessageGet(q_noptelHandle, NOPTEL_SERIAL_LONG_WAIT);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	f242 7210 	movw	r2, #10000	; 0x2710
 800832e:	4668      	mov	r0, sp
 8008330:	f7fc f9a8 	bl	8004684 <osMessageGet>
 8008334:	9b00      	ldr	r3, [sp, #0]
	if (event.status == osEventMessage) {
 8008336:	2b10      	cmp	r3, #16
 8008338:	d009      	beq.n	800834e <_NOPTEL_write_packet_data+0x86>
	else if (event.status == osEventTimeout) {
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d026      	beq.n	800838c <_NOPTEL_write_packet_data+0xc4>
	HAL_StatusTypeDef ret = HAL_ERROR;
 800833e:	2501      	movs	r5, #1
	osMessageDelete(q_noptelHandle);
 8008340:	6838      	ldr	r0, [r7, #0]
 8008342:	f7fc faef 	bl	8004924 <osMessageDelete>
}
 8008346:	4628      	mov	r0, r5
 8008348:	b004      	add	sp, #16
 800834a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		iface->ilen = event.value.v;
 800834e:	9901      	ldr	r1, [sp, #4]
 8008350:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
		printf("%dB -> ", iface->ilen);
 8008354:	4811      	ldr	r0, [pc, #68]	; (800839c <_NOPTEL_write_packet_data+0xd4>)
 8008356:	b2c9      	uxtb	r1, r1
 8008358:	f000 fbec 	bl	8008b34 <iprintf>
		for ( int i = 0; i < iface->ilen; i++ ) {
 800835c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8008360:	b17b      	cbz	r3, 8008382 <_NOPTEL_write_packet_data+0xba>
			printf("[%02X]", iface->ibuf[i]);
 8008362:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80083a8 <_NOPTEL_write_packet_data+0xe0>
 8008366:	f104 0609 	add.w	r6, r4, #9
 800836a:	4635      	mov	r5, r6
 800836c:	4640      	mov	r0, r8
 800836e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008372:	f000 fbdf 	bl	8008b34 <iprintf>
		for ( int i = 0; i < iface->ilen; i++ ) {
 8008376:	3d08      	subs	r5, #8
 8008378:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800837c:	1b2d      	subs	r5, r5, r4
 800837e:	42ab      	cmp	r3, r5
 8008380:	dcf3      	bgt.n	800836a <_NOPTEL_write_packet_data+0xa2>
		printf("\r\n");
 8008382:	4807      	ldr	r0, [pc, #28]	; (80083a0 <_NOPTEL_write_packet_data+0xd8>)
 8008384:	f000 fc5c 	bl	8008c40 <puts>
		ret = HAL_OK;
 8008388:	2500      	movs	r5, #0
 800838a:	e7d9      	b.n	8008340 <_NOPTEL_write_packet_data+0x78>
		printf("timeout\r\n");
 800838c:	4805      	ldr	r0, [pc, #20]	; (80083a4 <_NOPTEL_write_packet_data+0xdc>)
 800838e:	f000 fc57 	bl	8008c40 <puts>
	HAL_StatusTypeDef ret = HAL_ERROR;
 8008392:	2501      	movs	r5, #1
 8008394:	e7d4      	b.n	8008340 <_NOPTEL_write_packet_data+0x78>
 8008396:	bf00      	nop
 8008398:	2001068c 	.word	0x2001068c
 800839c:	0800a214 	.word	0x0800a214
 80083a0:	0800a160 	.word	0x0800a160
 80083a4:	0800a154 	.word	0x0800a154
 80083a8:	0800a14c 	.word	0x0800a14c

080083ac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
	if (huart->Instance == LPUART1) {
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <HAL_UARTEx_RxEventCallback+0x18>)
 80083ae:	6802      	ldr	r2, [r0, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d000      	beq.n	80083b6 <HAL_UARTEx_RxEventCallback+0xa>
		if (q_noptelHandle != NULL)
			osMessagePut(q_noptelHandle, Size, 0);
	}
}
 80083b4:	4770      	bx	lr
		if (q_noptelHandle != NULL)
 80083b6:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <HAL_UARTEx_RxEventCallback+0x1c>)
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0fa      	beq.n	80083b4 <HAL_UARTEx_RxEventCallback+0x8>
			osMessagePut(q_noptelHandle, Size, 0);
 80083be:	2200      	movs	r2, #0
 80083c0:	f7fc b934 	b.w	800462c <osMessagePut>
 80083c4:	40008000 	.word	0x40008000
 80083c8:	2001068c 	.word	0x2001068c

080083cc <TBT_set_zoom_optical_direct>:
	return _TBT_write_packet_data(iface);
}

uint32_t TBT_set_zoom_optical_direct(TBT_interface_t *iface, const uint16_t zoom,
		const uint8_t speed)
{
 80083cc:	b510      	push	{r4, lr}
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 80083ce:	4c09      	ldr	r4, [pc, #36]	; (80083f4 <TBT_set_zoom_optical_direct+0x28>)
{
 80083d0:	4603      	mov	r3, r0
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 80083d2:	6820      	ldr	r0, [r4, #0]
 80083d4:	f8c3 0019 	str.w	r0, [r3, #25]

	iface->oBuf[1] = TBT_OPTICAL_ZOOM_DIRECT;
 80083d8:	2015      	movs	r0, #21
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 80083da:	88a4      	ldrh	r4, [r4, #4]
	iface->oBuf[1] = TBT_OPTICAL_ZOOM_DIRECT;
 80083dc:	7698      	strb	r0, [r3, #26]
	iface->oBuf[2] = (uint8_t) (zoom >> 8);
 80083de:	0a08      	lsrs	r0, r1, #8
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 80083e0:	f8a3 401d 	strh.w	r4, [r3, #29]
	iface->oBuf[2] = (uint8_t) (zoom >> 8);
 80083e4:	76d8      	strb	r0, [r3, #27]
	iface->oBuf[3] = (uint8_t) (zoom & 0xFF);
 80083e6:	7719      	strb	r1, [r3, #28]
	iface->oBuf[4] = speed;
 80083e8:	775a      	strb	r2, [r3, #29]

	return _TBT_write_packet_data(iface);
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f83c 	bl	8008468 <_TBT_write_packet_data>
}
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	bf00      	nop
 80083f4:	08009d74 	.word	0x08009d74

080083f8 <TBT_set_focus_stop>:

uint32_t TBT_set_focus_stop(TBT_interface_t *iface)
{
 80083f8:	b508      	push	{r3, lr}
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 80083fa:	4a07      	ldr	r2, [pc, #28]	; (8008418 <TBT_set_focus_stop+0x20>)
{
 80083fc:	4603      	mov	r3, r0
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 80083fe:	8891      	ldrh	r1, [r2, #4]
 8008400:	6810      	ldr	r0, [r2, #0]
 8008402:	f8c3 0019 	str.w	r0, [r3, #25]

	iface->oBuf[1] = TBT_FOCUS_STOP;
 8008406:	2217      	movs	r2, #23
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 8008408:	f8a3 101d 	strh.w	r1, [r3, #29]
	iface->oBuf[1] = TBT_FOCUS_STOP;
 800840c:	769a      	strb	r2, [r3, #26]

	return _TBT_write_packet_data(iface);
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f82a 	bl	8008468 <_TBT_write_packet_data>
}
 8008414:	bd08      	pop	{r3, pc}
 8008416:	bf00      	nop
 8008418:	08009d74 	.word	0x08009d74

0800841c <TBT_set_focus_start>:

uint32_t TBT_set_focus_start(TBT_interface_t *iface, const uint8_t focus_end, const uint8_t speed)
{
 800841c:	b510      	push	{r4, lr}
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 800841e:	4c08      	ldr	r4, [pc, #32]	; (8008440 <TBT_set_focus_start+0x24>)
{
 8008420:	4603      	mov	r3, r0
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 8008422:	6820      	ldr	r0, [r4, #0]
 8008424:	f8c3 0019 	str.w	r0, [r3, #25]
 8008428:	88a4      	ldrh	r4, [r4, #4]
 800842a:	f8a3 401d 	strh.w	r4, [r3, #29]

	iface->oBuf[1] = TBT_FOCUS_START;
 800842e:	2016      	movs	r0, #22
 8008430:	7698      	strb	r0, [r3, #26]
	iface->oBuf[2] = focus_end;
 8008432:	76d9      	strb	r1, [r3, #27]
	iface->oBuf[3] = speed;
 8008434:	771a      	strb	r2, [r3, #28]

	return _TBT_write_packet_data(iface);
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f816 	bl	8008468 <_TBT_write_packet_data>
}
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	08009d74 	.word	0x08009d74

08008444 <TBT_set_focus_auto_one_push>:

	return _TBT_write_packet_data(iface);
}

uint32_t TBT_set_focus_auto_one_push(TBT_interface_t *iface)
{
 8008444:	b508      	push	{r3, lr}
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 8008446:	4a07      	ldr	r2, [pc, #28]	; (8008464 <TBT_set_focus_auto_one_push+0x20>)
{
 8008448:	4603      	mov	r3, r0
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 800844a:	8891      	ldrh	r1, [r2, #4]
 800844c:	6810      	ldr	r0, [r2, #0]
 800844e:	f8c3 0019 	str.w	r0, [r3, #25]

	iface->oBuf[1] = TBT_AUTO_FOCUS_START;
 8008452:	2219      	movs	r2, #25
	memcpy(iface->oBuf, tbt_default_output_format, TBT_OUTPUT_BUFFER_SIZE);
 8008454:	f8a3 101d 	strh.w	r1, [r3, #29]
	iface->oBuf[1] = TBT_AUTO_FOCUS_START;
 8008458:	769a      	strb	r2, [r3, #26]

	return _TBT_write_packet_data(iface);
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f804 	bl	8008468 <_TBT_write_packet_data>
}
 8008460:	bd08      	pop	{r3, pc}
 8008462:	bf00      	nop
 8008464:	08009d74 	.word	0x08009d74

08008468 <_TBT_write_packet_data>:
#endif	//if DEBUG_TBT==1

static osMessageQId q_thermalHandle;

uint32_t _TBT_write_packet_data(TBT_interface_t *iface)
{
 8008468:	b570      	push	{r4, r5, r6, lr}
	if (HAL_UART_Transmit(iface->port_fd, iface->oBuf, TBT_OUTPUT_BUFFER_SIZE, TBT_SERIAL_WAIT)
 800846a:	4604      	mov	r4, r0
{
 800846c:	4605      	mov	r5, r0
	if (HAL_UART_Transmit(iface->port_fd, iface->oBuf, TBT_OUTPUT_BUFFER_SIZE, TBT_SERIAL_WAIT)
 800846e:	f854 0b19 	ldr.w	r0, [r4], #25
 8008472:	2364      	movs	r3, #100	; 0x64
 8008474:	2206      	movs	r2, #6
 8008476:	4621      	mov	r1, r4
 8008478:	f7fb fd40 	bl	8003efc <HAL_UART_Transmit>
 800847c:	b980      	cbnz	r0, 80084a0 <_TBT_write_packet_data+0x38>
		return TBT_FAILURE;

//	return _TBT_get_packet(iface);

#if DEBUG_TBT==1
	printf("send: ");
 800847e:	4809      	ldr	r0, [pc, #36]	; (80084a4 <_TBT_write_packet_data+0x3c>)
	for ( int i = 0; i < TBT_OUTPUT_BUFFER_SIZE; i++ ) {
		printf("[%02X] ", (int) iface->oBuf[i] & 0xFF);
 8008480:	4e09      	ldr	r6, [pc, #36]	; (80084a8 <_TBT_write_packet_data+0x40>)
	printf("send: ");
 8008482:	f000 fb57 	bl	8008b34 <iprintf>
	for ( int i = 0; i < TBT_OUTPUT_BUFFER_SIZE; i++ ) {
 8008486:	351f      	adds	r5, #31
		printf("[%02X] ", (int) iface->oBuf[i] & 0xFF);
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	4630      	mov	r0, r6
 800848e:	f000 fb51 	bl	8008b34 <iprintf>
	for ( int i = 0; i < TBT_OUTPUT_BUFFER_SIZE; i++ ) {
 8008492:	42ac      	cmp	r4, r5
 8008494:	d1f8      	bne.n	8008488 <_TBT_write_packet_data+0x20>
	}
	printf("\r\n");
 8008496:	4805      	ldr	r0, [pc, #20]	; (80084ac <_TBT_write_packet_data+0x44>)
 8008498:	f000 fbd2 	bl	8008c40 <puts>
#endif	//if DEBUG_TBT==1

	return TBT_SUCCESS;
 800849c:	2000      	movs	r0, #0
}
 800849e:	bd70      	pop	{r4, r5, r6, pc}
		return TBT_FAILURE;
 80084a0:	20ff      	movs	r0, #255	; 0xff
}
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	0800a21c 	.word	0x0800a21c
 80084a8:	0800a224 	.word	0x0800a224
 80084ac:	0800a160 	.word	0x0800a160

080084b0 <UART5_IRQHandler>:
	return ret;
}

void UART5_IRQHandler(void)
{
	uint32_t isrflags = READ_REG(huart5.Instance->ISR);
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <UART5_IRQHandler+0x1c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69da      	ldr	r2, [r3, #28]
	/* UART in mode Receiver ---------------------------------------------------*/
	if ((isrflags & USART_ISR_RXNE) != 0U) {
 80084b6:	0692      	lsls	r2, r2, #26
 80084b8:	d400      	bmi.n	80084bc <UART5_IRQHandler+0xc>

		uint8_t recv_byte = (huart5.Instance->RDR & 0xFF);
		osMessagePut(q_thermalHandle, recv_byte, 0);
	}
}
 80084ba:	4770      	bx	lr
		uint8_t recv_byte = (huart5.Instance->RDR & 0xFF);
 80084bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
		osMessagePut(q_thermalHandle, recv_byte, 0);
 80084be:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <UART5_IRQHandler+0x20>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	b2c9      	uxtb	r1, r1
 80084c6:	f7fc b8b1 	b.w	800462c <osMessagePut>
 80084ca:	bf00      	nop
 80084cc:	200003c8 	.word	0x200003c8
 80084d0:	20010690 	.word	0x20010690

080084d4 <retarget_init>:

#include "main.h"
#include "uartTerminal.h"

void retarget_init()
{
 80084d4:	b510      	push	{r4, lr}
	uartTerminal_init(&huart1);
	setbuf(stdin, NULL);
 80084d6:	4c0a      	ldr	r4, [pc, #40]	; (8008500 <retarget_init+0x2c>)
	uartTerminal_init(&huart1);
 80084d8:	480a      	ldr	r0, [pc, #40]	; (8008504 <retarget_init+0x30>)
 80084da:	f000 f81f 	bl	800851c <uartTerminal_init>
	setbuf(stdin, NULL);
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	2100      	movs	r1, #0
 80084e2:	6858      	ldr	r0, [r3, #4]
 80084e4:	f000 fbb4 	bl	8008c50 <setbuf>
	setbuf(stdout, NULL);
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	2100      	movs	r1, #0
 80084ec:	6898      	ldr	r0, [r3, #8]
 80084ee:	f000 fbaf 	bl	8008c50 <setbuf>
	setbuf(stderr, NULL);
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	2100      	movs	r1, #0
}
 80084f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setbuf(stderr, NULL);
 80084fa:	68d8      	ldr	r0, [r3, #12]
 80084fc:	f000 bba8 	b.w	8008c50 <setbuf>
 8008500:	20000030 	.word	0x20000030
 8008504:	200002a8 	.word	0x200002a8

08008508 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8008508:	b508      	push	{r3, lr}
	uartTerminal_send(ch);
 800850a:	b2c0      	uxtb	r0, r0
 800850c:	f000 f80c 	bl	8008528 <uartTerminal_send>

	return 1;
}
 8008510:	2001      	movs	r0, #1
 8008512:	bd08      	pop	{r3, pc}

08008514 <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

GETCHAR_PROTOTYPE
{
 8008514:	b508      	push	{r3, lr}
	return uartTerminal_recv();
 8008516:	f000 f819 	bl	800854c <uartTerminal_recv>
}
 800851a:	bd08      	pop	{r3, pc}

0800851c <uartTerminal_init>:
/*** Internal Function Declarations ***/

/*** External Function Defines ***/
HAL_StatusTypeDef uartTerminal_init(UART_HandleTypeDef *huart)
{
	sp_huart = huart;
 800851c:	4b01      	ldr	r3, [pc, #4]	; (8008524 <uartTerminal_init+0x8>)
 800851e:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_DMA(sp_huart, (uint8_t*) s_bufferRx, BUFFER_SIZE);
	s_bufferRxRp = 0;
#endif	//if RETARGET_USE_RX_DMA==1

	return HAL_OK;
}
 8008520:	2000      	movs	r0, #0
 8008522:	4770      	bx	lr
 8008524:	20010694 	.word	0x20010694

08008528 <uartTerminal_send>:

HAL_StatusTypeDef uartTerminal_send(uint8_t data)
{
 8008528:	b500      	push	{lr}
	HAL_StatusTypeDef ret = HAL_ERROR;
	ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 800852a:	4a07      	ldr	r2, [pc, #28]	; (8008548 <uartTerminal_send+0x20>)
{
 800852c:	b083      	sub	sp, #12
 800852e:	4684      	mov	ip, r0
	ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 8008530:	2364      	movs	r3, #100	; 0x64
 8008532:	6810      	ldr	r0, [r2, #0]
{
 8008534:	f88d c007 	strb.w	ip, [sp, #7]
	ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 8008538:	2201      	movs	r2, #1
 800853a:	f10d 0107 	add.w	r1, sp, #7
 800853e:	f7fb fcdd 	bl	8003efc <HAL_UART_Transmit>

	return ret;
}
 8008542:	b003      	add	sp, #12
 8008544:	f85d fb04 	ldr.w	pc, [sp], #4
 8008548:	20010694 	.word	0x20010694

0800854c <uartTerminal_recv>:

uint8_t uartTerminal_recv()
{
 800854c:	b510      	push	{r4, lr}
		;
	data = s_bufferRx[s_bufferRxRp++];
	s_bufferRxRp &= (BUFFER_SIZE - 1);

#else
	if (HAL_UART_Receive(sp_huart, &data, 1, 100) != HAL_OK)
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <uartTerminal_recv+0x2c>)
{
 8008550:	b082      	sub	sp, #8
	if (HAL_UART_Receive(sp_huart, &data, 1, 100) != HAL_OK)
 8008552:	6818      	ldr	r0, [r3, #0]
	uint8_t data = 0;
 8008554:	2400      	movs	r4, #0
	if (HAL_UART_Receive(sp_huart, &data, 1, 100) != HAL_OK)
 8008556:	2364      	movs	r3, #100	; 0x64
 8008558:	2201      	movs	r2, #1
 800855a:	f10d 0107 	add.w	r1, sp, #7
	uint8_t data = 0;
 800855e:	f88d 4007 	strb.w	r4, [sp, #7]
	if (HAL_UART_Receive(sp_huart, &data, 1, 100) != HAL_OK)
 8008562:	f7fa ff01 	bl	8003368 <HAL_UART_Receive>
 8008566:	b918      	cbnz	r0, 8008570 <uartTerminal_recv+0x24>
		data = 0;
#endif	//if RETARGET_USE_RX_DMA==1

	return data;
 8008568:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800856c:	b002      	add	sp, #8
 800856e:	bd10      	pop	{r4, pc}
 8008570:	4620      	mov	r0, r4
 8008572:	b002      	add	sp, #8
 8008574:	bd10      	pop	{r4, pc}
 8008576:	bf00      	nop
 8008578:	20010694 	.word	0x20010694

0800857c <sony_init>:
 *
 *
 */

void sony_init()
{
 800857c:	b430      	push	{r4, r5}
	sony.iface.port_fd = &huart2;
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <sony_init+0x1c>)
 8008580:	4d06      	ldr	r5, [pc, #24]	; (800859c <sony_init+0x20>)
 8008582:	601d      	str	r5, [r3, #0]
	sony.iface.broadcast = 0;
 8008584:	2400      	movs	r4, #0
	sony.camera.address = 1;
 8008586:	2201      	movs	r2, #1
	sony.iface.broadcast = 0;
 8008588:	609c      	str	r4, [r3, #8]

	LOG("init\r\n");
 800858a:	4805      	ldr	r0, [pc, #20]	; (80085a0 <sony_init+0x24>)
	sony.camera.address = 1;
 800858c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800858e:	bc30      	pop	{r4, r5}
	LOG("init\r\n");
 8008590:	2134      	movs	r1, #52	; 0x34
 8008592:	f000 bacf 	b.w	8008b34 <iprintf>
 8008596:	bf00      	nop
 8008598:	20010698 	.word	0x20010698
 800859c:	20000338 	.word	0x20000338
 80085a0:	0800a22c 	.word	0x0800a22c

080085a4 <sony_zoom>:
{

}

void sony_zoom(const uint32_t zoom_value)
{
 80085a4:	b500      	push	{lr}
	if (VISCA_set_zoom_value(&sony.iface, &sony.camera, zoom_value) == VISCA_SUCCESS)
 80085a6:	490c      	ldr	r1, [pc, #48]	; (80085d8 <sony_zoom+0x34>)
{
 80085a8:	b083      	sub	sp, #12
 80085aa:	4602      	mov	r2, r0
	if (VISCA_set_zoom_value(&sony.iface, &sony.camera, zoom_value) == VISCA_SUCCESS)
 80085ac:	9001      	str	r0, [sp, #4]
 80085ae:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 80085b2:	f7ff fb8f 	bl	8007cd4 <VISCA_set_zoom_value>
 80085b6:	b938      	cbnz	r0, 80085c8 <sony_zoom+0x24>
		LOG("zoom_val=%ld\r\n", zoom_value);
 80085b8:	4808      	ldr	r0, [pc, #32]	; (80085dc <sony_zoom+0x38>)
 80085ba:	9a01      	ldr	r2, [sp, #4]
 80085bc:	213f      	movs	r1, #63	; 0x3f
	else
		LOG_E("failed\r\n");
}
 80085be:	b003      	add	sp, #12
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG("zoom_val=%ld\r\n", zoom_value);
 80085c4:	f000 bab6 	b.w	8008b34 <iprintf>
		LOG_E("failed\r\n");
 80085c8:	4805      	ldr	r0, [pc, #20]	; (80085e0 <sony_zoom+0x3c>)
 80085ca:	2141      	movs	r1, #65	; 0x41
}
 80085cc:	b003      	add	sp, #12
 80085ce:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_E("failed\r\n");
 80085d2:	f000 baaf 	b.w	8008b34 <iprintf>
 80085d6:	bf00      	nop
 80085d8:	200106cc 	.word	0x200106cc
 80085dc:	0800a240 	.word	0x0800a240
 80085e0:	0800a25c 	.word	0x0800a25c

080085e4 <sony_auto_focus_start>:

void sony_auto_focus_start()
{
	if (VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_ON) == VISCA_SUCCESS)
 80085e4:	4909      	ldr	r1, [pc, #36]	; (800860c <sony_auto_focus_start+0x28>)
{
 80085e6:	b508      	push	{r3, lr}
	if (VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_ON) == VISCA_SUCCESS)
 80085e8:	2202      	movs	r2, #2
 80085ea:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 80085ee:	f7ff fbd1 	bl	8007d94 <VISCA_set_focus_auto>
 80085f2:	b928      	cbnz	r0, 8008600 <sony_auto_focus_start+0x1c>
		LOG("auto focus start\r\n");
	else
		LOG_E("failed\r\n");
}
 80085f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG("auto focus start\r\n");
 80085f8:	4805      	ldr	r0, [pc, #20]	; (8008610 <sony_auto_focus_start+0x2c>)
 80085fa:	2147      	movs	r1, #71	; 0x47
 80085fc:	f000 ba9a 	b.w	8008b34 <iprintf>
}
 8008600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_E("failed\r\n");
 8008604:	4803      	ldr	r0, [pc, #12]	; (8008614 <sony_auto_focus_start+0x30>)
 8008606:	2149      	movs	r1, #73	; 0x49
 8008608:	f000 ba94 	b.w	8008b34 <iprintf>
 800860c:	200106cc 	.word	0x200106cc
 8008610:	0800a274 	.word	0x0800a274
 8008614:	0800a25c 	.word	0x0800a25c

08008618 <sony_man_focus_near_speed_start>:

void sony_man_focus_near_speed_start(const uint8_t speed)
{
	uint32_t a, b;
	/* start manual focus */
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 8008618:	490e      	ldr	r1, [pc, #56]	; (8008654 <sony_man_focus_near_speed_start+0x3c>)
{
 800861a:	b538      	push	{r3, r4, r5, lr}
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 800861c:	2203      	movs	r2, #3
{
 800861e:	4605      	mov	r5, r0
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 8008620:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 8008624:	f7ff fbb6 	bl	8007d94 <VISCA_set_focus_auto>
	/* start focus near */
	b = VISCA_set_focus_near_speed(&sony.iface, &sony.camera, speed);
 8008628:	490a      	ldr	r1, [pc, #40]	; (8008654 <sony_man_focus_near_speed_start+0x3c>)
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 800862a:	4604      	mov	r4, r0
	b = VISCA_set_focus_near_speed(&sony.iface, &sony.camera, speed);
 800862c:	462a      	mov	r2, r5
 800862e:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 8008632:	f7ff fb97 	bl	8007d64 <VISCA_set_focus_near_speed>

	if ((a == VISCA_SUCCESS) && (b == VISCA_SUCCESS))
 8008636:	ea54 0300 	orrs.w	r3, r4, r0
 800863a:	d005      	beq.n	8008648 <sony_man_focus_near_speed_start+0x30>
		LOG("man focus near start\r\n");
	else
		LOG_E("failed\r\n");
}
 800863c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_E("failed\r\n");
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <sony_man_focus_near_speed_start+0x40>)
 8008642:	2157      	movs	r1, #87	; 0x57
 8008644:	f000 ba76 	b.w	8008b34 <iprintf>
}
 8008648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG("man focus near start\r\n");
 800864c:	4803      	ldr	r0, [pc, #12]	; (800865c <sony_man_focus_near_speed_start+0x44>)
 800864e:	2155      	movs	r1, #85	; 0x55
 8008650:	f000 ba70 	b.w	8008b34 <iprintf>
 8008654:	200106cc 	.word	0x200106cc
 8008658:	0800a25c 	.word	0x0800a25c
 800865c:	0800a294 	.word	0x0800a294

08008660 <sony_man_focus_far_speed_start>:

void sony_man_focus_far_speed_start(const uint8_t speed)
{
	uint32_t a, b;
	/* start manual focus */
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 8008660:	490e      	ldr	r1, [pc, #56]	; (800869c <sony_man_focus_far_speed_start+0x3c>)
{
 8008662:	b538      	push	{r3, r4, r5, lr}
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 8008664:	2203      	movs	r2, #3
{
 8008666:	4605      	mov	r5, r0
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 8008668:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 800866c:	f7ff fb92 	bl	8007d94 <VISCA_set_focus_auto>
	/* start focus far */
	b = VISCA_set_focus_far_speed(&sony.iface, &sony.camera, speed);
 8008670:	490a      	ldr	r1, [pc, #40]	; (800869c <sony_man_focus_far_speed_start+0x3c>)
	a = VISCA_set_focus_auto(&sony.iface, &sony.camera, VISCA_FOCUS_AUTO_OFF);
 8008672:	4604      	mov	r4, r0
	b = VISCA_set_focus_far_speed(&sony.iface, &sony.camera, speed);
 8008674:	462a      	mov	r2, r5
 8008676:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 800867a:	f7ff fb5b 	bl	8007d34 <VISCA_set_focus_far_speed>

	if ((a == VISCA_SUCCESS) && (b == VISCA_SUCCESS))
 800867e:	ea54 0300 	orrs.w	r3, r4, r0
 8008682:	d005      	beq.n	8008690 <sony_man_focus_far_speed_start+0x30>
		LOG("man focus far start\r\n");
	else
		LOG_E("failed\r\n");
}
 8008684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_E("failed\r\n");
 8008688:	4805      	ldr	r0, [pc, #20]	; (80086a0 <sony_man_focus_far_speed_start+0x40>)
 800868a:	2173      	movs	r1, #115	; 0x73
 800868c:	f000 ba52 	b.w	8008b34 <iprintf>
}
 8008690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG("man focus far start\r\n");
 8008694:	4803      	ldr	r0, [pc, #12]	; (80086a4 <sony_man_focus_far_speed_start+0x44>)
 8008696:	2171      	movs	r1, #113	; 0x71
 8008698:	f000 ba4c 	b.w	8008b34 <iprintf>
 800869c:	200106cc 	.word	0x200106cc
 80086a0:	0800a25c 	.word	0x0800a25c
 80086a4:	0800a2b8 	.word	0x0800a2b8

080086a8 <sony_man_focus_stop>:

void sony_man_focus_stop()
{

	/* stop manual focus */
	if (VISCA_set_focus_stop(&sony.iface, &sony.camera) == VISCA_SUCCESS)
 80086a8:	4909      	ldr	r1, [pc, #36]	; (80086d0 <sony_man_focus_stop+0x28>)
{
 80086aa:	b508      	push	{r3, lr}
	if (VISCA_set_focus_stop(&sony.iface, &sony.camera) == VISCA_SUCCESS)
 80086ac:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 80086b0:	f7ff fb32 	bl	8007d18 <VISCA_set_focus_stop>
 80086b4:	b928      	cbnz	r0, 80086c2 <sony_man_focus_stop+0x1a>
		LOG("man focus stop\r\n");
	else
		LOG_E("failed\r\n");
}
 80086b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG("man focus stop\r\n");
 80086ba:	4806      	ldr	r0, [pc, #24]	; (80086d4 <sony_man_focus_stop+0x2c>)
 80086bc:	218a      	movs	r1, #138	; 0x8a
 80086be:	f000 ba39 	b.w	8008b34 <iprintf>
}
 80086c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_E("failed\r\n");
 80086c6:	4804      	ldr	r0, [pc, #16]	; (80086d8 <sony_man_focus_stop+0x30>)
 80086c8:	218c      	movs	r1, #140	; 0x8c
 80086ca:	f000 ba33 	b.w	8008b34 <iprintf>
 80086ce:	bf00      	nop
 80086d0:	200106cc 	.word	0x200106cc
 80086d4:	0800a2d8 	.word	0x0800a2d8
 80086d8:	0800a25c 	.word	0x0800a25c

080086dc <sony_power>:
	VISCA_set_cam_stabilizer(&sony.iface, &sony.camera, power);
	LOG("image stabilizer=%d\r\n", off_on);
}

void sony_power(const uint8_t off_on)
{
 80086dc:	b510      	push	{r4, lr}

	uint8_t power = VISCA_POWER_OFF;
	if (off_on != 0)
		power = VISCA_POWER_ON;

	VISCA_set_power(&sony.iface, &sony.camera, power);
 80086de:	4913      	ldr	r1, [pc, #76]	; (800872c <sony_power+0x50>)
	if (off_on != 0)
 80086e0:	4604      	mov	r4, r0
 80086e2:	b1b0      	cbz	r0, 8008712 <sony_power+0x36>
	VISCA_set_power(&sony.iface, &sony.camera, power);
 80086e4:	2202      	movs	r2, #2
 80086e6:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 80086ea:	f7ff fadf 	bl	8007cac <VISCA_set_power>
	LOG("power=%d\r\n", off_on);
 80086ee:	4622      	mov	r2, r4
 80086f0:	21a2      	movs	r1, #162	; 0xa2
 80086f2:	480f      	ldr	r0, [pc, #60]	; (8008730 <sony_power+0x54>)
 80086f4:	f000 fa1e 	bl	8008b34 <iprintf>

	if (off_on != 0) {
		/* recall setting */
		VISCA_memory_recall(&sony.iface, &sony.camera, mem_pos);
 80086f8:	490c      	ldr	r1, [pc, #48]	; (800872c <sony_power+0x50>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 8008700:	f7ff fb5c 	bl	8007dbc <VISCA_memory_recall>
//		VISCA_set_auto_exp_mode(&sony.iface, &sony.camera, VISCA_AUTO_EXP_FULL_AUTO);
//		LOG("AE exp full auto\r\n");
//		VISCA_set_auto_exp_mode(&sony.iface, &sony.camera, VISCA_AUTO_EXP_IRIS_PRIORITY);
//		LOG("AE exp iris priority\r\n");
	}
}
 8008704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("recall memory %d\r\n", mem_pos);
 8008708:	480a      	ldr	r0, [pc, #40]	; (8008734 <sony_power+0x58>)
 800870a:	2201      	movs	r2, #1
 800870c:	21a7      	movs	r1, #167	; 0xa7
 800870e:	f000 ba11 	b.w	8008b34 <iprintf>
	VISCA_set_power(&sony.iface, &sony.camera, power);
 8008712:	2203      	movs	r2, #3
 8008714:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 8008718:	f7ff fac8 	bl	8007cac <VISCA_set_power>
	LOG("power=%d\r\n", off_on);
 800871c:	4622      	mov	r2, r4
 800871e:	4804      	ldr	r0, [pc, #16]	; (8008730 <sony_power+0x54>)
}
 8008720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG("power=%d\r\n", off_on);
 8008724:	21a2      	movs	r1, #162	; 0xa2
 8008726:	f000 ba05 	b.w	8008b34 <iprintf>
 800872a:	bf00      	nop
 800872c:	200106cc 	.word	0x200106cc
 8008730:	0800a2f4 	.word	0x0800a2f4
 8008734:	0800a30c 	.word	0x0800a30c

08008738 <tbt_init>:

static TBT_interface_t tbt = { .port_fd = &huart5 };

void tbt_init()
{
	LOG("init\r\n");
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <tbt_init+0x8>)
 800873a:	211b      	movs	r1, #27
 800873c:	f000 b9fa 	b.w	8008b34 <iprintf>
 8008740:	0800a32c 	.word	0x0800a32c

08008744 <tbt_zoom>:
void tbt_deInit()
{
}

void tbt_zoom(uint32_t zoom_value)
{
 8008744:	b510      	push	{r4, lr}
 8008746:	4604      	mov	r4, r0
	if (TBT_set_zoom_optical_direct(&tbt, zoom_value,
 8008748:	2207      	movs	r2, #7
 800874a:	4809      	ldr	r0, [pc, #36]	; (8008770 <tbt_zoom+0x2c>)
 800874c:	b2a1      	uxth	r1, r4
 800874e:	f7ff fe3d 	bl	80083cc <TBT_set_zoom_optical_direct>
 8008752:	b930      	cbnz	r0, 8008762 <tbt_zoom+0x1e>
	TBT_OPTICAL_ZOOM_DIRECT_SPEED_MAX) == TBT_SUCCESS)
		LOG("zoom_val=%ld\r\n", zoom_value);
 8008754:	4622      	mov	r2, r4
 8008756:	4807      	ldr	r0, [pc, #28]	; (8008774 <tbt_zoom+0x30>)
	else
		LOG_E("failed\r\n");
}
 8008758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG("zoom_val=%ld\r\n", zoom_value);
 800875c:	2126      	movs	r1, #38	; 0x26
 800875e:	f000 b9e9 	b.w	8008b34 <iprintf>
}
 8008762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_E("failed\r\n");
 8008766:	4804      	ldr	r0, [pc, #16]	; (8008778 <tbt_zoom+0x34>)
 8008768:	2128      	movs	r1, #40	; 0x28
 800876a:	f000 b9e3 	b.w	8008b34 <iprintf>
 800876e:	bf00      	nop
 8008770:	20000010 	.word	0x20000010
 8008774:	0800a33c 	.word	0x0800a33c
 8008778:	0800a354 	.word	0x0800a354

0800877c <tbt_auto_focus_start>:

void tbt_auto_focus_start()
{
 800877c:	b508      	push	{r3, lr}
	if (TBT_set_focus_auto_one_push(&tbt) == TBT_SUCCESS)
 800877e:	4808      	ldr	r0, [pc, #32]	; (80087a0 <tbt_auto_focus_start+0x24>)
 8008780:	f7ff fe60 	bl	8008444 <TBT_set_focus_auto_one_push>
 8008784:	b928      	cbnz	r0, 8008792 <tbt_auto_focus_start+0x16>
		LOG("auto focus start\r\n");
	else
		LOG_E("failed\r\n");
}
 8008786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG("auto focus start\r\n");
 800878a:	4806      	ldr	r0, [pc, #24]	; (80087a4 <tbt_auto_focus_start+0x28>)
 800878c:	212e      	movs	r1, #46	; 0x2e
 800878e:	f000 b9d1 	b.w	8008b34 <iprintf>
}
 8008792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_E("failed\r\n");
 8008796:	4804      	ldr	r0, [pc, #16]	; (80087a8 <tbt_auto_focus_start+0x2c>)
 8008798:	2130      	movs	r1, #48	; 0x30
 800879a:	f000 b9cb 	b.w	8008b34 <iprintf>
 800879e:	bf00      	nop
 80087a0:	20000010 	.word	0x20000010
 80087a4:	0800a36c 	.word	0x0800a36c
 80087a8:	0800a354 	.word	0x0800a354

080087ac <tbt_man_focus_near_speed_start>:

void tbt_man_focus_near_speed_start(const uint8_t speed)
{
 80087ac:	b508      	push	{r3, lr}
	if (TBT_set_focus_start(&tbt, TBT_FOCUS_START_NEAR,
 80087ae:	f000 0207 	and.w	r2, r0, #7
 80087b2:	2100      	movs	r1, #0
 80087b4:	4807      	ldr	r0, [pc, #28]	; (80087d4 <tbt_man_focus_near_speed_start+0x28>)
 80087b6:	f7ff fe31 	bl	800841c <TBT_set_focus_start>
 80087ba:	b928      	cbnz	r0, 80087c8 <tbt_man_focus_near_speed_start+0x1c>
			(speed & TBT_FOCUS_START_SPEED_MAX)) == TBT_SUCCESS)
		LOG("man focus near start\r\n");
	else
		LOG_E("failed\r\n");
}
 80087bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG("man focus near start\r\n");
 80087c0:	4805      	ldr	r0, [pc, #20]	; (80087d8 <tbt_man_focus_near_speed_start+0x2c>)
 80087c2:	2137      	movs	r1, #55	; 0x37
 80087c4:	f000 b9b6 	b.w	8008b34 <iprintf>
}
 80087c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_E("failed\r\n");
 80087cc:	4803      	ldr	r0, [pc, #12]	; (80087dc <tbt_man_focus_near_speed_start+0x30>)
 80087ce:	2139      	movs	r1, #57	; 0x39
 80087d0:	f000 b9b0 	b.w	8008b34 <iprintf>
 80087d4:	20000010 	.word	0x20000010
 80087d8:	0800a388 	.word	0x0800a388
 80087dc:	0800a354 	.word	0x0800a354

080087e0 <tbt_man_focus_far_speed_start>:
	else
		LOG_E("failed\r\n");
}

void tbt_man_focus_far_speed_start(const uint8_t speed)
{
 80087e0:	b508      	push	{r3, lr}
	if (TBT_set_focus_start(&tbt, TBT_FOCUS_START_FAR,
 80087e2:	f000 0207 	and.w	r2, r0, #7
 80087e6:	2101      	movs	r1, #1
 80087e8:	4807      	ldr	r0, [pc, #28]	; (8008808 <tbt_man_focus_far_speed_start+0x28>)
 80087ea:	f7ff fe17 	bl	800841c <TBT_set_focus_start>
 80087ee:	b928      	cbnz	r0, 80087fc <tbt_man_focus_far_speed_start+0x1c>
			(speed & TBT_FOCUS_START_SPEED_MAX)) == TBT_SUCCESS)
		LOG("man focus far start\r\n");
	else
		LOG_E("failed\r\n");
}
 80087f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG("man focus far start\r\n");
 80087f4:	4805      	ldr	r0, [pc, #20]	; (800880c <tbt_man_focus_far_speed_start+0x2c>)
 80087f6:	2149      	movs	r1, #73	; 0x49
 80087f8:	f000 b99c 	b.w	8008b34 <iprintf>
}
 80087fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_E("failed\r\n");
 8008800:	4803      	ldr	r0, [pc, #12]	; (8008810 <tbt_man_focus_far_speed_start+0x30>)
 8008802:	214b      	movs	r1, #75	; 0x4b
 8008804:	f000 b996 	b.w	8008b34 <iprintf>
 8008808:	20000010 	.word	0x20000010
 800880c:	0800a3a8 	.word	0x0800a3a8
 8008810:	0800a354 	.word	0x0800a354

08008814 <tbt_man_focus_stop>:
	else
		LOG_E("failed\r\n");
}

void tbt_man_focus_stop()
{
 8008814:	b508      	push	{r3, lr}
	if (TBT_set_focus_stop(&tbt) == TBT_SUCCESS)
 8008816:	4808      	ldr	r0, [pc, #32]	; (8008838 <tbt_man_focus_stop+0x24>)
 8008818:	f7ff fdee 	bl	80083f8 <TBT_set_focus_stop>
 800881c:	b928      	cbnz	r0, 800882a <tbt_man_focus_stop+0x16>
		LOG("man focus stop\r\n");
	else
		LOG_E("failed\r\n");
}
 800881e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG("man focus stop\r\n");
 8008822:	4806      	ldr	r0, [pc, #24]	; (800883c <tbt_man_focus_stop+0x28>)
 8008824:	2159      	movs	r1, #89	; 0x59
 8008826:	f000 b985 	b.w	8008b34 <iprintf>
}
 800882a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_E("failed\r\n");
 800882e:	4804      	ldr	r0, [pc, #16]	; (8008840 <tbt_man_focus_stop+0x2c>)
 8008830:	215b      	movs	r1, #91	; 0x5b
 8008832:	f000 b97f 	b.w	8008b34 <iprintf>
 8008836:	bf00      	nop
 8008838:	20000010 	.word	0x20000010
 800883c:	0800a3c8 	.word	0x0800a3c8
 8008840:	0800a354 	.word	0x0800a354

08008844 <tbt_power>:
	else
		LOG_E("failed\r\n");
}

void tbt_power(const uint8_t off_on)
{
 8008844:	4602      	mov	r2, r0
	LOG("power=%d\r\n",off_on);
 8008846:	216c      	movs	r1, #108	; 0x6c
 8008848:	4801      	ldr	r0, [pc, #4]	; (8008850 <tbt_power+0xc>)
 800884a:	f000 b973 	b.w	8008b34 <iprintf>
 800884e:	bf00      	nop
 8008850:	0800a3e4 	.word	0x0800a3e4

08008854 <hal_bus_init>:
} Bus_t;

static Bus_t bus;

void hal_bus_init()
{
 8008854:	b510      	push	{r4, lr}
	bus.hfdcan = &hfdcan1;
 8008856:	4c0e      	ldr	r4, [pc, #56]	; (8008890 <hal_bus_init+0x3c>)
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <hal_bus_init+0x40>)

#if DEBUG_BUS==1
	printf("fdcan bus init ...\r\n");
 800885a:	480f      	ldr	r0, [pc, #60]	; (8008898 <hal_bus_init+0x44>)
	bus.hfdcan = &hfdcan1;
 800885c:	6023      	str	r3, [r4, #0]
	printf("fdcan bus init ...\r\n");
 800885e:	f000 f9ef 	bl	8008c40 <puts>
#endif	//if DEBUG_BUS==1

	FDCAN_RX_Filter_Panel(bus.hfdcan, 0);
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	2100      	movs	r1, #0
 8008866:	f000 f8ef 	bl	8008a48 <FDCAN_RX_Filter_Panel>
	bus.recvPanel.id = RWS_PANEL_ID;
	FDCAN_TX_Config(&bus.txHeader, RWS_OPTRONIK_ID, RWS_OPTRONIK_DATA_LENGTH);
 800886a:	1d20      	adds	r0, r4, #4
	bus.recvPanel.id = RWS_PANEL_ID;
 800886c:	f44f 7344 	mov.w	r3, #784	; 0x310
	FDCAN_TX_Config(&bus.txHeader, RWS_OPTRONIK_ID, RWS_OPTRONIK_DATA_LENGTH);
 8008870:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008874:	f44f 7148 	mov.w	r1, #800	; 0x320
	bus.recvPanel.id = RWS_PANEL_ID;
 8008878:	66e3      	str	r3, [r4, #108]	; 0x6c
	FDCAN_TX_Config(&bus.txHeader, RWS_OPTRONIK_ID, RWS_OPTRONIK_DATA_LENGTH);
 800887a:	f000 f909 	bl	8008a90 <FDCAN_TX_Config>
	FDCAN_Config(bus.hfdcan);
 800887e:	6820      	ldr	r0, [r4, #0]
 8008880:	f000 f8b6 	bl	80089f0 <FDCAN_Config>

#if DEBUG_BUS==1
	printf("done!\r\n");
#endif	//if DEBUG_BUS==1

}
 8008884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("done!\r\n");
 8008888:	4804      	ldr	r0, [pc, #16]	; (800889c <hal_bus_init+0x48>)
 800888a:	f000 b9d9 	b.w	8008c40 <puts>
 800888e:	bf00      	nop
 8008890:	200106e4 	.word	0x200106e4
 8008894:	200000f0 	.word	0x200000f0
 8008898:	0800a3f8 	.word	0x0800a3f8
 800889c:	0800a40c 	.word	0x0800a40c

080088a0 <hal_bus_send>:

HAL_StatusTypeDef hal_bus_send(const uint8_t *data)
{
 80088a0:	b530      	push	{r4, r5, lr}
 80088a2:	b083      	sub	sp, #12
 80088a4:	4601      	mov	r1, r0
	memcpy(bus.sendOptronik.data, data, FDCAN_Convert_Datalength(RWS_OPTRONIK_DATA_LENGTH));
 80088a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80088aa:	4c0a      	ldr	r4, [pc, #40]	; (80088d4 <hal_bus_send+0x34>)
{
 80088ac:	9101      	str	r1, [sp, #4]
	memcpy(bus.sendOptronik.data, data, FDCAN_Convert_Datalength(RWS_OPTRONIK_DATA_LENGTH));
 80088ae:	f000 f8c5 	bl	8008a3c <FDCAN_Convert_Datalength>
 80088b2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80088b6:	9901      	ldr	r1, [sp, #4]
 80088b8:	4602      	mov	r2, r0
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 f924 	bl	8008b08 <memcpy>

	return HAL_FDCAN_AddMessageToTxFifoQ(bus.hfdcan, &bus.txHeader,
 80088c0:	4621      	mov	r1, r4
 80088c2:	462a      	mov	r2, r5
 80088c4:	f851 0b04 	ldr.w	r0, [r1], #4
			bus.sendOptronik.data);

}
 80088c8:	b003      	add	sp, #12
 80088ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return HAL_FDCAN_AddMessageToTxFifoQ(bus.hfdcan, &bus.txHeader,
 80088ce:	f7f9 b9ed 	b.w	8001cac <HAL_FDCAN_AddMessageToTxFifoQ>
 80088d2:	bf00      	nop
 80088d4:	200106e4 	.word	0x200106e4

080088d8 <HAL_FDCAN_RxFifo0Callback>:
	static uint8_t _counter = 0;
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[64];
	Bus_Rx_Buffer_t *pTMail;

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 80088d8:	07cb      	lsls	r3, r1, #31
 80088da:	d400      	bmi.n	80088de <HAL_FDCAN_RxFifo0Callback+0x6>
 80088dc:	4770      	bx	lr
{
 80088de:	b510      	push	{r4, lr}
 80088e0:	b09a      	sub	sp, #104	; 0x68
		/* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80088e2:	ab0a      	add	r3, sp, #40	; 0x28
 80088e4:	466a      	mov	r2, sp
 80088e6:	2140      	movs	r1, #64	; 0x40
 80088e8:	f7f9 fa46 	bl	8001d78 <HAL_FDCAN_GetRxMessage>
 80088ec:	bb50      	cbnz	r0, 8008944 <HAL_FDCAN_RxFifo0Callback+0x6c>
			if ((RxHeader.Identifier == RWS_PANEL_ID) || (RxHeader.IdType == FDCAN_STANDARD_ID)) {
 80088ee:	9b00      	ldr	r3, [sp, #0]
 80088f0:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80088f4:	d001      	beq.n	80088fa <HAL_FDCAN_RxFifo0Callback+0x22>
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	bb23      	cbnz	r3, 8008944 <HAL_FDCAN_RxFifo0Callback+0x6c>
				// allocate memory; receiver must be free it
				pTMail = osMailAlloc(opt_get_bus_mail(), 0);
 80088fa:	f7f7 ff8b 	bl	8000814 <opt_get_bus_mail>
 80088fe:	2100      	movs	r1, #0
 8008900:	f7fb ff34 	bl	800476c <osMailAlloc>
 8008904:	4604      	mov	r4, r0
				pTMail->lastTimestamp = osKernelSysTick();
 8008906:	f7fb fd53 	bl	80043b0 <osKernelSysTick>
				pTMail->id = RxHeader.Identifier;
				pTMail->idType = CAN_BUS_STANDARD;
 800890a:	2100      	movs	r1, #0
				pTMail->id = RxHeader.Identifier;
 800890c:	9b00      	ldr	r3, [sp, #0]
				pTMail->idType = CAN_BUS_STANDARD;
 800890e:	7121      	strb	r1, [r4, #4]
				pTMail->lastTimestamp = osKernelSysTick();
 8008910:	4602      	mov	r2, r0
 8008912:	64a2      	str	r2, [r4, #72]	; 0x48
				pTMail->len = FDCAN_Convert_Datalength(RxHeader.DataLength);
 8008914:	9803      	ldr	r0, [sp, #12]
				pTMail->id = RxHeader.Identifier;
 8008916:	6023      	str	r3, [r4, #0]
				pTMail->len = FDCAN_Convert_Datalength(RxHeader.DataLength);
 8008918:	f000 f890 	bl	8008a3c <FDCAN_Convert_Datalength>
 800891c:	7160      	strb	r0, [r4, #5]
				memcpy(pTMail->data, RxData, FDCAN_Convert_Datalength(RxHeader.DataLength));
 800891e:	9803      	ldr	r0, [sp, #12]
 8008920:	f000 f88c 	bl	8008a3c <FDCAN_Convert_Datalength>
 8008924:	a90a      	add	r1, sp, #40	; 0x28
 8008926:	4602      	mov	r2, r0
 8008928:	1da0      	adds	r0, r4, #6
 800892a:	f000 f8ed 	bl	8008b08 <memcpy>
				pTMail->counter = _counter++;
 800892e:	4a06      	ldr	r2, [pc, #24]	; (8008948 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8008930:	7813      	ldrb	r3, [r2, #0]
 8008932:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008936:	3301      	adds	r3, #1
 8008938:	7013      	strb	r3, [r2, #0]

				/* send mail queue*/
				osMailPut(opt_get_bus_mail(), pTMail);
 800893a:	f7f7 ff6b 	bl	8000814 <opt_get_bus_mail>
 800893e:	4621      	mov	r1, r4
 8008940:	f7fb ff58 	bl	80047f4 <osMailPut>
			}
		}
	}
}
 8008944:	b01a      	add	sp, #104	; 0x68
 8008946:	bd10      	pop	{r4, pc}
 8008948:	200106e0 	.word	0x200106e0

0800894c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
//	g_fdcan_bus_busOff_error = 1;
#if DEBUG_BUS==1
	printf("\t\t\tbus error!\r\n");
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <HAL_FDCAN_ErrorStatusCallback+0x8>)
 800894e:	f000 b977 	b.w	8008c40 <puts>
 8008952:	bf00      	nop
 8008954:	0800a414 	.word	0x0800a414

08008958 <lrf_init>:

static Noptel_t noptel;

HAL_StatusTypeDef lrf_init()
{
	return noptel_init(&noptel, &hlpuart1, LRF_ENABLE_GPIO_Port, LRF_ENABLE_Pin);
 8008958:	4a02      	ldr	r2, [pc, #8]	; (8008964 <lrf_init+0xc>)
 800895a:	4903      	ldr	r1, [pc, #12]	; (8008968 <lrf_init+0x10>)
 800895c:	4803      	ldr	r0, [pc, #12]	; (800896c <lrf_init+0x14>)
 800895e:	2304      	movs	r3, #4
 8008960:	f7ff babe 	b.w	8007ee0 <noptel_init>
 8008964:	48000800 	.word	0x48000800
 8008968:	20000218 	.word	0x20000218
 800896c:	2001079c 	.word	0x2001079c

08008970 <lrf_power>:
{
	return HAL_OK;
}

HAL_StatusTypeDef lrf_power(const uint8_t power)
{
 8008970:	4601      	mov	r1, r0
	return noptel_power(&noptel, power);
 8008972:	4801      	ldr	r0, [pc, #4]	; (8008978 <lrf_power+0x8>)
 8008974:	f7ff bace 	b.w	8007f14 <noptel_power>
 8008978:	2001079c 	.word	0x2001079c

0800897c <lrf_set_pointer>:
}

HAL_StatusTypeDef lrf_set_pointer(const uint8_t power)
{
 800897c:	4601      	mov	r1, r0
	return noptel_set_pointer(&noptel, power);
 800897e:	4801      	ldr	r0, [pc, #4]	; (8008984 <lrf_set_pointer+0x8>)
 8008980:	f7ff bae6 	b.w	8007f50 <noptel_set_pointer>
 8008984:	2001079c 	.word	0x2001079c

08008988 <lrf_measure_start_with_status>:
{
	return noptel_measure_start(&noptel);
}

HAL_StatusTypeDef lrf_measure_start_with_status(uint8_t *status)
{
 8008988:	4601      	mov	r1, r0
	return noptel_measure_start_with_status(&noptel, status);
 800898a:	4801      	ldr	r0, [pc, #4]	; (8008990 <lrf_measure_start_with_status+0x8>)
 800898c:	f7ff bb3a 	b.w	8008004 <noptel_measure_start_with_status>
 8008990:	2001079c 	.word	0x2001079c

08008994 <lrf_get_counter>:
	return HAL_OK;
}

uint8_t lrf_get_counter()
{
	return noptel.value.counter;
 8008994:	4b01      	ldr	r3, [pc, #4]	; (800899c <lrf_get_counter+0x8>)
}
 8008996:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 800899a:	4770      	bx	lr
 800899c:	2001079c 	.word	0x2001079c

080089a0 <lrf_get_value>:

void lrf_get_value(uint32_t *value)
{
	value[0] = noptel.value.distance[0];
 80089a0:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <lrf_get_value+0x10>)
 80089a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a4:	6002      	str	r2, [r0, #0]
	value[1] = noptel.value.distance[1];
 80089a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a8:	6042      	str	r2, [r0, #4]
	value[2] = noptel.value.distance[2];
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	6083      	str	r3, [r0, #8]
}
 80089ae:	4770      	bx	lr
 80089b0:	2001079c 	.word	0x2001079c

080089b4 <FDCAN_RX_Interrupt_Config>:

const uint8_t dlc2len[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64 };


__weak void FDCAN_RX_Interrupt_Config(FDCAN_HandleTypeDef *hfdcan)
{
 80089b4:	b510      	push	{r4, lr}
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80089b6:	2200      	movs	r2, #0
 80089b8:	2101      	movs	r1, #1
{
 80089ba:	4604      	mov	r4, r0
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80089bc:	f7f9 fa60 	bl	8001e80 <HAL_FDCAN_ActivateNotification>
 80089c0:	b938      	cbnz	r0, 80089d2 <FDCAN_RX_Interrupt_Config+0x1e>
		Error_Handler();
	}
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_BUS_OFF, 0) != HAL_OK) {
 80089c2:	2200      	movs	r2, #0
 80089c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7f9 fa59 	bl	8001e80 <HAL_FDCAN_ActivateNotification>
 80089ce:	b950      	cbnz	r0, 80089e6 <FDCAN_RX_Interrupt_Config+0x32>
		Error_Handler();
	}
}
 80089d0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80089d2:	f7f8 f9b7 	bl	8000d44 <Error_Handler>
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_BUS_OFF, 0) != HAL_OK) {
 80089d6:	2200      	movs	r2, #0
 80089d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089dc:	4620      	mov	r0, r4
 80089de:	f7f9 fa4f 	bl	8001e80 <HAL_FDCAN_ActivateNotification>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d0f4      	beq.n	80089d0 <FDCAN_RX_Interrupt_Config+0x1c>
}
 80089e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 80089ea:	f7f8 b9ab 	b.w	8000d44 <Error_Handler>
 80089ee:	bf00      	nop

080089f0 <FDCAN_Config>:
__weak void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan)
{
	/* Configure and enable Tx Delay Compensation, required for BRS mode.
	 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
	 TdcFilter default recommended value: 0 */
	if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS) {
 80089f0:	6883      	ldr	r3, [r0, #8]
 80089f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
{
 80089f6:	b510      	push	{r4, lr}
 80089f8:	4604      	mov	r4, r0
	if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS) {
 80089fa:	d00b      	beq.n	8008a14 <FDCAN_Config+0x24>
			Error_Handler();
		}
	}

	/* Activate Rx FIFO 0 new message notification */
	FDCAN_RX_Interrupt_Config(hfdcan);
 80089fc:	4620      	mov	r0, r4
 80089fe:	f7ff ffd9 	bl	80089b4 <FDCAN_RX_Interrupt_Config>

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7f9 f93a 	bl	8001c7c <HAL_FDCAN_Start>
 8008a08:	b900      	cbnz	r0, 8008a0c <FDCAN_Config+0x1c>
		Error_Handler();
	}

}
 8008a0a:	bd10      	pop	{r4, pc}
 8008a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 8008a10:	f7f8 b998 	b.w	8000d44 <Error_Handler>
		if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan,
 8008a14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008a16:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008a18:	2200      	movs	r2, #0
 8008a1a:	fb03 f101 	mul.w	r1, r3, r1
 8008a1e:	f7f9 f909 	bl	8001c34 <HAL_FDCAN_ConfigTxDelayCompensation>
 8008a22:	b938      	cbnz	r0, 8008a34 <FDCAN_Config+0x44>
		if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7f9 f917 	bl	8001c58 <HAL_FDCAN_EnableTxDelayCompensation>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0e6      	beq.n	80089fc <FDCAN_Config+0xc>
			Error_Handler();
 8008a2e:	f7f8 f989 	bl	8000d44 <Error_Handler>
 8008a32:	e7e3      	b.n	80089fc <FDCAN_Config+0xc>
			Error_Handler();
 8008a34:	f7f8 f986 	bl	8000d44 <Error_Handler>
 8008a38:	e7f4      	b.n	8008a24 <FDCAN_Config+0x34>
 8008a3a:	bf00      	nop

08008a3c <FDCAN_Convert_Datalength>:


uint8_t FDCAN_Convert_Datalength(const uint32_t datalength)
{
	return dlc2len[datalength >> 16];
 8008a3c:	4b01      	ldr	r3, [pc, #4]	; (8008a44 <FDCAN_Convert_Datalength+0x8>)
 8008a3e:	0c00      	lsrs	r0, r0, #16
}
 8008a40:	5c18      	ldrb	r0, [r3, r0]
 8008a42:	4770      	bx	lr
 8008a44:	0800a424 	.word	0x0800a424

08008a48 <FDCAN_RX_Filter_Panel>:
		Error_Handler();
	}
}

void FDCAN_RX_Filter_Panel(FDCAN_HandleTypeDef *hfdcan, const uint32_t filterIndex)
{
 8008a48:	b530      	push	{r4, r5, lr}
 8008a4a:	b089      	sub	sp, #36	; 0x24
	FDCAN_FilterTypeDef sFilterConfig;
	uint32_t filterId1 = RWS_PANEL_ID, filterId2 = RWS_PANEL_ID + 0xF;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8008a4c:	2300      	movs	r3, #0
	sFilterConfig.FilterIndex = filterIndex;
 8008a4e:	e9cd 3102 	strd	r3, r1, [sp, #8]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0_HP;
 8008a52:	2505      	movs	r5, #5
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8008a54:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterID1 = filterId1;
 8008a56:	f44f 7244 	mov.w	r2, #784	; 0x310
	sFilterConfig.FilterID2 = filterId2;
 8008a5a:	f240 331f 	movw	r3, #799	; 0x31f
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 8008a5e:	a902      	add	r1, sp, #8
	sFilterConfig.FilterID1 = filterId1;
 8008a60:	e9cd 5205 	strd	r5, r2, [sp, #20]
{
 8008a64:	4604      	mov	r4, r0
	sFilterConfig.FilterID2 = filterId2;
 8008a66:	9307      	str	r3, [sp, #28]
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 8008a68:	f7f9 f892 	bl	8001b90 <HAL_FDCAN_ConfigFilter>
 8008a6c:	b948      	cbnz	r0, 8008a82 <FDCAN_RX_Filter_Panel+0x3a>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE,
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2202      	movs	r2, #2
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7f9 f8bc 	bl	8001bf4 <HAL_FDCAN_ConfigGlobalFilter>
 8008a7c:	b920      	cbnz	r0, 8008a88 <FDCAN_RX_Filter_Panel+0x40>
	FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
	}
}
 8008a7e:	b009      	add	sp, #36	; 0x24
 8008a80:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8008a82:	f7f8 f95f 	bl	8000d44 <Error_Handler>
 8008a86:	e7f2      	b.n	8008a6e <FDCAN_RX_Filter_Panel+0x26>
		Error_Handler();
 8008a88:	f7f8 f95c 	bl	8000d44 <Error_Handler>
}
 8008a8c:	b009      	add	sp, #36	; 0x24
 8008a8e:	bd30      	pop	{r4, r5, pc}

08008a90 <FDCAN_TX_Config>:
void FDCAN_TX_Config(FDCAN_TxHeaderTypeDef *txHeader, const uint32_t txID,
		const uint32_t dataLength)
{
	/* Prepare Tx Header */
	txHeader->Identifier = txID;
	txHeader->IdType = FDCAN_STANDARD_ID;
 8008a90:	2300      	movs	r3, #0
{
 8008a92:	b410      	push	{r4}
	txHeader->TxFrameType = FDCAN_DATA_FRAME;
	txHeader->DataLength = dataLength;
 8008a94:	e9c0 3202 	strd	r3, r2, [r0, #8]
	txHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	txHeader->BitRateSwitch = FDCAN_BRS_ON;
 8008a98:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
	txHeader->FDFormat = FDCAN_FD_CAN;
 8008a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	txHeader->BitRateSwitch = FDCAN_BRS_ON;
 8008aa0:	e9c0 3404 	strd	r3, r4, [r0, #16]
	txHeader->IdType = FDCAN_STANDARD_ID;
 8008aa4:	e9c0 1300 	strd	r1, r3, [r0]
	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008aa8:	e9c0 2306 	strd	r2, r3, [r0, #24]
	txHeader->MessageMarker = 0;
}
 8008aac:	f85d 4b04 	ldr.w	r4, [sp], #4
	txHeader->MessageMarker = 0;
 8008ab0:	6203      	str	r3, [r0, #32]
}
 8008ab2:	4770      	bx	lr

08008ab4 <__errno>:
 8008ab4:	4b01      	ldr	r3, [pc, #4]	; (8008abc <__errno+0x8>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000030 	.word	0x20000030

08008ac0 <__libc_init_array>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	4d0d      	ldr	r5, [pc, #52]	; (8008af8 <__libc_init_array+0x38>)
 8008ac4:	4c0d      	ldr	r4, [pc, #52]	; (8008afc <__libc_init_array+0x3c>)
 8008ac6:	1b64      	subs	r4, r4, r5
 8008ac8:	10a4      	asrs	r4, r4, #2
 8008aca:	2600      	movs	r6, #0
 8008acc:	42a6      	cmp	r6, r4
 8008ace:	d109      	bne.n	8008ae4 <__libc_init_array+0x24>
 8008ad0:	4d0b      	ldr	r5, [pc, #44]	; (8008b00 <__libc_init_array+0x40>)
 8008ad2:	4c0c      	ldr	r4, [pc, #48]	; (8008b04 <__libc_init_array+0x44>)
 8008ad4:	f001 f908 	bl	8009ce8 <_init>
 8008ad8:	1b64      	subs	r4, r4, r5
 8008ada:	10a4      	asrs	r4, r4, #2
 8008adc:	2600      	movs	r6, #0
 8008ade:	42a6      	cmp	r6, r4
 8008ae0:	d105      	bne.n	8008aee <__libc_init_array+0x2e>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae8:	4798      	blx	r3
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7ee      	b.n	8008acc <__libc_init_array+0xc>
 8008aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af2:	4798      	blx	r3
 8008af4:	3601      	adds	r6, #1
 8008af6:	e7f2      	b.n	8008ade <__libc_init_array+0x1e>
 8008af8:	0800a4d4 	.word	0x0800a4d4
 8008afc:	0800a4d4 	.word	0x0800a4d4
 8008b00:	0800a4d4 	.word	0x0800a4d4
 8008b04:	0800a4d8 	.word	0x0800a4d8

08008b08 <memcpy>:
 8008b08:	440a      	add	r2, r1
 8008b0a:	4291      	cmp	r1, r2
 8008b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b10:	d100      	bne.n	8008b14 <memcpy+0xc>
 8008b12:	4770      	bx	lr
 8008b14:	b510      	push	{r4, lr}
 8008b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1e:	4291      	cmp	r1, r2
 8008b20:	d1f9      	bne.n	8008b16 <memcpy+0xe>
 8008b22:	bd10      	pop	{r4, pc}

08008b24 <memset>:
 8008b24:	4402      	add	r2, r0
 8008b26:	4603      	mov	r3, r0
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d100      	bne.n	8008b2e <memset+0xa>
 8008b2c:	4770      	bx	lr
 8008b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b32:	e7f9      	b.n	8008b28 <memset+0x4>

08008b34 <iprintf>:
 8008b34:	b40f      	push	{r0, r1, r2, r3}
 8008b36:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <iprintf+0x2c>)
 8008b38:	b513      	push	{r0, r1, r4, lr}
 8008b3a:	681c      	ldr	r4, [r3, #0]
 8008b3c:	b124      	cbz	r4, 8008b48 <iprintf+0x14>
 8008b3e:	69a3      	ldr	r3, [r4, #24]
 8008b40:	b913      	cbnz	r3, 8008b48 <iprintf+0x14>
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fb2c 	bl	80091a0 <__sinit>
 8008b48:	ab05      	add	r3, sp, #20
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	68a1      	ldr	r1, [r4, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fd3d 	bl	80095d0 <_vfiprintf_r>
 8008b56:	b002      	add	sp, #8
 8008b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b5c:	b004      	add	sp, #16
 8008b5e:	4770      	bx	lr
 8008b60:	20000030 	.word	0x20000030

08008b64 <_puts_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	460e      	mov	r6, r1
 8008b68:	4605      	mov	r5, r0
 8008b6a:	b118      	cbz	r0, 8008b74 <_puts_r+0x10>
 8008b6c:	6983      	ldr	r3, [r0, #24]
 8008b6e:	b90b      	cbnz	r3, 8008b74 <_puts_r+0x10>
 8008b70:	f000 fb16 	bl	80091a0 <__sinit>
 8008b74:	69ab      	ldr	r3, [r5, #24]
 8008b76:	68ac      	ldr	r4, [r5, #8]
 8008b78:	b913      	cbnz	r3, 8008b80 <_puts_r+0x1c>
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 fb10 	bl	80091a0 <__sinit>
 8008b80:	4b2c      	ldr	r3, [pc, #176]	; (8008c34 <_puts_r+0xd0>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d120      	bne.n	8008bc8 <_puts_r+0x64>
 8008b86:	686c      	ldr	r4, [r5, #4]
 8008b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b8a:	07db      	lsls	r3, r3, #31
 8008b8c:	d405      	bmi.n	8008b9a <_puts_r+0x36>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	0598      	lsls	r0, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_puts_r+0x36>
 8008b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b96:	f000 fba1 	bl	80092dc <__retarget_lock_acquire_recursive>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	0719      	lsls	r1, r3, #28
 8008b9e:	d51d      	bpl.n	8008bdc <_puts_r+0x78>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	b1db      	cbz	r3, 8008bdc <_puts_r+0x78>
 8008ba4:	3e01      	subs	r6, #1
 8008ba6:	68a3      	ldr	r3, [r4, #8]
 8008ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bac:	3b01      	subs	r3, #1
 8008bae:	60a3      	str	r3, [r4, #8]
 8008bb0:	bb39      	cbnz	r1, 8008c02 <_puts_r+0x9e>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da38      	bge.n	8008c28 <_puts_r+0xc4>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	210a      	movs	r1, #10
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f916 	bl	8008dec <__swbuf_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d011      	beq.n	8008be8 <_puts_r+0x84>
 8008bc4:	250a      	movs	r5, #10
 8008bc6:	e011      	b.n	8008bec <_puts_r+0x88>
 8008bc8:	4b1b      	ldr	r3, [pc, #108]	; (8008c38 <_puts_r+0xd4>)
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	d101      	bne.n	8008bd2 <_puts_r+0x6e>
 8008bce:	68ac      	ldr	r4, [r5, #8]
 8008bd0:	e7da      	b.n	8008b88 <_puts_r+0x24>
 8008bd2:	4b1a      	ldr	r3, [pc, #104]	; (8008c3c <_puts_r+0xd8>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	bf08      	it	eq
 8008bd8:	68ec      	ldreq	r4, [r5, #12]
 8008bda:	e7d5      	b.n	8008b88 <_puts_r+0x24>
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 f956 	bl	8008e90 <__swsetup_r>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d0dd      	beq.n	8008ba4 <_puts_r+0x40>
 8008be8:	f04f 35ff 	mov.w	r5, #4294967295
 8008bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bee:	07da      	lsls	r2, r3, #31
 8008bf0:	d405      	bmi.n	8008bfe <_puts_r+0x9a>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	059b      	lsls	r3, r3, #22
 8008bf6:	d402      	bmi.n	8008bfe <_puts_r+0x9a>
 8008bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bfa:	f000 fb70 	bl	80092de <__retarget_lock_release_recursive>
 8008bfe:	4628      	mov	r0, r5
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	da04      	bge.n	8008c10 <_puts_r+0xac>
 8008c06:	69a2      	ldr	r2, [r4, #24]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	dc06      	bgt.n	8008c1a <_puts_r+0xb6>
 8008c0c:	290a      	cmp	r1, #10
 8008c0e:	d004      	beq.n	8008c1a <_puts_r+0xb6>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	6022      	str	r2, [r4, #0]
 8008c16:	7019      	strb	r1, [r3, #0]
 8008c18:	e7c5      	b.n	8008ba6 <_puts_r+0x42>
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 f8e5 	bl	8008dec <__swbuf_r>
 8008c22:	3001      	adds	r0, #1
 8008c24:	d1bf      	bne.n	8008ba6 <_puts_r+0x42>
 8008c26:	e7df      	b.n	8008be8 <_puts_r+0x84>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	250a      	movs	r5, #10
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	701d      	strb	r5, [r3, #0]
 8008c32:	e7db      	b.n	8008bec <_puts_r+0x88>
 8008c34:	0800a458 	.word	0x0800a458
 8008c38:	0800a478 	.word	0x0800a478
 8008c3c:	0800a438 	.word	0x0800a438

08008c40 <puts>:
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <puts+0xc>)
 8008c42:	4601      	mov	r1, r0
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f7ff bf8d 	b.w	8008b64 <_puts_r>
 8008c4a:	bf00      	nop
 8008c4c:	20000030 	.word	0x20000030

08008c50 <setbuf>:
 8008c50:	2900      	cmp	r1, #0
 8008c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c56:	bf0c      	ite	eq
 8008c58:	2202      	moveq	r2, #2
 8008c5a:	2200      	movne	r2, #0
 8008c5c:	f000 b800 	b.w	8008c60 <setvbuf>

08008c60 <setvbuf>:
 8008c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	461d      	mov	r5, r3
 8008c66:	4b5d      	ldr	r3, [pc, #372]	; (8008ddc <setvbuf+0x17c>)
 8008c68:	681f      	ldr	r7, [r3, #0]
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	4690      	mov	r8, r2
 8008c70:	b127      	cbz	r7, 8008c7c <setvbuf+0x1c>
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	b913      	cbnz	r3, 8008c7c <setvbuf+0x1c>
 8008c76:	4638      	mov	r0, r7
 8008c78:	f000 fa92 	bl	80091a0 <__sinit>
 8008c7c:	4b58      	ldr	r3, [pc, #352]	; (8008de0 <setvbuf+0x180>)
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d167      	bne.n	8008d52 <setvbuf+0xf2>
 8008c82:	687c      	ldr	r4, [r7, #4]
 8008c84:	f1b8 0f02 	cmp.w	r8, #2
 8008c88:	d006      	beq.n	8008c98 <setvbuf+0x38>
 8008c8a:	f1b8 0f01 	cmp.w	r8, #1
 8008c8e:	f200 809f 	bhi.w	8008dd0 <setvbuf+0x170>
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	f2c0 809c 	blt.w	8008dd0 <setvbuf+0x170>
 8008c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c9a:	07db      	lsls	r3, r3, #31
 8008c9c:	d405      	bmi.n	8008caa <setvbuf+0x4a>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d402      	bmi.n	8008caa <setvbuf+0x4a>
 8008ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca6:	f000 fb19 	bl	80092dc <__retarget_lock_acquire_recursive>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4638      	mov	r0, r7
 8008cae:	f000 f9e3 	bl	8009078 <_fflush_r>
 8008cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb4:	b141      	cbz	r1, 8008cc8 <setvbuf+0x68>
 8008cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cba:	4299      	cmp	r1, r3
 8008cbc:	d002      	beq.n	8008cc4 <setvbuf+0x64>
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f000 fb7c 	bl	80093bc <_free_r>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61a3      	str	r3, [r4, #24]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	0619      	lsls	r1, r3, #24
 8008cd2:	d503      	bpl.n	8008cdc <setvbuf+0x7c>
 8008cd4:	6921      	ldr	r1, [r4, #16]
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f000 fb70 	bl	80093bc <_free_r>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	f1b8 0f02 	cmp.w	r8, #2
 8008cea:	81a3      	strh	r3, [r4, #12]
 8008cec:	d06c      	beq.n	8008dc8 <setvbuf+0x168>
 8008cee:	ab01      	add	r3, sp, #4
 8008cf0:	466a      	mov	r2, sp
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	f000 faf3 	bl	80092e0 <__swhatbuf_r>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	4318      	orrs	r0, r3
 8008cfe:	81a0      	strh	r0, [r4, #12]
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	d130      	bne.n	8008d66 <setvbuf+0x106>
 8008d04:	9d00      	ldr	r5, [sp, #0]
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 fb50 	bl	80093ac <malloc>
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d155      	bne.n	8008dbe <setvbuf+0x15e>
 8008d12:	f8dd 9000 	ldr.w	r9, [sp]
 8008d16:	45a9      	cmp	r9, r5
 8008d18:	d14a      	bne.n	8008db0 <setvbuf+0x150>
 8008d1a:	f04f 35ff 	mov.w	r5, #4294967295
 8008d1e:	2200      	movs	r2, #0
 8008d20:	60a2      	str	r2, [r4, #8]
 8008d22:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	6122      	str	r2, [r4, #16]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d30:	6162      	str	r2, [r4, #20]
 8008d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d34:	f043 0302 	orr.w	r3, r3, #2
 8008d38:	07d2      	lsls	r2, r2, #31
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	d405      	bmi.n	8008d4a <setvbuf+0xea>
 8008d3e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008d42:	d102      	bne.n	8008d4a <setvbuf+0xea>
 8008d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d46:	f000 faca 	bl	80092de <__retarget_lock_release_recursive>
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	b003      	add	sp, #12
 8008d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d52:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <setvbuf+0x184>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d101      	bne.n	8008d5c <setvbuf+0xfc>
 8008d58:	68bc      	ldr	r4, [r7, #8]
 8008d5a:	e793      	b.n	8008c84 <setvbuf+0x24>
 8008d5c:	4b22      	ldr	r3, [pc, #136]	; (8008de8 <setvbuf+0x188>)
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	bf08      	it	eq
 8008d62:	68fc      	ldreq	r4, [r7, #12]
 8008d64:	e78e      	b.n	8008c84 <setvbuf+0x24>
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d0cd      	beq.n	8008d06 <setvbuf+0xa6>
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	b913      	cbnz	r3, 8008d74 <setvbuf+0x114>
 8008d6e:	4638      	mov	r0, r7
 8008d70:	f000 fa16 	bl	80091a0 <__sinit>
 8008d74:	f1b8 0f01 	cmp.w	r8, #1
 8008d78:	bf08      	it	eq
 8008d7a:	89a3      	ldrheq	r3, [r4, #12]
 8008d7c:	6026      	str	r6, [r4, #0]
 8008d7e:	bf04      	itt	eq
 8008d80:	f043 0301 	orreq.w	r3, r3, #1
 8008d84:	81a3      	strheq	r3, [r4, #12]
 8008d86:	89a2      	ldrh	r2, [r4, #12]
 8008d88:	f012 0308 	ands.w	r3, r2, #8
 8008d8c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008d90:	d01c      	beq.n	8008dcc <setvbuf+0x16c>
 8008d92:	07d3      	lsls	r3, r2, #31
 8008d94:	bf41      	itttt	mi
 8008d96:	2300      	movmi	r3, #0
 8008d98:	426d      	negmi	r5, r5
 8008d9a:	60a3      	strmi	r3, [r4, #8]
 8008d9c:	61a5      	strmi	r5, [r4, #24]
 8008d9e:	bf58      	it	pl
 8008da0:	60a5      	strpl	r5, [r4, #8]
 8008da2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008da4:	f015 0501 	ands.w	r5, r5, #1
 8008da8:	d115      	bne.n	8008dd6 <setvbuf+0x176>
 8008daa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008dae:	e7c8      	b.n	8008d42 <setvbuf+0xe2>
 8008db0:	4648      	mov	r0, r9
 8008db2:	f000 fafb 	bl	80093ac <malloc>
 8008db6:	4606      	mov	r6, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0ae      	beq.n	8008d1a <setvbuf+0xba>
 8008dbc:	464d      	mov	r5, r9
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7d0      	b.n	8008d6a <setvbuf+0x10a>
 8008dc8:	2500      	movs	r5, #0
 8008dca:	e7a8      	b.n	8008d1e <setvbuf+0xbe>
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	e7e8      	b.n	8008da2 <setvbuf+0x142>
 8008dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8008dd4:	e7b9      	b.n	8008d4a <setvbuf+0xea>
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	e7b7      	b.n	8008d4a <setvbuf+0xea>
 8008dda:	bf00      	nop
 8008ddc:	20000030 	.word	0x20000030
 8008de0:	0800a458 	.word	0x0800a458
 8008de4:	0800a478 	.word	0x0800a478
 8008de8:	0800a438 	.word	0x0800a438

08008dec <__swbuf_r>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	460e      	mov	r6, r1
 8008df0:	4614      	mov	r4, r2
 8008df2:	4605      	mov	r5, r0
 8008df4:	b118      	cbz	r0, 8008dfe <__swbuf_r+0x12>
 8008df6:	6983      	ldr	r3, [r0, #24]
 8008df8:	b90b      	cbnz	r3, 8008dfe <__swbuf_r+0x12>
 8008dfa:	f000 f9d1 	bl	80091a0 <__sinit>
 8008dfe:	4b21      	ldr	r3, [pc, #132]	; (8008e84 <__swbuf_r+0x98>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	d12b      	bne.n	8008e5c <__swbuf_r+0x70>
 8008e04:	686c      	ldr	r4, [r5, #4]
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	071a      	lsls	r2, r3, #28
 8008e0e:	d52f      	bpl.n	8008e70 <__swbuf_r+0x84>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b36b      	cbz	r3, 8008e70 <__swbuf_r+0x84>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	1ac0      	subs	r0, r0, r3
 8008e1a:	6963      	ldr	r3, [r4, #20]
 8008e1c:	b2f6      	uxtb	r6, r6
 8008e1e:	4283      	cmp	r3, r0
 8008e20:	4637      	mov	r7, r6
 8008e22:	dc04      	bgt.n	8008e2e <__swbuf_r+0x42>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	f000 f926 	bl	8009078 <_fflush_r>
 8008e2c:	bb30      	cbnz	r0, 8008e7c <__swbuf_r+0x90>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6963      	ldr	r3, [r4, #20]
 8008e3e:	3001      	adds	r0, #1
 8008e40:	4283      	cmp	r3, r0
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x62>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d506      	bpl.n	8008e58 <__swbuf_r+0x6c>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d104      	bne.n	8008e58 <__swbuf_r+0x6c>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 f911 	bl	8009078 <_fflush_r>
 8008e56:	b988      	cbnz	r0, 8008e7c <__swbuf_r+0x90>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <__swbuf_r+0x9c>)
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d101      	bne.n	8008e66 <__swbuf_r+0x7a>
 8008e62:	68ac      	ldr	r4, [r5, #8]
 8008e64:	e7cf      	b.n	8008e06 <__swbuf_r+0x1a>
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <__swbuf_r+0xa0>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	bf08      	it	eq
 8008e6c:	68ec      	ldreq	r4, [r5, #12]
 8008e6e:	e7ca      	b.n	8008e06 <__swbuf_r+0x1a>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f80c 	bl	8008e90 <__swsetup_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0cb      	beq.n	8008e14 <__swbuf_r+0x28>
 8008e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e80:	e7ea      	b.n	8008e58 <__swbuf_r+0x6c>
 8008e82:	bf00      	nop
 8008e84:	0800a458 	.word	0x0800a458
 8008e88:	0800a478 	.word	0x0800a478
 8008e8c:	0800a438 	.word	0x0800a438

08008e90 <__swsetup_r>:
 8008e90:	4b32      	ldr	r3, [pc, #200]	; (8008f5c <__swsetup_r+0xcc>)
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	4606      	mov	r6, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	b125      	cbz	r5, 8008ea6 <__swsetup_r+0x16>
 8008e9c:	69ab      	ldr	r3, [r5, #24]
 8008e9e:	b913      	cbnz	r3, 8008ea6 <__swsetup_r+0x16>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 f97d 	bl	80091a0 <__sinit>
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <__swsetup_r+0xd0>)
 8008ea8:	429c      	cmp	r4, r3
 8008eaa:	d10f      	bne.n	8008ecc <__swsetup_r+0x3c>
 8008eac:	686c      	ldr	r4, [r5, #4]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb4:	0719      	lsls	r1, r3, #28
 8008eb6:	d42c      	bmi.n	8008f12 <__swsetup_r+0x82>
 8008eb8:	06dd      	lsls	r5, r3, #27
 8008eba:	d411      	bmi.n	8008ee0 <__swsetup_r+0x50>
 8008ebc:	2309      	movs	r3, #9
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	e03e      	b.n	8008f4a <__swsetup_r+0xba>
 8008ecc:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <__swsetup_r+0xd4>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <__swsetup_r+0x46>
 8008ed2:	68ac      	ldr	r4, [r5, #8]
 8008ed4:	e7eb      	b.n	8008eae <__swsetup_r+0x1e>
 8008ed6:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <__swsetup_r+0xd8>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	bf08      	it	eq
 8008edc:	68ec      	ldreq	r4, [r5, #12]
 8008ede:	e7e6      	b.n	8008eae <__swsetup_r+0x1e>
 8008ee0:	0758      	lsls	r0, r3, #29
 8008ee2:	d512      	bpl.n	8008f0a <__swsetup_r+0x7a>
 8008ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ee6:	b141      	cbz	r1, 8008efa <__swsetup_r+0x6a>
 8008ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d002      	beq.n	8008ef6 <__swsetup_r+0x66>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 fa63 	bl	80093bc <_free_r>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	2300      	movs	r3, #0
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0308 	orr.w	r3, r3, #8
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	b94b      	cbnz	r3, 8008f2a <__swsetup_r+0x9a>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f20:	d003      	beq.n	8008f2a <__swsetup_r+0x9a>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 fa01 	bl	800932c <__smakebuf_r>
 8008f2a:	89a0      	ldrh	r0, [r4, #12]
 8008f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f30:	f010 0301 	ands.w	r3, r0, #1
 8008f34:	d00a      	beq.n	8008f4c <__swsetup_r+0xbc>
 8008f36:	2300      	movs	r3, #0
 8008f38:	60a3      	str	r3, [r4, #8]
 8008f3a:	6963      	ldr	r3, [r4, #20]
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	61a3      	str	r3, [r4, #24]
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	b943      	cbnz	r3, 8008f56 <__swsetup_r+0xc6>
 8008f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f48:	d1ba      	bne.n	8008ec0 <__swsetup_r+0x30>
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	0781      	lsls	r1, r0, #30
 8008f4e:	bf58      	it	pl
 8008f50:	6963      	ldrpl	r3, [r4, #20]
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	e7f4      	b.n	8008f40 <__swsetup_r+0xb0>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e7f7      	b.n	8008f4a <__swsetup_r+0xba>
 8008f5a:	bf00      	nop
 8008f5c:	20000030 	.word	0x20000030
 8008f60:	0800a458 	.word	0x0800a458
 8008f64:	0800a478 	.word	0x0800a478
 8008f68:	0800a438 	.word	0x0800a438

08008f6c <__sflush_r>:
 8008f6c:	898a      	ldrh	r2, [r1, #12]
 8008f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f72:	4605      	mov	r5, r0
 8008f74:	0710      	lsls	r0, r2, #28
 8008f76:	460c      	mov	r4, r1
 8008f78:	d458      	bmi.n	800902c <__sflush_r+0xc0>
 8008f7a:	684b      	ldr	r3, [r1, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dc05      	bgt.n	8008f8c <__sflush_r+0x20>
 8008f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dc02      	bgt.n	8008f8c <__sflush_r+0x20>
 8008f86:	2000      	movs	r0, #0
 8008f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	d0f9      	beq.n	8008f86 <__sflush_r+0x1a>
 8008f92:	2300      	movs	r3, #0
 8008f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f98:	682f      	ldr	r7, [r5, #0]
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	d032      	beq.n	8009004 <__sflush_r+0x98>
 8008f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	075a      	lsls	r2, r3, #29
 8008fa4:	d505      	bpl.n	8008fb2 <__sflush_r+0x46>
 8008fa6:	6863      	ldr	r3, [r4, #4]
 8008fa8:	1ac0      	subs	r0, r0, r3
 8008faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fac:	b10b      	cbz	r3, 8008fb2 <__sflush_r+0x46>
 8008fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fb0:	1ac0      	subs	r0, r0, r3
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb8:	6a21      	ldr	r1, [r4, #32]
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b0      	blx	r6
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	d106      	bne.n	8008fd2 <__sflush_r+0x66>
 8008fc4:	6829      	ldr	r1, [r5, #0]
 8008fc6:	291d      	cmp	r1, #29
 8008fc8:	d82c      	bhi.n	8009024 <__sflush_r+0xb8>
 8008fca:	4a2a      	ldr	r2, [pc, #168]	; (8009074 <__sflush_r+0x108>)
 8008fcc:	40ca      	lsrs	r2, r1
 8008fce:	07d6      	lsls	r6, r2, #31
 8008fd0:	d528      	bpl.n	8009024 <__sflush_r+0xb8>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	6062      	str	r2, [r4, #4]
 8008fd6:	04d9      	lsls	r1, r3, #19
 8008fd8:	6922      	ldr	r2, [r4, #16]
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	d504      	bpl.n	8008fe8 <__sflush_r+0x7c>
 8008fde:	1c42      	adds	r2, r0, #1
 8008fe0:	d101      	bne.n	8008fe6 <__sflush_r+0x7a>
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	b903      	cbnz	r3, 8008fe8 <__sflush_r+0x7c>
 8008fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8008fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fea:	602f      	str	r7, [r5, #0]
 8008fec:	2900      	cmp	r1, #0
 8008fee:	d0ca      	beq.n	8008f86 <__sflush_r+0x1a>
 8008ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ff4:	4299      	cmp	r1, r3
 8008ff6:	d002      	beq.n	8008ffe <__sflush_r+0x92>
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f000 f9df 	bl	80093bc <_free_r>
 8008ffe:	2000      	movs	r0, #0
 8009000:	6360      	str	r0, [r4, #52]	; 0x34
 8009002:	e7c1      	b.n	8008f88 <__sflush_r+0x1c>
 8009004:	6a21      	ldr	r1, [r4, #32]
 8009006:	2301      	movs	r3, #1
 8009008:	4628      	mov	r0, r5
 800900a:	47b0      	blx	r6
 800900c:	1c41      	adds	r1, r0, #1
 800900e:	d1c7      	bne.n	8008fa0 <__sflush_r+0x34>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0c4      	beq.n	8008fa0 <__sflush_r+0x34>
 8009016:	2b1d      	cmp	r3, #29
 8009018:	d001      	beq.n	800901e <__sflush_r+0xb2>
 800901a:	2b16      	cmp	r3, #22
 800901c:	d101      	bne.n	8009022 <__sflush_r+0xb6>
 800901e:	602f      	str	r7, [r5, #0]
 8009020:	e7b1      	b.n	8008f86 <__sflush_r+0x1a>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	e7ad      	b.n	8008f88 <__sflush_r+0x1c>
 800902c:	690f      	ldr	r7, [r1, #16]
 800902e:	2f00      	cmp	r7, #0
 8009030:	d0a9      	beq.n	8008f86 <__sflush_r+0x1a>
 8009032:	0793      	lsls	r3, r2, #30
 8009034:	680e      	ldr	r6, [r1, #0]
 8009036:	bf08      	it	eq
 8009038:	694b      	ldreq	r3, [r1, #20]
 800903a:	600f      	str	r7, [r1, #0]
 800903c:	bf18      	it	ne
 800903e:	2300      	movne	r3, #0
 8009040:	eba6 0807 	sub.w	r8, r6, r7
 8009044:	608b      	str	r3, [r1, #8]
 8009046:	f1b8 0f00 	cmp.w	r8, #0
 800904a:	dd9c      	ble.n	8008f86 <__sflush_r+0x1a>
 800904c:	6a21      	ldr	r1, [r4, #32]
 800904e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009050:	4643      	mov	r3, r8
 8009052:	463a      	mov	r2, r7
 8009054:	4628      	mov	r0, r5
 8009056:	47b0      	blx	r6
 8009058:	2800      	cmp	r0, #0
 800905a:	dc06      	bgt.n	800906a <__sflush_r+0xfe>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e78e      	b.n	8008f88 <__sflush_r+0x1c>
 800906a:	4407      	add	r7, r0
 800906c:	eba8 0800 	sub.w	r8, r8, r0
 8009070:	e7e9      	b.n	8009046 <__sflush_r+0xda>
 8009072:	bf00      	nop
 8009074:	20400001 	.word	0x20400001

08009078 <_fflush_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	690b      	ldr	r3, [r1, #16]
 800907c:	4605      	mov	r5, r0
 800907e:	460c      	mov	r4, r1
 8009080:	b913      	cbnz	r3, 8009088 <_fflush_r+0x10>
 8009082:	2500      	movs	r5, #0
 8009084:	4628      	mov	r0, r5
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	b118      	cbz	r0, 8009092 <_fflush_r+0x1a>
 800908a:	6983      	ldr	r3, [r0, #24]
 800908c:	b90b      	cbnz	r3, 8009092 <_fflush_r+0x1a>
 800908e:	f000 f887 	bl	80091a0 <__sinit>
 8009092:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <_fflush_r+0x6c>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d11b      	bne.n	80090d0 <_fflush_r+0x58>
 8009098:	686c      	ldr	r4, [r5, #4]
 800909a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0ef      	beq.n	8009082 <_fflush_r+0xa>
 80090a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090a4:	07d0      	lsls	r0, r2, #31
 80090a6:	d404      	bmi.n	80090b2 <_fflush_r+0x3a>
 80090a8:	0599      	lsls	r1, r3, #22
 80090aa:	d402      	bmi.n	80090b2 <_fflush_r+0x3a>
 80090ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ae:	f000 f915 	bl	80092dc <__retarget_lock_acquire_recursive>
 80090b2:	4628      	mov	r0, r5
 80090b4:	4621      	mov	r1, r4
 80090b6:	f7ff ff59 	bl	8008f6c <__sflush_r>
 80090ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090bc:	07da      	lsls	r2, r3, #31
 80090be:	4605      	mov	r5, r0
 80090c0:	d4e0      	bmi.n	8009084 <_fflush_r+0xc>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	059b      	lsls	r3, r3, #22
 80090c6:	d4dd      	bmi.n	8009084 <_fflush_r+0xc>
 80090c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ca:	f000 f908 	bl	80092de <__retarget_lock_release_recursive>
 80090ce:	e7d9      	b.n	8009084 <_fflush_r+0xc>
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <_fflush_r+0x70>)
 80090d2:	429c      	cmp	r4, r3
 80090d4:	d101      	bne.n	80090da <_fflush_r+0x62>
 80090d6:	68ac      	ldr	r4, [r5, #8]
 80090d8:	e7df      	b.n	800909a <_fflush_r+0x22>
 80090da:	4b04      	ldr	r3, [pc, #16]	; (80090ec <_fflush_r+0x74>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	bf08      	it	eq
 80090e0:	68ec      	ldreq	r4, [r5, #12]
 80090e2:	e7da      	b.n	800909a <_fflush_r+0x22>
 80090e4:	0800a458 	.word	0x0800a458
 80090e8:	0800a478 	.word	0x0800a478
 80090ec:	0800a438 	.word	0x0800a438

080090f0 <std>:
 80090f0:	2300      	movs	r3, #0
 80090f2:	b510      	push	{r4, lr}
 80090f4:	4604      	mov	r4, r0
 80090f6:	e9c0 3300 	strd	r3, r3, [r0]
 80090fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090fe:	6083      	str	r3, [r0, #8]
 8009100:	8181      	strh	r1, [r0, #12]
 8009102:	6643      	str	r3, [r0, #100]	; 0x64
 8009104:	81c2      	strh	r2, [r0, #14]
 8009106:	6183      	str	r3, [r0, #24]
 8009108:	4619      	mov	r1, r3
 800910a:	2208      	movs	r2, #8
 800910c:	305c      	adds	r0, #92	; 0x5c
 800910e:	f7ff fd09 	bl	8008b24 <memset>
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <std+0x38>)
 8009114:	6263      	str	r3, [r4, #36]	; 0x24
 8009116:	4b05      	ldr	r3, [pc, #20]	; (800912c <std+0x3c>)
 8009118:	62a3      	str	r3, [r4, #40]	; 0x28
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <std+0x40>)
 800911c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <std+0x44>)
 8009120:	6224      	str	r4, [r4, #32]
 8009122:	6323      	str	r3, [r4, #48]	; 0x30
 8009124:	bd10      	pop	{r4, pc}
 8009126:	bf00      	nop
 8009128:	08009b79 	.word	0x08009b79
 800912c:	08009b9b 	.word	0x08009b9b
 8009130:	08009bd3 	.word	0x08009bd3
 8009134:	08009bf7 	.word	0x08009bf7

08009138 <_cleanup_r>:
 8009138:	4901      	ldr	r1, [pc, #4]	; (8009140 <_cleanup_r+0x8>)
 800913a:	f000 b8af 	b.w	800929c <_fwalk_reent>
 800913e:	bf00      	nop
 8009140:	08009079 	.word	0x08009079

08009144 <__sfmoreglue>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	2268      	movs	r2, #104	; 0x68
 8009148:	1e4d      	subs	r5, r1, #1
 800914a:	4355      	muls	r5, r2
 800914c:	460e      	mov	r6, r1
 800914e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009152:	f000 f99f 	bl	8009494 <_malloc_r>
 8009156:	4604      	mov	r4, r0
 8009158:	b140      	cbz	r0, 800916c <__sfmoreglue+0x28>
 800915a:	2100      	movs	r1, #0
 800915c:	e9c0 1600 	strd	r1, r6, [r0]
 8009160:	300c      	adds	r0, #12
 8009162:	60a0      	str	r0, [r4, #8]
 8009164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009168:	f7ff fcdc 	bl	8008b24 <memset>
 800916c:	4620      	mov	r0, r4
 800916e:	bd70      	pop	{r4, r5, r6, pc}

08009170 <__sfp_lock_acquire>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__sfp_lock_acquire+0x8>)
 8009172:	f000 b8b3 	b.w	80092dc <__retarget_lock_acquire_recursive>
 8009176:	bf00      	nop
 8009178:	200107e5 	.word	0x200107e5

0800917c <__sfp_lock_release>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__sfp_lock_release+0x8>)
 800917e:	f000 b8ae 	b.w	80092de <__retarget_lock_release_recursive>
 8009182:	bf00      	nop
 8009184:	200107e5 	.word	0x200107e5

08009188 <__sinit_lock_acquire>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sinit_lock_acquire+0x8>)
 800918a:	f000 b8a7 	b.w	80092dc <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	200107e6 	.word	0x200107e6

08009194 <__sinit_lock_release>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sinit_lock_release+0x8>)
 8009196:	f000 b8a2 	b.w	80092de <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	200107e6 	.word	0x200107e6

080091a0 <__sinit>:
 80091a0:	b510      	push	{r4, lr}
 80091a2:	4604      	mov	r4, r0
 80091a4:	f7ff fff0 	bl	8009188 <__sinit_lock_acquire>
 80091a8:	69a3      	ldr	r3, [r4, #24]
 80091aa:	b11b      	cbz	r3, 80091b4 <__sinit+0x14>
 80091ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b0:	f7ff bff0 	b.w	8009194 <__sinit_lock_release>
 80091b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091b8:	6523      	str	r3, [r4, #80]	; 0x50
 80091ba:	4b13      	ldr	r3, [pc, #76]	; (8009208 <__sinit+0x68>)
 80091bc:	4a13      	ldr	r2, [pc, #76]	; (800920c <__sinit+0x6c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	bf04      	itt	eq
 80091c6:	2301      	moveq	r3, #1
 80091c8:	61a3      	streq	r3, [r4, #24]
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 f820 	bl	8009210 <__sfp>
 80091d0:	6060      	str	r0, [r4, #4]
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 f81c 	bl	8009210 <__sfp>
 80091d8:	60a0      	str	r0, [r4, #8]
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f818 	bl	8009210 <__sfp>
 80091e0:	2200      	movs	r2, #0
 80091e2:	60e0      	str	r0, [r4, #12]
 80091e4:	2104      	movs	r1, #4
 80091e6:	6860      	ldr	r0, [r4, #4]
 80091e8:	f7ff ff82 	bl	80090f0 <std>
 80091ec:	68a0      	ldr	r0, [r4, #8]
 80091ee:	2201      	movs	r2, #1
 80091f0:	2109      	movs	r1, #9
 80091f2:	f7ff ff7d 	bl	80090f0 <std>
 80091f6:	68e0      	ldr	r0, [r4, #12]
 80091f8:	2202      	movs	r2, #2
 80091fa:	2112      	movs	r1, #18
 80091fc:	f7ff ff78 	bl	80090f0 <std>
 8009200:	2301      	movs	r3, #1
 8009202:	61a3      	str	r3, [r4, #24]
 8009204:	e7d2      	b.n	80091ac <__sinit+0xc>
 8009206:	bf00      	nop
 8009208:	0800a434 	.word	0x0800a434
 800920c:	08009139 	.word	0x08009139

08009210 <__sfp>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	4607      	mov	r7, r0
 8009214:	f7ff ffac 	bl	8009170 <__sfp_lock_acquire>
 8009218:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <__sfp+0x84>)
 800921a:	681e      	ldr	r6, [r3, #0]
 800921c:	69b3      	ldr	r3, [r6, #24]
 800921e:	b913      	cbnz	r3, 8009226 <__sfp+0x16>
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff ffbd 	bl	80091a0 <__sinit>
 8009226:	3648      	adds	r6, #72	; 0x48
 8009228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800922c:	3b01      	subs	r3, #1
 800922e:	d503      	bpl.n	8009238 <__sfp+0x28>
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	b30b      	cbz	r3, 8009278 <__sfp+0x68>
 8009234:	6836      	ldr	r6, [r6, #0]
 8009236:	e7f7      	b.n	8009228 <__sfp+0x18>
 8009238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800923c:	b9d5      	cbnz	r5, 8009274 <__sfp+0x64>
 800923e:	4b16      	ldr	r3, [pc, #88]	; (8009298 <__sfp+0x88>)
 8009240:	60e3      	str	r3, [r4, #12]
 8009242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009246:	6665      	str	r5, [r4, #100]	; 0x64
 8009248:	f000 f847 	bl	80092da <__retarget_lock_init_recursive>
 800924c:	f7ff ff96 	bl	800917c <__sfp_lock_release>
 8009250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009258:	6025      	str	r5, [r4, #0]
 800925a:	61a5      	str	r5, [r4, #24]
 800925c:	2208      	movs	r2, #8
 800925e:	4629      	mov	r1, r5
 8009260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009264:	f7ff fc5e 	bl	8008b24 <memset>
 8009268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800926c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009270:	4620      	mov	r0, r4
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009274:	3468      	adds	r4, #104	; 0x68
 8009276:	e7d9      	b.n	800922c <__sfp+0x1c>
 8009278:	2104      	movs	r1, #4
 800927a:	4638      	mov	r0, r7
 800927c:	f7ff ff62 	bl	8009144 <__sfmoreglue>
 8009280:	4604      	mov	r4, r0
 8009282:	6030      	str	r0, [r6, #0]
 8009284:	2800      	cmp	r0, #0
 8009286:	d1d5      	bne.n	8009234 <__sfp+0x24>
 8009288:	f7ff ff78 	bl	800917c <__sfp_lock_release>
 800928c:	230c      	movs	r3, #12
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	e7ee      	b.n	8009270 <__sfp+0x60>
 8009292:	bf00      	nop
 8009294:	0800a434 	.word	0x0800a434
 8009298:	ffff0001 	.word	0xffff0001

0800929c <_fwalk_reent>:
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4606      	mov	r6, r0
 80092a2:	4688      	mov	r8, r1
 80092a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092a8:	2700      	movs	r7, #0
 80092aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ae:	f1b9 0901 	subs.w	r9, r9, #1
 80092b2:	d505      	bpl.n	80092c0 <_fwalk_reent+0x24>
 80092b4:	6824      	ldr	r4, [r4, #0]
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d1f7      	bne.n	80092aa <_fwalk_reent+0xe>
 80092ba:	4638      	mov	r0, r7
 80092bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c0:	89ab      	ldrh	r3, [r5, #12]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d907      	bls.n	80092d6 <_fwalk_reent+0x3a>
 80092c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092ca:	3301      	adds	r3, #1
 80092cc:	d003      	beq.n	80092d6 <_fwalk_reent+0x3a>
 80092ce:	4629      	mov	r1, r5
 80092d0:	4630      	mov	r0, r6
 80092d2:	47c0      	blx	r8
 80092d4:	4307      	orrs	r7, r0
 80092d6:	3568      	adds	r5, #104	; 0x68
 80092d8:	e7e9      	b.n	80092ae <_fwalk_reent+0x12>

080092da <__retarget_lock_init_recursive>:
 80092da:	4770      	bx	lr

080092dc <__retarget_lock_acquire_recursive>:
 80092dc:	4770      	bx	lr

080092de <__retarget_lock_release_recursive>:
 80092de:	4770      	bx	lr

080092e0 <__swhatbuf_r>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	460e      	mov	r6, r1
 80092e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e8:	2900      	cmp	r1, #0
 80092ea:	b096      	sub	sp, #88	; 0x58
 80092ec:	4614      	mov	r4, r2
 80092ee:	461d      	mov	r5, r3
 80092f0:	da08      	bge.n	8009304 <__swhatbuf_r+0x24>
 80092f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	061a      	lsls	r2, r3, #24
 80092fc:	d410      	bmi.n	8009320 <__swhatbuf_r+0x40>
 80092fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009302:	e00e      	b.n	8009322 <__swhatbuf_r+0x42>
 8009304:	466a      	mov	r2, sp
 8009306:	f000 fc9d 	bl	8009c44 <_fstat_r>
 800930a:	2800      	cmp	r0, #0
 800930c:	dbf1      	blt.n	80092f2 <__swhatbuf_r+0x12>
 800930e:	9a01      	ldr	r2, [sp, #4]
 8009310:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009314:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009318:	425a      	negs	r2, r3
 800931a:	415a      	adcs	r2, r3
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	e7ee      	b.n	80092fe <__swhatbuf_r+0x1e>
 8009320:	2340      	movs	r3, #64	; 0x40
 8009322:	2000      	movs	r0, #0
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	b016      	add	sp, #88	; 0x58
 8009328:	bd70      	pop	{r4, r5, r6, pc}
	...

0800932c <__smakebuf_r>:
 800932c:	898b      	ldrh	r3, [r1, #12]
 800932e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009330:	079d      	lsls	r5, r3, #30
 8009332:	4606      	mov	r6, r0
 8009334:	460c      	mov	r4, r1
 8009336:	d507      	bpl.n	8009348 <__smakebuf_r+0x1c>
 8009338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	2301      	movs	r3, #1
 8009342:	6163      	str	r3, [r4, #20]
 8009344:	b002      	add	sp, #8
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	ab01      	add	r3, sp, #4
 800934a:	466a      	mov	r2, sp
 800934c:	f7ff ffc8 	bl	80092e0 <__swhatbuf_r>
 8009350:	9900      	ldr	r1, [sp, #0]
 8009352:	4605      	mov	r5, r0
 8009354:	4630      	mov	r0, r6
 8009356:	f000 f89d 	bl	8009494 <_malloc_r>
 800935a:	b948      	cbnz	r0, 8009370 <__smakebuf_r+0x44>
 800935c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009360:	059a      	lsls	r2, r3, #22
 8009362:	d4ef      	bmi.n	8009344 <__smakebuf_r+0x18>
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	f043 0302 	orr.w	r3, r3, #2
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	e7e3      	b.n	8009338 <__smakebuf_r+0xc>
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <__smakebuf_r+0x7c>)
 8009372:	62b3      	str	r3, [r6, #40]	; 0x28
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	6020      	str	r0, [r4, #0]
 8009378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	6163      	str	r3, [r4, #20]
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	6120      	str	r0, [r4, #16]
 8009386:	b15b      	cbz	r3, 80093a0 <__smakebuf_r+0x74>
 8009388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800938c:	4630      	mov	r0, r6
 800938e:	f000 fc6b 	bl	8009c68 <_isatty_r>
 8009392:	b128      	cbz	r0, 80093a0 <__smakebuf_r+0x74>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f023 0303 	bic.w	r3, r3, #3
 800939a:	f043 0301 	orr.w	r3, r3, #1
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	89a0      	ldrh	r0, [r4, #12]
 80093a2:	4305      	orrs	r5, r0
 80093a4:	81a5      	strh	r5, [r4, #12]
 80093a6:	e7cd      	b.n	8009344 <__smakebuf_r+0x18>
 80093a8:	08009139 	.word	0x08009139

080093ac <malloc>:
 80093ac:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <malloc+0xc>)
 80093ae:	4601      	mov	r1, r0
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	f000 b86f 	b.w	8009494 <_malloc_r>
 80093b6:	bf00      	nop
 80093b8:	20000030 	.word	0x20000030

080093bc <_free_r>:
 80093bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093be:	2900      	cmp	r1, #0
 80093c0:	d044      	beq.n	800944c <_free_r+0x90>
 80093c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c6:	9001      	str	r0, [sp, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f1a1 0404 	sub.w	r4, r1, #4
 80093ce:	bfb8      	it	lt
 80093d0:	18e4      	addlt	r4, r4, r3
 80093d2:	f000 fc6b 	bl	8009cac <__malloc_lock>
 80093d6:	4a1e      	ldr	r2, [pc, #120]	; (8009450 <_free_r+0x94>)
 80093d8:	9801      	ldr	r0, [sp, #4]
 80093da:	6813      	ldr	r3, [r2, #0]
 80093dc:	b933      	cbnz	r3, 80093ec <_free_r+0x30>
 80093de:	6063      	str	r3, [r4, #4]
 80093e0:	6014      	str	r4, [r2, #0]
 80093e2:	b003      	add	sp, #12
 80093e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093e8:	f000 bc66 	b.w	8009cb8 <__malloc_unlock>
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	d908      	bls.n	8009402 <_free_r+0x46>
 80093f0:	6825      	ldr	r5, [r4, #0]
 80093f2:	1961      	adds	r1, r4, r5
 80093f4:	428b      	cmp	r3, r1
 80093f6:	bf01      	itttt	eq
 80093f8:	6819      	ldreq	r1, [r3, #0]
 80093fa:	685b      	ldreq	r3, [r3, #4]
 80093fc:	1949      	addeq	r1, r1, r5
 80093fe:	6021      	streq	r1, [r4, #0]
 8009400:	e7ed      	b.n	80093de <_free_r+0x22>
 8009402:	461a      	mov	r2, r3
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	b10b      	cbz	r3, 800940c <_free_r+0x50>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d9fa      	bls.n	8009402 <_free_r+0x46>
 800940c:	6811      	ldr	r1, [r2, #0]
 800940e:	1855      	adds	r5, r2, r1
 8009410:	42a5      	cmp	r5, r4
 8009412:	d10b      	bne.n	800942c <_free_r+0x70>
 8009414:	6824      	ldr	r4, [r4, #0]
 8009416:	4421      	add	r1, r4
 8009418:	1854      	adds	r4, r2, r1
 800941a:	42a3      	cmp	r3, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	d1e0      	bne.n	80093e2 <_free_r+0x26>
 8009420:	681c      	ldr	r4, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	6053      	str	r3, [r2, #4]
 8009426:	4421      	add	r1, r4
 8009428:	6011      	str	r1, [r2, #0]
 800942a:	e7da      	b.n	80093e2 <_free_r+0x26>
 800942c:	d902      	bls.n	8009434 <_free_r+0x78>
 800942e:	230c      	movs	r3, #12
 8009430:	6003      	str	r3, [r0, #0]
 8009432:	e7d6      	b.n	80093e2 <_free_r+0x26>
 8009434:	6825      	ldr	r5, [r4, #0]
 8009436:	1961      	adds	r1, r4, r5
 8009438:	428b      	cmp	r3, r1
 800943a:	bf04      	itt	eq
 800943c:	6819      	ldreq	r1, [r3, #0]
 800943e:	685b      	ldreq	r3, [r3, #4]
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	bf04      	itt	eq
 8009444:	1949      	addeq	r1, r1, r5
 8009446:	6021      	streq	r1, [r4, #0]
 8009448:	6054      	str	r4, [r2, #4]
 800944a:	e7ca      	b.n	80093e2 <_free_r+0x26>
 800944c:	b003      	add	sp, #12
 800944e:	bd30      	pop	{r4, r5, pc}
 8009450:	200107e8 	.word	0x200107e8

08009454 <sbrk_aligned>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	4e0e      	ldr	r6, [pc, #56]	; (8009490 <sbrk_aligned+0x3c>)
 8009458:	460c      	mov	r4, r1
 800945a:	6831      	ldr	r1, [r6, #0]
 800945c:	4605      	mov	r5, r0
 800945e:	b911      	cbnz	r1, 8009466 <sbrk_aligned+0x12>
 8009460:	f000 fb7a 	bl	8009b58 <_sbrk_r>
 8009464:	6030      	str	r0, [r6, #0]
 8009466:	4621      	mov	r1, r4
 8009468:	4628      	mov	r0, r5
 800946a:	f000 fb75 	bl	8009b58 <_sbrk_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d00a      	beq.n	8009488 <sbrk_aligned+0x34>
 8009472:	1cc4      	adds	r4, r0, #3
 8009474:	f024 0403 	bic.w	r4, r4, #3
 8009478:	42a0      	cmp	r0, r4
 800947a:	d007      	beq.n	800948c <sbrk_aligned+0x38>
 800947c:	1a21      	subs	r1, r4, r0
 800947e:	4628      	mov	r0, r5
 8009480:	f000 fb6a 	bl	8009b58 <_sbrk_r>
 8009484:	3001      	adds	r0, #1
 8009486:	d101      	bne.n	800948c <sbrk_aligned+0x38>
 8009488:	f04f 34ff 	mov.w	r4, #4294967295
 800948c:	4620      	mov	r0, r4
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	200107ec 	.word	0x200107ec

08009494 <_malloc_r>:
 8009494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009498:	1ccd      	adds	r5, r1, #3
 800949a:	f025 0503 	bic.w	r5, r5, #3
 800949e:	3508      	adds	r5, #8
 80094a0:	2d0c      	cmp	r5, #12
 80094a2:	bf38      	it	cc
 80094a4:	250c      	movcc	r5, #12
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	4607      	mov	r7, r0
 80094aa:	db01      	blt.n	80094b0 <_malloc_r+0x1c>
 80094ac:	42a9      	cmp	r1, r5
 80094ae:	d905      	bls.n	80094bc <_malloc_r+0x28>
 80094b0:	230c      	movs	r3, #12
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	2600      	movs	r6, #0
 80094b6:	4630      	mov	r0, r6
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	4e2e      	ldr	r6, [pc, #184]	; (8009578 <_malloc_r+0xe4>)
 80094be:	f000 fbf5 	bl	8009cac <__malloc_lock>
 80094c2:	6833      	ldr	r3, [r6, #0]
 80094c4:	461c      	mov	r4, r3
 80094c6:	bb34      	cbnz	r4, 8009516 <_malloc_r+0x82>
 80094c8:	4629      	mov	r1, r5
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7ff ffc2 	bl	8009454 <sbrk_aligned>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	4604      	mov	r4, r0
 80094d4:	d14d      	bne.n	8009572 <_malloc_r+0xde>
 80094d6:	6834      	ldr	r4, [r6, #0]
 80094d8:	4626      	mov	r6, r4
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d140      	bne.n	8009560 <_malloc_r+0xcc>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	4631      	mov	r1, r6
 80094e2:	4638      	mov	r0, r7
 80094e4:	eb04 0803 	add.w	r8, r4, r3
 80094e8:	f000 fb36 	bl	8009b58 <_sbrk_r>
 80094ec:	4580      	cmp	r8, r0
 80094ee:	d13a      	bne.n	8009566 <_malloc_r+0xd2>
 80094f0:	6821      	ldr	r1, [r4, #0]
 80094f2:	3503      	adds	r5, #3
 80094f4:	1a6d      	subs	r5, r5, r1
 80094f6:	f025 0503 	bic.w	r5, r5, #3
 80094fa:	3508      	adds	r5, #8
 80094fc:	2d0c      	cmp	r5, #12
 80094fe:	bf38      	it	cc
 8009500:	250c      	movcc	r5, #12
 8009502:	4629      	mov	r1, r5
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff ffa5 	bl	8009454 <sbrk_aligned>
 800950a:	3001      	adds	r0, #1
 800950c:	d02b      	beq.n	8009566 <_malloc_r+0xd2>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	442b      	add	r3, r5
 8009512:	6023      	str	r3, [r4, #0]
 8009514:	e00e      	b.n	8009534 <_malloc_r+0xa0>
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	1b52      	subs	r2, r2, r5
 800951a:	d41e      	bmi.n	800955a <_malloc_r+0xc6>
 800951c:	2a0b      	cmp	r2, #11
 800951e:	d916      	bls.n	800954e <_malloc_r+0xba>
 8009520:	1961      	adds	r1, r4, r5
 8009522:	42a3      	cmp	r3, r4
 8009524:	6025      	str	r5, [r4, #0]
 8009526:	bf18      	it	ne
 8009528:	6059      	strne	r1, [r3, #4]
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	bf08      	it	eq
 800952e:	6031      	streq	r1, [r6, #0]
 8009530:	5162      	str	r2, [r4, r5]
 8009532:	604b      	str	r3, [r1, #4]
 8009534:	4638      	mov	r0, r7
 8009536:	f104 060b 	add.w	r6, r4, #11
 800953a:	f000 fbbd 	bl	8009cb8 <__malloc_unlock>
 800953e:	f026 0607 	bic.w	r6, r6, #7
 8009542:	1d23      	adds	r3, r4, #4
 8009544:	1af2      	subs	r2, r6, r3
 8009546:	d0b6      	beq.n	80094b6 <_malloc_r+0x22>
 8009548:	1b9b      	subs	r3, r3, r6
 800954a:	50a3      	str	r3, [r4, r2]
 800954c:	e7b3      	b.n	80094b6 <_malloc_r+0x22>
 800954e:	6862      	ldr	r2, [r4, #4]
 8009550:	42a3      	cmp	r3, r4
 8009552:	bf0c      	ite	eq
 8009554:	6032      	streq	r2, [r6, #0]
 8009556:	605a      	strne	r2, [r3, #4]
 8009558:	e7ec      	b.n	8009534 <_malloc_r+0xa0>
 800955a:	4623      	mov	r3, r4
 800955c:	6864      	ldr	r4, [r4, #4]
 800955e:	e7b2      	b.n	80094c6 <_malloc_r+0x32>
 8009560:	4634      	mov	r4, r6
 8009562:	6876      	ldr	r6, [r6, #4]
 8009564:	e7b9      	b.n	80094da <_malloc_r+0x46>
 8009566:	230c      	movs	r3, #12
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	4638      	mov	r0, r7
 800956c:	f000 fba4 	bl	8009cb8 <__malloc_unlock>
 8009570:	e7a1      	b.n	80094b6 <_malloc_r+0x22>
 8009572:	6025      	str	r5, [r4, #0]
 8009574:	e7de      	b.n	8009534 <_malloc_r+0xa0>
 8009576:	bf00      	nop
 8009578:	200107e8 	.word	0x200107e8

0800957c <__sfputc_r>:
 800957c:	6893      	ldr	r3, [r2, #8]
 800957e:	3b01      	subs	r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	b410      	push	{r4}
 8009584:	6093      	str	r3, [r2, #8]
 8009586:	da08      	bge.n	800959a <__sfputc_r+0x1e>
 8009588:	6994      	ldr	r4, [r2, #24]
 800958a:	42a3      	cmp	r3, r4
 800958c:	db01      	blt.n	8009592 <__sfputc_r+0x16>
 800958e:	290a      	cmp	r1, #10
 8009590:	d103      	bne.n	800959a <__sfputc_r+0x1e>
 8009592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009596:	f7ff bc29 	b.w	8008dec <__swbuf_r>
 800959a:	6813      	ldr	r3, [r2, #0]
 800959c:	1c58      	adds	r0, r3, #1
 800959e:	6010      	str	r0, [r2, #0]
 80095a0:	7019      	strb	r1, [r3, #0]
 80095a2:	4608      	mov	r0, r1
 80095a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <__sfputs_r>:
 80095aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	4614      	mov	r4, r2
 80095b2:	18d5      	adds	r5, r2, r3
 80095b4:	42ac      	cmp	r4, r5
 80095b6:	d101      	bne.n	80095bc <__sfputs_r+0x12>
 80095b8:	2000      	movs	r0, #0
 80095ba:	e007      	b.n	80095cc <__sfputs_r+0x22>
 80095bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c0:	463a      	mov	r2, r7
 80095c2:	4630      	mov	r0, r6
 80095c4:	f7ff ffda 	bl	800957c <__sfputc_r>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d1f3      	bne.n	80095b4 <__sfputs_r+0xa>
 80095cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095d0 <_vfiprintf_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	460d      	mov	r5, r1
 80095d6:	b09d      	sub	sp, #116	; 0x74
 80095d8:	4614      	mov	r4, r2
 80095da:	4698      	mov	r8, r3
 80095dc:	4606      	mov	r6, r0
 80095de:	b118      	cbz	r0, 80095e8 <_vfiprintf_r+0x18>
 80095e0:	6983      	ldr	r3, [r0, #24]
 80095e2:	b90b      	cbnz	r3, 80095e8 <_vfiprintf_r+0x18>
 80095e4:	f7ff fddc 	bl	80091a0 <__sinit>
 80095e8:	4b89      	ldr	r3, [pc, #548]	; (8009810 <_vfiprintf_r+0x240>)
 80095ea:	429d      	cmp	r5, r3
 80095ec:	d11b      	bne.n	8009626 <_vfiprintf_r+0x56>
 80095ee:	6875      	ldr	r5, [r6, #4]
 80095f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	d405      	bmi.n	8009602 <_vfiprintf_r+0x32>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	059a      	lsls	r2, r3, #22
 80095fa:	d402      	bmi.n	8009602 <_vfiprintf_r+0x32>
 80095fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095fe:	f7ff fe6d 	bl	80092dc <__retarget_lock_acquire_recursive>
 8009602:	89ab      	ldrh	r3, [r5, #12]
 8009604:	071b      	lsls	r3, r3, #28
 8009606:	d501      	bpl.n	800960c <_vfiprintf_r+0x3c>
 8009608:	692b      	ldr	r3, [r5, #16]
 800960a:	b9eb      	cbnz	r3, 8009648 <_vfiprintf_r+0x78>
 800960c:	4629      	mov	r1, r5
 800960e:	4630      	mov	r0, r6
 8009610:	f7ff fc3e 	bl	8008e90 <__swsetup_r>
 8009614:	b1c0      	cbz	r0, 8009648 <_vfiprintf_r+0x78>
 8009616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009618:	07dc      	lsls	r4, r3, #31
 800961a:	d50e      	bpl.n	800963a <_vfiprintf_r+0x6a>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	b01d      	add	sp, #116	; 0x74
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	4b7b      	ldr	r3, [pc, #492]	; (8009814 <_vfiprintf_r+0x244>)
 8009628:	429d      	cmp	r5, r3
 800962a:	d101      	bne.n	8009630 <_vfiprintf_r+0x60>
 800962c:	68b5      	ldr	r5, [r6, #8]
 800962e:	e7df      	b.n	80095f0 <_vfiprintf_r+0x20>
 8009630:	4b79      	ldr	r3, [pc, #484]	; (8009818 <_vfiprintf_r+0x248>)
 8009632:	429d      	cmp	r5, r3
 8009634:	bf08      	it	eq
 8009636:	68f5      	ldreq	r5, [r6, #12]
 8009638:	e7da      	b.n	80095f0 <_vfiprintf_r+0x20>
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	0598      	lsls	r0, r3, #22
 800963e:	d4ed      	bmi.n	800961c <_vfiprintf_r+0x4c>
 8009640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009642:	f7ff fe4c 	bl	80092de <__retarget_lock_release_recursive>
 8009646:	e7e9      	b.n	800961c <_vfiprintf_r+0x4c>
 8009648:	2300      	movs	r3, #0
 800964a:	9309      	str	r3, [sp, #36]	; 0x24
 800964c:	2320      	movs	r3, #32
 800964e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009652:	f8cd 800c 	str.w	r8, [sp, #12]
 8009656:	2330      	movs	r3, #48	; 0x30
 8009658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800981c <_vfiprintf_r+0x24c>
 800965c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009660:	f04f 0901 	mov.w	r9, #1
 8009664:	4623      	mov	r3, r4
 8009666:	469a      	mov	sl, r3
 8009668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800966c:	b10a      	cbz	r2, 8009672 <_vfiprintf_r+0xa2>
 800966e:	2a25      	cmp	r2, #37	; 0x25
 8009670:	d1f9      	bne.n	8009666 <_vfiprintf_r+0x96>
 8009672:	ebba 0b04 	subs.w	fp, sl, r4
 8009676:	d00b      	beq.n	8009690 <_vfiprintf_r+0xc0>
 8009678:	465b      	mov	r3, fp
 800967a:	4622      	mov	r2, r4
 800967c:	4629      	mov	r1, r5
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff ff93 	bl	80095aa <__sfputs_r>
 8009684:	3001      	adds	r0, #1
 8009686:	f000 80aa 	beq.w	80097de <_vfiprintf_r+0x20e>
 800968a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968c:	445a      	add	r2, fp
 800968e:	9209      	str	r2, [sp, #36]	; 0x24
 8009690:	f89a 3000 	ldrb.w	r3, [sl]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80a2 	beq.w	80097de <_vfiprintf_r+0x20e>
 800969a:	2300      	movs	r3, #0
 800969c:	f04f 32ff 	mov.w	r2, #4294967295
 80096a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a4:	f10a 0a01 	add.w	sl, sl, #1
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	9307      	str	r3, [sp, #28]
 80096ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096b0:	931a      	str	r3, [sp, #104]	; 0x68
 80096b2:	4654      	mov	r4, sl
 80096b4:	2205      	movs	r2, #5
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	4858      	ldr	r0, [pc, #352]	; (800981c <_vfiprintf_r+0x24c>)
 80096bc:	f7f6 fdb0 	bl	8000220 <memchr>
 80096c0:	9a04      	ldr	r2, [sp, #16]
 80096c2:	b9d8      	cbnz	r0, 80096fc <_vfiprintf_r+0x12c>
 80096c4:	06d1      	lsls	r1, r2, #27
 80096c6:	bf44      	itt	mi
 80096c8:	2320      	movmi	r3, #32
 80096ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ce:	0713      	lsls	r3, r2, #28
 80096d0:	bf44      	itt	mi
 80096d2:	232b      	movmi	r3, #43	; 0x2b
 80096d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d8:	f89a 3000 	ldrb.w	r3, [sl]
 80096dc:	2b2a      	cmp	r3, #42	; 0x2a
 80096de:	d015      	beq.n	800970c <_vfiprintf_r+0x13c>
 80096e0:	9a07      	ldr	r2, [sp, #28]
 80096e2:	4654      	mov	r4, sl
 80096e4:	2000      	movs	r0, #0
 80096e6:	f04f 0c0a 	mov.w	ip, #10
 80096ea:	4621      	mov	r1, r4
 80096ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f0:	3b30      	subs	r3, #48	; 0x30
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	d94e      	bls.n	8009794 <_vfiprintf_r+0x1c4>
 80096f6:	b1b0      	cbz	r0, 8009726 <_vfiprintf_r+0x156>
 80096f8:	9207      	str	r2, [sp, #28]
 80096fa:	e014      	b.n	8009726 <_vfiprintf_r+0x156>
 80096fc:	eba0 0308 	sub.w	r3, r0, r8
 8009700:	fa09 f303 	lsl.w	r3, r9, r3
 8009704:	4313      	orrs	r3, r2
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	46a2      	mov	sl, r4
 800970a:	e7d2      	b.n	80096b2 <_vfiprintf_r+0xe2>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	1d19      	adds	r1, r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	9103      	str	r1, [sp, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfbb      	ittet	lt
 8009718:	425b      	neglt	r3, r3
 800971a:	f042 0202 	orrlt.w	r2, r2, #2
 800971e:	9307      	strge	r3, [sp, #28]
 8009720:	9307      	strlt	r3, [sp, #28]
 8009722:	bfb8      	it	lt
 8009724:	9204      	strlt	r2, [sp, #16]
 8009726:	7823      	ldrb	r3, [r4, #0]
 8009728:	2b2e      	cmp	r3, #46	; 0x2e
 800972a:	d10c      	bne.n	8009746 <_vfiprintf_r+0x176>
 800972c:	7863      	ldrb	r3, [r4, #1]
 800972e:	2b2a      	cmp	r3, #42	; 0x2a
 8009730:	d135      	bne.n	800979e <_vfiprintf_r+0x1ce>
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	1d1a      	adds	r2, r3, #4
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	9203      	str	r2, [sp, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfb8      	it	lt
 800973e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009742:	3402      	adds	r4, #2
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800982c <_vfiprintf_r+0x25c>
 800974a:	7821      	ldrb	r1, [r4, #0]
 800974c:	2203      	movs	r2, #3
 800974e:	4650      	mov	r0, sl
 8009750:	f7f6 fd66 	bl	8000220 <memchr>
 8009754:	b140      	cbz	r0, 8009768 <_vfiprintf_r+0x198>
 8009756:	2340      	movs	r3, #64	; 0x40
 8009758:	eba0 000a 	sub.w	r0, r0, sl
 800975c:	fa03 f000 	lsl.w	r0, r3, r0
 8009760:	9b04      	ldr	r3, [sp, #16]
 8009762:	4303      	orrs	r3, r0
 8009764:	3401      	adds	r4, #1
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976c:	482c      	ldr	r0, [pc, #176]	; (8009820 <_vfiprintf_r+0x250>)
 800976e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009772:	2206      	movs	r2, #6
 8009774:	f7f6 fd54 	bl	8000220 <memchr>
 8009778:	2800      	cmp	r0, #0
 800977a:	d03f      	beq.n	80097fc <_vfiprintf_r+0x22c>
 800977c:	4b29      	ldr	r3, [pc, #164]	; (8009824 <_vfiprintf_r+0x254>)
 800977e:	bb1b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x1f8>
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	3307      	adds	r3, #7
 8009784:	f023 0307 	bic.w	r3, r3, #7
 8009788:	3308      	adds	r3, #8
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978e:	443b      	add	r3, r7
 8009790:	9309      	str	r3, [sp, #36]	; 0x24
 8009792:	e767      	b.n	8009664 <_vfiprintf_r+0x94>
 8009794:	fb0c 3202 	mla	r2, ip, r2, r3
 8009798:	460c      	mov	r4, r1
 800979a:	2001      	movs	r0, #1
 800979c:	e7a5      	b.n	80096ea <_vfiprintf_r+0x11a>
 800979e:	2300      	movs	r3, #0
 80097a0:	3401      	adds	r4, #1
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f04f 0c0a 	mov.w	ip, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b0:	3a30      	subs	r2, #48	; 0x30
 80097b2:	2a09      	cmp	r2, #9
 80097b4:	d903      	bls.n	80097be <_vfiprintf_r+0x1ee>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0c5      	beq.n	8009746 <_vfiprintf_r+0x176>
 80097ba:	9105      	str	r1, [sp, #20]
 80097bc:	e7c3      	b.n	8009746 <_vfiprintf_r+0x176>
 80097be:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c2:	4604      	mov	r4, r0
 80097c4:	2301      	movs	r3, #1
 80097c6:	e7f0      	b.n	80097aa <_vfiprintf_r+0x1da>
 80097c8:	ab03      	add	r3, sp, #12
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	462a      	mov	r2, r5
 80097ce:	4b16      	ldr	r3, [pc, #88]	; (8009828 <_vfiprintf_r+0x258>)
 80097d0:	a904      	add	r1, sp, #16
 80097d2:	4630      	mov	r0, r6
 80097d4:	f3af 8000 	nop.w
 80097d8:	4607      	mov	r7, r0
 80097da:	1c78      	adds	r0, r7, #1
 80097dc:	d1d6      	bne.n	800978c <_vfiprintf_r+0x1bc>
 80097de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e0:	07d9      	lsls	r1, r3, #31
 80097e2:	d405      	bmi.n	80097f0 <_vfiprintf_r+0x220>
 80097e4:	89ab      	ldrh	r3, [r5, #12]
 80097e6:	059a      	lsls	r2, r3, #22
 80097e8:	d402      	bmi.n	80097f0 <_vfiprintf_r+0x220>
 80097ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ec:	f7ff fd77 	bl	80092de <__retarget_lock_release_recursive>
 80097f0:	89ab      	ldrh	r3, [r5, #12]
 80097f2:	065b      	lsls	r3, r3, #25
 80097f4:	f53f af12 	bmi.w	800961c <_vfiprintf_r+0x4c>
 80097f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fa:	e711      	b.n	8009620 <_vfiprintf_r+0x50>
 80097fc:	ab03      	add	r3, sp, #12
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	462a      	mov	r2, r5
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <_vfiprintf_r+0x258>)
 8009804:	a904      	add	r1, sp, #16
 8009806:	4630      	mov	r0, r6
 8009808:	f000 f880 	bl	800990c <_printf_i>
 800980c:	e7e4      	b.n	80097d8 <_vfiprintf_r+0x208>
 800980e:	bf00      	nop
 8009810:	0800a458 	.word	0x0800a458
 8009814:	0800a478 	.word	0x0800a478
 8009818:	0800a438 	.word	0x0800a438
 800981c:	0800a498 	.word	0x0800a498
 8009820:	0800a4a2 	.word	0x0800a4a2
 8009824:	00000000 	.word	0x00000000
 8009828:	080095ab 	.word	0x080095ab
 800982c:	0800a49e 	.word	0x0800a49e

08009830 <_printf_common>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	4616      	mov	r6, r2
 8009836:	4699      	mov	r9, r3
 8009838:	688a      	ldr	r2, [r1, #8]
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009840:	4293      	cmp	r3, r2
 8009842:	bfb8      	it	lt
 8009844:	4613      	movlt	r3, r2
 8009846:	6033      	str	r3, [r6, #0]
 8009848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800984c:	4607      	mov	r7, r0
 800984e:	460c      	mov	r4, r1
 8009850:	b10a      	cbz	r2, 8009856 <_printf_common+0x26>
 8009852:	3301      	adds	r3, #1
 8009854:	6033      	str	r3, [r6, #0]
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	0699      	lsls	r1, r3, #26
 800985a:	bf42      	ittt	mi
 800985c:	6833      	ldrmi	r3, [r6, #0]
 800985e:	3302      	addmi	r3, #2
 8009860:	6033      	strmi	r3, [r6, #0]
 8009862:	6825      	ldr	r5, [r4, #0]
 8009864:	f015 0506 	ands.w	r5, r5, #6
 8009868:	d106      	bne.n	8009878 <_printf_common+0x48>
 800986a:	f104 0a19 	add.w	sl, r4, #25
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	6832      	ldr	r2, [r6, #0]
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	42ab      	cmp	r3, r5
 8009876:	dc26      	bgt.n	80098c6 <_printf_common+0x96>
 8009878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800987c:	1e13      	subs	r3, r2, #0
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	bf18      	it	ne
 8009882:	2301      	movne	r3, #1
 8009884:	0692      	lsls	r2, r2, #26
 8009886:	d42b      	bmi.n	80098e0 <_printf_common+0xb0>
 8009888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800988c:	4649      	mov	r1, r9
 800988e:	4638      	mov	r0, r7
 8009890:	47c0      	blx	r8
 8009892:	3001      	adds	r0, #1
 8009894:	d01e      	beq.n	80098d4 <_printf_common+0xa4>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	68e5      	ldr	r5, [r4, #12]
 800989a:	6832      	ldr	r2, [r6, #0]
 800989c:	f003 0306 	and.w	r3, r3, #6
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	bf08      	it	eq
 80098a4:	1aad      	subeq	r5, r5, r2
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	6922      	ldr	r2, [r4, #16]
 80098aa:	bf0c      	ite	eq
 80098ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b0:	2500      	movne	r5, #0
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bfc4      	itt	gt
 80098b6:	1a9b      	subgt	r3, r3, r2
 80098b8:	18ed      	addgt	r5, r5, r3
 80098ba:	2600      	movs	r6, #0
 80098bc:	341a      	adds	r4, #26
 80098be:	42b5      	cmp	r5, r6
 80098c0:	d11a      	bne.n	80098f8 <_printf_common+0xc8>
 80098c2:	2000      	movs	r0, #0
 80098c4:	e008      	b.n	80098d8 <_printf_common+0xa8>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4649      	mov	r1, r9
 80098cc:	4638      	mov	r0, r7
 80098ce:	47c0      	blx	r8
 80098d0:	3001      	adds	r0, #1
 80098d2:	d103      	bne.n	80098dc <_printf_common+0xac>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	3501      	adds	r5, #1
 80098de:	e7c6      	b.n	800986e <_printf_common+0x3e>
 80098e0:	18e1      	adds	r1, r4, r3
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	2030      	movs	r0, #48	; 0x30
 80098e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ea:	4422      	add	r2, r4
 80098ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098f4:	3302      	adds	r3, #2
 80098f6:	e7c7      	b.n	8009888 <_printf_common+0x58>
 80098f8:	2301      	movs	r3, #1
 80098fa:	4622      	mov	r2, r4
 80098fc:	4649      	mov	r1, r9
 80098fe:	4638      	mov	r0, r7
 8009900:	47c0      	blx	r8
 8009902:	3001      	adds	r0, #1
 8009904:	d0e6      	beq.n	80098d4 <_printf_common+0xa4>
 8009906:	3601      	adds	r6, #1
 8009908:	e7d9      	b.n	80098be <_printf_common+0x8e>
	...

0800990c <_printf_i>:
 800990c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	7e0f      	ldrb	r7, [r1, #24]
 8009912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009914:	2f78      	cmp	r7, #120	; 0x78
 8009916:	4691      	mov	r9, r2
 8009918:	4680      	mov	r8, r0
 800991a:	460c      	mov	r4, r1
 800991c:	469a      	mov	sl, r3
 800991e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009922:	d807      	bhi.n	8009934 <_printf_i+0x28>
 8009924:	2f62      	cmp	r7, #98	; 0x62
 8009926:	d80a      	bhi.n	800993e <_printf_i+0x32>
 8009928:	2f00      	cmp	r7, #0
 800992a:	f000 80d8 	beq.w	8009ade <_printf_i+0x1d2>
 800992e:	2f58      	cmp	r7, #88	; 0x58
 8009930:	f000 80a3 	beq.w	8009a7a <_printf_i+0x16e>
 8009934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800993c:	e03a      	b.n	80099b4 <_printf_i+0xa8>
 800993e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009942:	2b15      	cmp	r3, #21
 8009944:	d8f6      	bhi.n	8009934 <_printf_i+0x28>
 8009946:	a101      	add	r1, pc, #4	; (adr r1, 800994c <_printf_i+0x40>)
 8009948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800994c:	080099a5 	.word	0x080099a5
 8009950:	080099b9 	.word	0x080099b9
 8009954:	08009935 	.word	0x08009935
 8009958:	08009935 	.word	0x08009935
 800995c:	08009935 	.word	0x08009935
 8009960:	08009935 	.word	0x08009935
 8009964:	080099b9 	.word	0x080099b9
 8009968:	08009935 	.word	0x08009935
 800996c:	08009935 	.word	0x08009935
 8009970:	08009935 	.word	0x08009935
 8009974:	08009935 	.word	0x08009935
 8009978:	08009ac5 	.word	0x08009ac5
 800997c:	080099e9 	.word	0x080099e9
 8009980:	08009aa7 	.word	0x08009aa7
 8009984:	08009935 	.word	0x08009935
 8009988:	08009935 	.word	0x08009935
 800998c:	08009ae7 	.word	0x08009ae7
 8009990:	08009935 	.word	0x08009935
 8009994:	080099e9 	.word	0x080099e9
 8009998:	08009935 	.word	0x08009935
 800999c:	08009935 	.word	0x08009935
 80099a0:	08009aaf 	.word	0x08009aaf
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	1d1a      	adds	r2, r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	602a      	str	r2, [r5, #0]
 80099ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b4:	2301      	movs	r3, #1
 80099b6:	e0a3      	b.n	8009b00 <_printf_i+0x1f4>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	6829      	ldr	r1, [r5, #0]
 80099bc:	0606      	lsls	r6, r0, #24
 80099be:	f101 0304 	add.w	r3, r1, #4
 80099c2:	d50a      	bpl.n	80099da <_printf_i+0xce>
 80099c4:	680e      	ldr	r6, [r1, #0]
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	2e00      	cmp	r6, #0
 80099ca:	da03      	bge.n	80099d4 <_printf_i+0xc8>
 80099cc:	232d      	movs	r3, #45	; 0x2d
 80099ce:	4276      	negs	r6, r6
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	485e      	ldr	r0, [pc, #376]	; (8009b50 <_printf_i+0x244>)
 80099d6:	230a      	movs	r3, #10
 80099d8:	e019      	b.n	8009a0e <_printf_i+0x102>
 80099da:	680e      	ldr	r6, [r1, #0]
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099e2:	bf18      	it	ne
 80099e4:	b236      	sxthne	r6, r6
 80099e6:	e7ef      	b.n	80099c8 <_printf_i+0xbc>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	6820      	ldr	r0, [r4, #0]
 80099ec:	1d19      	adds	r1, r3, #4
 80099ee:	6029      	str	r1, [r5, #0]
 80099f0:	0601      	lsls	r1, r0, #24
 80099f2:	d501      	bpl.n	80099f8 <_printf_i+0xec>
 80099f4:	681e      	ldr	r6, [r3, #0]
 80099f6:	e002      	b.n	80099fe <_printf_i+0xf2>
 80099f8:	0646      	lsls	r6, r0, #25
 80099fa:	d5fb      	bpl.n	80099f4 <_printf_i+0xe8>
 80099fc:	881e      	ldrh	r6, [r3, #0]
 80099fe:	4854      	ldr	r0, [pc, #336]	; (8009b50 <_printf_i+0x244>)
 8009a00:	2f6f      	cmp	r7, #111	; 0x6f
 8009a02:	bf0c      	ite	eq
 8009a04:	2308      	moveq	r3, #8
 8009a06:	230a      	movne	r3, #10
 8009a08:	2100      	movs	r1, #0
 8009a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a0e:	6865      	ldr	r5, [r4, #4]
 8009a10:	60a5      	str	r5, [r4, #8]
 8009a12:	2d00      	cmp	r5, #0
 8009a14:	bfa2      	ittt	ge
 8009a16:	6821      	ldrge	r1, [r4, #0]
 8009a18:	f021 0104 	bicge.w	r1, r1, #4
 8009a1c:	6021      	strge	r1, [r4, #0]
 8009a1e:	b90e      	cbnz	r6, 8009a24 <_printf_i+0x118>
 8009a20:	2d00      	cmp	r5, #0
 8009a22:	d04d      	beq.n	8009ac0 <_printf_i+0x1b4>
 8009a24:	4615      	mov	r5, r2
 8009a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8009a2e:	5dc7      	ldrb	r7, [r0, r7]
 8009a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a34:	4637      	mov	r7, r6
 8009a36:	42bb      	cmp	r3, r7
 8009a38:	460e      	mov	r6, r1
 8009a3a:	d9f4      	bls.n	8009a26 <_printf_i+0x11a>
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d10b      	bne.n	8009a58 <_printf_i+0x14c>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	07de      	lsls	r6, r3, #31
 8009a44:	d508      	bpl.n	8009a58 <_printf_i+0x14c>
 8009a46:	6923      	ldr	r3, [r4, #16]
 8009a48:	6861      	ldr	r1, [r4, #4]
 8009a4a:	4299      	cmp	r1, r3
 8009a4c:	bfde      	ittt	le
 8009a4e:	2330      	movle	r3, #48	; 0x30
 8009a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a58:	1b52      	subs	r2, r2, r5
 8009a5a:	6122      	str	r2, [r4, #16]
 8009a5c:	f8cd a000 	str.w	sl, [sp]
 8009a60:	464b      	mov	r3, r9
 8009a62:	aa03      	add	r2, sp, #12
 8009a64:	4621      	mov	r1, r4
 8009a66:	4640      	mov	r0, r8
 8009a68:	f7ff fee2 	bl	8009830 <_printf_common>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d14c      	bne.n	8009b0a <_printf_i+0x1fe>
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	b004      	add	sp, #16
 8009a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7a:	4835      	ldr	r0, [pc, #212]	; (8009b50 <_printf_i+0x244>)
 8009a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a80:	6829      	ldr	r1, [r5, #0]
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a88:	6029      	str	r1, [r5, #0]
 8009a8a:	061d      	lsls	r5, r3, #24
 8009a8c:	d514      	bpl.n	8009ab8 <_printf_i+0x1ac>
 8009a8e:	07df      	lsls	r7, r3, #31
 8009a90:	bf44      	itt	mi
 8009a92:	f043 0320 	orrmi.w	r3, r3, #32
 8009a96:	6023      	strmi	r3, [r4, #0]
 8009a98:	b91e      	cbnz	r6, 8009aa2 <_printf_i+0x196>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	f023 0320 	bic.w	r3, r3, #32
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	e7b0      	b.n	8009a08 <_printf_i+0xfc>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	f043 0320 	orr.w	r3, r3, #32
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	2378      	movs	r3, #120	; 0x78
 8009ab0:	4828      	ldr	r0, [pc, #160]	; (8009b54 <_printf_i+0x248>)
 8009ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ab6:	e7e3      	b.n	8009a80 <_printf_i+0x174>
 8009ab8:	0659      	lsls	r1, r3, #25
 8009aba:	bf48      	it	mi
 8009abc:	b2b6      	uxthmi	r6, r6
 8009abe:	e7e6      	b.n	8009a8e <_printf_i+0x182>
 8009ac0:	4615      	mov	r5, r2
 8009ac2:	e7bb      	b.n	8009a3c <_printf_i+0x130>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	6826      	ldr	r6, [r4, #0]
 8009ac8:	6961      	ldr	r1, [r4, #20]
 8009aca:	1d18      	adds	r0, r3, #4
 8009acc:	6028      	str	r0, [r5, #0]
 8009ace:	0635      	lsls	r5, r6, #24
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_i+0x1cc>
 8009ad4:	6019      	str	r1, [r3, #0]
 8009ad6:	e002      	b.n	8009ade <_printf_i+0x1d2>
 8009ad8:	0670      	lsls	r0, r6, #25
 8009ada:	d5fb      	bpl.n	8009ad4 <_printf_i+0x1c8>
 8009adc:	8019      	strh	r1, [r3, #0]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	4615      	mov	r5, r2
 8009ae4:	e7ba      	b.n	8009a5c <_printf_i+0x150>
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	1d1a      	adds	r2, r3, #4
 8009aea:	602a      	str	r2, [r5, #0]
 8009aec:	681d      	ldr	r5, [r3, #0]
 8009aee:	6862      	ldr	r2, [r4, #4]
 8009af0:	2100      	movs	r1, #0
 8009af2:	4628      	mov	r0, r5
 8009af4:	f7f6 fb94 	bl	8000220 <memchr>
 8009af8:	b108      	cbz	r0, 8009afe <_printf_i+0x1f2>
 8009afa:	1b40      	subs	r0, r0, r5
 8009afc:	6060      	str	r0, [r4, #4]
 8009afe:	6863      	ldr	r3, [r4, #4]
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	2300      	movs	r3, #0
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	e7a8      	b.n	8009a5c <_printf_i+0x150>
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4640      	mov	r0, r8
 8009b12:	47d0      	blx	sl
 8009b14:	3001      	adds	r0, #1
 8009b16:	d0ab      	beq.n	8009a70 <_printf_i+0x164>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	079b      	lsls	r3, r3, #30
 8009b1c:	d413      	bmi.n	8009b46 <_printf_i+0x23a>
 8009b1e:	68e0      	ldr	r0, [r4, #12]
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	4298      	cmp	r0, r3
 8009b24:	bfb8      	it	lt
 8009b26:	4618      	movlt	r0, r3
 8009b28:	e7a4      	b.n	8009a74 <_printf_i+0x168>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4640      	mov	r0, r8
 8009b32:	47d0      	blx	sl
 8009b34:	3001      	adds	r0, #1
 8009b36:	d09b      	beq.n	8009a70 <_printf_i+0x164>
 8009b38:	3501      	adds	r5, #1
 8009b3a:	68e3      	ldr	r3, [r4, #12]
 8009b3c:	9903      	ldr	r1, [sp, #12]
 8009b3e:	1a5b      	subs	r3, r3, r1
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	dcf2      	bgt.n	8009b2a <_printf_i+0x21e>
 8009b44:	e7eb      	b.n	8009b1e <_printf_i+0x212>
 8009b46:	2500      	movs	r5, #0
 8009b48:	f104 0619 	add.w	r6, r4, #25
 8009b4c:	e7f5      	b.n	8009b3a <_printf_i+0x22e>
 8009b4e:	bf00      	nop
 8009b50:	0800a4a9 	.word	0x0800a4a9
 8009b54:	0800a4ba 	.word	0x0800a4ba

08009b58 <_sbrk_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d06      	ldr	r5, [pc, #24]	; (8009b74 <_sbrk_r+0x1c>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	f7f7 f9ac 	bl	8000ec0 <_sbrk>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_sbrk_r+0x1a>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_sbrk_r+0x1a>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	200107f0 	.word	0x200107f0

08009b78 <__sread>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b80:	f000 f8a0 	bl	8009cc4 <_read_r>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	bfab      	itete	ge
 8009b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b8c:	181b      	addge	r3, r3, r0
 8009b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b92:	bfac      	ite	ge
 8009b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b96:	81a3      	strhlt	r3, [r4, #12]
 8009b98:	bd10      	pop	{r4, pc}

08009b9a <__swrite>:
 8009b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	898b      	ldrh	r3, [r1, #12]
 8009ba2:	05db      	lsls	r3, r3, #23
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	4616      	mov	r6, r2
 8009baa:	d505      	bpl.n	8009bb8 <__swrite+0x1e>
 8009bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f000 f868 	bl	8009c88 <_lseek_r>
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	4628      	mov	r0, r5
 8009bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bce:	f000 b817 	b.w	8009c00 <_write_r>

08009bd2 <__sseek>:
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bda:	f000 f855 	bl	8009c88 <_lseek_r>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	bf15      	itete	ne
 8009be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bee:	81a3      	strheq	r3, [r4, #12]
 8009bf0:	bf18      	it	ne
 8009bf2:	81a3      	strhne	r3, [r4, #12]
 8009bf4:	bd10      	pop	{r4, pc}

08009bf6 <__sclose>:
 8009bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfa:	f000 b813 	b.w	8009c24 <_close_r>
	...

08009c00 <_write_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	; (8009c20 <_write_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f7 f93a 	bl	8000e88 <_write>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_write_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_write_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	200107f0 	.word	0x200107f0

08009c24 <_close_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d06      	ldr	r5, [pc, #24]	; (8009c40 <_close_r+0x1c>)
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	f7f7 f938 	bl	8000ea4 <_close>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_close_r+0x1a>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_close_r+0x1a>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	200107f0 	.word	0x200107f0

08009c44 <_fstat_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_fstat_r+0x20>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	4611      	mov	r1, r2
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f7f7 f92b 	bl	8000eac <_fstat>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d102      	bne.n	8009c60 <_fstat_r+0x1c>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	b103      	cbz	r3, 8009c60 <_fstat_r+0x1c>
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	bd38      	pop	{r3, r4, r5, pc}
 8009c62:	bf00      	nop
 8009c64:	200107f0 	.word	0x200107f0

08009c68 <_isatty_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d06      	ldr	r5, [pc, #24]	; (8009c84 <_isatty_r+0x1c>)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7f7 f920 	bl	8000eb8 <_isatty>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_isatty_r+0x1a>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_isatty_r+0x1a>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	200107f0 	.word	0x200107f0

08009c88 <_lseek_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d07      	ldr	r5, [pc, #28]	; (8009ca8 <_lseek_r+0x20>)
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	602a      	str	r2, [r5, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f7f7 f910 	bl	8000ebc <_lseek>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_lseek_r+0x1e>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_lseek_r+0x1e>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	200107f0 	.word	0x200107f0

08009cac <__malloc_lock>:
 8009cac:	4801      	ldr	r0, [pc, #4]	; (8009cb4 <__malloc_lock+0x8>)
 8009cae:	f7ff bb15 	b.w	80092dc <__retarget_lock_acquire_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	200107e4 	.word	0x200107e4

08009cb8 <__malloc_unlock>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__malloc_unlock+0x8>)
 8009cba:	f7ff bb10 	b.w	80092de <__retarget_lock_release_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	200107e4 	.word	0x200107e4

08009cc4 <_read_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d07      	ldr	r5, [pc, #28]	; (8009ce4 <_read_r+0x20>)
 8009cc8:	4604      	mov	r4, r0
 8009cca:	4608      	mov	r0, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f7f7 f8ca 	bl	8000e6c <_read>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_read_r+0x1e>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_read_r+0x1e>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	200107f0 	.word	0x200107f0

08009ce8 <_init>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr

08009cf4 <_fini>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr
