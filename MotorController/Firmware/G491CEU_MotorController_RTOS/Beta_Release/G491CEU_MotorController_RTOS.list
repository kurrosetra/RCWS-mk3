
G491CEU_MotorController_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  08011998  08011998  00021998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125ac  080125ac  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080125ac  080125ac  000225ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125b4  080125b4  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125b4  080125b4  000225b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125b8  080125b8  000225b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080125bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b84  200001e4  080127a0  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010d68  080127a0  00030d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad34  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c43  00000000  00000000  0005af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  00061b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de0  00000000  00000000  00063c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288b8  00000000  00000000  00065a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e05a  00000000  00000000  0008e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1433  00000000  00000000  000bc352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095f8  00000000  00000000  0019d7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011980 	.word	0x08011980

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08011980 	.word	0x08011980

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9bf 	b.w	8000f98 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b09a      	sub	sp, #104	; 0x68
 8000fa0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* definition and creation of mx_motor_state */
	osMutexDef(mx_motor_state);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
	mx_motor_stateHandle = osMutexCreate(osMutex(mx_motor_state));
 8000fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 fad6 	bl	800755c <osMutexCreate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <MX_FREERTOS_Init+0x110>)
 8000fb4:	6013      	str	r3, [r2, #0]

	/* definition and creation of mx_weapon_state */
	osMutexDef(mx_weapon_state);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60
	mx_weapon_stateHandle = osMutexCreate(osMutex(mx_weapon_state));
 8000fba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 facc 	bl	800755c <osMutexCreate>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a3a      	ldr	r2, [pc, #232]	; (80010b0 <MX_FREERTOS_Init+0x114>)
 8000fc8:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of timWeapon */
	osTimerDef(timWeapon, tim_weapon_callback);
 8000fca:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <MX_FREERTOS_Init+0x118>)
 8000fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
	timWeaponHandle = osTimerCreate(osTimer(timWeapon), osTimerPeriodic, NULL);
 8000fce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 fa24 	bl	8007424 <osTimerCreate>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a36      	ldr	r2, [pc, #216]	; (80010b8 <MX_FREERTOS_Init+0x11c>)
 8000fe0:	6013      	str	r3, [r2, #0]

	/* definition and creation of timMotor */
	osTimerDef(timMotor, tim_motor_callback);
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_FREERTOS_Init+0x120>)
 8000fe4:	65bb      	str	r3, [r7, #88]	; 0x58
	timMotorHandle = osTimerCreate(osTimer(timMotor), osTimerPeriodic, NULL);
 8000fe6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fa18 	bl	8007424 <osTimerCreate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <MX_FREERTOS_Init+0x124>)
 8000ff8:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of q_manager */
	osMessageQDef(q_manager, 6, uint16_t);
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <MX_FREERTOS_Init+0x128>)
 8000ffc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001004:	e883 0003 	stmia.w	r3, {r0, r1}
	q_managerHandle = osMessageCreate(osMessageQ(q_manager), NULL);
 8001008:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 fc34 	bl	800787c <osMessageCreate>
 8001014:	4603      	mov	r3, r0
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <MX_FREERTOS_Init+0x12c>)
 8001018:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mail_setup();
 800101a:	f000 f8df 	bl	80011dc <mail_setup>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of TManager */
	osThreadDef(TManager, t_manager, osPriorityHigh, 0, 512);
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <MX_FREERTOS_Init+0x130>)
 8001020:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001024:	461d      	mov	r5, r3
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	6023      	str	r3, [r4, #0]
	TManagerHandle = osThreadCreate(osThread(TManager), NULL);
 800102e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f006 f99e 	bl	8007376 <osThreadCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <MX_FREERTOS_Init+0x134>)
 800103e:	6013      	str	r3, [r2, #0]

	/* definition and creation of TBus */
	osThreadDef(TBus, t_bus, osPriorityLow, 0, 1024);
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_FREERTOS_Init+0x138>)
 8001042:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	6023      	str	r3, [r4, #0]
	TBusHandle = osThreadCreate(osThread(TBus), NULL);
 8001050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f006 f98d 	bl	8007376 <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <MX_FREERTOS_Init+0x13c>)
 8001060:	6013      	str	r3, [r2, #0]

	/* definition and creation of TMotor */
	osThreadDef(TMotor, t_motor, osPriorityNormal, 0, 1024);
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_FREERTOS_Init+0x140>)
 8001064:	f107 0414 	add.w	r4, r7, #20
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	682b      	ldr	r3, [r5, #0]
 8001070:	6023      	str	r3, [r4, #0]
	TMotorHandle = osThreadCreate(osThread(TMotor), NULL);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f006 f97c 	bl	8007376 <osThreadCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <MX_FREERTOS_Init+0x144>)
 8001082:	6013      	str	r3, [r2, #0]

	/* definition and creation of TWeapon */
	osThreadDef(TWeapon, t_weapon, osPriorityAboveNormal, 0, 1024);
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_FREERTOS_Init+0x148>)
 8001086:	463c      	mov	r4, r7
 8001088:	461d      	mov	r5, r3
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	6023      	str	r3, [r4, #0]
	TWeaponHandle = osThreadCreate(osThread(TWeapon), NULL);
 8001092:	463b      	mov	r3, r7
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f006 f96d 	bl	8007376 <osThreadCreate>
 800109c:	4603      	mov	r3, r0
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_FREERTOS_Init+0x14c>)
 80010a0:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 80010a2:	bf00      	nop
 80010a4:	3768      	adds	r7, #104	; 0x68
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000022c 	.word	0x2000022c
 80010b0:	20000230 	.word	0x20000230
 80010b4:	0800c0cd 	.word	0x0800c0cd
 80010b8:	20000224 	.word	0x20000224
 80010bc:	0800b021 	.word	0x0800b021
 80010c0:	20000228 	.word	0x20000228
 80010c4:	080119bc 	.word	0x080119bc
 80010c8:	20000220 	.word	0x20000220
 80010cc:	080119c4 	.word	0x080119c4
 80010d0:	20000210 	.word	0x20000210
 80010d4:	080119d8 	.word	0x080119d8
 80010d8:	20000214 	.word	0x20000214
 80010dc:	080119ec 	.word	0x080119ec
 80010e0:	20000218 	.word	0x20000218
 80010e4:	08011a00 	.word	0x08011a00
 80010e8:	2000021c 	.word	0x2000021c

080010ec <opt_get_queue>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
osMessageQId opt_get_queue(const Queue_ID qID)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	switch (qID)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <opt_get_queue+0x16>
	{
	case Q_MANAGER_NOTIF:
		return q_managerHandle;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <opt_get_queue+0x24>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	e000      	b.n	8001104 <opt_get_queue+0x18>
	default:
		return 0;
 8001102:	2300      	movs	r3, #0
	}
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000220 	.word	0x20000220

08001114 <mtr_get_mail>:

osMailQId mtr_get_mail(const Mail_ID id)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	if (id == Mail_Bus_id)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <mtr_get_mail+0x16>
		return mail_busHandle;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <mtr_get_mail+0x48>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	e012      	b.n	8001150 <mtr_get_mail+0x3c>
	else if (id == Mail_Motor_id)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d102      	bne.n	8001136 <mtr_get_mail+0x22>
		return mail_motorHandle;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <mtr_get_mail+0x4c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	e00c      	b.n	8001150 <mtr_get_mail+0x3c>
	else if (id == Mail_Weapon_id)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d102      	bne.n	8001142 <mtr_get_mail+0x2e>
		return mail_weaponHandle;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <mtr_get_mail+0x50>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	e006      	b.n	8001150 <mtr_get_mail+0x3c>
	else if (id == Mail_Motor_Ext_id)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d102      	bne.n	800114e <mtr_get_mail+0x3a>
		return mail_motorExtHandle;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <mtr_get_mail+0x54>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	e000      	b.n	8001150 <mtr_get_mail+0x3c>

	return NULL;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000200 	.word	0x20000200
 8001160:	20000204 	.word	0x20000204
 8001164:	2000020c 	.word	0x2000020c
 8001168:	20000208 	.word	0x20000208

0800116c <mtr_get_timer>:

osTimerId mtr_get_timer(const Timer_ID tID)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	switch (tID)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <mtr_get_timer+0x16>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d003      	beq.n	8001188 <mtr_get_timer+0x1c>
 8001180:	e005      	b.n	800118e <mtr_get_timer+0x22>
	{
	case Tim_Weapon_id:
		return timWeaponHandle;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <mtr_get_timer+0x30>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	e003      	b.n	8001190 <mtr_get_timer+0x24>
	case Tim_Motor_id:
		return timMotorHandle;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <mtr_get_timer+0x34>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e000      	b.n	8001190 <mtr_get_timer+0x24>
	default:
		return NULL;
 800118e:	2300      	movs	r3, #0
	}
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20000224 	.word	0x20000224
 80011a0:	20000228 	.word	0x20000228

080011a4 <mtr_get_mutex>:

osMutexId mtr_get_mutex(const Mutex_ID mId)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	switch (mId)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <mtr_get_mutex+0x1a>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <mtr_get_mutex+0x20>
	{
	case Mutex_Motor_id:
		return mx_motor_stateHandle;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <mtr_get_mutex+0x30>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	e003      	b.n	80011c6 <mtr_get_mutex+0x22>
	case Mutex_Weapon_id:
		return mx_weapon_stateHandle;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <mtr_get_mutex+0x34>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	e000      	b.n	80011c6 <mtr_get_mutex+0x22>
	default:
		return NULL;
 80011c4:	2300      	movs	r3, #0
	}
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000022c 	.word	0x2000022c
 80011d8:	20000230 	.word	0x20000230

080011dc <mail_setup>:

static void mail_setup()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b090      	sub	sp, #64	; 0x40
 80011e0:	af00      	add	r7, sp, #0
	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Bus_t */
	osMailQDef(mail_bus, 10, MAIL_Bus_t); /* Define mail queue */
 80011e2:	230a      	movs	r3, #10
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
 80011e6:	2310      	movs	r3, #16
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
	mail_busHandle = osMailCreate(osMailQ(mail_bus), NULL); /* create mail queue */
 80011f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 fc06 	bl	8007a08 <osMailCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <mail_setup+0x8c>)
 8001200:	6013      	str	r3, [r2, #0]

	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Motor_t */
	osMailQDef(mail_motor, 20, MAIL_Motor_t); /* Define mail queue */
 8001202:	2314      	movs	r3, #20
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	230c      	movs	r3, #12
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
	mail_motorHandle = osMailCreate(osMailQ(mail_motor), NULL); /* create mail queue */
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f006 fbf6 	bl	8007a08 <osMailCreate>
 800121c:	4603      	mov	r3, r0
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <mail_setup+0x90>)
 8001220:	6013      	str	r3, [r2, #0]

	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Motor_t */
	osMailQDef(mail_motor_ext, 10, MAIL_Motor_Ext_t); /* Define mail queue */
 8001222:	230a      	movs	r3, #10
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	61bb      	str	r3, [r7, #24]
	mail_motorExtHandle = osMailCreate(osMailQ(mail_motor_ext), NULL); /* create mail queue */
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f006 fbe6 	bl	8007a08 <osMailCreate>
 800123c:	4603      	mov	r3, r0
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <mail_setup+0x94>)
 8001240:	6013      	str	r3, [r2, #0]

	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Weapon_t */
	osMailQDef(mail_weapon, 10, MAIL_Weapon_t); /* Define mail queue */
 8001242:	230a      	movs	r3, #10
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	2306      	movs	r3, #6
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	60bb      	str	r3, [r7, #8]
	mail_weaponHandle = osMailCreate(osMailQ(mail_weapon), NULL); /* create mail queue */
 8001250:	463b      	mov	r3, r7
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fbd7 	bl	8007a08 <osMailCreate>
 800125a:	4603      	mov	r3, r0
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <mail_setup+0x98>)
 800125e:	6013      	str	r3, [r2, #0]

}
 8001260:	bf00      	nop
 8001262:	3740      	adds	r7, #64	; 0x40
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000200 	.word	0x20000200
 800126c:	20000204 	.word	0x20000204
 8001270:	20000208 	.word	0x20000208
 8001274:	2000020c 	.word	0x2000020c

08001278 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_FDCAN1_Init+0x84>)
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <MX_FDCAN1_Init+0x88>)
 8001280:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_FDCAN1_Init+0x84>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_FDCAN1_Init+0x84>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_FDCAN1_Init+0x84>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_FDCAN1_Init+0x84>)
 8001296:	2200      	movs	r2, #0
 8001298:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_FDCAN1_Init+0x84>)
 800129c:	2200      	movs	r2, #0
 800129e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 22;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012ae:	2216      	movs	r2, #22
 80012b0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 147;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012b4:	2293      	movs	r2, #147	; 0x93
 80012b6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 22;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012ba:	2216      	movs	r2, #22
 80012bc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 8;
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012c6:	2208      	movs	r2, #8
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012cc:	2208      	movs	r2, #8
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 8;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012d2:	2208      	movs	r2, #8
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012d8:	221c      	movs	r2, #28
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012de:	2208      	movs	r2, #8
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_FDCAN1_Init+0x84>)
 80012ea:	f001 f969 	bl	80025c0 <HAL_FDCAN_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80012f4:	f000 fc42 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000234 	.word	0x20000234
 8001300:	40006400 	.word	0x40006400

08001304 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800130a:	4a20      	ldr	r2, [pc, #128]	; (800138c <MX_FDCAN2_Init+0x88>)
 800130c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001322:	2200      	movs	r2, #0
 8001324:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001328:	2200      	movs	r2, #0
 800132a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800132e:	2200      	movs	r2, #0
 8001330:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 22;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800133a:	2216      	movs	r2, #22
 800133c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 147;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001340:	2293      	movs	r2, #147	; 0x93
 8001342:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 22;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001346:	2216      	movs	r2, #22
 8001348:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800134c:	2201      	movs	r2, #1
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 16;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001352:	2210      	movs	r2, #16
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 17;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001358:	2211      	movs	r2, #17
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 16;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800135e:	2210      	movs	r2, #16
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 28;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001364:	221c      	movs	r2, #28
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 8;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_FDCAN2_Init+0x84>)
 800136a:	2208      	movs	r2, #8
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001370:	2200      	movs	r2, #0
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_FDCAN2_Init+0x84>)
 8001376:	f001 f923 	bl	80025c0 <HAL_FDCAN_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001380:	f000 fbfc 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000298 	.word	0x20000298
 800138c:	40006800 	.word	0x40006800

08001390 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0a0      	sub	sp, #128	; 0x80
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	2250      	movs	r2, #80	; 0x50
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00d fc1b 	bl	800ebec <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_FDCAN_MspInit+0x16c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d14b      	bne.n	8001458 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80013c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f825 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80013dc:	f000 fbce 	bl	8001b7c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013e0:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_FDCAN_MspInit+0x170>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_FDCAN_MspInit+0x170>)
 80013e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <HAL_FDCAN_MspInit+0x170>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10b      	bne.n	800140a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	4a43      	ldr	r2, [pc, #268]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 80013f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fc:	6593      	str	r3, [r2, #88]	; 0x58
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = BUS_RX_Pin|BUS_TX_Pin;
 8001422:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001426:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001434:	2309      	movs	r3, #9
 8001436:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f001 ff7b 	bl	800333c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2015      	movs	r0, #21
 800144c:	f001 f890 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001450:	2015      	movs	r0, #21
 8001452:	f001 f8a7 	bl	80025a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001456:	e04d      	b.n	80014f4 <HAL_FDCAN_MspInit+0x164>
  else if(fdcanHandle->Instance==FDCAN2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2a      	ldr	r2, [pc, #168]	; (8001508 <HAL_FDCAN_MspInit+0x178>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d148      	bne.n	80014f4 <HAL_FDCAN_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4618      	mov	r0, r3
 8001474:	f002 ffd4 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 800147e:	f000 fb7d 	bl	8001b7c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_FDCAN_MspInit+0x170>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_FDCAN_MspInit+0x170>)
 800148a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_FDCAN_MspInit+0x170>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10b      	bne.n	80014ac <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 800149a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800149e:	6593      	str	r3, [r2, #88]	; 0x58
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_FDCAN_MspInit+0x174>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_RX_Pin|MOTOR_TX_Pin;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80014d4:	2309      	movs	r3, #9
 80014d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014dc:	4619      	mov	r1, r3
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <HAL_FDCAN_MspInit+0x17c>)
 80014e0:	f001 ff2c 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2105      	movs	r1, #5
 80014e8:	2056      	movs	r0, #86	; 0x56
 80014ea:	f001 f841 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80014ee:	2056      	movs	r0, #86	; 0x56
 80014f0:	f001 f858 	bl	80025a4 <HAL_NVIC_EnableIRQ>
}
 80014f4:	bf00      	nop
 80014f6:	3780      	adds	r7, #128	; 0x80
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40006400 	.word	0x40006400
 8001500:	200002fc 	.word	0x200002fc
 8001504:	40021000 	.word	0x40021000
 8001508:	40006800 	.word	0x40006800
 800150c:	48000400 	.word	0x48000400

08001510 <MX_GPIO_Init>:
     PA1   ------> USART2_DE
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b94      	ldr	r3, [pc, #592]	; (8001778 <MX_GPIO_Init+0x268>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a93      	ldr	r2, [pc, #588]	; (8001778 <MX_GPIO_Init+0x268>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <MX_GPIO_Init+0x268>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153e:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <MX_GPIO_Init+0x268>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a8d      	ldr	r2, [pc, #564]	; (8001778 <MX_GPIO_Init+0x268>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <MX_GPIO_Init+0x268>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <MX_GPIO_Init+0x268>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <MX_GPIO_Init+0x268>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b85      	ldr	r3, [pc, #532]	; (8001778 <MX_GPIO_Init+0x268>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b82      	ldr	r3, [pc, #520]	; (8001778 <MX_GPIO_Init+0x268>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a81      	ldr	r2, [pc, #516]	; (8001778 <MX_GPIO_Init+0x268>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b7f      	ldr	r3, [pc, #508]	; (8001778 <MX_GPIO_Init+0x268>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <MX_GPIO_Init+0x268>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <MX_GPIO_Init+0x268>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b79      	ldr	r3, [pc, #484]	; (8001778 <MX_GPIO_Init+0x268>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COCK_PWR_EN_Pin|TRIGGER_ENABLE_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f248 0120 	movw	r1, #32800	; 0x8020
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f002 f862 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_START_GPIO_Port, T_START_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b2:	4872      	ldr	r0, [pc, #456]	; (800177c <MX_GPIO_Init+0x26c>)
 80015b4:	f002 f85c 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2140      	movs	r1, #64	; 0x40
 80015bc:	4870      	ldr	r0, [pc, #448]	; (8001780 <MX_GPIO_Init+0x270>)
 80015be:	f002 f857 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	486c      	ldr	r0, [pc, #432]	; (800177c <MX_GPIO_Init+0x26c>)
 80015ca:	f002 f851 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC4 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_10
 80015ce:	f64c 4310 	movw	r3, #52240	; 0xcc10
 80015d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d4:	2303      	movs	r3, #3
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4867      	ldr	r0, [pc, #412]	; (8001780 <MX_GPIO_Init+0x270>)
 80015e4:	f001 feaa 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80015e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4861      	ldr	r0, [pc, #388]	; (8001784 <MX_GPIO_Init+0x274>)
 80015fe:	f001 fe9d 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IMU_DE_Pin|IMU_RX_Pin;
 8001602:	2306      	movs	r3, #6
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001612:	2307      	movs	r3, #7
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f001 fe8c 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_TX_Pin;
 8001624:	2308      	movs	r3, #8
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001634:	2307      	movs	r3, #7
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_TX_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f001 fe7b 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COCK_PWR_EN_Pin;
 8001646:	2320      	movs	r3, #32
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COCK_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f001 fe6c 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIM_AZ_ZERO_Pin;
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001668:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166e:	2301      	movs	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIM_AZ_ZERO_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f001 fe5e 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001680:	f242 4397 	movw	r3, #9367	; 0x2497
 8001684:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001686:	2303      	movs	r3, #3
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4839      	ldr	r0, [pc, #228]	; (800177c <MX_GPIO_Init+0x26c>)
 8001696:	f001 fe51 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MUNC_A_Pin|MUNC_B_Pin;
 800169a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4832      	ldr	r0, [pc, #200]	; (800177c <MX_GPIO_Init+0x26c>)
 80016b2:	f001 fe43 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_JS_PULSE_Pin;
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_JS_PULSE_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	482c      	ldr	r0, [pc, #176]	; (800177c <MX_GPIO_Init+0x26c>)
 80016cc:	f001 fe36 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_START_Pin|LED_BUILTIN_Pin;
 80016d0:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4824      	ldr	r0, [pc, #144]	; (800177c <MX_GPIO_Init+0x26c>)
 80016ea:	f001 fe27 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_HOLD_Pin;
 80016ee:	2340      	movs	r3, #64	; 0x40
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_HOLD_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	481e      	ldr	r0, [pc, #120]	; (8001780 <MX_GPIO_Init+0x270>)
 8001706:	f001 fe19 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001710:	2303      	movs	r3, #3
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fe0b 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGGER_ENABLE_Pin;
 8001726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f001 fdfb 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001750:	2302      	movs	r3, #2
 8001752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <MX_GPIO_Init+0x26c>)
 800175c:	f001 fdee 	bl	800333c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2105      	movs	r1, #5
 8001764:	2028      	movs	r0, #40	; 0x28
 8001766:	f000 ff03 	bl	8002570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800176a:	2028      	movs	r0, #40	; 0x28
 800176c:	f000 ff1a 	bl	80025a4 <HAL_NVIC_EnableIRQ>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000800 	.word	0x48000800
 8001784:	48001800 	.word	0x48001800

08001788 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_IWDG_Init+0x34>)
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <MX_IWDG_Init+0x38>)
 8001790:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_IWDG_Init+0x34>)
 8001794:	2206      	movs	r2, #6
 8001796:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 625;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_IWDG_Init+0x34>)
 800179a:	f240 2271 	movw	r2, #625	; 0x271
 800179e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 625;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_IWDG_Init+0x34>)
 80017a2:	f240 2271 	movw	r2, #625	; 0x271
 80017a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_IWDG_Init+0x34>)
 80017aa:	f001 ff93 	bl	80036d4 <HAL_IWDG_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80017b4:	f000 f9e2 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000300 	.word	0x20000300
 80017c0:	40003000 	.word	0x40003000

080017c4 <get_reset_source>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static reset_cause_e get_reset_source()
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
	reset_cause_e ret = RESET_CAUSE_UNKNOWN;
 80017ca:	2300      	movs	r3, #0
 80017cc:	71fb      	strb	r3, [r7, #7]

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <get_reset_source+0x78>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da02      	bge.n	80017de <get_reset_source+0x1a>
		ret = RESET_CAUSE_LOW_POWER_RESET;
 80017d8:	2301      	movs	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	e026      	b.n	800182c <get_reset_source+0x68>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <get_reset_source+0x78>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <get_reset_source+0x2e>
		ret = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 80017ec:	2302      	movs	r3, #2
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	e01c      	b.n	800182c <get_reset_source+0x68>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <get_reset_source+0x78>)
 80017f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <get_reset_source+0x42>
		ret = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8001800:	2303      	movs	r3, #3
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	e012      	b.n	800182c <get_reset_source+0x68>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <get_reset_source+0x78>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <get_reset_source+0x56>
		/* This reset is induced by calling the ARM CMSIS */
		/* `NVIC_SystemReset()` function! */
		ret = RESET_CAUSE_SOFTWARE_RESET;
 8001814:	2304      	movs	r3, #4
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	e008      	b.n	800182c <get_reset_source+0x68>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <get_reset_source+0x78>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <get_reset_source+0x68>
		ret = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8001828:	2305      	movs	r3, #5
 800182a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	g_reset_cause = get_reset_source();
 8001844:	f7ff ffbe 	bl	80017c4 <get_reset_source>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <main+0xbc>)
 800184e:	701a      	strb	r2, [r3, #0]
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <main+0xc0>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	4a2a      	ldr	r2, [pc, #168]	; (8001900 <main+0xc0>)
 8001858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800185c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001860:	f000 fda3 	bl	80023aa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001864:	f000 f858 	bl	8001918 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001868:	f7ff fe52 	bl	8001510 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800186c:	f000 fcbe 	bl	80021ec <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8001870:	f000 fb32 	bl	8001ed8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001874:	f000 fb84 	bl	8001f80 <MX_TIM3_Init>
	MX_FDCAN1_Init();
 8001878:	f7ff fcfe 	bl	8001278 <MX_FDCAN1_Init>
	MX_FDCAN2_Init();
 800187c:	f7ff fd42 	bl	8001304 <MX_FDCAN2_Init>
	MX_IWDG_Init();
 8001880:	f7ff ff82 	bl	8001788 <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	retarget_init();
 8001884:	f00c ff6e 	bl	800e764 <retarget_init>

	LOG("====\r\n");
 8001888:	f000 f893 	bl	80019b2 <HAL_GetTick>
 800188c:	4601      	mov	r1, r0
 800188e:	238b      	movs	r3, #139	; 0x8b
 8001890:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <main+0xc4>)
 8001892:	481d      	ldr	r0, [pc, #116]	; (8001908 <main+0xc8>)
 8001894:	f00d fe1c 	bl	800f4d0 <iprintf>
	LOG("MotorController firmware!\r\n");
 8001898:	f000 f88b 	bl	80019b2 <HAL_GetTick>
 800189c:	4601      	mov	r1, r0
 800189e:	238c      	movs	r3, #140	; 0x8c
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <main+0xc4>)
 80018a2:	481a      	ldr	r0, [pc, #104]	; (800190c <main+0xcc>)
 80018a4:	f00d fe14 	bl	800f4d0 <iprintf>
	LOG("====\r\n");
 80018a8:	f000 f883 	bl	80019b2 <HAL_GetTick>
 80018ac:	4601      	mov	r1, r0
 80018ae:	238d      	movs	r3, #141	; 0x8d
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <main+0xc4>)
 80018b2:	4815      	ldr	r0, [pc, #84]	; (8001908 <main+0xc8>)
 80018b4:	f00d fe0c 	bl	800f4d0 <iprintf>

	if ((g_reset_cause == RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET) || (g_reset_cause == RESET_CAUSE_SOFTWARE_RESET)) {
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <main+0xbc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d003      	beq.n	80018c8 <main+0x88>
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <main+0xbc>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d107      	bne.n	80018d8 <main+0x98>
		LOG("system is reset from IWDG or s/w reset!\r\n");
 80018c8:	f000 f873 	bl	80019b2 <HAL_GetTick>
 80018cc:	4601      	mov	r1, r0
 80018ce:	2390      	movs	r3, #144	; 0x90
 80018d0:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <main+0xc4>)
 80018d2:	480f      	ldr	r0, [pc, #60]	; (8001910 <main+0xd0>)
 80018d4:	f00d fdfc 	bl	800f4d0 <iprintf>
	}

	if (g_reset_cause == RESET_CAUSE_EXTERNAL_RESET_PIN_RESET)
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <main+0xbc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d107      	bne.n	80018f0 <main+0xb0>
		LOG("do you reset this chip?\r\n");
 80018e0:	f000 f867 	bl	80019b2 <HAL_GetTick>
 80018e4:	4601      	mov	r1, r0
 80018e6:	2394      	movs	r3, #148	; 0x94
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <main+0xc4>)
 80018ea:	480a      	ldr	r0, [pc, #40]	; (8001914 <main+0xd4>)
 80018ec:	f00d fdf0 	bl	800f4d0 <iprintf>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80018f0:	f7ff fb54 	bl	8000f9c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80018f4:	f005 fd28 	bl	8007348 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80018f8:	e7fe      	b.n	80018f8 <main+0xb8>
 80018fa:	bf00      	nop
 80018fc:	20000310 	.word	0x20000310
 8001900:	40021000 	.word	0x40021000
 8001904:	08011a14 	.word	0x08011a14
 8001908:	08011a1c 	.word	0x08011a1c
 800190c:	08011a30 	.word	0x08011a30
 8001910:	08011a58 	.word	0x08011a58
 8001914:	08011a90 	.word	0x08011a90

08001918 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	; 0x50
 800191c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	2238      	movs	r2, #56	; 0x38
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00d f960 	bl	800ebec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800193a:	2000      	movs	r0, #0
 800193c:	f001 ff2a 	bl	8003794 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001940:	2309      	movs	r3, #9
 8001942:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800194a:	2301      	movs	r3, #1
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194e:	2302      	movs	r3, #2
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001952:	2303      	movs	r3, #3
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001956:	2302      	movs	r3, #2
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800195a:	2355      	movs	r3, #85	; 0x55
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195e:	2302      	movs	r3, #2
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001962:	2302      	movs	r3, #2
 8001964:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001966:	2302      	movs	r3, #2
 8001968:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4618      	mov	r0, r3
 8001970:	f001 ffc4 	bl	80038fc <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x66>
		Error_Handler();
 800197a:	f000 f8ff 	bl	8001b7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197e:	230f      	movs	r3, #15
 8001980:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001982:	2303      	movs	r3, #3
 8001984:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2104      	movs	r1, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fac8 	bl	8003f2c <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x8e>
		Error_Handler();
 80019a2:	f000 f8eb 	bl	8001b7c <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80019a6:	f002 fcc9 	bl	800433c <HAL_RCC_EnableCSS>
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	; 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_GetTick>:

/* USER CODE BEGIN 4 */
/* TODO User Functions */
uint32_t HAL_GetTick(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
	return osKernelSysTick();
 80019b6:	f005 fcce 	bl	8007356 <osKernelSysTick>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_Delay>:

void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	osDelay(Delay);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f005 fd17 	bl	80073fc <osDelay>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_TIM_TriggerCallback>:
//		t_js_counter++;
//	}
//}

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
//		}
//		HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_SET);
//		LOG("Trigger start!\r\n");
//	}

}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_FDCAN_RxFifo0Callback>:
 * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
 *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
 * @retval None
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0b4      	sub	sp, #208	; 0xd0
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[64];
	BUS_Rx_Buffer_t bus_buffer;
	CAN_Data_t ingenia_buffer;

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d068      	beq.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
		if (hfdcan->Instance == hfdcan2.Instance) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d128      	bne.n	8001a5e <HAL_FDCAN_RxFifo0Callback+0x72>
//			Ingenia_IRQHandler(hfdcan);
			/* Retrieve Rx messages from RX FIFO0 */
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001a0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a14:	2140      	movs	r1, #64	; 0x40
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 f866 	bl	8002ae8 <HAL_FDCAN_GetRxMessage>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d157      	bne.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
				if (RxHeader.IdType == FDCAN_STANDARD_ID) {
 8001a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d153      	bne.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
					ingenia_buffer.id = RxHeader.Identifier;
 8001a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a2e:	60fb      	str	r3, [r7, #12]
					ingenia_buffer.len = FDCAN_Convert_Datalength(RxHeader.DataLength);
 8001a30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fd8f 	bl	800c558 <FDCAN_Convert_Datalength>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	743b      	strb	r3, [r7, #16]
					memcpy(ingenia_buffer.rxData, RxData, ingenia_buffer.len);
 8001a3e:	7c3b      	ldrb	r3, [r7, #16]
 8001a40:	461a      	mov	r2, r3
 8001a42:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	3305      	adds	r3, #5
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00d f8bf 	bl	800ebd0 <memcpy>

					Ingenia_rx_callback(&ingenia_buffer);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00b fd74 	bl	800d544 <Ingenia_rx_callback>
				}
			}
		}
	}

}
 8001a5c:	e039      	b.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
		else if (hfdcan->Instance == hfdcan1.Instance) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d133      	bne.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001a6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a6e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f001 f837 	bl	8002ae8 <HAL_FDCAN_GetRxMessage>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d128      	bne.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
				if (RxHeader.IdType == FDCAN_STANDARD_ID) {
 8001a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d124      	bne.n	8001ad2 <HAL_FDCAN_RxFifo0Callback+0xe6>
					bus_buffer.lastTimestamp = HAL_GetTick();
 8001a88:	f7ff ff93 	bl	80019b2 <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	667b      	str	r3, [r7, #100]	; 0x64
					bus_buffer.id = RxHeader.Identifier;
 8001a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a94:	61fb      	str	r3, [r7, #28]
					bus_buffer.len = FDCAN_Convert_Datalength(RxHeader.DataLength);
 8001a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00a fd5c 	bl	800c558 <FDCAN_Convert_Datalength>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f887 3020 	strb.w	r3, [r7, #32]
					memcpy(bus_buffer.data, RxData, bus_buffer.len);
 8001aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	3305      	adds	r3, #5
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00d f88a 	bl	800ebd0 <memcpy>
					bus_buffer.counter++;
 8001abc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					bus_rx_callback(&bus_buffer);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00a fd53 	bl	800c578 <bus_rx_callback>
}
 8001ad2:	bf00      	nop
 8001ad4:	37d0      	adds	r7, #208	; 0xd0
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000298 	.word	0x20000298
 8001ae0:	20000234 	.word	0x20000234

08001ae4 <HAL_FDCAN_RxFifo1Callback>:
 * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
 *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
 * @retval None
 */
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	UNUSED(RxFifo1ITs);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
	 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_FDCAN_ErrorStatusCallback>:
 * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
 *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
 * @retval None
 */
void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
	/* Prevent unused argument(s) compilation warning */
	if (hfdcan->Instance == hfdcan1.Instance) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_FDCAN_ErrorStatusCallback+0x4c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d10d      	bne.n	8001b2e <HAL_FDCAN_ErrorStatusCallback+0x32>
		MX_FDCAN1_Init();
 8001b12:	f7ff fbb1 	bl	8001278 <MX_FDCAN1_Init>
		bus_init();
 8001b16:	f00a fc93 	bl	800c440 <bus_init>
		LOG("\r\n===BUS ERROR!===\r\n\r\n");
 8001b1a:	f7ff ff4a 	bl	80019b2 <HAL_GetTick>
 8001b1e:	4601      	mov	r1, r0
 8001b20:	f44f 73ab 	mov.w	r3, #342	; 0x156
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_FDCAN_ErrorStatusCallback+0x50>)
 8001b26:	480a      	ldr	r0, [pc, #40]	; (8001b50 <HAL_FDCAN_ErrorStatusCallback+0x54>)
 8001b28:	f00d fcd2 	bl	800f4d0 <iprintf>
		mtr_error_callback();

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
	 */
}
 8001b2c:	e007      	b.n	8001b3e <HAL_FDCAN_ErrorStatusCallback+0x42>
	else if (hfdcan->Instance == hfdcan2.Instance)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_FDCAN_ErrorStatusCallback+0x58>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d101      	bne.n	8001b3e <HAL_FDCAN_ErrorStatusCallback+0x42>
		mtr_error_callback();
 8001b3a:	f00b fb23 	bl	800d184 <mtr_error_callback>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000234 	.word	0x20000234
 8001b4c:	08011a14 	.word	0x08011a14
 8001b50:	08011ab8 	.word	0x08011ab8
 8001b54:	20000298 	.word	0x20000298

08001b58 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001b6a:	f000 fc37 	bl	80023dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40001400 	.word	0x40001400

08001b7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_MspInit+0x50>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_MspInit+0x50>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_MspInit+0x50>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_MspInit+0x50>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_MspInit+0x50>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x50>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	f06f 0001 	mvn.w	r0, #1
 8001bc6:	f000 fcd3 	bl	8002570 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bca:	f001 fe87 	bl	80038dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_InitTick+0xcc>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <HAL_InitTick+0xcc>)
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_InitTick+0xcc>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c0a:	f107 020c 	add.w	r2, r7, #12
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 fb5f 	bl	80042d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c1a:	f002 fb31 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8001c1e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_InitTick+0xd0>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_InitTick+0xd8>)
 8001c32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c3a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c50:	f002 fe22 	bl	8004898 <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11b      	bne.n	8001c9a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001c62:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <HAL_InitTick+0xd4>)
 8001c64:	f002 fe70 	bl	8004948 <HAL_TIM_Base_Start_IT>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d111      	bne.n	8001c9a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c76:	2037      	movs	r0, #55	; 0x37
 8001c78:	f000 fc94 	bl	80025a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	d808      	bhi.n	8001c94 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001c82:	2200      	movs	r2, #0
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	2037      	movs	r0, #55	; 0x37
 8001c88:	f000 fc72 	bl	8002570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_InitTick+0xdc>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e002      	b.n	8001c9a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	20000314 	.word	0x20000314
 8001cb4:	40001400 	.word	0x40001400
 8001cb8:	20000004 	.word	0x20000004

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001cc0:	f002 fb4c 	bl	800435c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x8>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <FDCAN1_IT0_IRQHandler+0x10>)
 8001cf2:	f001 f8b9 	bl	8002e68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000234 	.word	0x20000234

08001d00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM7_IRQHandler+0x10>)
 8001d06:	f003 fa74 	bl	80051f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000314 	.word	0x20000314

08001d14 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <FDCAN2_IT0_IRQHandler+0x10>)
 8001d1a:	f001 f8a5 	bl	8002e68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000298 	.word	0x20000298

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d42:	f00c ff1b 	bl	800eb7c <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d7e:	f00c fd1f 	bl	800e7c0 <__io_getchar>
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
	}

return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00c fcef 	bl	800e7a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
	}
	return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
	return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e06:	605a      	str	r2, [r3, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_isatty>:

int _isatty(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f00c fe80 	bl	800eb7c <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2001c000 	.word	0x2001c000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	20000360 	.word	0x20000360
 8001eb0:	20010d68 	.word	0x20010d68

08001eb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00c fe80 	bl	800ebec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	463b      	mov	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001ef8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001efc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f26:	2301      	movs	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f36:	2301      	movs	r3, #1
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f4a:	f002 ff77 	bl	8004e3c <HAL_TIM_Encoder_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f54:	f7ff fe12 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM2_Init+0xa4>)
 8001f66:	f004 f983 	bl	8006270 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f70:	f7ff fe04 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000364 	.word	0x20000364

08001f80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fb4:	4a32      	ldr	r2, [pc, #200]	; (8002080 <MX_TIM3_Init+0x100>)
 8001fb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fba:	22a9      	movs	r2, #169	; 0xa9
 8001fbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fd8:	4828      	ldr	r0, [pc, #160]	; (800207c <MX_TIM3_Init+0xfc>)
 8001fda:	f002 fc5d 	bl	8004898 <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001fe4:	f7ff fdca 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4821      	ldr	r0, [pc, #132]	; (800207c <MX_TIM3_Init+0xfc>)
 8001ff6:	f003 fb8f 	bl	8005718 <HAL_TIM_ConfigClockSource>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002000:	f7ff fdbc 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002004:	481d      	ldr	r0, [pc, #116]	; (800207c <MX_TIM3_Init+0xfc>)
 8002006:	f002 fd0f 	bl	8004a28 <HAL_TIM_PWM_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002010:	f7ff fdb4 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4816      	ldr	r0, [pc, #88]	; (800207c <MX_TIM3_Init+0xfc>)
 8002024:	f004 f924 	bl	8006270 <HAL_TIMEx_MasterConfigSynchronization>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800202e:	f7ff fda5 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002032:	2360      	movs	r3, #96	; 0x60
 8002034:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002042:	463b      	mov	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_TIM3_Init+0xfc>)
 800204a:	f003 fa51 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002054:	f7ff fd92 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	2204      	movs	r2, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_TIM3_Init+0xfc>)
 8002060:	f003 fa46 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800206a:	f7ff fd87 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM3_Init+0xfc>)
 8002070:	f000 f886 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200003b0 	.word	0x200003b0
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d144      	bne.n	8002130 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb4>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = COCK_ENC_A_Pin;
 80020ee:	2301      	movs	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fe:	2301      	movs	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(COCK_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210c:	f001 f916 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COCK_ENC_B_Pin;
 8002110:	2308      	movs	r3, #8
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002118:	2301      	movs	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002120:	2301      	movs	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(COCK_ENC_B_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4804      	ldr	r0, [pc, #16]	; (800213c <HAL_TIM_Encoder_MspInit+0xb8>)
 800212c:	f001 f906 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	48000400 	.word	0x48000400

08002140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_TIM_Base_MspInit+0x38>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10b      	bne.n	800216a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_TIM_Base_MspInit+0x3c>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_TIM_Base_MspInit+0x3c>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6593      	str	r3, [r2, #88]	; 0x58
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_TIM_Base_MspInit+0x3c>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40000400 	.word	0x40000400
 800217c:	40021000 	.word	0x40021000

08002180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_TIM_MspPostInit+0x64>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d11c      	bne.n	80021dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_TIM_MspPostInit+0x68>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_TIM_MspPostInit+0x68>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_TIM_MspPostInit+0x68>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = COCK_PWR_RETRACT_Pin|COCK_PWR_ERECT_Pin;
 80021ba:	2350      	movs	r3, #80	; 0x50
 80021bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f001 f8b0 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021dc:	bf00      	nop
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40021000 	.word	0x40021000

080021ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <MX_USART1_UART_Init+0x90>)
 80021f2:	4a23      	ldr	r2, [pc, #140]	; (8002280 <MX_USART1_UART_Init+0x94>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <MX_USART1_UART_Init+0x90>)
 80021f8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80021fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b1f      	ldr	r3, [pc, #124]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <MX_USART1_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_USART1_UART_Init+0x90>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_USART1_UART_Init+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002234:	4811      	ldr	r0, [pc, #68]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002236:	f004 f8ef 	bl	8006418 <HAL_UART_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002240:	f7ff fc9c 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002244:	2100      	movs	r1, #0
 8002246:	480d      	ldr	r0, [pc, #52]	; (800227c <MX_USART1_UART_Init+0x90>)
 8002248:	f004 ff8a 	bl	8007160 <HAL_UARTEx_SetTxFifoThreshold>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002252:	f7ff fc93 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002256:	2100      	movs	r1, #0
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <MX_USART1_UART_Init+0x90>)
 800225a:	f004 ffbf 	bl	80071dc <HAL_UARTEx_SetRxFifoThreshold>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002264:	f7ff fc8a 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_USART1_UART_Init+0x90>)
 800226a:	f004 ff40 	bl	80070ee <HAL_UARTEx_DisableFifoMode>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002274:	f7ff fc82 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200003fc 	.word	0x200003fc
 8002280:	40013800 	.word	0x40013800

08002284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b09e      	sub	sp, #120	; 0x78
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2250      	movs	r2, #80	; 0x50
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00c fca1 	bl	800ebec <memset>
  if(uartHandle->Instance==USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_UART_MspInit+0xcc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d149      	bne.n	8002348 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 f8ad 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022cc:	f7ff fc56 	bl	8001b7c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_UART_MspInit+0xd0>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_UART_MspInit+0xd0>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022da:	6613      	str	r3, [r2, #96]	; 0x60
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_UART_MspInit+0xd0>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_UART_MspInit+0xd0>)
 80022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_UART_MspInit+0xd0>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_UART_MspInit+0xd0>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002312:	2307      	movs	r3, #7
 8002314:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800231a:	4619      	mov	r1, r3
 800231c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002320:	f001 f80c 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002328:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002336:	2307      	movs	r3, #7
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800233a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800233e:	4619      	mov	r1, r3
 8002340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002344:	f000 fffa 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002348:	bf00      	nop
 800234a:	3778      	adds	r7, #120	; 0x78
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013800 	.word	0x40013800
 8002354:	40021000 	.word	0x40021000

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800235a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 800235e:	490e      	ldr	r1, [pc, #56]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002364:	e002      	b.n	800236c <LoopCopyDataInit>

08002366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236a:	3304      	adds	r3, #4

0800236c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800236c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002370:	d3f9      	bcc.n	8002366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002374:	4c0b      	ldr	r4, [pc, #44]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002378:	e001      	b.n	800237e <LoopFillZerobss>

0800237a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800237c:	3204      	adds	r2, #4

0800237e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002380:	d3fb      	bcc.n	800237a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002382:	f7ff fd97 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002386:	f00c fbff 	bl	800eb88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7ff fa59 	bl	8001840 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   r0, =_estack
 8002390:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800239c:	080125bc 	.word	0x080125bc
  ldr r2, =_sbss
 80023a0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80023a4:	20010d68 	.word	0x20010d68

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>

080023aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f8d0 	bl	800255a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ba:	200f      	movs	r0, #15
 80023bc:	f7ff fc0e 	bl	8001bdc <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	e001      	b.n	80023d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023cc:	f7ff fbdc 	bl	8001b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d0:	79fb      	ldrb	r3, [r7, #7]

}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_IncTick+0x1c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_IncTick+0x20>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <HAL_IncTick+0x1c>)
 80023ec:	6013      	str	r3, [r2, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	2000048c 	.word	0x2000048c
 80023fc:	20000008 	.word	0x20000008

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <__NVIC_EnableIRQ+0x38>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	; (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	; (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff4c 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800257e:	f7ff ff63 	bl	8002448 <__NVIC_GetPriorityGrouping>
 8002582:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f7ff ffb3 	bl	80024f4 <NVIC_EncodePriority>
 800258e:	4602      	mov	r2, r0
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff82 	bl	80024a0 <__NVIC_SetPriority>
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff56 	bl	8002464 <__NVIC_EnableIRQ>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e147      	b.n	8002862 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe fed2 	bl	8001390 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0210 	bic.w	r2, r2, #16
 80025fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff f9d9 	bl	80019b2 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002602:	e012      	b.n	800262a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002604:	f7ff f9d5 	bl	80019b2 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e11b      	b.n	8002862 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d0e5      	beq.n	8002604 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002648:	f7ff f9b3 	bl	80019b2 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800264e:	e012      	b.n	8002676 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002650:	f7ff f9af 	bl	80019b2 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d90b      	bls.n	8002676 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0f5      	b.n	8002862 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0e5      	beq.n	8002650 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0202 	orr.w	r2, r2, #2
 8002692:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a74      	ldr	r2, [pc, #464]	; (800286c <HAL_FDCAN_Init+0x2ac>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d103      	bne.n	80026a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800269e:	4a74      	ldr	r2, [pc, #464]	; (8002870 <HAL_FDCAN_Init+0x2b0>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7c1b      	ldrb	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d108      	bne.n	80026c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	e007      	b.n	80026d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7c5b      	ldrb	r3, [r3, #17]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e6:	619a      	str	r2, [r3, #24]
 80026e8:	e007      	b.n	80026fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7c9b      	ldrb	r3, [r3, #18]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002710:	619a      	str	r2, [r3, #24]
 8002712:	e007      	b.n	8002724 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002722:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002748:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0210 	bic.w	r2, r2, #16
 8002758:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d108      	bne.n	8002774 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0204 	orr.w	r2, r2, #4
 8002770:	619a      	str	r2, [r3, #24]
 8002772:	e02c      	b.n	80027ce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d028      	beq.n	80027ce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d01c      	beq.n	80027be <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002792:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0210 	orr.w	r2, r2, #16
 80027a2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d110      	bne.n	80027ce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	e007      	b.n	80027ce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699a      	ldr	r2, [r3, #24]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	3b01      	subs	r3, #1
 80027dc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027de:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027e6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027f6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027f8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002802:	d115      	bne.n	8002830 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	3b01      	subs	r3, #1
 8002810:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002812:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	3b01      	subs	r3, #1
 800281a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800281c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	3b01      	subs	r3, #1
 8002826:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800282c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800282e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fc9a 	bl	8003180 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40006400 	.word	0x40006400
 8002870:	40006500 	.word	0x40006500

08002874 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002884:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d002      	beq.n	8002892 <HAL_FDCAN_ConfigFilter+0x1e>
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d13d      	bne.n	800290e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80028a6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80028ae:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e01d      	b.n	800290a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	075a      	lsls	r2, r3, #29
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	079a      	lsls	r2, r3, #30
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3304      	adds	r3, #4
 8002902:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e006      	b.n	800291c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002912:	f043 0202 	orr.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d116      	bne.n	8002970 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	011a      	lsls	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	431a      	orrs	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	431a      	orrs	r2, r3
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e006      	b.n	800297e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0219      	lsls	r1, r3, #8
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e006      	b.n	80029c2 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d109      	bne.n	80029f6 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029f0:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e006      	b.n	8002a04 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d110      	bne.n	8002a46 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e006      	b.n	8002a54 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d12c      	bne.n	8002ad2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e023      	b.n	8002ae0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fbc8 	bl	8003244 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e006      	b.n	8002ae0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad6:	f043 0208 	orr.w	r2, r3, #8
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
  }
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b08b      	sub	sp, #44	; 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002afc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002afe:	7efb      	ldrb	r3, [r7, #27]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	f040 80bc 	bne.w	8002c7e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d121      	bne.n	8002b50 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0af      	b.n	8002c8c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	e020      	b.n	8002b92 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e08d      	b.n	8002c8c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0c9b      	lsrs	r3, r3, #18
 8002bac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e005      	b.n	8002bc2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3304      	adds	r3, #4
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e1b      	lsrs	r3, r3, #24
 8002c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0fda      	lsrs	r2, r3, #31
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	3304      	adds	r3, #4
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	e00a      	b.n	8002c4c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	440b      	add	r3, r1
 8002c42:	7812      	ldrb	r2, [r2, #0]
 8002c44:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	461a      	mov	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d3eb      	bcc.n	8002c36 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d105      	bne.n	8002c70 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002c6e:	e004      	b.n	8002c7a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e006      	b.n	8002c8c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	f043 0208 	orr.w	r2, r3, #8
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
  }
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	372c      	adds	r7, #44	; 0x2c
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	0801214c 	.word	0x0801214c

08002c9c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d003      	beq.n	8002cbe <HAL_FDCAN_ActivateNotification+0x22>
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f040 80c8 	bne.w	8002e4e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03b      	beq.n	8002d52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d031      	beq.n	8002d52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d027      	beq.n	8002d52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01d      	beq.n	8002d52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d13b      	bne.n	8002dee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d131      	bne.n	8002dee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d127      	bne.n	8002dee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11d      	bne.n	8002dee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d113      	bne.n	8002dee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0202 	orr.w	r2, r2, #2
 8002dfc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e006      	b.n	8002e5c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	f043 0202 	orr.w	r2, r3, #2
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	4013      	ands	r3, r2
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eaa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002ec2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002eda:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f923 	bl	8003158 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d014      	beq.n	8002f58 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f36:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002f50:	6939      	ldr	r1, [r7, #16]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8e1 	bl	800311a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8b6 	bl	80030da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fd34 	bl	80019ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fe fda5 	bl	8001ae4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f895 	bl	80030f0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01a      	beq.n	800300a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002fea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003002:	68f9      	ldr	r1, [r7, #12]
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f87d 	bl	8003104 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f87d 	bl	8003130 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f871 	bl	8003144 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d011      	beq.n	8003094 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003086:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80030a2:	6979      	ldr	r1, [r7, #20]
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fe fd29 	bl	8001afc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f84d 	bl	800316c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80030d2:	bf00      	nop
 80030d4:	3728      	adds	r7, #40	; 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003188:	4b2c      	ldr	r3, [pc, #176]	; (800323c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800318a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d103      	bne.n	800319e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800319c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ac:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	061a      	lsls	r2, r3, #24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e005      	b.n	8003220 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3304      	adds	r3, #4
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d3f3      	bcc.n	8003214 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	4000a400 	.word	0x4000a400
 8003240:	40006800 	.word	0x40006800

08003244 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003262:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800326a:	4313      	orrs	r3, r2
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e00a      	b.n	8003286 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003278:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800327e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003284:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003290:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003296:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800329c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3304      	adds	r3, #4
 80032c2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3304      	adds	r3, #4
 80032ce:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e020      	b.n	8003318 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3303      	adds	r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3302      	adds	r3, #2
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	440b      	add	r3, r1
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80032ee:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	440b      	add	r3, r1
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80032fc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	440a      	add	r2, r1
 8003304:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003306:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	3304      	adds	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	4a06      	ldr	r2, [pc, #24]	; (8003338 <FDCAN_CopyMessageToRAM+0xf4>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	461a      	mov	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	4293      	cmp	r3, r2
 8003328:	d3d5      	bcc.n	80032d6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	3724      	adds	r7, #36	; 0x24
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	0801214c 	.word	0x0801214c

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800334a:	e15a      	b.n	8003602 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 814c 	beq.w	80035fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d005      	beq.n	800337c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003378:	2b02      	cmp	r3, #2
 800337a:	d130      	bne.n	80033de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033b2:	2201      	movs	r2, #1
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f003 0201 	and.w	r2, r3, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d017      	beq.n	800341a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d123      	bne.n	800346e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	6939      	ldr	r1, [r7, #16]
 800346a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80a6 	beq.w	80035fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b0:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <HAL_GPIO_Init+0x2e4>)
 80034b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b4:	4a5a      	ldr	r2, [pc, #360]	; (8003620 <HAL_GPIO_Init+0x2e4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6613      	str	r3, [r2, #96]	; 0x60
 80034bc:	4b58      	ldr	r3, [pc, #352]	; (8003620 <HAL_GPIO_Init+0x2e4>)
 80034be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c8:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_GPIO_Init+0x2e8>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034f2:	d01f      	beq.n	8003534 <HAL_GPIO_Init+0x1f8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_GPIO_Init+0x2ec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d019      	beq.n	8003530 <HAL_GPIO_Init+0x1f4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_GPIO_Init+0x2f0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <HAL_GPIO_Init+0x1f0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_GPIO_Init+0x2f4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00d      	beq.n	8003528 <HAL_GPIO_Init+0x1ec>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a49      	ldr	r2, [pc, #292]	; (8003634 <HAL_GPIO_Init+0x2f8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x1e8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a48      	ldr	r2, [pc, #288]	; (8003638 <HAL_GPIO_Init+0x2fc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_GPIO_Init+0x1e4>
 800351c:	2305      	movs	r3, #5
 800351e:	e00a      	b.n	8003536 <HAL_GPIO_Init+0x1fa>
 8003520:	2306      	movs	r3, #6
 8003522:	e008      	b.n	8003536 <HAL_GPIO_Init+0x1fa>
 8003524:	2304      	movs	r3, #4
 8003526:	e006      	b.n	8003536 <HAL_GPIO_Init+0x1fa>
 8003528:	2303      	movs	r3, #3
 800352a:	e004      	b.n	8003536 <HAL_GPIO_Init+0x1fa>
 800352c:	2302      	movs	r3, #2
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x1fa>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_GPIO_Init+0x1fa>
 8003534:	2300      	movs	r3, #0
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003546:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_GPIO_Init+0x2e8>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_GPIO_Init+0x300>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_GPIO_Init+0x300>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <HAL_GPIO_Init+0x300>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a2:	4a26      	ldr	r2, [pc, #152]	; (800363c <HAL_GPIO_Init+0x300>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_GPIO_Init+0x300>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <HAL_GPIO_Init+0x300>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_GPIO_Init+0x300>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_GPIO_Init+0x300>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f ae9d 	bne.w	800334c <HAL_GPIO_Init+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	48001000 	.word	0x48001000
 8003638:	48001400 	.word	0x48001400
 800363c:	40010400 	.word	0x40010400

08003640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	887b      	ldrh	r3, [r7, #2]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e001      	b.n	8003662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800368c:	e002      	b.n	8003694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43d9      	mvns	r1, r3
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	400b      	ands	r3, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	619a      	str	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e041      	b.n	800376a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80036ee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80036f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6892      	ldr	r2, [r2, #8]
 800370c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800370e:	f7fe f950 	bl	80019b2 <HAL_GetTick>
 8003712:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003714:	e00f      	b.n	8003736 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003716:	f7fe f94c 	bl	80019b2 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b31      	cmp	r3, #49	; 0x31
 8003722:	d908      	bls.n	8003736 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e019      	b.n	800376a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e8      	bne.n	8003716 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	429a      	cmp	r2, r3
 8003750:	d005      	beq.n	800375e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	611a      	str	r2, [r3, #16]
 800375c:	e004      	b.n	8003768 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003782:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d141      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a2:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d131      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b6:	4a46      	ldr	r2, [pc, #280]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c8:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037d0:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2232      	movs	r2, #50	; 0x32
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	3301      	adds	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e6:	e002      	b.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d102      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d158      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e057      	b.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003824:	e04d      	b.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d141      	bne.n	80038b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800382e:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d131      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800384c:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2232      	movs	r2, #50	; 0x32
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	0c9b      	lsrs	r3, r3, #18
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	e002      	b.n	800387a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d102      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f2      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d112      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e011      	b.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038b0:	e007      	b.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40007000 	.word	0x40007000
 80038d4:	20000000 	.word	0x20000000
 80038d8:	431bde83 	.word	0x431bde83

080038dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ea:	6093      	str	r3, [r2, #8]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40007000 	.word	0x40007000

080038fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e306      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d075      	beq.n	8003a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391a:	4b97      	ldr	r3, [pc, #604]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003924:	4b94      	ldr	r3, [pc, #592]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d102      	bne.n	800393a <HAL_RCC_OscConfig+0x3e>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d002      	beq.n	8003940 <HAL_RCC_OscConfig+0x44>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d10b      	bne.n	8003958 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	4b8d      	ldr	r3, [pc, #564]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d05b      	beq.n	8003a04 <HAL_RCC_OscConfig+0x108>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d157      	bne.n	8003a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e2e1      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d106      	bne.n	8003970 <HAL_RCC_OscConfig+0x74>
 8003962:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a84      	ldr	r2, [pc, #528]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e01d      	b.n	80039ac <HAL_RCC_OscConfig+0xb0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x98>
 800397a:	4b7f      	ldr	r3, [pc, #508]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7e      	ldr	r2, [pc, #504]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b7c      	ldr	r3, [pc, #496]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7b      	ldr	r2, [pc, #492]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0xb0>
 8003994:	4b78      	ldr	r3, [pc, #480]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a77      	ldr	r2, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b75      	ldr	r3, [pc, #468]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a74      	ldr	r2, [pc, #464]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fffd 	bl	80019b2 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd fff9 	bl	80019b2 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e2a6      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0xc0>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd ffe9 	bl	80019b2 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd ffe5 	bl	80019b2 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e292      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f6:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0xe8>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d075      	beq.n	8003afe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a12:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_OscConfig+0x136>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_OscConfig+0x13c>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d11f      	bne.n	8003a78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a38:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x154>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e265      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	4946      	ldr	r1, [pc, #280]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a64:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <HAL_RCC_OscConfig+0x280>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe f8b7 	bl	8001bdc <HAL_InitTick>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d043      	beq.n	8003afc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e251      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d023      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a3c      	ldr	r2, [pc, #240]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd ff91 	bl	80019b2 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fd ff8d 	bl	80019b2 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e23a      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	061b      	lsls	r3, r3, #24
 8003ac0:	492d      	ldr	r1, [pc, #180]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
 8003ac6:	e01a      	b.n	8003afe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd ff6d 	bl	80019b2 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fd ff69 	bl	80019b2 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e216      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x1e0>
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d041      	beq.n	8003b8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fd ff46 	bl	80019b2 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2a:	f7fd ff42 	bl	80019b2 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e1ef      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0ef      	beq.n	8003b2a <HAL_RCC_OscConfig+0x22e>
 8003b4a:	e020      	b.n	8003b8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd ff29 	bl	80019b2 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b62:	e00d      	b.n	8003b80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fd ff25 	bl	80019b2 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d906      	bls.n	8003b80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1d2      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b80:	4b8c      	ldr	r3, [pc, #560]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ea      	bne.n	8003b64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80a6 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ba0:	4b84      	ldr	r3, [pc, #528]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2b4>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2b6>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb6:	4b7f      	ldr	r3, [pc, #508]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	4a7e      	ldr	r2, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc2:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd2:	4b79      	ldr	r3, [pc, #484]	; (8003db8 <HAL_RCC_OscConfig+0x4bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x4bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x4bc>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fd fee2 	bl	80019b2 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fd fede 	bl	80019b2 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e18b      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x4bc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d108      	bne.n	8003c2a <HAL_RCC_OscConfig+0x32e>
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c28:	e024      	b.n	8003c74 <HAL_RCC_OscConfig+0x378>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d110      	bne.n	8003c54 <HAL_RCC_OscConfig+0x358>
 8003c32:	4b60      	ldr	r3, [pc, #384]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	4a5e      	ldr	r2, [pc, #376]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f043 0304 	orr.w	r3, r3, #4
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c42:	4b5c      	ldr	r3, [pc, #368]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	4a5a      	ldr	r2, [pc, #360]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c52:	e00f      	b.n	8003c74 <HAL_RCC_OscConfig+0x378>
 8003c54:	4b57      	ldr	r3, [pc, #348]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	4a56      	ldr	r2, [pc, #344]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d016      	beq.n	8003caa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fe99 	bl	80019b2 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fd fe95 	bl	80019b2 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e140      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9a:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ed      	beq.n	8003c84 <HAL_RCC_OscConfig+0x388>
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd fe82 	bl	80019b2 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd fe7e 	bl	80019b2 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e129      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ed      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	4a34      	ldr	r2, [pc, #208]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d03c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fd fe51 	bl	80019b2 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d14:	f7fd fe4d 	bl	80019b2 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0fa      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d26:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ef      	beq.n	8003d14 <HAL_RCC_OscConfig+0x418>
 8003d34:	e01b      	b.n	8003d6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fd fe34 	bl	80019b2 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d4e:	f7fd fe30 	bl	80019b2 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0dd      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ef      	bne.n	8003d4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80d1 	beq.w	8003f1a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	f000 808b 	beq.w	8003e9c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d15e      	bne.n	8003e4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fd fe0a 	bl	80019b2 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da0:	e00c      	b.n	8003dbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fd fe06 	bl	80019b2 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d905      	bls.n	8003dbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0b3      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ec      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc8:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <HAL_RCC_OscConfig+0x62c>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6a11      	ldr	r1, [r2, #32]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd8:	3a01      	subs	r2, #1
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	4311      	orrs	r1, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003de2:	0212      	lsls	r2, r2, #8
 8003de4:	4311      	orrs	r1, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dea:	0852      	lsrs	r2, r2, #1
 8003dec:	3a01      	subs	r2, #1
 8003dee:	0552      	lsls	r2, r2, #21
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df6:	0852      	lsrs	r2, r2, #1
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0652      	lsls	r2, r2, #25
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e02:	06d2      	lsls	r2, r2, #27
 8003e04:	430a      	orrs	r2, r1
 8003e06:	4947      	ldr	r1, [pc, #284]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b45      	ldr	r3, [pc, #276]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a44      	ldr	r2, [pc, #272]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a41      	ldr	r2, [pc, #260]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd fdc5 	bl	80019b2 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fd fdc1 	bl	80019b2 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e06e      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x530>
 8003e4a:	e066      	b.n	8003f1a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a34      	ldr	r2, [pc, #208]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e58:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a31      	ldr	r2, [pc, #196]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a2e      	ldr	r2, [pc, #184]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e6a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fd9d 	bl	80019b2 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd fd99 	bl	80019b2 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e046      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8e:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x580>
 8003e9a:	e03e      	b.n	8003f1a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e039      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_RCC_OscConfig+0x628>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d12c      	bne.n	8003f16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d123      	bne.n	8003f16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d11b      	bne.n	8003f16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d113      	bne.n	8003f16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	3b01      	subs	r3, #1
 8003efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d109      	bne.n	8003f16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	019f800c 	.word	0x019f800c

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e11e      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b91      	ldr	r3, [pc, #580]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b8e      	ldr	r3, [pc, #568]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 020f 	bic.w	r2, r3, #15
 8003f5a:	498c      	ldr	r1, [pc, #560]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b8a      	ldr	r3, [pc, #552]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e106      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d073      	beq.n	8004068 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d129      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f88:	4b81      	ldr	r3, [pc, #516]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0f4      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f98:	f000 f9fc 	bl	8004394 <RCC_GetSysClockFreqFromPLLSource>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4a7c      	ldr	r2, [pc, #496]	; (8004194 <HAL_RCC_ClockConfig+0x268>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d93f      	bls.n	8004026 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fa6:	4b7a      	ldr	r3, [pc, #488]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d033      	beq.n	8004026 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d12f      	bne.n	8004026 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fce:	4a70      	ldr	r2, [pc, #448]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e024      	b.n	8004026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0c6      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0be      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004004:	f000 f8ce 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8004008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a61      	ldr	r2, [pc, #388]	; (8004194 <HAL_RCC_ClockConfig+0x268>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d909      	bls.n	8004026 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401a:	4a5d      	ldr	r2, [pc, #372]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 800401c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004020:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b5a      	ldr	r3, [pc, #360]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4957      	ldr	r1, [pc, #348]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd fcbb 	bl	80019b2 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fd fcb7 	bl	80019b2 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e095      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b4e      	ldr	r3, [pc, #312]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d023      	beq.n	80040bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b43      	ldr	r3, [pc, #268]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a42      	ldr	r2, [pc, #264]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800408a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004098:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040a0:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b39      	ldr	r3, [pc, #228]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4936      	ldr	r1, [pc, #216]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
 80040ba:	e008      	b.n	80040ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b80      	cmp	r3, #128	; 0x80
 80040c0:	d105      	bne.n	80040ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040c2:	4b33      	ldr	r3, [pc, #204]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4a32      	ldr	r2, [pc, #200]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d21d      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 020f 	bic.w	r2, r3, #15
 80040e4:	4929      	ldr	r1, [pc, #164]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040ec:	f7fd fc61 	bl	80019b2 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fd fc5d 	bl	80019b2 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e03b      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_ClockConfig+0x260>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d1ed      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4917      	ldr	r1, [pc, #92]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490f      	ldr	r1, [pc, #60]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004156:	f000 f825 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_RCC_ClockConfig+0x264>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490c      	ldr	r1, [pc, #48]	; (8004198 <HAL_RCC_ClockConfig+0x26c>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_RCC_ClockConfig+0x270>)
 8004174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_RCC_ClockConfig+0x274>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fd2e 	bl	8001bdc <HAL_InitTick>
 8004180:	4603      	mov	r3, r0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40022000 	.word	0x40022000
 8004190:	40021000 	.word	0x40021000
 8004194:	04c4b400 	.word	0x04c4b400
 8004198:	08012134 	.word	0x08012134
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000004 	.word	0x20000004

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041aa:	4b2c      	ldr	r3, [pc, #176]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d102      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	e047      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041bc:	4b27      	ldr	r3, [pc, #156]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e03e      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d136      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	3301      	adds	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d10c      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004202:	68d2      	ldr	r2, [r2, #12]
 8004204:	0a12      	lsrs	r2, r2, #8
 8004206:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	617b      	str	r3, [r7, #20]
      break;
 8004210:	e00c      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004212:	4a13      	ldr	r2, [pc, #76]	; (8004260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
      break;
 800422a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0e5b      	lsrs	r3, r3, #25
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e001      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800424c:	693b      	ldr	r3, [r7, #16]
}
 800424e:	4618      	mov	r0, r3
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4904      	ldr	r1, [pc, #16]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000
 80042a8:	08012144 	.word	0x08012144

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042b0:	f7ff ffda 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0adb      	lsrs	r3, r3, #11
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	08012144 	.word	0x08012144

080042d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	220f      	movs	r2, #15
 80042e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCC_GetClockConfig+0x5c>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0203 	and.w	r2, r3, #3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_RCC_GetClockConfig+0x5c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_RCC_GetClockConfig+0x5c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_GetClockConfig+0x5c>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCC_GetClockConfig+0x60>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	601a      	str	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	40022000 	.word	0x40022000

0800433c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_EnableCSS+0x1c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a04      	ldr	r2, [pc, #16]	; (8004358 <HAL_RCC_EnableCSS+0x1c>)
 8004346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800434a:	6013      	str	r3, [r2, #0]
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d105      	bne.n	800437a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800436e:	f000 f809 	bl	8004384 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004378:	621a      	str	r2, [r3, #32]
  }
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000

08004384 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d10c      	bne.n	80043d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043b8:	4a17      	ldr	r2, [pc, #92]	; (8004418 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043c2:	68d2      	ldr	r2, [r2, #12]
 80043c4:	0a12      	lsrs	r2, r2, #8
 80043c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	617b      	str	r3, [r7, #20]
    break;
 80043d0:	e00c      	b.n	80043ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043dc:	68d2      	ldr	r2, [r2, #12]
 80043de:	0a12      	lsrs	r2, r2, #8
 80043e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]
    break;
 80043ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0e5b      	lsrs	r3, r3, #25
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004406:	687b      	ldr	r3, [r7, #4]
}
 8004408:	4618      	mov	r0, r3
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	00f42400 	.word	0x00f42400

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004428:	2300      	movs	r3, #0
 800442a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800442c:	2300      	movs	r3, #0
 800442e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8098 	beq.w	800456e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4b40      	ldr	r3, [pc, #256]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6593      	str	r3, [r2, #88]	; 0x58
 800445a:	4b3d      	ldr	r3, [pc, #244]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a39      	ldr	r2, [pc, #228]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004476:	f7fd fa9c 	bl	80019b2 <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800447c:	e009      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fd fa98 	bl	80019b2 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d902      	bls.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	74fb      	strb	r3, [r7, #19]
        break;
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ef      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d159      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044a4:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01e      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d019      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044c0:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044dc:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd fa58 	bl	80019b2 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004504:	e00b      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fd fa54 	bl	80019b2 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d902      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	74fb      	strb	r3, [r7, #19]
            break;
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ec      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004548:	e008      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	74bb      	strb	r3, [r7, #18]
 800454e:	e005      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004550:	40021000 	.word	0x40021000
 8004554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455c:	7c7b      	ldrb	r3, [r7, #17]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004562:	4ba7      	ldr	r3, [pc, #668]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	4aa6      	ldr	r2, [pc, #664]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800457a:	4ba1      	ldr	r3, [pc, #644]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f023 0203 	bic.w	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	499d      	ldr	r1, [pc, #628]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800459c:	4b98      	ldr	r3, [pc, #608]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 020c 	bic.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4995      	ldr	r1, [pc, #596]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045be:	4b90      	ldr	r3, [pc, #576]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	498c      	ldr	r1, [pc, #560]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e0:	4b87      	ldr	r3, [pc, #540]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	4984      	ldr	r1, [pc, #528]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004602:	4b7f      	ldr	r3, [pc, #508]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	497b      	ldr	r1, [pc, #492]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004624:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4973      	ldr	r1, [pc, #460]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004646:	4b6e      	ldr	r3, [pc, #440]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	496a      	ldr	r1, [pc, #424]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004668:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4962      	ldr	r1, [pc, #392]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800468a:	4b5d      	ldr	r3, [pc, #372]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4959      	ldr	r1, [pc, #356]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ac:	4b54      	ldr	r3, [pc, #336]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	4951      	ldr	r1, [pc, #324]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d015      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	4948      	ldr	r1, [pc, #288]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ec:	d105      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ee:	4b44      	ldr	r3, [pc, #272]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	4a43      	ldr	r2, [pc, #268]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	493a      	ldr	r1, [pc, #232]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004724:	d105      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004726:	4b36      	ldr	r3, [pc, #216]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	4a35      	ldr	r2, [pc, #212]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004730:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d015      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	492c      	ldr	r1, [pc, #176]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800475c:	d105      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475e:	4b28      	ldr	r3, [pc, #160]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a27      	ldr	r2, [pc, #156]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004768:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d015      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	491e      	ldr	r1, [pc, #120]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004794:	d105      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004796:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a19      	ldr	r2, [pc, #100]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d015      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	4910      	ldr	r1, [pc, #64]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047cc:	d105      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	4902      	ldr	r1, [pc, #8]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	e001      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004800:	40021000 	.word	0x40021000
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a20      	ldr	r2, [pc, #128]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004816:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	4918      	ldr	r1, [pc, #96]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a12      	ldr	r2, [pc, #72]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800484a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	490a      	ldr	r1, [pc, #40]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004888:	7cbb      	ldrb	r3, [r7, #18]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e049      	b.n	800493e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fc3e 	bl	8002140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f001 f840 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d001      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e04f      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <HAL_TIM_Base_Start_IT+0xc4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x76>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d018      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x76>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x76>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <HAL_TIM_Base_Start_IT+0xcc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x76>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_TIM_Base_Start_IT+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x76>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_TIM_Base_Start_IT+0xd4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x76>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_TIM_Base_Start_IT+0xd8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d115      	bne.n	80049ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d015      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0xb4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d011      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	e008      	b.n	80049fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e000      	b.n	80049fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40015000 	.word	0x40015000
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e049      	b.n	8004ace <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f841 	bl	8004ad6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f000 ff78 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_TIM_PWM_Start+0x24>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e03c      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d109      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x3e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e02f      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d109      	bne.n	8004b44 <HAL_TIM_PWM_Start+0x58>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e022      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d109      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x72>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e015      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x8c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0a1      	b.n	8004cd6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0xb6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba0:	e023      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xc6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	e01b      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xd6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xe6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd0:	e00b      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xf6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be0:	e003      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 fb16 	bl	8006224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <HAL_TIM_PWM_Start+0x1f4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a37      	ldr	r2, [pc, #220]	; (8004ce4 <HAL_TIM_PWM_Start+0x1f8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_TIM_PWM_Start+0x1fc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a34      	ldr	r2, [pc, #208]	; (8004cec <HAL_TIM_PWM_Start+0x200>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <HAL_TIM_PWM_Start+0x204>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a31      	ldr	r2, [pc, #196]	; (8004cf4 <HAL_TIM_PWM_Start+0x208>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_PWM_Start+0x14c>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_PWM_Start+0x14e>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a23      	ldr	r2, [pc, #140]	; (8004ce0 <HAL_TIM_PWM_Start+0x1f4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1a8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d018      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1a8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <HAL_TIM_PWM_Start+0x20c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1a8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_TIM_PWM_Start+0x210>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1a8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_TIM_PWM_Start+0x1f8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1a8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIM_PWM_Start+0x1fc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1a8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <HAL_TIM_PWM_Start+0x208>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d115      	bne.n	8004cc0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <HAL_TIM_PWM_Start+0x214>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d015      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x1e6>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d011      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	e008      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e000      	b.n	8004cd4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40013400 	.word	0x40013400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	40014800 	.word	0x40014800
 8004cf4:	40015000 	.word	0x40015000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	00010007 	.word	0x00010007

08004d04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fa84 	bl	8006224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <HAL_TIM_PWM_Stop+0x120>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_TIM_PWM_Stop+0x54>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3f      	ldr	r2, [pc, #252]	; (8004e28 <HAL_TIM_PWM_Stop+0x124>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_TIM_PWM_Stop+0x54>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <HAL_TIM_PWM_Stop+0x128>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_TIM_PWM_Stop+0x54>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <HAL_TIM_PWM_Stop+0x12c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_TIM_PWM_Stop+0x54>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_TIM_PWM_Stop+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_TIM_PWM_Stop+0x54>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a39      	ldr	r2, [pc, #228]	; (8004e38 <HAL_TIM_PWM_Stop+0x134>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_PWM_Stop+0x58>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_TIM_PWM_Stop+0x5a>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d017      	beq.n	8004d92 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_TIM_PWM_Stop+0x8e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	f244 4344 	movw	r3, #17476	; 0x4444
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_PWM_Stop+0x8e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <HAL_TIM_PWM_Stop+0xbe>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	f244 4344 	movw	r3, #17476	; 0x4444
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_TIM_PWM_Stop+0xbe>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_PWM_Stop+0xce>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd0:	e023      	b.n	8004e1a <HAL_TIM_PWM_Stop+0x116>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d104      	bne.n	8004de2 <HAL_TIM_PWM_Stop+0xde>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	e01b      	b.n	8004e1a <HAL_TIM_PWM_Stop+0x116>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Stop+0xee>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df0:	e013      	b.n	8004e1a <HAL_TIM_PWM_Stop+0x116>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Stop+0xfe>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e00:	e00b      	b.n	8004e1a <HAL_TIM_PWM_Stop+0x116>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Stop+0x10e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e10:	e003      	b.n	8004e1a <HAL_TIM_PWM_Stop+0x116>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40015000 	.word	0x40015000

08004e3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e097      	b.n	8004f80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd f90d 	bl	8002084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fd63 	bl	800595c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004edc:	f023 030c 	bic.w	r3, r3, #12
 8004ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	011a      	lsls	r2, r3, #4
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	031b      	lsls	r3, r3, #12
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d110      	bne.n	8004fda <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d102      	bne.n	8004fc4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fbe:	7b7b      	ldrb	r3, [r7, #13]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d001      	beq.n	8004fc8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e069      	b.n	800509c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd8:	e031      	b.n	800503e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d110      	bne.n	8005002 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe6:	7b3b      	ldrb	r3, [r7, #12]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e055      	b.n	800509c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005000:	e01d      	b.n	800503e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d108      	bne.n	800501a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005008:	7bbb      	ldrb	r3, [r7, #14]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d105      	bne.n	800501a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800500e:	7b7b      	ldrb	r3, [r7, #13]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005014:	7b3b      	ldrb	r3, [r7, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e03e      	b.n	800509c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_TIM_Encoder_Start+0xc4>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d008      	beq.n	800505c <HAL_TIM_Encoder_Start+0xd4>
 800504a:	e00f      	b.n	800506c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f001 f8e5 	bl	8006224 <TIM_CCxChannelCmd>
      break;
 800505a:	e016      	b.n	800508a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	2104      	movs	r1, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f001 f8dd 	bl	8006224 <TIM_CCxChannelCmd>
      break;
 800506a:	e00e      	b.n	800508a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f001 f8d5 	bl	8006224 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2201      	movs	r2, #1
 8005080:	2104      	movs	r1, #4
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f8ce 	bl	8006224 <TIM_CCxChannelCmd>
      break;
 8005088:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_TIM_Encoder_Stop+0x18>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d008      	beq.n	80050cc <HAL_TIM_Encoder_Stop+0x28>
 80050ba:	e00f      	b.n	80050dc <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f8ad 	bl	8006224 <TIM_CCxChannelCmd>
      break;
 80050ca:	e016      	b.n	80050fa <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2104      	movs	r1, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 f8a5 	bl	8006224 <TIM_CCxChannelCmd>
      break;
 80050da:	e00e      	b.n	80050fa <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 f89d 	bl	8006224 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	2104      	movs	r1, #4
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f896 	bl	8006224 <TIM_CCxChannelCmd>
      break;
 80050f8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	f241 1311 	movw	r3, #4369	; 0x1111
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10f      	bne.n	800512a <HAL_TIM_Encoder_Stop+0x86>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	f244 4344 	movw	r3, #17476	; 0x4444
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <HAL_TIM_Encoder_Stop+0x86>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_TIM_Encoder_Stop+0x92>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b04      	cmp	r3, #4
 8005134:	d148      	bne.n	80051c8 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_Encoder_Stop+0xa2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005144:	e023      	b.n	800518e <HAL_TIM_Encoder_Stop+0xea>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_Encoder_Stop+0xb2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005154:	e01b      	b.n	800518e <HAL_TIM_Encoder_Stop+0xea>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_Encoder_Stop+0xc2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	e013      	b.n	800518e <HAL_TIM_Encoder_Stop+0xea>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d104      	bne.n	8005176 <HAL_TIM_Encoder_Stop+0xd2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005174:	e00b      	b.n	800518e <HAL_TIM_Encoder_Stop+0xea>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b10      	cmp	r3, #16
 800517a:	d104      	bne.n	8005186 <HAL_TIM_Encoder_Stop+0xe2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005184:	e003      	b.n	800518e <HAL_TIM_Encoder_Stop+0xea>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_TIM_Encoder_Stop+0xfa>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519c:	e024      	b.n	80051e8 <HAL_TIM_Encoder_Stop+0x144>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_Encoder_Stop+0x10a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ac:	e01c      	b.n	80051e8 <HAL_TIM_Encoder_Stop+0x144>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d104      	bne.n	80051be <HAL_TIM_Encoder_Stop+0x11a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051bc:	e014      	b.n	80051e8 <HAL_TIM_Encoder_Stop+0x144>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80051c6:	e00f      	b.n	80051e8 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d122      	bne.n	800524e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d11b      	bne.n	800524e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0202 	mvn.w	r2, #2
 800521e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fb7d 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 800523a:	e005      	b.n	8005248 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb6f 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fb80 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b04      	cmp	r3, #4
 800525a:	d122      	bne.n	80052a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d11b      	bne.n	80052a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0204 	mvn.w	r2, #4
 8005272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fb53 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 800528e:	e005      	b.n	800529c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb45 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fb56 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d122      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d11b      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f06f 0208 	mvn.w	r2, #8
 80052c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2204      	movs	r2, #4
 80052cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb29 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 80052e2:	e005      	b.n	80052f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb1b 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fb2c 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b10      	cmp	r3, #16
 8005302:	d122      	bne.n	800534a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d11b      	bne.n	800534a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f06f 0210 	mvn.w	r2, #16
 800531a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2208      	movs	r2, #8
 8005320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 faff 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 8005336:	e005      	b.n	8005344 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 faf1 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb02 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d10e      	bne.n	8005376 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0201 	mvn.w	r2, #1
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fc fbf1 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	2b80      	cmp	r3, #128	; 0x80
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 ffff 	bl	80063a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fff2 	bl	80063b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d10e      	bne.n	80053fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d107      	bne.n	80053fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc faed 	bl	80019d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0220 	mvn.w	r2, #32
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 ffb2 	bl	800638c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d10f      	bne.n	8005458 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 ffb8 	bl	80063c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005466:	d10f      	bne.n	8005488 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005476:	d107      	bne.n	8005488 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 ffaa 	bl	80063dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005496:	d10f      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 ff9c 	bl	80063f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054c6:	d10f      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 ff8e 	bl	8006404 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550a:	2302      	movs	r3, #2
 800550c:	e0ff      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b14      	cmp	r3, #20
 800551a:	f200 80f0 	bhi.w	80056fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005579 	.word	0x08005579
 8005528:	080056ff 	.word	0x080056ff
 800552c:	080056ff 	.word	0x080056ff
 8005530:	080056ff 	.word	0x080056ff
 8005534:	080055b9 	.word	0x080055b9
 8005538:	080056ff 	.word	0x080056ff
 800553c:	080056ff 	.word	0x080056ff
 8005540:	080056ff 	.word	0x080056ff
 8005544:	080055fb 	.word	0x080055fb
 8005548:	080056ff 	.word	0x080056ff
 800554c:	080056ff 	.word	0x080056ff
 8005550:	080056ff 	.word	0x080056ff
 8005554:	0800563b 	.word	0x0800563b
 8005558:	080056ff 	.word	0x080056ff
 800555c:	080056ff 	.word	0x080056ff
 8005560:	080056ff 	.word	0x080056ff
 8005564:	0800567d 	.word	0x0800567d
 8005568:	080056ff 	.word	0x080056ff
 800556c:	080056ff 	.word	0x080056ff
 8005570:	080056ff 	.word	0x080056ff
 8005574:	080056bd 	.word	0x080056bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fa8a 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0208 	orr.w	r2, r2, #8
 8005592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0204 	bic.w	r2, r2, #4
 80055a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6999      	ldr	r1, [r3, #24]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	619a      	str	r2, [r3, #24]
      break;
 80055b6:	e0a5      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fb04 	bl	8005bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6999      	ldr	r1, [r3, #24]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	619a      	str	r2, [r3, #24]
      break;
 80055f8:	e084      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fb77 	bl	8005cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0208 	orr.w	r2, r2, #8
 8005614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0204 	bic.w	r2, r2, #4
 8005624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	61da      	str	r2, [r3, #28]
      break;
 8005638:	e064      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fbe9 	bl	8005e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69d9      	ldr	r1, [r3, #28]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	021a      	lsls	r2, r3, #8
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	61da      	str	r2, [r3, #28]
      break;
 800567a:	e043      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fc5c 	bl	8005f40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0204 	bic.w	r2, r2, #4
 80056a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056ba:	e023      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fca6 	bl	8006014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056fc:	e002      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
      break;
 8005702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800570c:	7dfb      	ldrb	r3, [r7, #23]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop

08005718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIM_ConfigClockSource+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e0e6      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x1ea>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005752:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a67      	ldr	r2, [pc, #412]	; (800590c <HAL_TIM_ConfigClockSource+0x1f4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f000 80b1 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005774:	4a65      	ldr	r2, [pc, #404]	; (800590c <HAL_TIM_ConfigClockSource+0x1f4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f200 80b6 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 800577c:	4a64      	ldr	r2, [pc, #400]	; (8005910 <HAL_TIM_ConfigClockSource+0x1f8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f000 80a9 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005784:	4a62      	ldr	r2, [pc, #392]	; (8005910 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f200 80ae 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 800578c:	4a61      	ldr	r2, [pc, #388]	; (8005914 <HAL_TIM_ConfigClockSource+0x1fc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f000 80a1 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005794:	4a5f      	ldr	r2, [pc, #380]	; (8005914 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f200 80a6 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 800579c:	4a5e      	ldr	r2, [pc, #376]	; (8005918 <HAL_TIM_ConfigClockSource+0x200>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f000 8099 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 80057a4:	4a5c      	ldr	r2, [pc, #368]	; (8005918 <HAL_TIM_ConfigClockSource+0x200>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f200 809e 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057ac:	4a5b      	ldr	r2, [pc, #364]	; (800591c <HAL_TIM_ConfigClockSource+0x204>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f000 8091 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 80057b4:	4a59      	ldr	r2, [pc, #356]	; (800591c <HAL_TIM_ConfigClockSource+0x204>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f200 8096 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057c0:	f000 8089 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 80057c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057c8:	f200 808e 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d03e      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0x138>
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	f200 8087 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	f000 8086 	beq.w	80058ee <HAL_TIM_ConfigClockSource+0x1d6>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d87f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d01a      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x10a>
 80057ec:	2b70      	cmp	r3, #112	; 0x70
 80057ee:	d87b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d050      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x17e>
 80057f4:	2b60      	cmp	r3, #96	; 0x60
 80057f6:	d877      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d03c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x15e>
 80057fc:	2b50      	cmp	r3, #80	; 0x50
 80057fe:	d873      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d058      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x19e>
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d86f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d064      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d86b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d060      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d867      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05c      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d05a      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005820:	e062      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 fcd7 	bl	80061e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]
      break;
 800584e:	e04f      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 fcc0 	bl	80061e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005872:	609a      	str	r2, [r3, #8]
      break;
 8005874:	e03c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	461a      	mov	r2, r3
 8005884:	f000 fc32 	bl	80060ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2150      	movs	r1, #80	; 0x50
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fc8b 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005894:	e02c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fc51 	bl	800614a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2160      	movs	r1, #96	; 0x60
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc7b 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 80058b4:	e01c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fc12 	bl	80060ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fc6b 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 80058d4:	e00c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fc62 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 80058e6:	e003      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
      break;
 80058ec:	e000      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80058ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	00100070 	.word	0x00100070
 8005910:	00100050 	.word	0x00100050
 8005914:	00100040 	.word	0x00100040
 8005918:	00100030 	.word	0x00100030
 800591c:	00100020 	.word	0x00100020

08005920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a42      	ldr	r2, [pc, #264]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597a:	d00f      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3f      	ldr	r2, [pc, #252]	; (8005a7c <TIM_Base_SetConfig+0x120>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3e      	ldr	r2, [pc, #248]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3d      	ldr	r2, [pc, #244]	; (8005a84 <TIM_Base_SetConfig+0x128>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a31      	ldr	r2, [pc, #196]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01f      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d01b      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2e      	ldr	r2, [pc, #184]	; (8005a7c <TIM_Base_SetConfig+0x120>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d017      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2d      	ldr	r2, [pc, #180]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2c      	ldr	r2, [pc, #176]	; (8005a84 <TIM_Base_SetConfig+0x128>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00f      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2c      	ldr	r2, [pc, #176]	; (8005a8c <TIM_Base_SetConfig+0x130>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <TIM_Base_SetConfig+0x134>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <TIM_Base_SetConfig+0x138>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_Base_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <TIM_Base_SetConfig+0x12c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <TIM_Base_SetConfig+0x100>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <TIM_Base_SetConfig+0x128>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00f      	beq.n	8005a5c <TIM_Base_SetConfig+0x100>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <TIM_Base_SetConfig+0x130>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_Base_SetConfig+0x100>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <TIM_Base_SetConfig+0x134>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0x100>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <TIM_Base_SetConfig+0x138>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0x100>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0c      	ldr	r2, [pc, #48]	; (8005a88 <TIM_Base_SetConfig+0x12c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d103      	bne.n	8005a64 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	615a      	str	r2, [r3, #20]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40013400 	.word	0x40013400
 8005a88:	40015000 	.word	0x40015000
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 0302 	bic.w	r3, r3, #2
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a30      	ldr	r2, [pc, #192]	; (8005bb4 <TIM_OC1_SetConfig+0x11c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <TIM_OC1_SetConfig+0x88>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2f      	ldr	r2, [pc, #188]	; (8005bb8 <TIM_OC1_SetConfig+0x120>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00f      	beq.n	8005b20 <TIM_OC1_SetConfig+0x88>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a2e      	ldr	r2, [pc, #184]	; (8005bbc <TIM_OC1_SetConfig+0x124>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_OC1_SetConfig+0x88>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2d      	ldr	r2, [pc, #180]	; (8005bc0 <TIM_OC1_SetConfig+0x128>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_OC1_SetConfig+0x88>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <TIM_OC1_SetConfig+0x12c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC1_SetConfig+0x88>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <TIM_OC1_SetConfig+0x130>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10c      	bne.n	8005b3a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f023 0308 	bic.w	r3, r3, #8
 8005b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <TIM_OC1_SetConfig+0x11c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_OC1_SetConfig+0xd2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <TIM_OC1_SetConfig+0x120>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_OC1_SetConfig+0xd2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <TIM_OC1_SetConfig+0x124>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_OC1_SetConfig+0xd2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <TIM_OC1_SetConfig+0x128>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_OC1_SetConfig+0xd2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <TIM_OC1_SetConfig+0x12c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC1_SetConfig+0xd2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <TIM_OC1_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d111      	bne.n	8005b8e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	40015000 	.word	0x40015000

08005bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0320 	bic.w	r3, r3, #32
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <TIM_OC2_SetConfig+0x110>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_OC2_SetConfig+0x74>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <TIM_OC2_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC2_SetConfig+0x74>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <TIM_OC2_SetConfig+0x118>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10d      	bne.n	8005c5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1f      	ldr	r2, [pc, #124]	; (8005cdc <TIM_OC2_SetConfig+0x110>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <TIM_OC2_SetConfig+0xc0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <TIM_OC2_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_OC2_SetConfig+0xc0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <TIM_OC2_SetConfig+0x11c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_OC2_SetConfig+0xc0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <TIM_OC2_SetConfig+0x120>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_OC2_SetConfig+0xc0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <TIM_OC2_SetConfig+0x124>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC2_SetConfig+0xc0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <TIM_OC2_SetConfig+0x118>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d113      	bne.n	8005cb4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40013400 	.word	0x40013400
 8005ce4:	40015000 	.word	0x40015000
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800

08005cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2b      	ldr	r2, [pc, #172]	; (8005e00 <TIM_OC3_SetConfig+0x10c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_OC3_SetConfig+0x72>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2a      	ldr	r2, [pc, #168]	; (8005e04 <TIM_OC3_SetConfig+0x110>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC3_SetConfig+0x72>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a29      	ldr	r2, [pc, #164]	; (8005e08 <TIM_OC3_SetConfig+0x114>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10d      	bne.n	8005d82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <TIM_OC3_SetConfig+0x10c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <TIM_OC3_SetConfig+0xbe>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <TIM_OC3_SetConfig+0x110>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00f      	beq.n	8005db2 <TIM_OC3_SetConfig+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <TIM_OC3_SetConfig+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <TIM_OC3_SetConfig+0xbe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a1c      	ldr	r2, [pc, #112]	; (8005e10 <TIM_OC3_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <TIM_OC3_SetConfig+0xbe>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <TIM_OC3_SetConfig+0x120>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_OC3_SetConfig+0xbe>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <TIM_OC3_SetConfig+0x114>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d113      	bne.n	8005dda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40015000 	.word	0x40015000
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800

08005e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a2c      	ldr	r2, [pc, #176]	; (8005f28 <TIM_OC4_SetConfig+0x110>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_OC4_SetConfig+0x74>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2b      	ldr	r2, [pc, #172]	; (8005f2c <TIM_OC4_SetConfig+0x114>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC4_SetConfig+0x74>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2a      	ldr	r2, [pc, #168]	; (8005f30 <TIM_OC4_SetConfig+0x118>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10d      	bne.n	8005ea8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	031b      	lsls	r3, r3, #12
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <TIM_OC4_SetConfig+0x110>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d013      	beq.n	8005ed8 <TIM_OC4_SetConfig+0xc0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <TIM_OC4_SetConfig+0x114>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00f      	beq.n	8005ed8 <TIM_OC4_SetConfig+0xc0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1e      	ldr	r2, [pc, #120]	; (8005f34 <TIM_OC4_SetConfig+0x11c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_OC4_SetConfig+0xc0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <TIM_OC4_SetConfig+0x120>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <TIM_OC4_SetConfig+0xc0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <TIM_OC4_SetConfig+0x124>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC4_SetConfig+0xc0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a17      	ldr	r2, [pc, #92]	; (8005f30 <TIM_OC4_SetConfig+0x118>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d113      	bne.n	8005f00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ede:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ee6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40013400 	.word	0x40013400
 8005f30:	40015000 	.word	0x40015000
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <TIM_OC5_SetConfig+0xbc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <TIM_OC5_SetConfig+0xc0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00f      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a17      	ldr	r2, [pc, #92]	; (8006004 <TIM_OC5_SetConfig+0xc4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x82>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <TIM_OC5_SetConfig+0xc8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x82>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <TIM_OC5_SetConfig+0xcc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x82>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a14      	ldr	r2, [pc, #80]	; (8006010 <TIM_OC5_SetConfig+0xd0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d109      	bne.n	8005fd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40013400 	.word	0x40013400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	40015000 	.word	0x40015000

08006014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	051b      	lsls	r3, r3, #20
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <TIM_OC6_SetConfig+0xc0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <TIM_OC6_SetConfig+0x84>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <TIM_OC6_SetConfig+0xc4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00f      	beq.n	8006098 <TIM_OC6_SetConfig+0x84>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a18      	ldr	r2, [pc, #96]	; (80060dc <TIM_OC6_SetConfig+0xc8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00b      	beq.n	8006098 <TIM_OC6_SetConfig+0x84>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <TIM_OC6_SetConfig+0xcc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_OC6_SetConfig+0x84>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <TIM_OC6_SetConfig+0xd0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_OC6_SetConfig+0x84>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <TIM_OC6_SetConfig+0xd4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d109      	bne.n	80060ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40013400 	.word	0x40013400
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40014400 	.word	0x40014400
 80060e4:	40014800 	.word	0x40014800
 80060e8:	40015000 	.word	0x40015000

080060ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0210 	bic.w	r2, r3, #16
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f043 0307 	orr.w	r3, r3, #7
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	609a      	str	r2, [r3, #8]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	021a      	lsls	r2, r3, #8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	431a      	orrs	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2201      	movs	r2, #1
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1a      	ldr	r2, [r3, #32]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	43db      	mvns	r3, r3
 8006246:	401a      	ands	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	fa01 f303 	lsl.w	r3, r1, r3
 800625c:	431a      	orrs	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006284:	2302      	movs	r3, #2
 8006286:	e06f      	b.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a31      	ldr	r2, [pc, #196]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a30      	ldr	r2, [pc, #192]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d108      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01d      	beq.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d018      	beq.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d009      	beq.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a16      	ldr	r2, [pc, #88]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10c      	bne.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4313      	orrs	r3, r2
 800634c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40012c00 	.word	0x40012c00
 8006378:	40013400 	.word	0x40013400
 800637c:	40015000 	.word	0x40015000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40014000 	.word	0x40014000

0800638c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e042      	b.n	80064b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fb ff21 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	; 0x24
 8006446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f996 	bl	800678c <UART_SetConfig>
 8006460:	4603      	mov	r3, r0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e022      	b.n	80064b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fc86 	bl	8006d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fd0d 	bl	8006ec8 <UART_CheckIdleState>
 80064ae:	4603      	mov	r3, r0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	f040 8083 	bne.w	80065da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_UART_Transmit+0x28>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e07b      	b.n	80065dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_UART_Transmit+0x3a>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e074      	b.n	80065dc <HAL_UART_Transmit+0x124>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2221      	movs	r2, #33	; 0x21
 8006506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800650a:	f7fb fa52 	bl	80019b2 <HAL_GetTick>
 800650e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d108      	bne.n	800653c <HAL_UART_Transmit+0x84>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e003      	b.n	8006544 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800654c:	e02c      	b.n	80065a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	2180      	movs	r1, #128	; 0x80
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fd00 	bl	8006f5e <UART_WaitOnFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e039      	b.n	80065dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800657c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	3302      	adds	r3, #2
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e007      	b.n	8006596 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	3301      	adds	r3, #1
 8006594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1cc      	bne.n	800654e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2200      	movs	r2, #0
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 fccd 	bl	8006f5e <UART_WaitOnFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e006      	b.n	80065dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 80c0 	bne.w	8006780 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_UART_Receive+0x28>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0b8      	b.n	8006782 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_UART_Receive+0x3a>
 800661a:	2302      	movs	r3, #2
 800661c:	e0b1      	b.n	8006782 <HAL_UART_Receive+0x19e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2222      	movs	r2, #34	; 0x22
 8006632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800663c:	f7fb f9b9 	bl	80019b2 <HAL_GetTick>
 8006640:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d10e      	bne.n	800667a <HAL_UART_Receive+0x96>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_UART_Receive+0x8c>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f240 12ff 	movw	r2, #511	; 0x1ff
 800666a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800666e:	e02d      	b.n	80066cc <HAL_UART_Receive+0xe8>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	22ff      	movs	r2, #255	; 0xff
 8006674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006678:	e028      	b.n	80066cc <HAL_UART_Receive+0xe8>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10d      	bne.n	800669e <HAL_UART_Receive+0xba>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_UART_Receive+0xb0>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006692:	e01b      	b.n	80066cc <HAL_UART_Receive+0xe8>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	227f      	movs	r2, #127	; 0x7f
 8006698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800669c:	e016      	b.n	80066cc <HAL_UART_Receive+0xe8>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a6:	d10d      	bne.n	80066c4 <HAL_UART_Receive+0xe0>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <HAL_UART_Receive+0xd6>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	227f      	movs	r2, #127	; 0x7f
 80066b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066b8:	e008      	b.n	80066cc <HAL_UART_Receive+0xe8>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	223f      	movs	r2, #63	; 0x3f
 80066be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066c2:	e003      	b.n	80066cc <HAL_UART_Receive+0xe8>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d108      	bne.n	80066f0 <HAL_UART_Receive+0x10c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e003      	b.n	80066f8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006700:	e032      	b.n	8006768 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	2120      	movs	r1, #32
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fc26 	bl	8006f5e <UART_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e032      	b.n	8006782 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10c      	bne.n	800673c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b29a      	uxth	r2, r3
 800672a:	8a7b      	ldrh	r3, [r7, #18]
 800672c:	4013      	ands	r3, r2
 800672e:	b29a      	uxth	r2, r3
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	3302      	adds	r3, #2
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e00c      	b.n	8006756 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	b2da      	uxtb	r2, r3
 8006744:	8a7b      	ldrh	r3, [r7, #18]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	4013      	ands	r3, r2
 800674a:	b2da      	uxtb	r2, r3
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1c6      	bne.n	8006702 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e000      	b.n	8006782 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006780:	2302      	movs	r3, #2
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800678c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006790:	b08c      	sub	sp, #48	; 0x30
 8006792:	af00      	add	r7, sp, #0
 8006794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4baa      	ldr	r3, [pc, #680]	; (8006a64 <UART_SetConfig+0x2d8>)
 80067bc:	4013      	ands	r3, r2
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a9f      	ldr	r2, [pc, #636]	; (8006a68 <UART_SetConfig+0x2dc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f4:	4313      	orrs	r3, r2
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006802:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800680c:	430b      	orrs	r3, r1
 800680e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	f023 010f 	bic.w	r1, r3, #15
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a90      	ldr	r2, [pc, #576]	; (8006a6c <UART_SetConfig+0x2e0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d125      	bne.n	800687c <UART_SetConfig+0xf0>
 8006830:	4b8f      	ldr	r3, [pc, #572]	; (8006a70 <UART_SetConfig+0x2e4>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b03      	cmp	r3, #3
 800683c:	d81a      	bhi.n	8006874 <UART_SetConfig+0xe8>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0xb8>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006855 	.word	0x08006855
 8006848:	08006865 	.word	0x08006865
 800684c:	0800685d 	.word	0x0800685d
 8006850:	0800686d 	.word	0x0800686d
 8006854:	2301      	movs	r3, #1
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685a:	e116      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800685c:	2302      	movs	r3, #2
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006862:	e112      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686a:	e10e      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e10a      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e106      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a7c      	ldr	r2, [pc, #496]	; (8006a74 <UART_SetConfig+0x2e8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d138      	bne.n	80068f8 <UART_SetConfig+0x16c>
 8006886:	4b7a      	ldr	r3, [pc, #488]	; (8006a70 <UART_SetConfig+0x2e4>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f003 030c 	and.w	r3, r3, #12
 8006890:	2b0c      	cmp	r3, #12
 8006892:	d82d      	bhi.n	80068f0 <UART_SetConfig+0x164>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0x110>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068d1 	.word	0x080068d1
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	080068f1 	.word	0x080068f1
 80068a8:	080068f1 	.word	0x080068f1
 80068ac:	080068e1 	.word	0x080068e1
 80068b0:	080068f1 	.word	0x080068f1
 80068b4:	080068f1 	.word	0x080068f1
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068e9 	.word	0x080068e9
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d6:	e0d8      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80068d8:	2302      	movs	r3, #2
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068de:	e0d4      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e6:	e0d0      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e0cc      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f6:	e0c8      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a5e      	ldr	r2, [pc, #376]	; (8006a78 <UART_SetConfig+0x2ec>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d125      	bne.n	800694e <UART_SetConfig+0x1c2>
 8006902:	4b5b      	ldr	r3, [pc, #364]	; (8006a70 <UART_SetConfig+0x2e4>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d016      	beq.n	800693e <UART_SetConfig+0x1b2>
 8006910:	2b30      	cmp	r3, #48	; 0x30
 8006912:	d818      	bhi.n	8006946 <UART_SetConfig+0x1ba>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d00a      	beq.n	800692e <UART_SetConfig+0x1a2>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d814      	bhi.n	8006946 <UART_SetConfig+0x1ba>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <UART_SetConfig+0x19a>
 8006920:	2b10      	cmp	r3, #16
 8006922:	d008      	beq.n	8006936 <UART_SetConfig+0x1aa>
 8006924:	e00f      	b.n	8006946 <UART_SetConfig+0x1ba>
 8006926:	2300      	movs	r3, #0
 8006928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800692c:	e0ad      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800692e:	2302      	movs	r3, #2
 8006930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006934:	e0a9      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006936:	2304      	movs	r3, #4
 8006938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693c:	e0a5      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800693e:	2308      	movs	r3, #8
 8006940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006944:	e0a1      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006946:	2310      	movs	r3, #16
 8006948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694c:	e09d      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a4a      	ldr	r2, [pc, #296]	; (8006a7c <UART_SetConfig+0x2f0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d125      	bne.n	80069a4 <UART_SetConfig+0x218>
 8006958:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <UART_SetConfig+0x2e4>)
 800695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006962:	2bc0      	cmp	r3, #192	; 0xc0
 8006964:	d016      	beq.n	8006994 <UART_SetConfig+0x208>
 8006966:	2bc0      	cmp	r3, #192	; 0xc0
 8006968:	d818      	bhi.n	800699c <UART_SetConfig+0x210>
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d00a      	beq.n	8006984 <UART_SetConfig+0x1f8>
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d814      	bhi.n	800699c <UART_SetConfig+0x210>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <UART_SetConfig+0x1f0>
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d008      	beq.n	800698c <UART_SetConfig+0x200>
 800697a:	e00f      	b.n	800699c <UART_SetConfig+0x210>
 800697c:	2300      	movs	r3, #0
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006982:	e082      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006984:	2302      	movs	r3, #2
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800698a:	e07e      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800698c:	2304      	movs	r3, #4
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006992:	e07a      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006994:	2308      	movs	r3, #8
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699a:	e076      	b.n	8006a8a <UART_SetConfig+0x2fe>
 800699c:	2310      	movs	r3, #16
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a2:	e072      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a35      	ldr	r2, [pc, #212]	; (8006a80 <UART_SetConfig+0x2f4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d12a      	bne.n	8006a04 <UART_SetConfig+0x278>
 80069ae:	4b30      	ldr	r3, [pc, #192]	; (8006a70 <UART_SetConfig+0x2e4>)
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069bc:	d01a      	beq.n	80069f4 <UART_SetConfig+0x268>
 80069be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c2:	d81b      	bhi.n	80069fc <UART_SetConfig+0x270>
 80069c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c8:	d00c      	beq.n	80069e4 <UART_SetConfig+0x258>
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ce:	d815      	bhi.n	80069fc <UART_SetConfig+0x270>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <UART_SetConfig+0x250>
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d8:	d008      	beq.n	80069ec <UART_SetConfig+0x260>
 80069da:	e00f      	b.n	80069fc <UART_SetConfig+0x270>
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e2:	e052      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80069e4:	2302      	movs	r3, #2
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ea:	e04e      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f2:	e04a      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fa:	e046      	b.n	8006a8a <UART_SetConfig+0x2fe>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a02:	e042      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <UART_SetConfig+0x2dc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d13a      	bne.n	8006a84 <UART_SetConfig+0x2f8>
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <UART_SetConfig+0x2e4>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a1c:	d01a      	beq.n	8006a54 <UART_SetConfig+0x2c8>
 8006a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a22:	d81b      	bhi.n	8006a5c <UART_SetConfig+0x2d0>
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d00c      	beq.n	8006a44 <UART_SetConfig+0x2b8>
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2e:	d815      	bhi.n	8006a5c <UART_SetConfig+0x2d0>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <UART_SetConfig+0x2b0>
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d008      	beq.n	8006a4c <UART_SetConfig+0x2c0>
 8006a3a:	e00f      	b.n	8006a5c <UART_SetConfig+0x2d0>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a42:	e022      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006a44:	2302      	movs	r3, #2
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4a:	e01e      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a52:	e01a      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006a54:	2308      	movs	r3, #8
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5a:	e016      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a62:	e012      	b.n	8006a8a <UART_SetConfig+0x2fe>
 8006a64:	cfff69f3 	.word	0xcfff69f3
 8006a68:	40008000 	.word	0x40008000
 8006a6c:	40013800 	.word	0x40013800
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40004400 	.word	0x40004400
 8006a78:	40004800 	.word	0x40004800
 8006a7c:	40004c00 	.word	0x40004c00
 8006a80:	40005000 	.word	0x40005000
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4aae      	ldr	r2, [pc, #696]	; (8006d48 <UART_SetConfig+0x5bc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	f040 8097 	bne.w	8006bc4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d823      	bhi.n	8006ae6 <UART_SetConfig+0x35a>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x318>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ae7 	.word	0x08006ae7
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ae7 	.word	0x08006ae7
 8006ab4:	08006ad7 	.word	0x08006ad7
 8006ab8:	08006ae7 	.word	0x08006ae7
 8006abc:	08006ae7 	.word	0x08006ae7
 8006ac0:	08006ae7 	.word	0x08006ae7
 8006ac4:	08006adf 	.word	0x08006adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fd fbda 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8006acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ace:	e010      	b.n	8006af2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad0:	4b9e      	ldr	r3, [pc, #632]	; (8006d4c <UART_SetConfig+0x5c0>)
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ad4:	e00d      	b.n	8006af2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad6:	f7fd fb65 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006ada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006adc:	e009      	b.n	8006af2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ae4:	e005      	b.n	8006af2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8130 	beq.w	8006d5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	4a94      	ldr	r2, [pc, #592]	; (8006d50 <UART_SetConfig+0x5c4>)
 8006b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d305      	bcc.n	8006b2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d903      	bls.n	8006b32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b30:	e113      	b.n	8006d5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	2200      	movs	r2, #0
 8006b36:	60bb      	str	r3, [r7, #8]
 8006b38:	60fa      	str	r2, [r7, #12]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	4a84      	ldr	r2, [pc, #528]	; (8006d50 <UART_SetConfig+0x5c4>)
 8006b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2200      	movs	r2, #0
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b54:	f7fa f8a0 	bl	8000c98 <__aeabi_uldivmod>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	020b      	lsls	r3, r1, #8
 8006b6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b6e:	0202      	lsls	r2, r0, #8
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	6849      	ldr	r1, [r1, #4]
 8006b74:	0849      	lsrs	r1, r1, #1
 8006b76:	2000      	movs	r0, #0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	eb12 0804 	adds.w	r8, r2, r4
 8006b80:	eb43 0905 	adc.w	r9, r3, r5
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	469a      	mov	sl, r3
 8006b8c:	4693      	mov	fp, r2
 8006b8e:	4652      	mov	r2, sl
 8006b90:	465b      	mov	r3, fp
 8006b92:	4640      	mov	r0, r8
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7fa f87f 	bl	8000c98 <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba8:	d308      	bcc.n	8006bbc <UART_SetConfig+0x430>
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb0:	d204      	bcs.n	8006bbc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e0ce      	b.n	8006d5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bc2:	e0ca      	b.n	8006d5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	d166      	bne.n	8006c9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d827      	bhi.n	8006c26 <UART_SetConfig+0x49a>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x450>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c27 	.word	0x08006c27
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fd fb3e 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8006c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c06:	e014      	b.n	8006c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fd fb50 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b4e      	ldr	r3, [pc, #312]	; (8006d4c <UART_SetConfig+0x5c0>)
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fd fac5 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006c1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8090 	beq.w	8006d5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	4a44      	ldr	r2, [pc, #272]	; (8006d50 <UART_SetConfig+0x5c4>)
 8006c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4c:	005a      	lsls	r2, r3, #1
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	085b      	lsrs	r3, r3, #1
 8006c54:	441a      	add	r2, r3
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2b0f      	cmp	r3, #15
 8006c64:	d916      	bls.n	8006c94 <UART_SetConfig+0x508>
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6c:	d212      	bcs.n	8006c94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f023 030f 	bic.w	r3, r3, #15
 8006c76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	8bfb      	ldrh	r3, [r7, #30]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	8bfa      	ldrh	r2, [r7, #30]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	e062      	b.n	8006d5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c9a:	e05e      	b.n	8006d5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d828      	bhi.n	8006cf6 <UART_SetConfig+0x56a>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x520>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cf7 	.word	0x08006cf7
 8006cbc:	08006ce7 	.word	0x08006ce7
 8006cc0:	08006cf7 	.word	0x08006cf7
 8006cc4:	08006cf7 	.word	0x08006cf7
 8006cc8:	08006cf7 	.word	0x08006cf7
 8006ccc:	08006cef 	.word	0x08006cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f7fd fad6 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cd6:	e014      	b.n	8006d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fd fae8 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8006cdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cde:	e010      	b.n	8006d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce0:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <UART_SetConfig+0x5c0>)
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ce4:	e00d      	b.n	8006d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce6:	f7fd fa5d 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cec:	e009      	b.n	8006d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cf4:	e005      	b.n	8006d02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d00:	bf00      	nop
    }

    if (pclk != 0U)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d028      	beq.n	8006d5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <UART_SetConfig+0x5c4>)
 8006d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d12:	461a      	mov	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	441a      	add	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d910      	bls.n	8006d54 <UART_SetConfig+0x5c8>
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d38:	d20c      	bcs.n	8006d54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	e009      	b.n	8006d5a <UART_SetConfig+0x5ce>
 8006d46:	bf00      	nop
 8006d48:	40008000 	.word	0x40008000
 8006d4c:	00f42400 	.word	0x00f42400
 8006d50:	0801215c 	.word	0x0801215c
      }
      else
      {
        ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2200      	movs	r2, #0
 8006d74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3730      	adds	r7, #48	; 0x30
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01a      	beq.n	8006e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e82:	d10a      	bne.n	8006e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	605a      	str	r2, [r3, #4]
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ed8:	f7fa fd6b 	bl	80019b2 <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d10e      	bne.n	8006f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f82f 	bl	8006f5e <UART_WaitOnFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e025      	b.n	8006f56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d10e      	bne.n	8006f36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f819 	bl	8006f5e <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e00f      	b.n	8006f56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b09c      	sub	sp, #112	; 0x70
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f6e:	e0a9      	b.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	f000 80a5 	beq.w	80070c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7a:	f7fa fd1a 	bl	80019b2 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d302      	bcc.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d140      	bne.n	8007012 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e6      	bne.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fe2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e069      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d051      	beq.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800702a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702e:	d149      	bne.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007038:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800704e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
 800705a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800705e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e6      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	613b      	str	r3, [r7, #16]
   return(result);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	66bb      	str	r3, [r7, #104]	; 0x68
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800708c:	623a      	str	r2, [r7, #32]
 800708e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	69f9      	ldr	r1, [r7, #28]
 8007092:	6a3a      	ldr	r2, [r7, #32]
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	61bb      	str	r3, [r7, #24]
   return(result);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e010      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	429a      	cmp	r2, r3
 80070e0:	f43f af46 	beq.w	8006f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3770      	adds	r7, #112	; 0x70
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_UARTEx_DisableFifoMode+0x16>
 8007100:	2302      	movs	r3, #2
 8007102:	e027      	b.n	8007154 <HAL_UARTEx_DisableFifoMode+0x66>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2224      	movs	r2, #36	; 0x24
 8007110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007132:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e02d      	b.n	80071d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2224      	movs	r2, #36	; 0x24
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f84f 	bl	8007258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e02d      	b.n	8007250 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2224      	movs	r2, #36	; 0x24
 8007200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0201 	bic.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f811 	bl	8007258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007278:	e031      	b.n	80072de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800727a:	2308      	movs	r3, #8
 800727c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800727e:	2308      	movs	r3, #8
 8007280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	0e5b      	lsrs	r3, r3, #25
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	0f5b      	lsrs	r3, r3, #29
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	7b3a      	ldrb	r2, [r7, #12]
 80072a6:	4911      	ldr	r1, [pc, #68]	; (80072ec <UARTEx_SetNbDataToProcess+0x94>)
 80072a8:	5c8a      	ldrb	r2, [r1, r2]
 80072aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072ae:	7b3a      	ldrb	r2, [r7, #12]
 80072b0:	490f      	ldr	r1, [pc, #60]	; (80072f0 <UARTEx_SetNbDataToProcess+0x98>)
 80072b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	7b7a      	ldrb	r2, [r7, #13]
 80072c4:	4909      	ldr	r1, [pc, #36]	; (80072ec <UARTEx_SetNbDataToProcess+0x94>)
 80072c6:	5c8a      	ldrb	r2, [r1, r2]
 80072c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072cc:	7b7a      	ldrb	r2, [r7, #13]
 80072ce:	4908      	ldr	r1, [pc, #32]	; (80072f0 <UARTEx_SetNbDataToProcess+0x98>)
 80072d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	08012174 	.word	0x08012174
 80072f0:	0801217c 	.word	0x0801217c

080072f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007306:	2b84      	cmp	r3, #132	; 0x84
 8007308:	d005      	beq.n	8007316 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800730a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	3303      	adds	r3, #3
 8007314:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007316:	68fb      	ldr	r3, [r7, #12]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800732a:	f3ef 8305 	mrs	r3, IPSR
 800732e:	607b      	str	r3, [r7, #4]
  return(result);
 8007330:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007332:	2b00      	cmp	r3, #0
 8007334:	bf14      	ite	ne
 8007336:	2301      	movne	r3, #1
 8007338:	2300      	moveq	r3, #0
 800733a:	b2db      	uxtb	r3, r3
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800734c:	f001 ff82 	bl	8009254 <vTaskStartScheduler>
  
  return osOK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	bd80      	pop	{r7, pc}

08007356 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800735a:	f7ff ffe3 	bl	8007324 <inHandlerMode>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007364:	f002 f87e 	bl	8009464 <xTaskGetTickCountFromISR>
 8007368:	4603      	mov	r3, r0
 800736a:	e002      	b.n	8007372 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800736c:	f002 f86a 	bl	8009444 <xTaskGetTickCount>
 8007370:	4603      	mov	r3, r0
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	bd80      	pop	{r7, pc}

08007376 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007378:	b087      	sub	sp, #28
 800737a:	af02      	add	r7, sp, #8
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685c      	ldr	r4, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800738c:	b29e      	uxth	r6, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ffad 	bl	80072f4 <makeFreeRtosPriority>
 800739a:	4602      	mov	r2, r0
 800739c:	f107 030c 	add.w	r3, r7, #12
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	9200      	str	r2, [sp, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	4632      	mov	r2, r6
 80073a8:	4629      	mov	r1, r5
 80073aa:	4620      	mov	r0, r4
 80073ac:	f001 fc34 	bl	8008c18 <xTaskCreate>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073c4 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 80073c8:	f002 fb5e 	bl	8009a88 <xTaskGetCurrentTaskHandle>
 80073cc:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 80073de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff ff86 	bl	80072f4 <makeFreeRtosPriority>
 80073e8:	4603      	mov	r3, r0
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 fe87 	bl	8009100 <vTaskPrioritySet>
  return osOK;
 80073f2:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <osDelay+0x16>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	e000      	b.n	8007414 <osDelay+0x18>
 8007412:	2301      	movs	r3, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fe3f 	bl	8009098 <vTaskDelay>
  
  return osOK;
 800741a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	460b      	mov	r3, r1
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	72fb      	strb	r3, [r7, #11]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <osTimerCreate+0x18>
 8007438:	2201      	movs	r2, #1
 800743a:	e000      	b.n	800743e <osTimerCreate+0x1a>
 800743c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
  return xTimerCreate((const char *)"",
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2101      	movs	r1, #1
 8007448:	4803      	ldr	r0, [pc, #12]	; (8007458 <osTimerCreate+0x34>)
 800744a:	f002 fd81 	bl	8009f50 <xTimerCreate>
 800744e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08011adc 	.word	0x08011adc

0800745c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af02      	add	r7, sp, #8
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <osTimerStart+0x20>
    ticks = 1;
 8007478:	2301      	movs	r3, #1
 800747a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800747c:	f7ff ff52 	bl	8007324 <inHandlerMode>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01a      	beq.n	80074bc <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	2200      	movs	r2, #0
 800748c:	9200      	str	r2, [sp, #0]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	2109      	movs	r1, #9
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f002 fdb8 	bl	800a008 <xTimerGenericCommand>
 8007498:	4603      	mov	r3, r0
 800749a:	2b01      	cmp	r3, #1
 800749c:	d002      	beq.n	80074a4 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800749e:	23ff      	movs	r3, #255	; 0xff
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e018      	b.n	80074d6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d015      	beq.n	80074d6 <osTimerStart+0x7a>
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <osTimerStart+0x84>)
 80074ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	e00c      	b.n	80074d6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80074bc:	2300      	movs	r3, #0
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	2104      	movs	r1, #4
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f002 fd9e 	bl	800a008 <xTimerGenericCommand>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d001      	beq.n	80074d6 <osTimerStart+0x7a>
      result = osErrorOS;
 80074d2:	23ff      	movs	r3, #255	; 0xff
 80074d4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80074d6:	697b      	ldr	r3, [r7, #20]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80074f4:	f7ff ff16 	bl	8007324 <inHandlerMode>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d019      	beq.n	8007532 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	2200      	movs	r2, #0
 8007504:	9200      	str	r2, [sp, #0]
 8007506:	2200      	movs	r2, #0
 8007508:	2108      	movs	r1, #8
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f002 fd7c 	bl	800a008 <xTimerGenericCommand>
 8007510:	4603      	mov	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d001      	beq.n	800751a <osTimerStop+0x36>
      return osErrorOS;
 8007516:	23ff      	movs	r3, #255	; 0xff
 8007518:	e019      	b.n	800754e <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d015      	beq.n	800754c <osTimerStop+0x68>
 8007520:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <osTimerStop+0x74>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	e00c      	b.n	800754c <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2300      	movs	r3, #0
 8007538:	2200      	movs	r2, #0
 800753a:	2103      	movs	r1, #3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f002 fd63 	bl	800a008 <xTimerGenericCommand>
 8007542:	4603      	mov	r3, r0
 8007544:	2b01      	cmp	r3, #1
 8007546:	d001      	beq.n	800754c <osTimerStop+0x68>
      result = osErrorOS;
 8007548:	23ff      	movs	r3, #255	; 0xff
 800754a:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800754c:	68fb      	ldr	r3, [r7, #12]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007564:	2001      	movs	r0, #1
 8007566:	f000 fd26 	bl	8007fb6 <xQueueCreateMutex>
 800756a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800757e:	2300      	movs	r3, #0
 8007580:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <osMutexWait+0x18>
    return osErrorParameter;
 8007588:	2380      	movs	r3, #128	; 0x80
 800758a:	e03a      	b.n	8007602 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d103      	bne.n	80075a0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e009      	b.n	80075b4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d006      	beq.n	80075b4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <osMutexWait+0x40>
      ticks = 1;
 80075b0:	2301      	movs	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80075b4:	f7ff feb6 	bl	8007324 <inHandlerMode>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d017      	beq.n	80075ee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80075be:	f107 0308 	add.w	r3, r7, #8
 80075c2:	461a      	mov	r2, r3
 80075c4:	2100      	movs	r1, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 f920 	bl	800880c <xQueueReceiveFromISR>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d001      	beq.n	80075d6 <osMutexWait+0x62>
      return osErrorOS;
 80075d2:	23ff      	movs	r3, #255	; 0xff
 80075d4:	e015      	b.n	8007602 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d011      	beq.n	8007600 <osMutexWait+0x8c>
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <osMutexWait+0x98>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	e008      	b.n	8007600 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 ffff 	bl	80085f4 <xQueueSemaphoreTake>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d001      	beq.n	8007600 <osMutexWait+0x8c>
    return osErrorOS;
 80075fc:	23ff      	movs	r3, #255	; 0xff
 80075fe:	e000      	b.n	8007602 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	e000ed04 	.word	0xe000ed04

08007610 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007620:	f7ff fe80 	bl	8007324 <inHandlerMode>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d016      	beq.n	8007658 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fe72 	bl	800831a <xQueueGiveFromISR>
 8007636:	4603      	mov	r3, r0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <osMutexRelease+0x30>
      return osErrorOS;
 800763c:	23ff      	movs	r3, #255	; 0xff
 800763e:	e017      	b.n	8007670 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d013      	beq.n	800766e <osMutexRelease+0x5e>
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <osMutexRelease+0x68>)
 8007648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	e00a      	b.n	800766e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007658:	2300      	movs	r3, #0
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fcc2 	bl	8007fe8 <xQueueGenericSend>
 8007664:	4603      	mov	r3, r0
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800766a:	23ff      	movs	r3, #255	; 0xff
 800766c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800766e:	68fb      	ldr	r3, [r7, #12]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	3303      	adds	r3, #3
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007690:	2014      	movs	r0, #20
 8007692:	f003 f9f9 	bl	800aa88 <pvPortMalloc>
 8007696:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d046      	beq.n	800772c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f003 f9e6 	bl	800aa88 <pvPortMalloc>
 80076bc:	4602      	mov	r2, r0
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d02b      	beq.n	8007722 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	fb02 f303 	mul.w	r3, r2, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	f003 f9d7 	bl	800aa88 <pvPortMalloc>
 80076da:	4602      	mov	r2, r0
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d011      	beq.n	800770c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	e008      	b.n	8007700 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	4413      	add	r3, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3301      	adds	r3, #1
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	429a      	cmp	r2, r3
 8007708:	d3f1      	bcc.n	80076ee <osPoolCreate+0x72>
 800770a:	e00f      	b.n	800772c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4618      	mov	r0, r3
 8007712:	f003 fa85 	bl	800ac20 <vPortFree>
        vPortFree(thePool);
 8007716:	6978      	ldr	r0, [r7, #20]
 8007718:	f003 fa82 	bl	800ac20 <vPortFree>
        thePool = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e004      	b.n	800772c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f003 fa7c 	bl	800ac20 <vPortFree>
      thePool = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800772c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b08a      	sub	sp, #40	; 0x28
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8007746:	f7ff fded 	bl	8007324 <inHandlerMode>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007750:	f3ef 8211 	mrs	r2, BASEPRI
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	617a      	str	r2, [r7, #20]
 8007766:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007768:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	e001      	b.n	8007772 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800776e:	f003 f869 	bl	800a844 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e029      	b.n	80077cc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6892      	ldr	r2, [r2, #8]
 8007784:	fbb3 f1f2 	udiv	r1, r3, r2
 8007788:	fb01 f202 	mul.w	r2, r1, r2
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	4413      	add	r3, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d113      	bne.n	80077c6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	4413      	add	r3, r2
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	440b      	add	r3, r1
 80077bc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	611a      	str	r2, [r3, #16]
      break;
 80077c4:	e007      	b.n	80077d6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	3301      	adds	r3, #1
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3d0      	bcc.n	8007778 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80077d6:	f7ff fda5 	bl	8007324 <inHandlerMode>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077ea:	e001      	b.n	80077f0 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80077ec:	f003 f85a 	bl	800a8a4 <vPortExitCritical>
  }
  
  return p;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3728      	adds	r7, #40	; 0x28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <osPoolFree+0x14>
    return osErrorParameter;
 800780a:	2380      	movs	r3, #128	; 0x80
 800780c:	e030      	b.n	8007870 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <osPoolFree+0x1e>
    return osErrorParameter;
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	e02b      	b.n	8007870 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d201      	bcs.n	8007826 <osPoolFree+0x2c>
    return osErrorParameter;
 8007822:	2380      	movs	r3, #128	; 0x80
 8007824:	e024      	b.n	8007870 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6812      	ldr	r2, [r2, #0]
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	fbb3 f1f2 	udiv	r1, r3, r2
 800783a:	fb01 f202 	mul.w	r2, r1, r2
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <osPoolFree+0x4e>
    return osErrorParameter;
 8007844:	2380      	movs	r3, #128	; 0x80
 8007846:	e013      	b.n	8007870 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	429a      	cmp	r2, r3
 800785c:	d301      	bcc.n	8007862 <osPoolFree+0x68>
    return osErrorParameter;
 800785e:	2380      	movs	r3, #128	; 0x80
 8007860:	e006      	b.n	8007870 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	4619      	mov	r1, r3
 8007892:	f000 fb21 	bl	8007ed8 <xQueueGenericCreate>
 8007896:	4603      	mov	r3, r0
#endif
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80078ac:	2300      	movs	r3, #0
 80078ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <osMessagePut+0x1e>
    ticks = 1;
 80078ba:	2301      	movs	r3, #1
 80078bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80078be:	f7ff fd31 	bl	8007324 <inHandlerMode>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d018      	beq.n	80078fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80078c8:	f107 0210 	add.w	r2, r7, #16
 80078cc:	f107 0108 	add.w	r1, r7, #8
 80078d0:	2300      	movs	r3, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fc86 	bl	80081e4 <xQueueGenericSendFromISR>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d001      	beq.n	80078e2 <osMessagePut+0x42>
      return osErrorOS;
 80078de:	23ff      	movs	r3, #255	; 0xff
 80078e0:	e018      	b.n	8007914 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d014      	beq.n	8007912 <osMessagePut+0x72>
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <osMessagePut+0x7c>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	e00b      	b.n	8007912 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80078fa:	f107 0108 	add.w	r1, r7, #8
 80078fe:	2300      	movs	r3, #0
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fb70 	bl	8007fe8 <xQueueGenericSend>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <osMessagePut+0x72>
      return osErrorOS;
 800790e:	23ff      	movs	r3, #255	; 0xff
 8007910:	e000      	b.n	8007914 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007920:	b590      	push	{r4, r7, lr}
 8007922:	b08b      	sub	sp, #44	; 0x2c
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800793a:	2380      	movs	r3, #128	; 0x80
 800793c:	617b      	str	r3, [r7, #20]
    return event;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	461c      	mov	r4, r3
 8007942:	f107 0314 	add.w	r3, r7, #20
 8007946:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800794a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800794e:	e054      	b.n	80079fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007950:	2300      	movs	r3, #0
 8007952:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d103      	bne.n	8007968 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007960:	f04f 33ff 	mov.w	r3, #4294967295
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
 8007966:	e009      	b.n	800797c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d006      	beq.n	800797c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <osMessageGet+0x5c>
      ticks = 1;
 8007978:	2301      	movs	r3, #1
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800797c:	f7ff fcd2 	bl	8007324 <inHandlerMode>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01c      	beq.n	80079c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007986:	f107 0220 	add.w	r2, r7, #32
 800798a:	f107 0314 	add.w	r3, r7, #20
 800798e:	3304      	adds	r3, #4
 8007990:	4619      	mov	r1, r3
 8007992:	68b8      	ldr	r0, [r7, #8]
 8007994:	f000 ff3a 	bl	800880c <xQueueReceiveFromISR>
 8007998:	4603      	mov	r3, r0
 800799a:	2b01      	cmp	r3, #1
 800799c:	d102      	bne.n	80079a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800799e:	2310      	movs	r3, #16
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	e001      	b.n	80079a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01d      	beq.n	80079ea <osMessageGet+0xca>
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <osMessageGet+0xe4>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	e014      	b.n	80079ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80079c0:	f107 0314 	add.w	r3, r7, #20
 80079c4:	3304      	adds	r3, #4
 80079c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c8:	4619      	mov	r1, r3
 80079ca:	68b8      	ldr	r0, [r7, #8]
 80079cc:	f000 fd32 	bl	8008434 <xQueueReceive>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d102      	bne.n	80079dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80079d6:	2310      	movs	r3, #16
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	e006      	b.n	80079ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <osMessageGet+0xc6>
 80079e2:	2300      	movs	r3, #0
 80079e4:	e000      	b.n	80079e8 <osMessageGet+0xc8>
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	461c      	mov	r4, r3
 80079ee:	f107 0314 	add.w	r3, r7, #20
 80079f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	372c      	adds	r7, #44	; 0x2c
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd90      	pop	{r4, r7, pc}
 8007a02:	bf00      	nop
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007a08:	b590      	push	{r4, r7, lr}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689c      	ldr	r4, [r3, #8]
 8007a26:	200c      	movs	r0, #12
 8007a28:	f003 f82e 	bl	800aa88 <pvPortMalloc>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <osMailCreate+0x36>
    return NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e038      	b.n	8007ab0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	681c      	ldr	r4, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	2104      	movs	r1, #4
 8007a56:	f000 fa3f 	bl	8007ed8 <xQueueGenericCreate>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d107      	bne.n	8007a7a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f003 f8d5 	bl	800ac20 <vPortFree>
    return NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e01a      	b.n	8007ab0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	681c      	ldr	r4, [r3, #0]
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fdf9 	bl	800767c <osPoolCreate>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d107      	bne.n	8007aaa <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f003 f8bd 	bl	800ac20 <vPortFree>
    return NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e002      	b.n	8007ab0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd90      	pop	{r4, r7, pc}

08007ab8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <osMailAlloc+0x14>
    return NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e006      	b.n	8007ada <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fe30 	bl	8007736 <osPoolAlloc>
 8007ad6:	60f8      	str	r0, [r7, #12]
  
  return p;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <osMailPut+0x14>
    return osErrorParameter;
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	e02c      	b.n	8007b52 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8007afc:	f7ff fc12 	bl	8007324 <inHandlerMode>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d018      	beq.n	8007b38 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6858      	ldr	r0, [r3, #4]
 8007b0a:	f107 020c 	add.w	r2, r7, #12
 8007b0e:	4639      	mov	r1, r7
 8007b10:	2300      	movs	r3, #0
 8007b12:	f000 fb67 	bl	80081e4 <xQueueGenericSendFromISR>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d001      	beq.n	8007b20 <osMailPut+0x3c>
      return osErrorOS;
 8007b1c:	23ff      	movs	r3, #255	; 0xff
 8007b1e:	e018      	b.n	8007b52 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d014      	beq.n	8007b50 <osMailPut+0x6c>
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <osMailPut+0x78>)
 8007b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	e00b      	b.n	8007b50 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6858      	ldr	r0, [r3, #4]
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2200      	movs	r2, #0
 8007b42:	f000 fa51 	bl	8007fe8 <xQueueGenericSend>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d001      	beq.n	8007b50 <osMailPut+0x6c>
      return osErrorOS;
 8007b4c:	23ff      	movs	r3, #255	; 0xff
 8007b4e:	e000      	b.n	8007b52 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	e000ed04 	.word	0xe000ed04

08007b60 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b08b      	sub	sp, #44	; 0x2c
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	617b      	str	r3, [r7, #20]
    return event;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	461c      	mov	r4, r3
 8007b7e:	f107 0314 	add.w	r3, r7, #20
 8007b82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b8a:	e056      	b.n	8007c3a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d103      	bne.n	8007ba4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba2:	e009      	b.n	8007bb8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <osMailGet+0x58>
      ticks = 1;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007bb8:	f7ff fbb4 	bl	8007324 <inHandlerMode>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01d      	beq.n	8007bfe <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6858      	ldr	r0, [r3, #4]
 8007bc6:	f107 0220 	add.w	r2, r7, #32
 8007bca:	f107 0314 	add.w	r3, r7, #20
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f000 fe1b 	bl	800880c <xQueueReceiveFromISR>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d102      	bne.n	8007be2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8007bdc:	2320      	movs	r3, #32
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	e001      	b.n	8007be6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01e      	beq.n	8007c2a <osMailGet+0xca>
 8007bec:	4b15      	ldr	r3, [pc, #84]	; (8007c44 <osMailGet+0xe4>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	e015      	b.n	8007c2a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	6858      	ldr	r0, [r3, #4]
 8007c02:	f107 0314 	add.w	r3, r7, #20
 8007c06:	3304      	adds	r3, #4
 8007c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f000 fc12 	bl	8008434 <xQueueReceive>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d102      	bne.n	8007c1c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8007c16:	2320      	movs	r3, #32
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	e006      	b.n	8007c2a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <osMailGet+0xc6>
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <osMailGet+0xc8>
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	461c      	mov	r4, r3
 8007c2e:	f107 0314 	add.w	r3, r7, #20
 8007c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	372c      	adds	r7, #44	; 0x2c
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd90      	pop	{r4, r7, pc}
 8007c42:	bf00      	nop
 8007c44:	e000ed04 	.word	0xe000ed04

08007c48 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <osMailFree+0x14>
    return osErrorParameter;
 8007c58:	2380      	movs	r3, #128	; 0x80
 8007c5a:	e006      	b.n	8007c6a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fdc9 	bl	80077fa <osPoolFree>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <osDelayUntil+0x18>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	e000      	b.n	8007c8c <osDelayUntil+0x1a>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 f984 	bl	8008f9c <vTaskDelayUntil>
  
  return osOK;
 8007c94:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f103 0208 	add.w	r2, r3, #8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f103 0208 	add.w	r2, r3, #8
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f103 0208 	add.w	r2, r3, #8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d103      	bne.n	8007d60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e00c      	b.n	8007d7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3308      	adds	r3, #8
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e002      	b.n	8007d6e <vListInsert+0x2e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d2f6      	bcs.n	8007d68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
}
 8007da6:	bf00      	nop
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6892      	ldr	r2, [r2, #8]
 8007dc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6852      	ldr	r2, [r2, #4]
 8007dd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d103      	bne.n	8007de6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	1e5a      	subs	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericReset+0x2a>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e32:	f002 fd07 	bl	800a844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	441a      	add	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	3b01      	subs	r3, #1
 8007e64:	68f9      	ldr	r1, [r7, #12]
 8007e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22ff      	movs	r2, #255	; 0xff
 8007e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d114      	bne.n	8007eb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01a      	beq.n	8007ec6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3310      	adds	r3, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fc5b 	bl	8009750 <xTaskRemoveFromEventList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d012      	beq.n	8007ec6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <xQueueGenericReset+0xcc>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	e009      	b.n	8007ec6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fef1 	bl	8007c9e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff feec 	bl	8007c9e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ec6:	f002 fced 	bl	800a8a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007eca:	2301      	movs	r3, #1
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	613b      	str	r3, [r7, #16]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
 8007f0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	3348      	adds	r3, #72	; 0x48
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fdb9 	bl	800aa88 <pvPortMalloc>
 8007f16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	3348      	adds	r3, #72	; 0x48
 8007f26:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f28:	79fa      	ldrb	r2, [r7, #7]
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f805 	bl	8007f44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d103      	bne.n	8007f60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e002      	b.n	8007f66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f72:	2101      	movs	r1, #1
 8007f74:	69b8      	ldr	r0, [r7, #24]
 8007f76:	f7ff ff47 	bl	8007e08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f7a:	bf00      	nop
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00e      	beq.n	8007fae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f81d 	bl	8007fe8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	6939      	ldr	r1, [r7, #16]
 8007fce:	6978      	ldr	r0, [r7, #20]
 8007fd0:	f7ff ff82 	bl	8007ed8 <xQueueGenericCreate>
 8007fd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff ffd3 	bl	8007f82 <prvInitialiseMutex>

		return xNewQueue;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08e      	sub	sp, #56	; 0x38
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <xQueueGenericSend+0x32>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <xQueueGenericSend+0x40>
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <xQueueGenericSend+0x44>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <xQueueGenericSend+0x46>
 800802c:	2300      	movs	r3, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <xQueueGenericSend+0x60>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d103      	bne.n	8008056 <xQueueGenericSend+0x6e>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <xQueueGenericSend+0x72>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <xQueueGenericSend+0x74>
 800805a:	2300      	movs	r3, #0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <xQueueGenericSend+0x8e>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	623b      	str	r3, [r7, #32]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008076:	f001 fd17 	bl	8009aa8 <xTaskGetSchedulerState>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <xQueueGenericSend+0x9e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <xQueueGenericSend+0xa2>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <xQueueGenericSend+0xa4>
 800808a:	2300      	movs	r3, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	61fb      	str	r3, [r7, #28]
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080a6:	f002 fbcd 	bl	800a844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d302      	bcc.n	80080bc <xQueueGenericSend+0xd4>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d129      	bne.n	8008110 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c2:	f000 fc3b 	bl	800893c <prvCopyDataToQueue>
 80080c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d010      	beq.n	80080f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	3324      	adds	r3, #36	; 0x24
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fb3b 	bl	8009750 <xTaskRemoveFromEventList>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d013      	beq.n	8008108 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080e0:	4b3f      	ldr	r3, [pc, #252]	; (80081e0 <xQueueGenericSend+0x1f8>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	e00a      	b.n	8008108 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080f8:	4b39      	ldr	r3, [pc, #228]	; (80081e0 <xQueueGenericSend+0x1f8>)
 80080fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008108:	f002 fbcc 	bl	800a8a4 <vPortExitCritical>
				return pdPASS;
 800810c:	2301      	movs	r3, #1
 800810e:	e063      	b.n	80081d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008116:	f002 fbc5 	bl	800a8a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800811a:	2300      	movs	r3, #0
 800811c:	e05c      	b.n	80081d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008124:	f107 0314 	add.w	r3, r7, #20
 8008128:	4618      	mov	r0, r3
 800812a:	f001 fb73 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800812e:	2301      	movs	r3, #1
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008132:	f002 fbb7 	bl	800a8a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008136:	f001 f8db 	bl	80092f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800813a:	f002 fb83 	bl	800a844 <vPortEnterCritical>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008144:	b25b      	sxtb	r3, r3
 8008146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814a:	d103      	bne.n	8008154 <xQueueGenericSend+0x16c>
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815a:	b25b      	sxtb	r3, r3
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d103      	bne.n	800816a <xQueueGenericSend+0x182>
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800816a:	f002 fb9b 	bl	800a8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800816e:	1d3a      	adds	r2, r7, #4
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fb62 	bl	8009840 <xTaskCheckForTimeOut>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d124      	bne.n	80081cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008184:	f000 fcd2 	bl	8008b2c <prvIsQueueFull>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d018      	beq.n	80081c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	3310      	adds	r3, #16
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f001 fa8a 	bl	80096b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800819c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800819e:	f000 fc5d 	bl	8008a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081a2:	f001 f8b3 	bl	800930c <xTaskResumeAll>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f47f af7c 	bne.w	80080a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081ae:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <xQueueGenericSend+0x1f8>)
 80081b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	e772      	b.n	80080a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c2:	f000 fc4b 	bl	8008a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081c6:	f001 f8a1 	bl	800930c <xTaskResumeAll>
 80081ca:	e76c      	b.n	80080a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ce:	f000 fc45 	bl	8008a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081d2:	f001 f89b 	bl	800930c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3738      	adds	r7, #56	; 0x38
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b090      	sub	sp, #64	; 0x40
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d103      	bne.n	8008220 <xQueueGenericSendFromISR+0x3c>
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <xQueueGenericSendFromISR+0x40>
 8008220:	2301      	movs	r3, #1
 8008222:	e000      	b.n	8008226 <xQueueGenericSendFromISR+0x42>
 8008224:	2300      	movs	r3, #0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d103      	bne.n	800824e <xQueueGenericSendFromISR+0x6a>
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <xQueueGenericSendFromISR+0x6e>
 800824e:	2301      	movs	r3, #1
 8008250:	e000      	b.n	8008254 <xQueueGenericSendFromISR+0x70>
 8008252:	2300      	movs	r3, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	623b      	str	r3, [r7, #32]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800826e:	f002 fbcb 	bl	800aa08 <vPortValidateInterruptPriority>
	__asm volatile
 8008272:	f3ef 8211 	mrs	r2, BASEPRI
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	61fa      	str	r2, [r7, #28]
 8008288:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800828a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008296:	429a      	cmp	r2, r3
 8008298:	d302      	bcc.n	80082a0 <xQueueGenericSendFromISR+0xbc>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d12f      	bne.n	8008300 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082b6:	f000 fb41 	bl	800893c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d112      	bne.n	80082ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d016      	beq.n	80082fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	3324      	adds	r3, #36	; 0x24
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 fa3d 	bl	8009750 <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e007      	b.n	80082fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082ee:	3301      	adds	r3, #1
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	b25a      	sxtb	r2, r3
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082fa:	2301      	movs	r3, #1
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082fe:	e001      	b.n	8008304 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f383 8811 	msr	BASEPRI, r3
}
 800830e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008312:	4618      	mov	r0, r3
 8008314:	3740      	adds	r7, #64	; 0x40
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b08e      	sub	sp, #56	; 0x38
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	623b      	str	r3, [r7, #32]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <xQueueGiveFromISR+0x48>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	61fb      	str	r3, [r7, #28]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <xQueueGiveFromISR+0x58>
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <xQueueGiveFromISR+0x5c>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <xQueueGiveFromISR+0x5e>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xQueueGiveFromISR+0x78>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	61bb      	str	r3, [r7, #24]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008392:	f002 fb39 	bl	800aa08 <vPortValidateInterruptPriority>
	__asm volatile
 8008396:	f3ef 8211 	mrs	r2, BASEPRI
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	617a      	str	r2, [r7, #20]
 80083ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80083ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083be:	429a      	cmp	r2, r3
 80083c0:	d22b      	bcs.n	800841a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d112      	bne.n	8008404 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d016      	beq.n	8008414 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	3324      	adds	r3, #36	; 0x24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 f9b0 	bl	8009750 <xTaskRemoveFromEventList>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00e      	beq.n	8008414 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2201      	movs	r2, #1
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e007      	b.n	8008414 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008408:	3301      	adds	r3, #1
 800840a:	b2db      	uxtb	r3, r3
 800840c:	b25a      	sxtb	r2, r3
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008414:	2301      	movs	r3, #1
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
 8008418:	e001      	b.n	800841e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800841a:	2300      	movs	r3, #0
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f383 8811 	msr	BASEPRI, r3
}
 8008428:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800842c:	4618      	mov	r0, r3
 800842e:	3738      	adds	r7, #56	; 0x38
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08c      	sub	sp, #48	; 0x30
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008440:	2300      	movs	r3, #0
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <xQueueReceive+0x30>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	623b      	str	r3, [r7, #32]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <xQueueReceive+0x3e>
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <xQueueReceive+0x42>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xQueueReceive+0x44>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueReceive+0x5e>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fb      	str	r3, [r7, #28]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008492:	f001 fb09 	bl	8009aa8 <xTaskGetSchedulerState>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <xQueueReceive+0x6e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <xQueueReceive+0x72>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <xQueueReceive+0x74>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueReceive+0x8e>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	61bb      	str	r3, [r7, #24]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084c2:	f002 f9bf 	bl	800a844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01f      	beq.n	8008512 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d6:	f000 fa9b 	bl	8008a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1e5a      	subs	r2, r3, #1
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00f      	beq.n	800850a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	3310      	adds	r3, #16
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 f92e 	bl	8009750 <xTaskRemoveFromEventList>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084fa:	4b3d      	ldr	r3, [pc, #244]	; (80085f0 <xQueueReceive+0x1bc>)
 80084fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800850a:	f002 f9cb 	bl	800a8a4 <vPortExitCritical>
				return pdPASS;
 800850e:	2301      	movs	r3, #1
 8008510:	e069      	b.n	80085e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008518:	f002 f9c4 	bl	800a8a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800851c:	2300      	movs	r3, #0
 800851e:	e062      	b.n	80085e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008526:	f107 0310 	add.w	r3, r7, #16
 800852a:	4618      	mov	r0, r3
 800852c:	f001 f972 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008530:	2301      	movs	r3, #1
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008534:	f002 f9b6 	bl	800a8a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008538:	f000 feda 	bl	80092f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800853c:	f002 f982 	bl	800a844 <vPortEnterCritical>
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008546:	b25b      	sxtb	r3, r3
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d103      	bne.n	8008556 <xQueueReceive+0x122>
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800855c:	b25b      	sxtb	r3, r3
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d103      	bne.n	800856c <xQueueReceive+0x138>
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800856c:	f002 f99a 	bl	800a8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008570:	1d3a      	adds	r2, r7, #4
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4611      	mov	r1, r2
 8008578:	4618      	mov	r0, r3
 800857a:	f001 f961 	bl	8009840 <xTaskCheckForTimeOut>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d123      	bne.n	80085cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008586:	f000 fabb 	bl	8008b00 <prvIsQueueEmpty>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d017      	beq.n	80085c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	3324      	adds	r3, #36	; 0x24
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f001 f889 	bl	80096b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800859e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a0:	f000 fa5c 	bl	8008a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085a4:	f000 feb2 	bl	800930c <xTaskResumeAll>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d189      	bne.n	80084c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <xQueueReceive+0x1bc>)
 80085b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	e780      	b.n	80084c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c2:	f000 fa4b 	bl	8008a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085c6:	f000 fea1 	bl	800930c <xTaskResumeAll>
 80085ca:	e77a      	b.n	80084c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ce:	f000 fa45 	bl	8008a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085d2:	f000 fe9b 	bl	800930c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d8:	f000 fa92 	bl	8008b00 <prvIsQueueEmpty>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f43f af6f 	beq.w	80084c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3730      	adds	r7, #48	; 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08e      	sub	sp, #56	; 0x38
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80085fe:	2300      	movs	r3, #0
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	623b      	str	r3, [r7, #32]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	61fb      	str	r3, [r7, #28]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008644:	f001 fa30 	bl	8009aa8 <xTaskGetSchedulerState>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <xQueueSemaphoreTake+0x60>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <xQueueSemaphoreTake+0x64>
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <xQueueSemaphoreTake+0x66>
 8008658:	2300      	movs	r3, #0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	61bb      	str	r3, [r7, #24]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008674:	f002 f8e6 	bl	800a844 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	2b00      	cmp	r3, #0
 8008682:	d024      	beq.n	80086ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	1e5a      	subs	r2, r3, #1
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008694:	f001 fbb0 	bl	8009df8 <pvTaskIncrementMutexHeldCount>
 8008698:	4602      	mov	r2, r0
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00f      	beq.n	80086c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	3310      	adds	r3, #16
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f850 	bl	8009750 <xTaskRemoveFromEventList>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086b6:	4b54      	ldr	r3, [pc, #336]	; (8008808 <xQueueSemaphoreTake+0x214>)
 80086b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086c6:	f002 f8ed 	bl	800a8a4 <vPortExitCritical>
				return pdPASS;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e097      	b.n	80087fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d111      	bne.n	80086f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	617b      	str	r3, [r7, #20]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80086f0:	f002 f8d8 	bl	800a8a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086f4:	2300      	movs	r3, #0
 80086f6:	e082      	b.n	80087fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	4618      	mov	r0, r3
 8008704:	f001 f886 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800870c:	f002 f8ca 	bl	800a8a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008710:	f000 fdee 	bl	80092f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008714:	f002 f896 	bl	800a844 <vPortEnterCritical>
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800871e:	b25b      	sxtb	r3, r3
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d103      	bne.n	800872e <xQueueSemaphoreTake+0x13a>
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008734:	b25b      	sxtb	r3, r3
 8008736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873a:	d103      	bne.n	8008744 <xQueueSemaphoreTake+0x150>
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008744:	f002 f8ae 	bl	800a8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008748:	463a      	mov	r2, r7
 800874a:	f107 030c 	add.w	r3, r7, #12
 800874e:	4611      	mov	r1, r2
 8008750:	4618      	mov	r0, r3
 8008752:	f001 f875 	bl	8009840 <xTaskCheckForTimeOut>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d132      	bne.n	80087c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800875c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800875e:	f000 f9cf 	bl	8008b00 <prvIsQueueEmpty>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d026      	beq.n	80087b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008770:	f002 f868 	bl	800a844 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	4618      	mov	r0, r3
 800877a:	f001 f9b3 	bl	8009ae4 <xTaskPriorityInherit>
 800877e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008780:	f002 f890 	bl	800a8a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	3324      	adds	r3, #36	; 0x24
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	4611      	mov	r1, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f000 ff8f 	bl	80096b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008794:	f000 f962 	bl	8008a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008798:	f000 fdb8 	bl	800930c <xTaskResumeAll>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f47f af68 	bne.w	8008674 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80087a4:	4b18      	ldr	r3, [pc, #96]	; (8008808 <xQueueSemaphoreTake+0x214>)
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	e75e      	b.n	8008674 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80087b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087b8:	f000 f950 	bl	8008a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087bc:	f000 fda6 	bl	800930c <xTaskResumeAll>
 80087c0:	e758      	b.n	8008674 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80087c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087c4:	f000 f94a 	bl	8008a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087c8:	f000 fda0 	bl	800930c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087ce:	f000 f997 	bl	8008b00 <prvIsQueueEmpty>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f43f af4d 	beq.w	8008674 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00d      	beq.n	80087fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80087e0:	f002 f830 	bl	800a844 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80087e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e6:	f000 f891 	bl	800890c <prvGetDisinheritPriorityAfterTimeout>
 80087ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 fa72 	bl	8009cdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80087f8:	f002 f854 	bl	800a8a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3738      	adds	r7, #56	; 0x38
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	; 0x38
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	623b      	str	r3, [r7, #32]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <xQueueReceiveFromISR+0x3a>
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <xQueueReceiveFromISR+0x3e>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <xQueueReceiveFromISR+0x40>
 800884a:	2300      	movs	r3, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	61fb      	str	r3, [r7, #28]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008866:	f002 f8cf 	bl	800aa08 <vPortValidateInterruptPriority>
	__asm volatile
 800886a:	f3ef 8211 	mrs	r2, BASEPRI
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	61ba      	str	r2, [r7, #24]
 8008880:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008882:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02f      	beq.n	80088f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a0:	f000 f8b6 	bl	8008a10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d112      	bne.n	80088dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d016      	beq.n	80088ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	3310      	adds	r3, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 ff44 	bl	8009750 <xTaskRemoveFromEventList>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e007      	b.n	80088ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e0:	3301      	adds	r3, #1
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	b25a      	sxtb	r2, r3
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088ec:	2301      	movs	r3, #1
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
 80088f0:	e001      	b.n	80088f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f383 8811 	msr	BASEPRI, r3
}
 8008900:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008904:	4618      	mov	r0, r3
 8008906:	3738      	adds	r7, #56	; 0x38
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d006      	beq.n	800892a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f1c3 0307 	rsb	r3, r3, #7
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e001      	b.n	800892e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800892e:	68fb      	ldr	r3, [r7, #12]
	}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10d      	bne.n	8008976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d14d      	bne.n	80089fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f001 f932 	bl	8009bd0 <xTaskPriorityDisinherit>
 800896c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	609a      	str	r2, [r3, #8]
 8008974:	e043      	b.n	80089fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d119      	bne.n	80089b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6858      	ldr	r0, [r3, #4]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	461a      	mov	r2, r3
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	f006 f922 	bl	800ebd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d32b      	bcc.n	80089fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	e026      	b.n	80089fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	68d8      	ldr	r0, [r3, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b8:	461a      	mov	r2, r3
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	f006 f908 	bl	800ebd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c8:	425b      	negs	r3, r3
 80089ca:	441a      	add	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d207      	bcs.n	80089ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	425b      	negs	r3, r3
 80089e6:	441a      	add	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d105      	bne.n	80089fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a06:	697b      	ldr	r3, [r7, #20]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d018      	beq.n	8008a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	441a      	add	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d303      	bcc.n	8008a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68d9      	ldr	r1, [r3, #12]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6838      	ldr	r0, [r7, #0]
 8008a50:	f006 f8be 	bl	800ebd0 <memcpy>
	}
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a64:	f001 feee 	bl	800a844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a70:	e011      	b.n	8008a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d012      	beq.n	8008aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3324      	adds	r3, #36	; 0x24
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fe66 	bl	8009750 <xTaskRemoveFromEventList>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a8a:	f000 ff3b 	bl	8009904 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dce9      	bgt.n	8008a72 <prvUnlockQueue+0x16>
 8008a9e:	e000      	b.n	8008aa2 <prvUnlockQueue+0x46>
					break;
 8008aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	22ff      	movs	r2, #255	; 0xff
 8008aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008aaa:	f001 fefb 	bl	800a8a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008aae:	f001 fec9 	bl	800a844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aba:	e011      	b.n	8008ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d012      	beq.n	8008aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3310      	adds	r3, #16
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fe41 	bl	8009750 <xTaskRemoveFromEventList>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ad4:	f000 ff16 	bl	8009904 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dce9      	bgt.n	8008abc <prvUnlockQueue+0x60>
 8008ae8:	e000      	b.n	8008aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	22ff      	movs	r2, #255	; 0xff
 8008af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008af4:	f001 fed6 	bl	800a8a4 <vPortExitCritical>
}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b08:	f001 fe9c 	bl	800a844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e001      	b.n	8008b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b1e:	f001 fec1 	bl	800a8a4 <vPortExitCritical>

	return xReturn;
 8008b22:	68fb      	ldr	r3, [r7, #12]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b34:	f001 fe86 	bl	800a844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d102      	bne.n	8008b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	e001      	b.n	8008b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b4e:	f001 fea9 	bl	800a8a4 <vPortExitCritical>

	return xReturn;
 8008b52:	68fb      	ldr	r3, [r7, #12]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	e014      	b.n	8008b96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b6c:	4a0f      	ldr	r2, [pc, #60]	; (8008bac <vQueueAddToRegistry+0x50>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b78:	490c      	ldr	r1, [pc, #48]	; (8008bac <vQueueAddToRegistry+0x50>)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <vQueueAddToRegistry+0x50>)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b8e:	e006      	b.n	8008b9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b07      	cmp	r3, #7
 8008b9a:	d9e7      	bls.n	8008b6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b9c:	bf00      	nop
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000490 	.word	0x20000490

08008bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bc0:	f001 fe40 	bl	800a844 <vPortEnterCritical>
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bca:	b25b      	sxtb	r3, r3
 8008bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd0:	d103      	bne.n	8008bda <vQueueWaitForMessageRestricted+0x2a>
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008be0:	b25b      	sxtb	r3, r3
 8008be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be6:	d103      	bne.n	8008bf0 <vQueueWaitForMessageRestricted+0x40>
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bf0:	f001 fe58 	bl	800a8a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d106      	bne.n	8008c0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	3324      	adds	r3, #36	; 0x24
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fd77 	bl	80096f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c0a:	6978      	ldr	r0, [r7, #20]
 8008c0c:	f7ff ff26 	bl	8008a5c <prvUnlockQueue>
	}
 8008c10:	bf00      	nop
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08c      	sub	sp, #48	; 0x30
 8008c1c:	af04      	add	r7, sp, #16
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f001 ff2b 	bl	800aa88 <pvPortMalloc>
 8008c32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00e      	beq.n	8008c58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c3a:	2084      	movs	r0, #132	; 0x84
 8008c3c:	f001 ff24 	bl	800aa88 <pvPortMalloc>
 8008c40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8008c4e:	e005      	b.n	8008c5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c50:	6978      	ldr	r0, [r7, #20]
 8008c52:	f001 ffe5 	bl	800ac20 <vPortFree>
 8008c56:	e001      	b.n	8008c5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d013      	beq.n	8008c8a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c62:	88fa      	ldrh	r2, [r7, #6]
 8008c64:	2300      	movs	r3, #0
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	9302      	str	r3, [sp, #8]
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 f80e 	bl	8008c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c7e:	69f8      	ldr	r0, [r7, #28]
 8008c80:	f000 f892 	bl	8008da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c84:	2301      	movs	r3, #1
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	e002      	b.n	8008c90 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c90:	69bb      	ldr	r3, [r7, #24]
	}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b088      	sub	sp, #32
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
 8008ca6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	617b      	str	r3, [r7, #20]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01f      	beq.n	8008d28 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e012      	b.n	8008d14 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	7819      	ldrb	r1, [r3, #0]
 8008cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3334      	adds	r3, #52	; 0x34
 8008cfe:	460a      	mov	r2, r1
 8008d00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d006      	beq.n	8008d1c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	3301      	adds	r3, #1
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2b3f      	cmp	r3, #63	; 0x3f
 8008d18:	d9e9      	bls.n	8008cee <prvInitialiseNewTask+0x54>
 8008d1a:	e000      	b.n	8008d1e <prvInitialiseNewTask+0x84>
			{
				break;
 8008d1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8008d26:	e003      	b.n	8008d30 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	2b06      	cmp	r3, #6
 8008d34:	d901      	bls.n	8008d3a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d36:	2306      	movs	r3, #6
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d44:	675a      	str	r2, [r3, #116]	; 0x74
		pxNewTCB->uxMutexesHeld = 0;
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	2200      	movs	r2, #0
 8008d4a:	679a      	str	r2, [r3, #120]	; 0x78
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe ffc4 	bl	8007cde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	3318      	adds	r3, #24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe ffbf 	bl	8007cde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	f1c3 0207 	rsb	r2, r3, #7
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d74:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2200      	movs	r2, #0
 8008d7a:	67da      	str	r2, [r3, #124]	; 0x7c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	69b8      	ldr	r0, [r7, #24]
 8008d8a:	f001 fc1d 	bl	800a5c8 <pxPortInitialiseStack>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008da0:	bf00      	nop
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008db0:	f001 fd48 	bl	800a844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008db4:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <prvAddNewTaskToReadyList+0xb8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	4a29      	ldr	r2, [pc, #164]	; (8008e60 <prvAddNewTaskToReadyList+0xb8>)
 8008dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dbe:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <prvAddNewTaskToReadyList+0xbc>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dc6:	4a27      	ldr	r2, [pc, #156]	; (8008e64 <prvAddNewTaskToReadyList+0xbc>)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dcc:	4b24      	ldr	r3, [pc, #144]	; (8008e60 <prvAddNewTaskToReadyList+0xb8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d110      	bne.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008dd4:	f000 fdba 	bl	800994c <prvInitialiseTaskLists>
 8008dd8:	e00d      	b.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dda:	4b23      	ldr	r3, [pc, #140]	; (8008e68 <prvAddNewTaskToReadyList+0xc0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008de2:	4b20      	ldr	r3, [pc, #128]	; (8008e64 <prvAddNewTaskToReadyList+0xbc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d802      	bhi.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008df0:	4a1c      	ldr	r2, [pc, #112]	; (8008e64 <prvAddNewTaskToReadyList+0xbc>)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008df6:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <prvAddNewTaskToReadyList+0xc4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	4a1b      	ldr	r2, [pc, #108]	; (8008e6c <prvAddNewTaskToReadyList+0xc4>)
 8008dfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	2201      	movs	r2, #1
 8008e06:	409a      	lsls	r2, r3
 8008e08:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4a15      	ldr	r2, [pc, #84]	; (8008e74 <prvAddNewTaskToReadyList+0xcc>)
 8008e20:	441a      	add	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4619      	mov	r1, r3
 8008e28:	4610      	mov	r0, r2
 8008e2a:	f7fe ff65 	bl	8007cf8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e2e:	f001 fd39 	bl	800a8a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <prvAddNewTaskToReadyList+0xc0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <prvAddNewTaskToReadyList+0xbc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d207      	bcs.n	8008e58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e48:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <prvAddNewTaskToReadyList+0xd0>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200005d0 	.word	0x200005d0
 8008e64:	200004d0 	.word	0x200004d0
 8008e68:	200005dc 	.word	0x200005dc
 8008e6c:	200005ec 	.word	0x200005ec
 8008e70:	200005d8 	.word	0x200005d8
 8008e74:	200004d4 	.word	0x200004d4
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008e84:	f001 fcde 	bl	800a844 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <vTaskDelete+0x18>
 8008e8e:	4b39      	ldr	r3, [pc, #228]	; (8008f74 <vTaskDelete+0xf8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	e000      	b.n	8008e96 <vTaskDelete+0x1a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe ff88 	bl	8007db2 <uxListRemove>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d115      	bne.n	8008ed4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	4932      	ldr	r1, [pc, #200]	; (8008f78 <vTaskDelete+0xfc>)
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10a      	bne.n	8008ed4 <vTaskDelete+0x58>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	43da      	mvns	r2, r3
 8008eca:	4b2c      	ldr	r3, [pc, #176]	; (8008f7c <vTaskDelete+0x100>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	4a2a      	ldr	r2, [pc, #168]	; (8008f7c <vTaskDelete+0x100>)
 8008ed2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3318      	adds	r3, #24
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe ff66 	bl	8007db2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008ee6:	4b26      	ldr	r3, [pc, #152]	; (8008f80 <vTaskDelete+0x104>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	4a24      	ldr	r2, [pc, #144]	; (8008f80 <vTaskDelete+0x104>)
 8008eee:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008ef0:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <vTaskDelete+0xf8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d10b      	bne.n	8008f12 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3304      	adds	r3, #4
 8008efe:	4619      	mov	r1, r3
 8008f00:	4820      	ldr	r0, [pc, #128]	; (8008f84 <vTaskDelete+0x108>)
 8008f02:	f7fe fef9 	bl	8007cf8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008f06:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <vTaskDelete+0x10c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <vTaskDelete+0x10c>)
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	e009      	b.n	8008f26 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008f12:	4b1e      	ldr	r3, [pc, #120]	; (8008f8c <vTaskDelete+0x110>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	4a1c      	ldr	r2, [pc, #112]	; (8008f8c <vTaskDelete+0x110>)
 8008f1a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 fd83 	bl	8009a28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008f22:	f000 fd91 	bl	8009a48 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008f26:	f001 fcbd 	bl	800a8a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008f2a:	4b19      	ldr	r3, [pc, #100]	; (8008f90 <vTaskDelete+0x114>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01b      	beq.n	8008f6a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008f32:	4b10      	ldr	r3, [pc, #64]	; (8008f74 <vTaskDelete+0xf8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d116      	bne.n	8008f6a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008f3c:	4b15      	ldr	r3, [pc, #84]	; (8008f94 <vTaskDelete+0x118>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <vTaskDelete+0xde>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	60bb      	str	r3, [r7, #8]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8008f5a:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <vTaskDelete+0x11c>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	200004d0 	.word	0x200004d0
 8008f78:	200004d4 	.word	0x200004d4
 8008f7c:	200005d8 	.word	0x200005d8
 8008f80:	200005ec 	.word	0x200005ec
 8008f84:	200005a4 	.word	0x200005a4
 8008f88:	200005b8 	.word	0x200005b8
 8008f8c:	200005d0 	.word	0x200005d0
 8008f90:	200005dc 	.word	0x200005dc
 8008f94:	200005f8 	.word	0x200005f8
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08a      	sub	sp, #40	; 0x28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	617b      	str	r3, [r7, #20]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <vTaskDelayUntil+0x46>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	613b      	str	r3, [r7, #16]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008fe2:	4b2a      	ldr	r3, [pc, #168]	; (800908c <vTaskDelayUntil+0xf0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <vTaskDelayUntil+0x64>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	60fb      	str	r3, [r7, #12]
}
 8008ffc:	bf00      	nop
 8008ffe:	e7fe      	b.n	8008ffe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009000:	f000 f976 	bl	80092f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009004:	4b22      	ldr	r3, [pc, #136]	; (8009090 <vTaskDelayUntil+0xf4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4413      	add	r3, r2
 8009012:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6a3a      	ldr	r2, [r7, #32]
 800901a:	429a      	cmp	r2, r3
 800901c:	d20b      	bcs.n	8009036 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	429a      	cmp	r2, r3
 8009026:	d211      	bcs.n	800904c <vTaskDelayUntil+0xb0>
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	429a      	cmp	r2, r3
 800902e:	d90d      	bls.n	800904c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
 8009034:	e00a      	b.n	800904c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	429a      	cmp	r2, r3
 800903e:	d303      	bcc.n	8009048 <vTaskDelayUntil+0xac>
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	429a      	cmp	r2, r3
 8009046:	d901      	bls.n	800904c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009048:	2301      	movs	r3, #1
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2100      	movs	r1, #0
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fedd 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009066:	f000 f951 	bl	800930c <xTaskResumeAll>
 800906a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d107      	bne.n	8009082 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009072:	4b08      	ldr	r3, [pc, #32]	; (8009094 <vTaskDelayUntil+0xf8>)
 8009074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009082:	bf00      	nop
 8009084:	3728      	adds	r7, #40	; 0x28
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200005f8 	.word	0x200005f8
 8009090:	200005d4 	.word	0x200005d4
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d017      	beq.n	80090da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090aa:	4b13      	ldr	r3, [pc, #76]	; (80090f8 <vTaskDelay+0x60>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <vTaskDelay+0x30>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	60bb      	str	r3, [r7, #8]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090c8:	f000 f912 	bl	80092f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fea6 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090d4:	f000 f91a 	bl	800930c <xTaskResumeAll>
 80090d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d107      	bne.n	80090f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <vTaskDelay+0x64>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200005f8 	.word	0x200005f8
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800910a:	2300      	movs	r3, #0
 800910c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b06      	cmp	r3, #6
 8009112:	d90a      	bls.n	800912a <vTaskPrioritySet+0x2a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	60fb      	str	r3, [r7, #12]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b06      	cmp	r3, #6
 800912e:	d901      	bls.n	8009134 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009130:	2306      	movs	r3, #6
 8009132:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8009134:	f001 fb86 	bl	800a844 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d102      	bne.n	8009144 <vTaskPrioritySet+0x44>
 800913e:	4b41      	ldr	r3, [pc, #260]	; (8009244 <vTaskPrioritySet+0x144>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	e000      	b.n	8009146 <vTaskPrioritySet+0x46>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d06f      	beq.n	8009236 <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	429a      	cmp	r2, r3
 800915c:	d90d      	bls.n	800917a <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800915e:	4b39      	ldr	r3, [pc, #228]	; (8009244 <vTaskPrioritySet+0x144>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	429a      	cmp	r2, r3
 8009166:	d00f      	beq.n	8009188 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8009168:	4b36      	ldr	r3, [pc, #216]	; (8009244 <vTaskPrioritySet+0x144>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d309      	bcc.n	8009188 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e006      	b.n	8009188 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800917a:	4b32      	ldr	r3, [pc, #200]	; (8009244 <vTaskPrioritySet+0x144>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	429a      	cmp	r2, r3
 8009182:	d101      	bne.n	8009188 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	429a      	cmp	r2, r3
 8009198:	d102      	bne.n	80091a0 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	675a      	str	r2, [r3, #116]	; 0x74
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	db04      	blt.n	80091b8 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f1c3 0207 	rsb	r2, r3, #7
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	6959      	ldr	r1, [r3, #20]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4a20      	ldr	r2, [pc, #128]	; (8009248 <vTaskPrioritySet+0x148>)
 80091c8:	4413      	add	r3, r2
 80091ca:	4299      	cmp	r1, r3
 80091cc:	d128      	bne.n	8009220 <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fded 	bl	8007db2 <uxListRemove>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80091de:	2201      	movs	r2, #1
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	43da      	mvns	r2, r3
 80091e8:	4b18      	ldr	r3, [pc, #96]	; (800924c <vTaskPrioritySet+0x14c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4013      	ands	r3, r2
 80091ee:	4a17      	ldr	r2, [pc, #92]	; (800924c <vTaskPrioritySet+0x14c>)
 80091f0:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	2201      	movs	r2, #1
 80091f8:	409a      	lsls	r2, r3
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <vTaskPrioritySet+0x14c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4313      	orrs	r3, r2
 8009200:	4a12      	ldr	r2, [pc, #72]	; (800924c <vTaskPrioritySet+0x14c>)
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a0d      	ldr	r2, [pc, #52]	; (8009248 <vTaskPrioritySet+0x148>)
 8009212:	441a      	add	r2, r3
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f7fe fd6c 	bl	8007cf8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8009226:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <vTaskPrioritySet+0x150>)
 8009228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8009236:	f001 fb35 	bl	800a8a4 <vPortExitCritical>
	}
 800923a:	bf00      	nop
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	200004d0 	.word	0x200004d0
 8009248:	200004d4 	.word	0x200004d4
 800924c:	200005d8 	.word	0x200005d8
 8009250:	e000ed04 	.word	0xe000ed04

08009254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800925a:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <vTaskStartScheduler+0x84>)
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	2300      	movs	r3, #0
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	2300      	movs	r3, #0
 8009264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009268:	491c      	ldr	r1, [pc, #112]	; (80092dc <vTaskStartScheduler+0x88>)
 800926a:	481d      	ldr	r0, [pc, #116]	; (80092e0 <vTaskStartScheduler+0x8c>)
 800926c:	f7ff fcd4 	bl	8008c18 <xTaskCreate>
 8009270:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d102      	bne.n	800927e <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 8009278:	f000 fe38 	bl	8009eec <xTimerCreateTimerTask>
 800927c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d116      	bne.n	80092b2 <vTaskStartScheduler+0x5e>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	60bb      	str	r3, [r7, #8]
}
 8009296:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009298:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <vTaskStartScheduler+0x90>)
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <vTaskStartScheduler+0x94>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092a6:	4b11      	ldr	r3, [pc, #68]	; (80092ec <vTaskStartScheduler+0x98>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092ac:	f001 fa18 	bl	800a6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092b0:	e00e      	b.n	80092d0 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d10a      	bne.n	80092d0 <vTaskStartScheduler+0x7c>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	607b      	str	r3, [r7, #4]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <vTaskStartScheduler+0x7a>
}
 80092d0:	bf00      	nop
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	200005f4 	.word	0x200005f4
 80092dc:	08011ae0 	.word	0x08011ae0
 80092e0:	0800991d 	.word	0x0800991d
 80092e4:	200005f0 	.word	0x200005f0
 80092e8:	200005dc 	.word	0x200005dc
 80092ec:	200005d4 	.word	0x200005d4

080092f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092f4:	4b04      	ldr	r3, [pc, #16]	; (8009308 <vTaskSuspendAll+0x18>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	4a03      	ldr	r2, [pc, #12]	; (8009308 <vTaskSuspendAll+0x18>)
 80092fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092fe:	bf00      	nop
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	200005f8 	.word	0x200005f8

0800930c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009316:	2300      	movs	r3, #0
 8009318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800931a:	4b41      	ldr	r3, [pc, #260]	; (8009420 <xTaskResumeAll+0x114>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10a      	bne.n	8009338 <xTaskResumeAll+0x2c>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	603b      	str	r3, [r7, #0]
}
 8009334:	bf00      	nop
 8009336:	e7fe      	b.n	8009336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009338:	f001 fa84 	bl	800a844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800933c:	4b38      	ldr	r3, [pc, #224]	; (8009420 <xTaskResumeAll+0x114>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3b01      	subs	r3, #1
 8009342:	4a37      	ldr	r2, [pc, #220]	; (8009420 <xTaskResumeAll+0x114>)
 8009344:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009346:	4b36      	ldr	r3, [pc, #216]	; (8009420 <xTaskResumeAll+0x114>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d161      	bne.n	8009412 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800934e:	4b35      	ldr	r3, [pc, #212]	; (8009424 <xTaskResumeAll+0x118>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d05d      	beq.n	8009412 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009356:	e02e      	b.n	80093b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	4b33      	ldr	r3, [pc, #204]	; (8009428 <xTaskResumeAll+0x11c>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3318      	adds	r3, #24
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fd24 	bl	8007db2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3304      	adds	r3, #4
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe fd1f 	bl	8007db2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	2201      	movs	r2, #1
 800937a:	409a      	lsls	r2, r3
 800937c:	4b2b      	ldr	r3, [pc, #172]	; (800942c <xTaskResumeAll+0x120>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4313      	orrs	r3, r2
 8009382:	4a2a      	ldr	r2, [pc, #168]	; (800942c <xTaskResumeAll+0x120>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a27      	ldr	r2, [pc, #156]	; (8009430 <xTaskResumeAll+0x124>)
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe fcab 	bl	8007cf8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a6:	4b23      	ldr	r3, [pc, #140]	; (8009434 <xTaskResumeAll+0x128>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d302      	bcc.n	80093b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80093b0:	4b21      	ldr	r3, [pc, #132]	; (8009438 <xTaskResumeAll+0x12c>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093b6:	4b1c      	ldr	r3, [pc, #112]	; (8009428 <xTaskResumeAll+0x11c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1cc      	bne.n	8009358 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093c4:	f000 fb40 	bl	8009a48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093c8:	4b1c      	ldr	r3, [pc, #112]	; (800943c <xTaskResumeAll+0x130>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d010      	beq.n	80093f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093d4:	f000 f858 	bl	8009488 <xTaskIncrementTick>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80093de:	4b16      	ldr	r3, [pc, #88]	; (8009438 <xTaskResumeAll+0x12c>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f1      	bne.n	80093d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80093f0:	4b12      	ldr	r3, [pc, #72]	; (800943c <xTaskResumeAll+0x130>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <xTaskResumeAll+0x12c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d009      	beq.n	8009412 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093fe:	2301      	movs	r3, #1
 8009400:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <xTaskResumeAll+0x134>)
 8009404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009412:	f001 fa47 	bl	800a8a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009416:	68bb      	ldr	r3, [r7, #8]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200005f8 	.word	0x200005f8
 8009424:	200005d0 	.word	0x200005d0
 8009428:	20000590 	.word	0x20000590
 800942c:	200005d8 	.word	0x200005d8
 8009430:	200004d4 	.word	0x200004d4
 8009434:	200004d0 	.word	0x200004d0
 8009438:	200005e4 	.word	0x200005e4
 800943c:	200005e0 	.word	0x200005e0
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <xTaskGetTickCount+0x1c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009450:	687b      	ldr	r3, [r7, #4]
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	200005d4 	.word	0x200005d4

08009464 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800946a:	f001 facd 	bl	800aa08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800946e:	2300      	movs	r3, #0
 8009470:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009472:	4b04      	ldr	r3, [pc, #16]	; (8009484 <xTaskGetTickCountFromISR+0x20>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009478:	683b      	ldr	r3, [r7, #0]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	200005d4 	.word	0x200005d4

08009488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009492:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <xTaskIncrementTick+0x144>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f040 808e 	bne.w	80095b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800949c:	4b4c      	ldr	r3, [pc, #304]	; (80095d0 <xTaskIncrementTick+0x148>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094a4:	4a4a      	ldr	r2, [pc, #296]	; (80095d0 <xTaskIncrementTick+0x148>)
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d120      	bne.n	80094f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094b0:	4b48      	ldr	r3, [pc, #288]	; (80095d4 <xTaskIncrementTick+0x14c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	603b      	str	r3, [r7, #0]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <xTaskIncrementTick+0x46>
 80094d0:	4b40      	ldr	r3, [pc, #256]	; (80095d4 <xTaskIncrementTick+0x14c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	4b40      	ldr	r3, [pc, #256]	; (80095d8 <xTaskIncrementTick+0x150>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a3e      	ldr	r2, [pc, #248]	; (80095d4 <xTaskIncrementTick+0x14c>)
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	4a3e      	ldr	r2, [pc, #248]	; (80095d8 <xTaskIncrementTick+0x150>)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	4b3d      	ldr	r3, [pc, #244]	; (80095dc <xTaskIncrementTick+0x154>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	4a3c      	ldr	r2, [pc, #240]	; (80095dc <xTaskIncrementTick+0x154>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	f000 faab 	bl	8009a48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094f2:	4b3b      	ldr	r3, [pc, #236]	; (80095e0 <xTaskIncrementTick+0x158>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d348      	bcc.n	800958e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094fc:	4b35      	ldr	r3, [pc, #212]	; (80095d4 <xTaskIncrementTick+0x14c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	4b36      	ldr	r3, [pc, #216]	; (80095e0 <xTaskIncrementTick+0x158>)
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	601a      	str	r2, [r3, #0]
					break;
 800950e:	e03e      	b.n	800958e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009510:	4b30      	ldr	r3, [pc, #192]	; (80095d4 <xTaskIncrementTick+0x14c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	429a      	cmp	r2, r3
 8009526:	d203      	bcs.n	8009530 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009528:	4a2d      	ldr	r2, [pc, #180]	; (80095e0 <xTaskIncrementTick+0x158>)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800952e:	e02e      	b.n	800958e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fc3c 	bl	8007db2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d004      	beq.n	800954c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	3318      	adds	r3, #24
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fc33 	bl	8007db2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	2201      	movs	r2, #1
 8009552:	409a      	lsls	r2, r3
 8009554:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <xTaskIncrementTick+0x15c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4313      	orrs	r3, r2
 800955a:	4a22      	ldr	r2, [pc, #136]	; (80095e4 <xTaskIncrementTick+0x15c>)
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4a1f      	ldr	r2, [pc, #124]	; (80095e8 <xTaskIncrementTick+0x160>)
 800956c:	441a      	add	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	3304      	adds	r3, #4
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f7fe fbbf 	bl	8007cf8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <xTaskIncrementTick+0x164>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	429a      	cmp	r2, r3
 8009586:	d3b9      	bcc.n	80094fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009588:	2301      	movs	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800958c:	e7b6      	b.n	80094fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800958e:	4b17      	ldr	r3, [pc, #92]	; (80095ec <xTaskIncrementTick+0x164>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009594:	4914      	ldr	r1, [pc, #80]	; (80095e8 <xTaskIncrementTick+0x160>)
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	440b      	add	r3, r1
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d901      	bls.n	80095aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80095a6:	2301      	movs	r3, #1
 80095a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095aa:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <xTaskIncrementTick+0x168>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e004      	b.n	80095c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095b8:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <xTaskIncrementTick+0x16c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	4a0d      	ldr	r2, [pc, #52]	; (80095f4 <xTaskIncrementTick+0x16c>)
 80095c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095c2:	697b      	ldr	r3, [r7, #20]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	200005f8 	.word	0x200005f8
 80095d0:	200005d4 	.word	0x200005d4
 80095d4:	20000588 	.word	0x20000588
 80095d8:	2000058c 	.word	0x2000058c
 80095dc:	200005e8 	.word	0x200005e8
 80095e0:	200005f0 	.word	0x200005f0
 80095e4:	200005d8 	.word	0x200005d8
 80095e8:	200004d4 	.word	0x200004d4
 80095ec:	200004d0 	.word	0x200004d0
 80095f0:	200005e4 	.word	0x200005e4
 80095f4:	200005e0 	.word	0x200005e0

080095f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095fe:	4b27      	ldr	r3, [pc, #156]	; (800969c <vTaskSwitchContext+0xa4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009606:	4b26      	ldr	r3, [pc, #152]	; (80096a0 <vTaskSwitchContext+0xa8>)
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800960c:	e03f      	b.n	800968e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800960e:	4b24      	ldr	r3, [pc, #144]	; (80096a0 <vTaskSwitchContext+0xa8>)
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009614:	4b23      	ldr	r3, [pc, #140]	; (80096a4 <vTaskSwitchContext+0xac>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	fab3 f383 	clz	r3, r3
 8009620:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	f1c3 031f 	rsb	r3, r3, #31
 8009628:	617b      	str	r3, [r7, #20]
 800962a:	491f      	ldr	r1, [pc, #124]	; (80096a8 <vTaskSwitchContext+0xb0>)
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <vTaskSwitchContext+0x5c>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	607b      	str	r3, [r7, #4]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <vTaskSwitchContext+0x5a>
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4a12      	ldr	r2, [pc, #72]	; (80096a8 <vTaskSwitchContext+0xb0>)
 8009660:	4413      	add	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3308      	adds	r3, #8
 8009676:	429a      	cmp	r2, r3
 8009678:	d104      	bne.n	8009684 <vTaskSwitchContext+0x8c>
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	605a      	str	r2, [r3, #4]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	4a08      	ldr	r2, [pc, #32]	; (80096ac <vTaskSwitchContext+0xb4>)
 800968c:	6013      	str	r3, [r2, #0]
}
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	200005f8 	.word	0x200005f8
 80096a0:	200005e4 	.word	0x200005e4
 80096a4:	200005d8 	.word	0x200005d8
 80096a8:	200004d4 	.word	0x200004d4
 80096ac:	200004d0 	.word	0x200004d0

080096b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <vTaskPlaceOnEventList+0x44>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3318      	adds	r3, #24
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fe fb2e 	bl	8007d40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096e4:	2101      	movs	r1, #1
 80096e6:	6838      	ldr	r0, [r7, #0]
 80096e8:	f000 fb9a 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	200004d0 	.word	0x200004d0

080096f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	617b      	str	r3, [r7, #20]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009720:	4b0a      	ldr	r3, [pc, #40]	; (800974c <vTaskPlaceOnEventListRestricted+0x54>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3318      	adds	r3, #24
 8009726:	4619      	mov	r1, r3
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7fe fae5 	bl	8007cf8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	68b8      	ldr	r0, [r7, #8]
 800973e:	f000 fb6f 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
	}
 8009742:	bf00      	nop
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	200004d0 	.word	0x200004d0

08009750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	60fb      	str	r3, [r7, #12]
}
 8009778:	bf00      	nop
 800977a:	e7fe      	b.n	800977a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3318      	adds	r3, #24
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fb16 	bl	8007db2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009786:	4b1d      	ldr	r3, [pc, #116]	; (80097fc <xTaskRemoveFromEventList+0xac>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11c      	bne.n	80097c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	3304      	adds	r3, #4
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fb0d 	bl	8007db2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	2201      	movs	r2, #1
 800979e:	409a      	lsls	r2, r3
 80097a0:	4b17      	ldr	r3, [pc, #92]	; (8009800 <xTaskRemoveFromEventList+0xb0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	4a16      	ldr	r2, [pc, #88]	; (8009800 <xTaskRemoveFromEventList+0xb0>)
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4a13      	ldr	r2, [pc, #76]	; (8009804 <xTaskRemoveFromEventList+0xb4>)
 80097b8:	441a      	add	r2, r3
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3304      	adds	r3, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fe fa99 	bl	8007cf8 <vListInsertEnd>
 80097c6:	e005      	b.n	80097d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	3318      	adds	r3, #24
 80097cc:	4619      	mov	r1, r3
 80097ce:	480e      	ldr	r0, [pc, #56]	; (8009808 <xTaskRemoveFromEventList+0xb8>)
 80097d0:	f7fe fa92 	bl	8007cf8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	4b0c      	ldr	r3, [pc, #48]	; (800980c <xTaskRemoveFromEventList+0xbc>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	429a      	cmp	r2, r3
 80097e0:	d905      	bls.n	80097ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097e2:	2301      	movs	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <xTaskRemoveFromEventList+0xc0>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	e001      	b.n	80097f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097f2:	697b      	ldr	r3, [r7, #20]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200005f8 	.word	0x200005f8
 8009800:	200005d8 	.word	0x200005d8
 8009804:	200004d4 	.word	0x200004d4
 8009808:	20000590 	.word	0x20000590
 800980c:	200004d0 	.word	0x200004d0
 8009810:	200005e4 	.word	0x200005e4

08009814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <vTaskInternalSetTimeOutState+0x24>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <vTaskInternalSetTimeOutState+0x28>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	200005e8 	.word	0x200005e8
 800983c:	200005d4 	.word	0x200005d4

08009840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	613b      	str	r3, [r7, #16]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60fb      	str	r3, [r7, #12]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009882:	f000 ffdf 	bl	800a844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009886:	4b1d      	ldr	r3, [pc, #116]	; (80098fc <xTaskCheckForTimeOut+0xbc>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	d102      	bne.n	80098a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	e023      	b.n	80098ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <xTaskCheckForTimeOut+0xc0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d007      	beq.n	80098c2 <xTaskCheckForTimeOut+0x82>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098bc:	2301      	movs	r3, #1
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e015      	b.n	80098ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d20b      	bcs.n	80098e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	1ad2      	subs	r2, r2, r3
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ff9b 	bl	8009814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	e004      	b.n	80098ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098ea:	2301      	movs	r3, #1
 80098ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098ee:	f000 ffd9 	bl	800a8a4 <vPortExitCritical>

	return xReturn;
 80098f2:	69fb      	ldr	r3, [r7, #28]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200005d4 	.word	0x200005d4
 8009900:	200005e8 	.word	0x200005e8

08009904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009904:	b480      	push	{r7}
 8009906:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009908:	4b03      	ldr	r3, [pc, #12]	; (8009918 <vTaskMissedYield+0x14>)
 800990a:	2201      	movs	r2, #1
 800990c:	601a      	str	r2, [r3, #0]
}
 800990e:	bf00      	nop
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	200005e4 	.word	0x200005e4

0800991c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009924:	f000 f852 	bl	80099cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <prvIdleTask+0x28>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d9f9      	bls.n	8009924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <prvIdleTask+0x2c>)
 8009932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009940:	e7f0      	b.n	8009924 <prvIdleTask+0x8>
 8009942:	bf00      	nop
 8009944:	200004d4 	.word	0x200004d4
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	e00c      	b.n	8009972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a12      	ldr	r2, [pc, #72]	; (80099ac <prvInitialiseTaskLists+0x60>)
 8009964:	4413      	add	r3, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe f999 	bl	8007c9e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3301      	adds	r3, #1
 8009970:	607b      	str	r3, [r7, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b06      	cmp	r3, #6
 8009976:	d9ef      	bls.n	8009958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009978:	480d      	ldr	r0, [pc, #52]	; (80099b0 <prvInitialiseTaskLists+0x64>)
 800997a:	f7fe f990 	bl	8007c9e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800997e:	480d      	ldr	r0, [pc, #52]	; (80099b4 <prvInitialiseTaskLists+0x68>)
 8009980:	f7fe f98d 	bl	8007c9e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009984:	480c      	ldr	r0, [pc, #48]	; (80099b8 <prvInitialiseTaskLists+0x6c>)
 8009986:	f7fe f98a 	bl	8007c9e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800998a:	480c      	ldr	r0, [pc, #48]	; (80099bc <prvInitialiseTaskLists+0x70>)
 800998c:	f7fe f987 	bl	8007c9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009990:	480b      	ldr	r0, [pc, #44]	; (80099c0 <prvInitialiseTaskLists+0x74>)
 8009992:	f7fe f984 	bl	8007c9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009996:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <prvInitialiseTaskLists+0x78>)
 8009998:	4a05      	ldr	r2, [pc, #20]	; (80099b0 <prvInitialiseTaskLists+0x64>)
 800999a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <prvInitialiseTaskLists+0x7c>)
 800999e:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <prvInitialiseTaskLists+0x68>)
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200004d4 	.word	0x200004d4
 80099b0:	20000560 	.word	0x20000560
 80099b4:	20000574 	.word	0x20000574
 80099b8:	20000590 	.word	0x20000590
 80099bc:	200005a4 	.word	0x200005a4
 80099c0:	200005bc 	.word	0x200005bc
 80099c4:	20000588 	.word	0x20000588
 80099c8:	2000058c 	.word	0x2000058c

080099cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099d2:	e019      	b.n	8009a08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099d4:	f000 ff36 	bl	800a844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d8:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <prvCheckTasksWaitingTermination+0x50>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe f9e4 	bl	8007db2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099ea:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <prvCheckTasksWaitingTermination+0x54>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	4a0b      	ldr	r2, [pc, #44]	; (8009a20 <prvCheckTasksWaitingTermination+0x54>)
 80099f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099f4:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <prvCheckTasksWaitingTermination+0x58>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4a0a      	ldr	r2, [pc, #40]	; (8009a24 <prvCheckTasksWaitingTermination+0x58>)
 80099fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099fe:	f000 ff51 	bl	800a8a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f810 	bl	8009a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a08:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <prvCheckTasksWaitingTermination+0x58>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e1      	bne.n	80099d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200005a4 	.word	0x200005a4
 8009a20:	200005d0 	.word	0x200005d0
 8009a24:	200005b8 	.word	0x200005b8

08009a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 f8f3 	bl	800ac20 <vPortFree>
			vPortFree( pxTCB );
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 f8f0 	bl	800ac20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a4e:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <prvResetNextTaskUnblockTime+0x38>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <prvResetNextTaskUnblockTime+0x3c>)
 8009a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a60:	e008      	b.n	8009a74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a62:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <prvResetNextTaskUnblockTime+0x38>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4a04      	ldr	r2, [pc, #16]	; (8009a84 <prvResetNextTaskUnblockTime+0x3c>)
 8009a72:	6013      	str	r3, [r2, #0]
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	20000588 	.word	0x20000588
 8009a84:	200005f0 	.word	0x200005f0

08009a88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <xTaskGetCurrentTaskHandle+0x1c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009a94:	687b      	ldr	r3, [r7, #4]
	}
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	200004d0 	.word	0x200004d0

08009aa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <xTaskGetSchedulerState+0x34>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d102      	bne.n	8009abc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	607b      	str	r3, [r7, #4]
 8009aba:	e008      	b.n	8009ace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009abc:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <xTaskGetSchedulerState+0x38>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	607b      	str	r3, [r7, #4]
 8009ac8:	e001      	b.n	8009ace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009aca:	2300      	movs	r3, #0
 8009acc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ace:	687b      	ldr	r3, [r7, #4]
	}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	200005dc 	.word	0x200005dc
 8009ae0:	200005f8 	.word	0x200005f8

08009ae4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d05e      	beq.n	8009bb8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afe:	4b31      	ldr	r3, [pc, #196]	; (8009bc4 <xTaskPriorityInherit+0xe0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d24e      	bcs.n	8009ba6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	db06      	blt.n	8009b1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b10:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <xTaskPriorityInherit+0xe0>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	f1c3 0207 	rsb	r2, r3, #7
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	6959      	ldr	r1, [r3, #20]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4a26      	ldr	r2, [pc, #152]	; (8009bc8 <xTaskPriorityInherit+0xe4>)
 8009b30:	4413      	add	r3, r2
 8009b32:	4299      	cmp	r1, r3
 8009b34:	d12f      	bne.n	8009b96 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe f939 	bl	8007db2 <uxListRemove>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	43da      	mvns	r2, r3
 8009b52:	4b1e      	ldr	r3, [pc, #120]	; (8009bcc <xTaskPriorityInherit+0xe8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4013      	ands	r3, r2
 8009b58:	4a1c      	ldr	r2, [pc, #112]	; (8009bcc <xTaskPriorityInherit+0xe8>)
 8009b5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b5c:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <xTaskPriorityInherit+0xe0>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	409a      	lsls	r2, r3
 8009b6e:	4b17      	ldr	r3, [pc, #92]	; (8009bcc <xTaskPriorityInherit+0xe8>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	4a15      	ldr	r2, [pc, #84]	; (8009bcc <xTaskPriorityInherit+0xe8>)
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a10      	ldr	r2, [pc, #64]	; (8009bc8 <xTaskPriorityInherit+0xe4>)
 8009b86:	441a      	add	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe f8b2 	bl	8007cf8 <vListInsertEnd>
 8009b94:	e004      	b.n	8009ba0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <xTaskPriorityInherit+0xe0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e008      	b.n	8009bb8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <xTaskPriorityInherit+0xe0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d201      	bcs.n	8009bb8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
	}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	200004d0 	.word	0x200004d0
 8009bc8:	200004d4 	.word	0x200004d4
 8009bcc:	200005d8 	.word	0x200005d8

08009bd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d06e      	beq.n	8009cc4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009be6:	4b3a      	ldr	r3, [pc, #232]	; (8009cd0 <xTaskPriorityDisinherit+0x100>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d00a      	beq.n	8009c06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	60fb      	str	r3, [r7, #12]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60bb      	str	r3, [r7, #8]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c28:	1e5a      	subs	r2, r3, #1
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	679a      	str	r2, [r3, #120]	; 0x78

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d044      	beq.n	8009cc4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d140      	bne.n	8009cc4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe f8b3 	bl	8007db2 <uxListRemove>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d115      	bne.n	8009c7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c56:	491f      	ldr	r1, [pc, #124]	; (8009cd4 <xTaskPriorityDisinherit+0x104>)
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10a      	bne.n	8009c7e <xTaskPriorityDisinherit+0xae>
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	43da      	mvns	r2, r3
 8009c74:	4b18      	ldr	r3, [pc, #96]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4013      	ands	r3, r2
 8009c7a:	4a17      	ldr	r2, [pc, #92]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009c7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8a:	f1c3 0207 	rsb	r2, r3, #7
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	2201      	movs	r2, #1
 8009c98:	409a      	lsls	r2, r3
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	4a0d      	ldr	r2, [pc, #52]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4a08      	ldr	r2, [pc, #32]	; (8009cd4 <xTaskPriorityDisinherit+0x104>)
 8009cb2:	441a      	add	r2, r3
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fe f81c 	bl	8007cf8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cc4:	697b      	ldr	r3, [r7, #20]
	}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200004d0 	.word	0x200004d0
 8009cd4:	200004d4 	.word	0x200004d4
 8009cd8:	200005d8 	.word	0x200005d8

08009cdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cea:	2301      	movs	r3, #1
 8009cec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d077      	beq.n	8009de4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60fb      	str	r3, [r7, #12]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d902      	bls.n	8009d22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e002      	b.n	8009d28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	69fa      	ldr	r2, [r7, #28]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d058      	beq.n	8009de4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d153      	bne.n	8009de4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d3c:	4b2b      	ldr	r3, [pc, #172]	; (8009dec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d10a      	bne.n	8009d5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60bb      	str	r3, [r7, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	69fa      	ldr	r2, [r7, #28]
 8009d66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	db04      	blt.n	8009d7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	f1c3 0207 	rsb	r2, r3, #7
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	6959      	ldr	r1, [r3, #20]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4a19      	ldr	r2, [pc, #100]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009d8a:	4413      	add	r3, r2
 8009d8c:	4299      	cmp	r1, r3
 8009d8e:	d129      	bne.n	8009de4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe f80c 	bl	8007db2 <uxListRemove>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	2201      	movs	r2, #1
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	43da      	mvns	r2, r3
 8009dac:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4013      	ands	r3, r2
 8009db2:	4a10      	ldr	r2, [pc, #64]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009db4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	2201      	movs	r2, #1
 8009dbc:	409a      	lsls	r2, r3
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	4a0b      	ldr	r2, [pc, #44]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009dd6:	441a      	add	r2, r3
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f7fd ff8a 	bl	8007cf8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009de4:	bf00      	nop
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200004d0 	.word	0x200004d0
 8009df0:	200004d4 	.word	0x200004d4
 8009df4:	200005d8 	.word	0x200005d8

08009df8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009dfc:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d004      	beq.n	8009e0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	679a      	str	r2, [r3, #120]	; 0x78
		}

		return pxCurrentTCB;
 8009e0e:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e10:	681b      	ldr	r3, [r3, #0]
	}
 8009e12:	4618      	mov	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	200004d0 	.word	0x200004d0

08009e20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e2a:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e30:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fd ffbb 	bl	8007db2 <uxListRemove>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e42:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	2201      	movs	r2, #1
 8009e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4e:	43da      	mvns	r2, r3
 8009e50:	4b21      	ldr	r3, [pc, #132]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4013      	ands	r3, r2
 8009e56:	4a20      	ldr	r2, [pc, #128]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d10a      	bne.n	8009e78 <prvAddCurrentTaskToDelayedList+0x58>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e68:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4619      	mov	r1, r3
 8009e70:	481a      	ldr	r0, [pc, #104]	; (8009edc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e72:	f7fd ff41 	bl	8007cf8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e76:	e026      	b.n	8009ec6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e80:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d209      	bcs.n	8009ea4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e90:	4b13      	ldr	r3, [pc, #76]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7fd ff4f 	bl	8007d40 <vListInsert>
}
 8009ea2:	e010      	b.n	8009ec6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ea4:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fd ff45 	bl	8007d40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d202      	bcs.n	8009ec6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ec0:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6013      	str	r3, [r2, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	200005d4 	.word	0x200005d4
 8009ed4:	200004d0 	.word	0x200004d0
 8009ed8:	200005d8 	.word	0x200005d8
 8009edc:	200005bc 	.word	0x200005bc
 8009ee0:	2000058c 	.word	0x2000058c
 8009ee4:	20000588 	.word	0x20000588
 8009ee8:	200005f0 	.word	0x200005f0

08009eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ef6:	f000 fb31 	bl	800a55c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009efa:	4b11      	ldr	r3, [pc, #68]	; (8009f40 <xTimerCreateTimerTask+0x54>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00b      	beq.n	8009f1a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009f02:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <xTimerCreateTimerTask+0x58>)
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	2302      	movs	r3, #2
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f10:	490d      	ldr	r1, [pc, #52]	; (8009f48 <xTimerCreateTimerTask+0x5c>)
 8009f12:	480e      	ldr	r0, [pc, #56]	; (8009f4c <xTimerCreateTimerTask+0x60>)
 8009f14:	f7fe fe80 	bl	8008c18 <xTaskCreate>
 8009f18:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	603b      	str	r3, [r7, #0]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8009f36:	687b      	ldr	r3, [r7, #4]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	2000062c 	.word	0x2000062c
 8009f44:	20000630 	.word	0x20000630
 8009f48:	08011ae8 	.word	0x08011ae8
 8009f4c:	0800a13d 	.word	0x0800a13d

08009f50 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009f5e:	2028      	movs	r0, #40	; 0x28
 8009f60:	f000 fd92 	bl	800aa88 <pvPortMalloc>
 8009f64:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00d      	beq.n	8009f88 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f805 	bl	8009f92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009f88:	697b      	ldr	r3, [r7, #20]
	}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10a      	bne.n	8009fbc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	617b      	str	r3, [r7, #20]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d01e      	beq.n	800a000 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009fc2:	f000 facb 	bl	800a55c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	6a3a      	ldr	r2, [r7, #32]
 8009fdc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fd fe7b 	bl	8007cde <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ff4:	f043 0304 	orr.w	r3, r3, #4
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a000:	bf00      	nop
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	; 0x28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a016:	2300      	movs	r3, #0
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	623b      	str	r3, [r7, #32]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a036:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <xTimerGenericCommand+0x98>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d02a      	beq.n	800a094 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b05      	cmp	r3, #5
 800a04e:	dc18      	bgt.n	800a082 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a050:	f7ff fd2a 	bl	8009aa8 <xTaskGetSchedulerState>
 800a054:	4603      	mov	r3, r0
 800a056:	2b02      	cmp	r3, #2
 800a058:	d109      	bne.n	800a06e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <xTimerGenericCommand+0x98>)
 800a05c:	6818      	ldr	r0, [r3, #0]
 800a05e:	f107 0114 	add.w	r1, r7, #20
 800a062:	2300      	movs	r3, #0
 800a064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a066:	f7fd ffbf 	bl	8007fe8 <xQueueGenericSend>
 800a06a:	6278      	str	r0, [r7, #36]	; 0x24
 800a06c:	e012      	b.n	800a094 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a06e:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <xTimerGenericCommand+0x98>)
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	f107 0114 	add.w	r1, r7, #20
 800a076:	2300      	movs	r3, #0
 800a078:	2200      	movs	r2, #0
 800a07a:	f7fd ffb5 	bl	8007fe8 <xQueueGenericSend>
 800a07e:	6278      	str	r0, [r7, #36]	; 0x24
 800a080:	e008      	b.n	800a094 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a082:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <xTimerGenericCommand+0x98>)
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	f107 0114 	add.w	r1, r7, #20
 800a08a:	2300      	movs	r3, #0
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	f7fe f8a9 	bl	80081e4 <xQueueGenericSendFromISR>
 800a092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a096:	4618      	mov	r0, r3
 800a098:	3728      	adds	r7, #40	; 0x28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	2000062c 	.word	0x2000062c

0800a0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ae:	4b22      	ldr	r3, [pc, #136]	; (800a138 <prvProcessExpiredTimer+0x94>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fd fe78 	bl	8007db2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d022      	beq.n	800a116 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	699a      	ldr	r2, [r3, #24]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	18d1      	adds	r1, r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	6978      	ldr	r0, [r7, #20]
 800a0de:	f000 f8d1 	bl	800a284 <prvInsertTimerInActiveList>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01f      	beq.n	800a128 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f7ff ff88 	bl	800a008 <xTimerGenericCommand>
 800a0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d113      	bne.n	800a128 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60fb      	str	r3, [r7, #12]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a11c:	f023 0301 	bic.w	r3, r3, #1
 800a120:	b2da      	uxtb	r2, r3
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	6978      	ldr	r0, [r7, #20]
 800a12e:	4798      	blx	r3
}
 800a130:	bf00      	nop
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20000624 	.word	0x20000624

0800a13c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a144:	f107 0308 	add.w	r3, r7, #8
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 f857 	bl	800a1fc <prvGetNextExpireTime>
 800a14e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4619      	mov	r1, r3
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f803 	bl	800a160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a15a:	f000 f8d5 	bl	800a308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a15e:	e7f1      	b.n	800a144 <prvTimerTask+0x8>

0800a160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a16a:	f7ff f8c1 	bl	80092f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a16e:	f107 0308 	add.w	r3, r7, #8
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f866 	bl	800a244 <prvSampleTimeNow>
 800a178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d130      	bne.n	800a1e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <prvProcessTimerOrBlockTask+0x3c>
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d806      	bhi.n	800a19c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a18e:	f7ff f8bd 	bl	800930c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff ff85 	bl	800a0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a19a:	e024      	b.n	800a1e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1a2:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <prvProcessTimerOrBlockTask+0x90>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <prvProcessTimerOrBlockTask+0x50>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <prvProcessTimerOrBlockTask+0x52>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <prvProcessTimerOrBlockTask+0x94>)
 800a1b6:	6818      	ldr	r0, [r3, #0]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f7fe fcf5 	bl	8008bb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1c6:	f7ff f8a1 	bl	800930c <xTaskResumeAll>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <prvProcessTimerOrBlockTask+0x98>)
 800a1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
}
 800a1e0:	e001      	b.n	800a1e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1e2:	f7ff f893 	bl	800930c <xTaskResumeAll>
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000628 	.word	0x20000628
 800a1f4:	2000062c 	.word	0x2000062c
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a204:	4b0e      	ldr	r3, [pc, #56]	; (800a240 <prvGetNextExpireTime+0x44>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <prvGetNextExpireTime+0x16>
 800a20e:	2201      	movs	r2, #1
 800a210:	e000      	b.n	800a214 <prvGetNextExpireTime+0x18>
 800a212:	2200      	movs	r2, #0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d105      	bne.n	800a22c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <prvGetNextExpireTime+0x44>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e001      	b.n	800a230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a230:	68fb      	ldr	r3, [r7, #12]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	20000624 	.word	0x20000624

0800a244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a24c:	f7ff f8fa 	bl	8009444 <xTaskGetTickCount>
 800a250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a252:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <prvSampleTimeNow+0x3c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d205      	bcs.n	800a268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a25c:	f000 f91a 	bl	800a494 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e002      	b.n	800a26e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a26e:	4a04      	ldr	r2, [pc, #16]	; (800a280 <prvSampleTimeNow+0x3c>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a274:	68fb      	ldr	r3, [r7, #12]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000634 	.word	0x20000634

0800a284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d812      	bhi.n	800a2d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d302      	bcc.n	800a2be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	e01b      	b.n	800a2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2be:	4b10      	ldr	r3, [pc, #64]	; (800a300 <prvInsertTimerInActiveList+0x7c>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fd fd39 	bl	8007d40 <vListInsert>
 800a2ce:	e012      	b.n	800a2f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d206      	bcs.n	800a2e6 <prvInsertTimerInActiveList+0x62>
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d302      	bcc.n	800a2e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	e007      	b.n	800a2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2e6:	4b07      	ldr	r3, [pc, #28]	; (800a304 <prvInsertTimerInActiveList+0x80>)
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f7fd fd25 	bl	8007d40 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2f6:	697b      	ldr	r3, [r7, #20]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20000628 	.word	0x20000628
 800a304:	20000624 	.word	0x20000624

0800a308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08c      	sub	sp, #48	; 0x30
 800a30c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a30e:	e0ae      	b.n	800a46e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	f2c0 80aa 	blt.w	800a46c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd fd42 	bl	8007db2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a32e:	1d3b      	adds	r3, r7, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff ff87 	bl	800a244 <prvSampleTimeNow>
 800a336:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b09      	cmp	r3, #9
 800a33c:	f200 8097 	bhi.w	800a46e <prvProcessReceivedCommands+0x166>
 800a340:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <prvProcessReceivedCommands+0x40>)
 800a342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a346:	bf00      	nop
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a371 	.word	0x0800a371
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a3e5 	.word	0x0800a3e5
 800a358:	0800a3f9 	.word	0x0800a3f9
 800a35c:	0800a443 	.word	0x0800a443
 800a360:	0800a371 	.word	0x0800a371
 800a364:	0800a371 	.word	0x0800a371
 800a368:	0800a3e5 	.word	0x0800a3e5
 800a36c:	0800a3f9 	.word	0x0800a3f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	18d1      	adds	r1, r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a3a      	ldr	r2, [r7, #32]
 800a38e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a390:	f7ff ff78 	bl	800a284 <prvInsertTimerInActiveList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d069      	beq.n	800a46e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d05e      	beq.n	800a46e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	441a      	add	r2, r3
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3c2:	f7ff fe21 	bl	800a008 <xTimerGenericCommand>
 800a3c6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d14f      	bne.n	800a46e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	61bb      	str	r3, [r7, #24]
}
 800a3e0:	bf00      	nop
 800a3e2:	e7fe      	b.n	800a3e2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3ea:	f023 0301 	bic.w	r3, r3, #1
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a3f6:	e03a      	b.n	800a46e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	b2da      	uxtb	r2, r3
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	617b      	str	r3, [r7, #20]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	18d1      	adds	r1, r2, r3
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a43c:	f7ff ff22 	bl	800a284 <prvInsertTimerInActiveList>
					break;
 800a440:	e015      	b.n	800a46e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d103      	bne.n	800a458 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a452:	f000 fbe5 	bl	800ac20 <vPortFree>
 800a456:	e00a      	b.n	800a46e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a45e:	f023 0301 	bic.w	r3, r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a46a:	e000      	b.n	800a46e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a46c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a46e:	4b08      	ldr	r3, [pc, #32]	; (800a490 <prvProcessReceivedCommands+0x188>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f107 0108 	add.w	r1, r7, #8
 800a476:	2200      	movs	r2, #0
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd ffdb 	bl	8008434 <xQueueReceive>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	f47f af45 	bne.w	800a310 <prvProcessReceivedCommands+0x8>
	}
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	3728      	adds	r7, #40	; 0x28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	2000062c 	.word	0x2000062c

0800a494 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a49a:	e048      	b.n	800a52e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a49c:	4b2d      	ldr	r3, [pc, #180]	; (800a554 <prvSwitchTimerLists+0xc0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a6:	4b2b      	ldr	r3, [pc, #172]	; (800a554 <prvSwitchTimerLists+0xc0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fd fc7c 	bl	8007db2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d02e      	beq.n	800a52e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d90e      	bls.n	800a500 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4ee:	4b19      	ldr	r3, [pc, #100]	; (800a554 <prvSwitchTimerLists+0xc0>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fd fc21 	bl	8007d40 <vListInsert>
 800a4fe:	e016      	b.n	800a52e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a500:	2300      	movs	r3, #0
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	2100      	movs	r1, #0
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7ff fd7c 	bl	800a008 <xTimerGenericCommand>
 800a510:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	603b      	str	r3, [r7, #0]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <prvSwitchTimerLists+0xc0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1b1      	bne.n	800a49c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a538:	4b06      	ldr	r3, [pc, #24]	; (800a554 <prvSwitchTimerLists+0xc0>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a53e:	4b06      	ldr	r3, [pc, #24]	; (800a558 <prvSwitchTimerLists+0xc4>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a04      	ldr	r2, [pc, #16]	; (800a554 <prvSwitchTimerLists+0xc0>)
 800a544:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a546:	4a04      	ldr	r2, [pc, #16]	; (800a558 <prvSwitchTimerLists+0xc4>)
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	6013      	str	r3, [r2, #0]
}
 800a54c:	bf00      	nop
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000624 	.word	0x20000624
 800a558:	20000628 	.word	0x20000628

0800a55c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a560:	f000 f970 	bl	800a844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a564:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <prvCheckForValidListAndQueue+0x54>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d11d      	bne.n	800a5a8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a56c:	4811      	ldr	r0, [pc, #68]	; (800a5b4 <prvCheckForValidListAndQueue+0x58>)
 800a56e:	f7fd fb96 	bl	8007c9e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a572:	4811      	ldr	r0, [pc, #68]	; (800a5b8 <prvCheckForValidListAndQueue+0x5c>)
 800a574:	f7fd fb93 	bl	8007c9e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a578:	4b10      	ldr	r3, [pc, #64]	; (800a5bc <prvCheckForValidListAndQueue+0x60>)
 800a57a:	4a0e      	ldr	r2, [pc, #56]	; (800a5b4 <prvCheckForValidListAndQueue+0x58>)
 800a57c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <prvCheckForValidListAndQueue+0x64>)
 800a580:	4a0d      	ldr	r2, [pc, #52]	; (800a5b8 <prvCheckForValidListAndQueue+0x5c>)
 800a582:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a584:	2200      	movs	r2, #0
 800a586:	210c      	movs	r1, #12
 800a588:	200a      	movs	r0, #10
 800a58a:	f7fd fca5 	bl	8007ed8 <xQueueGenericCreate>
 800a58e:	4603      	mov	r3, r0
 800a590:	4a07      	ldr	r2, [pc, #28]	; (800a5b0 <prvCheckForValidListAndQueue+0x54>)
 800a592:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a594:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <prvCheckForValidListAndQueue+0x54>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a59c:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <prvCheckForValidListAndQueue+0x54>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4908      	ldr	r1, [pc, #32]	; (800a5c4 <prvCheckForValidListAndQueue+0x68>)
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fada 	bl	8008b5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5a8:	f000 f97c 	bl	800a8a4 <vPortExitCritical>
}
 800a5ac:	bf00      	nop
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	2000062c 	.word	0x2000062c
 800a5b4:	200005fc 	.word	0x200005fc
 800a5b8:	20000610 	.word	0x20000610
 800a5bc:	20000624 	.word	0x20000624
 800a5c0:	20000628 	.word	0x20000628
 800a5c4:	08011af0 	.word	0x08011af0

0800a5c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3b04      	subs	r3, #4
 800a5d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3b04      	subs	r3, #4
 800a5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f023 0201 	bic.w	r2, r3, #1
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5f8:	4a0c      	ldr	r2, [pc, #48]	; (800a62c <pxPortInitialiseStack+0x64>)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3b14      	subs	r3, #20
 800a602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b04      	subs	r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f06f 0202 	mvn.w	r2, #2
 800a616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3b20      	subs	r3, #32
 800a61c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a61e:	68fb      	ldr	r3, [r7, #12]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	0800a631 	.word	0x0800a631

0800a630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a63a:	4b12      	ldr	r3, [pc, #72]	; (800a684 <prvTaskExitError+0x54>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	d00a      	beq.n	800a65a <prvTaskExitError+0x2a>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	60fb      	str	r3, [r7, #12]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <prvTaskExitError+0x28>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	60bb      	str	r3, [r7, #8]
}
 800a66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a66e:	bf00      	nop
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0fc      	beq.n	800a670 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a676:	bf00      	nop
 800a678:	bf00      	nop
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	2000000c 	.word	0x2000000c
	...

0800a690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <pxCurrentTCBConst2>)
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	f380 8809 	msr	PSP, r0
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8811 	msr	BASEPRI, r0
 800a6aa:	4770      	bx	lr
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst2>:
 800a6b0:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6b8:	4808      	ldr	r0, [pc, #32]	; (800a6dc <prvPortStartFirstTask+0x24>)
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f380 8808 	msr	MSP, r0
 800a6c2:	f04f 0000 	mov.w	r0, #0
 800a6c6:	f380 8814 	msr	CONTROL, r0
 800a6ca:	b662      	cpsie	i
 800a6cc:	b661      	cpsie	f
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	df00      	svc	0
 800a6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6da:	bf00      	nop
 800a6dc:	e000ed08 	.word	0xe000ed08

0800a6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6e6:	4b4e      	ldr	r3, [pc, #312]	; (800a820 <xPortStartScheduler+0x140>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a4e      	ldr	r2, [pc, #312]	; (800a824 <xPortStartScheduler+0x144>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d10a      	bne.n	800a706 <xPortStartScheduler+0x26>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	61bb      	str	r3, [r7, #24]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a706:	4b46      	ldr	r3, [pc, #280]	; (800a820 <xPortStartScheduler+0x140>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a47      	ldr	r2, [pc, #284]	; (800a828 <xPortStartScheduler+0x148>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d10a      	bne.n	800a726 <xPortStartScheduler+0x46>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	617b      	str	r3, [r7, #20]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a726:	4b41      	ldr	r3, [pc, #260]	; (800a82c <xPortStartScheduler+0x14c>)
 800a728:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	22ff      	movs	r2, #255	; 0xff
 800a736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	4b39      	ldr	r3, [pc, #228]	; (800a830 <xPortStartScheduler+0x150>)
 800a74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a74e:	4b39      	ldr	r3, [pc, #228]	; (800a834 <xPortStartScheduler+0x154>)
 800a750:	2207      	movs	r2, #7
 800a752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a754:	e009      	b.n	800a76a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a756:	4b37      	ldr	r3, [pc, #220]	; (800a834 <xPortStartScheduler+0x154>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	4a35      	ldr	r2, [pc, #212]	; (800a834 <xPortStartScheduler+0x154>)
 800a75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a760:	79fb      	ldrb	r3, [r7, #7]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b80      	cmp	r3, #128	; 0x80
 800a774:	d0ef      	beq.n	800a756 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800a776:	4b2f      	ldr	r3, [pc, #188]	; (800a834 <xPortStartScheduler+0x154>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1c3 0307 	rsb	r3, r3, #7
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d00a      	beq.n	800a798 <xPortStartScheduler+0xb8>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	613b      	str	r3, [r7, #16]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a798:	4b26      	ldr	r3, [pc, #152]	; (800a834 <xPortStartScheduler+0x154>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f1c3 0307 	rsb	r3, r3, #7
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d00a      	beq.n	800a7ba <xPortStartScheduler+0xda>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	60fb      	str	r3, [r7, #12]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7ba:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <xPortStartScheduler+0x154>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	021b      	lsls	r3, r3, #8
 800a7c0:	4a1c      	ldr	r2, [pc, #112]	; (800a834 <xPortStartScheduler+0x154>)
 800a7c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	; (800a834 <xPortStartScheduler+0x154>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7cc:	4a19      	ldr	r2, [pc, #100]	; (800a834 <xPortStartScheduler+0x154>)
 800a7ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7d8:	4b17      	ldr	r3, [pc, #92]	; (800a838 <xPortStartScheduler+0x158>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a16      	ldr	r2, [pc, #88]	; (800a838 <xPortStartScheduler+0x158>)
 800a7de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7e4:	4b14      	ldr	r3, [pc, #80]	; (800a838 <xPortStartScheduler+0x158>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a13      	ldr	r2, [pc, #76]	; (800a838 <xPortStartScheduler+0x158>)
 800a7ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7f0:	f000 f8dc 	bl	800a9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7f4:	4b11      	ldr	r3, [pc, #68]	; (800a83c <xPortStartScheduler+0x15c>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7fa:	f000 f8fb 	bl	800a9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7fe:	4b10      	ldr	r3, [pc, #64]	; (800a840 <xPortStartScheduler+0x160>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a0f      	ldr	r2, [pc, #60]	; (800a840 <xPortStartScheduler+0x160>)
 800a804:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a808:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a80a:	f7ff ff55 	bl	800a6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a80e:	f7fe fef3 	bl	80095f8 <vTaskSwitchContext>
	prvTaskExitError();
 800a812:	f7ff ff0d 	bl	800a630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	e000ed00 	.word	0xe000ed00
 800a824:	410fc271 	.word	0x410fc271
 800a828:	410fc270 	.word	0x410fc270
 800a82c:	e000e400 	.word	0xe000e400
 800a830:	20000638 	.word	0x20000638
 800a834:	2000063c 	.word	0x2000063c
 800a838:	e000ed20 	.word	0xe000ed20
 800a83c:	2000000c 	.word	0x2000000c
 800a840:	e000ef34 	.word	0xe000ef34

0800a844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	607b      	str	r3, [r7, #4]
}
 800a85c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a85e:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <vPortEnterCritical+0x58>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3301      	adds	r3, #1
 800a864:	4a0d      	ldr	r2, [pc, #52]	; (800a89c <vPortEnterCritical+0x58>)
 800a866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a868:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <vPortEnterCritical+0x58>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d10f      	bne.n	800a890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a870:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <vPortEnterCritical+0x5c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00a      	beq.n	800a890 <vPortEnterCritical+0x4c>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	603b      	str	r3, [r7, #0]
}
 800a88c:	bf00      	nop
 800a88e:	e7fe      	b.n	800a88e <vPortEnterCritical+0x4a>
	}
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	2000000c 	.word	0x2000000c
 800a8a0:	e000ed04 	.word	0xe000ed04

0800a8a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8aa:	4b12      	ldr	r3, [pc, #72]	; (800a8f4 <vPortExitCritical+0x50>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10a      	bne.n	800a8c8 <vPortExitCritical+0x24>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	607b      	str	r3, [r7, #4]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <vPortExitCritical+0x50>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <vPortExitCritical+0x50>)
 800a8d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8d2:	4b08      	ldr	r3, [pc, #32]	; (800a8f4 <vPortExitCritical+0x50>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d105      	bne.n	800a8e6 <vPortExitCritical+0x42>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	f383 8811 	msr	BASEPRI, r3
}
 800a8e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	2000000c 	.word	0x2000000c
	...

0800a900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a900:	f3ef 8009 	mrs	r0, PSP
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4b15      	ldr	r3, [pc, #84]	; (800a960 <pxCurrentTCBConst>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	f01e 0f10 	tst.w	lr, #16
 800a910:	bf08      	it	eq
 800a912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	6010      	str	r0, [r2, #0]
 800a91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a920:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a924:	f380 8811 	msr	BASEPRI, r0
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f7fe fe62 	bl	80095f8 <vTaskSwitchContext>
 800a934:	f04f 0000 	mov.w	r0, #0
 800a938:	f380 8811 	msr	BASEPRI, r0
 800a93c:	bc09      	pop	{r0, r3}
 800a93e:	6819      	ldr	r1, [r3, #0]
 800a940:	6808      	ldr	r0, [r1, #0]
 800a942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a946:	f01e 0f10 	tst.w	lr, #16
 800a94a:	bf08      	it	eq
 800a94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a950:	f380 8809 	msr	PSP, r0
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	f3af 8000 	nop.w

0800a960 <pxCurrentTCBConst>:
 800a960:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop

0800a968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	607b      	str	r3, [r7, #4]
}
 800a980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a982:	f7fe fd81 	bl	8009488 <xTaskIncrementTick>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a98c:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <SysTick_Handler+0x40>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	2300      	movs	r3, #0
 800a996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	f383 8811 	msr	BASEPRI, r3
}
 800a99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9a0:	bf00      	nop
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <vPortSetupTimerInterrupt+0x34>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <vPortSetupTimerInterrupt+0x38>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <vPortSetupTimerInterrupt+0x3c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0a      	ldr	r2, [pc, #40]	; (800a9ec <vPortSetupTimerInterrupt+0x40>)
 800a9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c6:	099b      	lsrs	r3, r3, #6
 800a9c8:	4a09      	ldr	r2, [pc, #36]	; (800a9f0 <vPortSetupTimerInterrupt+0x44>)
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9ce:	4b04      	ldr	r3, [pc, #16]	; (800a9e0 <vPortSetupTimerInterrupt+0x34>)
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	601a      	str	r2, [r3, #0]
}
 800a9d4:	bf00      	nop
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	e000e010 	.word	0xe000e010
 800a9e4:	e000e018 	.word	0xe000e018
 800a9e8:	20000000 	.word	0x20000000
 800a9ec:	10624dd3 	.word	0x10624dd3
 800a9f0:	e000e014 	.word	0xe000e014

0800a9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa04 <vPortEnableVFP+0x10>
 800a9f8:	6801      	ldr	r1, [r0, #0]
 800a9fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9fe:	6001      	str	r1, [r0, #0]
 800aa00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa02:	bf00      	nop
 800aa04:	e000ed88 	.word	0xe000ed88

0800aa08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa0e:	f3ef 8305 	mrs	r3, IPSR
 800aa12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b0f      	cmp	r3, #15
 800aa18:	d914      	bls.n	800aa44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa1a:	4a17      	ldr	r2, [pc, #92]	; (800aa78 <vPortValidateInterruptPriority+0x70>)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa24:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <vPortValidateInterruptPriority+0x74>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	7afa      	ldrb	r2, [r7, #11]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d20a      	bcs.n	800aa44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa44:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <vPortValidateInterruptPriority+0x78>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <vPortValidateInterruptPriority+0x7c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d90a      	bls.n	800aa6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	603b      	str	r3, [r7, #0]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <vPortValidateInterruptPriority+0x60>
	}
 800aa6a:	bf00      	nop
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	e000e3f0 	.word	0xe000e3f0
 800aa7c:	20000638 	.word	0x20000638
 800aa80:	e000ed0c 	.word	0xe000ed0c
 800aa84:	2000063c 	.word	0x2000063c

0800aa88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08a      	sub	sp, #40	; 0x28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa94:	f7fe fc2c 	bl	80092f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa98:	4b5b      	ldr	r3, [pc, #364]	; (800ac08 <pvPortMalloc+0x180>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aaa0:	f000 f920 	bl	800ace4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aaa4:	4b59      	ldr	r3, [pc, #356]	; (800ac0c <pvPortMalloc+0x184>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 8093 	bne.w	800abd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01d      	beq.n	800aaf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aab8:	2208      	movs	r2, #8
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f003 0307 	and.w	r3, r3, #7
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d014      	beq.n	800aaf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f023 0307 	bic.w	r3, r3, #7
 800aad0:	3308      	adds	r3, #8
 800aad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00a      	beq.n	800aaf4 <pvPortMalloc+0x6c>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	617b      	str	r3, [r7, #20]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d06e      	beq.n	800abd8 <pvPortMalloc+0x150>
 800aafa:	4b45      	ldr	r3, [pc, #276]	; (800ac10 <pvPortMalloc+0x188>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d869      	bhi.n	800abd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab04:	4b43      	ldr	r3, [pc, #268]	; (800ac14 <pvPortMalloc+0x18c>)
 800ab06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab08:	4b42      	ldr	r3, [pc, #264]	; (800ac14 <pvPortMalloc+0x18c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab0e:	e004      	b.n	800ab1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d903      	bls.n	800ab2c <pvPortMalloc+0xa4>
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f1      	bne.n	800ab10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab2c:	4b36      	ldr	r3, [pc, #216]	; (800ac08 <pvPortMalloc+0x180>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d050      	beq.n	800abd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	4413      	add	r3, r2
 800ab3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	2308      	movs	r3, #8
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d91f      	bls.n	800ab98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <pvPortMalloc+0xf8>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	613b      	str	r3, [r7, #16]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	1ad2      	subs	r2, r2, r3
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab92:	69b8      	ldr	r0, [r7, #24]
 800ab94:	f000 f908 	bl	800ada8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab98:	4b1d      	ldr	r3, [pc, #116]	; (800ac10 <pvPortMalloc+0x188>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	4a1b      	ldr	r2, [pc, #108]	; (800ac10 <pvPortMalloc+0x188>)
 800aba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aba6:	4b1a      	ldr	r3, [pc, #104]	; (800ac10 <pvPortMalloc+0x188>)
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <pvPortMalloc+0x190>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d203      	bcs.n	800abba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abb2:	4b17      	ldr	r3, [pc, #92]	; (800ac10 <pvPortMalloc+0x188>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a18      	ldr	r2, [pc, #96]	; (800ac18 <pvPortMalloc+0x190>)
 800abb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <pvPortMalloc+0x184>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	431a      	orrs	r2, r3
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <pvPortMalloc+0x194>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3301      	adds	r3, #1
 800abd4:	4a11      	ldr	r2, [pc, #68]	; (800ac1c <pvPortMalloc+0x194>)
 800abd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abd8:	f7fe fb98 	bl	800930c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f003 0307 	and.w	r3, r3, #7
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <pvPortMalloc+0x174>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60fb      	str	r3, [r7, #12]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <pvPortMalloc+0x172>
	return pvReturn;
 800abfc:	69fb      	ldr	r3, [r7, #28]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3728      	adds	r7, #40	; 0x28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20010648 	.word	0x20010648
 800ac0c:	2001065c 	.word	0x2001065c
 800ac10:	2001064c 	.word	0x2001064c
 800ac14:	20010640 	.word	0x20010640
 800ac18:	20010650 	.word	0x20010650
 800ac1c:	20010654 	.word	0x20010654

0800ac20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d04d      	beq.n	800acce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac32:	2308      	movs	r3, #8
 800ac34:	425b      	negs	r3, r3
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4413      	add	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	4b24      	ldr	r3, [pc, #144]	; (800acd8 <vPortFree+0xb8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <vPortFree+0x44>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	60fb      	str	r3, [r7, #12]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00a      	beq.n	800ac82 <vPortFree+0x62>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60bb      	str	r3, [r7, #8]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <vPortFree+0xb8>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01e      	beq.n	800acce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d11a      	bne.n	800acce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <vPortFree+0xb8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	43db      	mvns	r3, r3
 800aca2:	401a      	ands	r2, r3
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aca8:	f7fe fb22 	bl	80092f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <vPortFree+0xbc>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4413      	add	r3, r2
 800acb6:	4a09      	ldr	r2, [pc, #36]	; (800acdc <vPortFree+0xbc>)
 800acb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acba:	6938      	ldr	r0, [r7, #16]
 800acbc:	f000 f874 	bl	800ada8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800acc0:	4b07      	ldr	r3, [pc, #28]	; (800ace0 <vPortFree+0xc0>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3301      	adds	r3, #1
 800acc6:	4a06      	ldr	r2, [pc, #24]	; (800ace0 <vPortFree+0xc0>)
 800acc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800acca:	f7fe fb1f 	bl	800930c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acce:	bf00      	nop
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	2001065c 	.word	0x2001065c
 800acdc:	2001064c 	.word	0x2001064c
 800ace0:	20010658 	.word	0x20010658

0800ace4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800acee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acf0:	4b27      	ldr	r3, [pc, #156]	; (800ad90 <prvHeapInit+0xac>)
 800acf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00c      	beq.n	800ad18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3307      	adds	r3, #7
 800ad02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0307 	bic.w	r3, r3, #7
 800ad0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	4a1f      	ldr	r2, [pc, #124]	; (800ad90 <prvHeapInit+0xac>)
 800ad14:	4413      	add	r3, r2
 800ad16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad1c:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <prvHeapInit+0xb0>)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad22:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <prvHeapInit+0xb0>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad30:	2208      	movs	r2, #8
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	1a9b      	subs	r3, r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f023 0307 	bic.w	r3, r3, #7
 800ad3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <prvHeapInit+0xb4>)
 800ad44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <prvHeapInit+0xb4>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad4e:	4b12      	ldr	r3, [pc, #72]	; (800ad98 <prvHeapInit+0xb4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	1ad2      	subs	r2, r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad64:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <prvHeapInit+0xb4>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <prvHeapInit+0xb8>)
 800ad72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	4a09      	ldr	r2, [pc, #36]	; (800ada0 <prvHeapInit+0xbc>)
 800ad7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad7c:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <prvHeapInit+0xc0>)
 800ad7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad82:	601a      	str	r2, [r3, #0]
}
 800ad84:	bf00      	nop
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	20000640 	.word	0x20000640
 800ad94:	20010640 	.word	0x20010640
 800ad98:	20010648 	.word	0x20010648
 800ad9c:	20010650 	.word	0x20010650
 800ada0:	2001064c 	.word	0x2001064c
 800ada4:	2001065c 	.word	0x2001065c

0800ada8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adb0:	4b28      	ldr	r3, [pc, #160]	; (800ae54 <prvInsertBlockIntoFreeList+0xac>)
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e002      	b.n	800adbc <prvInsertBlockIntoFreeList+0x14>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d8f7      	bhi.n	800adb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	4413      	add	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	429a      	cmp	r2, r3
 800add6:	d108      	bne.n	800adea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	441a      	add	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	441a      	add	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d118      	bne.n	800ae30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <prvInsertBlockIntoFreeList+0xb0>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d00d      	beq.n	800ae26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	441a      	add	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	e008      	b.n	800ae38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <prvInsertBlockIntoFreeList+0xb0>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e003      	b.n	800ae38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d002      	beq.n	800ae46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae46:	bf00      	nop
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20010640 	.word	0x20010640
 800ae58:	20010648 	.word	0x20010648

0800ae5c <t_motor_homing>:
#	define LOG(str, ...)
#	define LOG_E(str, ...)
#endif	//if DEBUG_MOTOR_HOMING==1

void t_motor_homing(void const *argument)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor_homing */
	LOG("t_homing created!\r\n");
 800ae64:	f7fc fa77 	bl	8007356 <osKernelSysTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <t_motor_homing+0x74>)
 800ae6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ae70:	0b5b      	lsrs	r3, r3, #13
 800ae72:	f242 7110 	movw	r1, #10000	; 0x2710
 800ae76:	fb01 f303 	mul.w	r3, r1, r3
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	2215      	movs	r2, #21
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4814      	ldr	r0, [pc, #80]	; (800aed4 <t_motor_homing+0x78>)
 800ae82:	f004 fb25 	bl	800f4d0 <iprintf>
	int32_t target_pos_pan = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	617b      	str	r3, [r7, #20]
	int32_t target_pos_tilt = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	613b      	str	r3, [r7, #16]

	osDelay(100);
 800ae8e:	2064      	movs	r0, #100	; 0x64
 800ae90:	f7fc fab4 	bl	80073fc <osDelay>
	/* Infinite loop */
	uint32_t timestamp = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]
	for ( ;; ) {
		osDelayUntil(&timestamp, 10);
 800ae98:	f107 030c 	add.w	r3, r7, #12
 800ae9c:	210a      	movs	r1, #10
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fc fee7 	bl	8007c72 <osDelayUntil>
		hal_motor_get_motor_state(&motor.pan_state, &motor.tilt_state);
 800aea4:	490c      	ldr	r1, [pc, #48]	; (800aed8 <t_motor_homing+0x7c>)
 800aea6:	480d      	ldr	r0, [pc, #52]	; (800aedc <t_motor_homing+0x80>)
 800aea8:	f002 f8f2 	bl	800d090 <hal_motor_get_motor_state>
		mtr_set_power(&motor);
 800aeac:	480c      	ldr	r0, [pc, #48]	; (800aee0 <t_motor_homing+0x84>)
 800aeae:	f000 fe87 	bl	800bbc0 <mtr_set_power>
		hal_motor_set_position(target_pos_pan, target_pos_tilt);
 800aeb2:	6939      	ldr	r1, [r7, #16]
 800aeb4:	6978      	ldr	r0, [r7, #20]
 800aeb6:	f002 f835 	bl	800cf24 <hal_motor_set_position>

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_Ext_id, 0);
 800aeba:	2000      	movs	r0, #0
 800aebc:	f7f6 f916 	bl	80010ec <opt_get_queue>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2200      	movs	r2, #0
 800aec4:	2108      	movs	r1, #8
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fc fcea 	bl	80078a0 <osMessagePut>
		osDelayUntil(&timestamp, 10);
 800aecc:	e7e4      	b.n	800ae98 <t_motor_homing+0x3c>
 800aece:	bf00      	nop
 800aed0:	d1b71759 	.word	0xd1b71759
 800aed4:	08011af8 	.word	0x08011af8
 800aed8:	200106a4 	.word	0x200106a4
 800aedc:	20010690 	.word	0x20010690
 800aee0:	20010660 	.word	0x20010660

0800aee4 <t_motor_manual>:
#	define LOG(str, ...)
#	define LOG_E(str, ...)
#endif	//if DEBUG_MOTOR_MANUAL==1

void t_motor_manual(void const *argument)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor_manual */
	uint32_t _mtr_send_timer = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	60fb      	str	r3, [r7, #12]

	LOG("t_manual created\r\n");
 800aef0:	f7fc fa31 	bl	8007356 <osKernelSysTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	4b37      	ldr	r3, [pc, #220]	; (800afd4 <t_motor_manual+0xf0>)
 800aef8:	fba3 1302 	umull	r1, r3, r3, r2
 800aefc:	0b5b      	lsrs	r3, r3, #13
 800aefe:	f242 7110 	movw	r1, #10000	; 0x2710
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	221c      	movs	r2, #28
 800af0a:	4619      	mov	r1, r3
 800af0c:	4832      	ldr	r0, [pc, #200]	; (800afd8 <t_motor_manual+0xf4>)
 800af0e:	f004 fadf 	bl	800f4d0 <iprintf>

	uint32_t _debug_send_timer = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
	uint32_t _stack_highwater_timer = 0;
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

	/* Infinite loop */
	for ( ;; ) {
		uint8_t _dbg_send_mtr_cmd_counter = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	74fb      	strb	r3, [r7, #19]
		vTaskDelayUntil(&_mtr_send_timer, 25);
 800af1a:	f107 030c 	add.w	r3, r7, #12
 800af1e:	2119      	movs	r1, #25
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe f83b 	bl	8008f9c <vTaskDelayUntil>

		hal_motor_get_motor_state(&motor.pan_state, &motor.tilt_state);
 800af26:	492d      	ldr	r1, [pc, #180]	; (800afdc <t_motor_manual+0xf8>)
 800af28:	482d      	ldr	r0, [pc, #180]	; (800afe0 <t_motor_manual+0xfc>)
 800af2a:	f002 f8b1 	bl	800d090 <hal_motor_get_motor_state>
		mtr_set_power(&motor);
 800af2e:	482d      	ldr	r0, [pc, #180]	; (800afe4 <t_motor_manual+0x100>)
 800af30:	f000 fe46 	bl	800bbc0 <mtr_set_power>

		if (motor.mode_state.moveMode == TASK_MOTOR_HOMING_id) {
 800af34:	4b2b      	ldr	r3, [pc, #172]	; (800afe4 <t_motor_manual+0x100>)
 800af36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af3a:	f003 030f 	and.w	r3, r3, #15
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b06      	cmp	r3, #6
 800af42:	d10c      	bne.n	800af5e <t_motor_manual+0x7a>
			if (homing_state == 1)
 800af44:	4b28      	ldr	r3, [pc, #160]	; (800afe8 <t_motor_manual+0x104>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d139      	bne.n	800afc0 <t_motor_manual+0xdc>
				hal_motor_set_position(motor.pan_command.pos_hom_in_c, motor.tilt_command.pos_hom_in_c);
 800af4c:	4b25      	ldr	r3, [pc, #148]	; (800afe4 <t_motor_manual+0x100>)
 800af4e:	695b      	ldr	r3, [r3, #20]
 800af50:	4a24      	ldr	r2, [pc, #144]	; (800afe4 <t_motor_manual+0x100>)
 800af52:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f001 ffe4 	bl	800cf24 <hal_motor_set_position>
 800af5c:	e030      	b.n	800afc0 <t_motor_manual+0xdc>
		}
		else {
			_dbg_send_mtr_cmd_counter += hal_motor_set_speed(motor.pan_command.spd_man_in_c,
 800af5e:	4b21      	ldr	r3, [pc, #132]	; (800afe4 <t_motor_manual+0x100>)
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	4a20      	ldr	r2, [pc, #128]	; (800afe4 <t_motor_manual+0x100>)
 800af64:	69d2      	ldr	r2, [r2, #28]
 800af66:	4611      	mov	r1, r2
 800af68:	4618      	mov	r0, r3
 800af6a:	f002 f821 	bl	800cfb0 <hal_motor_set_speed>
 800af6e:	4603      	mov	r3, r0
 800af70:	461a      	mov	r2, r3
 800af72:	7cfb      	ldrb	r3, [r7, #19]
 800af74:	4413      	add	r3, r2
 800af76:	74fb      	strb	r3, [r7, #19]
					motor.tilt_command.spd_man_in_c);

			if (_debug_send_timer <= osKernelSysTick()) {
 800af78:	f7fc f9ed 	bl	8007356 <osKernelSysTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	4293      	cmp	r3, r2
 800af82:	d81d      	bhi.n	800afc0 <t_motor_manual+0xdc>
				_debug_send_timer = osKernelSysTick() + 500;
 800af84:	f7fc f9e7 	bl	8007356 <osKernelSysTick>
 800af88:	4603      	mov	r3, r0
 800af8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800af8e:	617b      	str	r3, [r7, #20]
				LOG("[%d]in c= %ld,%ld\r\n", _dbg_send_mtr_cmd_counter, motor.pan_command.spd_man_in_c,
 800af90:	f7fc f9e1 	bl	8007356 <osKernelSysTick>
 800af94:	4603      	mov	r3, r0
 800af96:	4a0f      	ldr	r2, [pc, #60]	; (800afd4 <t_motor_manual+0xf0>)
 800af98:	fba2 1203 	umull	r1, r2, r2, r3
 800af9c:	0b51      	lsrs	r1, r2, #13
 800af9e:	f242 7210 	movw	r2, #10000	; 0x2710
 800afa2:	fb01 f202 	mul.w	r2, r1, r2
 800afa6:	1a99      	subs	r1, r3, r2
 800afa8:	7cf8      	ldrb	r0, [r7, #19]
 800afaa:	4b0e      	ldr	r3, [pc, #56]	; (800afe4 <t_motor_manual+0x100>)
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <t_motor_manual+0x100>)
 800afb0:	69d2      	ldr	r2, [r2, #28]
 800afb2:	9201      	str	r2, [sp, #4]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	4603      	mov	r3, r0
 800afb8:	2235      	movs	r2, #53	; 0x35
 800afba:	480c      	ldr	r0, [pc, #48]	; (800afec <t_motor_manual+0x108>)
 800afbc:	f004 fa88 	bl	800f4d0 <iprintf>
			LOG("\t\tshw=%d\r\n", uxTaskGetStackHighWaterMark2(NULL));
		}
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_Ext_id, 0);
 800afc0:	2000      	movs	r0, #0
 800afc2:	f7f6 f893 	bl	80010ec <opt_get_queue>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2200      	movs	r2, #0
 800afca:	2108      	movs	r1, #8
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fc fc67 	bl	80078a0 <osMessagePut>
	for ( ;; ) {
 800afd2:	e7a0      	b.n	800af16 <t_motor_manual+0x32>
 800afd4:	d1b71759 	.word	0xd1b71759
 800afd8:	08011b1c 	.word	0x08011b1c
 800afdc:	200106a4 	.word	0x200106a4
 800afe0:	20010690 	.word	0x20010690
 800afe4:	20010660 	.word	0x20010660
 800afe8:	200106d8 	.word	0x200106d8
 800afec:	08011b40 	.word	0x08011b40

0800aff0 <t_motor_memory>:
 */

#include "t_motor.h"

void t_motor_memory(void const * argument)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN t_motor_memory */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800aff8:	2001      	movs	r0, #1
 800affa:	f7fc f9ff 	bl	80073fc <osDelay>
 800affe:	e7fb      	b.n	800aff8 <t_motor_memory+0x8>

0800b000 <t_motor_stab>:
 */

#include "t_motor.h"

void t_motor_stab(void const * argument)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN t_motor_stab */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b008:	2001      	movs	r0, #1
 800b00a:	f7fc f9f7 	bl	80073fc <osDelay>
 800b00e:	e7fb      	b.n	800b008 <t_motor_stab+0x8>

0800b010 <t_motor_travel>:
  }
	/* USER CODE END t_motor_stab */
}

void t_motor_travel(void const * argument)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN t_motor_travel */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b018:	2001      	movs	r0, #1
 800b01a:	f7fc f9ef 	bl	80073fc <osDelay>
 800b01e:	e7fb      	b.n	800b018 <t_motor_travel+0x8>

0800b020 <tim_motor_callback>:
static void t_motor_delete_task(const uint8_t living_task);
static void t_motor_change_task(const uint8_t task_tobe_revived);
static void t_motor_init(const uint32_t delay);

void tim_motor_callback(void const *argument)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tim_motor_callback */
	g_timer_in_used = 1;
 800b028:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <tim_motor_callback+0x44>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	701a      	strb	r2, [r3, #0]
	if (tim_user == timer_used_by_init) {
 800b02e:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <tim_motor_callback+0x48>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d110      	bne.n	800b058 <tim_motor_callback+0x38>
		if (osKernelSysTick() < g_init_timeout)
 800b036:	f7fc f98e 	bl	8007356 <osKernelSysTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4b0b      	ldr	r3, [pc, #44]	; (800b06c <tim_motor_callback+0x4c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d20b      	bcs.n	800b05c <tim_motor_callback+0x3c>
			/* send notif to task manager that this thread is still running */
			osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), (T_Motor_id | T_Motor_Ext_id), 0);
 800b044:	2000      	movs	r0, #0
 800b046:	f7f6 f851 	bl	80010ec <opt_get_queue>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2200      	movs	r2, #0
 800b04e:	210a      	movs	r1, #10
 800b050:	4618      	mov	r0, r3
 800b052:	f7fc fc25 	bl	80078a0 <osMessagePut>
	}
	else {
		_stop_timer();
	}
}
 800b056:	e001      	b.n	800b05c <tim_motor_callback+0x3c>
		_stop_timer();
 800b058:	f000 fb8c 	bl	800b774 <_stop_timer>
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	200106d1 	.word	0x200106d1
 800b068:	200106d0 	.word	0x200106d0
 800b06c:	200106d4 	.word	0x200106d4

0800b070 <t_motor>:

void t_motor(void const *argument)
{
 800b070:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800b074:	b097      	sub	sp, #92	; 0x5c
 800b076:	af04      	add	r7, sp, #16
 800b078:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor */
//	uint32_t _mtr_send_timer = 0;
	uint32_t _bus_send_timer = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t _bus_recv_timestamp = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	643b      	str	r3, [r7, #64]	; 0x40
#if RTOS_USE_STACK_HIGH_WATER==1
	uint32_t _stack_highwater = 0;
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

	LOG("Created!\r\n");
 800b082:	f7fc f968 	bl	8007356 <osKernelSysTick>
 800b086:	4602      	mov	r2, r0
 800b088:	4ba5      	ldr	r3, [pc, #660]	; (800b320 <t_motor+0x2b0>)
 800b08a:	fba3 1302 	umull	r1, r3, r3, r2
 800b08e:	0b5b      	lsrs	r3, r3, #13
 800b090:	f242 7110 	movw	r1, #10000	; 0x2710
 800b094:	fb01 f303 	mul.w	r3, r1, r3
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	225c      	movs	r2, #92	; 0x5c
 800b09c:	4619      	mov	r1, r3
 800b09e:	48a1      	ldr	r0, [pc, #644]	; (800b324 <t_motor+0x2b4>)
 800b0a0:	f004 fa16 	bl	800f4d0 <iprintf>

	osMutexWait(mtr_get_mutex(Mutex_Motor_id), osWaitForever);
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	f7f6 f87d 	bl	80011a4 <mtr_get_mutex>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fc fa5f 	bl	8007574 <osMutexWait>
	/* TODO Select which motor to be activated */
	motor.enable = 0;
 800b0b6:	4b9c      	ldr	r3, [pc, #624]	; (800b328 <t_motor+0x2b8>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
	motor.enable |= MTR_AZ_ENABLE;
 800b0bc:	4b9a      	ldr	r3, [pc, #616]	; (800b328 <t_motor+0x2b8>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	f043 0301 	orr.w	r3, r3, #1
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	4b98      	ldr	r3, [pc, #608]	; (800b328 <t_motor+0x2b8>)
 800b0c8:	701a      	strb	r2, [r3, #0]
	motor.enable |= MTR_EL_ENABLE;
 800b0ca:	4b97      	ldr	r3, [pc, #604]	; (800b328 <t_motor+0x2b8>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	f043 0302 	orr.w	r3, r3, #2
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	4b94      	ldr	r3, [pc, #592]	; (800b328 <t_motor+0x2b8>)
 800b0d6:	701a      	strb	r2, [r3, #0]

	t_motor_init(3000);
 800b0d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b0dc:	f000 fd2e 	bl	800bb3c <t_motor_init>
	osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	f7f6 f85f 	bl	80011a4 <mtr_get_mutex>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fc fa91 	bl	8007610 <osMutexRelease>

	motor.current_task_id = 0;
 800b0ee:	4b8e      	ldr	r3, [pc, #568]	; (800b328 <t_motor+0x2b8>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	705a      	strb	r2, [r3, #1]
	t_motor_change_task(TASK_MOTOR_MANUAL_id);
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	f000 fc17 	bl	800b928 <t_motor_change_task>
	for ( ;; ) {
		int32_t _p, _t;
		float _fp, _ft;

		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Motor_id), 50);
 800b0fa:	2001      	movs	r0, #1
 800b0fc:	f7f6 f80a 	bl	8001114 <mtr_get_mail>
 800b100:	4601      	mov	r1, r0
 800b102:	f107 0308 	add.w	r3, r7, #8
 800b106:	2232      	movs	r2, #50	; 0x32
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fc fd29 	bl	8007b60 <osMailGet>
		if (event.status == osEventMail) {
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b20      	cmp	r3, #32
 800b112:	f040 8294 	bne.w	800b63e <t_motor+0x5ce>
			/* create buffer pointer to hold queue value */
			MAIL_Motor_t *pRMail;
			pRMail = event.value.p;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	633b      	str	r3, [r7, #48]	; 0x30

			Motor_Sender_Id_e sender = pRMail->sender_id;
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch (sender)
 800b122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b126:	2b04      	cmp	r3, #4
 800b128:	f000 8106 	beq.w	800b338 <t_motor+0x2c8>
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	f300 8256 	bgt.w	800b5de <t_motor+0x56e>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <t_motor+0xce>
 800b136:	2b01      	cmp	r3, #1
 800b138:	f000 809c 	beq.w	800b274 <t_motor+0x204>
					} LOG("[S]target=%ld,%ld\r\n", motor.pan_command.pos_hom_in_c, motor.tilt_command.pos_hom_in_c);
					_bus_recv_timestamp = osKernelSysTick();
				}
				break;
			default:
				break;
 800b13c:	e24f      	b.n	800b5de <t_motor+0x56e>
				LOG("[I]st= %02X\r\n", *(uint8_t* )&pRMail->param.command.mode);
 800b13e:	f7fc f90a 	bl	8007356 <osKernelSysTick>
 800b142:	4603      	mov	r3, r0
 800b144:	4a76      	ldr	r2, [pc, #472]	; (800b320 <t_motor+0x2b0>)
 800b146:	fba2 1203 	umull	r1, r2, r2, r3
 800b14a:	0b51      	lsrs	r1, r2, #13
 800b14c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b150:	fb01 f202 	mul.w	r2, r1, r2
 800b154:	1a99      	subs	r1, r3, r2
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	3304      	adds	r3, #4
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	227a      	movs	r2, #122	; 0x7a
 800b15e:	4873      	ldr	r0, [pc, #460]	; (800b32c <t_motor+0x2bc>)
 800b160:	f004 f9b6 	bl	800f4d0 <iprintf>
				if (motor.mode_state.moveMode == TASK_MOTOR_MANUAL_id)
 800b164:	4b70      	ldr	r3, [pc, #448]	; (800b328 <t_motor+0x2b8>)
 800b166:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b01      	cmp	r3, #1
 800b172:	d10b      	bne.n	800b18c <t_motor+0x11c>
							pRMail->param.command.mode.motorEnable;
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	791b      	ldrb	r3, [r3, #4]
 800b178:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	461a      	mov	r2, r3
					motor.pan_command.power_enable = motor.tilt_command.power_enable =
 800b180:	4b69      	ldr	r3, [pc, #420]	; (800b328 <t_motor+0x2b8>)
 800b182:	761a      	strb	r2, [r3, #24]
 800b184:	4b68      	ldr	r3, [pc, #416]	; (800b328 <t_motor+0x2b8>)
 800b186:	7e1a      	ldrb	r2, [r3, #24]
 800b188:	4b67      	ldr	r3, [pc, #412]	; (800b328 <t_motor+0x2b8>)
 800b18a:	711a      	strb	r2, [r3, #4]
				switch (pRMail->param.command.mode.moveMode)
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	791b      	ldrb	r3, [r3, #4]
 800b190:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b05      	cmp	r3, #5
 800b198:	d838      	bhi.n	800b20c <t_motor+0x19c>
 800b19a:	a201      	add	r2, pc, #4	; (adr r2, 800b1a0 <t_motor+0x130>)
 800b19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a0:	0800b1b9 	.word	0x0800b1b9
 800b1a4:	0800b1c7 	.word	0x0800b1c7
 800b1a8:	0800b1d5 	.word	0x0800b1d5
 800b1ac:	0800b1e3 	.word	0x0800b1e3
 800b1b0:	0800b1f1 	.word	0x0800b1f1
 800b1b4:	0800b1ff 	.word	0x0800b1ff
					motor.mode_command.moveMode = TASK_MOTOR_MANUAL_id;
 800b1b8:	4a5b      	ldr	r2, [pc, #364]	; (800b328 <t_motor+0x2b8>)
 800b1ba:	7893      	ldrb	r3, [r2, #2]
 800b1bc:	2101      	movs	r1, #1
 800b1be:	f361 0344 	bfi	r3, r1, #1, #4
 800b1c2:	7093      	strb	r3, [r2, #2]
					break;
 800b1c4:	e023      	b.n	800b20e <t_motor+0x19e>
					motor.mode_command.moveMode = TASK_MOTOR_TRAVEL_id;
 800b1c6:	4a58      	ldr	r2, [pc, #352]	; (800b328 <t_motor+0x2b8>)
 800b1c8:	7893      	ldrb	r3, [r2, #2]
 800b1ca:	2102      	movs	r1, #2
 800b1cc:	f361 0344 	bfi	r3, r1, #1, #4
 800b1d0:	7093      	strb	r3, [r2, #2]
					break;
 800b1d2:	e01c      	b.n	800b20e <t_motor+0x19e>
					motor.mode_command.moveMode = TASK_MOTOR_STAB_id;
 800b1d4:	4a54      	ldr	r2, [pc, #336]	; (800b328 <t_motor+0x2b8>)
 800b1d6:	7893      	ldrb	r3, [r2, #2]
 800b1d8:	2103      	movs	r1, #3
 800b1da:	f361 0344 	bfi	r3, r1, #1, #4
 800b1de:	7093      	strb	r3, [r2, #2]
					break;
 800b1e0:	e015      	b.n	800b20e <t_motor+0x19e>
					motor.mode_command.moveMode = TASK_MOTOR_TRACK_id;
 800b1e2:	4a51      	ldr	r2, [pc, #324]	; (800b328 <t_motor+0x2b8>)
 800b1e4:	7893      	ldrb	r3, [r2, #2]
 800b1e6:	2104      	movs	r1, #4
 800b1e8:	f361 0344 	bfi	r3, r1, #1, #4
 800b1ec:	7093      	strb	r3, [r2, #2]
					break;
 800b1ee:	e00e      	b.n	800b20e <t_motor+0x19e>
					motor.mode_command.moveMode = TASK_MOTOR_MEMORY_id;
 800b1f0:	4a4d      	ldr	r2, [pc, #308]	; (800b328 <t_motor+0x2b8>)
 800b1f2:	7893      	ldrb	r3, [r2, #2]
 800b1f4:	2105      	movs	r1, #5
 800b1f6:	f361 0344 	bfi	r3, r1, #1, #4
 800b1fa:	7093      	strb	r3, [r2, #2]
					break;
 800b1fc:	e007      	b.n	800b20e <t_motor+0x19e>
					motor.mode_command.moveMode = TASK_MOTOR_HOMING_id;
 800b1fe:	4a4a      	ldr	r2, [pc, #296]	; (800b328 <t_motor+0x2b8>)
 800b200:	7893      	ldrb	r3, [r2, #2]
 800b202:	2106      	movs	r1, #6
 800b204:	f361 0344 	bfi	r3, r1, #1, #4
 800b208:	7093      	strb	r3, [r2, #2]
					break;
 800b20a:	e000      	b.n	800b20e <t_motor+0x19e>
					break;
 800b20c:	bf00      	nop
				if (motor.mode_state.moveMode != motor.mode_command.moveMode) {
 800b20e:	4b46      	ldr	r3, [pc, #280]	; (800b328 <t_motor+0x2b8>)
 800b210:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b214:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	4b43      	ldr	r3, [pc, #268]	; (800b328 <t_motor+0x2b8>)
 800b21c:	789b      	ldrb	r3, [r3, #2]
 800b21e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b222:	b2db      	uxtb	r3, r3
 800b224:	429a      	cmp	r2, r3
 800b226:	d021      	beq.n	800b26c <t_motor+0x1fc>
					motor.mode_state.moveMode = motor.mode_command.moveMode;
 800b228:	4b3f      	ldr	r3, [pc, #252]	; (800b328 <t_motor+0x2b8>)
 800b22a:	789b      	ldrb	r3, [r3, #2]
 800b22c:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b230:	b2d9      	uxtb	r1, r3
 800b232:	4a3d      	ldr	r2, [pc, #244]	; (800b328 <t_motor+0x2b8>)
 800b234:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b238:	f361 0303 	bfi	r3, r1, #0, #4
 800b23c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
					LOG("Change task motor ext [%d]\r\n", motor.mode_state.moveMode);
 800b240:	f7fc f889 	bl	8007356 <osKernelSysTick>
 800b244:	4603      	mov	r3, r0
 800b246:	4a36      	ldr	r2, [pc, #216]	; (800b320 <t_motor+0x2b0>)
 800b248:	fba2 1203 	umull	r1, r2, r2, r3
 800b24c:	0b51      	lsrs	r1, r2, #13
 800b24e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b252:	fb01 f202 	mul.w	r2, r1, r2
 800b256:	1a99      	subs	r1, r3, r2
 800b258:	4b33      	ldr	r3, [pc, #204]	; (800b328 <t_motor+0x2b8>)
 800b25a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b25e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b262:	b2db      	uxtb	r3, r3
 800b264:	229b      	movs	r2, #155	; 0x9b
 800b266:	4832      	ldr	r0, [pc, #200]	; (800b330 <t_motor+0x2c0>)
 800b268:	f004 f932 	bl	800f4d0 <iprintf>
				_bus_recv_timestamp = osKernelSysTick();
 800b26c:	f7fc f873 	bl	8007356 <osKernelSysTick>
 800b270:	6438      	str	r0, [r7, #64]	; 0x40
				break;
 800b272:	e1dc      	b.n	800b62e <t_motor+0x5be>
				_p = pRMail->param.command.value.pan;
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	63fb      	str	r3, [r7, #60]	; 0x3c
				_t = pRMail->param.command.value.tilt;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	62bb      	str	r3, [r7, #40]	; 0x28
				LOG("[I]rx man= %ld,%ld\r\n", _p, _t);
 800b280:	f7fc f869 	bl	8007356 <osKernelSysTick>
 800b284:	4603      	mov	r3, r0
 800b286:	4a26      	ldr	r2, [pc, #152]	; (800b320 <t_motor+0x2b0>)
 800b288:	fba2 1203 	umull	r1, r2, r2, r3
 800b28c:	0b51      	lsrs	r1, r2, #13
 800b28e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b292:	fb01 f202 	mul.w	r2, r1, r2
 800b296:	1a99      	subs	r1, r3, r2
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29e:	22a3      	movs	r2, #163	; 0xa3
 800b2a0:	4824      	ldr	r0, [pc, #144]	; (800b334 <t_motor+0x2c4>)
 800b2a2:	f004 f915 	bl	800f4d0 <iprintf>
				if (motor.mode_state.moveMode == TASK_MOTOR_MANUAL_id) {
 800b2a6:	4b20      	ldr	r3, [pc, #128]	; (800b328 <t_motor+0x2b8>)
 800b2a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b2ac:	f003 030f 	and.w	r3, r3, #15
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d130      	bne.n	800b318 <t_motor+0x2a8>
					if (motor.pan_command.power_enable != 0) {
 800b2b6:	4b1c      	ldr	r3, [pc, #112]	; (800b328 <t_motor+0x2b8>)
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00f      	beq.n	800b2de <t_motor+0x26e>
						if (abs(_p) < 100)
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800b2c4:	db04      	blt.n	800b2d0 <t_motor+0x260>
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c8:	2b63      	cmp	r3, #99	; 0x63
 800b2ca:	dc01      	bgt.n	800b2d0 <t_motor+0x260>
							_p = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
						motor.pan_command.spd_man_in_c = _man_pan_speed_to_c(_p);
 800b2d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2d2:	f000 fde5 	bl	800bea0 <_man_pan_speed_to_c>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4a13      	ldr	r2, [pc, #76]	; (800b328 <t_motor+0x2b8>)
 800b2da:	6093      	str	r3, [r2, #8]
 800b2dc:	e002      	b.n	800b2e4 <t_motor+0x274>
						motor.pan_command.spd_man_in_c = 0;
 800b2de:	4b12      	ldr	r3, [pc, #72]	; (800b328 <t_motor+0x2b8>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	609a      	str	r2, [r3, #8]
					if (motor.tilt_command.power_enable != 0) {
 800b2e4:	4b10      	ldr	r3, [pc, #64]	; (800b328 <t_motor+0x2b8>)
 800b2e6:	7e1b      	ldrb	r3, [r3, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00f      	beq.n	800b30c <t_motor+0x29c>
						if (abs(_t) < 100)
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800b2f2:	db04      	blt.n	800b2fe <t_motor+0x28e>
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	2b63      	cmp	r3, #99	; 0x63
 800b2f8:	dc01      	bgt.n	800b2fe <t_motor+0x28e>
							_p = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
						motor.tilt_command.spd_man_in_c = _man_tilt_speed_to_c(_t);
 800b2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b300:	f000 fde8 	bl	800bed4 <_man_tilt_speed_to_c>
 800b304:	4603      	mov	r3, r0
 800b306:	4a08      	ldr	r2, [pc, #32]	; (800b328 <t_motor+0x2b8>)
 800b308:	61d3      	str	r3, [r2, #28]
 800b30a:	e002      	b.n	800b312 <t_motor+0x2a2>
						motor.tilt_command.spd_man_in_c = 0;
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <t_motor+0x2b8>)
 800b30e:	2200      	movs	r2, #0
 800b310:	61da      	str	r2, [r3, #28]
					_bus_recv_timestamp = osKernelSysTick();
 800b312:	f7fc f820 	bl	8007356 <osKernelSysTick>
 800b316:	6438      	str	r0, [r7, #64]	; 0x40
				_bus_recv_timestamp = osKernelSysTick();
 800b318:	f7fc f81d 	bl	8007356 <osKernelSysTick>
 800b31c:	6438      	str	r0, [r7, #64]	; 0x40
				break;
 800b31e:	e186      	b.n	800b62e <t_motor+0x5be>
 800b320:	d1b71759 	.word	0xd1b71759
 800b324:	08011bac 	.word	0x08011bac
 800b328:	20010660 	.word	0x20010660
 800b32c:	08011bc8 	.word	0x08011bc8
 800b330:	08011be4 	.word	0x08011be4
 800b334:	08011c10 	.word	0x08011c10
				_p = motor.pan_state.pos;
 800b338:	4baa      	ldr	r3, [pc, #680]	; (800b5e4 <t_motor+0x574>)
 800b33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33c:	63fb      	str	r3, [r7, #60]	; 0x3c
				_t = motor.tilt_state.pos;
 800b33e:	4ba9      	ldr	r3, [pc, #676]	; (800b5e4 <t_motor+0x574>)
 800b340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28
				_fp = (float) pRMail->param.command.value.pan / 1000;
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b350:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800b5e8 <t_motor+0x578>
 800b354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b358:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				_ft = (float) pRMail->param.command.value.tilt / 1000;
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	ee07 3a90 	vmov	s15, r3
 800b364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b368:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800b5e8 <t_motor+0x578>
 800b36c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b370:	edc7 7a08 	vstr	s15, [r7, #32]
				LOG("[I]recv hom=%.3f,%.3f\r\n", _fp, _ft);
 800b374:	f7fb ffef 	bl	8007356 <osKernelSysTick>
 800b378:	4603      	mov	r3, r0
 800b37a:	4a9c      	ldr	r2, [pc, #624]	; (800b5ec <t_motor+0x57c>)
 800b37c:	fba2 1203 	umull	r1, r2, r2, r3
 800b380:	0b54      	lsrs	r4, r2, #13
 800b382:	f242 7210 	movw	r2, #10000	; 0x2710
 800b386:	fb04 f202 	mul.w	r2, r4, r2
 800b38a:	1a9c      	subs	r4, r3, r2
 800b38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b38e:	f7f5 f903 	bl	8000598 <__aeabi_f2d>
 800b392:	4680      	mov	r8, r0
 800b394:	4689      	mov	r9, r1
 800b396:	6a38      	ldr	r0, [r7, #32]
 800b398:	f7f5 f8fe 	bl	8000598 <__aeabi_f2d>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3a4:	e9cd 8900 	strd	r8, r9, [sp]
 800b3a8:	22c0      	movs	r2, #192	; 0xc0
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4890      	ldr	r0, [pc, #576]	; (800b5f0 <t_motor+0x580>)
 800b3ae:	f004 f88f 	bl	800f4d0 <iprintf>
				if (motor.mode_state.moveMode == TASK_MOTOR_HOMING_id) {
 800b3b2:	4b8c      	ldr	r3, [pc, #560]	; (800b5e4 <t_motor+0x574>)
 800b3b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b3b8:	f003 030f 	and.w	r3, r3, #15
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b06      	cmp	r3, #6
 800b3c0:	f040 8134 	bne.w	800b62c <t_motor+0x5bc>
					if (homing_state == 0) {
 800b3c4:	4b8b      	ldr	r3, [pc, #556]	; (800b5f4 <t_motor+0x584>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f040 80ee 	bne.w	800b5aa <t_motor+0x53a>
						homing_state = 1;
 800b3ce:	4b89      	ldr	r3, [pc, #548]	; (800b5f4 <t_motor+0x584>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	701a      	strb	r2, [r3, #0]
						LOG("\r\n\r\n\r\n\r\n");
 800b3d4:	f7fb ffbf 	bl	8007356 <osKernelSysTick>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	4b84      	ldr	r3, [pc, #528]	; (800b5ec <t_motor+0x57c>)
 800b3dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b3e0:	0b5b      	lsrs	r3, r3, #13
 800b3e2:	f242 7110 	movw	r1, #10000	; 0x2710
 800b3e6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	22c4      	movs	r2, #196	; 0xc4
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4881      	ldr	r0, [pc, #516]	; (800b5f8 <t_motor+0x588>)
 800b3f2:	f004 f86d 	bl	800f4d0 <iprintf>
						int32_t _rp = _p % RWS_MOTOR_PAN_FULL_REV_IN_C;
 800b3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f8:	4a80      	ldr	r2, [pc, #512]	; (800b5fc <t_motor+0x58c>)
 800b3fa:	fb82 1203 	smull	r1, r2, r2, r3
 800b3fe:	13d1      	asrs	r1, r2, #15
 800b400:	17da      	asrs	r2, r3, #31
 800b402:	1a8a      	subs	r2, r1, r2
 800b404:	497e      	ldr	r1, [pc, #504]	; (800b600 <t_motor+0x590>)
 800b406:	fb01 f202 	mul.w	r2, r1, r2
 800b40a:	1a9b      	subs	r3, r3, r2
 800b40c:	61fb      	str	r3, [r7, #28]
						float c_az = RWS_MOTOR_PAN_C_TO_DEG(_rp);
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b418:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800b604 <t_motor+0x594>
 800b41c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b420:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
						if (c_az < 0)
 800b424:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b430:	d507      	bpl.n	800b442 <t_motor+0x3d2>
							c_az += 360.f;
 800b432:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b436:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800b608 <t_motor+0x598>
 800b43a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b43e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
						LOG("[H]c_az=%.3f\r\n", c_az);
 800b442:	f7fb ff88 	bl	8007356 <osKernelSysTick>
 800b446:	4603      	mov	r3, r0
 800b448:	4a68      	ldr	r2, [pc, #416]	; (800b5ec <t_motor+0x57c>)
 800b44a:	fba2 1203 	umull	r1, r2, r2, r3
 800b44e:	0b54      	lsrs	r4, r2, #13
 800b450:	f242 7210 	movw	r2, #10000	; 0x2710
 800b454:	fb04 f202 	mul.w	r2, r4, r2
 800b458:	1a9c      	subs	r4, r3, r2
 800b45a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b45c:	f7f5 f89c 	bl	8000598 <__aeabi_f2d>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	e9cd 2300 	strd	r2, r3, [sp]
 800b468:	22cb      	movs	r2, #203	; 0xcb
 800b46a:	4621      	mov	r1, r4
 800b46c:	4867      	ldr	r0, [pc, #412]	; (800b60c <t_motor+0x59c>)
 800b46e:	f004 f82f 	bl	800f4d0 <iprintf>
						float d_az = 0.0f;
 800b472:	f04f 0300 	mov.w	r3, #0
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
						if (_fp >= c_az)
 800b478:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b47c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b488:	db08      	blt.n	800b49c <t_motor+0x42c>
							d_az = _fp - c_az;
 800b48a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b48e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b492:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b496:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800b49a:	e00b      	b.n	800b4b4 <t_motor+0x444>
							d_az = _fp + 360.0f - c_az;
 800b49c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b4a0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b608 <t_motor+0x598>
 800b4a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b4ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
						if (d_az > 180.0f)
 800b4b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b4b8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800b610 <t_motor+0x5a0>
 800b4bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c4:	dd07      	ble.n	800b4d6 <t_motor+0x466>
							d_az -= 360.0f;
 800b4c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b4ca:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800b608 <t_motor+0x598>
 800b4ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
						LOG("[H]d_az=%.3f\r\n", d_az);
 800b4d6:	f7fb ff3e 	bl	8007356 <osKernelSysTick>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4a43      	ldr	r2, [pc, #268]	; (800b5ec <t_motor+0x57c>)
 800b4de:	fba2 1203 	umull	r1, r2, r2, r3
 800b4e2:	0b54      	lsrs	r4, r2, #13
 800b4e4:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4e8:	fb04 f202 	mul.w	r2, r4, r2
 800b4ec:	1a9c      	subs	r4, r3, r2
 800b4ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4f0:	f7f5 f852 	bl	8000598 <__aeabi_f2d>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	e9cd 2300 	strd	r2, r3, [sp]
 800b4fc:	22d7      	movs	r2, #215	; 0xd7
 800b4fe:	4621      	mov	r1, r4
 800b500:	4844      	ldr	r0, [pc, #272]	; (800b614 <t_motor+0x5a4>)
 800b502:	f003 ffe5 	bl	800f4d0 <iprintf>
						motor.pan_command.pos_hom_in_c = _p + RWS_MOTOR_PAN_DEG_TO_C(d_az);
 800b506:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b50a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800b618 <t_motor+0x5a8>
 800b50e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b516:	ee17 2a90 	vmov	r2, s15
 800b51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51c:	4413      	add	r3, r2
 800b51e:	4a31      	ldr	r2, [pc, #196]	; (800b5e4 <t_motor+0x574>)
 800b520:	6153      	str	r3, [r2, #20]
						LOG("[H]target=%ld\r\n", motor.pan_command.pos_hom_in_c);
 800b522:	f7fb ff18 	bl	8007356 <osKernelSysTick>
 800b526:	4603      	mov	r3, r0
 800b528:	4a30      	ldr	r2, [pc, #192]	; (800b5ec <t_motor+0x57c>)
 800b52a:	fba2 1203 	umull	r1, r2, r2, r3
 800b52e:	0b51      	lsrs	r1, r2, #13
 800b530:	f242 7210 	movw	r2, #10000	; 0x2710
 800b534:	fb01 f202 	mul.w	r2, r1, r2
 800b538:	1a99      	subs	r1, r3, r2
 800b53a:	4b2a      	ldr	r3, [pc, #168]	; (800b5e4 <t_motor+0x574>)
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	22db      	movs	r2, #219	; 0xdb
 800b540:	4836      	ldr	r0, [pc, #216]	; (800b61c <t_motor+0x5ac>)
 800b542:	f003 ffc5 	bl	800f4d0 <iprintf>
						float c_el = RWS_MOTOR_TILT_C_TO_DEG(_t);
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	ee07 3a90 	vmov	s15, r3
 800b54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b550:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b620 <t_motor+0x5b0>
 800b554:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b558:	edc7 7a06 	vstr	s15, [r7, #24]
						float d_el = _ft - c_el;
 800b55c:	ed97 7a08 	vldr	s14, [r7, #32]
 800b560:	edd7 7a06 	vldr	s15, [r7, #24]
 800b564:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b568:	edc7 7a05 	vstr	s15, [r7, #20]
						motor.tilt_command.pos_hom_in_c = _t + RWS_MOTOR_TILT_DEG_TO_C(d_el);
 800b56c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b570:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b624 <t_motor+0x5b4>
 800b574:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b57c:	ee17 2a90 	vmov	r2, s15
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	4413      	add	r3, r2
 800b584:	4a17      	ldr	r2, [pc, #92]	; (800b5e4 <t_motor+0x574>)
 800b586:	6293      	str	r3, [r2, #40]	; 0x28
						LOG("\r\n\r\n\r\n\r\n");
 800b588:	f7fb fee5 	bl	8007356 <osKernelSysTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	4b17      	ldr	r3, [pc, #92]	; (800b5ec <t_motor+0x57c>)
 800b590:	fba3 1302 	umull	r1, r3, r3, r2
 800b594:	0b5b      	lsrs	r3, r3, #13
 800b596:	f242 7110 	movw	r1, #10000	; 0x2710
 800b59a:	fb01 f303 	mul.w	r3, r1, r3
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	22e2      	movs	r2, #226	; 0xe2
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4814      	ldr	r0, [pc, #80]	; (800b5f8 <t_motor+0x588>)
 800b5a6:	f003 ff93 	bl	800f4d0 <iprintf>
					} LOG("[S]target=%ld,%ld\r\n", motor.pan_command.pos_hom_in_c, motor.tilt_command.pos_hom_in_c);
 800b5aa:	f7fb fed4 	bl	8007356 <osKernelSysTick>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4a0e      	ldr	r2, [pc, #56]	; (800b5ec <t_motor+0x57c>)
 800b5b2:	fba2 1203 	umull	r1, r2, r2, r3
 800b5b6:	0b51      	lsrs	r1, r2, #13
 800b5b8:	f242 7210 	movw	r2, #10000	; 0x2710
 800b5bc:	fb01 f202 	mul.w	r2, r1, r2
 800b5c0:	1a99      	subs	r1, r3, r2
 800b5c2:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <t_motor+0x574>)
 800b5c4:	695a      	ldr	r2, [r3, #20]
 800b5c6:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <t_motor+0x574>)
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	22e3      	movs	r2, #227	; 0xe3
 800b5d0:	4815      	ldr	r0, [pc, #84]	; (800b628 <t_motor+0x5b8>)
 800b5d2:	f003 ff7d 	bl	800f4d0 <iprintf>
					_bus_recv_timestamp = osKernelSysTick();
 800b5d6:	f7fb febe 	bl	8007356 <osKernelSysTick>
 800b5da:	6438      	str	r0, [r7, #64]	; 0x40
				break;
 800b5dc:	e026      	b.n	800b62c <t_motor+0x5bc>
				break;
 800b5de:	bf00      	nop
 800b5e0:	e025      	b.n	800b62e <t_motor+0x5be>
 800b5e2:	bf00      	nop
 800b5e4:	20010660 	.word	0x20010660
 800b5e8:	447a0000 	.word	0x447a0000
 800b5ec:	d1b71759 	.word	0xd1b71759
 800b5f0:	08011c34 	.word	0x08011c34
 800b5f4:	200106d8 	.word	0x200106d8
 800b5f8:	08011c5c 	.word	0x08011c5c
 800b5fc:	1414a1d3 	.word	0x1414a1d3
 800b600:	00065fd3 	.word	0x00065fd3
 800b604:	3a61e81c 	.word	0x3a61e81c
 800b608:	43b40000 	.word	0x43b40000
 800b60c:	08011c74 	.word	0x08011c74
 800b610:	43340000 	.word	0x43340000
 800b614:	08011c94 	.word	0x08011c94
 800b618:	44910d11 	.word	0x44910d11
 800b61c:	08011cb4 	.word	0x08011cb4
 800b620:	3a09b0bb 	.word	0x3a09b0bb
 800b624:	44edfbb6 	.word	0x44edfbb6
 800b628:	08011cd4 	.word	0x08011cd4
				break;
 800b62c:	bf00      	nop
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Motor_id), pRMail);
 800b62e:	2001      	movs	r0, #1
 800b630:	f7f5 fd70 	bl	8001114 <mtr_get_mail>
 800b634:	4603      	mov	r3, r0
 800b636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fc fb05 	bl	8007c48 <osMailFree>
		}

		if (motor.mode_state.moveMode == TASK_MOTOR_MANUAL_id)
 800b63e:	4b48      	ldr	r3, [pc, #288]	; (800b760 <t_motor+0x6f0>)
 800b640:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b644:	f003 030f 	and.w	r3, r3, #15
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d102      	bne.n	800b654 <t_motor+0x5e4>
			homing_state = 0;
 800b64e:	4b45      	ldr	r3, [pc, #276]	; (800b764 <t_motor+0x6f4>)
 800b650:	2200      	movs	r2, #0
 800b652:	701a      	strb	r2, [r3, #0]

//		hal_motor_get_motor_state(&motor.pan_state, &motor.tilt_state);

		if ((_bus_recv_timestamp > 0) && (osKernelSysTick() >= (_bus_recv_timestamp + BUS_MAX_TIMEOUT))) {
 800b654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	d03a      	beq.n	800b6d0 <t_motor+0x660>
 800b65a:	f7fb fe7c 	bl	8007356 <osKernelSysTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b662:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b666:	429a      	cmp	r2, r3
 800b668:	d332      	bcc.n	800b6d0 <t_motor+0x660>
			_bus_recv_timestamp = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	643b      	str	r3, [r7, #64]	; 0x40

			motor.pan_command.power_enable = 0;
 800b66e:	4b3c      	ldr	r3, [pc, #240]	; (800b760 <t_motor+0x6f0>)
 800b670:	2200      	movs	r2, #0
 800b672:	711a      	strb	r2, [r3, #4]
			motor.pan_command.spd_man_in_c = 0;
 800b674:	4b3a      	ldr	r3, [pc, #232]	; (800b760 <t_motor+0x6f0>)
 800b676:	2200      	movs	r2, #0
 800b678:	609a      	str	r2, [r3, #8]
			motor.pan_command.spd_trk_in_c = 0;
 800b67a:	4b39      	ldr	r3, [pc, #228]	; (800b760 <t_motor+0x6f0>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	60da      	str	r2, [r3, #12]
			motor.pan_command.pos_bal_in_c = 0;
 800b680:	4b37      	ldr	r3, [pc, #220]	; (800b760 <t_motor+0x6f0>)
 800b682:	2200      	movs	r2, #0
 800b684:	611a      	str	r2, [r3, #16]
			motor.pan_command.pos_hom_in_c = 0;
 800b686:	4b36      	ldr	r3, [pc, #216]	; (800b760 <t_motor+0x6f0>)
 800b688:	2200      	movs	r2, #0
 800b68a:	615a      	str	r2, [r3, #20]

			motor.tilt_command.power_enable = 0;
 800b68c:	4b34      	ldr	r3, [pc, #208]	; (800b760 <t_motor+0x6f0>)
 800b68e:	2200      	movs	r2, #0
 800b690:	761a      	strb	r2, [r3, #24]
			motor.tilt_command.spd_man_in_c = 0;
 800b692:	4b33      	ldr	r3, [pc, #204]	; (800b760 <t_motor+0x6f0>)
 800b694:	2200      	movs	r2, #0
 800b696:	61da      	str	r2, [r3, #28]
			motor.tilt_command.spd_trk_in_c = 0;
 800b698:	4b31      	ldr	r3, [pc, #196]	; (800b760 <t_motor+0x6f0>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	621a      	str	r2, [r3, #32]
			motor.tilt_command.pos_bal_in_c = 0;
 800b69e:	4b30      	ldr	r3, [pc, #192]	; (800b760 <t_motor+0x6f0>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	625a      	str	r2, [r3, #36]	; 0x24
			motor.tilt_command.pos_hom_in_c = 0;
 800b6a4:	4b2e      	ldr	r3, [pc, #184]	; (800b760 <t_motor+0x6f0>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	629a      	str	r2, [r3, #40]	; 0x28
			LOG("\r\n\r\n\r\n\r\n");
 800b6aa:	f7fb fe54 	bl	8007356 <osKernelSysTick>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	4b2d      	ldr	r3, [pc, #180]	; (800b768 <t_motor+0x6f8>)
 800b6b2:	fba3 1302 	umull	r1, r3, r3, r2
 800b6b6:	0b5b      	lsrs	r3, r3, #13
 800b6b8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b6bc:	fb01 f303 	mul.w	r3, r1, r3
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4828      	ldr	r0, [pc, #160]	; (800b76c <t_motor+0x6fc>)
 800b6ca:	f003 ff01 	bl	800f4d0 <iprintf>
 800b6ce:	e00d      	b.n	800b6ec <t_motor+0x67c>
		}
		else {
			if (motor.mode_state.moveMode != TASK_MOTOR_MANUAL_id) {
 800b6d0:	4b23      	ldr	r3, [pc, #140]	; (800b760 <t_motor+0x6f0>)
 800b6d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b6d6:	f003 030f 	and.w	r3, r3, #15
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d005      	beq.n	800b6ec <t_motor+0x67c>
				motor.pan_command.power_enable = 1;
 800b6e0:	4b1f      	ldr	r3, [pc, #124]	; (800b760 <t_motor+0x6f0>)
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	711a      	strb	r2, [r3, #4]
				motor.tilt_command.power_enable = 1;
 800b6e6:	4b1e      	ldr	r3, [pc, #120]	; (800b760 <t_motor+0x6f0>)
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	761a      	strb	r2, [r3, #24]
			}
		}

		if (osKernelSysTick() >= _bus_send_timer) {
 800b6ec:	f7fb fe33 	bl	8007356 <osKernelSysTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d829      	bhi.n	800b74c <t_motor+0x6dc>
			_bus_send_timer = osKernelSysTick() + 100;
 800b6f8:	f7fb fe2d 	bl	8007356 <osKernelSysTick>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	3364      	adds	r3, #100	; 0x64
 800b700:	647b      	str	r3, [r7, #68]	; 0x44

			mtr_send_to_bus();
 800b702:	f000 faa3 	bl	800bc4c <mtr_send_to_bus>
			LOG("[O]state=%02X,%04X,%02X,%04X\r\n", motor.pan_state.power, motor.pan_state.statusword,
 800b706:	f7fb fe26 	bl	8007356 <osKernelSysTick>
 800b70a:	4603      	mov	r3, r0
 800b70c:	4a16      	ldr	r2, [pc, #88]	; (800b768 <t_motor+0x6f8>)
 800b70e:	fba2 1203 	umull	r1, r2, r2, r3
 800b712:	0b51      	lsrs	r1, r2, #13
 800b714:	f242 7210 	movw	r2, #10000	; 0x2710
 800b718:	fb01 f202 	mul.w	r2, r1, r2
 800b71c:	1a99      	subs	r1, r3, r2
 800b71e:	4b10      	ldr	r3, [pc, #64]	; (800b760 <t_motor+0x6f0>)
 800b720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b724:	461c      	mov	r4, r3
 800b726:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <t_motor+0x6f0>)
 800b728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b72a:	461a      	mov	r2, r3
 800b72c:	4b0c      	ldr	r3, [pc, #48]	; (800b760 <t_motor+0x6f0>)
 800b72e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b732:	4618      	mov	r0, r3
 800b734:	4b0a      	ldr	r3, [pc, #40]	; (800b760 <t_motor+0x6f0>)
 800b736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b73a:	9302      	str	r3, [sp, #8]
 800b73c:	9001      	str	r0, [sp, #4]
 800b73e:	9200      	str	r2, [sp, #0]
 800b740:	4623      	mov	r3, r4
 800b742:	f240 120f 	movw	r2, #271	; 0x10f
 800b746:	480a      	ldr	r0, [pc, #40]	; (800b770 <t_motor+0x700>)
 800b748:	f003 fec2 	bl	800f4d0 <iprintf>
			LOG("\t\tshw= %d\r\n", uxTaskGetStackHighWaterMark2(NULL));
		}
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_id, 0);
 800b74c:	2000      	movs	r0, #0
 800b74e:	f7f5 fccd 	bl	80010ec <opt_get_queue>
 800b752:	4603      	mov	r3, r0
 800b754:	2200      	movs	r2, #0
 800b756:	2102      	movs	r1, #2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fc f8a1 	bl	80078a0 <osMessagePut>
	for ( ;; ) {
 800b75e:	e4cc      	b.n	800b0fa <t_motor+0x8a>
 800b760:	20010660 	.word	0x20010660
 800b764:	200106d8 	.word	0x200106d8
 800b768:	d1b71759 	.word	0xd1b71759
 800b76c:	08011c5c 	.word	0x08011c5c
 800b770:	08011cf8 	.word	0x08011cf8

0800b774 <_stop_timer>:
	}
	/* USER CODE END t_motor */
}

static void _stop_timer()
{
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0
	osTimerStop(mtr_get_timer(Tim_Motor_id));
 800b778:	2001      	movs	r0, #1
 800b77a:	f7f5 fcf7 	bl	800116c <mtr_get_timer>
 800b77e:	4603      	mov	r3, r0
 800b780:	4618      	mov	r0, r3
 800b782:	f7fb feaf 	bl	80074e4 <osTimerStop>
	g_timer_in_used = 0;
 800b786:	4b04      	ldr	r3, [pc, #16]	; (800b798 <_stop_timer+0x24>)
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
	tim_user = timer_used_by_none;
 800b78c:	4b03      	ldr	r3, [pc, #12]	; (800b79c <_stop_timer+0x28>)
 800b78e:	2200      	movs	r2, #0
 800b790:	701a      	strb	r2, [r3, #0]
}
 800b792:	bf00      	nop
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200106d1 	.word	0x200106d1
 800b79c:	200106d0 	.word	0x200106d0

0800b7a0 <t_motor_delete_task>:

static void t_motor_delete_task(const uint8_t living_task)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
	if (living_task == TASK_MOTOR_MANUAL_id) {
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d117      	bne.n	800b7e0 <t_motor_delete_task+0x40>
		vTaskDelete(TMoveManualHandle);
 800b7b0:	4b50      	ldr	r3, [pc, #320]	; (800b8f4 <t_motor_delete_task+0x154>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fd fb61 	bl	8008e7c <vTaskDelete>
		LOG("delete t_motor_manual task\r\n");
 800b7ba:	f7fb fdcc 	bl	8007356 <osKernelSysTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4b4d      	ldr	r3, [pc, #308]	; (800b8f8 <t_motor_delete_task+0x158>)
 800b7c2:	fba3 1302 	umull	r1, r3, r3, r2
 800b7c6:	0b5b      	lsrs	r3, r3, #13
 800b7c8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b7cc:	fb01 f303 	mul.w	r3, r1, r3
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4848      	ldr	r0, [pc, #288]	; (800b8fc <t_motor_delete_task+0x15c>)
 800b7da:	f003 fe79 	bl	800f4d0 <iprintf>
	}
	else if (living_task == TASK_MOTOR_HOMING_id) {
		vTaskDelete(TMoveHomingHandle);
		LOG("delete t_motor_homing task\r\n");
	}
}
 800b7de:	e085      	b.n	800b8ec <t_motor_delete_task+0x14c>
	else if (living_task == TASK_MOTOR_TRAVEL_id) {
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d117      	bne.n	800b816 <t_motor_delete_task+0x76>
		vTaskDelete(TMoveTravelHandle);
 800b7e6:	4b46      	ldr	r3, [pc, #280]	; (800b900 <t_motor_delete_task+0x160>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fd fb46 	bl	8008e7c <vTaskDelete>
		LOG("delete t_motor_travel task\r\n");
 800b7f0:	f7fb fdb1 	bl	8007356 <osKernelSysTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	4b40      	ldr	r3, [pc, #256]	; (800b8f8 <t_motor_delete_task+0x158>)
 800b7f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b7fc:	0b5b      	lsrs	r3, r3, #13
 800b7fe:	f242 7110 	movw	r1, #10000	; 0x2710
 800b802:	fb01 f303 	mul.w	r3, r1, r3
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b80c:	4619      	mov	r1, r3
 800b80e:	483d      	ldr	r0, [pc, #244]	; (800b904 <t_motor_delete_task+0x164>)
 800b810:	f003 fe5e 	bl	800f4d0 <iprintf>
}
 800b814:	e06a      	b.n	800b8ec <t_motor_delete_task+0x14c>
	else if (living_task == TASK_MOTOR_STAB_id) {
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d117      	bne.n	800b84c <t_motor_delete_task+0xac>
		vTaskDelete(TMoveStabHandle);
 800b81c:	4b3a      	ldr	r3, [pc, #232]	; (800b908 <t_motor_delete_task+0x168>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4618      	mov	r0, r3
 800b822:	f7fd fb2b 	bl	8008e7c <vTaskDelete>
		LOG("delete t_motor_stab task\r\n");
 800b826:	f7fb fd96 	bl	8007356 <osKernelSysTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	4b32      	ldr	r3, [pc, #200]	; (800b8f8 <t_motor_delete_task+0x158>)
 800b82e:	fba3 1302 	umull	r1, r3, r3, r2
 800b832:	0b5b      	lsrs	r3, r3, #13
 800b834:	f242 7110 	movw	r1, #10000	; 0x2710
 800b838:	fb01 f303 	mul.w	r3, r1, r3
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b842:	4619      	mov	r1, r3
 800b844:	4831      	ldr	r0, [pc, #196]	; (800b90c <t_motor_delete_task+0x16c>)
 800b846:	f003 fe43 	bl	800f4d0 <iprintf>
}
 800b84a:	e04f      	b.n	800b8ec <t_motor_delete_task+0x14c>
	else if (living_task == TASK_MOTOR_TRACK_id) {
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d117      	bne.n	800b882 <t_motor_delete_task+0xe2>
		vTaskDelete(TMoveTrackHandle);
 800b852:	4b2f      	ldr	r3, [pc, #188]	; (800b910 <t_motor_delete_task+0x170>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4618      	mov	r0, r3
 800b858:	f7fd fb10 	bl	8008e7c <vTaskDelete>
		LOG("delete t_motor_track task\r\n");
 800b85c:	f7fb fd7b 	bl	8007356 <osKernelSysTick>
 800b860:	4602      	mov	r2, r0
 800b862:	4b25      	ldr	r3, [pc, #148]	; (800b8f8 <t_motor_delete_task+0x158>)
 800b864:	fba3 1302 	umull	r1, r3, r3, r2
 800b868:	0b5b      	lsrs	r3, r3, #13
 800b86a:	f242 7110 	movw	r1, #10000	; 0x2710
 800b86e:	fb01 f303 	mul.w	r3, r1, r3
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800b878:	4619      	mov	r1, r3
 800b87a:	4826      	ldr	r0, [pc, #152]	; (800b914 <t_motor_delete_task+0x174>)
 800b87c:	f003 fe28 	bl	800f4d0 <iprintf>
}
 800b880:	e034      	b.n	800b8ec <t_motor_delete_task+0x14c>
	else if (living_task == TASK_MOTOR_MEMORY_id) {
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	2b05      	cmp	r3, #5
 800b886:	d117      	bne.n	800b8b8 <t_motor_delete_task+0x118>
		vTaskDelete(TMoveMemoryHandle);
 800b888:	4b23      	ldr	r3, [pc, #140]	; (800b918 <t_motor_delete_task+0x178>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fd faf5 	bl	8008e7c <vTaskDelete>
		LOG("delete t_motor_memory task\r\n");
 800b892:	f7fb fd60 	bl	8007356 <osKernelSysTick>
 800b896:	4602      	mov	r2, r0
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <t_motor_delete_task+0x158>)
 800b89a:	fba3 1302 	umull	r1, r3, r3, r2
 800b89e:	0b5b      	lsrs	r3, r3, #13
 800b8a0:	f242 7110 	movw	r1, #10000	; 0x2710
 800b8a4:	fb01 f303 	mul.w	r3, r1, r3
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	481a      	ldr	r0, [pc, #104]	; (800b91c <t_motor_delete_task+0x17c>)
 800b8b2:	f003 fe0d 	bl	800f4d0 <iprintf>
}
 800b8b6:	e019      	b.n	800b8ec <t_motor_delete_task+0x14c>
	else if (living_task == TASK_MOTOR_HOMING_id) {
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	2b06      	cmp	r3, #6
 800b8bc:	d116      	bne.n	800b8ec <t_motor_delete_task+0x14c>
		vTaskDelete(TMoveHomingHandle);
 800b8be:	4b18      	ldr	r3, [pc, #96]	; (800b920 <t_motor_delete_task+0x180>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fd fada 	bl	8008e7c <vTaskDelete>
		LOG("delete t_motor_homing task\r\n");
 800b8c8:	f7fb fd45 	bl	8007356 <osKernelSysTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <t_motor_delete_task+0x158>)
 800b8d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b8d4:	0b5b      	lsrs	r3, r3, #13
 800b8d6:	f242 7110 	movw	r1, #10000	; 0x2710
 800b8da:	fb01 f303 	mul.w	r3, r1, r3
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	f44f 72a1 	mov.w	r2, #322	; 0x142
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	480f      	ldr	r0, [pc, #60]	; (800b924 <t_motor_delete_task+0x184>)
 800b8e8:	f003 fdf2 	bl	800f4d0 <iprintf>
}
 800b8ec:	bf00      	nop
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	200106b8 	.word	0x200106b8
 800b8f8:	d1b71759 	.word	0xd1b71759
 800b8fc:	08011d28 	.word	0x08011d28
 800b900:	200106bc 	.word	0x200106bc
 800b904:	08011d54 	.word	0x08011d54
 800b908:	200106c0 	.word	0x200106c0
 800b90c:	08011d80 	.word	0x08011d80
 800b910:	200106c4 	.word	0x200106c4
 800b914:	08011dac 	.word	0x08011dac
 800b918:	200106c8 	.word	0x200106c8
 800b91c:	08011dd8 	.word	0x08011dd8
 800b920:	200106cc 	.word	0x200106cc
 800b924:	08011e04 	.word	0x08011e04

0800b928 <t_motor_change_task>:

static void t_motor_change_task(const uint8_t task_tobe_revived)
{
 800b928:	b5b0      	push	{r4, r5, r7, lr}
 800b92a:	b0a0      	sub	sp, #128	; 0x80
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800b932:	f7fe ff87 	bl	800a844 <vPortEnterCritical>

	if (task_tobe_revived == TASK_MOTOR_MANUAL_id) {
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d11e      	bne.n	800b97a <t_motor_change_task+0x52>
		if (motor.current_task_id != task_tobe_revived)
 800b93c:	4b70      	ldr	r3, [pc, #448]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b93e:	785b      	ldrb	r3, [r3, #1]
 800b940:	79fa      	ldrb	r2, [r7, #7]
 800b942:	429a      	cmp	r2, r3
 800b944:	d004      	beq.n	800b950 <t_motor_change_task+0x28>
			t_motor_delete_task(motor.current_task_id);
 800b946:	4b6e      	ldr	r3, [pc, #440]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b948:	785b      	ldrb	r3, [r3, #1]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff ff28 	bl	800b7a0 <t_motor_delete_task>
		/* definition and creation of TMoveManual */
		osThreadDef(TMoveManual, t_motor_manual, osPriorityBelowNormal, 0, 512);
 800b950:	4b6c      	ldr	r3, [pc, #432]	; (800bb04 <t_motor_change_task+0x1dc>)
 800b952:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800b956:	461d      	mov	r5, r3
 800b958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b95a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	6023      	str	r3, [r4, #0]
		TMoveManualHandle = osThreadCreate(osThread(TMoveManual), NULL);
 800b960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b964:	2100      	movs	r1, #0
 800b966:	4618      	mov	r0, r3
 800b968:	f7fb fd05 	bl	8007376 <osThreadCreate>
 800b96c:	4603      	mov	r3, r0
 800b96e:	4a66      	ldr	r2, [pc, #408]	; (800bb08 <t_motor_change_task+0x1e0>)
 800b970:	6013      	str	r3, [r2, #0]
		motor.current_task_id = task_tobe_revived;
 800b972:	4a63      	ldr	r2, [pc, #396]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	7053      	strb	r3, [r2, #1]
 800b978:	e0a8      	b.n	800bacc <t_motor_change_task+0x1a4>
	}
	else if (task_tobe_revived == TASK_MOTOR_TRAVEL_id) {
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d11e      	bne.n	800b9be <t_motor_change_task+0x96>
		if (motor.current_task_id != task_tobe_revived)
 800b980:	4b5f      	ldr	r3, [pc, #380]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b982:	785b      	ldrb	r3, [r3, #1]
 800b984:	79fa      	ldrb	r2, [r7, #7]
 800b986:	429a      	cmp	r2, r3
 800b988:	d004      	beq.n	800b994 <t_motor_change_task+0x6c>
			t_motor_delete_task(motor.current_task_id);
 800b98a:	4b5d      	ldr	r3, [pc, #372]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff ff06 	bl	800b7a0 <t_motor_delete_task>
		/* definition and creation of TMoveTravel */
		osThreadDef(TMoveTravel, t_motor_travel, osPriorityBelowNormal, 0, 512);
 800b994:	4b5d      	ldr	r3, [pc, #372]	; (800bb0c <t_motor_change_task+0x1e4>)
 800b996:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800b99a:	461d      	mov	r5, r3
 800b99c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b99e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	6023      	str	r3, [r4, #0]
		TMoveTravelHandle = osThreadCreate(osThread(TMoveTravel), NULL);
 800b9a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fb fce3 	bl	8007376 <osThreadCreate>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	4a57      	ldr	r2, [pc, #348]	; (800bb10 <t_motor_change_task+0x1e8>)
 800b9b4:	6013      	str	r3, [r2, #0]
		motor.current_task_id = task_tobe_revived;
 800b9b6:	4a52      	ldr	r2, [pc, #328]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	7053      	strb	r3, [r2, #1]
 800b9bc:	e086      	b.n	800bacc <t_motor_change_task+0x1a4>
	}
	else if (task_tobe_revived == TASK_MOTOR_STAB_id) {
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d11e      	bne.n	800ba02 <t_motor_change_task+0xda>
		if (motor.current_task_id != task_tobe_revived)
 800b9c4:	4b4e      	ldr	r3, [pc, #312]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b9c6:	785b      	ldrb	r3, [r3, #1]
 800b9c8:	79fa      	ldrb	r2, [r7, #7]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d004      	beq.n	800b9d8 <t_motor_change_task+0xb0>
			t_motor_delete_task(motor.current_task_id);
 800b9ce:	4b4c      	ldr	r3, [pc, #304]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b9d0:	785b      	ldrb	r3, [r3, #1]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fee4 	bl	800b7a0 <t_motor_delete_task>
		/* definition and creation of TMoveStab */
		osThreadDef(TMoveStab, t_motor_stab, osPriorityBelowNormal, 0, 512);
 800b9d8:	4b4e      	ldr	r3, [pc, #312]	; (800bb14 <t_motor_change_task+0x1ec>)
 800b9da:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800b9de:	461d      	mov	r5, r3
 800b9e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	6023      	str	r3, [r4, #0]
		TMoveStabHandle = osThreadCreate(osThread(TMoveStab), NULL);
 800b9e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fb fcc1 	bl	8007376 <osThreadCreate>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	4a48      	ldr	r2, [pc, #288]	; (800bb18 <t_motor_change_task+0x1f0>)
 800b9f8:	6013      	str	r3, [r2, #0]
		motor.current_task_id = task_tobe_revived;
 800b9fa:	4a41      	ldr	r2, [pc, #260]	; (800bb00 <t_motor_change_task+0x1d8>)
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	7053      	strb	r3, [r2, #1]
 800ba00:	e064      	b.n	800bacc <t_motor_change_task+0x1a4>
	}
	else if (task_tobe_revived == TASK_MOTOR_TRACK_id) {
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d11e      	bne.n	800ba46 <t_motor_change_task+0x11e>
		if (motor.current_task_id != task_tobe_revived)
 800ba08:	4b3d      	ldr	r3, [pc, #244]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	79fa      	ldrb	r2, [r7, #7]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d004      	beq.n	800ba1c <t_motor_change_task+0xf4>
			t_motor_delete_task(motor.current_task_id);
 800ba12:	4b3b      	ldr	r3, [pc, #236]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fec2 	bl	800b7a0 <t_motor_delete_task>
		/* definition and creation of TMoveTrack */
		osThreadDef(TMoveTrack, t_motor_track, osPriorityBelowNormal, 0, 512);
 800ba1c:	4b3f      	ldr	r3, [pc, #252]	; (800bb1c <t_motor_change_task+0x1f4>)
 800ba1e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ba22:	461d      	mov	r5, r3
 800ba24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	6023      	str	r3, [r4, #0]
		TMoveTrackHandle = osThreadCreate(osThread(TMoveTrack), NULL);
 800ba2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fb fc9f 	bl	8007376 <osThreadCreate>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4a39      	ldr	r2, [pc, #228]	; (800bb20 <t_motor_change_task+0x1f8>)
 800ba3c:	6013      	str	r3, [r2, #0]
		motor.current_task_id = task_tobe_revived;
 800ba3e:	4a30      	ldr	r2, [pc, #192]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	7053      	strb	r3, [r2, #1]
 800ba44:	e042      	b.n	800bacc <t_motor_change_task+0x1a4>
	}
	else if (task_tobe_revived == TASK_MOTOR_MEMORY_id) {
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	2b05      	cmp	r3, #5
 800ba4a:	d11e      	bne.n	800ba8a <t_motor_change_task+0x162>
		if (motor.current_task_id != task_tobe_revived)
 800ba4c:	4b2c      	ldr	r3, [pc, #176]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba4e:	785b      	ldrb	r3, [r3, #1]
 800ba50:	79fa      	ldrb	r2, [r7, #7]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d004      	beq.n	800ba60 <t_motor_change_task+0x138>
			t_motor_delete_task(motor.current_task_id);
 800ba56:	4b2a      	ldr	r3, [pc, #168]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba58:	785b      	ldrb	r3, [r3, #1]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff fea0 	bl	800b7a0 <t_motor_delete_task>
		/* definition and creation of TMoveMemory */
		osThreadDef(TMoveMemory, t_motor_memory, osPriorityBelowNormal, 0, 512);
 800ba60:	4b30      	ldr	r3, [pc, #192]	; (800bb24 <t_motor_change_task+0x1fc>)
 800ba62:	f107 041c 	add.w	r4, r7, #28
 800ba66:	461d      	mov	r5, r3
 800ba68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	6023      	str	r3, [r4, #0]
		TMoveMemoryHandle = osThreadCreate(osThread(TMoveMemory), NULL);
 800ba70:	f107 031c 	add.w	r3, r7, #28
 800ba74:	2100      	movs	r1, #0
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fb fc7d 	bl	8007376 <osThreadCreate>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	4a2a      	ldr	r2, [pc, #168]	; (800bb28 <t_motor_change_task+0x200>)
 800ba80:	6013      	str	r3, [r2, #0]
		motor.current_task_id = task_tobe_revived;
 800ba82:	4a1f      	ldr	r2, [pc, #124]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	7053      	strb	r3, [r2, #1]
 800ba88:	e020      	b.n	800bacc <t_motor_change_task+0x1a4>
	}
	else if (task_tobe_revived == TASK_MOTOR_HOMING_id) {
 800ba8a:	79fb      	ldrb	r3, [r7, #7]
 800ba8c:	2b06      	cmp	r3, #6
 800ba8e:	d11d      	bne.n	800bacc <t_motor_change_task+0x1a4>
		if (motor.current_task_id != task_tobe_revived)
 800ba90:	4b1b      	ldr	r3, [pc, #108]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	79fa      	ldrb	r2, [r7, #7]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d004      	beq.n	800baa4 <t_motor_change_task+0x17c>
			t_motor_delete_task(motor.current_task_id);
 800ba9a:	4b19      	ldr	r3, [pc, #100]	; (800bb00 <t_motor_change_task+0x1d8>)
 800ba9c:	785b      	ldrb	r3, [r3, #1]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fe7e 	bl	800b7a0 <t_motor_delete_task>
		/* definition and creation of TMoveHoming */
		osThreadDef(TMoveHoming, t_motor_homing, osPriorityBelowNormal, 0, 512);
 800baa4:	4b21      	ldr	r3, [pc, #132]	; (800bb2c <t_motor_change_task+0x204>)
 800baa6:	f107 0408 	add.w	r4, r7, #8
 800baaa:	461d      	mov	r5, r3
 800baac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800baae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	6023      	str	r3, [r4, #0]
		TMoveHomingHandle = osThreadCreate(osThread(TMoveHoming), NULL);
 800bab4:	f107 0308 	add.w	r3, r7, #8
 800bab8:	2100      	movs	r1, #0
 800baba:	4618      	mov	r0, r3
 800babc:	f7fb fc5b 	bl	8007376 <osThreadCreate>
 800bac0:	4603      	mov	r3, r0
 800bac2:	4a1b      	ldr	r2, [pc, #108]	; (800bb30 <t_motor_change_task+0x208>)
 800bac4:	6013      	str	r3, [r2, #0]
		motor.current_task_id = task_tobe_revived;
 800bac6:	4a0e      	ldr	r2, [pc, #56]	; (800bb00 <t_motor_change_task+0x1d8>)
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	7053      	strb	r3, [r2, #1]
	}

	taskEXIT_CRITICAL();LOG("[M]current task: %d\r\n", motor.current_task_id);
 800bacc:	f7fe feea 	bl	800a8a4 <vPortExitCritical>
 800bad0:	f7fb fc41 	bl	8007356 <osKernelSysTick>
 800bad4:	4603      	mov	r3, r0
 800bad6:	4a17      	ldr	r2, [pc, #92]	; (800bb34 <t_motor_change_task+0x20c>)
 800bad8:	fba2 1203 	umull	r1, r2, r2, r3
 800badc:	0b51      	lsrs	r1, r2, #13
 800bade:	f242 7210 	movw	r2, #10000	; 0x2710
 800bae2:	fb01 f202 	mul.w	r2, r1, r2
 800bae6:	1a99      	subs	r1, r3, r2
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <t_motor_change_task+0x1d8>)
 800baea:	785b      	ldrb	r3, [r3, #1]
 800baec:	f240 127b 	movw	r2, #379	; 0x17b
 800baf0:	4811      	ldr	r0, [pc, #68]	; (800bb38 <t_motor_change_task+0x210>)
 800baf2:	f003 fced 	bl	800f4d0 <iprintf>
}
 800baf6:	bf00      	nop
 800baf8:	3780      	adds	r7, #128	; 0x80
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bdb0      	pop	{r4, r5, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20010660 	.word	0x20010660
 800bb04:	08011e54 	.word	0x08011e54
 800bb08:	200106b8 	.word	0x200106b8
 800bb0c:	08011e68 	.word	0x08011e68
 800bb10:	200106bc 	.word	0x200106bc
 800bb14:	08011e7c 	.word	0x08011e7c
 800bb18:	200106c0 	.word	0x200106c0
 800bb1c:	08011e90 	.word	0x08011e90
 800bb20:	200106c4 	.word	0x200106c4
 800bb24:	08011ea4 	.word	0x08011ea4
 800bb28:	200106c8 	.word	0x200106c8
 800bb2c:	08011eb8 	.word	0x08011eb8
 800bb30:	200106cc 	.word	0x200106cc
 800bb34:	d1b71759 	.word	0xd1b71759
 800bb38:	08011e30 	.word	0x08011e30

0800bb3c <t_motor_init>:

static void t_motor_init(const uint32_t delay)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7fb fc59 	bl	80073fc <osDelay>
	motor.pan_state.pos = motor.tilt_state.pos = 0;
 800bb4a:	4b19      	ldr	r3, [pc, #100]	; (800bbb0 <t_motor_init+0x74>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	651a      	str	r2, [r3, #80]	; 0x50
 800bb50:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <t_motor_init+0x74>)
 800bb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb54:	4a16      	ldr	r2, [pc, #88]	; (800bbb0 <t_motor_init+0x74>)
 800bb56:	63d3      	str	r3, [r2, #60]	; 0x3c

	tim_user = timer_used_by_init;
 800bb58:	4b16      	ldr	r3, [pc, #88]	; (800bbb4 <t_motor_init+0x78>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	701a      	strb	r2, [r3, #0]
	g_init_timeout = osKernelSysTick() + MTR_INIT_TIMEOUT;
 800bb5e:	f7fb fbfa 	bl	8007356 <osKernelSysTick>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800bb68:	3360      	adds	r3, #96	; 0x60
 800bb6a:	4a13      	ldr	r2, [pc, #76]	; (800bbb8 <t_motor_init+0x7c>)
 800bb6c:	6013      	str	r3, [r2, #0]
	osTimerStart(mtr_get_timer(Tim_Motor_id), 500);
 800bb6e:	2001      	movs	r0, #1
 800bb70:	f7f5 fafc 	bl	800116c <mtr_get_timer>
 800bb74:	4603      	mov	r3, r0
 800bb76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fb fc6e 	bl	800745c <osTimerStart>
	while (hal_motor_init(motor.enable) != HAL_OK) {
 800bb80:	e007      	b.n	800bb92 <t_motor_init+0x56>
		LOG_E("motor init failed!\r\n");
 800bb82:	f240 1187 	movw	r1, #391	; 0x187
 800bb86:	480d      	ldr	r0, [pc, #52]	; (800bbbc <t_motor_init+0x80>)
 800bb88:	f003 fca2 	bl	800f4d0 <iprintf>
		osDelay(10);
 800bb8c:	200a      	movs	r0, #10
 800bb8e:	f7fb fc35 	bl	80073fc <osDelay>
	while (hal_motor_init(motor.enable) != HAL_OK) {
 800bb92:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <t_motor_init+0x74>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 ff0c 	bl	800c9b4 <hal_motor_init>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1ef      	bne.n	800bb82 <t_motor_init+0x46>
	}
	_stop_timer();
 800bba2:	f7ff fde7 	bl	800b774 <_stop_timer>
}
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20010660 	.word	0x20010660
 800bbb4:	200106d0 	.word	0x200106d0
 800bbb8:	200106d4 	.word	0x200106d4
 800bbbc:	08011ecc 	.word	0x08011ecc

0800bbc0 <mtr_set_power>:

uint8_t mtr_set_power(Motor_t *mtr)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]

	if (is_motor_az_enable()) {
 800bbcc:	4b1e      	ldr	r3, [pc, #120]	; (800bc48 <mtr_set_power+0x88>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d015      	beq.n	800bc04 <mtr_set_power+0x44>
		if (mtr->pan_command.power_enable != mtr->pan_state.power) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	791a      	ldrb	r2, [r3, #4]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d00e      	beq.n	800bc04 <mtr_set_power+0x44>
			mtr->pan_state.power = mtr->pan_command.power_enable;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	791a      	ldrb	r2, [r3, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hal_motor_set_pan_power(mtr->pan_state.power);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f001 f928 	bl	800ce4c <hal_motor_set_pan_power>
			ret |= MTR_AZ_ENABLE;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (is_motor_el_enable()) {
 800bc04:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <mtr_set_power+0x88>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d015      	beq.n	800bc3c <mtr_set_power+0x7c>
		if (mtr->tilt_command.power_enable != mtr->tilt_state.power) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7e1a      	ldrb	r2, [r3, #24]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d00e      	beq.n	800bc3c <mtr_set_power+0x7c>
			mtr->tilt_state.power = mtr->tilt_command.power_enable;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7e1a      	ldrb	r2, [r3, #24]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			hal_motor_set_tilt_power(mtr->tilt_state.power);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 f942 	bl	800ceb8 <hal_motor_set_tilt_power>
			ret |= MTR_EL_ENABLE;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	f043 0302 	orr.w	r3, r3, #2
 800bc3a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20010660 	.word	0x20010660

0800bc4c <mtr_send_to_bus>:

static void mtr_send_to_bus()
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af02      	add	r7, sp, #8
	/* ================ */
	Body_motor_status_t _pan_state;
	Body_motor_status_t _tilt_state;
	MAIL_Bus_t *state_mail;

	*(uint8_t*) &_pan_state = 0;
 800bc52:	1d3b      	adds	r3, r7, #4
 800bc54:	2200      	movs	r2, #0
 800bc56:	701a      	strb	r2, [r3, #0]
	*(uint8_t*) &_tilt_state = 0;
 800bc58:	463b      	mov	r3, r7
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	701a      	strb	r2, [r3, #0]
	_pan_state.motorEnable = motor.pan_state.power;
 800bc5e:	4b62      	ldr	r3, [pc, #392]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bc60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	793b      	ldrb	r3, [r7, #4]
 800bc6c:	f362 0300 	bfi	r3, r2, #0, #1
 800bc70:	713b      	strb	r3, [r7, #4]
	if ((motor.pan_state.statusword & 0x4000) != 0)
 800bc72:	4b5d      	ldr	r3, [pc, #372]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bc74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <mtr_send_to_bus+0x3a>
		_pan_state.initialAngleSuccess = 1;
 800bc7e:	793b      	ldrb	r3, [r7, #4]
 800bc80:	f043 0302 	orr.w	r3, r3, #2
 800bc84:	713b      	strb	r3, [r7, #4]
	if ((motor.pan_state.statusword & 0x8) != 0)
 800bc86:	4b58      	ldr	r3, [pc, #352]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bc88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <mtr_send_to_bus+0x5c>
		_pan_state.fault |= 0b1;
 800bc92:	793b      	ldrb	r3, [r7, #4]
 800bc94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	f043 0301 	orr.w	r3, r3, #1
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	793b      	ldrb	r3, [r7, #4]
 800bca2:	f362 03c4 	bfi	r3, r2, #3, #2
 800bca6:	713b      	strb	r3, [r7, #4]
	if ((motor.pan_state.statusword & 0x2000) != 0)
 800bca8:	4b4f      	ldr	r3, [pc, #316]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bcaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <mtr_send_to_bus+0x7e>
		_pan_state.fault |= 0b10;
 800bcb4:	793b      	ldrb	r3, [r7, #4]
 800bcb6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f043 0302 	orr.w	r3, r3, #2
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	793b      	ldrb	r3, [r7, #4]
 800bcc4:	f362 03c4 	bfi	r3, r2, #3, #2
 800bcc8:	713b      	strb	r3, [r7, #4]

	_tilt_state.motorEnable = motor.tilt_state.power;
 800bcca:	4b47      	ldr	r3, [pc, #284]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	783b      	ldrb	r3, [r7, #0]
 800bcd8:	f362 0300 	bfi	r3, r2, #0, #1
 800bcdc:	703b      	strb	r3, [r7, #0]
	if ((motor.tilt_state.statusword & 0x4000) != 0)
 800bcde:	4b42      	ldr	r3, [pc, #264]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d003      	beq.n	800bcf4 <mtr_send_to_bus+0xa8>
		_tilt_state.initialAngleSuccess = 1;
 800bcec:	783b      	ldrb	r3, [r7, #0]
 800bcee:	f043 0302 	orr.w	r3, r3, #2
 800bcf2:	703b      	strb	r3, [r7, #0]
	if ((motor.tilt_state.statusword & 0x8) != 0)
 800bcf4:	4b3c      	ldr	r3, [pc, #240]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bcf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcfa:	f003 0308 	and.w	r3, r3, #8
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <mtr_send_to_bus+0xcc>
		_tilt_state.fault |= 0b1;
 800bd02:	783b      	ldrb	r3, [r7, #0]
 800bd04:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	f043 0301 	orr.w	r3, r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	783b      	ldrb	r3, [r7, #0]
 800bd12:	f362 03c4 	bfi	r3, r2, #3, #2
 800bd16:	703b      	strb	r3, [r7, #0]
	if ((motor.tilt_state.statusword & 0x2000) != 0)
 800bd18:	4b33      	ldr	r3, [pc, #204]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bd1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <mtr_send_to_bus+0xf0>
		_tilt_state.fault |= 0b10;
 800bd26:	783b      	ldrb	r3, [r7, #0]
 800bd28:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	f043 0302 	orr.w	r3, r3, #2
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	783b      	ldrb	r3, [r7, #0]
 800bd36:	f362 03c4 	bfi	r3, r2, #3, #2
 800bd3a:	703b      	strb	r3, [r7, #0]

	/* allocate memory; receiver must be free it */
	state_mail = osMailAlloc(mtr_get_mail(Mail_Bus_id), 0);
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f7f5 f9e9 	bl	8001114 <mtr_get_mail>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2100      	movs	r1, #0
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fb feb6 	bl	8007ab8 <osMailAlloc>
 800bd4c:	60f8      	str	r0, [r7, #12]
	state_mail->sender_id = Bus_Sender_Motor_State_id;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]
	state_mail->param.motor.state.mode = motor.mode_state;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4a24      	ldr	r2, [pc, #144]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bd58:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bd5c:	711a      	strb	r2, [r3, #4]
	state_mail->param.motor.state.pan_state = _pan_state;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	793a      	ldrb	r2, [r7, #4]
 800bd62:	715a      	strb	r2, [r3, #5]
	state_mail->param.motor.state.tilt_state = _tilt_state;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	783a      	ldrb	r2, [r7, #0]
 800bd68:	719a      	strb	r2, [r3, #6]

	/* send mail queue*/
	osMailPut(mtr_get_mail(Mail_Bus_id), state_mail);
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	f7f5 f9d2 	bl	8001114 <mtr_get_mail>
 800bd70:	4603      	mov	r3, r0
 800bd72:	68f9      	ldr	r1, [r7, #12]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fb feb5 	bl	8007ae4 <osMailPut>
	/* send motor position */
	/* =================== */
	MAIL_Bus_t *pos_mail;

	/* allocate memory; receiver must be free it */
	pos_mail = osMailAlloc(mtr_get_mail(Mail_Bus_id), 0);
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	f7f5 f9ca 	bl	8001114 <mtr_get_mail>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2100      	movs	r1, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fb fe97 	bl	8007ab8 <osMailAlloc>
 800bd8a:	60b8      	str	r0, [r7, #8]
	pos_mail->sender_id = Bus_Sender_Motor_Position_id;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	701a      	strb	r2, [r3, #0]
	pos_mail->param.motor.position.pan = motor.pan_state.pos;
 800bd92:	4b15      	ldr	r3, [pc, #84]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bd94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	605a      	str	r2, [r3, #4]
	pos_mail->param.motor.position.tilt = motor.tilt_state.pos;
 800bd9a:	4b13      	ldr	r3, [pc, #76]	; (800bde8 <mtr_send_to_bus+0x19c>)
 800bd9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	609a      	str	r2, [r3, #8]

	LOG("PT= %ld,%ld\r\n", pos_mail->param.motor.position.pan, pos_mail->param.motor.position.tilt);
 800bda2:	f7fb fad8 	bl	8007356 <osKernelSysTick>
 800bda6:	4603      	mov	r3, r0
 800bda8:	4a10      	ldr	r2, [pc, #64]	; (800bdec <mtr_send_to_bus+0x1a0>)
 800bdaa:	fba2 1203 	umull	r1, r2, r2, r3
 800bdae:	0b51      	lsrs	r1, r2, #13
 800bdb0:	f242 7210 	movw	r2, #10000	; 0x2710
 800bdb4:	fb01 f202 	mul.w	r2, r1, r2
 800bdb8:	1a99      	subs	r1, r3, r2
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	685a      	ldr	r2, [r3, #4]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800bdca:	4809      	ldr	r0, [pc, #36]	; (800bdf0 <mtr_send_to_bus+0x1a4>)
 800bdcc:	f003 fb80 	bl	800f4d0 <iprintf>

	/* send mail queue*/
	osMailPut(mtr_get_mail(Mail_Bus_id), pos_mail);
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	f7f5 f99f 	bl	8001114 <mtr_get_mail>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fb fe82 	bl	8007ae4 <osMailPut>
}
 800bde0:	bf00      	nop
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20010660 	.word	0x20010660
 800bdec:	d1b71759 	.word	0xd1b71759
 800bdf0:	08011ef0 	.word	0x08011ef0

0800bdf4 <mtr_speed_to_c>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

static int32_t mtr_speed_to_c(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800bdf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bdf8:	b092      	sub	sp, #72	; 0x48
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6378      	str	r0, [r7, #52]	; 0x34
 800bdfe:	6339      	str	r1, [r7, #48]	; 0x30
 800be00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28
	int64_t atas = ((int64_t) x - in_min) * ((int64_t) out_max - out_min);
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	17da      	asrs	r2, r3, #31
 800be08:	623b      	str	r3, [r7, #32]
 800be0a:	627a      	str	r2, [r7, #36]	; 0x24
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	17da      	asrs	r2, r3, #31
 800be10:	613b      	str	r3, [r7, #16]
 800be12:	617a      	str	r2, [r7, #20]
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800be1a:	4602      	mov	r2, r0
 800be1c:	ebb3 0a02 	subs.w	sl, r3, r2
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	460a      	mov	r2, r1
 800be24:	eb63 0b02 	sbc.w	fp, r3, r2
 800be28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be2a:	17da      	asrs	r2, r3, #31
 800be2c:	61bb      	str	r3, [r7, #24]
 800be2e:	61fa      	str	r2, [r7, #28]
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	17da      	asrs	r2, r3, #31
 800be34:	60bb      	str	r3, [r7, #8]
 800be36:	60fa      	str	r2, [r7, #12]
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be3e:	4602      	mov	r2, r0
 800be40:	ebb3 0802 	subs.w	r8, r3, r2
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	460a      	mov	r2, r1
 800be48:	eb63 0902 	sbc.w	r9, r3, r2
 800be4c:	fb08 f20b 	mul.w	r2, r8, fp
 800be50:	fb0a f309 	mul.w	r3, sl, r9
 800be54:	4413      	add	r3, r2
 800be56:	fbaa 4508 	umull	r4, r5, sl, r8
 800be5a:	442b      	add	r3, r5
 800be5c:	461d      	mov	r5, r3
 800be5e:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800be62:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
	int32_t bawah = in_max - in_min;
 800be66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (bawah > 0)
 800be6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be70:	2b00      	cmp	r3, #0
 800be72:	dd0e      	ble.n	800be92 <mtr_speed_to_c+0x9e>
		return (uint32_t) ((atas / bawah) + out_min);
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be76:	17da      	asrs	r2, r3, #31
 800be78:	603b      	str	r3, [r7, #0]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800be84:	f7f4 feb8 	bl	8000bf8 <__aeabi_ldivmod>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	4413      	add	r3, r2
 800be90:	e000      	b.n	800be94 <mtr_speed_to_c+0xa0>

	return 1;
 800be92:	2301      	movs	r3, #1
}
 800be94:	4618      	mov	r0, r3
 800be96:	3748      	adds	r7, #72	; 0x48
 800be98:	46bd      	mov	sp, r7
 800be9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800bea0 <_man_pan_speed_to_c>:

/* mapping max_command(1000000) to RWS_MOTOR_PAN_MAX_SPEED(100000) */
static int32_t _man_pan_speed_to_c(int32_t speed)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	6078      	str	r0, [r7, #4]
	return mtr_speed_to_c(speed, -1000000, 1000000, -RWS_MOTOR_PAN_MAX_SPEED, RWS_MOTOR_PAN_MAX_SPEED);
 800bea8:	4b06      	ldr	r3, [pc, #24]	; (800bec4 <_man_pan_speed_to_c+0x24>)
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	4b06      	ldr	r3, [pc, #24]	; (800bec8 <_man_pan_speed_to_c+0x28>)
 800beae:	4a07      	ldr	r2, [pc, #28]	; (800becc <_man_pan_speed_to_c+0x2c>)
 800beb0:	4907      	ldr	r1, [pc, #28]	; (800bed0 <_man_pan_speed_to_c+0x30>)
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff ff9e 	bl	800bdf4 <mtr_speed_to_c>
 800beb8:	4603      	mov	r3, r0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	000186a0 	.word	0x000186a0
 800bec8:	fffe7960 	.word	0xfffe7960
 800becc:	000f4240 	.word	0x000f4240
 800bed0:	fff0bdc0 	.word	0xfff0bdc0

0800bed4 <_man_tilt_speed_to_c>:

/* mapping max_command(1000000) to RWS_MOTOR_TILT_MAX_SPEED (172032L) */
static int32_t _man_tilt_speed_to_c(int32_t speed)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af02      	add	r7, sp, #8
 800beda:	6078      	str	r0, [r7, #4]
	return mtr_speed_to_c(speed, -1000000L, 1000000L, -RWS_MOTOR_TILT_MAX_SPEED, RWS_MOTOR_TILT_MAX_SPEED);
 800bedc:	f44f 3328 	mov.w	r3, #172032	; 0x2a000
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <_man_tilt_speed_to_c+0x24>)
 800bee4:	4a05      	ldr	r2, [pc, #20]	; (800befc <_man_tilt_speed_to_c+0x28>)
 800bee6:	4906      	ldr	r1, [pc, #24]	; (800bf00 <_man_tilt_speed_to_c+0x2c>)
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff ff83 	bl	800bdf4 <mtr_speed_to_c>
 800beee:	4603      	mov	r3, r0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	fffd6000 	.word	0xfffd6000
 800befc:	000f4240 	.word	0x000f4240
 800bf00:	fff0bdc0 	.word	0xfff0bdc0

0800bf04 <t_motor_track>:
 */

#include "t_motor.h"

void t_motor_track(void const * argument)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN t_motor_track */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	f7fb fa75 	bl	80073fc <osDelay>
 800bf12:	e7fb      	b.n	800bf0c <t_motor_track+0x8>

0800bf14 <t_bus>:

BUS_Rx_Buffer_t bus_recv;
BUS_Tx_Buffer_t bus_send;

void t_bus(void const *argument)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b090      	sub	sp, #64	; 0x40
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_bus_recv */
	uint32_t _timer_state, _timer_pos, _timer_imu;
	uint8_t _send_motor_weapon_state[6];
	int32_t _pan = 0, _tilt = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf20:	2300      	movs	r3, #0
 800bf22:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t _yaw = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	857b      	strh	r3, [r7, #42]	; 0x2a
	int32_t _pitch = 0, _roll = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	623b      	str	r3, [r7, #32]

//	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);

	LOG("BUS init\r\n");
	bus_init();
 800bf30:	f000 fa86 	bl	800c440 <bus_init>
//	osThreadSetPriority(osThreadGetId(), osPriorityLow);

	osDelay(T_Bus_id);
 800bf34:	2001      	movs	r0, #1
 800bf36:	f7fb fa61 	bl	80073fc <osDelay>

	_timer_state = _timer_pos = _timer_imu = osKernelSysTick() + 100;
 800bf3a:	f7fb fa0c 	bl	8007356 <osKernelSysTick>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	3364      	adds	r3, #100	; 0x64
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
 800bf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf46:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Infinite loop */
	for ( ;; ) {
		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Bus_id), 10);
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f7f5 f8e1 	bl	8001114 <mtr_get_mail>
 800bf52:	4601      	mov	r1, r0
 800bf54:	f107 0308 	add.w	r3, r7, #8
 800bf58:	220a      	movs	r2, #10
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fb fe00 	bl	8007b60 <osMailGet>
		if (event.status == osEventMail) {
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d13f      	bne.n	800bfe6 <t_bus+0xd2>
			/* create buffer pointer to hold queue value */
			MAIL_Bus_t *pRMail;
			pRMail = event.value.p;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	61fb      	str	r3, [r7, #28]

			switch (pRMail->sender_id)
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d831      	bhi.n	800bfd6 <t_bus+0xc2>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <t_bus+0x64>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bfa7 	.word	0x0800bfa7
 800bf7c:	0800bfc9 	.word	0x0800bfc9
 800bf80:	0800bf89 	.word	0x0800bf89
 800bf84:	0800bfd7 	.word	0x0800bfd7
			{
			case Bus_Sender_Weapon_State_id:
				/* from weapon_send_to_bus -> t_weapon.c */
				_send_motor_weapon_state[5] = *(uint8_t*) &pRMail->param.weapon.state;
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	767b      	strb	r3, [r7, #25]
				_send_motor_weapon_state[6] = pRMail->param.weapon.munition_counter >> 8;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	0a1b      	lsrs	r3, r3, #8
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	76bb      	strb	r3, [r7, #26]
				_send_motor_weapon_state[7] = pRMail->param.weapon.munition_counter & 0xFF;
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	88db      	ldrh	r3, [r3, #6]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	76fb      	strb	r3, [r7, #27]
				break;
 800bfa4:	e017      	b.n	800bfd6 <t_bus+0xc2>
			case Bus_Sender_Motor_State_id:
				/* from mtr_send_to_bus() -> t_motor.c */
				_send_motor_weapon_state[0] = *(uint8_t*) &pRMail->param.motor.state.mode;
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	753b      	strb	r3, [r7, #20]
				_send_motor_weapon_state[1] = *(uint8_t*) &pRMail->param.motor.state.pan_state;
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	3305      	adds	r3, #5
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	757b      	strb	r3, [r7, #21]
				_send_motor_weapon_state[2] = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	75bb      	strb	r3, [r7, #22]
				_send_motor_weapon_state[3] = *(uint8_t*) &pRMail->param.motor.state.tilt_state;
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	3306      	adds	r3, #6
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	75fb      	strb	r3, [r7, #23]
				_send_motor_weapon_state[4] = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	763b      	strb	r3, [r7, #24]
				LOG("%02X %02X\r\n", _send_motor_weapon_state[0], _send_motor_weapon_state[1]);
				break;
 800bfc6:	e006      	b.n	800bfd6 <t_bus+0xc2>
			case Bus_Sender_Motor_Position_id:
				/* from mtr_send_to_bus() -> t_motor.c */
				_pan = pRMail->param.motor.position.pan;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	633b      	str	r3, [r7, #48]	; 0x30
				_tilt = pRMail->param.motor.position.tilt;
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				break;
 800bfd4:	bf00      	nop
			case Bus_Sender_Imu_id:
				break;
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Bus_id), pRMail);
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f7f5 f89c 	bl	8001114 <mtr_get_mail>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	69f9      	ldr	r1, [r7, #28]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fb fe31 	bl	8007c48 <osMailFree>
		}

		/* send motor & weapon state to panel */
		if (osKernelSysTick() >= _timer_state) {
 800bfe6:	f7fb f9b6 	bl	8007356 <osKernelSysTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d809      	bhi.n	800c006 <t_bus+0xf2>
			_timer_state = osKernelSysTick() + 100;
 800bff2:	f7fb f9b0 	bl	8007356 <osKernelSysTick>
 800bff6:	4603      	mov	r3, r0
 800bff8:	3364      	adds	r3, #100	; 0x64
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c

//			if (bus_send_status(_send_motor_weapon_state) != HAL_OK)
//				_timer_state = osKernelSysTick() + 1;
//			else
//				LOG("send status MW (%02X,%02X)\r\n", _send_motor_weapon_state[0], _send_motor_weapon_state[1]);
			if (bus_send_status(_send_motor_weapon_state) == HAL_OK)
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fa4d 	bl	800c4a0 <bus_send_status>
				LOG("send status MW (%02X,%02X)\r\n", _send_motor_weapon_state[0], _send_motor_weapon_state[0]);
		}

		/* send motor position to panel */
		if (osKernelSysTick() >= _timer_pos) {
 800c006:	f7fb f9a6 	bl	8007356 <osKernelSysTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	4293      	cmp	r3, r2
 800c010:	d808      	bhi.n	800c024 <t_bus+0x110>
			_timer_pos = osKernelSysTick() + 100;
 800c012:	f7fb f9a0 	bl	8007356 <osKernelSysTick>
 800c016:	4603      	mov	r3, r0
 800c018:	3364      	adds	r3, #100	; 0x64
 800c01a:	63bb      	str	r3, [r7, #56]	; 0x38

//			if (bus_send_position(_pan, _tilt) != HAL_OK)
//				_timer_pos = osKernelSysTick() + 1;
//			else
//				LOG("send position (%ld,%ld)\r\n", _pan, _tilt);
			if (bus_send_position(_pan, _tilt) == HAL_OK)
 800c01c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c01e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c020:	f000 fa52 	bl	800c4c8 <bus_send_position>
				LOG("send position (%ld,%ld)\r\n", _pan, _tilt);
		}

		/* send imu's platform to panel */
		if (osKernelSysTick() >= _timer_imu) {
 800c024:	f7fb f997 	bl	8007356 <osKernelSysTick>
 800c028:	4602      	mov	r2, r0
 800c02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d813      	bhi.n	800c058 <t_bus+0x144>
			_timer_imu = osKernelSysTick() + 100;
 800c030:	f7fb f991 	bl	8007356 <osKernelSysTick>
 800c034:	4603      	mov	r3, r0
 800c036:	3364      	adds	r3, #100	; 0x64
 800c038:	637b      	str	r3, [r7, #52]	; 0x34
			if (bus_send_imu(_yaw, _pitch, _roll) != HAL_OK)
 800c03a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c03e:	6a3a      	ldr	r2, [r7, #32]
 800c040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fa7a 	bl	800c53c <bus_send_imu>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <t_bus+0x144>
				_timer_imu = osKernelSysTick() + 1;
 800c04e:	f7fb f982 	bl	8007356 <osKernelSysTick>
 800c052:	4603      	mov	r3, r0
 800c054:	3301      	adds	r3, #1
 800c056:	637b      	str	r3, [r7, #52]	; 0x34

		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Bus_id, 0);
 800c058:	2000      	movs	r0, #0
 800c05a:	f7f5 f847 	bl	80010ec <opt_get_queue>
 800c05e:	4603      	mov	r3, r0
 800c060:	2200      	movs	r2, #0
 800c062:	2101      	movs	r1, #1
 800c064:	4618      	mov	r0, r3
 800c066:	f7fb fc1b 	bl	80078a0 <osMessagePut>
	for ( ;; ) {
 800c06a:	e76f      	b.n	800bf4c <t_bus+0x38>

0800c06c <t_manager>:
#	define LOG(str, ...)
#	define LOG_E(str, ...)
#endif	//if DEBUG_MANAGER==1

void t_manager(void const *argument)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_manager */
	LOG("created!\r\n");

	osThreadSetPriority(osThreadGetId(), osPriorityIdle);
 800c074:	f7fb f9a6 	bl	80073c4 <osThreadGetId>
 800c078:	4603      	mov	r3, r0
 800c07a:	f06f 0102 	mvn.w	r1, #2
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fb f9a7 	bl	80073d2 <osThreadSetPriority>

	osDelay(T_Manager_id);
 800c084:	200f      	movs	r0, #15
 800c086:	f7fb f9b9 	bl	80073fc <osDelay>
	/* Infinite loop */
	uint16_t allNotif = 0;
 800c08a:	2300      	movs	r3, #0
 800c08c:	82fb      	strh	r3, [r7, #22]

	for ( ;; ) {
		osEvent event = osMessageGet(opt_get_queue(Q_MANAGER_NOTIF), 1000);
 800c08e:	2000      	movs	r0, #0
 800c090:	f7f5 f82c 	bl	80010ec <opt_get_queue>
 800c094:	4601      	mov	r1, r0
 800c096:	f107 0308 	add.w	r3, r7, #8
 800c09a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fb fc3e 	bl	8007920 <osMessageGet>
		if (event.status == osEventMessage) {
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b10      	cmp	r3, #16
 800c0a8:	d1f1      	bne.n	800c08e <t_manager+0x22>
			uint16_t notif = event.value.v;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	82bb      	strh	r3, [r7, #20]
			allNotif |= notif;
 800c0ae:	8afa      	ldrh	r2, [r7, #22]
 800c0b0:	8abb      	ldrh	r3, [r7, #20]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	82fb      	strh	r3, [r7, #22]
//#if DEBUG_WEAPON==1
//			if (notif == T_Weapon_id)
//				printf("\t\tWeapon notif recv\r\n");
//#endif	//if DEBUG_WEAPON==1

			if (allNotif == T_Manager_id) {
 800c0b6:	8afb      	ldrh	r3, [r7, #22]
 800c0b8:	2b0f      	cmp	r3, #15
 800c0ba:	d1e8      	bne.n	800c08e <t_manager+0x22>
				allNotif = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	82fb      	strh	r3, [r7, #22]
				/* refresh wdt timer */
				HAL_IWDG_Refresh(&hiwdg);
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <t_manager+0x5c>)
 800c0c2:	f7f7 fb56 	bl	8003772 <HAL_IWDG_Refresh>
	for ( ;; ) {
 800c0c6:	e7e2      	b.n	800c08e <t_manager+0x22>
 800c0c8:	20000300 	.word	0x20000300

0800c0cc <tim_weapon_callback>:
Weapon_t weapon;

static void weapon_send_to_bus();

void tim_weapon_callback(void const *argument)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tim_weapon_callback */
	(void) argument;

	HAL_StatusTypeDef ret;

	if (weapon.state == WS_COCK_ACTIVE) {
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <tim_weapon_callback+0x48>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d116      	bne.n	800c10a <tim_weapon_callback+0x3e>
		ret = cock_handler(&weapon.cock);
 800c0dc:	480e      	ldr	r0, [pc, #56]	; (800c118 <tim_weapon_callback+0x4c>)
 800c0de:	f002 fc0d 	bl	800e8fc <cock_handler>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK || ret == HAL_ERROR)
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <tim_weapon_callback+0x26>
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d106      	bne.n	800c100 <tim_weapon_callback+0x34>
			osTimerStop(mtr_get_timer(Tim_Weapon_id));
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	f7f5 f83a 	bl	800116c <mtr_get_timer>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fb f9f2 	bl	80074e4 <osTimerStop>
		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800c100:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c104:	4805      	ldr	r0, [pc, #20]	; (800c11c <tim_weapon_callback+0x50>)
 800c106:	f7f7 facb 	bl	80036a0 <HAL_GPIO_TogglePin>
//		}
////		ret = trig_handler(&weapon.trig);
////		if (ret == HAL_OK || ret == HAL_ERROR)
////			osTimerStop(mtr_get_timer(Tim_Weapon_id));
	}
}
 800c10a:	bf00      	nop
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200106dc 	.word	0x200106dc
 800c118:	200106e0 	.word	0x200106e0
 800c11c:	48000400 	.word	0x48000400

0800c120 <t_weapon>:

void t_weapon(void const *argument)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_weapon */
	LOG("Created!\r\n");

	weapon.state = WS_IDLE;
 800c128:	4b97      	ldr	r3, [pc, #604]	; (800c388 <t_weapon+0x268>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	701a      	strb	r2, [r3, #0]
	weapon.trig.enable = weapon.trig.start = weapon.trig.s_timeout = weapon.trig.h_timeout = 0;
 800c12e:	4b96      	ldr	r3, [pc, #600]	; (800c388 <t_weapon+0x268>)
 800c130:	2200      	movs	r2, #0
 800c132:	615a      	str	r2, [r3, #20]
 800c134:	4b94      	ldr	r3, [pc, #592]	; (800c388 <t_weapon+0x268>)
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	4a93      	ldr	r2, [pc, #588]	; (800c388 <t_weapon+0x268>)
 800c13a:	6113      	str	r3, [r2, #16]
 800c13c:	4b92      	ldr	r3, [pc, #584]	; (800c388 <t_weapon+0x268>)
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	4b91      	ldr	r3, [pc, #580]	; (800c388 <t_weapon+0x268>)
 800c144:	735a      	strb	r2, [r3, #13]
 800c146:	4b90      	ldr	r3, [pc, #576]	; (800c388 <t_weapon+0x268>)
 800c148:	7b5a      	ldrb	r2, [r3, #13]
 800c14a:	4b8f      	ldr	r3, [pc, #572]	; (800c388 <t_weapon+0x268>)
 800c14c:	731a      	strb	r2, [r3, #12]
	trig_all_stop();
 800c14e:	f002 fd0d 	bl	800eb6c <trig_all_stop>

	cock_init(&weapon.cock);
 800c152:	488e      	ldr	r0, [pc, #568]	; (800c38c <t_weapon+0x26c>)
 800c154:	f002 fbb8 	bl	800e8c8 <cock_init>
	munisi_reset();
 800c158:	f002 fc6e 	bl	800ea38 <munisi_reset>

	t_js_counter = 0;
 800c15c:	4b8c      	ldr	r3, [pc, #560]	; (800c390 <t_weapon+0x270>)
 800c15e:	2200      	movs	r2, #0
 800c160:	601a      	str	r2, [r3, #0]
	osDelay(T_Weapon_id);
 800c162:	2004      	movs	r0, #4
 800c164:	f7fb f94a 	bl	80073fc <osDelay>

	/* Infinite loop */
//	uint32_t led_timer = 0;
	uint32_t _bus_recv_timer = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	61fb      	str	r3, [r7, #28]
	uint32_t _stack_highwater = 0;
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

	for ( ;; ) {
		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Weapon_id), 10);
 800c16c:	2003      	movs	r0, #3
 800c16e:	f7f4 ffd1 	bl	8001114 <mtr_get_mail>
 800c172:	4601      	mov	r1, r0
 800c174:	f107 030c 	add.w	r3, r7, #12
 800c178:	220a      	movs	r2, #10
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fb fcf0 	bl	8007b60 <osMailGet>
		if (event.status == osEventMail) {
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b20      	cmp	r3, #32
 800c184:	f040 80ba 	bne.w	800c2fc <t_weapon+0x1dc>
			/* create buffer pointer to hold queue value */
			MAIL_Weapon_t *pRMail;
			pRMail = event.value.p;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	61bb      	str	r3, [r7, #24]

			LOG("recv:%d -> %02X %02X\r\n", pRMail->sender_id, pRMail->param.command.mode.triggerEnable,
					pRMail->param.command.mode.cockEnable);

			switch (pRMail->sender_id)
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b02      	cmp	r3, #2
 800c192:	d07b      	beq.n	800c28c <t_weapon+0x16c>
 800c194:	2b02      	cmp	r3, #2
 800c196:	dc7c      	bgt.n	800c292 <t_weapon+0x172>
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <t_weapon+0x80>
 800c19c:	2b01      	cmp	r3, #1
					HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
				break;
			case Weapon_Sender_Sensor_Cock_id:
				break;
			case Weapon_Sender_Sensor_Trigger_id:
				break;
 800c19e:	e078      	b.n	800c292 <t_weapon+0x172>
				if (pRMail->param.command.mode.triggerEnable == 1) {
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	789b      	ldrb	r3, [r3, #2]
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00d      	beq.n	800c1ca <t_weapon+0xaa>
					if (weapon.state == WS_IDLE) {
 800c1ae:	4b76      	ldr	r3, [pc, #472]	; (800c388 <t_weapon+0x268>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d118      	bne.n	800c1e8 <t_weapon+0xc8>
						trig_set_power(1);
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	f002 fc88 	bl	800eacc <trig_set_power>
						weapon.trig.enable = 1;
 800c1bc:	4b72      	ldr	r3, [pc, #456]	; (800c388 <t_weapon+0x268>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	731a      	strb	r2, [r3, #12]
						weapon.state = WS_TRIGGER_ACTIVE;
 800c1c2:	4b71      	ldr	r3, [pc, #452]	; (800c388 <t_weapon+0x268>)
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	701a      	strb	r2, [r3, #0]
 800c1c8:	e00e      	b.n	800c1e8 <t_weapon+0xc8>
					if (weapon.state == WS_TRIGGER_ACTIVE) {
 800c1ca:	4b6f      	ldr	r3, [pc, #444]	; (800c388 <t_weapon+0x268>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d10a      	bne.n	800c1e8 <t_weapon+0xc8>
						trig_set_power(0);
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f002 fc7a 	bl	800eacc <trig_set_power>
						weapon.trig.enable = 0;
 800c1d8:	4b6b      	ldr	r3, [pc, #428]	; (800c388 <t_weapon+0x268>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	731a      	strb	r2, [r3, #12]
						trig_all_stop();
 800c1de:	f002 fcc5 	bl	800eb6c <trig_all_stop>
						weapon.state = WS_IDLE;
 800c1e2:	4b69      	ldr	r3, [pc, #420]	; (800c388 <t_weapon+0x268>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
				if (pRMail->param.command.mode.cockStartMoving == 1) {
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	789b      	ldrb	r3, [r3, #2]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00e      	beq.n	800c214 <t_weapon+0xf4>
					if (weapon.state == WS_COCK_ACTIVE) {
 800c1f6:	4b64      	ldr	r3, [pc, #400]	; (800c388 <t_weapon+0x268>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d10a      	bne.n	800c214 <t_weapon+0xf4>
						cock_start(&weapon.cock);
 800c1fe:	4863      	ldr	r0, [pc, #396]	; (800c38c <t_weapon+0x26c>)
 800c200:	f002 fbda 	bl	800e9b8 <cock_start>
						osTimerStart(mtr_get_timer(Tim_Weapon_id), 50);
 800c204:	2000      	movs	r0, #0
 800c206:	f7f4 ffb1 	bl	800116c <mtr_get_timer>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2132      	movs	r1, #50	; 0x32
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fb f924 	bl	800745c <osTimerStart>
				if (pRMail->param.command.mode.cockEnable == 1) {
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	789b      	ldrb	r3, [r3, #2]
 800c218:	f003 0302 	and.w	r3, r3, #2
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00b      	beq.n	800c23a <t_weapon+0x11a>
					if (weapon.state == WS_IDLE) {
 800c222:	4b59      	ldr	r3, [pc, #356]	; (800c388 <t_weapon+0x268>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d112      	bne.n	800c250 <t_weapon+0x130>
						cock_power(&weapon.cock, 1);
 800c22a:	2101      	movs	r1, #1
 800c22c:	4857      	ldr	r0, [pc, #348]	; (800c38c <t_weapon+0x26c>)
 800c22e:	f002 fbdf 	bl	800e9f0 <cock_power>
						weapon.state = WS_COCK_ACTIVE;
 800c232:	4b55      	ldr	r3, [pc, #340]	; (800c388 <t_weapon+0x268>)
 800c234:	2201      	movs	r2, #1
 800c236:	701a      	strb	r2, [r3, #0]
 800c238:	e00a      	b.n	800c250 <t_weapon+0x130>
					if (weapon.state == WS_COCK_ACTIVE) {
 800c23a:	4b53      	ldr	r3, [pc, #332]	; (800c388 <t_weapon+0x268>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d106      	bne.n	800c250 <t_weapon+0x130>
						cock_power(&weapon.cock, 0);
 800c242:	2100      	movs	r1, #0
 800c244:	4851      	ldr	r0, [pc, #324]	; (800c38c <t_weapon+0x26c>)
 800c246:	f002 fbd3 	bl	800e9f0 <cock_power>
						weapon.state = WS_IDLE;
 800c24a:	4b4f      	ldr	r3, [pc, #316]	; (800c388 <t_weapon+0x268>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	701a      	strb	r2, [r3, #0]
				if (weapon.state != WS_COCK_ACTIVE)
 800c250:	4b4d      	ldr	r3, [pc, #308]	; (800c388 <t_weapon+0x268>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d003      	beq.n	800c260 <t_weapon+0x140>
					weapon.trig.shoot_limit = pRMail->param.command.shoot_limit;
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	889a      	ldrh	r2, [r3, #4]
 800c25c:	4b4a      	ldr	r3, [pc, #296]	; (800c388 <t_weapon+0x268>)
 800c25e:	81da      	strh	r2, [r3, #14]
				if (pRMail->param.command.mode.munitionCounterReset == 1)
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	789b      	ldrb	r3, [r3, #2]
 800c264:	f003 0308 	and.w	r3, r3, #8
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <t_weapon+0x152>
					munisi_reset();
 800c26e:	f002 fbe3 	bl	800ea38 <munisi_reset>
				_bus_recv_timer = osKernelSysTick();
 800c272:	f7fb f870 	bl	8007356 <osKernelSysTick>
 800c276:	61f8      	str	r0, [r7, #28]
				if (weapon.state == WS_IDLE)
 800c278:	4b43      	ldr	r3, [pc, #268]	; (800c388 <t_weapon+0x268>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d107      	bne.n	800c290 <t_weapon+0x170>
					HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800c280:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c284:	4843      	ldr	r0, [pc, #268]	; (800c394 <t_weapon+0x274>)
 800c286:	f7f7 fa0b 	bl	80036a0 <HAL_GPIO_TogglePin>
				break;
 800c28a:	e001      	b.n	800c290 <t_weapon+0x170>
				break;
 800c28c:	bf00      	nop
 800c28e:	e000      	b.n	800c292 <t_weapon+0x172>
				break;
 800c290:	bf00      	nop
			};
			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Weapon_id), pRMail);
 800c292:	2003      	movs	r0, #3
 800c294:	f7f4 ff3e 	bl	8001114 <mtr_get_mail>
 800c298:	4603      	mov	r3, r0
 800c29a:	69b9      	ldr	r1, [r7, #24]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fb fcd3 	bl	8007c48 <osMailFree>

			if (weapon.trig.enable == 1) {
 800c2a2:	4b39      	ldr	r3, [pc, #228]	; (800c388 <t_weapon+0x268>)
 800c2a4:	7b1b      	ldrb	r3, [r3, #12]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d11a      	bne.n	800c2e0 <t_weapon+0x1c0>
				if (trig_pulse_state() == 1) {
 800c2aa:	f002 fc4d 	bl	800eb48 <trig_pulse_state>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d10f      	bne.n	800c2d4 <t_weapon+0x1b4>
					if (weapon.trig.start == 0) {
 800c2b4:	4b34      	ldr	r3, [pc, #208]	; (800c388 <t_weapon+0x268>)
 800c2b6:	7b5b      	ldrb	r3, [r3, #13]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d107      	bne.n	800c2cc <t_weapon+0x1ac>
						trig_start();
 800c2bc:	f002 fc18 	bl	800eaf0 <trig_start>
						weapon.trig.s_timeout = osKernelSysTick() + 60;
 800c2c0:	f7fb f849 	bl	8007356 <osKernelSysTick>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	333c      	adds	r3, #60	; 0x3c
 800c2c8:	4a2f      	ldr	r2, [pc, #188]	; (800c388 <t_weapon+0x268>)
 800c2ca:	6113      	str	r3, [r2, #16]
					}
					weapon.trig.start = 1;
 800c2cc:	4b2e      	ldr	r3, [pc, #184]	; (800c388 <t_weapon+0x268>)
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	735a      	strb	r2, [r3, #13]
 800c2d2:	e00a      	b.n	800c2ea <t_weapon+0x1ca>
				}
				else {
					trig_all_stop();
 800c2d4:	f002 fc4a 	bl	800eb6c <trig_all_stop>
					weapon.trig.start = 0;
 800c2d8:	4b2b      	ldr	r3, [pc, #172]	; (800c388 <t_weapon+0x268>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	735a      	strb	r2, [r3, #13]
 800c2de:	e004      	b.n	800c2ea <t_weapon+0x1ca>
				}
			}
			else {
				trig_all_stop();
 800c2e0:	f002 fc44 	bl	800eb6c <trig_all_stop>
				weapon.trig.start = 0;
 800c2e4:	4b28      	ldr	r3, [pc, #160]	; (800c388 <t_weapon+0x268>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	735a      	strb	r2, [r3, #13]
			}

			if (osKernelSysTick() >= weapon.trig.s_timeout) {
 800c2ea:	f7fb f834 	bl	8007356 <osKernelSysTick>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	4b25      	ldr	r3, [pc, #148]	; (800c388 <t_weapon+0x268>)
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d301      	bcc.n	800c2fc <t_weapon+0x1dc>
				trig_s_stop();
 800c2f8:	f002 fc0e 	bl	800eb18 <trig_s_stop>
			LOG("\t\tshw=%d\r\n",uxTaskGetStackHighWaterMark2(NULL));
		}
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Weapon_id, 0);
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	f7f4 fef5 	bl	80010ec <opt_get_queue>
 800c302:	4603      	mov	r3, r0
 800c304:	2200      	movs	r2, #0
 800c306:	2104      	movs	r1, #4
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fb fac9 	bl	80078a0 <osMessagePut>

		if (weapon.state == WS_TRIGGER_ACTIVE)
 800c30e:	4b1e      	ldr	r3, [pc, #120]	; (800c388 <t_weapon+0x268>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d103      	bne.n	800c31e <t_weapon+0x1fe>
			munisi_set_state(1);
 800c316:	2001      	movs	r0, #1
 800c318:	f002 fb9a 	bl	800ea50 <munisi_set_state>
 800c31c:	e002      	b.n	800c324 <t_weapon+0x204>
		else
			munisi_set_state(0);
 800c31e:	2000      	movs	r0, #0
 800c320:	f002 fb96 	bl	800ea50 <munisi_set_state>

		if (weapon.state == WS_IDLE) {
 800c324:	4b18      	ldr	r3, [pc, #96]	; (800c388 <t_weapon+0x268>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d114      	bne.n	800c356 <t_weapon+0x236>
			if (_bus_recv_timer == 0) {
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d106      	bne.n	800c340 <t_weapon+0x220>
				HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 800c332:	2201      	movs	r2, #1
 800c334:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c338:	4816      	ldr	r0, [pc, #88]	; (800c394 <t_weapon+0x274>)
 800c33a:	f7f7 f999 	bl	8003670 <HAL_GPIO_WritePin>
 800c33e:	e01f      	b.n	800c380 <t_weapon+0x260>
			}
			else {
				if (osKernelSysTick() >= (_bus_recv_timer + BUS_TIMEOUT)) {
 800c340:	f7fb f809 	bl	8007356 <osKernelSysTick>
 800c344:	4602      	mov	r2, r0
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d317      	bcc.n	800c380 <t_weapon+0x260>
					_bus_recv_timer = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	61fb      	str	r3, [r7, #28]
 800c354:	e014      	b.n	800c380 <t_weapon+0x260>
				}
			}
		}
		else if (weapon.state == WS_TRIGGER_ACTIVE) {
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <t_weapon+0x268>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d110      	bne.n	800c380 <t_weapon+0x260>
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, !HAL_GPIO_ReadPin(T_START_GPIO_Port, T_START_Pin));
 800c35e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c362:	480c      	ldr	r0, [pc, #48]	; (800c394 <t_weapon+0x274>)
 800c364:	f7f7 f96c 	bl	8003640 <HAL_GPIO_ReadPin>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bf0c      	ite	eq
 800c36e:	2301      	moveq	r3, #1
 800c370:	2300      	movne	r3, #0
 800c372:	b2db      	uxtb	r3, r3
 800c374:	461a      	mov	r2, r3
 800c376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c37a:	4806      	ldr	r0, [pc, #24]	; (800c394 <t_weapon+0x274>)
 800c37c:	f7f7 f978 	bl	8003670 <HAL_GPIO_WritePin>
		}

		weapon_send_to_bus();
 800c380:	f000 f80a 	bl	800c398 <weapon_send_to_bus>
	for ( ;; ) {
 800c384:	e6f2      	b.n	800c16c <t_weapon+0x4c>
 800c386:	bf00      	nop
 800c388:	200106dc 	.word	0x200106dc
 800c38c:	200106e0 	.word	0x200106e0
 800c390:	20010d54 	.word	0x20010d54
 800c394:	48000400 	.word	0x48000400

0800c398 <weapon_send_to_bus>:
	}
	/* USER CODE END t_weapon */
}

static void weapon_send_to_bus()
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
	static uint32_t _timer = 0;

	if (osKernelSysTick() >= _timer) {
 800c39e:	f7fa ffda 	bl	8007356 <osKernelSysTick>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	4b24      	ldr	r3, [pc, #144]	; (800c438 <weapon_send_to_bus+0xa0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d340      	bcc.n	800c42e <weapon_send_to_bus+0x96>
		_timer = osKernelSysTick() + 100;
 800c3ac:	f7fa ffd3 	bl	8007356 <osKernelSysTick>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	3364      	adds	r3, #100	; 0x64
 800c3b4:	4a20      	ldr	r2, [pc, #128]	; (800c438 <weapon_send_to_bus+0xa0>)
 800c3b6:	6013      	str	r3, [r2, #0]

		Body_weapon_status_t _state;
		MAIL_Bus_t *bus_mail;

		*(uint8_t*) &_state = 0;
 800c3b8:	463b      	mov	r3, r7
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	701a      	strb	r2, [r3, #0]
		_state.triggerEnable = weapon.trig.enable;
 800c3be:	4b1f      	ldr	r3, [pc, #124]	; (800c43c <weapon_send_to_bus+0xa4>)
 800c3c0:	7b1b      	ldrb	r3, [r3, #12]
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	783b      	ldrb	r3, [r7, #0]
 800c3ca:	f362 0300 	bfi	r3, r2, #0, #1
 800c3ce:	703b      	strb	r3, [r7, #0]
		_state.cockEnable = weapon.cock.enable;
 800c3d0:	4b1a      	ldr	r3, [pc, #104]	; (800c43c <weapon_send_to_bus+0xa4>)
 800c3d2:	791b      	ldrb	r3, [r3, #4]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	783b      	ldrb	r3, [r7, #0]
 800c3dc:	f362 0341 	bfi	r3, r2, #1, #1
 800c3e0:	703b      	strb	r3, [r7, #0]
		_state.cockMoving = weapon.cock.start;
 800c3e2:	4b16      	ldr	r3, [pc, #88]	; (800c43c <weapon_send_to_bus+0xa4>)
 800c3e4:	795b      	ldrb	r3, [r3, #5]
 800c3e6:	f003 0301 	and.w	r3, r3, #1
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	783b      	ldrb	r3, [r7, #0]
 800c3ee:	f362 0382 	bfi	r3, r2, #2, #1
 800c3f2:	703b      	strb	r3, [r7, #0]

		// allocate memory; receiver must be free it
		bus_mail = osMailAlloc(mtr_get_mail(Mail_Bus_id), 0);
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f7f4 fe8d 	bl	8001114 <mtr_get_mail>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fb fb5a 	bl	8007ab8 <osMailAlloc>
 800c404:	6078      	str	r0, [r7, #4]
		bus_mail->sender_id = Bus_Sender_Weapon_State_id;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2202      	movs	r2, #2
 800c40a:	701a      	strb	r2, [r3, #0]
		bus_mail->param.weapon.state = _state;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	783a      	ldrb	r2, [r7, #0]
 800c410:	711a      	strb	r2, [r3, #4]
		bus_mail->param.weapon.munition_counter = munisi_get_counter();
 800c412:	f002 fb2d 	bl	800ea70 <munisi_get_counter>
 800c416:	4603      	mov	r3, r0
 800c418:	461a      	mov	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	80da      	strh	r2, [r3, #6]

		/* send mail queue*/
		osMailPut(mtr_get_mail(Mail_Bus_id), bus_mail);
 800c41e:	2000      	movs	r0, #0
 800c420:	f7f4 fe78 	bl	8001114 <mtr_get_mail>
 800c424:	4603      	mov	r3, r0
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fb fb5b 	bl	8007ae4 <osMailPut>

		LOG("mun= %d\r\n", munisi_get_counter());
	}
}
 800c42e:	bf00      	nop
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	200106f4 	.word	0x200106f4
 800c43c:	200106dc 	.word	0x200106dc

0800c440 <bus_init>:
FDCAN_TxHeaderTypeDef bus_tx_imu;

FDCAN_HandleTypeDef *hfdcan = &hfdcan1;

void bus_init()
{
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0
	FDCAN_RX_Filter0_Range(hfdcan, 0, RWS_PANEL_ID, (RWS_PANEL_ID + 0xF));
 800c444:	4b12      	ldr	r3, [pc, #72]	; (800c490 <bus_init+0x50>)
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	f240 131f 	movw	r3, #287	; 0x11f
 800c44c:	f44f 7288 	mov.w	r2, #272	; 0x110
 800c450:	2100      	movs	r1, #0
 800c452:	f000 f9de 	bl	800c812 <FDCAN_RX_Filter0_Range>
	FDCAN_Config(hfdcan);
 800c456:	4b0e      	ldr	r3, [pc, #56]	; (800c490 <bus_init+0x50>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f96f 	bl	800c73e <FDCAN_Config>
	FDCAN_TX_Config(&bus_tx_status, RWS_MOTOR_STATUS_ID, FDCAN_DLC_BYTES_8);
 800c460:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c464:	f240 1121 	movw	r1, #289	; 0x121
 800c468:	480a      	ldr	r0, [pc, #40]	; (800c494 <bus_init+0x54>)
 800c46a:	f000 f9fd 	bl	800c868 <FDCAN_TX_Config>
	FDCAN_TX_Config(&bus_tx_position, RWS_MOTOR_POS_ID, FDCAN_DLC_BYTES_8);
 800c46e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c472:	f44f 7191 	mov.w	r1, #290	; 0x122
 800c476:	4808      	ldr	r0, [pc, #32]	; (800c498 <bus_init+0x58>)
 800c478:	f000 f9f6 	bl	800c868 <FDCAN_TX_Config>
	FDCAN_TX_Config(&bus_tx_imu, RWS_MOTOR_IMU_ID, FDCAN_DLC_BYTES_8);
 800c47c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c480:	f240 1123 	movw	r1, #291	; 0x123
 800c484:	4805      	ldr	r0, [pc, #20]	; (800c49c <bus_init+0x5c>)
 800c486:	f000 f9ef 	bl	800c868 <FDCAN_TX_Config>
}
 800c48a:	bf00      	nop
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20000010 	.word	0x20000010
 800c494:	200106f8 	.word	0x200106f8
 800c498:	2001071c 	.word	0x2001071c
 800c49c:	20010740 	.word	0x20010740

0800c4a0 <bus_send_status>:

HAL_StatusTypeDef bus_send_status(uint8_t *data)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
	return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &bus_tx_status, data);
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <bus_send_status+0x20>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	4905      	ldr	r1, [pc, #20]	; (800c4c4 <bus_send_status+0x24>)
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7f6 fad5 	bl	8002a60 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c4b6:	4603      	mov	r3, r0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20000010 	.word	0x20000010
 800c4c4:	200106f8 	.word	0x200106f8

0800c4c8 <bus_send_position>:

HAL_StatusTypeDef bus_send_position(const int32_t pan, const int32_t tilt)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
	Rws_Union_u p, t;
	uint8_t data[8];

	p.i32 = pan;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	61bb      	str	r3, [r7, #24]
	t.i32 = tilt;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	617b      	str	r3, [r7, #20]
	for ( int i = 0; i < 4; i++ ) {
 800c4da:	2300      	movs	r3, #0
 800c4dc:	61fb      	str	r3, [r7, #28]
 800c4de:	e018      	b.n	800c512 <bus_send_position+0x4a>
		data[i] = p.u8[i];
 800c4e0:	f107 0218 	add.w	r2, r7, #24
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	7819      	ldrb	r1, [r3, #0]
 800c4ea:	f107 020c 	add.w	r2, r7, #12
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	460a      	mov	r2, r1
 800c4f4:	701a      	strb	r2, [r3, #0]
		data[i + 4] = t.u8[i];
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	f107 0114 	add.w	r1, r7, #20
 800c4fe:	69fa      	ldr	r2, [r7, #28]
 800c500:	440a      	add	r2, r1
 800c502:	7812      	ldrb	r2, [r2, #0]
 800c504:	3320      	adds	r3, #32
 800c506:	443b      	add	r3, r7
 800c508:	f803 2c14 	strb.w	r2, [r3, #-20]
	for ( int i = 0; i < 4; i++ ) {
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	3301      	adds	r3, #1
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	2b03      	cmp	r3, #3
 800c516:	dde3      	ble.n	800c4e0 <bus_send_position+0x18>
	}

	return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &bus_tx_position, data);
 800c518:	4b06      	ldr	r3, [pc, #24]	; (800c534 <bus_send_position+0x6c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f107 020c 	add.w	r2, r7, #12
 800c520:	4905      	ldr	r1, [pc, #20]	; (800c538 <bus_send_position+0x70>)
 800c522:	4618      	mov	r0, r3
 800c524:	f7f6 fa9c 	bl	8002a60 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c528:	4603      	mov	r3, r0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3720      	adds	r7, #32
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000010 	.word	0x20000010
 800c538:	2001071c 	.word	0x2001071c

0800c53c <bus_send_imu>:

HAL_StatusTypeDef bus_send_imu(const int16_t yaw, const int32_t pitch, const int32_t roll)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	81fb      	strh	r3, [r7, #14]

	return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <FDCAN_Convert_Datalength>:

uint8_t FDCAN_Convert_Datalength(const uint32_t datalength)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	return dlc2len[datalength >> 16];
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	0c1b      	lsrs	r3, r3, #16
 800c564:	4a03      	ldr	r2, [pc, #12]	; (800c574 <FDCAN_Convert_Datalength+0x1c>)
 800c566:	5cd3      	ldrb	r3, [r2, r3]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	08012184 	.word	0x08012184

0800c578 <bus_rx_callback>:

void bus_rx_callback(BUS_Rx_Buffer_t *buffer)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	if (buffer->id == RWS_PANEL_CMD_ID) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f240 1211 	movw	r2, #273	; 0x111
 800c588:	4293      	cmp	r3, r2
 800c58a:	d151      	bne.n	800c630 <bus_rx_callback+0xb8>
		MAIL_Weapon_t *wpnMail;
		// allocate memory; receiver must be free it
		wpnMail = osMailAlloc(mtr_get_mail(Mail_Weapon_id), 0);
 800c58c:	2003      	movs	r0, #3
 800c58e:	f7f4 fdc1 	bl	8001114 <mtr_get_mail>
 800c592:	4603      	mov	r3, r0
 800c594:	2100      	movs	r1, #0
 800c596:	4618      	mov	r0, r3
 800c598:	f7fb fa8e 	bl	8007ab8 <osMailAlloc>
 800c59c:	6178      	str	r0, [r7, #20]
		wpnMail->sender_id = Weapon_Sender_Bus_id;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]
		*(uint8_t*) &wpnMail->param.command.mode = buffer->data[1];
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	3302      	adds	r3, #2
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	7992      	ldrb	r2, [r2, #6]
 800c5ac:	701a      	strb	r2, [r3, #0]
		wpnMail->param.command.shoot_limit = ((uint16_t) buffer->data[2] << 8) | buffer->data[3];
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	79db      	ldrb	r3, [r3, #7]
 800c5b2:	021b      	lsls	r3, r3, #8
 800c5b4:	b21a      	sxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7a1b      	ldrb	r3, [r3, #8]
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	b21b      	sxth	r3, r3
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	809a      	strh	r2, [r3, #4]

		/* send mail queue*/
		osMailPut(mtr_get_mail(Mail_Weapon_id), wpnMail);
 800c5c6:	2003      	movs	r0, #3
 800c5c8:	f7f4 fda4 	bl	8001114 <mtr_get_mail>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	6979      	ldr	r1, [r7, #20]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fb fa87 	bl	8007ae4 <osMailPut>

		/* if t_motor is ready */
		if (osMutexWait(mtr_get_mutex(Mutex_Motor_id), 0) == osOK) {
 800c5d6:	2001      	movs	r0, #1
 800c5d8:	f7f4 fde4 	bl	80011a4 <mtr_get_mutex>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2100      	movs	r1, #0
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fa ffc7 	bl	8007574 <osMutexWait>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f040 80a4 	bne.w	800c736 <bus_rx_callback+0x1be>
			LOG("send mtr_st\r\n");
			MAIL_Motor_t *mtrMail;
			/* allocate memory; receiver must be free it */
			mtrMail = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	f7f4 fd90 	bl	8001114 <mtr_get_mail>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fb fa5d 	bl	8007ab8 <osMailAlloc>
 800c5fe:	6138      	str	r0, [r7, #16]
			mtrMail->sender_id = Motor_Sender_Bus_Mode_id;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	2200      	movs	r2, #0
 800c604:	701a      	strb	r2, [r3, #0]

			*(uint8_t*) &mtrMail->param.command.mode = buffer->data[0];
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	3304      	adds	r3, #4
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	7952      	ldrb	r2, [r2, #5]
 800c60e:	701a      	strb	r2, [r3, #0]

			/* send mail queue*/
			osMailPut(mtr_get_mail(Mail_Motor_id), mtrMail);
 800c610:	2001      	movs	r0, #1
 800c612:	f7f4 fd7f 	bl	8001114 <mtr_get_mail>
 800c616:	4603      	mov	r3, r0
 800c618:	6939      	ldr	r1, [r7, #16]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fb fa62 	bl	8007ae4 <osMailPut>

			osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800c620:	2001      	movs	r0, #1
 800c622:	f7f4 fdbf 	bl	80011a4 <mtr_get_mutex>
 800c626:	4603      	mov	r3, r0
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fa fff1 	bl	8007610 <osMutexRelease>
		}
//		else
//			LOG_E("[%03lX]motor not ready!\r\n", buffer->id);

	}
}
 800c62e:	e082      	b.n	800c736 <bus_rx_callback+0x1be>
	else if ((buffer->id == RWS_PANEL_MAN_ID) || (buffer->id == RWS_PANEL_TRK_ID) || (buffer->id == RWS_PANEL_BAL_ID)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800c638:	d010      	beq.n	800c65c <bus_rx_callback+0xe4>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f240 1213 	movw	r2, #275	; 0x113
 800c642:	4293      	cmp	r3, r2
 800c644:	d00a      	beq.n	800c65c <bus_rx_callback+0xe4>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800c64e:	d005      	beq.n	800c65c <bus_rx_callback+0xe4>
			|| (buffer->id == RWS_PANEL_HOM_ID)) {
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f240 1215 	movw	r2, #277	; 0x115
 800c658:	4293      	cmp	r3, r2
 800c65a:	d16c      	bne.n	800c736 <bus_rx_callback+0x1be>
		for ( int i = 0; i < 4; i++ ) {
 800c65c:	2300      	movs	r3, #0
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	e018      	b.n	800c694 <bus_rx_callback+0x11c>
			pan.u8[i] = buffer->data[i];
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	4413      	add	r3, r2
 800c668:	3305      	adds	r3, #5
 800c66a:	7819      	ldrb	r1, [r3, #0]
 800c66c:	f107 020c 	add.w	r2, r7, #12
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	4413      	add	r3, r2
 800c674:	460a      	mov	r2, r1
 800c676:	701a      	strb	r2, [r3, #0]
			tilt.u8[i] = buffer->data[4 + i];
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	3304      	adds	r3, #4
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	4413      	add	r3, r2
 800c680:	7959      	ldrb	r1, [r3, #5]
 800c682:	f107 0208 	add.w	r2, r7, #8
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	4413      	add	r3, r2
 800c68a:	460a      	mov	r2, r1
 800c68c:	701a      	strb	r2, [r3, #0]
		for ( int i = 0; i < 4; i++ ) {
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	3301      	adds	r3, #1
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b03      	cmp	r3, #3
 800c698:	dde3      	ble.n	800c662 <bus_rx_callback+0xea>
		if (osMutexWait(mtr_get_mutex(Mutex_Motor_id), 0) == osOK) {
 800c69a:	2001      	movs	r0, #1
 800c69c:	f7f4 fd82 	bl	80011a4 <mtr_get_mutex>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fa ff65 	bl	8007574 <osMutexWait>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d142      	bne.n	800c736 <bus_rx_callback+0x1be>
			mtrMail = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7f4 fd2f 	bl	8001114 <mtr_get_mail>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fb f9fc 	bl	8007ab8 <osMailAlloc>
 800c6c0:	61b8      	str	r0, [r7, #24]
			if (buffer->id == RWS_PANEL_MAN_ID)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800c6ca:	d103      	bne.n	800c6d4 <bus_rx_callback+0x15c>
				mtrMail->sender_id = Motor_Sender_Bus_Command_Speed_id;
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	e01b      	b.n	800c70c <bus_rx_callback+0x194>
			else if (buffer->id == RWS_PANEL_TRK_ID)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f240 1213 	movw	r2, #275	; 0x113
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d103      	bne.n	800c6e8 <bus_rx_callback+0x170>
				mtrMail->sender_id = Motor_Sender_Bus_Command_Track_id;
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	e011      	b.n	800c70c <bus_rx_callback+0x194>
			else if (buffer->id == RWS_PANEL_BAL_ID)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800c6f0:	d103      	bne.n	800c6fa <bus_rx_callback+0x182>
				mtrMail->sender_id = Motor_Sender_Bus_Command_Balistic_id;
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e008      	b.n	800c70c <bus_rx_callback+0x194>
			else if (buffer->id == RWS_PANEL_HOM_ID)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f240 1215 	movw	r2, #277	; 0x115
 800c702:	4293      	cmp	r3, r2
 800c704:	d102      	bne.n	800c70c <bus_rx_callback+0x194>
				mtrMail->sender_id = Motor_Sender_Bus_Command_Homing_id;
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	2204      	movs	r2, #4
 800c70a:	701a      	strb	r2, [r3, #0]
			mtrMail->param.command.value.pan = pan.i32;
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	605a      	str	r2, [r3, #4]
			mtrMail->param.command.value.tilt = tilt.i32;
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	609a      	str	r2, [r3, #8]
			osMailPut(mtr_get_mail(Mail_Motor_id), mtrMail);
 800c718:	2001      	movs	r0, #1
 800c71a:	f7f4 fcfb 	bl	8001114 <mtr_get_mail>
 800c71e:	4603      	mov	r3, r0
 800c720:	69b9      	ldr	r1, [r7, #24]
 800c722:	4618      	mov	r0, r3
 800c724:	f7fb f9de 	bl	8007ae4 <osMailPut>
			osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800c728:	2001      	movs	r0, #1
 800c72a:	f7f4 fd3b 	bl	80011a4 <mtr_get_mutex>
 800c72e:	4603      	mov	r3, r0
 800c730:	4618      	mov	r0, r3
 800c732:	f7fa ff6d 	bl	8007610 <osMutexRelease>
}
 800c736:	bf00      	nop
 800c738:	3720      	adds	r7, #32
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <FDCAN_Config>:
 * @brief  Configures the FDCAN.
 * @param  None
 * @retval None
 */
static void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
	/* Configure and enable Tx Delay Compensation, required for BRS mode.
	 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
	 TdcFilter default recommended value: 0 */
	if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS) {
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c74e:	d117      	bne.n	800c780 <FDCAN_Config+0x42>
		/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
		if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, (hfdcan->Init.DataTimeSeg1 * hfdcan->Init.DataPrescaler), 0)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	2200      	movs	r2, #0
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7f6 f912 	bl	800298a <HAL_FDCAN_ConfigTxDelayCompensation>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <FDCAN_Config+0x32>
				!= HAL_OK) {
			Error_Handler();
 800c76c:	f7f5 fa06 	bl	8001b7c <Error_Handler>
		}
		if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7f6 f92c 	bl	80029ce <HAL_FDCAN_EnableTxDelayCompensation>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <FDCAN_Config+0x42>
			Error_Handler();
 800c77c:	f7f5 f9fe 	bl	8001b7c <Error_Handler>
		}
	}

	/* Activate Rx FIFO 0 new message notification */
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800c780:	2200      	movs	r2, #0
 800c782:	2101      	movs	r1, #1
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7f6 fa89 	bl	8002c9c <HAL_FDCAN_ActivateNotification>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d001      	beq.n	800c794 <FDCAN_Config+0x56>
		Error_Handler();
 800c790:	f7f5 f9f4 	bl	8001b7c <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_BUS_OFF, 0) != HAL_OK) {
//		Error_Handler();
//	}

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7f6 f93b 	bl	8002a10 <HAL_FDCAN_Start>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <FDCAN_Config+0x66>
		Error_Handler();
 800c7a0:	f7f5 f9ec 	bl	8001b7c <Error_Handler>
	}

}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <__FDCAN_RX_Filter_Range>:

static void __FDCAN_RX_Filter_Range(FDCAN_Rx_Filter_Params_t *params)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	; 0x28
 800c7b0:	af02      	add	r7, sp, #8
 800c7b2:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = params->index;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = params->type;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = params->low_id;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = params->high_id;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(params->hfdcan, &sFilterConfig) != HAL_OK) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f107 0208 	add.w	r2, r7, #8
 800c7dc:	4611      	mov	r1, r2
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f6 f848 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d001      	beq.n	800c7ee <__FDCAN_RX_Filter_Range+0x42>
		Error_Handler();
 800c7ea:	f7f5 f9c7 	bl	8001b7c <Error_Handler>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(params->hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE,
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6818      	ldr	r0, [r3, #0]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	2102      	movs	r1, #2
 800c7fc:	f7f6 f894 	bl	8002928 <HAL_FDCAN_ConfigGlobalFilter>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <__FDCAN_RX_Filter_Range+0x5e>
	FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
 800c806:	f7f5 f9b9 	bl	8001b7c <Error_Handler>
	}
}
 800c80a:	bf00      	nop
 800c80c:	3720      	adds	r7, #32
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <FDCAN_RX_Filter0_Range>:

static void FDCAN_RX_Filter0_Range(FDCAN_HandleTypeDef *hfdcan, const uint32_t filterIndex, const uint32_t filterId1,
		const uint32_t filterId2)
{
 800c812:	b580      	push	{r7, lr}
 800c814:	b08a      	sub	sp, #40	; 0x28
 800c816:	af00      	add	r7, sp, #0
 800c818:	60f8      	str	r0, [r7, #12]
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	607a      	str	r2, [r7, #4]
 800c81e:	603b      	str	r3, [r7, #0]
	FDCAN_Rx_Filter_Params_t params = { .hfdcan = hfdcan, .index = filterIndex, .type = FDCAN_FILTER_TO_RXFIFO0 };
 800c820:	f107 0314 	add.w	r3, r7, #20
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	605a      	str	r2, [r3, #4]
 800c82a:	609a      	str	r2, [r3, #8]
 800c82c:	60da      	str	r2, [r3, #12]
 800c82e:	611a      	str	r2, [r3, #16]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	617b      	str	r3, [r7, #20]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	61bb      	str	r3, [r7, #24]
 800c838:	2301      	movs	r3, #1
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
	if (filterId1 > filterId2) {
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	429a      	cmp	r2, r3
 800c842:	d904      	bls.n	800c84e <FDCAN_RX_Filter0_Range+0x3c>
		params.low_id = filterId2;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	61fb      	str	r3, [r7, #28]
		params.high_id = filterId1;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	623b      	str	r3, [r7, #32]
 800c84c:	e003      	b.n	800c856 <FDCAN_RX_Filter0_Range+0x44>
	}
	else {
		params.low_id = filterId1;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	61fb      	str	r3, [r7, #28]
		params.high_id = filterId2;
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	623b      	str	r3, [r7, #32]
	}
	__FDCAN_RX_Filter_Range(&params);
 800c856:	f107 0314 	add.w	r3, r7, #20
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ffa6 	bl	800c7ac <__FDCAN_RX_Filter_Range>
}
 800c860:	bf00      	nop
 800c862:	3728      	adds	r7, #40	; 0x28
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <FDCAN_TX_Config>:
 * @param  dataLength FDCAN Tx Data Length, default FDCAN_DLC_BYTES_8 8 Bytes to be send.
 *         This parameter can be any combination of @arg FDCAN_data_length_code.
 * @retval None
 */
static void FDCAN_TX_Config(FDCAN_TxHeaderTypeDef *txHeader, const uint32_t txID, const uint32_t dataLength)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
	/* Prepare Tx Header */
	txHeader->Identifier = txID;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	601a      	str	r2, [r3, #0]
	txHeader->IdType = FDCAN_STANDARD_ID;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	605a      	str	r2, [r3, #4]
	txHeader->TxFrameType = FDCAN_DATA_FRAME;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	609a      	str	r2, [r3, #8]
	txHeader->DataLength = dataLength;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	60da      	str	r2, [r3, #12]
	txHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	611a      	str	r2, [r3, #16]
	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	615a      	str	r2, [r3, #20]
	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	619a      	str	r2, [r3, #24]
	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	61da      	str	r2, [r3, #28]
	txHeader->MessageMarker = 0;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	621a      	str	r2, [r3, #32]
}
 800c8aa:	bf00      	nop
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <motor_param_init>:
} Motor_control_t;

Motor_control_t mc;

static void motor_param_init(Servo_t *servo)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
	Ingenia_write_nmt(servo, NMT_START_REMOTE_NODE);
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fff6 	bl	800d8b4 <Ingenia_write_nmt>
	uint32_t motor_pan_max_accel = (RWS_MOTOR_PAN_MAX_SPEED * 3) / 2;
 800c8c8:	4b35      	ldr	r3, [pc, #212]	; (800c9a0 <motor_param_init+0xe8>)
 800c8ca:	60fb      	str	r3, [r7, #12]
//	uint32_t motor_tilt_max_accel = (RWS_MOTOR_TILT_MAX_SPEED * 3) / 2;
	uint32_t motor_tilt_max_accel = RWS_MOTOR_TILT_MAX_SPEED;
 800c8cc:	f44f 3328 	mov.w	r3, #172032	; 0x2a000
 800c8d0:	60bb      	str	r3, [r7, #8]

	/* set mode to profile position */
	Ingenia_setModeOfOperation(servo, DRIVE_MODE_PROFILE_POSITION);
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f001 fc5a 	bl	800e18e <Ingenia_setModeOfOperation>

	LOG("mode=position mode\r\n");
 800c8da:	f7fa fd3c 	bl	8007356 <osKernelSysTick>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4a30      	ldr	r2, [pc, #192]	; (800c9a4 <motor_param_init+0xec>)
 800c8e2:	fba2 1203 	umull	r1, r2, r2, r3
 800c8e6:	0b51      	lsrs	r1, r2, #13
 800c8e8:	f242 7210 	movw	r2, #10000	; 0x2710
 800c8ec:	fb01 f202 	mul.w	r2, r1, r2
 800c8f0:	1a99      	subs	r1, r3, r2
 800c8f2:	2337      	movs	r3, #55	; 0x37
 800c8f4:	4a2c      	ldr	r2, [pc, #176]	; (800c9a8 <motor_param_init+0xf0>)
 800c8f6:	482d      	ldr	r0, [pc, #180]	; (800c9ac <motor_param_init+0xf4>)
 800c8f8:	f002 fdea 	bl	800f4d0 <iprintf>

	if (servo->_u8Node == MTR_AZ_ID) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800c902:	2b20      	cmp	r3, #32
 800c904:	d11d      	bne.n	800c942 <motor_param_init+0x8a>
		/* set max motor speed */
		Ingenia_write_sdo_u32(servo, 0x6080, 0, RWS_MOTOR_PAN_MAX_SPEED);
 800c906:	4b2a      	ldr	r3, [pc, #168]	; (800c9b0 <motor_param_init+0xf8>)
 800c908:	2200      	movs	r2, #0
 800c90a:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 f8e5 	bl	800dade <Ingenia_write_sdo_u32>
		/* set max profile acceleration */
		Ingenia_write_sdo_u32(servo, 0x6083, 0, motor_pan_max_accel);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	f246 0183 	movw	r1, #24707	; 0x6083
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f001 f8de 	bl	800dade <Ingenia_write_sdo_u32>
		/* set max profile de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6084, 0, motor_pan_max_accel);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	f246 0184 	movw	r1, #24708	; 0x6084
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f001 f8d7 	bl	800dade <Ingenia_write_sdo_u32>
		/* set max profile quick stop de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6085, 0, motor_pan_max_accel * 2);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	2200      	movs	r2, #0
 800c936:	f246 0185 	movw	r1, #24709	; 0x6085
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f001 f8cf 	bl	800dade <Ingenia_write_sdo_u32>
 800c940:	e022      	b.n	800c988 <motor_param_init+0xd0>
	}
	else if (servo->_u8Node == MTR_EL_ID) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800c948:	2b21      	cmp	r3, #33	; 0x21
 800c94a:	d11d      	bne.n	800c988 <motor_param_init+0xd0>
		/* set max motor speed */
		Ingenia_write_sdo_u32(servo, 0x6080, 0, RWS_MOTOR_TILT_MAX_SPEED);
 800c94c:	f44f 3328 	mov.w	r3, #172032	; 0x2a000
 800c950:	2200      	movs	r2, #0
 800c952:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f001 f8c1 	bl	800dade <Ingenia_write_sdo_u32>
		/* set max profile acceleration */
		Ingenia_write_sdo_u32(servo, 0x6083, 0, motor_tilt_max_accel);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2200      	movs	r2, #0
 800c960:	f246 0183 	movw	r1, #24707	; 0x6083
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f001 f8ba 	bl	800dade <Ingenia_write_sdo_u32>
		/* set max profile de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6084, 0, motor_tilt_max_accel);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f246 0184 	movw	r1, #24708	; 0x6084
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 f8b3 	bl	800dade <Ingenia_write_sdo_u32>
		/* set max profile quick stop de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6085, 0, motor_tilt_max_accel * 2);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	005b      	lsls	r3, r3, #1
 800c97c:	2200      	movs	r2, #0
 800c97e:	f246 0185 	movw	r1, #24709	; 0x6085
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f8ab 	bl	800dade <Ingenia_write_sdo_u32>
	}

	/* set TPDO4 event timer */
//	Ingenia_write_sdo_u16(servo, 0x1803, 5, 10);
	Ingenia_write_sdo_u16(servo, 0x1803, 10, 20);
 800c988:	2314      	movs	r3, #20
 800c98a:	220a      	movs	r2, #10
 800c98c:	f641 0103 	movw	r1, #6147	; 0x1803
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 f8ba 	bl	800db0a <Ingenia_write_sdo_u16>

}
 800c996:	bf00      	nop
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	000249f0 	.word	0x000249f0
 800c9a4:	d1b71759 	.word	0xd1b71759
 800c9a8:	08011f0c 	.word	0x08011f0c
 800c9ac:	08011f18 	.word	0x08011f18
 800c9b0:	000186a0 	.word	0x000186a0

0800c9b4 <hal_motor_init>:

HAL_StatusTypeDef hal_motor_init(const uint8_t enable)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b088      	sub	sp, #32
 800c9b8:	af02      	add	r7, sp, #8
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	71fb      	strb	r3, [r7, #7]
	LOG("Motor init...\r\n");
 800c9be:	f7fa fcca 	bl	8007356 <osKernelSysTick>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4aae      	ldr	r2, [pc, #696]	; (800cc80 <hal_motor_init+0x2cc>)
 800c9c6:	fba2 1203 	umull	r1, r2, r2, r3
 800c9ca:	0b51      	lsrs	r1, r2, #13
 800c9cc:	f242 7210 	movw	r2, #10000	; 0x2710
 800c9d0:	fb01 f202 	mul.w	r2, r1, r2
 800c9d4:	1a99      	subs	r1, r3, r2
 800c9d6:	2356      	movs	r3, #86	; 0x56
 800c9d8:	4aaa      	ldr	r2, [pc, #680]	; (800cc84 <hal_motor_init+0x2d0>)
 800c9da:	48ab      	ldr	r0, [pc, #684]	; (800cc88 <hal_motor_init+0x2d4>)
 800c9dc:	f002 fd78 	bl	800f4d0 <iprintf>

	mc.hfdcan = &hfdcan2;
 800c9e0:	4baa      	ldr	r3, [pc, #680]	; (800cc8c <hal_motor_init+0x2d8>)
 800c9e2:	4aab      	ldr	r2, [pc, #684]	; (800cc90 <hal_motor_init+0x2dc>)
 800c9e4:	601a      	str	r2, [r3, #0]
	mc.mtr_enable = enable;
 800c9e6:	4aa9      	ldr	r2, [pc, #676]	; (800cc8c <hal_motor_init+0x2d8>)
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	7113      	strb	r3, [r2, #4]

//	if (HAL_FDCAN_ActivateNotification(mc.hfdcan, FDCAN_IT_BUS_OFF, 0) != HAL_OK)
//		return HAL_ERROR;

	Ingenia_begin(mc.hfdcan);
 800c9ec:	4ba7      	ldr	r3, [pc, #668]	; (800cc8c <hal_motor_init+0x2d8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f001 fd72 	bl	800e4da <Ingenia_begin>

	if (is_motor_az_enable()) {
 800c9f6:	4ba5      	ldr	r3, [pc, #660]	; (800cc8c <hal_motor_init+0x2d8>)
 800c9f8:	791b      	ldrb	r3, [r3, #4]
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d052      	beq.n	800caa8 <hal_motor_init+0xf4>
		LOG("enabling pan motor ...\r\n");
 800ca02:	f7fa fca8 	bl	8007356 <osKernelSysTick>
 800ca06:	4603      	mov	r3, r0
 800ca08:	4a9d      	ldr	r2, [pc, #628]	; (800cc80 <hal_motor_init+0x2cc>)
 800ca0a:	fba2 1203 	umull	r1, r2, r2, r3
 800ca0e:	0b51      	lsrs	r1, r2, #13
 800ca10:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca14:	fb01 f202 	mul.w	r2, r1, r2
 800ca18:	1a99      	subs	r1, r3, r2
 800ca1a:	2361      	movs	r3, #97	; 0x61
 800ca1c:	4a99      	ldr	r2, [pc, #612]	; (800cc84 <hal_motor_init+0x2d0>)
 800ca1e:	489d      	ldr	r0, [pc, #628]	; (800cc94 <hal_motor_init+0x2e0>)
 800ca20:	f002 fd56 	bl	800f4d0 <iprintf>
		if (Ingenia_init(&mc.mtrAzi, mc.hfdcan, MTR_AZ_ID) != HAL_OK) {
 800ca24:	4b99      	ldr	r3, [pc, #612]	; (800cc8c <hal_motor_init+0x2d8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	489a      	ldr	r0, [pc, #616]	; (800cc98 <hal_motor_init+0x2e4>)
 800ca2e:	f000 fe23 	bl	800d678 <Ingenia_init>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d012      	beq.n	800ca5e <hal_motor_init+0xaa>
			LOG("init MTR_AZI failed!\r\n");
 800ca38:	f7fa fc8d 	bl	8007356 <osKernelSysTick>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	4a90      	ldr	r2, [pc, #576]	; (800cc80 <hal_motor_init+0x2cc>)
 800ca40:	fba2 1203 	umull	r1, r2, r2, r3
 800ca44:	0b51      	lsrs	r1, r2, #13
 800ca46:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca4a:	fb01 f202 	mul.w	r2, r1, r2
 800ca4e:	1a99      	subs	r1, r3, r2
 800ca50:	2363      	movs	r3, #99	; 0x63
 800ca52:	4a8c      	ldr	r2, [pc, #560]	; (800cc84 <hal_motor_init+0x2d0>)
 800ca54:	4891      	ldr	r0, [pc, #580]	; (800cc9c <hal_motor_init+0x2e8>)
 800ca56:	f002 fd3b 	bl	800f4d0 <iprintf>
			return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e19a      	b.n	800cd94 <hal_motor_init+0x3e0>
		}

		LOG("pan param init...\r\n");
 800ca5e:	f7fa fc7a 	bl	8007356 <osKernelSysTick>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4a86      	ldr	r2, [pc, #536]	; (800cc80 <hal_motor_init+0x2cc>)
 800ca66:	fba2 1203 	umull	r1, r2, r2, r3
 800ca6a:	0b51      	lsrs	r1, r2, #13
 800ca6c:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca70:	fb01 f202 	mul.w	r2, r1, r2
 800ca74:	1a99      	subs	r1, r3, r2
 800ca76:	2367      	movs	r3, #103	; 0x67
 800ca78:	4a82      	ldr	r2, [pc, #520]	; (800cc84 <hal_motor_init+0x2d0>)
 800ca7a:	4889      	ldr	r0, [pc, #548]	; (800cca0 <hal_motor_init+0x2ec>)
 800ca7c:	f002 fd28 	bl	800f4d0 <iprintf>
		motor_param_init(&mc.mtrAzi);
 800ca80:	4885      	ldr	r0, [pc, #532]	; (800cc98 <hal_motor_init+0x2e4>)
 800ca82:	f7ff ff19 	bl	800c8b8 <motor_param_init>
		LOG("done!\r\n");
 800ca86:	f7fa fc66 	bl	8007356 <osKernelSysTick>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	4a7c      	ldr	r2, [pc, #496]	; (800cc80 <hal_motor_init+0x2cc>)
 800ca8e:	fba2 1203 	umull	r1, r2, r2, r3
 800ca92:	0b51      	lsrs	r1, r2, #13
 800ca94:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca98:	fb01 f202 	mul.w	r2, r1, r2
 800ca9c:	1a99      	subs	r1, r3, r2
 800ca9e:	2369      	movs	r3, #105	; 0x69
 800caa0:	4a78      	ldr	r2, [pc, #480]	; (800cc84 <hal_motor_init+0x2d0>)
 800caa2:	4880      	ldr	r0, [pc, #512]	; (800cca4 <hal_motor_init+0x2f0>)
 800caa4:	f002 fd14 	bl	800f4d0 <iprintf>
	}

	if (is_motor_el_enable()) {
 800caa8:	4b78      	ldr	r3, [pc, #480]	; (800cc8c <hal_motor_init+0x2d8>)
 800caaa:	791b      	ldrb	r3, [r3, #4]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d067      	beq.n	800cb84 <hal_motor_init+0x1d0>
		LOG("enabling tilt motor ...\r\n");
 800cab4:	f7fa fc4f 	bl	8007356 <osKernelSysTick>
 800cab8:	4603      	mov	r3, r0
 800caba:	4a71      	ldr	r2, [pc, #452]	; (800cc80 <hal_motor_init+0x2cc>)
 800cabc:	fba2 1203 	umull	r1, r2, r2, r3
 800cac0:	0b51      	lsrs	r1, r2, #13
 800cac2:	f242 7210 	movw	r2, #10000	; 0x2710
 800cac6:	fb01 f202 	mul.w	r2, r1, r2
 800caca:	1a99      	subs	r1, r3, r2
 800cacc:	236d      	movs	r3, #109	; 0x6d
 800cace:	4a6d      	ldr	r2, [pc, #436]	; (800cc84 <hal_motor_init+0x2d0>)
 800cad0:	4875      	ldr	r0, [pc, #468]	; (800cca8 <hal_motor_init+0x2f4>)
 800cad2:	f002 fcfd 	bl	800f4d0 <iprintf>
		if (Ingenia_init(&mc.mtrEle, mc.hfdcan, MTR_EL_ID) != HAL_OK) {
 800cad6:	4b6d      	ldr	r3, [pc, #436]	; (800cc8c <hal_motor_init+0x2d8>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2221      	movs	r2, #33	; 0x21
 800cadc:	4619      	mov	r1, r3
 800cade:	4873      	ldr	r0, [pc, #460]	; (800ccac <hal_motor_init+0x2f8>)
 800cae0:	f000 fdca 	bl	800d678 <Ingenia_init>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d012      	beq.n	800cb10 <hal_motor_init+0x15c>
			LOG("init MTR_ELE failed!\r\n");
 800caea:	f7fa fc34 	bl	8007356 <osKernelSysTick>
 800caee:	4603      	mov	r3, r0
 800caf0:	4a63      	ldr	r2, [pc, #396]	; (800cc80 <hal_motor_init+0x2cc>)
 800caf2:	fba2 1203 	umull	r1, r2, r2, r3
 800caf6:	0b51      	lsrs	r1, r2, #13
 800caf8:	f242 7210 	movw	r2, #10000	; 0x2710
 800cafc:	fb01 f202 	mul.w	r2, r1, r2
 800cb00:	1a99      	subs	r1, r3, r2
 800cb02:	236f      	movs	r3, #111	; 0x6f
 800cb04:	4a5f      	ldr	r2, [pc, #380]	; (800cc84 <hal_motor_init+0x2d0>)
 800cb06:	486a      	ldr	r0, [pc, #424]	; (800ccb0 <hal_motor_init+0x2fc>)
 800cb08:	f002 fce2 	bl	800f4d0 <iprintf>
			return HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e141      	b.n	800cd94 <hal_motor_init+0x3e0>
		}
		else
			LOG("tilt node=0x%02X\r\n", mc.mtrEle._u8Node);
 800cb10:	f7fa fc21 	bl	8007356 <osKernelSysTick>
 800cb14:	4603      	mov	r3, r0
 800cb16:	4a5a      	ldr	r2, [pc, #360]	; (800cc80 <hal_motor_init+0x2cc>)
 800cb18:	fba2 1203 	umull	r1, r2, r2, r3
 800cb1c:	0b51      	lsrs	r1, r2, #13
 800cb1e:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb22:	fb01 f202 	mul.w	r2, r1, r2
 800cb26:	1a99      	subs	r1, r3, r2
 800cb28:	4b58      	ldr	r3, [pc, #352]	; (800cc8c <hal_motor_init+0x2d8>)
 800cb2a:	f893 3595 	ldrb.w	r3, [r3, #1429]	; 0x595
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2373      	movs	r3, #115	; 0x73
 800cb32:	4a54      	ldr	r2, [pc, #336]	; (800cc84 <hal_motor_init+0x2d0>)
 800cb34:	485f      	ldr	r0, [pc, #380]	; (800ccb4 <hal_motor_init+0x300>)
 800cb36:	f002 fccb 	bl	800f4d0 <iprintf>

		LOG("tilt param init\r\n");
 800cb3a:	f7fa fc0c 	bl	8007356 <osKernelSysTick>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	4a4f      	ldr	r2, [pc, #316]	; (800cc80 <hal_motor_init+0x2cc>)
 800cb42:	fba2 1203 	umull	r1, r2, r2, r3
 800cb46:	0b51      	lsrs	r1, r2, #13
 800cb48:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb4c:	fb01 f202 	mul.w	r2, r1, r2
 800cb50:	1a99      	subs	r1, r3, r2
 800cb52:	2375      	movs	r3, #117	; 0x75
 800cb54:	4a4b      	ldr	r2, [pc, #300]	; (800cc84 <hal_motor_init+0x2d0>)
 800cb56:	4858      	ldr	r0, [pc, #352]	; (800ccb8 <hal_motor_init+0x304>)
 800cb58:	f002 fcba 	bl	800f4d0 <iprintf>
		motor_param_init(&mc.mtrEle);
 800cb5c:	4853      	ldr	r0, [pc, #332]	; (800ccac <hal_motor_init+0x2f8>)
 800cb5e:	f7ff feab 	bl	800c8b8 <motor_param_init>
		LOG("done!\r\n");
 800cb62:	f7fa fbf8 	bl	8007356 <osKernelSysTick>
 800cb66:	4603      	mov	r3, r0
 800cb68:	4a45      	ldr	r2, [pc, #276]	; (800cc80 <hal_motor_init+0x2cc>)
 800cb6a:	fba2 1203 	umull	r1, r2, r2, r3
 800cb6e:	0b51      	lsrs	r1, r2, #13
 800cb70:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb74:	fb01 f202 	mul.w	r2, r1, r2
 800cb78:	1a99      	subs	r1, r3, r2
 800cb7a:	2377      	movs	r3, #119	; 0x77
 800cb7c:	4a41      	ldr	r2, [pc, #260]	; (800cc84 <hal_motor_init+0x2d0>)
 800cb7e:	4849      	ldr	r0, [pc, #292]	; (800cca4 <hal_motor_init+0x2f0>)
 800cb80:	f002 fca6 	bl	800f4d0 <iprintf>
	}

	if ((is_motor_az_enable() != 0) || (is_motor_el_enable() != 0)) {
 800cb84:	4b41      	ldr	r3, [pc, #260]	; (800cc8c <hal_motor_init+0x2d8>)
 800cb86:	791b      	ldrb	r3, [r3, #4]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d108      	bne.n	800cba4 <hal_motor_init+0x1f0>
 800cb92:	4b3e      	ldr	r3, [pc, #248]	; (800cc8c <hal_motor_init+0x2d8>)
 800cb94:	791b      	ldrb	r3, [r3, #4]
 800cb96:	105b      	asrs	r3, r3, #1
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 80e6 	beq.w	800cd70 <hal_motor_init+0x3bc>
		uint32_t _mtrInitialTimer = osKernelSysTick() + MTR_INIT_TIMEOUT;
 800cba4:	f7fa fbd7 	bl	8007356 <osKernelSysTick>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800cbae:	3360      	adds	r3, #96	; 0x60
 800cbb0:	60fb      	str	r3, [r7, #12]
		uint8_t _mtr_ready = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	75fb      	strb	r3, [r7, #23]
		uint8_t _mtr_finished = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75bb      	strb	r3, [r7, #22]
		if (is_motor_az_enable())
 800cbba:	4b34      	ldr	r3, [pc, #208]	; (800cc8c <hal_motor_init+0x2d8>)
 800cbbc:	791b      	ldrb	r3, [r3, #4]
 800cbbe:	f003 0301 	and.w	r3, r3, #1
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <hal_motor_init+0x21a>
			bitSet(_mtr_finished, 0);
 800cbc6:	7dbb      	ldrb	r3, [r7, #22]
 800cbc8:	f043 0301 	orr.w	r3, r3, #1
 800cbcc:	75bb      	strb	r3, [r7, #22]
		if (is_motor_el_enable())
 800cbce:	4b2f      	ldr	r3, [pc, #188]	; (800cc8c <hal_motor_init+0x2d8>)
 800cbd0:	791b      	ldrb	r3, [r3, #4]
 800cbd2:	f003 0302 	and.w	r3, r3, #2
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <hal_motor_init+0x22e>
			bitSet(_mtr_finished, 1);
 800cbda:	7dbb      	ldrb	r3, [r7, #22]
 800cbdc:	f043 0302 	orr.w	r3, r3, #2
 800cbe0:	75bb      	strb	r3, [r7, #22]

		LOG("start angle det process\r\n");
 800cbe2:	f7fa fbb8 	bl	8007356 <osKernelSysTick>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	4a25      	ldr	r2, [pc, #148]	; (800cc80 <hal_motor_init+0x2cc>)
 800cbea:	fba2 1203 	umull	r1, r2, r2, r3
 800cbee:	0b51      	lsrs	r1, r2, #13
 800cbf0:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbf4:	fb01 f202 	mul.w	r2, r1, r2
 800cbf8:	1a99      	subs	r1, r3, r2
 800cbfa:	2383      	movs	r3, #131	; 0x83
 800cbfc:	4a21      	ldr	r2, [pc, #132]	; (800cc84 <hal_motor_init+0x2d0>)
 800cbfe:	482f      	ldr	r0, [pc, #188]	; (800ccbc <hal_motor_init+0x308>)
 800cc00:	f002 fc66 	bl	800f4d0 <iprintf>
		while (osKernelSysTick() < _mtrInitialTimer) {
 800cc04:	e0a8      	b.n	800cd58 <hal_motor_init+0x3a4>
			if (is_motor_az_enable()) {
 800cc06:	4b21      	ldr	r3, [pc, #132]	; (800cc8c <hal_motor_init+0x2d8>)
 800cc08:	791b      	ldrb	r3, [r3, #4]
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d013      	beq.n	800cc3a <hal_motor_init+0x286>
				if (!bitRead(_mtr_ready, 0))
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	f003 0301 	and.w	r3, r3, #1
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <hal_motor_init+0x26e>
					Ingenia_enableMotor(&mc.mtrAzi);
 800cc1c:	481e      	ldr	r0, [pc, #120]	; (800cc98 <hal_motor_init+0x2e4>)
 800cc1e:	f001 fa95 	bl	800e14c <Ingenia_enableMotor>

				if (mc.mtrAzi._isInitialAngleDeterminationProcessFinished == 1) {
 800cc22:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <hal_motor_init+0x2d8>)
 800cc24:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d106      	bne.n	800cc3a <hal_motor_init+0x286>
					bitSet(_mtr_ready, 0);
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	f043 0301 	orr.w	r3, r3, #1
 800cc32:	75fb      	strb	r3, [r7, #23]
					Ingenia_disableMotor(&mc.mtrAzi);
 800cc34:	4818      	ldr	r0, [pc, #96]	; (800cc98 <hal_motor_init+0x2e4>)
 800cc36:	f001 fa95 	bl	800e164 <Ingenia_disableMotor>
				}
			}

			if (is_motor_el_enable()) {
 800cc3a:	4b14      	ldr	r3, [pc, #80]	; (800cc8c <hal_motor_init+0x2d8>)
 800cc3c:	791b      	ldrb	r3, [r3, #4]
 800cc3e:	f003 0302 	and.w	r3, r3, #2
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d015      	beq.n	800cc72 <hal_motor_init+0x2be>
				if (!bitRead(_mtr_ready, 1))
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	085b      	lsrs	r3, r3, #1
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d102      	bne.n	800cc5a <hal_motor_init+0x2a6>
					Ingenia_enableMotor(&mc.mtrEle);
 800cc54:	4815      	ldr	r0, [pc, #84]	; (800ccac <hal_motor_init+0x2f8>)
 800cc56:	f001 fa79 	bl	800e14c <Ingenia_enableMotor>

				if (mc.mtrEle._isInitialAngleDeterminationProcessFinished == 1) {
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <hal_motor_init+0x2d8>)
 800cc5c:	f893 3596 	ldrb.w	r3, [r3, #1430]	; 0x596
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d106      	bne.n	800cc72 <hal_motor_init+0x2be>
					bitSet(_mtr_ready, 1);
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	f043 0302 	orr.w	r3, r3, #2
 800cc6a:	75fb      	strb	r3, [r7, #23]
					Ingenia_disableMotor(&mc.mtrEle);
 800cc6c:	480f      	ldr	r0, [pc, #60]	; (800ccac <hal_motor_init+0x2f8>)
 800cc6e:	f001 fa79 	bl	800e164 <Ingenia_disableMotor>
				}
			}

			if (_mtr_ready == _mtr_finished)
 800cc72:	7dfa      	ldrb	r2, [r7, #23]
 800cc74:	7dbb      	ldrb	r3, [r7, #22]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d076      	beq.n	800cd68 <hal_motor_init+0x3b4>
				break;
			else {
				for ( int i = 0; i < 300; i++ ) {
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	613b      	str	r3, [r7, #16]
 800cc7e:	e050      	b.n	800cd22 <hal_motor_init+0x36e>
 800cc80:	d1b71759 	.word	0xd1b71759
 800cc84:	08011f0c 	.word	0x08011f0c
 800cc88:	08011f3c 	.word	0x08011f3c
 800cc8c:	20010764 	.word	0x20010764
 800cc90:	20000298 	.word	0x20000298
 800cc94:	08011f58 	.word	0x08011f58
 800cc98:	2001076c 	.word	0x2001076c
 800cc9c:	08011f80 	.word	0x08011f80
 800cca0:	08011fa4 	.word	0x08011fa4
 800cca4:	08011fc4 	.word	0x08011fc4
 800cca8:	08011fd8 	.word	0x08011fd8
 800ccac:	20010a40 	.word	0x20010a40
 800ccb0:	08012000 	.word	0x08012000
 800ccb4:	08012024 	.word	0x08012024
 800ccb8:	08012044 	.word	0x08012044
 800ccbc:	08012064 	.word	0x08012064
					printf(".");
 800ccc0:	202e      	movs	r0, #46	; 0x2e
 800ccc2:	f002 fc1d 	bl	800f500 <putchar>
					osDelay(50);
 800ccc6:	2032      	movs	r0, #50	; 0x32
 800ccc8:	f7fa fb98 	bl	80073fc <osDelay>
					if (is_motor_az_enable()) {
 800cccc:	4b33      	ldr	r3, [pc, #204]	; (800cd9c <hal_motor_init+0x3e8>)
 800ccce:	791b      	ldrb	r3, [r3, #4]
 800ccd0:	f003 0301 	and.w	r3, r3, #1
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00b      	beq.n	800ccf0 <hal_motor_init+0x33c>
						/* get statusword from can interrupt */
						Ingenia_getDecodedStatusWord(&mc.mtrAzi);
 800ccd8:	4831      	ldr	r0, [pc, #196]	; (800cda0 <hal_motor_init+0x3ec>)
 800ccda:	f000 ff4b 	bl	800db74 <Ingenia_getDecodedStatusWord>
						if (mc.mtrAzi._isInitialAngleDeterminationProcessFinished)
 800ccde:	4b2f      	ldr	r3, [pc, #188]	; (800cd9c <hal_motor_init+0x3e8>)
 800cce0:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d003      	beq.n	800ccf0 <hal_motor_init+0x33c>
							bitSet(_mtr_ready, 0);
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	f043 0301 	orr.w	r3, r3, #1
 800ccee:	75fb      	strb	r3, [r7, #23]
					}

					if (is_motor_el_enable()) {
 800ccf0:	4b2a      	ldr	r3, [pc, #168]	; (800cd9c <hal_motor_init+0x3e8>)
 800ccf2:	791b      	ldrb	r3, [r3, #4]
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00b      	beq.n	800cd14 <hal_motor_init+0x360>
						/* get statusword from can interrupt */
						Ingenia_getDecodedStatusWord(&mc.mtrEle);
 800ccfc:	4829      	ldr	r0, [pc, #164]	; (800cda4 <hal_motor_init+0x3f0>)
 800ccfe:	f000 ff39 	bl	800db74 <Ingenia_getDecodedStatusWord>
						if (mc.mtrEle._isInitialAngleDeterminationProcessFinished)
 800cd02:	4b26      	ldr	r3, [pc, #152]	; (800cd9c <hal_motor_init+0x3e8>)
 800cd04:	f893 3596 	ldrb.w	r3, [r3, #1430]	; 0x596
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <hal_motor_init+0x360>
							bitSet(_mtr_ready, 1);
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	f043 0302 	orr.w	r3, r3, #2
 800cd12:	75fb      	strb	r3, [r7, #23]
					}

					/* if all motor already initialized */
					if (_mtr_ready == _mtr_finished)
 800cd14:	7dfa      	ldrb	r2, [r7, #23]
 800cd16:	7dbb      	ldrb	r3, [r7, #22]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d007      	beq.n	800cd2c <hal_motor_init+0x378>
				for ( int i = 0; i < 300; i++ ) {
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cd28:	dbca      	blt.n	800ccc0 <hal_motor_init+0x30c>
 800cd2a:	e000      	b.n	800cd2e <hal_motor_init+0x37a>
						break;
 800cd2c:	bf00      	nop
				}
			}

			if (is_motor_az_enable())
 800cd2e:	4b1b      	ldr	r3, [pc, #108]	; (800cd9c <hal_motor_init+0x3e8>)
 800cd30:	791b      	ldrb	r3, [r3, #4]
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <hal_motor_init+0x38c>
				Ingenia_disableMotor(&mc.mtrAzi);
 800cd3a:	4819      	ldr	r0, [pc, #100]	; (800cda0 <hal_motor_init+0x3ec>)
 800cd3c:	f001 fa12 	bl	800e164 <Ingenia_disableMotor>
			if (is_motor_el_enable())
 800cd40:	4b16      	ldr	r3, [pc, #88]	; (800cd9c <hal_motor_init+0x3e8>)
 800cd42:	791b      	ldrb	r3, [r3, #4]
 800cd44:	f003 0302 	and.w	r3, r3, #2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <hal_motor_init+0x39e>
				Ingenia_disableMotor(&mc.mtrEle);
 800cd4c:	4815      	ldr	r0, [pc, #84]	; (800cda4 <hal_motor_init+0x3f0>)
 800cd4e:	f001 fa09 	bl	800e164 <Ingenia_disableMotor>

			osDelay(100);
 800cd52:	2064      	movs	r0, #100	; 0x64
 800cd54:	f7fa fb52 	bl	80073fc <osDelay>
		while (osKernelSysTick() < _mtrInitialTimer) {
 800cd58:	f7fa fafd 	bl	8007356 <osKernelSysTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	f63f af50 	bhi.w	800cc06 <hal_motor_init+0x252>
 800cd66:	e000      	b.n	800cd6a <hal_motor_init+0x3b6>
				break;
 800cd68:	bf00      	nop
		}
		printf("\r\n");
 800cd6a:	480f      	ldr	r0, [pc, #60]	; (800cda8 <hal_motor_init+0x3f4>)
 800cd6c:	f002 fc4c 	bl	800f608 <puts>
	}

	LOG("Motor Ready!\r\n");
 800cd70:	f7fa faf1 	bl	8007356 <osKernelSysTick>
 800cd74:	4603      	mov	r3, r0
 800cd76:	4a0d      	ldr	r2, [pc, #52]	; (800cdac <hal_motor_init+0x3f8>)
 800cd78:	fba2 1203 	umull	r1, r2, r2, r3
 800cd7c:	0b51      	lsrs	r1, r2, #13
 800cd7e:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd82:	fb01 f202 	mul.w	r2, r1, r2
 800cd86:	1a99      	subs	r1, r3, r2
 800cd88:	23bd      	movs	r3, #189	; 0xbd
 800cd8a:	4a09      	ldr	r2, [pc, #36]	; (800cdb0 <hal_motor_init+0x3fc>)
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <hal_motor_init+0x400>)
 800cd8e:	f002 fb9f 	bl	800f4d0 <iprintf>

	return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20010764 	.word	0x20010764
 800cda0:	2001076c 	.word	0x2001076c
 800cda4:	20010a40 	.word	0x20010a40
 800cda8:	0801208c 	.word	0x0801208c
 800cdac:	d1b71759 	.word	0xd1b71759
 800cdb0:	08011f0c 	.word	0x08011f0c
 800cdb4:	08012090 	.word	0x08012090

0800cdb8 <hal_motor_stop>:

static void hal_motor_stop(Servo_t *servo)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af02      	add	r7, sp, #8
 800cdbe:	6078      	str	r0, [r7, #4]
	Ingenia_setTargetPositionVelocity(servo, servo->posActual, 0, 1, 0, 0);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 12bc 	ldr.w	r1, [r3, #700]	; 0x2bc
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	2301      	movs	r3, #1
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f001 f9ec 	bl	800e1b0 <Ingenia_setTargetPositionVelocity>
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <hal_motor_speed>:

static HAL_StatusTypeDef hal_motor_speed(Servo_t *servo, const int32_t spd)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af02      	add	r7, sp, #8
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
	uint32_t _abs_speed = abs(spd);
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfb8      	it	lt
 800cdf0:	425b      	neglt	r3, r3
 800cdf2:	613b      	str	r3, [r7, #16]

	int32_t _pos = servo->posActual;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdfa:	617b      	str	r3, [r7, #20]
	int32_t _max_pos = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60fb      	str	r3, [r7, #12]

	_max_pos = _abs_speed / 2;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	085b      	lsrs	r3, r3, #1
 800ce04:	60fb      	str	r3, [r7, #12]

	if (spd == 0)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d103      	bne.n	800ce14 <hal_motor_speed+0x34>
		hal_motor_stop(servo);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f7ff ffd3 	bl	800cdb8 <hal_motor_stop>
 800ce12:	e015      	b.n	800ce40 <hal_motor_speed+0x60>
	else {
		if (spd < 0)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	da04      	bge.n	800ce24 <hal_motor_speed+0x44>
			_pos -= _max_pos;
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	e003      	b.n	800ce2c <hal_motor_speed+0x4c>
		else
			_pos += _max_pos;
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	4413      	add	r3, r2
 800ce2a:	617b      	str	r3, [r7, #20]

		Ingenia_setTargetPositionVelocity(servo, _pos, _abs_speed, 1, 0, 0);
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	2300      	movs	r3, #0
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	2301      	movs	r3, #1
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	6979      	ldr	r1, [r7, #20]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 f9b8 	bl	800e1b0 <Ingenia_setTargetPositionVelocity>
	}
	return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
	...

0800ce4c <hal_motor_set_pan_power>:

void hal_motor_set_pan_power(const uint8_t act)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	4603      	mov	r3, r0
 800ce54:	71fb      	strb	r3, [r7, #7]
	if (is_motor_az_enable()) {
 800ce56:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <hal_motor_set_pan_power+0x58>)
 800ce58:	791b      	ldrb	r3, [r3, #4]
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d009      	beq.n	800ce76 <hal_motor_set_pan_power+0x2a>
		if (act != 0)
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d003      	beq.n	800ce70 <hal_motor_set_pan_power+0x24>
			Ingenia_enableMotor(&mc.mtrAzi);
 800ce68:	480f      	ldr	r0, [pc, #60]	; (800cea8 <hal_motor_set_pan_power+0x5c>)
 800ce6a:	f001 f96f 	bl	800e14c <Ingenia_enableMotor>
 800ce6e:	e002      	b.n	800ce76 <hal_motor_set_pan_power+0x2a>
		else
			Ingenia_disableMotor(&mc.mtrAzi);
 800ce70:	480d      	ldr	r0, [pc, #52]	; (800cea8 <hal_motor_set_pan_power+0x5c>)
 800ce72:	f001 f977 	bl	800e164 <Ingenia_disableMotor>
	}
	LOG("\r\nPAN_power: %d\r\n\r\n", act);
 800ce76:	f7fa fa6e 	bl	8007356 <osKernelSysTick>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	4a0b      	ldr	r2, [pc, #44]	; (800ceac <hal_motor_set_pan_power+0x60>)
 800ce7e:	fba2 1203 	umull	r1, r2, r2, r3
 800ce82:	0b51      	lsrs	r1, r2, #13
 800ce84:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce88:	fb01 f202 	mul.w	r2, r1, r2
 800ce8c:	1a99      	subs	r1, r3, r2
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	23e5      	movs	r3, #229	; 0xe5
 800ce94:	4a06      	ldr	r2, [pc, #24]	; (800ceb0 <hal_motor_set_pan_power+0x64>)
 800ce96:	4807      	ldr	r0, [pc, #28]	; (800ceb4 <hal_motor_set_pan_power+0x68>)
 800ce98:	f002 fb1a 	bl	800f4d0 <iprintf>
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20010764 	.word	0x20010764
 800cea8:	2001076c 	.word	0x2001076c
 800ceac:	d1b71759 	.word	0xd1b71759
 800ceb0:	08011f0c 	.word	0x08011f0c
 800ceb4:	080120ac 	.word	0x080120ac

0800ceb8 <hal_motor_set_tilt_power>:

void hal_motor_set_tilt_power(const uint8_t act)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af02      	add	r7, sp, #8
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
	if (is_motor_el_enable()) {
 800cec2:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <hal_motor_set_tilt_power+0x58>)
 800cec4:	791b      	ldrb	r3, [r3, #4]
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d009      	beq.n	800cee2 <hal_motor_set_tilt_power+0x2a>
		if (act == 1)
 800cece:	79fb      	ldrb	r3, [r7, #7]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d103      	bne.n	800cedc <hal_motor_set_tilt_power+0x24>
			Ingenia_enableMotor(&mc.mtrEle);
 800ced4:	480f      	ldr	r0, [pc, #60]	; (800cf14 <hal_motor_set_tilt_power+0x5c>)
 800ced6:	f001 f939 	bl	800e14c <Ingenia_enableMotor>
 800ceda:	e002      	b.n	800cee2 <hal_motor_set_tilt_power+0x2a>
		else
			Ingenia_disableMotor(&mc.mtrEle);
 800cedc:	480d      	ldr	r0, [pc, #52]	; (800cf14 <hal_motor_set_tilt_power+0x5c>)
 800cede:	f001 f941 	bl	800e164 <Ingenia_disableMotor>
	}
	LOG("\r\nTILT_power: %d\r\n\r\n", act);
 800cee2:	f7fa fa38 	bl	8007356 <osKernelSysTick>
 800cee6:	4603      	mov	r3, r0
 800cee8:	4a0b      	ldr	r2, [pc, #44]	; (800cf18 <hal_motor_set_tilt_power+0x60>)
 800ceea:	fba2 1203 	umull	r1, r2, r2, r3
 800ceee:	0b51      	lsrs	r1, r2, #13
 800cef0:	f242 7210 	movw	r2, #10000	; 0x2710
 800cef4:	fb01 f202 	mul.w	r2, r1, r2
 800cef8:	1a99      	subs	r1, r3, r2
 800cefa:	79fb      	ldrb	r3, [r7, #7]
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	23f0      	movs	r3, #240	; 0xf0
 800cf00:	4a06      	ldr	r2, [pc, #24]	; (800cf1c <hal_motor_set_tilt_power+0x64>)
 800cf02:	4807      	ldr	r0, [pc, #28]	; (800cf20 <hal_motor_set_tilt_power+0x68>)
 800cf04:	f002 fae4 	bl	800f4d0 <iprintf>
}
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	20010764 	.word	0x20010764
 800cf14:	20010a40 	.word	0x20010a40
 800cf18:	d1b71759 	.word	0xd1b71759
 800cf1c:	08011f0c 	.word	0x08011f0c
 800cf20:	080120cc 	.word	0x080120cc

0800cf24 <hal_motor_set_position>:

uint8_t hal_motor_set_position(const int32_t pan_pos_in_c, const int32_t tilt_pos_in_c)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
	uint8_t ret = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
	if (is_motor_az_enable()) {
 800cf32:	4b1c      	ldr	r3, [pc, #112]	; (800cfa4 <hal_motor_set_position+0x80>)
 800cf34:	791b      	ldrb	r3, [r3, #4]
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d013      	beq.n	800cf66 <hal_motor_set_position+0x42>
		if (Ingenia_getDecodedStatusWord(&mc.mtrAzi) == STATUS_OPERATION_ENABLED) {
 800cf3e:	481a      	ldr	r0, [pc, #104]	; (800cfa8 <hal_motor_set_position+0x84>)
 800cf40:	f000 fe18 	bl	800db74 <Ingenia_getDecodedStatusWord>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b04      	cmp	r3, #4
 800cf48:	d10d      	bne.n	800cf66 <hal_motor_set_position+0x42>
//			LOG("motor pan moving\r\n");
			Ingenia_setTargetPositionVelocity(&mc.mtrAzi, pan_pos_in_c, (RWS_MOTOR_PAN_MAX_SPEED / 2), 1, 0, 0);
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	2301      	movs	r3, #1
 800cf54:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	4813      	ldr	r0, [pc, #76]	; (800cfa8 <hal_motor_set_position+0x84>)
 800cf5c:	f001 f928 	bl	800e1b0 <Ingenia_setTargetPositionVelocity>
			ret++;
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	3301      	adds	r3, #1
 800cf64:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (is_motor_el_enable()) {
 800cf66:	4b0f      	ldr	r3, [pc, #60]	; (800cfa4 <hal_motor_set_position+0x80>)
 800cf68:	791b      	ldrb	r3, [r3, #4]
 800cf6a:	f003 0302 	and.w	r3, r3, #2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d013      	beq.n	800cf9a <hal_motor_set_position+0x76>
		if (Ingenia_getDecodedStatusWord(&mc.mtrEle) == STATUS_OPERATION_ENABLED) {
 800cf72:	480e      	ldr	r0, [pc, #56]	; (800cfac <hal_motor_set_position+0x88>)
 800cf74:	f000 fdfe 	bl	800db74 <Ingenia_getDecodedStatusWord>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b04      	cmp	r3, #4
 800cf7c:	d10d      	bne.n	800cf9a <hal_motor_set_position+0x76>
//			LOG("motor tilt moving\r\n");
			Ingenia_setTargetPositionVelocity(&mc.mtrEle, tilt_pos_in_c, (RWS_MOTOR_TILT_MAX_SPEED / 2), 1, 0, 0);
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	2300      	movs	r3, #0
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	2301      	movs	r3, #1
 800cf88:	f44f 32a8 	mov.w	r2, #86016	; 0x15000
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	4807      	ldr	r0, [pc, #28]	; (800cfac <hal_motor_set_position+0x88>)
 800cf90:	f001 f90e 	bl	800e1b0 <Ingenia_setTargetPositionVelocity>
			ret++;
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	3301      	adds	r3, #1
 800cf98:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20010764 	.word	0x20010764
 800cfa8:	2001076c 	.word	0x2001076c
 800cfac:	20010a40 	.word	0x20010a40

0800cfb0 <hal_motor_set_speed>:

uint8_t hal_motor_set_speed(const int32_t pan_speed, const int32_t tilt_speed)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
	static uint8_t _pan_idle_counter = 0;
	static uint8_t _tilt_idle_counter = 0;
	uint8_t ret = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]

	if (is_motor_az_enable()) {
 800cfbe:	4b2f      	ldr	r3, [pc, #188]	; (800d07c <hal_motor_set_speed+0xcc>)
 800cfc0:	791b      	ldrb	r3, [r3, #4]
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d026      	beq.n	800d018 <hal_motor_set_speed+0x68>
		if (Ingenia_getDecodedStatusWord(&mc.mtrAzi) == STATUS_OPERATION_ENABLED) {
 800cfca:	482d      	ldr	r0, [pc, #180]	; (800d080 <hal_motor_set_speed+0xd0>)
 800cfcc:	f000 fdd2 	bl	800db74 <Ingenia_getDecodedStatusWord>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b04      	cmp	r3, #4
 800cfd4:	d10d      	bne.n	800cff2 <hal_motor_set_speed+0x42>
			if (hal_motor_speed(&mc.mtrAzi, pan_speed) == HAL_OK)
 800cfd6:	6879      	ldr	r1, [r7, #4]
 800cfd8:	4829      	ldr	r0, [pc, #164]	; (800d080 <hal_motor_set_speed+0xd0>)
 800cfda:	f7ff ff01 	bl	800cde0 <hal_motor_speed>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d102      	bne.n	800cfea <hal_motor_set_speed+0x3a>
				ret++;
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	73fb      	strb	r3, [r7, #15]
			_pan_idle_counter = 0;
 800cfea:	4b26      	ldr	r3, [pc, #152]	; (800d084 <hal_motor_set_speed+0xd4>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
 800cff0:	e012      	b.n	800d018 <hal_motor_set_speed+0x68>
		}
		else {
			/* reduce upload rate */
			if (++_pan_idle_counter > 10) {
 800cff2:	4b24      	ldr	r3, [pc, #144]	; (800d084 <hal_motor_set_speed+0xd4>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	3301      	adds	r3, #1
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	4b22      	ldr	r3, [pc, #136]	; (800d084 <hal_motor_set_speed+0xd4>)
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	4b21      	ldr	r3, [pc, #132]	; (800d084 <hal_motor_set_speed+0xd4>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b0a      	cmp	r3, #10
 800d004:	d908      	bls.n	800d018 <hal_motor_set_speed+0x68>
				_pan_idle_counter = 0;
 800d006:	4b1f      	ldr	r3, [pc, #124]	; (800d084 <hal_motor_set_speed+0xd4>)
 800d008:	2200      	movs	r2, #0
 800d00a:	701a      	strb	r2, [r3, #0]
				hal_motor_set_pan_power(0);
 800d00c:	2000      	movs	r0, #0
 800d00e:	f7ff ff1d 	bl	800ce4c <hal_motor_set_pan_power>
				ret++;
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	3301      	adds	r3, #1
 800d016:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	if (is_motor_el_enable()) {
 800d018:	4b18      	ldr	r3, [pc, #96]	; (800d07c <hal_motor_set_speed+0xcc>)
 800d01a:	791b      	ldrb	r3, [r3, #4]
 800d01c:	f003 0302 	and.w	r3, r3, #2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d026      	beq.n	800d072 <hal_motor_set_speed+0xc2>
		if (Ingenia_getDecodedStatusWord(&mc.mtrEle) == STATUS_OPERATION_ENABLED) {
 800d024:	4818      	ldr	r0, [pc, #96]	; (800d088 <hal_motor_set_speed+0xd8>)
 800d026:	f000 fda5 	bl	800db74 <Ingenia_getDecodedStatusWord>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b04      	cmp	r3, #4
 800d02e:	d10d      	bne.n	800d04c <hal_motor_set_speed+0x9c>
			if (hal_motor_speed(&mc.mtrEle, tilt_speed) == HAL_OK)
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	4815      	ldr	r0, [pc, #84]	; (800d088 <hal_motor_set_speed+0xd8>)
 800d034:	f7ff fed4 	bl	800cde0 <hal_motor_speed>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d102      	bne.n	800d044 <hal_motor_set_speed+0x94>
				ret++;
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	3301      	adds	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
			_tilt_idle_counter = 0;
 800d044:	4b11      	ldr	r3, [pc, #68]	; (800d08c <hal_motor_set_speed+0xdc>)
 800d046:	2200      	movs	r2, #0
 800d048:	701a      	strb	r2, [r3, #0]
 800d04a:	e012      	b.n	800d072 <hal_motor_set_speed+0xc2>
		}
		else {
			/* reduce upload rate */
			if (++_tilt_idle_counter > 10) {
 800d04c:	4b0f      	ldr	r3, [pc, #60]	; (800d08c <hal_motor_set_speed+0xdc>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	3301      	adds	r3, #1
 800d052:	b2da      	uxtb	r2, r3
 800d054:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <hal_motor_set_speed+0xdc>)
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <hal_motor_set_speed+0xdc>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b0a      	cmp	r3, #10
 800d05e:	d908      	bls.n	800d072 <hal_motor_set_speed+0xc2>
				_tilt_idle_counter = 0;
 800d060:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <hal_motor_set_speed+0xdc>)
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
				hal_motor_set_tilt_power(0);
 800d066:	2000      	movs	r0, #0
 800d068:	f7ff ff26 	bl	800ceb8 <hal_motor_set_tilt_power>
				ret++;
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	3301      	adds	r3, #1
 800d070:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return ret;
 800d072:	7bfb      	ldrb	r3, [r7, #15]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	20010764 	.word	0x20010764
 800d080:	2001076c 	.word	0x2001076c
 800d084:	20010d14 	.word	0x20010d14
 800d088:	20010a40 	.word	0x20010a40
 800d08c:	20010d15 	.word	0x20010d15

0800d090 <hal_motor_get_motor_state>:

	return 0.0f;
}

void hal_motor_get_motor_state(Servo_Value_t *p, Servo_Value_t *t)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
	static uint32_t p_state_counter = 0;
	static uint32_t p_value_counter = 0;
	static uint32_t t_state_counter = 0;
	static uint32_t t_value_counter = 0;

	if (p_state_counter != mc.mtrAzi.tpdo3_counter) {
 800d09a:	4b35      	ldr	r3, [pc, #212]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d09c:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800d0a0:	4b34      	ldr	r3, [pc, #208]	; (800d174 <hal_motor_get_motor_state+0xe4>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d014      	beq.n	800d0d2 <hal_motor_get_motor_state+0x42>
		p_state_counter = mc.mtrAzi.tpdo3_counter;
 800d0a8:	4b31      	ldr	r3, [pc, #196]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d0ae:	4a31      	ldr	r2, [pc, #196]	; (800d174 <hal_motor_get_motor_state+0xe4>)
 800d0b0:	6013      	str	r3, [r2, #0]
		p->statusword = mc.mtrAzi.statusword;
 800d0b2:	4b2f      	ldr	r3, [pc, #188]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0b4:	f8b3 22d6 	ldrh.w	r2, [r3, #726]	; 0x2d6
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	805a      	strh	r2, [r3, #2]
		p->current_value = mc.mtrAzi.current;
 800d0bc:	4b2c      	ldr	r3, [pc, #176]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0be:	f9b3 22d4 	ldrsh.w	r2, [r3, #724]	; 0x2d4
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	809a      	strh	r2, [r3, #4]
		p->dc_link_voltage = mc.mtrAzi.voltage;
 800d0c6:	4b2a      	ldr	r3, [pc, #168]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0c8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	609a      	str	r2, [r3, #8]
	}

	if (p_value_counter != mc.mtrAzi.tpdo4_counter) {
 800d0d2:	4b27      	ldr	r3, [pc, #156]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0d4:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 800d0d8:	4b27      	ldr	r3, [pc, #156]	; (800d178 <hal_motor_get_motor_state+0xe8>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d00e      	beq.n	800d0fe <hal_motor_get_motor_state+0x6e>
		p_state_counter = mc.mtrAzi.tpdo4_counter;
 800d0e0:	4b23      	ldr	r3, [pc, #140]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0e2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d0e6:	4a23      	ldr	r2, [pc, #140]	; (800d174 <hal_motor_get_motor_state+0xe4>)
 800d0e8:	6013      	str	r3, [r2, #0]
		p->speed = mc.mtrAzi.veloActual;
 800d0ea:	4b21      	ldr	r3, [pc, #132]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0ec:	f8d3 22c8 	ldr.w	r2, [r3, #712]	; 0x2c8
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	611a      	str	r2, [r3, #16]
		p->pos = mc.mtrAzi.posActual;
 800d0f4:	4b1e      	ldr	r3, [pc, #120]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d0f6:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	60da      	str	r2, [r3, #12]
	}

	if (t_state_counter != mc.mtrEle.tpdo3_counter) {
 800d0fe:	4b1c      	ldr	r3, [pc, #112]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d100:	f8d3 25ac 	ldr.w	r2, [r3, #1452]	; 0x5ac
 800d104:	4b1d      	ldr	r3, [pc, #116]	; (800d17c <hal_motor_get_motor_state+0xec>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d014      	beq.n	800d136 <hal_motor_get_motor_state+0xa6>
		t_state_counter = mc.mtrEle.tpdo3_counter;
 800d10c:	4b18      	ldr	r3, [pc, #96]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d10e:	f8d3 35ac 	ldr.w	r3, [r3, #1452]	; 0x5ac
 800d112:	4a1a      	ldr	r2, [pc, #104]	; (800d17c <hal_motor_get_motor_state+0xec>)
 800d114:	6013      	str	r3, [r2, #0]
		t->statusword = mc.mtrEle.statusword;
 800d116:	4b16      	ldr	r3, [pc, #88]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d118:	f8b3 25aa 	ldrh.w	r2, [r3, #1450]	; 0x5aa
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	805a      	strh	r2, [r3, #2]
		t->current_value = mc.mtrEle.current;
 800d120:	4b13      	ldr	r3, [pc, #76]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d122:	f9b3 25a8 	ldrsh.w	r2, [r3, #1448]	; 0x5a8
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	809a      	strh	r2, [r3, #4]
		t->dc_link_voltage = mc.mtrEle.voltage;
 800d12a:	4b11      	ldr	r3, [pc, #68]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d12c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800d130:	461a      	mov	r2, r3
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	609a      	str	r2, [r3, #8]
	}

	if (t_value_counter != mc.mtrEle.tpdo4_counter) {
 800d136:	4b0e      	ldr	r3, [pc, #56]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d138:	f8d3 25a0 	ldr.w	r2, [r3, #1440]	; 0x5a0
 800d13c:	4b10      	ldr	r3, [pc, #64]	; (800d180 <hal_motor_get_motor_state+0xf0>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	429a      	cmp	r2, r3
 800d142:	d00e      	beq.n	800d162 <hal_motor_get_motor_state+0xd2>
		t_state_counter = mc.mtrEle.tpdo4_counter;
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d146:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800d14a:	4a0c      	ldr	r2, [pc, #48]	; (800d17c <hal_motor_get_motor_state+0xec>)
 800d14c:	6013      	str	r3, [r2, #0]
		t->speed = mc.mtrEle.veloActual;
 800d14e:	4b08      	ldr	r3, [pc, #32]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d150:	f8d3 259c 	ldr.w	r2, [r3, #1436]	; 0x59c
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	611a      	str	r2, [r3, #16]
		t->pos = mc.mtrEle.posActual;
 800d158:	4b05      	ldr	r3, [pc, #20]	; (800d170 <hal_motor_get_motor_state+0xe0>)
 800d15a:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	60da      	str	r2, [r3, #12]
	}

}
 800d162:	bf00      	nop
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	20010764 	.word	0x20010764
 800d174:	20010d18 	.word	0x20010d18
 800d178:	20010d1c 	.word	0x20010d1c
 800d17c:	20010d20 	.word	0x20010d20
 800d180:	20010d24 	.word	0x20010d24

0800d184 <mtr_error_callback>:

void mtr_error_callback()
{
 800d184:	b580      	push	{r7, lr}
 800d186:	af00      	add	r7, sp, #0
	MX_FDCAN2_Init();
 800d188:	f7f4 f8bc 	bl	8001304 <MX_FDCAN2_Init>
	hal_motor_init(mc.mtr_enable);
 800d18c:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <mtr_error_callback+0x3c>)
 800d18e:	791b      	ldrb	r3, [r3, #4]
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fc0f 	bl	800c9b4 <hal_motor_init>
	LOG("\r\n\nBUS MTR ERROR\r\n\n");
 800d196:	f7fa f8de 	bl	8007356 <osKernelSysTick>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4a09      	ldr	r2, [pc, #36]	; (800d1c4 <mtr_error_callback+0x40>)
 800d19e:	fba2 1203 	umull	r1, r2, r2, r3
 800d1a2:	0b51      	lsrs	r1, r2, #13
 800d1a4:	f242 7210 	movw	r2, #10000	; 0x2710
 800d1a8:	fb01 f202 	mul.w	r2, r1, r2
 800d1ac:	1a99      	subs	r1, r3, r2
 800d1ae:	f240 1375 	movw	r3, #373	; 0x175
 800d1b2:	4a05      	ldr	r2, [pc, #20]	; (800d1c8 <mtr_error_callback+0x44>)
 800d1b4:	4805      	ldr	r0, [pc, #20]	; (800d1cc <mtr_error_callback+0x48>)
 800d1b6:	f002 f98b 	bl	800f4d0 <iprintf>
}
 800d1ba:	bf00      	nop
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	20010764 	.word	0x20010764
 800d1c4:	d1b71759 	.word	0xd1b71759
 800d1c8:	08011f0c 	.word	0x08011f0c
 800d1cc:	080120f0 	.word	0x080120f0

0800d1d0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	af00      	add	r7, sp, #0
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(LIM_AZ_ZERO_Pin) != 0x00u) {
 800d1d4:	4b06      	ldr	r3, [pc, #24]	; (800d1f0 <EXTI9_5_IRQHandler+0x20>)
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <EXTI9_5_IRQHandler+0x16>
		__HAL_GPIO_EXTI_CLEAR_IT(LIM_AZ_ZERO_Pin);
 800d1e0:	4b03      	ldr	r3, [pc, #12]	; (800d1f0 <EXTI9_5_IRQHandler+0x20>)
 800d1e2:	2280      	movs	r2, #128	; 0x80
 800d1e4:	615a      	str	r2, [r3, #20]
//				pTMail->param.sensor.trigger.pulse_off = 1;
//
//			osMailPut(mtr_get_mail(T_Weapon_id), pTMail);
//		}
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	40010400 	.word	0x40010400

0800d1f4 <Ingenia_tpdo_callback>:

void Ingenia_tpdo_callback(CAN_Buffer_t *buffer)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08e      	sub	sp, #56	; 0x38
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
	CAN_Data_t data;
	uint32_t _id_node = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	623b      	str	r3, [r7, #32]
	int _pos = 0, _velo = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	637b      	str	r3, [r7, #52]	; 0x34
 800d204:	2300      	movs	r3, #0
 800d206:	633b      	str	r3, [r7, #48]	; 0x30
	int _voltage = 0, _current = 0, _statusword = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d20c:	2300      	movs	r3, #0
 800d20e:	61fb      	str	r3, [r7, #28]
 800d210:	2300      	movs	r3, #0
 800d212:	61bb      	str	r3, [r7, #24]

	if (can_buffer_available(buffer) > 0) {
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 f865 	bl	800e2e4 <can_buffer_available>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 80c5 	beq.w	800d3ac <Ingenia_tpdo_callback+0x1b8>
		can_buffer_read(buffer, &data);
 800d222:	f107 0308 	add.w	r3, r7, #8
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f001 f917 	bl	800e45c <can_buffer_read>
		if ((data.id & COB_TPDO4) == COB_TPDO4) {
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	f403 6390 	and.w	r3, r3, #1152	; 0x480
 800d234:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d238:	d155      	bne.n	800d2e6 <Ingenia_tpdo_callback+0xf2>
			_id_node = data.id - COB_TPDO4;
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800d240:	623b      	str	r3, [r7, #32]

			for ( int i = 0; i < 4; i++ ) {
 800d242:	2300      	movs	r3, #0
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28
 800d246:	e01d      	b.n	800d284 <Ingenia_tpdo_callback+0x90>
				_pos |= (int32_t) data.rxData[i] << (8 * i);
 800d248:	f107 020d 	add.w	r2, r7, #13
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	4413      	add	r3, r2
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	fa02 f303 	lsl.w	r3, r2, r3
 800d25c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d25e:	4313      	orrs	r3, r2
 800d260:	637b      	str	r3, [r7, #52]	; 0x34
				_velo |= (int32_t) data.rxData[i + 4] << (8 * i);
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	3304      	adds	r3, #4
 800d266:	3338      	adds	r3, #56	; 0x38
 800d268:	443b      	add	r3, r7
 800d26a:	f813 3c2b 	ldrb.w	r3, [r3, #-43]
 800d26e:	461a      	mov	r2, r3
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	fa02 f303 	lsl.w	r3, r2, r3
 800d278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d27a:	4313      	orrs	r3, r2
 800d27c:	633b      	str	r3, [r7, #48]	; 0x30
			for ( int i = 0; i < 4; i++ ) {
 800d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d280:	3301      	adds	r3, #1
 800d282:	62bb      	str	r3, [r7, #40]	; 0x28
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	2b03      	cmp	r3, #3
 800d288:	ddde      	ble.n	800d248 <Ingenia_tpdo_callback+0x54>
			}

			if (_id_node == mc.mtrAzi._u8Node) {
 800d28a:	4b4a      	ldr	r3, [pc, #296]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d28c:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 800d290:	461a      	mov	r2, r3
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	4293      	cmp	r3, r2
 800d296:	d10f      	bne.n	800d2b8 <Ingenia_tpdo_callback+0xc4>
				mc.mtrAzi.posActual = _pos;
 800d298:	4a46      	ldr	r2, [pc, #280]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29c:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
				mc.mtrAzi.veloActual = _velo;
 800d2a0:	4a44      	ldr	r2, [pc, #272]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	f8c2 32c8 	str.w	r3, [r2, #712]	; 0x2c8
				mc.mtrAzi.tpdo4_counter++;
 800d2a8:	4b42      	ldr	r3, [pc, #264]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2aa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	4a40      	ldr	r2, [pc, #256]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2b2:	f8c2 32cc 	str.w	r3, [r2, #716]	; 0x2cc
				mc.mtrEle.statusword = _statusword;
				mc.mtrEle.tpdo3_counter++;
			}
		}
	}
}
 800d2b6:	e079      	b.n	800d3ac <Ingenia_tpdo_callback+0x1b8>
			else if (_id_node == mc.mtrEle._u8Node) {
 800d2b8:	4b3e      	ldr	r3, [pc, #248]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2ba:	f893 3595 	ldrb.w	r3, [r3, #1429]	; 0x595
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6a3b      	ldr	r3, [r7, #32]
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d172      	bne.n	800d3ac <Ingenia_tpdo_callback+0x1b8>
				mc.mtrEle.posActual = _pos;
 800d2c6:	4a3b      	ldr	r2, [pc, #236]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ca:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
				mc.mtrEle.veloActual = _velo;
 800d2ce:	4a39      	ldr	r2, [pc, #228]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d2:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
				mc.mtrEle.tpdo4_counter++;
 800d2d6:	4b37      	ldr	r3, [pc, #220]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2d8:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800d2dc:	3301      	adds	r3, #1
 800d2de:	4a35      	ldr	r2, [pc, #212]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d2e0:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
}
 800d2e4:	e062      	b.n	800d3ac <Ingenia_tpdo_callback+0x1b8>
		else if ((data.id & COB_TPDO3) == COB_TPDO3) {
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800d2ec:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800d2f0:	d15c      	bne.n	800d3ac <Ingenia_tpdo_callback+0x1b8>
			_id_node = data.id - COB_TPDO3;
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d2f8:	623b      	str	r3, [r7, #32]
			for ( int i = 0; i < 4; i++ )
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d2fe:	e00f      	b.n	800d320 <Ingenia_tpdo_callback+0x12c>
				_voltage |= (int32_t) data.rxData[i] << (8 * i);
 800d300:	f107 020d 	add.w	r2, r7, #13
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	4413      	add	r3, r2
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	461a      	mov	r2, r3
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	00db      	lsls	r3, r3, #3
 800d310:	fa02 f303 	lsl.w	r3, r2, r3
 800d314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d316:	4313      	orrs	r3, r2
 800d318:	62fb      	str	r3, [r7, #44]	; 0x2c
			for ( int i = 0; i < 4; i++ )
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	3301      	adds	r3, #1
 800d31e:	627b      	str	r3, [r7, #36]	; 0x24
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	2b03      	cmp	r3, #3
 800d324:	ddec      	ble.n	800d300 <Ingenia_tpdo_callback+0x10c>
			_current = (int16_t) data.rxData[5] << 8 | data.rxData[4];
 800d326:	7cbb      	ldrb	r3, [r7, #18]
 800d328:	021b      	lsls	r3, r3, #8
 800d32a:	7c7a      	ldrb	r2, [r7, #17]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	61fb      	str	r3, [r7, #28]
			_statusword = (uint16_t) data.rxData[7] << 8 | data.rxData[6];
 800d330:	7d3b      	ldrb	r3, [r7, #20]
 800d332:	021b      	lsls	r3, r3, #8
 800d334:	7cfa      	ldrb	r2, [r7, #19]
 800d336:	4313      	orrs	r3, r2
 800d338:	61bb      	str	r3, [r7, #24]
			if (_id_node == mc.mtrAzi._u8Node) {
 800d33a:	4b1e      	ldr	r3, [pc, #120]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d33c:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 800d340:	461a      	mov	r2, r3
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	4293      	cmp	r3, r2
 800d346:	d115      	bne.n	800d374 <Ingenia_tpdo_callback+0x180>
				mc.mtrAzi.voltage = _voltage;
 800d348:	4a1a      	ldr	r2, [pc, #104]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
				mc.mtrAzi.current = _current;
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	b21a      	sxth	r2, r3
 800d354:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d356:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
				mc.mtrAzi.statusword = _statusword;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d360:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
				mc.mtrAzi.tpdo3_counter++;
 800d364:	4b13      	ldr	r3, [pc, #76]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d366:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d36a:	3301      	adds	r3, #1
 800d36c:	4a11      	ldr	r2, [pc, #68]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d36e:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
}
 800d372:	e01b      	b.n	800d3ac <Ingenia_tpdo_callback+0x1b8>
			else if (_id_node == mc.mtrEle._u8Node) {
 800d374:	4b0f      	ldr	r3, [pc, #60]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d376:	f893 3595 	ldrb.w	r3, [r3, #1429]	; 0x595
 800d37a:	461a      	mov	r2, r3
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	4293      	cmp	r3, r2
 800d380:	d114      	bne.n	800d3ac <Ingenia_tpdo_callback+0x1b8>
				mc.mtrEle.voltage = _voltage;
 800d382:	4a0c      	ldr	r2, [pc, #48]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
				mc.mtrEle.current = _current;
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	b21a      	sxth	r2, r3
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d390:	f8a3 25a8 	strh.w	r2, [r3, #1448]	; 0x5a8
				mc.mtrEle.statusword = _statusword;
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	b29a      	uxth	r2, r3
 800d398:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d39a:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
				mc.mtrEle.tpdo3_counter++;
 800d39e:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d3a0:	f8d3 35ac 	ldr.w	r3, [r3, #1452]	; 0x5ac
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	4a03      	ldr	r2, [pc, #12]	; (800d3b4 <Ingenia_tpdo_callback+0x1c0>)
 800d3a8:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
}
 800d3ac:	bf00      	nop
 800d3ae:	3738      	adds	r7, #56	; 0x38
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20010764 	.word	0x20010764

0800d3b8 <Ingenia_nmt_callback>:

void Ingenia_nmt_callback(CAN_Buffer_t *buffer)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08a      	sub	sp, #40	; 0x28
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	6078      	str	r0, [r7, #4]
	CAN_Data_t data;

	if (can_buffer_available(buffer) > 0) {
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 ff8f 	bl	800e2e4 <can_buffer_available>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d030      	beq.n	800d42e <Ingenia_nmt_callback+0x76>
		can_buffer_peek(buffer, &data);
 800d3cc:	f107 030c 	add.w	r3, r7, #12
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f001 f81a 	bl	800e40c <can_buffer_peek>

		LOG("NMT_id= %03lX\r\n", data.id);
 800d3d8:	f7f9 ffbd 	bl	8007356 <osKernelSysTick>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	4a16      	ldr	r2, [pc, #88]	; (800d438 <Ingenia_nmt_callback+0x80>)
 800d3e0:	fba2 1203 	umull	r1, r2, r2, r3
 800d3e4:	0b51      	lsrs	r1, r2, #13
 800d3e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800d3ea:	fb01 f202 	mul.w	r2, r1, r2
 800d3ee:	1a99      	subs	r1, r3, r2
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800d3f8:	4a10      	ldr	r2, [pc, #64]	; (800d43c <Ingenia_nmt_callback+0x84>)
 800d3fa:	4811      	ldr	r0, [pc, #68]	; (800d440 <Ingenia_nmt_callback+0x88>)
 800d3fc:	f002 f868 	bl	800f4d0 <iprintf>
		for ( int i = 0; i < data.len; i++ ) {
 800d400:	2300      	movs	r3, #0
 800d402:	61fb      	str	r3, [r7, #28]
 800d404:	e00b      	b.n	800d41e <Ingenia_nmt_callback+0x66>
			printf("%02X ", data.rxData[i]);
 800d406:	f107 0211 	add.w	r2, r7, #17
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	4413      	add	r3, r2
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	4619      	mov	r1, r3
 800d412:	480c      	ldr	r0, [pc, #48]	; (800d444 <Ingenia_nmt_callback+0x8c>)
 800d414:	f002 f85c 	bl	800f4d0 <iprintf>
		for ( int i = 0; i < data.len; i++ ) {
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	3301      	adds	r3, #1
 800d41c:	61fb      	str	r3, [r7, #28]
 800d41e:	7c3b      	ldrb	r3, [r7, #16]
 800d420:	461a      	mov	r2, r3
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	4293      	cmp	r3, r2
 800d426:	dbee      	blt.n	800d406 <Ingenia_nmt_callback+0x4e>
		}
		printf("\r\n");
 800d428:	4807      	ldr	r0, [pc, #28]	; (800d448 <Ingenia_nmt_callback+0x90>)
 800d42a:	f002 f8ed 	bl	800f608 <puts>
	}
}
 800d42e:	bf00      	nop
 800d430:	3720      	adds	r7, #32
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	d1b71759 	.word	0xd1b71759
 800d43c:	08011f0c 	.word	0x08011f0c
 800d440:	08012110 	.word	0x08012110
 800d444:	0801212c 	.word	0x0801212c
 800d448:	0801208c 	.word	0x0801208c

0800d44c <Ingenia_node_init>:

static SlaveNode_t slaveNodeBank;

/* init node slave buffer */
void Ingenia_node_init()
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
	slaveNodeBank.size = 0;
 800d452:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <Ingenia_node_init+0x44>)
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2020 	strb.w	r2, [r3, #32]
	for ( int i = 0; i < SERVO_NODE_SIZE_MAX; i++ ) {
 800d45a:	2300      	movs	r3, #0
 800d45c:	607b      	str	r3, [r7, #4]
 800d45e:	e00d      	b.n	800d47c <Ingenia_node_init+0x30>
		slaveNodeBank.node[i].id = 0;
 800d460:	4a0b      	ldr	r2, [pc, #44]	; (800d490 <Ingenia_node_init+0x44>)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2100      	movs	r1, #0
 800d466:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		slaveNodeBank.node[i].servo = NULL;
 800d46a:	4a09      	ldr	r2, [pc, #36]	; (800d490 <Ingenia_node_init+0x44>)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4413      	add	r3, r2
 800d472:	2200      	movs	r2, #0
 800d474:	605a      	str	r2, [r3, #4]
	for ( int i = 0; i < SERVO_NODE_SIZE_MAX; i++ ) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	3301      	adds	r3, #1
 800d47a:	607b      	str	r3, [r7, #4]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b03      	cmp	r3, #3
 800d480:	ddee      	ble.n	800d460 <Ingenia_node_init+0x14>
	}
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	20010d28 	.word	0x20010d28

0800d494 <Ingenia_node_add>:

static HAL_StatusTypeDef Ingenia_node_add(Servo_t *servo)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	uint8_t currentBankSize = slaveNodeBank.size;
 800d49c:	4b28      	ldr	r3, [pc, #160]	; (800d540 <Ingenia_node_add+0xac>)
 800d49e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4a2:	72fb      	strb	r3, [r7, #11]

	if ((servo->_u8Node < SERVO_NODE_ID_MIN) || (servo->_u8Node > SERVO_NODE_ID_MAX))
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d005      	beq.n	800d4ba <Ingenia_node_add+0x26>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d4b4:	b25b      	sxtb	r3, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	da01      	bge.n	800d4be <Ingenia_node_add+0x2a>
		return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e03a      	b.n	800d534 <Ingenia_node_add+0xa0>

	/* check if the node already exist in the banks */
	if (currentBankSize > 0) {
 800d4be:	7afb      	ldrb	r3, [r7, #11]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d014      	beq.n	800d4ee <Ingenia_node_add+0x5a>
		for ( int i = 0; i < currentBankSize; i++ ) {
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	e00d      	b.n	800d4e6 <Ingenia_node_add+0x52>
			if (slaveNodeBank.node[i].id == servo->_u8Node)
 800d4ca:	4a1d      	ldr	r2, [pc, #116]	; (800d540 <Ingenia_node_add+0xac>)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d101      	bne.n	800d4e0 <Ingenia_node_add+0x4c>
				return HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e029      	b.n	800d534 <Ingenia_node_add+0xa0>
		for ( int i = 0; i < currentBankSize; i++ ) {
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	60fb      	str	r3, [r7, #12]
 800d4e6:	7afb      	ldrb	r3, [r7, #11]
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	dbed      	blt.n	800d4ca <Ingenia_node_add+0x36>
		}
	}

	/* check if the node buffer still has enough space */
	if (currentBankSize < SERVO_NODE_SIZE_MAX - 1) {
 800d4ee:	7afb      	ldrb	r3, [r7, #11]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d81e      	bhi.n	800d532 <Ingenia_node_add+0x9e>
		slaveNodeBank.node[currentBankSize].id = servo->_u8Node;
 800d4f4:	7afb      	ldrb	r3, [r7, #11]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	f892 12b9 	ldrb.w	r1, [r2, #697]	; 0x2b9
 800d4fc:	4a10      	ldr	r2, [pc, #64]	; (800d540 <Ingenia_node_add+0xac>)
 800d4fe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		slaveNodeBank.node[currentBankSize].servo = servo;
 800d502:	7afb      	ldrb	r3, [r7, #11]
 800d504:	4a0e      	ldr	r2, [pc, #56]	; (800d540 <Ingenia_node_add+0xac>)
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	4413      	add	r3, r2
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	605a      	str	r2, [r3, #4]
		slaveNodeBank.node[currentBankSize].servo->_isRegistered = 1;
 800d50e:	7afb      	ldrb	r3, [r7, #11]
 800d510:	4a0b      	ldr	r2, [pc, #44]	; (800d540 <Ingenia_node_add+0xac>)
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	4413      	add	r3, r2
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	2201      	movs	r2, #1
 800d51a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		slaveNodeBank.size++;
 800d51e:	4b08      	ldr	r3, [pc, #32]	; (800d540 <Ingenia_node_add+0xac>)
 800d520:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d524:	3301      	adds	r3, #1
 800d526:	b2da      	uxtb	r2, r3
 800d528:	4b05      	ldr	r3, [pc, #20]	; (800d540 <Ingenia_node_add+0xac>)
 800d52a:	f883 2020 	strb.w	r2, [r3, #32]
	}
	else
		return HAL_ERROR;

	return HAL_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	e000      	b.n	800d534 <Ingenia_node_add+0xa0>
		return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
}
 800d534:	4618      	mov	r0, r3
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20010d28 	.word	0x20010d28

0800d544 <Ingenia_rx_callback>:

	return HAL_ERROR;
}

void Ingenia_rx_callback(CAN_Data_t *data)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	uint32_t id;
	uint32_t idType;

	id = data->id % 0x80;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d554:	613b      	str	r3, [r7, #16]
	idType = data->id - id;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	60fb      	str	r3, [r7, #12]
//	LOG("%03lX\r\n", data->id);

	/* check if the node already exist in the banks */
	for ( int i = 0; i < slaveNodeBank.size; i++ ) {
 800d560:	2300      	movs	r3, #0
 800d562:	617b      	str	r3, [r7, #20]
 800d564:	e078      	b.n	800d658 <Ingenia_rx_callback+0x114>
		if (slaveNodeBank.node[i].id == id) {
 800d566:	4a43      	ldr	r2, [pc, #268]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800d56e:	461a      	mov	r2, r3
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	4293      	cmp	r3, r2
 800d574:	d16d      	bne.n	800d652 <Ingenia_rx_callback+0x10e>
			if (idType == COB_EMERGENCY) {
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2b80      	cmp	r3, #128	; 0x80
 800d57a:	d115      	bne.n	800d5a8 <Ingenia_rx_callback+0x64>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufEMER, data);
 800d57c:	4a3d      	ldr	r2, [pc, #244]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	00db      	lsls	r3, r3, #3
 800d582:	4413      	add	r3, r2
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d58a:	6879      	ldr	r1, [r7, #4]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 fee1 	bl	800e354 <can_buffer_write>
				Ingenia_emer_callback(&slaveNodeBank.node[i].servo->buffer.bufEMER);
 800d592:	4a38      	ldr	r2, [pc, #224]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	4413      	add	r3, r2
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 f8ba 	bl	800d71a <Ingenia_emer_callback>
 800d5a6:	e054      	b.n	800d652 <Ingenia_rx_callback+0x10e>
			}
			else if (idType == COB_NMT_CTRL) {
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d5ae:	d113      	bne.n	800d5d8 <Ingenia_rx_callback+0x94>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufNMT, data);
 800d5b0:	4a30      	ldr	r2, [pc, #192]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	00db      	lsls	r3, r3, #3
 800d5b6:	4413      	add	r3, r2
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	33cc      	adds	r3, #204	; 0xcc
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 fec8 	bl	800e354 <can_buffer_write>
				Ingenia_nmt_callback(&slaveNodeBank.node[i].servo->buffer.bufNMT);
 800d5c4:	4a2b      	ldr	r2, [pc, #172]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	00db      	lsls	r3, r3, #3
 800d5ca:	4413      	add	r3, r2
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	33cc      	adds	r3, #204	; 0xcc
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff fef1 	bl	800d3b8 <Ingenia_nmt_callback>
 800d5d6:	e03c      	b.n	800d652 <Ingenia_rx_callback+0x10e>
			}
			else if (idType == COB_TSDO) {
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800d5de:	d113      	bne.n	800d608 <Ingenia_rx_callback+0xc4>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufTSDO, data);
 800d5e0:	4a24      	ldr	r2, [pc, #144]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	00db      	lsls	r3, r3, #3
 800d5e6:	4413      	add	r3, r2
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	3328      	adds	r3, #40	; 0x28
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 feb0 	bl	800e354 <can_buffer_write>
				Ingenia_tsdo_callback(&slaveNodeBank.node[i].servo->buffer.bufTSDO);
 800d5f4:	4a1f      	ldr	r2, [pc, #124]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	00db      	lsls	r3, r3, #3
 800d5fa:	4413      	add	r3, r2
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	3328      	adds	r3, #40	; 0x28
 800d600:	4618      	mov	r0, r3
 800d602:	f000 f894 	bl	800d72e <Ingenia_tsdo_callback>
 800d606:	e024      	b.n	800d652 <Ingenia_rx_callback+0x10e>
			}
			else if ((idType == COB_TPDO1) || (idType == COB_TPDO2) || (idType == COB_TPDO3) || (idType == COB_TPDO4)) {
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800d60e:	d00b      	beq.n	800d628 <Ingenia_rx_callback+0xe4>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d616:	d007      	beq.n	800d628 <Ingenia_rx_callback+0xe4>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800d61e:	d003      	beq.n	800d628 <Ingenia_rx_callback+0xe4>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d626:	d114      	bne.n	800d652 <Ingenia_rx_callback+0x10e>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufTPDO, data);
 800d628:	4a12      	ldr	r2, [pc, #72]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	4413      	add	r3, r2
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 fe8b 	bl	800e354 <can_buffer_write>
				Ingenia_tpdo_callback(&slaveNodeBank.node[i].servo->buffer.bufTPDO);
 800d63e:	4a0d      	ldr	r2, [pc, #52]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff fdd1 	bl	800d1f4 <Ingenia_tpdo_callback>
	for ( int i = 0; i < slaveNodeBank.size; i++ ) {
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	3301      	adds	r3, #1
 800d656:	617b      	str	r3, [r7, #20]
 800d658:	4b06      	ldr	r3, [pc, #24]	; (800d674 <Ingenia_rx_callback+0x130>)
 800d65a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d65e:	461a      	mov	r2, r3
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	4293      	cmp	r3, r2
 800d664:	f6ff af7f 	blt.w	800d566 <Ingenia_rx_callback+0x22>
			}
		}
	}
}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	3718      	adds	r7, #24
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20010d28 	.word	0x20010d28

0800d678 <Ingenia_init>:

HAL_StatusTypeDef Ingenia_init(Servo_t *servo, CAN_INTERFACE_HANDLETYPE *hcan, const uint8_t node)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	4613      	mov	r3, r2
 800d684:	71fb      	strb	r3, [r7, #7]
	can_buffer_flush(&servo->buffer.bufEMER);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 ff11 	bl	800e4b4 <can_buffer_flush>
	can_buffer_flush(&servo->buffer.bufNMT);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	33cc      	adds	r3, #204	; 0xcc
 800d696:	4618      	mov	r0, r3
 800d698:	f000 ff0c 	bl	800e4b4 <can_buffer_flush>
	can_buffer_flush(&servo->buffer.bufTPDO);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 ff06 	bl	800e4b4 <can_buffer_flush>
	can_buffer_flush(&servo->buffer.bufTSDO);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3328      	adds	r3, #40	; 0x28
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 ff01 	bl	800e4b4 <can_buffer_flush>
	servo->hcan = hcan;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	601a      	str	r2, [r3, #0]
	servo->_u8Node = node;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	79fa      	ldrb	r2, [r7, #7]
 800d6bc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
	servo->_isRegistered = 0;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
	servo->_isInitialAngleDeterminationProcessFinished = 0;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
	servo->posActual = 0;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	servo->veloActual = 0;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	Ingenia_prepare_tx_header(servo);
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 fffb 	bl	800e6dc <Ingenia_prepare_tx_header>

#if INGENIA_USE_RTOS==1
	HAL_Delay(10);
 800d6e6:	200a      	movs	r0, #10
 800d6e8:	f7f4 f96a 	bl	80019c0 <HAL_Delay>
	Ingenia_write_nmt(servo, NMT_RESET_COMM);
 800d6ec:	2182      	movs	r1, #130	; 0x82
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f8e0 	bl	800d8b4 <Ingenia_write_nmt>
	HAL_Delay(500);
 800d6f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d6f8:	f7f4 f962 	bl	80019c0 <HAL_Delay>
	Ingenia_write_nmt(servo, NMT_START_REMOTE_NODE);
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f000 f8d8 	bl	800d8b4 <Ingenia_write_nmt>
	HAL_Delay(10);
 800d704:	200a      	movs	r0, #10
 800d706:	f7f4 f95b 	bl	80019c0 <HAL_Delay>
#endif	//if INGENIA_USE_RTOS==1

	return Ingenia_node_add(servo);
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f7ff fec2 	bl	800d494 <Ingenia_node_add>
 800d710:	4603      	mov	r3, r0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <Ingenia_emer_callback>:
	}
	return HAL_ERROR;
}

__weak void Ingenia_emer_callback(CAN_Buffer_t *buffer)
{
 800d71a:	b480      	push	{r7}
 800d71c:	b083      	sub	sp, #12
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
	UNUSED(buffer);
}
 800d722:	bf00      	nop
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <Ingenia_tsdo_callback>:
{
	UNUSED(buffer);
}

__weak void Ingenia_tsdo_callback(CAN_Buffer_t *buffer)
{
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
	UNUSED(buffer);
}
 800d736:	bf00      	nop
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <Ingenia_read_sdo>:

uint32_t Ingenia_read_sdo(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint8_t *bIsValid)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b092      	sub	sp, #72	; 0x48
 800d746:	af00      	add	r7, sp, #0
 800d748:	60f8      	str	r0, [r7, #12]
 800d74a:	607b      	str	r3, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	817b      	strh	r3, [r7, #10]
 800d750:	4613      	mov	r3, r2
 800d752:	727b      	strb	r3, [r7, #9]
	/* read register using SDO */
	uint8_t canTxBuffer[8];
	uint8_t isValid = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t millis = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t elapseTime;
	uint32_t sendTimer = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	643b      	str	r3, [r7, #64]	; 0x40
	CAN_Data_t cData;
	uint16_t u16IndexFeed;
	uint8_t u8SubIndexFeed;
	uint32_t u32Result = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t _id_target = COB_RSDO + servo->_u8Node;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d76c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t _len = 4;
 800d772:	2304      	movs	r3, #4
 800d774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* flush current buffer */
	can_buffer_flush(&servo->buffer.bufTSDO);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	3328      	adds	r3, #40	; 0x28
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 fe99 	bl	800e4b4 <can_buffer_flush>
	memset(canTxBuffer, 0, 8);
 800d782:	f107 0320 	add.w	r3, r7, #32
 800d786:	2208      	movs	r2, #8
 800d788:	2100      	movs	r1, #0
 800d78a:	4618      	mov	r0, r3
 800d78c:	f001 fa2e 	bl	800ebec <memset>

	canTxBuffer[0] = 0x40;  //css[5..7]=2(upload), bit[0..4]=x
 800d790:	2340      	movs	r3, #64	; 0x40
 800d792:	f887 3020 	strb.w	r3, [r7, #32]
	canTxBuffer[1] = u16Index & 0xFF;
 800d796:	897b      	ldrh	r3, [r7, #10]
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	canTxBuffer[2] = u16Index >> 8 & 0xFF;
 800d79e:	897b      	ldrh	r3, [r7, #10]
 800d7a0:	0a1b      	lsrs	r3, r3, #8
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	canTxBuffer[3] = u8SubIndex;
 800d7aa:	7a7b      	ldrb	r3, [r7, #9]
 800d7ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	elapseTime = HAL_GetTick() + 1000;
 800d7b0:	f7f4 f8ff 	bl	80019b2 <HAL_GetTick>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (!isValid) {
 800d7bc:	e04e      	b.n	800d85c <Ingenia_read_sdo+0x11a>
		millis = HAL_GetTick();
 800d7be:	f7f4 f8f8 	bl	80019b2 <HAL_GetTick>
 800d7c2:	63b8      	str	r0, [r7, #56]	; 0x38
		/* check if timeout exceeded */
		if (millis >= elapseTime)
 800d7c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d24c      	bcs.n	800d866 <Ingenia_read_sdo+0x124>
			break;

		if (millis >= sendTimer) {
 800d7cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d30a      	bcc.n	800d7ea <Ingenia_read_sdo+0xa8>
			/* Start the Transmission process */
			_INGENIA_write_data(servo, _id_target, _len, canTxBuffer);
 800d7d4:	f107 0320 	add.w	r3, r7, #32
 800d7d8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d7dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f000 ffa0 	bl	800e724 <_INGENIA_write_data>
			/* retry send command */
			sendTimer = millis + 200;
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e6:	33c8      	adds	r3, #200	; 0xc8
 800d7e8:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (can_buffer_available(&servo->buffer.bufTSDO) > 0) {
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3328      	adds	r3, #40	; 0x28
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f000 fd78 	bl	800e2e4 <can_buffer_available>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d02d      	beq.n	800d856 <Ingenia_read_sdo+0x114>
			if (can_buffer_read(&servo->buffer.bufTSDO, &cData) > 0) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3328      	adds	r3, #40	; 0x28
 800d7fe:	f107 0210 	add.w	r2, r7, #16
 800d802:	4611      	mov	r1, r2
 800d804:	4618      	mov	r0, r3
 800d806:	f000 fe29 	bl	800e45c <can_buffer_read>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	dd25      	ble.n	800d85c <Ingenia_read_sdo+0x11a>
				/* check id sender (must be from CBO_TSDO & match index & sub-index */
				u16IndexFeed = (uint16_t) cData.rxData[2] << 8 | cData.rxData[1];
 800d810:	7dfb      	ldrb	r3, [r7, #23]
 800d812:	021b      	lsls	r3, r3, #8
 800d814:	b21a      	sxth	r2, r3
 800d816:	7dbb      	ldrb	r3, [r7, #22]
 800d818:	b21b      	sxth	r3, r3
 800d81a:	4313      	orrs	r3, r2
 800d81c:	b21b      	sxth	r3, r3
 800d81e:	857b      	strh	r3, [r7, #42]	; 0x2a
				u8SubIndexFeed = cData.rxData[3];
 800d820:	7e3b      	ldrb	r3, [r7, #24]
 800d822:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				if ((u16IndexFeed == u16Index) && (u8SubIndexFeed == u8SubIndex)) {
 800d826:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800d828:	897b      	ldrh	r3, [r7, #10]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d116      	bne.n	800d85c <Ingenia_read_sdo+0x11a>
 800d82e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800d832:	7a7b      	ldrb	r3, [r7, #9]
 800d834:	429a      	cmp	r2, r3
 800d836:	d111      	bne.n	800d85c <Ingenia_read_sdo+0x11a>
					u32Result = (uint32_t) cData.rxData[7] << 24 | (uint32_t) cData.rxData[6] << 16
 800d838:	7f3b      	ldrb	r3, [r7, #28]
 800d83a:	061a      	lsls	r2, r3, #24
 800d83c:	7efb      	ldrb	r3, [r7, #27]
 800d83e:	041b      	lsls	r3, r3, #16
 800d840:	431a      	orrs	r2, r3
							| (uint32_t) cData.rxData[5] << 8 | (uint32_t) cData.rxData[4];
 800d842:	7ebb      	ldrb	r3, [r7, #26]
 800d844:	021b      	lsls	r3, r3, #8
 800d846:	4313      	orrs	r3, r2
 800d848:	7e7a      	ldrb	r2, [r7, #25]
					u32Result = (uint32_t) cData.rxData[7] << 24 | (uint32_t) cData.rxData[6] << 16
 800d84a:	4313      	orrs	r3, r2
 800d84c:	63fb      	str	r3, [r7, #60]	; 0x3c

					isValid = 1;
 800d84e:	2301      	movs	r3, #1
 800d850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d854:	e002      	b.n	800d85c <Ingenia_read_sdo+0x11a>
				}
			}
		}
#if INGENIA_USE_RTOS==1
		else
			osDelay(1);
 800d856:	2001      	movs	r0, #1
 800d858:	f7f9 fdd0 	bl	80073fc <osDelay>
	while (!isValid) {
 800d85c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0ac      	beq.n	800d7be <Ingenia_read_sdo+0x7c>
 800d864:	e000      	b.n	800d868 <Ingenia_read_sdo+0x126>
			break;
 800d866:	bf00      	nop
#endif	//if INGENIA_USE_RTOS==1

	}

	*bIsValid = isValid;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d86e:	701a      	strb	r2, [r3, #0]

	return u32Result;
 800d870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d872:	4618      	mov	r0, r3
 800d874:	3748      	adds	r7, #72	; 0x48
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <Ingenia_read_reg_sdo>:

uint32_t Ingenia_read_reg_sdo(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b084      	sub	sp, #16
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	460b      	mov	r3, r1
 800d884:	807b      	strh	r3, [r7, #2]
 800d886:	4613      	mov	r3, r2
 800d888:	707b      	strb	r3, [r7, #1]

	uint32_t u32Result = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60fb      	str	r3, [r7, #12]
	uint8_t isValid = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	72fb      	strb	r3, [r7, #11]

	while (!isValid) {
 800d892:	e007      	b.n	800d8a4 <Ingenia_read_reg_sdo+0x2a>
		u32Result = Ingenia_read_sdo(servo, u16Index, u8SubIndex, &isValid);
 800d894:	f107 030b 	add.w	r3, r7, #11
 800d898:	787a      	ldrb	r2, [r7, #1]
 800d89a:	8879      	ldrh	r1, [r7, #2]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff ff50 	bl	800d742 <Ingenia_read_sdo>
 800d8a2:	60f8      	str	r0, [r7, #12]
	while (!isValid) {
 800d8a4:	7afb      	ldrb	r3, [r7, #11]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0f4      	beq.n	800d894 <Ingenia_read_reg_sdo+0x1a>
	}

	return u32Result;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <Ingenia_write_nmt>:

HAL_StatusTypeDef Ingenia_write_nmt(Servo_t *servo, NmtModes_e mode)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
	uint8_t canTxBuffer[CAN_DATA_MAX];

	memset(canTxBuffer, 0, CAN_DATA_MAX);
 800d8c0:	f107 0308 	add.w	r3, r7, #8
 800d8c4:	2208      	movs	r2, #8
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 f98f 	bl	800ebec <memset>
	canTxBuffer[0] = mode;
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	723b      	strb	r3, [r7, #8]
	canTxBuffer[1] = servo->_u8Node;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d8d8:	727b      	strb	r3, [r7, #9]

	/* Start the Transmission process */
	return _INGENIA_write_data(servo, COB_NMT_SERVICE, 2, canTxBuffer);
 800d8da:	f107 0308 	add.w	r3, r7, #8
 800d8de:	2202      	movs	r2, #2
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 ff1e 	bl	800e724 <_INGENIA_write_data>
 800d8e8:	4603      	mov	r3, r0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <Ingenia_write_rpdo>:

void Ingenia_write_rpdo(Servo_t *servo, uint32_t cob_rpdo, uint8_t *data, uint8_t len)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b088      	sub	sp, #32
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
 800d8fe:	70fb      	strb	r3, [r7, #3]
	uint8_t canTxBuffer[8];
	uint32_t id_target = cob_rpdo | servo->_u8Node;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d906:	461a      	mov	r2, r3
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	61fb      	str	r3, [r7, #28]

	memcpy(canTxBuffer, data, len);
 800d90e:	78fa      	ldrb	r2, [r7, #3]
 800d910:	f107 0310 	add.w	r3, r7, #16
 800d914:	6879      	ldr	r1, [r7, #4]
 800d916:	4618      	mov	r0, r3
 800d918:	f001 f95a 	bl	800ebd0 <memcpy>

	/* Start the Transmission process */
	uint32_t timeout = HAL_GetTick() + 1000;
 800d91c:	f7f4 f849 	bl	80019b2 <HAL_GetTick>
 800d920:	4603      	mov	r3, r0
 800d922:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d926:	61bb      	str	r3, [r7, #24]
	while (_INGENIA_write_data(servo, id_target, len, canTxBuffer) != HAL_OK) {
 800d928:	e008      	b.n	800d93c <Ingenia_write_rpdo+0x4a>
		if (HAL_GetTick() > timeout)
 800d92a:	f7f4 f842 	bl	80019b2 <HAL_GetTick>
 800d92e:	4602      	mov	r2, r0
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	4293      	cmp	r3, r2
 800d934:	d30d      	bcc.n	800d952 <Ingenia_write_rpdo+0x60>
			break;
		HAL_Delay(1);
 800d936:	2001      	movs	r0, #1
 800d938:	f7f4 f842 	bl	80019c0 <HAL_Delay>
	while (_INGENIA_write_data(servo, id_target, len, canTxBuffer) != HAL_OK) {
 800d93c:	f107 0310 	add.w	r3, r7, #16
 800d940:	78fa      	ldrb	r2, [r7, #3]
 800d942:	69f9      	ldr	r1, [r7, #28]
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f000 feed 	bl	800e724 <_INGENIA_write_data>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1ec      	bne.n	800d92a <Ingenia_write_rpdo+0x38>
	}
}
 800d950:	e000      	b.n	800d954 <Ingenia_write_rpdo+0x62>
			break;
 800d952:	bf00      	nop
}
 800d954:	bf00      	nop
 800d956:	3720      	adds	r7, #32
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <Ingenia_write_sdo>:

HAL_StatusTypeDef Ingenia_write_sdo(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint8_t objSize, uint32_t value)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08c      	sub	sp, #48	; 0x30
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	4608      	mov	r0, r1
 800d966:	4611      	mov	r1, r2
 800d968:	461a      	mov	r2, r3
 800d96a:	4603      	mov	r3, r0
 800d96c:	807b      	strh	r3, [r7, #2]
 800d96e:	460b      	mov	r3, r1
 800d970:	707b      	strb	r3, [r7, #1]
 800d972:	4613      	mov	r3, r2
 800d974:	703b      	strb	r3, [r7, #0]
	uint8_t canTxBuffer[8];
	uint8_t sdoDataSize = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t elapseTime;
	uint8_t isValid = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CAN_Data_t dummy;
	uint32_t _id_target = COB_RSDO + servo->_u8Node;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800d988:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t _len = 8;
 800d98e:	2308      	movs	r3, #8
 800d990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(canTxBuffer, 0, CAN_DATA_MAX);
 800d994:	f107 0318 	add.w	r3, r7, #24
 800d998:	2208      	movs	r2, #8
 800d99a:	2100      	movs	r1, #0
 800d99c:	4618      	mov	r0, r3
 800d99e:	f001 f925 	bl	800ebec <memset>
	switch (objSize)
 800d9a2:	783b      	ldrb	r3, [r7, #0]
 800d9a4:	2b04      	cmp	r3, #4
 800d9a6:	d018      	beq.n	800d9da <Ingenia_write_sdo+0x7e>
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	dc29      	bgt.n	800da00 <Ingenia_write_sdo+0xa4>
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d002      	beq.n	800d9b6 <Ingenia_write_sdo+0x5a>
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d007      	beq.n	800d9c4 <Ingenia_write_sdo+0x68>
 800d9b4:	e024      	b.n	800da00 <Ingenia_write_sdo+0xa4>
	{
	case 1:
		sdoDataSize = SDO_DATA_SIZE_1;
 800d9b6:	230c      	movs	r3, #12
 800d9b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		canTxBuffer[4] = value;
 800d9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	773b      	strb	r3, [r7, #28]
		break;
 800d9c2:	e01d      	b.n	800da00 <Ingenia_write_sdo+0xa4>
	case 2:
		sdoDataSize = SDO_DATA_SIZE_2;
 800d9c4:	2308      	movs	r3, #8
 800d9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		canTxBuffer[4] = value & 0xFF;
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	773b      	strb	r3, [r7, #28]
		canTxBuffer[5] = value >> 8 & 0xFF;
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	0a1b      	lsrs	r3, r3, #8
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	777b      	strb	r3, [r7, #29]
		break;
 800d9d8:	e012      	b.n	800da00 <Ingenia_write_sdo+0xa4>
	case 4:
		sdoDataSize = SDO_DATA_SIZE_4;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		canTxBuffer[4] = value & 0xFF;
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	773b      	strb	r3, [r7, #28]
		canTxBuffer[5] = value >> 8 & 0xFF;
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e8:	0a1b      	lsrs	r3, r3, #8
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	777b      	strb	r3, [r7, #29]
		canTxBuffer[6] = value >> 16 & 0xFF;
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f0:	0c1b      	lsrs	r3, r3, #16
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	77bb      	strb	r3, [r7, #30]
		canTxBuffer[7] = value >> 24 & 0xFF;
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f8:	0e1b      	lsrs	r3, r3, #24
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	77fb      	strb	r3, [r7, #31]
		break;
 800d9fe:	bf00      	nop
	}

	canTxBuffer[0] = SDO_DOWNLOAD_REQUEST_BITS | SDO_E_TRANSFER_BIT | SDO_S_SIZE_INDICATOR_BIT | sdoDataSize;
 800da00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da04:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	763b      	strb	r3, [r7, #24]

	canTxBuffer[1] = u16Index & 0xFF;
 800da0c:	887b      	ldrh	r3, [r7, #2]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	767b      	strb	r3, [r7, #25]
	canTxBuffer[2] = (u16Index >> 8) & 0xFF;
 800da12:	887b      	ldrh	r3, [r7, #2]
 800da14:	0a1b      	lsrs	r3, r3, #8
 800da16:	b29b      	uxth	r3, r3
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	76bb      	strb	r3, [r7, #26]
	canTxBuffer[3] = u8SubIndex;
 800da1c:	787b      	ldrb	r3, [r7, #1]
 800da1e:	76fb      	strb	r3, [r7, #27]

	can_buffer_flush(&servo->buffer.bufTSDO);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3328      	adds	r3, #40	; 0x28
 800da24:	4618      	mov	r0, r3
 800da26:	f000 fd45 	bl	800e4b4 <can_buffer_flush>
	/* Start the Transmission process */
	if (_INGENIA_write_data(servo, _id_target, _len, canTxBuffer) == HAL_OK) {
 800da2a:	f107 0318 	add.w	r3, r7, #24
 800da2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800da32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 fe75 	bl	800e724 <_INGENIA_write_data>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d149      	bne.n	800dad4 <Ingenia_write_sdo+0x178>
		/* ignore reply */
		elapseTime = HAL_GetTick() + 1000;
 800da40:	f7f3 ffb7 	bl	80019b2 <HAL_GetTick>
 800da44:	4603      	mov	r3, r0
 800da46:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800da4a:	623b      	str	r3, [r7, #32]
		isValid = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		while (!isValid) {
 800da52:	e033      	b.n	800dabc <Ingenia_write_sdo+0x160>
			if (HAL_GetTick() >= elapseTime)
 800da54:	f7f3 ffad 	bl	80019b2 <HAL_GetTick>
 800da58:	4602      	mov	r2, r0
 800da5a:	6a3b      	ldr	r3, [r7, #32]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d932      	bls.n	800dac6 <Ingenia_write_sdo+0x16a>
				break;
			if (can_buffer_available(&servo->buffer.bufTSDO)) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	3328      	adds	r3, #40	; 0x28
 800da64:	4618      	mov	r0, r3
 800da66:	f000 fc3d 	bl	800e2e4 <can_buffer_available>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d022      	beq.n	800dab6 <Ingenia_write_sdo+0x15a>
				can_buffer_read(&servo->buffer.bufTSDO, &dummy);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3328      	adds	r3, #40	; 0x28
 800da74:	f107 0208 	add.w	r2, r7, #8
 800da78:	4611      	mov	r1, r2
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 fcee 	bl	800e45c <can_buffer_read>
				if (((dummy.rxData[0] & SDO_DOWNLOAD_RESPONSE_BITS) == SDO_DOWNLOAD_RESPONSE_BITS)
 800da80:	7b7b      	ldrb	r3, [r7, #13]
 800da82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da86:	2b60      	cmp	r3, #96	; 0x60
 800da88:	d115      	bne.n	800dab6 <Ingenia_write_sdo+0x15a>
						&& (dummy.rxData[1] == (u16Index & 0xFF)) && (dummy.rxData[2] == ((u16Index >> 8) & 0xFF))
 800da8a:	7bbb      	ldrb	r3, [r7, #14]
 800da8c:	461a      	mov	r2, r3
 800da8e:	887b      	ldrh	r3, [r7, #2]
 800da90:	b2db      	uxtb	r3, r3
 800da92:	429a      	cmp	r2, r3
 800da94:	d10f      	bne.n	800dab6 <Ingenia_write_sdo+0x15a>
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	461a      	mov	r2, r3
 800da9a:	887b      	ldrh	r3, [r7, #2]
 800da9c:	0a1b      	lsrs	r3, r3, #8
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d107      	bne.n	800dab6 <Ingenia_write_sdo+0x15a>
						&& (dummy.rxData[3] == u8SubIndex)) {
 800daa6:	7c3b      	ldrb	r3, [r7, #16]
 800daa8:	787a      	ldrb	r2, [r7, #1]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d103      	bne.n	800dab6 <Ingenia_write_sdo+0x15a>

					isValid = 1;
 800daae:	2301      	movs	r3, #1
 800dab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;
 800dab4:	e008      	b.n	800dac8 <Ingenia_write_sdo+0x16c>
				}
			}
#if INGENIA_USE_RTOS==1
			osDelay(10);
 800dab6:	200a      	movs	r0, #10
 800dab8:	f7f9 fca0 	bl	80073fc <osDelay>
		while (!isValid) {
 800dabc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d0c7      	beq.n	800da54 <Ingenia_write_sdo+0xf8>
 800dac4:	e000      	b.n	800dac8 <Ingenia_write_sdo+0x16c>
				break;
 800dac6:	bf00      	nop
//			osThreadYield();
#endif	//if INGENIA_USE_RTOS==1

		}
		if (isValid)
 800dac8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <Ingenia_write_sdo+0x178>
			return HAL_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	e000      	b.n	800dad6 <Ingenia_write_sdo+0x17a>
	}

	return HAL_ERROR;
 800dad4:	2301      	movs	r3, #1
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3730      	adds	r7, #48	; 0x30
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <Ingenia_write_sdo_u32>:

HAL_StatusTypeDef Ingenia_write_sdo_u32(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint32_t value)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b086      	sub	sp, #24
 800dae2:	af02      	add	r7, sp, #8
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	607b      	str	r3, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	817b      	strh	r3, [r7, #10]
 800daec:	4613      	mov	r3, r2
 800daee:	727b      	strb	r3, [r7, #9]
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 4, value);
 800daf0:	7a7a      	ldrb	r2, [r7, #9]
 800daf2:	8979      	ldrh	r1, [r7, #10]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	2304      	movs	r3, #4
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff ff2e 	bl	800d95c <Ingenia_write_sdo>
 800db00:	4603      	mov	r3, r0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <Ingenia_write_sdo_u16>:
{
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 4, value);
}

HAL_StatusTypeDef Ingenia_write_sdo_u16(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint16_t value)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b086      	sub	sp, #24
 800db0e:	af02      	add	r7, sp, #8
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	4608      	mov	r0, r1
 800db14:	4611      	mov	r1, r2
 800db16:	461a      	mov	r2, r3
 800db18:	4603      	mov	r3, r0
 800db1a:	817b      	strh	r3, [r7, #10]
 800db1c:	460b      	mov	r3, r1
 800db1e:	727b      	strb	r3, [r7, #9]
 800db20:	4613      	mov	r3, r2
 800db22:	80fb      	strh	r3, [r7, #6]
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 2, value);
 800db24:	88fb      	ldrh	r3, [r7, #6]
 800db26:	7a7a      	ldrb	r2, [r7, #9]
 800db28:	8979      	ldrh	r1, [r7, #10]
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	2302      	movs	r3, #2
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff ff14 	bl	800d95c <Ingenia_write_sdo>
 800db34:	4603      	mov	r3, r0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <Ingenia_write_sdo_u8>:
{
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 2, value);
}

HAL_StatusTypeDef Ingenia_write_sdo_u8(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint8_t value)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af02      	add	r7, sp, #8
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	4608      	mov	r0, r1
 800db48:	4611      	mov	r1, r2
 800db4a:	461a      	mov	r2, r3
 800db4c:	4603      	mov	r3, r0
 800db4e:	807b      	strh	r3, [r7, #2]
 800db50:	460b      	mov	r3, r1
 800db52:	707b      	strb	r3, [r7, #1]
 800db54:	4613      	mov	r3, r2
 800db56:	703b      	strb	r3, [r7, #0]
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 1, value);
 800db58:	783b      	ldrb	r3, [r7, #0]
 800db5a:	787a      	ldrb	r2, [r7, #1]
 800db5c:	8879      	ldrh	r1, [r7, #2]
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	2301      	movs	r3, #1
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff fefa 	bl	800d95c <Ingenia_write_sdo>
 800db68:	4603      	mov	r3, r0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
	...

0800db74 <Ingenia_getDecodedStatusWord>:
{
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 1, value);
}

StateMachineStatus_e Ingenia_getDecodedStatusWord(Servo_t *servo)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	uint16_t u16StatusWord = servo->statusword;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8b3 32ce 	ldrh.w	r3, [r3, #718]	; 0x2ce
 800db82:	81bb      	strh	r3, [r7, #12]
	uint16_t u16LSBMask;
	StateMachineStatus_e eStateMachineStatus = STATUS_UNKNOWN;
 800db84:	2308      	movs	r3, #8
 800db86:	73fb      	strb	r3, [r7, #15]

	u16LSBMask = STATUS_WORD_REGISTER_BITS_READY_TO_SWITCH_ON | STATUS_WORD_REGISTER_BITS_SWITCHED_ON |
 800db88:	230f      	movs	r3, #15
 800db8a:	817b      	strh	r3, [r7, #10]
// xxxx xxxx x0xx 1111  | Fault reaction active     //
// xxxx xxxx x0xx 1000  | Fault                     //
// ----------------------------------------------   //
//

	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800db8c:	89bb      	ldrh	r3, [r7, #12]
 800db8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
			== STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED);
 800db92:	2b00      	cmp	r3, #0
 800db94:	bf14      	ite	ne
 800db96:	2301      	movne	r3, #1
 800db98:	2300      	moveq	r3, #0
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	461a      	mov	r2, r3
	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba

	switch ((u16StatusWord & u16LSBMask))
 800dba4:	89ba      	ldrh	r2, [r7, #12]
 800dba6:	897b      	ldrh	r3, [r7, #10]
 800dba8:	4013      	ands	r3, r2
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	2b0f      	cmp	r3, #15
 800dbae:	d85e      	bhi.n	800dc6e <Ingenia_getDecodedStatusWord+0xfa>
 800dbb0:	a201      	add	r2, pc, #4	; (adr r2, 800dbb8 <Ingenia_getDecodedStatusWord+0x44>)
 800dbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb6:	bf00      	nop
 800dbb8:	0800dbf9 	.word	0x0800dbf9
 800dbbc:	0800dc0f 	.word	0x0800dc0f
 800dbc0:	0800dc6f 	.word	0x0800dc6f
 800dbc4:	0800dc1f 	.word	0x0800dc1f
 800dbc8:	0800dc6f 	.word	0x0800dc6f
 800dbcc:	0800dc6f 	.word	0x0800dc6f
 800dbd0:	0800dc6f 	.word	0x0800dc6f
 800dbd4:	0800dc2f 	.word	0x0800dc2f
 800dbd8:	0800dc5f 	.word	0x0800dc5f
 800dbdc:	0800dc6f 	.word	0x0800dc6f
 800dbe0:	0800dc6f 	.word	0x0800dc6f
 800dbe4:	0800dc6f 	.word	0x0800dc6f
 800dbe8:	0800dc6f 	.word	0x0800dc6f
 800dbec:	0800dc6f 	.word	0x0800dc6f
 800dbf0:	0800dc6f 	.word	0x0800dc6f
 800dbf4:	0800dc4f 	.word	0x0800dc4f
	{
	case 0x00:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800dbf8:	89bb      	ldrh	r3, [r7, #12]
 800dbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <Ingenia_getDecodedStatusWord+0x94>
			eStateMachineStatus = STATUS_NOT_READY_TO_SWITCH_ON;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73fb      	strb	r3, [r7, #15]
		}
		else {
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
		}
		break;
 800dc06:	e03e      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	73fb      	strb	r3, [r7, #15]
		break;
 800dc0c:	e03b      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>

	case 0x01:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dc0e:	89bb      	ldrh	r3, [r7, #12]
 800dc10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc14:	2b20      	cmp	r3, #32
 800dc16:	d12d      	bne.n	800dc74 <Ingenia_getDecodedStatusWord+0x100>
				== 0x20) {
			eStateMachineStatus = STATUS_READY_TO_SWITCH_ON;
 800dc18:	2302      	movs	r3, #2
 800dc1a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dc1c:	e02a      	b.n	800dc74 <Ingenia_getDecodedStatusWord+0x100>

	case 0x03:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dc1e:	89bb      	ldrh	r3, [r7, #12]
 800dc20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc24:	2b20      	cmp	r3, #32
 800dc26:	d127      	bne.n	800dc78 <Ingenia_getDecodedStatusWord+0x104>
				== 0x20) {
			eStateMachineStatus = STATUS_SWITCH_ON;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dc2c:	e024      	b.n	800dc78 <Ingenia_getDecodedStatusWord+0x104>

	case 0x07:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dc2e:	89bb      	ldrh	r3, [r7, #12]
 800dc30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc34:	2b20      	cmp	r3, #32
 800dc36:	d102      	bne.n	800dc3e <Ingenia_getDecodedStatusWord+0xca>
				== 0x20) {
			eStateMachineStatus = STATUS_OPERATION_ENABLED;
 800dc38:	2304      	movs	r3, #4
 800dc3a:	73fb      	strb	r3, [r7, #15]
		}
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
				== 0x00) {
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
		}
		break;
 800dc3c:	e01e      	b.n	800dc7c <Ingenia_getDecodedStatusWord+0x108>
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dc3e:	89bb      	ldrh	r3, [r7, #12]
 800dc40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d119      	bne.n	800dc7c <Ingenia_getDecodedStatusWord+0x108>
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
 800dc48:	2305      	movs	r3, #5
 800dc4a:	73fb      	strb	r3, [r7, #15]
		break;
 800dc4c:	e016      	b.n	800dc7c <Ingenia_getDecodedStatusWord+0x108>

	case 0x0F:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800dc4e:	89bb      	ldrh	r3, [r7, #12]
 800dc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d113      	bne.n	800dc80 <Ingenia_getDecodedStatusWord+0x10c>
			eStateMachineStatus = STATUS_FAULT_REACTION_ACTIVE;
 800dc58:	2306      	movs	r3, #6
 800dc5a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dc5c:	e010      	b.n	800dc80 <Ingenia_getDecodedStatusWord+0x10c>

	case 0x08:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800dc5e:	89bb      	ldrh	r3, [r7, #12]
 800dc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10d      	bne.n	800dc84 <Ingenia_getDecodedStatusWord+0x110>
			eStateMachineStatus = STATUS_FAULT;
 800dc68:	2307      	movs	r3, #7
 800dc6a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dc6c:	e00a      	b.n	800dc84 <Ingenia_getDecodedStatusWord+0x110>

	default:
		eStateMachineStatus = STATUS_UNKNOWN;
 800dc6e:	2308      	movs	r3, #8
 800dc70:	73fb      	strb	r3, [r7, #15]
		break;
 800dc72:	e008      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>
		break;
 800dc74:	bf00      	nop
 800dc76:	e006      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>
		break;
 800dc78:	bf00      	nop
 800dc7a:	e004      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>
		break;
 800dc7c:	bf00      	nop
 800dc7e:	e002      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>
		break;
 800dc80:	bf00      	nop
 800dc82:	e000      	b.n	800dc86 <Ingenia_getDecodedStatusWord+0x112>
		break;
 800dc84:	bf00      	nop
	}

	return eStateMachineStatus;
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3714      	adds	r7, #20
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <Ingenia_decodeStatusWord>:

static StateMachineStatus_e Ingenia_decodeStatusWord(Servo_t *servo, uint16_t u16StatusWord)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	807b      	strh	r3, [r7, #2]
	uint16_t u16LSBMask;
	StateMachineStatus_e eStateMachineStatus = STATUS_UNKNOWN;
 800dca0:	2308      	movs	r3, #8
 800dca2:	73fb      	strb	r3, [r7, #15]

	u16LSBMask = STATUS_WORD_REGISTER_BITS_READY_TO_SWITCH_ON | STATUS_WORD_REGISTER_BITS_SWITCHED_ON |
 800dca4:	230f      	movs	r3, #15
 800dca6:	81bb      	strh	r3, [r7, #12]
// xxxx xxxx x0xx 1111  | Fault reaction active     //
// xxxx xxxx x0xx 1000  | Fault                     //
// ----------------------------------------------   //
//

	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800dca8:	887b      	ldrh	r3, [r7, #2]
 800dcaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
			== STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED);
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	bf14      	ite	ne
 800dcb2:	2301      	movne	r3, #1
 800dcb4:	2300      	moveq	r3, #0
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	461a      	mov	r2, r3
	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba

	switch ((u16StatusWord & u16LSBMask))
 800dcc0:	887a      	ldrh	r2, [r7, #2]
 800dcc2:	89bb      	ldrh	r3, [r7, #12]
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2b0f      	cmp	r3, #15
 800dcca:	d85e      	bhi.n	800dd8a <Ingenia_decodeStatusWord+0xf6>
 800dccc:	a201      	add	r2, pc, #4	; (adr r2, 800dcd4 <Ingenia_decodeStatusWord+0x40>)
 800dcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd2:	bf00      	nop
 800dcd4:	0800dd15 	.word	0x0800dd15
 800dcd8:	0800dd2b 	.word	0x0800dd2b
 800dcdc:	0800dd8b 	.word	0x0800dd8b
 800dce0:	0800dd3b 	.word	0x0800dd3b
 800dce4:	0800dd8b 	.word	0x0800dd8b
 800dce8:	0800dd8b 	.word	0x0800dd8b
 800dcec:	0800dd8b 	.word	0x0800dd8b
 800dcf0:	0800dd4b 	.word	0x0800dd4b
 800dcf4:	0800dd7b 	.word	0x0800dd7b
 800dcf8:	0800dd8b 	.word	0x0800dd8b
 800dcfc:	0800dd8b 	.word	0x0800dd8b
 800dd00:	0800dd8b 	.word	0x0800dd8b
 800dd04:	0800dd8b 	.word	0x0800dd8b
 800dd08:	0800dd8b 	.word	0x0800dd8b
 800dd0c:	0800dd8b 	.word	0x0800dd8b
 800dd10:	0800dd6b 	.word	0x0800dd6b
	{
	case 0x00:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800dd14:	887b      	ldrh	r3, [r7, #2]
 800dd16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d102      	bne.n	800dd24 <Ingenia_decodeStatusWord+0x90>
			eStateMachineStatus = STATUS_NOT_READY_TO_SWITCH_ON;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73fb      	strb	r3, [r7, #15]
		}
		else {
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
		}
		break;
 800dd22:	e03e      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
 800dd24:	2301      	movs	r3, #1
 800dd26:	73fb      	strb	r3, [r7, #15]
		break;
 800dd28:	e03b      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>

	case 0x01:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dd2a:	887b      	ldrh	r3, [r7, #2]
 800dd2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd30:	2b20      	cmp	r3, #32
 800dd32:	d12d      	bne.n	800dd90 <Ingenia_decodeStatusWord+0xfc>
				== 0x20) {
			eStateMachineStatus = STATUS_READY_TO_SWITCH_ON;
 800dd34:	2302      	movs	r3, #2
 800dd36:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dd38:	e02a      	b.n	800dd90 <Ingenia_decodeStatusWord+0xfc>

	case 0x03:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dd3a:	887b      	ldrh	r3, [r7, #2]
 800dd3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd40:	2b20      	cmp	r3, #32
 800dd42:	d127      	bne.n	800dd94 <Ingenia_decodeStatusWord+0x100>
				== 0x20) {
			eStateMachineStatus = STATUS_SWITCH_ON;
 800dd44:	2303      	movs	r3, #3
 800dd46:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dd48:	e024      	b.n	800dd94 <Ingenia_decodeStatusWord+0x100>

	case 0x07:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dd4a:	887b      	ldrh	r3, [r7, #2]
 800dd4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd50:	2b20      	cmp	r3, #32
 800dd52:	d102      	bne.n	800dd5a <Ingenia_decodeStatusWord+0xc6>
				== 0x20) {
			eStateMachineStatus = STATUS_OPERATION_ENABLED;
 800dd54:	2304      	movs	r3, #4
 800dd56:	73fb      	strb	r3, [r7, #15]
		}
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
				== 0x00) {
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
		}
		break;
 800dd58:	e01e      	b.n	800dd98 <Ingenia_decodeStatusWord+0x104>
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800dd5a:	887b      	ldrh	r3, [r7, #2]
 800dd5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d119      	bne.n	800dd98 <Ingenia_decodeStatusWord+0x104>
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
 800dd64:	2305      	movs	r3, #5
 800dd66:	73fb      	strb	r3, [r7, #15]
		break;
 800dd68:	e016      	b.n	800dd98 <Ingenia_decodeStatusWord+0x104>

	case 0x0F:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800dd6a:	887b      	ldrh	r3, [r7, #2]
 800dd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d113      	bne.n	800dd9c <Ingenia_decodeStatusWord+0x108>
			eStateMachineStatus = STATUS_FAULT_REACTION_ACTIVE;
 800dd74:	2306      	movs	r3, #6
 800dd76:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dd78:	e010      	b.n	800dd9c <Ingenia_decodeStatusWord+0x108>

	case 0x08:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800dd7a:	887b      	ldrh	r3, [r7, #2]
 800dd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10d      	bne.n	800dda0 <Ingenia_decodeStatusWord+0x10c>
			eStateMachineStatus = STATUS_FAULT;
 800dd84:	2307      	movs	r3, #7
 800dd86:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800dd88:	e00a      	b.n	800dda0 <Ingenia_decodeStatusWord+0x10c>

	default:
		eStateMachineStatus = STATUS_UNKNOWN;
 800dd8a:	2308      	movs	r3, #8
 800dd8c:	73fb      	strb	r3, [r7, #15]
		break;
 800dd8e:	e008      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>
		break;
 800dd90:	bf00      	nop
 800dd92:	e006      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>
		break;
 800dd94:	bf00      	nop
 800dd96:	e004      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>
		break;
 800dd98:	bf00      	nop
 800dd9a:	e002      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>
		break;
 800dd9c:	bf00      	nop
 800dd9e:	e000      	b.n	800dda2 <Ingenia_decodeStatusWord+0x10e>
		break;
 800dda0:	bf00      	nop
	}

	return eStateMachineStatus;
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <Ingenia_getStateMachineStatus>:

static void Ingenia_getStateMachineStatus(Servo_t *servo, StateMachineStatus_e *peStateMachineStatus)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
	uint16_t u16StatusWord = Ingenia_read_reg_sdo(servo, OBJECT_STATUS_WORD);
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f246 0141 	movw	r1, #24641	; 0x6041
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff fd5a 	bl	800d87a <Ingenia_read_reg_sdo>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	81fb      	strh	r3, [r7, #14]

	*peStateMachineStatus = Ingenia_decodeStatusWord(servo, u16StatusWord);
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff ff60 	bl	800dc94 <Ingenia_decodeStatusWord>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	701a      	strb	r2, [r3, #0]
}
 800dddc:	bf00      	nop
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <Ingenia_sendStateMachineCommand>:

static void Ingenia_sendStateMachineCommand(Servo_t *servo, const StateMachineCommand_e eStateMachineCommand)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
	uint8_t isValidCommand = 1;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	73fb      	strb	r3, [r7, #15]
	uint8_t needsTransition = 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73bb      	strb	r3, [r7, #14]
	uint16_t u16TransitionAuxValue = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	81bb      	strh	r3, [r7, #12]
	uint16_t u16ActualControlWord = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	817b      	strh	r3, [r7, #10]

	u16ActualControlWord = Ingenia_read_reg_sdo(servo, OBJECT_CONTROL_WORD);
 800de00:	2200      	movs	r2, #0
 800de02:	f246 0140 	movw	r1, #24640	; 0x6040
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff fd37 	bl	800d87a <Ingenia_read_reg_sdo>
 800de0c:	4603      	mov	r3, r0
 800de0e:	817b      	strh	r3, [r7, #10]
	switch (eStateMachineCommand)
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	2b07      	cmp	r3, #7
 800de14:	d860      	bhi.n	800ded8 <Ingenia_sendStateMachineCommand+0xf4>
 800de16:	a201      	add	r2, pc, #4	; (adr r2, 800de1c <Ingenia_sendStateMachineCommand+0x38>)
 800de18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1c:	0800de3d 	.word	0x0800de3d
 800de20:	0800de4f 	.word	0x0800de4f
 800de24:	0800de61 	.word	0x0800de61
 800de28:	0800de73 	.word	0x0800de73
 800de2c:	0800de7d 	.word	0x0800de7d
 800de30:	0800de8f 	.word	0x0800de8f
 800de34:	0800dea1 	.word	0x0800dea1
 800de38:	0800deb3 	.word	0x0800deb3
	{
	case COMMAND_SHUTDOWN:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800de3c:	897b      	ldrh	r3, [r7, #10]
 800de3e:	f023 0381 	bic.w	r3, r3, #129	; 0x81
 800de42:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE | CONTROL_WORD_REGISTER_BITS_QUICK_STOP);
 800de44:	897b      	ldrh	r3, [r7, #10]
 800de46:	f043 0306 	orr.w	r3, r3, #6
 800de4a:	817b      	strh	r3, [r7, #10]
		break;
 800de4c:	e047      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_SWITCH_ON:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800de4e:	897b      	ldrh	r3, [r7, #10]
 800de50:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800de54:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800de56:	897b      	ldrh	r3, [r7, #10]
 800de58:	f043 0307 	orr.w	r3, r3, #7
 800de5c:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP);
		break;
 800de5e:	e03e      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_SWITCH_ON_AND_ENABLE_OPERATION:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800de60:	897b      	ldrh	r3, [r7, #10]
 800de62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de66:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800de68:	897b      	ldrh	r3, [r7, #10]
 800de6a:	f043 030f 	orr.w	r3, r3, #15
 800de6e:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP | CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION);
		break;
 800de70:	e035      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_DISABLE_VOLTAGE:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800de72:	897b      	ldrh	r3, [r7, #10]
 800de74:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800de78:	817b      	strh	r3, [r7, #10]
		break;
 800de7a:	e030      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_QUICK_STOP:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_QUICK_STOP | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800de7c:	897b      	ldrh	r3, [r7, #10]
 800de7e:	f023 0384 	bic.w	r3, r3, #132	; 0x84
 800de82:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE;
 800de84:	897b      	ldrh	r3, [r7, #10]
 800de86:	f043 0302 	orr.w	r3, r3, #2
 800de8a:	817b      	strh	r3, [r7, #10]
		break;
 800de8c:	e027      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_DISABLE_OPERATION:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800de8e:	897b      	ldrh	r3, [r7, #10]
 800de90:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800de94:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800de96:	897b      	ldrh	r3, [r7, #10]
 800de98:	f043 0307 	orr.w	r3, r3, #7
 800de9c:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP);
		break;
 800de9e:	e01e      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_ENABLE_OPERATION:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800dea0:	897b      	ldrh	r3, [r7, #10]
 800dea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dea6:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800dea8:	897b      	ldrh	r3, [r7, #10]
 800deaa:	f043 030f 	orr.w	r3, r3, #15
 800deae:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP | CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION);
		break;
 800deb0:	e015      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_FAULT_RESET:
		if (u16ActualControlWord & CONTROL_WORD_REGISTER_BITS_FAULT_RESET) {
 800deb2:	897b      	ldrh	r3, [r7, #10]
 800deb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d008      	beq.n	800dece <Ingenia_sendStateMachineCommand+0xea>
			u16ActualControlWord &= ~CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
 800debc:	897b      	ldrh	r3, [r7, #10]
 800debe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dec2:	817b      	strh	r3, [r7, #10]
			needsTransition = 1;
 800dec4:	2301      	movs	r3, #1
 800dec6:	73bb      	strb	r3, [r7, #14]
			u16TransitionAuxValue = CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
 800dec8:	2380      	movs	r3, #128	; 0x80
 800deca:	81bb      	strh	r3, [r7, #12]
		}
		else {
			u16ActualControlWord |= CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
		}
		break;
 800decc:	e007      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>
			u16ActualControlWord |= CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
 800dece:	897b      	ldrh	r3, [r7, #10]
 800ded0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded4:	817b      	strh	r3, [r7, #10]
		break;
 800ded6:	e002      	b.n	800dede <Ingenia_sendStateMachineCommand+0xfa>

	default:
		isValidCommand = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	73fb      	strb	r3, [r7, #15]
		break;
 800dedc:	bf00      	nop
	}

	if (isValidCommand == 1) {
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d114      	bne.n	800df0e <Ingenia_sendStateMachineCommand+0x12a>
		Ingenia_write_sdo_u16(servo, OBJECT_CONTROL_WORD, u16ActualControlWord);
 800dee4:	897b      	ldrh	r3, [r7, #10]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f246 0140 	movw	r1, #24640	; 0x6040
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fe0c 	bl	800db0a <Ingenia_write_sdo_u16>
		if (needsTransition == 1) {
 800def2:	7bbb      	ldrb	r3, [r7, #14]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d10a      	bne.n	800df0e <Ingenia_sendStateMachineCommand+0x12a>
			u16ActualControlWord |= u16TransitionAuxValue;
 800def8:	897a      	ldrh	r2, [r7, #10]
 800defa:	89bb      	ldrh	r3, [r7, #12]
 800defc:	4313      	orrs	r3, r2
 800defe:	817b      	strh	r3, [r7, #10]
			Ingenia_write_sdo_u16(servo, OBJECT_CONTROL_WORD, u16ActualControlWord);
 800df00:	897b      	ldrh	r3, [r7, #10]
 800df02:	2200      	movs	r2, #0
 800df04:	f246 0140 	movw	r1, #24640	; 0x6040
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7ff fdfe 	bl	800db0a <Ingenia_write_sdo_u16>
		}
	}
}
 800df0e:	bf00      	nop
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop

0800df18 <Ingenia_verifyStatusIsReached>:

static uint8_t Ingenia_verifyStatusIsReached(Servo_t *servo, const StateMachineStatus_e eNextStateMachineStatus)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	70fb      	strb	r3, [r7, #3]
	StateMachineStatus_e eActualStateMachineStatus;
	Ingenia_getStateMachineStatus(servo, &eActualStateMachineStatus);
 800df24:	f107 030f 	add.w	r3, r7, #15
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7ff ff40 	bl	800ddb0 <Ingenia_getStateMachineStatus>

	uint32_t started_waiting_at = HAL_GetTick();
 800df30:	f7f3 fd3f 	bl	80019b2 <HAL_GetTick>
 800df34:	6178      	str	r0, [r7, #20]
	uint32_t millis = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	613b      	str	r3, [r7, #16]
	while (eNextStateMachineStatus != eActualStateMachineStatus) {
 800df3a:	e010      	b.n	800df5e <Ingenia_verifyStatusIsReached+0x46>
		millis = HAL_GetTick();
 800df3c:	f7f3 fd39 	bl	80019b2 <HAL_GetTick>
 800df40:	6138      	str	r0, [r7, #16]
		// Check if timeout excedeed
		if (millis - started_waiting_at > 1000)
 800df42:	693a      	ldr	r2, [r7, #16]
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df4c:	d901      	bls.n	800df52 <Ingenia_verifyStatusIsReached+0x3a>
			return 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	e00a      	b.n	800df68 <Ingenia_verifyStatusIsReached+0x50>
		Ingenia_getStateMachineStatus(servo, &eActualStateMachineStatus);
 800df52:	f107 030f 	add.w	r3, r7, #15
 800df56:	4619      	mov	r1, r3
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff ff29 	bl	800ddb0 <Ingenia_getStateMachineStatus>
	while (eNextStateMachineStatus != eActualStateMachineStatus) {
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
 800df60:	78fa      	ldrb	r2, [r7, #3]
 800df62:	429a      	cmp	r2, r3
 800df64:	d1ea      	bne.n	800df3c <Ingenia_verifyStatusIsReached+0x24>
	}
	return 1;
 800df66:	2301      	movs	r3, #1

}
 800df68:	4618      	mov	r0, r3
 800df6a:	3718      	adds	r7, #24
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <Ingenia_gotoStatus>:

void Ingenia_gotoStatus(Servo_t *servo, const StateMachineStatus_e eDestinationStateMachineStatus)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	460b      	mov	r3, r1
 800df7a:	70fb      	strb	r3, [r7, #3]
	StateMachineStatus_e tCurrentStateMachineStatus = STATUS_NOT_READY_TO_SWITCH_ON;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73bb      	strb	r3, [r7, #14]
	Ingenia_getStateMachineStatus(servo, &tCurrentStateMachineStatus);
 800df80:	f107 030e 	add.w	r3, r7, #14
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff ff12 	bl	800ddb0 <Ingenia_getStateMachineStatus>

	while (tCurrentStateMachineStatus != eDestinationStateMachineStatus) {
 800df8c:	e0c7      	b.n	800e11e <Ingenia_gotoStatus+0x1ae>
		StateMachineStatus_e nextState = eDestinationStateMachineStatus;
 800df8e:	78fb      	ldrb	r3, [r7, #3]
 800df90:	73fb      	strb	r3, [r7, #15]
		switch (tCurrentStateMachineStatus)
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	3b01      	subs	r3, #1
 800df96:	2b06      	cmp	r3, #6
 800df98:	f200 80c7 	bhi.w	800e12a <Ingenia_gotoStatus+0x1ba>
 800df9c:	a201      	add	r2, pc, #4	; (adr r2, 800dfa4 <Ingenia_gotoStatus+0x34>)
 800df9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa2:	bf00      	nop
 800dfa4:	0800dfc1 	.word	0x0800dfc1
 800dfa8:	0800dfe9 	.word	0x0800dfe9
 800dfac:	0800e02d 	.word	0x0800e02d
 800dfb0:	0800e06f 	.word	0x0800e06f
 800dfb4:	0800e0bf 	.word	0x0800e0bf
 800dfb8:	0800e12b 	.word	0x0800e12b
 800dfbc:	0800e0e5 	.word	0x0800e0e5
		{
		case STATUS_SWITCH_ON_DISABLED:
			if ((eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON)
 800dfc0:	78fb      	ldrb	r3, [r7, #3]
 800dfc2:	2b02      	cmp	r3, #2
 800dfc4:	d009      	beq.n	800dfda <Ingenia_gotoStatus+0x6a>
					|| (eDestinationStateMachineStatus == STATUS_SWITCH_ON)
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	2b03      	cmp	r3, #3
 800dfca:	d006      	beq.n	800dfda <Ingenia_gotoStatus+0x6a>
					|| (eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	2b04      	cmp	r3, #4
 800dfd0:	d003      	beq.n	800dfda <Ingenia_gotoStatus+0x6a>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800dfd2:	78fb      	ldrb	r3, [r7, #3]
 800dfd4:	2b05      	cmp	r3, #5
 800dfd6:	f040 80aa 	bne.w	800e12e <Ingenia_gotoStatus+0x1be>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SHUTDOWN);
 800dfda:	2100      	movs	r1, #0
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7ff ff01 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_READY_TO_SWITCH_ON;
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	73fb      	strb	r3, [r7, #15]
			}
			else {
				return;
			}
			break;
 800dfe6:	e093      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
		case STATUS_READY_TO_SWITCH_ON:
			if (eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED) {
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d106      	bne.n	800dffc <Ingenia_gotoStatus+0x8c>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800dfee:	2103      	movs	r1, #3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff fef7 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800dff6:	2301      	movs	r3, #1
 800dff8:	73fb      	strb	r3, [r7, #15]
				nextState = STATUS_OPERATION_ENABLED;
			}
			else {
				return;
			}
			break;
 800dffa:	e089      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_SWITCH_ON) {
 800dffc:	78fb      	ldrb	r3, [r7, #3]
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d106      	bne.n	800e010 <Ingenia_gotoStatus+0xa0>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SWITCH_ON);
 800e002:	2101      	movs	r1, #1
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff feed 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON;
 800e00a:	2303      	movs	r3, #3
 800e00c:	73fb      	strb	r3, [r7, #15]
			break;
 800e00e:	e07f      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if ((eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	2b04      	cmp	r3, #4
 800e014:	d003      	beq.n	800e01e <Ingenia_gotoStatus+0xae>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e016:	78fb      	ldrb	r3, [r7, #3]
 800e018:	2b05      	cmp	r3, #5
 800e01a:	f040 808a 	bne.w	800e132 <Ingenia_gotoStatus+0x1c2>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SWITCH_ON_AND_ENABLE_OPERATION);
 800e01e:	2102      	movs	r1, #2
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff fedf 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_OPERATION_ENABLED;
 800e026:	2304      	movs	r3, #4
 800e028:	73fb      	strb	r3, [r7, #15]
			break;
 800e02a:	e071      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
		case STATUS_SWITCH_ON:
			if (eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED) {
 800e02c:	78fb      	ldrb	r3, [r7, #3]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d106      	bne.n	800e040 <Ingenia_gotoStatus+0xd0>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e032:	2103      	movs	r1, #3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff fed5 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e03a:	2301      	movs	r3, #1
 800e03c:	73fb      	strb	r3, [r7, #15]
				nextState = STATUS_OPERATION_ENABLED;
			}
			else {
				return;
			}
			break;
 800e03e:	e067      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON) {
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	2b02      	cmp	r3, #2
 800e044:	d106      	bne.n	800e054 <Ingenia_gotoStatus+0xe4>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SHUTDOWN);
 800e046:	2100      	movs	r1, #0
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff fecb 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_READY_TO_SWITCH_ON;
 800e04e:	2302      	movs	r3, #2
 800e050:	73fb      	strb	r3, [r7, #15]
			break;
 800e052:	e05d      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if ((eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e054:	78fb      	ldrb	r3, [r7, #3]
 800e056:	2b04      	cmp	r3, #4
 800e058:	d002      	beq.n	800e060 <Ingenia_gotoStatus+0xf0>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e05a:	78fb      	ldrb	r3, [r7, #3]
 800e05c:	2b05      	cmp	r3, #5
 800e05e:	d16a      	bne.n	800e136 <Ingenia_gotoStatus+0x1c6>
				Ingenia_sendStateMachineCommand(servo, COMMAND_ENABLE_OPERATION);
 800e060:	2106      	movs	r1, #6
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff febe 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_OPERATION_ENABLED;
 800e068:	2304      	movs	r3, #4
 800e06a:	73fb      	strb	r3, [r7, #15]
			break;
 800e06c:	e050      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
		case STATUS_OPERATION_ENABLED:
			if (eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED) {
 800e06e:	78fb      	ldrb	r3, [r7, #3]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d106      	bne.n	800e082 <Ingenia_gotoStatus+0x112>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e074:	2103      	movs	r1, #3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff feb4 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e07c:	2301      	movs	r3, #1
 800e07e:	73fb      	strb	r3, [r7, #15]
				nextState = STATUS_QUICK_STOP_ACTIVE;
			}
			else {
				return;
			}
			break;
 800e080:	e046      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON) {
 800e082:	78fb      	ldrb	r3, [r7, #3]
 800e084:	2b02      	cmp	r3, #2
 800e086:	d106      	bne.n	800e096 <Ingenia_gotoStatus+0x126>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SHUTDOWN);
 800e088:	2100      	movs	r1, #0
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff feaa 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_READY_TO_SWITCH_ON;
 800e090:	2302      	movs	r3, #2
 800e092:	73fb      	strb	r3, [r7, #15]
			break;
 800e094:	e03c      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_SWITCH_ON) {
 800e096:	78fb      	ldrb	r3, [r7, #3]
 800e098:	2b03      	cmp	r3, #3
 800e09a:	d106      	bne.n	800e0aa <Ingenia_gotoStatus+0x13a>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_OPERATION);
 800e09c:	2105      	movs	r1, #5
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff fea0 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON;
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	73fb      	strb	r3, [r7, #15]
			break;
 800e0a8:	e032      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE) {
 800e0aa:	78fb      	ldrb	r3, [r7, #3]
 800e0ac:	2b05      	cmp	r3, #5
 800e0ae:	d144      	bne.n	800e13a <Ingenia_gotoStatus+0x1ca>
				Ingenia_sendStateMachineCommand(servo, COMMAND_QUICK_STOP);
 800e0b0:	2104      	movs	r1, #4
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff fe96 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_QUICK_STOP_ACTIVE;
 800e0b8:	2305      	movs	r3, #5
 800e0ba:	73fb      	strb	r3, [r7, #15]
			break;
 800e0bc:	e028      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
		case STATUS_QUICK_STOP_ACTIVE:
			if ((eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED)
 800e0be:	78fb      	ldrb	r3, [r7, #3]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d008      	beq.n	800e0d6 <Ingenia_gotoStatus+0x166>
					|| (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON)
 800e0c4:	78fb      	ldrb	r3, [r7, #3]
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	d005      	beq.n	800e0d6 <Ingenia_gotoStatus+0x166>
					|| (eDestinationStateMachineStatus == STATUS_SWITCH_ON)
 800e0ca:	78fb      	ldrb	r3, [r7, #3]
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d002      	beq.n	800e0d6 <Ingenia_gotoStatus+0x166>
					|| (eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)) {
 800e0d0:	78fb      	ldrb	r3, [r7, #3]
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	d133      	bne.n	800e13e <Ingenia_gotoStatus+0x1ce>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e0d6:	2103      	movs	r1, #3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff fe83 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	73fb      	strb	r3, [r7, #15]
			}
			else {
				return;
			}
			break;
 800e0e2:	e015      	b.n	800e110 <Ingenia_gotoStatus+0x1a0>
		case STATUS_FAULT:
			if ((eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED)
 800e0e4:	78fb      	ldrb	r3, [r7, #3]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d00b      	beq.n	800e102 <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON)
 800e0ea:	78fb      	ldrb	r3, [r7, #3]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d008      	beq.n	800e102 <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_SWITCH_ON)
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d005      	beq.n	800e102 <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e0f6:	78fb      	ldrb	r3, [r7, #3]
 800e0f8:	2b04      	cmp	r3, #4
 800e0fa:	d002      	beq.n	800e102 <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e0fc:	78fb      	ldrb	r3, [r7, #3]
 800e0fe:	2b05      	cmp	r3, #5
 800e100:	d11f      	bne.n	800e142 <Ingenia_gotoStatus+0x1d2>
				Ingenia_sendStateMachineCommand(servo, COMMAND_FAULT_RESET);
 800e102:	2107      	movs	r1, #7
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff fe6d 	bl	800dde4 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e10a:	2301      	movs	r3, #1
 800e10c:	73fb      	strb	r3, [r7, #15]
			}
			else {
				return;
			}
			break;
 800e10e:	bf00      	nop
			return;
		}
			break;
		}

		Ingenia_verifyStatusIsReached(servo, nextState);
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	4619      	mov	r1, r3
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff feff 	bl	800df18 <Ingenia_verifyStatusIsReached>
		tCurrentStateMachineStatus = nextState;
 800e11a:	7bfb      	ldrb	r3, [r7, #15]
 800e11c:	73bb      	strb	r3, [r7, #14]
	while (tCurrentStateMachineStatus != eDestinationStateMachineStatus) {
 800e11e:	7bbb      	ldrb	r3, [r7, #14]
 800e120:	78fa      	ldrb	r2, [r7, #3]
 800e122:	429a      	cmp	r2, r3
 800e124:	f47f af33 	bne.w	800df8e <Ingenia_gotoStatus+0x1e>
 800e128:	e00c      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
			return;
 800e12a:	bf00      	nop
 800e12c:	e00a      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
				return;
 800e12e:	bf00      	nop
 800e130:	e008      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
				return;
 800e132:	bf00      	nop
 800e134:	e006      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
				return;
 800e136:	bf00      	nop
 800e138:	e004      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
				return;
 800e13a:	bf00      	nop
 800e13c:	e002      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
				return;
 800e13e:	bf00      	nop
 800e140:	e000      	b.n	800e144 <Ingenia_gotoStatus+0x1d4>
				return;
 800e142:	bf00      	nop
	}
}
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop

0800e14c <Ingenia_enableMotor>:

/* Motor enable/disable functions */
void Ingenia_enableMotor(Servo_t *servo)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	LOG("servo node=0x%02X\r\n", servo->_u8Node);
	Ingenia_gotoStatus(servo, STATUS_OPERATION_ENABLED);
 800e154:	2104      	movs	r1, #4
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff ff0a 	bl	800df70 <Ingenia_gotoStatus>
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <Ingenia_disableMotor>:

void Ingenia_disableMotor(Servo_t *servo)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
	StateMachineStatus_e currentStateMachineStatus;
	Ingenia_getStateMachineStatus(servo, &currentStateMachineStatus);
 800e16c:	f107 030f 	add.w	r3, r7, #15
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff fe1c 	bl	800ddb0 <Ingenia_getStateMachineStatus>

	if (currentStateMachineStatus == STATUS_OPERATION_ENABLED) {
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d103      	bne.n	800e186 <Ingenia_disableMotor+0x22>
		Ingenia_gotoStatus(servo, STATUS_SWITCH_ON);
 800e17e:	2103      	movs	r1, #3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7ff fef5 	bl	800df70 <Ingenia_gotoStatus>
	}

}
 800e186:	bf00      	nop
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <Ingenia_setModeOfOperation>:
#define MODE_SPECIFIC_BITS_CHANGE_SET			0x0020
#define MODE_SPECIFIC_BITS_ABS_REL				0x0040

// Motion funcions
void Ingenia_setModeOfOperation(Servo_t *servo, DriveModes_e driverMode)
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	460b      	mov	r3, r1
 800e198:	70fb      	strb	r3, [r7, #3]
	Ingenia_write_sdo_u8(servo, MODES_OF_OPERATION_INDEX, MODES_OF_OPERATION_SUBINDEX, (uint8_t) driverMode);
 800e19a:	78fb      	ldrb	r3, [r7, #3]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f246 0160 	movw	r1, #24672	; 0x6060
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff fccb 	bl	800db3e <Ingenia_write_sdo_u8>
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <Ingenia_setTargetPositionVelocity>:
	uint8_t b[4];
} Ingenia_Union_u;

void Ingenia_setTargetPositionVelocity(Servo_t *servo, int32_t pos, uint32_t velo, uint8_t isImmediate, uint8_t isRelative,
		uint8_t isHaltEnabled)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08a      	sub	sp, #40	; 0x28
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
 800e1bc:	70fb      	strb	r3, [r7, #3]
	uint16_t u16ActualControlWord = 0xF;
 800e1be:	230f      	movs	r3, #15
 800e1c0:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t rpdo_value[8];
	Ingenia_Union_u p, v;

	/* set pos & velo */
	memset(rpdo_value, 0, 8);
 800e1c2:	f107 0318 	add.w	r3, r7, #24
 800e1c6:	2208      	movs	r2, #8
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f000 fd0e 	bl	800ebec <memset>
	v.u32 = velo;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	613b      	str	r3, [r7, #16]
	p.i32 = pos;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	617b      	str	r3, [r7, #20]
	for ( int i = 0; i < 4; i++ ) {
 800e1d8:	2300      	movs	r3, #0
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
 800e1dc:	e018      	b.n	800e210 <Ingenia_setTargetPositionVelocity+0x60>
		rpdo_value[i] = v.b[i];
 800e1de:	f107 0210 	add.w	r2, r7, #16
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	4413      	add	r3, r2
 800e1e6:	7819      	ldrb	r1, [r3, #0]
 800e1e8:	f107 0218 	add.w	r2, r7, #24
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	4413      	add	r3, r2
 800e1f0:	460a      	mov	r2, r1
 800e1f2:	701a      	strb	r2, [r3, #0]
		rpdo_value[i + 4] = p.b[i];
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	f107 0114 	add.w	r1, r7, #20
 800e1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1fe:	440a      	add	r2, r1
 800e200:	7812      	ldrb	r2, [r2, #0]
 800e202:	3328      	adds	r3, #40	; 0x28
 800e204:	443b      	add	r3, r7
 800e206:	f803 2c10 	strb.w	r2, [r3, #-16]
	for ( int i = 0; i < 4; i++ ) {
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	3301      	adds	r3, #1
 800e20e:	627b      	str	r3, [r7, #36]	; 0x24
 800e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e212:	2b03      	cmp	r3, #3
 800e214:	dde3      	ble.n	800e1de <Ingenia_setTargetPositionVelocity+0x2e>
	}
	Ingenia_write_rpdo(servo, COB_RPDO2, rpdo_value, 8);
 800e216:	f107 0218 	add.w	r2, r7, #24
 800e21a:	2308      	movs	r3, #8
 800e21c:	f44f 7140 	mov.w	r1, #768	; 0x300
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f7ff fb66 	bl	800d8f2 <Ingenia_write_rpdo>

	/* set low setpoint */
	rpdo_value[0] = u16ActualControlWord;
 800e226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	763b      	strb	r3, [r7, #24]
	rpdo_value[1] = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	767b      	strb	r3, [r7, #25]
	Ingenia_write_rpdo(servo, COB_RPDO1, rpdo_value, 2);
 800e230:	f107 0218 	add.w	r2, r7, #24
 800e234:	2302      	movs	r3, #2
 800e236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f7ff fb59 	bl	800d8f2 <Ingenia_write_rpdo>

	/* Raise New Setpoint Bit */
	u16ActualControlWord |= 1 << 4;
 800e240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e242:	f043 0310 	orr.w	r3, r3, #16
 800e246:	847b      	strh	r3, [r7, #34]	; 0x22

	u16ActualControlWord &= ~(MODE_SPECIFIC_BITS_CHANGE_SET);
 800e248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e24a:	f023 0320 	bic.w	r3, r3, #32
 800e24e:	847b      	strh	r3, [r7, #34]	; 0x22
	u16ActualControlWord |= (uint16_t) isImmediate << 5;
 800e250:	78fb      	ldrb	r3, [r7, #3]
 800e252:	015b      	lsls	r3, r3, #5
 800e254:	b21a      	sxth	r2, r3
 800e256:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e25a:	4313      	orrs	r3, r2
 800e25c:	b21b      	sxth	r3, r3
 800e25e:	847b      	strh	r3, [r7, #34]	; 0x22

	u16ActualControlWord &= ~(MODE_SPECIFIC_BITS_ABS_REL);
 800e260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e266:	847b      	strh	r3, [r7, #34]	; 0x22
	u16ActualControlWord |= (uint16_t) isRelative << 6;
 800e268:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e26c:	019b      	lsls	r3, r3, #6
 800e26e:	b21a      	sxth	r2, r3
 800e270:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e274:	4313      	orrs	r3, r2
 800e276:	b21b      	sxth	r3, r3
 800e278:	847b      	strh	r3, [r7, #34]	; 0x22

	u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_HALT);
 800e27a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e27c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e280:	847b      	strh	r3, [r7, #34]	; 0x22
	u16ActualControlWord |= (uint16_t) isHaltEnabled << 8;
 800e282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e286:	021b      	lsls	r3, r3, #8
 800e288:	b21a      	sxth	r2, r3
 800e28a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e28e:	4313      	orrs	r3, r2
 800e290:	b21b      	sxth	r3, r3
 800e292:	847b      	strh	r3, [r7, #34]	; 0x22

	rpdo_value[0] = u16ActualControlWord & 0xFF;
 800e294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e296:	b2db      	uxtb	r3, r3
 800e298:	763b      	strb	r3, [r7, #24]
	rpdo_value[1] = (u16ActualControlWord >> 8) & 0xFF;
 800e29a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e29c:	0a1b      	lsrs	r3, r3, #8
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	767b      	strb	r3, [r7, #25]

	Ingenia_write_rpdo(servo, COB_RPDO1, rpdo_value, 2);
 800e2a4:	f107 0218 	add.w	r2, r7, #24
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7ff fb1f 	bl	800d8f2 <Ingenia_write_rpdo>

	/* Low New Setpoint */
	u16ActualControlWord &= ~(MODE_SPECIFIC_BITS_NEW_SETPOINT);
 800e2b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2b6:	f023 0310 	bic.w	r3, r3, #16
 800e2ba:	847b      	strh	r3, [r7, #34]	; 0x22
	rpdo_value[0] = u16ActualControlWord & 0xFF;
 800e2bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	763b      	strb	r3, [r7, #24]
	rpdo_value[1] = (u16ActualControlWord >> 8) & 0xFF;
 800e2c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2c4:	0a1b      	lsrs	r3, r3, #8
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	767b      	strb	r3, [r7, #25]
	Ingenia_write_rpdo(servo, COB_RPDO1, rpdo_value, 2);
 800e2cc:	f107 0218 	add.w	r2, r7, #24
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff fb0b 	bl	800d8f2 <Ingenia_write_rpdo>
}
 800e2dc:	bf00      	nop
 800e2de:	3728      	adds	r7, #40	; 0x28
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <can_buffer_available>:
#include "ingenia_buffer.h"

#include <string.h>

uint8_t can_buffer_available(CAN_Buffer_t *buffer)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
	if (buffer->head != buffer->tail)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d021      	beq.n	800e344 <can_buffer_available+0x60>
		return (buffer->head >= buffer->tail) ?
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e306:	b2da      	uxtb	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e30e:	b2db      	uxtb	r3, r3
				(buffer->head - buffer->tail) : (buffer->head + CAN_RX_BUFFER_SIZE - buffer->tail);
 800e310:	429a      	cmp	r2, r3
 800e312:	d30a      	bcc.n	800e32a <can_buffer_available+0x46>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e322:	b2db      	uxtb	r3, r3
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	b2db      	uxtb	r3, r3
 800e328:	e00d      	b.n	800e346 <can_buffer_available+0x62>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e330:	b2da      	uxtb	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	330a      	adds	r3, #10
 800e340:	b2db      	uxtb	r3, r3
 800e342:	e000      	b.n	800e346 <can_buffer_available+0x62>

	return 0;
 800e344:	2300      	movs	r3, #0
}
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
	...

0800e354 <can_buffer_write>:

void can_buffer_write(CAN_Buffer_t *buffer, CAN_Data_t *data)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
	uint8_t head = (buffer->head + 1) % CAN_RX_BUFFER_SIZE;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e364:	b2db      	uxtb	r3, r3
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	4b27      	ldr	r3, [pc, #156]	; (800e408 <can_buffer_write+0xb4>)
 800e36a:	fb83 1302 	smull	r1, r3, r3, r2
 800e36e:	1099      	asrs	r1, r3, #2
 800e370:	17d3      	asrs	r3, r2, #31
 800e372:	1ac9      	subs	r1, r1, r3
 800e374:	460b      	mov	r3, r1
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	440b      	add	r3, r1
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	1ad1      	subs	r1, r2, r3
 800e37e:	460b      	mov	r3, r1
 800e380:	73fb      	strb	r3, [r7, #15]

	if (head != buffer->tail) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	7bfa      	ldrb	r2, [r7, #15]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d036      	beq.n	800e3fe <can_buffer_write+0xaa>
		buffer->buf[buffer->head].id = data->id;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e396:	b2db      	uxtb	r3, r3
 800e398:	4618      	mov	r0, r3
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	0103      	lsls	r3, r0, #4
 800e3a2:	440b      	add	r3, r1
 800e3a4:	601a      	str	r2, [r3, #0]
		buffer->buf[buffer->head].len = data->len;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	7919      	ldrb	r1, [r3, #4]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	0103      	lsls	r3, r0, #4
 800e3b8:	4413      	add	r3, r2
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	460a      	mov	r2, r1
 800e3be:	701a      	strb	r2, [r3, #0]
		memset(buffer->buf[buffer->head].rxData, 0, CAN_DATA_MAX);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	011b      	lsls	r3, r3, #4
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	3305      	adds	r3, #5
 800e3d0:	2208      	movs	r2, #8
 800e3d2:	2100      	movs	r1, #0
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 fc09 	bl	800ebec <memset>
		memcpy(buffer->buf[buffer->head].rxData, data->rxData, CAN_DATA_MAX);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	011b      	lsls	r3, r3, #4
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	1d58      	adds	r0, r3, #5
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	3305      	adds	r3, #5
 800e3ee:	2208      	movs	r2, #8
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	f000 fbed 	bl	800ebd0 <memcpy>

		buffer->head = head;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	7bfa      	ldrb	r2, [r7, #15]
 800e3fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	}
}
 800e3fe:	bf00      	nop
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	66666667 	.word	0x66666667

0800e40c <can_buffer_peek>:

int8_t can_buffer_peek(CAN_Buffer_t *buffer, CAN_Data_t *data)
{
 800e40c:	b590      	push	{r4, r7, lr}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
	if (buffer->head != buffer->tail) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e424:	b2db      	uxtb	r3, r3
 800e426:	429a      	cmp	r2, r3
 800e428:	d011      	beq.n	800e44e <can_buffer_peek+0x42>
		*data = buffer->buf[buffer->tail];
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e430:	b2db      	uxtb	r3, r3
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	011b      	lsls	r3, r3, #4
 800e438:	4413      	add	r3, r2
 800e43a:	460c      	mov	r4, r1
 800e43c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e43e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		return can_buffer_available(buffer);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7ff ff4e 	bl	800e2e4 <can_buffer_available>
 800e448:	4603      	mov	r3, r0
 800e44a:	b25b      	sxtb	r3, r3
 800e44c:	e001      	b.n	800e452 <can_buffer_peek+0x46>
	}

	return -1;
 800e44e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e452:	4618      	mov	r0, r3
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	bd90      	pop	{r4, r7, pc}
	...

0800e45c <can_buffer_read>:

int8_t can_buffer_read(CAN_Buffer_t *buffer, CAN_Data_t *data)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
	int8_t ret = can_buffer_peek(buffer, data);
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff ffcf 	bl	800e40c <can_buffer_peek>
 800e46e:	4603      	mov	r3, r0
 800e470:	73fb      	strb	r3, [r7, #15]
	if (ret > 0)
 800e472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e476:	2b00      	cmp	r3, #0
 800e478:	dd13      	ble.n	800e4a2 <can_buffer_read+0x46>
		buffer->tail = (buffer->tail + 1) % CAN_RX_BUFFER_SIZE;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e480:	b2db      	uxtb	r3, r3
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	4b0a      	ldr	r3, [pc, #40]	; (800e4b0 <can_buffer_read+0x54>)
 800e486:	fb83 1302 	smull	r1, r3, r3, r2
 800e48a:	1099      	asrs	r1, r3, #2
 800e48c:	17d3      	asrs	r3, r2, #31
 800e48e:	1ac9      	subs	r1, r1, r3
 800e490:	460b      	mov	r3, r1
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	1ad1      	subs	r1, r2, r3
 800e49a:	b2ca      	uxtb	r2, r1
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return ret;
 800e4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	66666667 	.word	0x66666667

0800e4b4 <can_buffer_flush>:

void can_buffer_flush(CAN_Buffer_t *buffer)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
	buffer->head = buffer->tail = 0;
 800e4bc:	2100      	movs	r1, #0
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	460a      	mov	r2, r1
 800e4c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	460a      	mov	r2, r1
 800e4ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800e4ce:	bf00      	nop
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <Ingenia_begin>:
//{
//	return len2dlc[datalength];
//}

HAL_StatusTypeDef Ingenia_begin(CAN_INTERFACE_HANDLETYPE *hcan)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b08e      	sub	sp, #56	; 0x38
 800e4de:	af02      	add	r7, sp, #8
 800e4e0:	6078      	str	r0, [r7, #4]
	/* init node slave buffer */
	Ingenia_node_init();
 800e4e2:	f7fe ffb3 	bl	800d44c <Ingenia_node_init>
	/*##-2- Configure the CAN Filter ###########################################*/
	FDCAN_FilterTypeDef sFilterConfig;
	uint32_t filterIndex, filterID1, filterID2;

	/* NMT filter */
	filterIndex = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x81;
 800e4ea:	2381      	movs	r3, #129	; 0x81
 800e4ec:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0xFF;
 800e4ee:	23ff      	movs	r3, #255	; 0xff
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e4fe:	2301      	movs	r3, #1
 800e500:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e50a:	f107 030c 	add.w	r3, r7, #12
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7f4 f9af 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <Ingenia_begin+0x46>
		Error_Handler();
 800e51c:	f7f3 fb2e 	bl	8001b7c <Error_Handler>
	}

	/* TPDO1 filter */
	filterIndex = 1;
 800e520:	2301      	movs	r3, #1
 800e522:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x181;
 800e524:	f240 1381 	movw	r3, #385	; 0x181
 800e528:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x1FF;
 800e52a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800e52e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e530:	2300      	movs	r3, #0
 800e532:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e538:	2300      	movs	r3, #0
 800e53a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e53c:	2301      	movs	r3, #1
 800e53e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e548:	f107 030c 	add.w	r3, r7, #12
 800e54c:	4619      	mov	r1, r3
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7f4 f990 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <Ingenia_begin+0x84>
		Error_Handler();
 800e55a:	f7f3 fb0f 	bl	8001b7c <Error_Handler>
	}

	/* TPDO2 filter */
	filterIndex = 2;
 800e55e:	2302      	movs	r3, #2
 800e560:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x281;
 800e562:	f240 2381 	movw	r3, #641	; 0x281
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x2FF;
 800e568:	f240 23ff 	movw	r3, #767	; 0x2ff
 800e56c:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e56e:	2300      	movs	r3, #0
 800e570:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e576:	2300      	movs	r3, #0
 800e578:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e57a:	2301      	movs	r3, #1
 800e57c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e580:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e586:	f107 030c 	add.w	r3, r7, #12
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7f4 f971 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <Ingenia_begin+0xc2>
		Error_Handler();
 800e598:	f7f3 faf0 	bl	8001b7c <Error_Handler>
	}

	/* TPDO3 filter */
	filterIndex = 3;
 800e59c:	2303      	movs	r3, #3
 800e59e:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x381;
 800e5a0:	f240 3381 	movw	r3, #897	; 0x381
 800e5a4:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x3FF;
 800e5a6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e5c4:	f107 030c 	add.w	r3, r7, #12
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7f4 f952 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <Ingenia_begin+0x100>
		Error_Handler();
 800e5d6:	f7f3 fad1 	bl	8001b7c <Error_Handler>
	}

	/* TPDO4 filter */
	filterIndex = 4;
 800e5da:	2304      	movs	r3, #4
 800e5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x481;
 800e5de:	f240 4381 	movw	r3, #1153	; 0x481
 800e5e2:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x4FF;
 800e5e4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e600:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e602:	f107 030c 	add.w	r3, r7, #12
 800e606:	4619      	mov	r1, r3
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7f4 f933 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <Ingenia_begin+0x13e>
		Error_Handler();
 800e614:	f7f3 fab2 	bl	8001b7c <Error_Handler>
	}

	/* TSDO filter */
	filterIndex = 5;
 800e618:	2305      	movs	r3, #5
 800e61a:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x581;
 800e61c:	f240 5381 	movw	r3, #1409	; 0x581
 800e620:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x5FF;
 800e622:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800e626:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e630:	2300      	movs	r3, #0
 800e632:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e634:	2301      	movs	r3, #1
 800e636:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e640:	f107 030c 	add.w	r3, r7, #12
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7f4 f914 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <Ingenia_begin+0x17c>
		Error_Handler();
 800e652:	f7f3 fa93 	bl	8001b7c <Error_Handler>
	}

	/* NMT Error filter */
	filterIndex = 6;
 800e656:	2306      	movs	r3, #6
 800e658:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x701;
 800e65a:	f240 7301 	movw	r3, #1793	; 0x701
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x77F;
 800e660:	f240 737f 	movw	r3, #1919	; 0x77f
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800e666:	2300      	movs	r3, #0
 800e668:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800e66e:	2300      	movs	r3, #0
 800e670:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800e672:	2301      	movs	r3, #1
 800e674:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800e67e:	f107 030c 	add.w	r3, r7, #12
 800e682:	4619      	mov	r1, r3
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7f4 f8f5 	bl	8002874 <HAL_FDCAN_ConfigFilter>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <Ingenia_begin+0x1ba>
		Error_Handler();
 800e690:	f7f3 fa74 	bl	8001b7c <Error_Handler>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(hcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE,
 800e694:	2300      	movs	r3, #0
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	2300      	movs	r3, #0
 800e69a:	2202      	movs	r2, #2
 800e69c:	2102      	movs	r1, #2
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7f4 f942 	bl	8002928 <HAL_FDCAN_ConfigGlobalFilter>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <Ingenia_begin+0x1d4>
	FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
 800e6aa:	f7f3 fa67 	bl	8001b7c <Error_Handler>
	}

	/*##-3- Activate CAN RX notification #######################################*/
	if (HAL_FDCAN_ActivateNotification(hcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2101      	movs	r1, #1
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7f4 faf2 	bl	8002c9c <HAL_FDCAN_ActivateNotification>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <Ingenia_begin+0x1e8>
		Error_Handler();
 800e6be:	f7f3 fa5d 	bl	8001b7c <Error_Handler>
	}

	/*##-4- Start the CAN peripheral ###########################################*/
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(hcan) != HAL_OK) {
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7f4 f9a4 	bl	8002a10 <HAL_FDCAN_Start>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <Ingenia_begin+0x1f8>
		Error_Handler();
 800e6ce:	f7f3 fa55 	bl	8001b7c <Error_Handler>
	}

	return HAL_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3730      	adds	r7, #48	; 0x30
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <Ingenia_prepare_tx_header>:

void Ingenia_prepare_tx_header(Servo_t *servo)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
	servo->txHeader.IdType = FDCAN_STANDARD_ID;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	609a      	str	r2, [r3, #8]
	servo->txHeader.TxFrameType = FDCAN_DATA_FRAME;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	60da      	str	r2, [r3, #12]
	servo->txHeader.DataLength = FDCAN_DLC_BYTES_8;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e6f6:	611a      	str	r2, [r3, #16]
	servo->txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	615a      	str	r2, [r3, #20]
	servo->txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	619a      	str	r2, [r3, #24]
	servo->txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	61da      	str	r2, [r3, #28]
	servo->txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	621a      	str	r2, [r3, #32]
	servo->txHeader.MessageMarker = 0;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e716:	bf00      	nop
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
	...

0800e724 <_INGENIA_write_data>:

HAL_StatusTypeDef _INGENIA_write_data(Servo_t *servo, const uint32_t id, const uint8_t len, const uint8_t *buf)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	603b      	str	r3, [r7, #0]
 800e730:	4613      	mov	r3, r2
 800e732:	71fb      	strb	r3, [r7, #7]
	servo->txHeader.Identifier = id;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	605a      	str	r2, [r3, #4]
	servo->txHeader.DataLength = len2dlc[len];
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	4a08      	ldr	r2, [pc, #32]	; (800e760 <_INGENIA_write_data+0x3c>)
 800e73e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	611a      	str	r2, [r3, #16]

	return HAL_FDCAN_AddMessageToTxFifoQ(servo->hcan, &servo->txHeader, (uint8_t*) buf);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6818      	ldr	r0, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	3304      	adds	r3, #4
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	4619      	mov	r1, r3
 800e752:	f7f4 f985 	bl	8002a60 <HAL_FDCAN_AddMessageToTxFifoQ>
 800e756:	4603      	mov	r3, r0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	08012194 	.word	0x08012194

0800e764 <retarget_init>:

#include "main.h"
#include "uartTerminal.h"

void retarget_init()
{
 800e764:	b580      	push	{r7, lr}
 800e766:	af00      	add	r7, sp, #0
	uartTerminal_init(&huart1);
 800e768:	480c      	ldr	r0, [pc, #48]	; (800e79c <retarget_init+0x38>)
 800e76a:	f000 f831 	bl	800e7d0 <uartTerminal_init>
	setbuf(stdin, NULL);
 800e76e:	4b0c      	ldr	r3, [pc, #48]	; (800e7a0 <retarget_init+0x3c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	2100      	movs	r1, #0
 800e776:	4618      	mov	r0, r3
 800e778:	f000 ff4e 	bl	800f618 <setbuf>
	setbuf(stdout, NULL);
 800e77c:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <retarget_init+0x3c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	2100      	movs	r1, #0
 800e784:	4618      	mov	r0, r3
 800e786:	f000 ff47 	bl	800f618 <setbuf>
	setbuf(stderr, NULL);
 800e78a:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <retarget_init+0x3c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	2100      	movs	r1, #0
 800e792:	4618      	mov	r0, r3
 800e794:	f000 ff40 	bl	800f618 <setbuf>
}
 800e798:	bf00      	nop
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	200003fc 	.word	0x200003fc
 800e7a0:	20000014 	.word	0x20000014

0800e7a4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
	uartTerminal_send(ch);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f000 f81d 	bl	800e7f0 <uartTerminal_send>

	return 1;
 800e7b6:	2301      	movs	r3, #1
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

GETCHAR_PROTOTYPE
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	af00      	add	r7, sp, #0
	return uartTerminal_recv();
 800e7c4:	f000 f82c 	bl	800e820 <uartTerminal_recv>
 800e7c8:	4603      	mov	r3, r0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <uartTerminal_init>:

/*** Internal Function Declarations ***/

/*** External Function Defines ***/
HAL_StatusTypeDef uartTerminal_init(UART_HandleTypeDef *huart)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
	sp_huart = huart;
 800e7d8:	4a04      	ldr	r2, [pc, #16]	; (800e7ec <uartTerminal_init+0x1c>)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6013      	str	r3, [r2, #0]
#if RETARGET_USE_RX_DMA==1
	HAL_UART_Receive_DMA(sp_huart, (uint8_t*) s_bufferRx, BUFFER_SIZE);
	s_bufferRxRp = 0;
#endif	//if RETARGET_USE_RX_DMA==1

	return HAL_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	370c      	adds	r7, #12
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	20010d4c 	.word	0x20010d4c

0800e7f0 <uartTerminal_send>:

HAL_StatusTypeDef uartTerminal_send(uint8_t data)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	73fb      	strb	r3, [r7, #15]
	ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 800e7fe:	4b07      	ldr	r3, [pc, #28]	; (800e81c <uartTerminal_send+0x2c>)
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	1df9      	adds	r1, r7, #7
 800e804:	2364      	movs	r3, #100	; 0x64
 800e806:	2201      	movs	r2, #1
 800e808:	f7f7 fe56 	bl	80064b8 <HAL_UART_Transmit>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]

	return ret;
 800e810:	7bfb      	ldrb	r3, [r7, #15]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	20010d4c 	.word	0x20010d4c

0800e820 <uartTerminal_recv>:

uint8_t uartTerminal_recv()
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	71fb      	strb	r3, [r7, #7]
		;
	data = s_bufferRx[s_bufferRxRp++];
	s_bufferRxRp &= (BUFFER_SIZE - 1);

#else
	if (HAL_UART_Receive(sp_huart, &data, 1, 100) != HAL_OK)
 800e82a:	4b08      	ldr	r3, [pc, #32]	; (800e84c <uartTerminal_recv+0x2c>)
 800e82c:	6818      	ldr	r0, [r3, #0]
 800e82e:	1df9      	adds	r1, r7, #7
 800e830:	2364      	movs	r3, #100	; 0x64
 800e832:	2201      	movs	r2, #1
 800e834:	f7f7 fed6 	bl	80065e4 <HAL_UART_Receive>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <uartTerminal_recv+0x22>
		data = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	71fb      	strb	r3, [r7, #7]
#endif	//if RETARGET_USE_RX_DMA==1

	return data;
 800e842:	79fb      	ldrb	r3, [r7, #7]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	20010d4c 	.word	0x20010d4c

0800e850 <cock_cmd_on>:

#include "kokang.h"
#include "tim.h"

static void cock_cmd_on()
{
 800e850:	b580      	push	{r7, lr}
 800e852:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800e854:	2100      	movs	r1, #0
 800e856:	480c      	ldr	r0, [pc, #48]	; (800e888 <cock_cmd_on+0x38>)
 800e858:	f7f6 f948 	bl	8004aec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800e85c:	2104      	movs	r1, #4
 800e85e:	480a      	ldr	r0, [pc, #40]	; (800e888 <cock_cmd_on+0x38>)
 800e860:	f7f6 f944 	bl	8004aec <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800e864:	4b08      	ldr	r3, [pc, #32]	; (800e888 <cock_cmd_on+0x38>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2200      	movs	r2, #0
 800e86a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800e86c:	4b06      	ldr	r3, [pc, #24]	; (800e888 <cock_cmd_on+0x38>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2200      	movs	r2, #0
 800e872:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800e874:	213c      	movs	r1, #60	; 0x3c
 800e876:	4805      	ldr	r0, [pc, #20]	; (800e88c <cock_cmd_on+0x3c>)
 800e878:	f7f6 fb86 	bl	8004f88 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2, C_ENC_MIN);
 800e87c:	4b03      	ldr	r3, [pc, #12]	; (800e88c <cock_cmd_on+0x3c>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2200      	movs	r2, #0
 800e882:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e884:	bf00      	nop
 800e886:	bd80      	pop	{r7, pc}
 800e888:	200003b0 	.word	0x200003b0
 800e88c:	20000364 	.word	0x20000364

0800e890 <cock_cmd_off>:

static void cock_cmd_off()
{
 800e890:	b580      	push	{r7, lr}
 800e892:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800e894:	2100      	movs	r1, #0
 800e896:	480a      	ldr	r0, [pc, #40]	; (800e8c0 <cock_cmd_off+0x30>)
 800e898:	f7f6 fa34 	bl	8004d04 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800e89c:	2104      	movs	r1, #4
 800e89e:	4808      	ldr	r0, [pc, #32]	; (800e8c0 <cock_cmd_off+0x30>)
 800e8a0:	f7f6 fa30 	bl	8004d04 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800e8a4:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <cock_cmd_off+0x30>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800e8ac:	4b04      	ldr	r3, [pc, #16]	; (800e8c0 <cock_cmd_off+0x30>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 800e8b4:	213c      	movs	r1, #60	; 0x3c
 800e8b6:	4803      	ldr	r0, [pc, #12]	; (800e8c4 <cock_cmd_off+0x34>)
 800e8b8:	f7f6 fbf4 	bl	80050a4 <HAL_TIM_Encoder_Stop>
}
 800e8bc:	bf00      	nop
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	200003b0 	.word	0x200003b0
 800e8c4:	20000364 	.word	0x20000364

0800e8c8 <cock_init>:

void cock_init(Cock_t *cock)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
	cock->enable = 0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	701a      	strb	r2, [r3, #0]
	cock->start = 0;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	705a      	strb	r2, [r3, #1]
	cock->state = CST_IDLE;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	709a      	strb	r2, [r3, #2]
	cock->timeout = 0;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	605a      	str	r2, [r3, #4]

	cock_cmd_off();
 800e8e8:	f7ff ffd2 	bl	800e890 <cock_cmd_off>

	cock_power(cock, 0);
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 f87e 	bl	800e9f0 <cock_power>
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <cock_handler>:

HAL_StatusTypeDef cock_handler(Cock_t *cock)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
	int32_t cock_enc_value = (int32_t) __HAL_TIM_GET_COUNTER(&htim2);
 800e904:	4b2b      	ldr	r3, [pc, #172]	; (800e9b4 <cock_handler+0xb8>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90a:	60fb      	str	r3, [r7, #12]

	switch (cock->state)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	789b      	ldrb	r3, [r3, #2]
 800e910:	2b03      	cmp	r3, #3
 800e912:	d028      	beq.n	800e966 <cock_handler+0x6a>
 800e914:	2b03      	cmp	r3, #3
 800e916:	dc40      	bgt.n	800e99a <cock_handler+0x9e>
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d002      	beq.n	800e922 <cock_handler+0x26>
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d017      	beq.n	800e950 <cock_handler+0x54>
				return HAL_OK;
		}

		break;
	default:
		break;
 800e920:	e03b      	b.n	800e99a <cock_handler+0x9e>
		if ((cock_enc_value >= (C_ENC_MAX - C_ENC_HYST)) || (HAL_GetTick() >= cock->timeout)) {
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e928:	4293      	cmp	r3, r2
 800e92a:	dc06      	bgt.n	800e93a <cock_handler+0x3e>
 800e92c:	f7f3 f841 	bl	80019b2 <HAL_GetTick>
 800e930:	4602      	mov	r2, r0
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	429a      	cmp	r2, r3
 800e938:	d331      	bcc.n	800e99e <cock_handler+0xa2>
			cock->state = CST_MAX_STOP;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2202      	movs	r2, #2
 800e93e:	709a      	strb	r2, [r3, #2]
			cock->timeout = HAL_GetTick() + C_TIM_MAX_STOP;
 800e940:	f7f3 f837 	bl	80019b2 <HAL_GetTick>
 800e944:	4603      	mov	r3, r0
 800e946:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	605a      	str	r2, [r3, #4]
		break;
 800e94e:	e026      	b.n	800e99e <cock_handler+0xa2>
		if (HAL_GetTick() >= cock->timeout)
 800e950:	f7f3 f82f 	bl	80019b2 <HAL_GetTick>
 800e954:	4602      	mov	r2, r0
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d321      	bcc.n	800e9a2 <cock_handler+0xa6>
			cock->state = CST_RETRACT;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2203      	movs	r2, #3
 800e962:	709a      	strb	r2, [r3, #2]
		break;
 800e964:	e01d      	b.n	800e9a2 <cock_handler+0xa6>
		if ((cock_enc_value <= (C_ENC_MIN + C_ENC_HYST)) || (HAL_GetTick() >= cock->timeout)) {
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b32      	cmp	r3, #50	; 0x32
 800e96a:	dd06      	ble.n	800e97a <cock_handler+0x7e>
 800e96c:	f7f3 f821 	bl	80019b2 <HAL_GetTick>
 800e970:	4602      	mov	r2, r0
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	429a      	cmp	r2, r3
 800e978:	d315      	bcc.n	800e9a6 <cock_handler+0xaa>
			cock_cmd_off();
 800e97a:	f7ff ff89 	bl	800e890 <cock_cmd_off>
			cock->state = CST_IDLE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	709a      	strb	r2, [r3, #2]
			if (HAL_GetTick() >= cock->timeout)
 800e984:	f7f3 f815 	bl	80019b2 <HAL_GetTick>
 800e988:	4602      	mov	r2, r0
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d301      	bcc.n	800e996 <cock_handler+0x9a>
				return HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	e009      	b.n	800e9aa <cock_handler+0xae>
				return HAL_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	e007      	b.n	800e9aa <cock_handler+0xae>
		break;
 800e99a:	bf00      	nop
 800e99c:	e004      	b.n	800e9a8 <cock_handler+0xac>
		break;
 800e99e:	bf00      	nop
 800e9a0:	e002      	b.n	800e9a8 <cock_handler+0xac>
		break;
 800e9a2:	bf00      	nop
 800e9a4:	e000      	b.n	800e9a8 <cock_handler+0xac>
		break;
 800e9a6:	bf00      	nop
	}

	return HAL_BUSY;
 800e9a8:	2302      	movs	r3, #2
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20000364 	.word	0x20000364

0800e9b8 <cock_start>:

void cock_start(Cock_t *cock)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	cock->state = CST_ERECT;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	709a      	strb	r2, [r3, #2]
	cock->timeout = HAL_GetTick() + C_TIM_ERECT;
 800e9c6:	f7f2 fff4 	bl	80019b2 <HAL_GetTick>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	6053      	str	r3, [r2, #4]

	cock_cmd_on();
 800e9d6:	f7ff ff3b 	bl	800e850 <cock_cmd_on>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800e9da:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <cock_start+0x34>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e9e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	200003b0 	.word	0x200003b0

0800e9f0 <cock_power>:

void cock_power(Cock_t *cock, const uint8_t act)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	70fb      	strb	r3, [r7, #3]
	uint8_t enable = act & 0b1;
 800e9fc:	78fb      	ldrb	r3, [r7, #3]
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	73fb      	strb	r3, [r7, #15]

	if (enable != 0)
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d006      	beq.n	800ea18 <cock_power+0x28>
		HAL_GPIO_WritePin(COCK_PWR_EN_GPIO_Port, COCK_PWR_EN_Pin, GPIO_PIN_SET);
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	2120      	movs	r1, #32
 800ea0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ea12:	f7f4 fe2d 	bl	8003670 <HAL_GPIO_WritePin>
 800ea16:	e005      	b.n	800ea24 <cock_power+0x34>
	else
		HAL_GPIO_WritePin(COCK_PWR_EN_GPIO_Port, COCK_PWR_EN_Pin, GPIO_PIN_RESET);
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2120      	movs	r1, #32
 800ea1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ea20:	f7f4 fe26 	bl	8003670 <HAL_GPIO_WritePin>

	cock->state = CST_IDLE;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	709a      	strb	r2, [r3, #2]
	cock->enable = enable;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	7bfa      	ldrb	r2, [r7, #15]
 800ea2e:	701a      	strb	r2, [r3, #0]
}
 800ea30:	bf00      	nop
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <munisi_reset>:

volatile uint16_t m_counter = 0;
uint8_t state_active = 0;

void munisi_reset()
{
 800ea38:	b480      	push	{r7}
 800ea3a:	af00      	add	r7, sp, #0
	m_counter = 0;
 800ea3c:	4b03      	ldr	r3, [pc, #12]	; (800ea4c <munisi_reset+0x14>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	801a      	strh	r2, [r3, #0]
}
 800ea42:	bf00      	nop
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	20010d50 	.word	0x20010d50

0800ea50 <munisi_set_state>:

void munisi_set_state(const uint8_t power)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	71fb      	strb	r3, [r7, #7]
	state_active = power;
 800ea5a:	4a04      	ldr	r2, [pc, #16]	; (800ea6c <munisi_set_state+0x1c>)
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	7013      	strb	r3, [r2, #0]
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20010d52 	.word	0x20010d52

0800ea70 <munisi_get_counter>:
{
	return state_active;
}

uint16_t munisi_get_counter()
{
 800ea70:	b480      	push	{r7}
 800ea72:	af00      	add	r7, sp, #0
	return m_counter;
 800ea74:	4b03      	ldr	r3, [pc, #12]	; (800ea84 <munisi_get_counter+0x14>)
 800ea76:	881b      	ldrh	r3, [r3, #0]
 800ea78:	b29b      	uxth	r3, r3
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	20010d50 	.word	0x20010d50

0800ea88 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	af00      	add	r7, sp, #0
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(MUNC_A_Pin) != 0x00u) {
 800ea8c:	4b0c      	ldr	r3, [pc, #48]	; (800eac0 <EXTI15_10_IRQHandler+0x38>)
 800ea8e:	695b      	ldr	r3, [r3, #20]
 800ea90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00e      	beq.n	800eab6 <EXTI15_10_IRQHandler+0x2e>
		__HAL_GPIO_EXTI_CLEAR_IT(MUNC_A_Pin);
 800ea98:	4b09      	ldr	r3, [pc, #36]	; (800eac0 <EXTI15_10_IRQHandler+0x38>)
 800ea9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea9e:	615a      	str	r2, [r3, #20]

		if (state_active != 0)
 800eaa0:	4b08      	ldr	r3, [pc, #32]	; (800eac4 <EXTI15_10_IRQHandler+0x3c>)
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d006      	beq.n	800eab6 <EXTI15_10_IRQHandler+0x2e>
			m_counter++;
 800eaa8:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <EXTI15_10_IRQHandler+0x40>)
 800eaaa:	881b      	ldrh	r3, [r3, #0]
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3301      	adds	r3, #1
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <EXTI15_10_IRQHandler+0x40>)
 800eab4:	801a      	strh	r2, [r3, #0]
	}
}
 800eab6:	bf00      	nop
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	40010400 	.word	0x40010400
 800eac4:	20010d52 	.word	0x20010d52
 800eac8:	20010d50 	.word	0x20010d50

0800eacc <trig_set_power>:
#include "tim.h"

volatile uint32_t t_js_counter;

void trig_set_power(const uint8_t act)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	4603      	mov	r3, r0
 800ead4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TRIGGER_ENABLE_GPIO_Port, TRIGGER_ENABLE_Pin, act);
 800ead6:	79fb      	ldrb	r3, [r7, #7]
 800ead8:	461a      	mov	r2, r3
 800eada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800eae2:	f7f4 fdc5 	bl	8003670 <HAL_GPIO_WritePin>
}
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
	...

0800eaf0 <trig_start>:

void trig_start()
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_START_GPIO_Port, T_START_Pin, GPIO_PIN_SET);
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eafa:	4805      	ldr	r0, [pc, #20]	; (800eb10 <trig_start+0x20>)
 800eafc:	f7f4 fdb8 	bl	8003670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_SET);
 800eb00:	2201      	movs	r2, #1
 800eb02:	2140      	movs	r1, #64	; 0x40
 800eb04:	4803      	ldr	r0, [pc, #12]	; (800eb14 <trig_start+0x24>)
 800eb06:	f7f4 fdb3 	bl	8003670 <HAL_GPIO_WritePin>
}
 800eb0a:	bf00      	nop
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	48000400 	.word	0x48000400
 800eb14:	48000800 	.word	0x48000800

0800eb18 <trig_s_stop>:

void trig_s_stop()
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_START_GPIO_Port, T_START_Pin, GPIO_PIN_RESET);
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eb22:	4802      	ldr	r0, [pc, #8]	; (800eb2c <trig_s_stop+0x14>)
 800eb24:	f7f4 fda4 	bl	8003670 <HAL_GPIO_WritePin>
}
 800eb28:	bf00      	nop
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	48000400 	.word	0x48000400

0800eb30 <trig_h_stop>:

void trig_h_stop()
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_RESET);
 800eb34:	2200      	movs	r2, #0
 800eb36:	2140      	movs	r1, #64	; 0x40
 800eb38:	4802      	ldr	r0, [pc, #8]	; (800eb44 <trig_h_stop+0x14>)
 800eb3a:	f7f4 fd99 	bl	8003670 <HAL_GPIO_WritePin>
}
 800eb3e:	bf00      	nop
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	48000800 	.word	0x48000800

0800eb48 <trig_pulse_state>:

uint8_t trig_pulse_state()
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(T_JS_PULSE_GPIO_Port, T_JS_PULSE_Pin) == GPIO_PIN_RESET)
 800eb4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eb50:	4805      	ldr	r0, [pc, #20]	; (800eb68 <trig_pulse_state+0x20>)
 800eb52:	f7f4 fd75 	bl	8003640 <HAL_GPIO_ReadPin>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <trig_pulse_state+0x18>
		return 1;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e000      	b.n	800eb62 <trig_pulse_state+0x1a>
	else
		return 0;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	48000400 	.word	0x48000400

0800eb6c <trig_all_stop>:

	return 0;
}

void trig_all_stop()
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	af00      	add	r7, sp, #0
	trig_s_stop();
 800eb70:	f7ff ffd2 	bl	800eb18 <trig_s_stop>
	trig_h_stop();
 800eb74:	f7ff ffdc 	bl	800eb30 <trig_h_stop>
}
 800eb78:	bf00      	nop
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <__errno>:
 800eb7c:	4b01      	ldr	r3, [pc, #4]	; (800eb84 <__errno+0x8>)
 800eb7e:	6818      	ldr	r0, [r3, #0]
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	20000014 	.word	0x20000014

0800eb88 <__libc_init_array>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	4d0d      	ldr	r5, [pc, #52]	; (800ebc0 <__libc_init_array+0x38>)
 800eb8c:	4c0d      	ldr	r4, [pc, #52]	; (800ebc4 <__libc_init_array+0x3c>)
 800eb8e:	1b64      	subs	r4, r4, r5
 800eb90:	10a4      	asrs	r4, r4, #2
 800eb92:	2600      	movs	r6, #0
 800eb94:	42a6      	cmp	r6, r4
 800eb96:	d109      	bne.n	800ebac <__libc_init_array+0x24>
 800eb98:	4d0b      	ldr	r5, [pc, #44]	; (800ebc8 <__libc_init_array+0x40>)
 800eb9a:	4c0c      	ldr	r4, [pc, #48]	; (800ebcc <__libc_init_array+0x44>)
 800eb9c:	f002 fef0 	bl	8011980 <_init>
 800eba0:	1b64      	subs	r4, r4, r5
 800eba2:	10a4      	asrs	r4, r4, #2
 800eba4:	2600      	movs	r6, #0
 800eba6:	42a6      	cmp	r6, r4
 800eba8:	d105      	bne.n	800ebb6 <__libc_init_array+0x2e>
 800ebaa:	bd70      	pop	{r4, r5, r6, pc}
 800ebac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebb0:	4798      	blx	r3
 800ebb2:	3601      	adds	r6, #1
 800ebb4:	e7ee      	b.n	800eb94 <__libc_init_array+0xc>
 800ebb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebba:	4798      	blx	r3
 800ebbc:	3601      	adds	r6, #1
 800ebbe:	e7f2      	b.n	800eba6 <__libc_init_array+0x1e>
 800ebc0:	080125b4 	.word	0x080125b4
 800ebc4:	080125b4 	.word	0x080125b4
 800ebc8:	080125b4 	.word	0x080125b4
 800ebcc:	080125b8 	.word	0x080125b8

0800ebd0 <memcpy>:
 800ebd0:	440a      	add	r2, r1
 800ebd2:	4291      	cmp	r1, r2
 800ebd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebd8:	d100      	bne.n	800ebdc <memcpy+0xc>
 800ebda:	4770      	bx	lr
 800ebdc:	b510      	push	{r4, lr}
 800ebde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebe6:	4291      	cmp	r1, r2
 800ebe8:	d1f9      	bne.n	800ebde <memcpy+0xe>
 800ebea:	bd10      	pop	{r4, pc}

0800ebec <memset>:
 800ebec:	4402      	add	r2, r0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d100      	bne.n	800ebf6 <memset+0xa>
 800ebf4:	4770      	bx	lr
 800ebf6:	f803 1b01 	strb.w	r1, [r3], #1
 800ebfa:	e7f9      	b.n	800ebf0 <memset+0x4>

0800ebfc <__cvt>:
 800ebfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec00:	ec55 4b10 	vmov	r4, r5, d0
 800ec04:	2d00      	cmp	r5, #0
 800ec06:	460e      	mov	r6, r1
 800ec08:	4619      	mov	r1, r3
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	bfbb      	ittet	lt
 800ec0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ec12:	461d      	movlt	r5, r3
 800ec14:	2300      	movge	r3, #0
 800ec16:	232d      	movlt	r3, #45	; 0x2d
 800ec18:	700b      	strb	r3, [r1, #0]
 800ec1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ec20:	4691      	mov	r9, r2
 800ec22:	f023 0820 	bic.w	r8, r3, #32
 800ec26:	bfbc      	itt	lt
 800ec28:	4622      	movlt	r2, r4
 800ec2a:	4614      	movlt	r4, r2
 800ec2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec30:	d005      	beq.n	800ec3e <__cvt+0x42>
 800ec32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec36:	d100      	bne.n	800ec3a <__cvt+0x3e>
 800ec38:	3601      	adds	r6, #1
 800ec3a:	2102      	movs	r1, #2
 800ec3c:	e000      	b.n	800ec40 <__cvt+0x44>
 800ec3e:	2103      	movs	r1, #3
 800ec40:	ab03      	add	r3, sp, #12
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	ab02      	add	r3, sp, #8
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	ec45 4b10 	vmov	d0, r4, r5
 800ec4c:	4653      	mov	r3, sl
 800ec4e:	4632      	mov	r2, r6
 800ec50:	f000 fefe 	bl	800fa50 <_dtoa_r>
 800ec54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ec58:	4607      	mov	r7, r0
 800ec5a:	d102      	bne.n	800ec62 <__cvt+0x66>
 800ec5c:	f019 0f01 	tst.w	r9, #1
 800ec60:	d022      	beq.n	800eca8 <__cvt+0xac>
 800ec62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec66:	eb07 0906 	add.w	r9, r7, r6
 800ec6a:	d110      	bne.n	800ec8e <__cvt+0x92>
 800ec6c:	783b      	ldrb	r3, [r7, #0]
 800ec6e:	2b30      	cmp	r3, #48	; 0x30
 800ec70:	d10a      	bne.n	800ec88 <__cvt+0x8c>
 800ec72:	2200      	movs	r2, #0
 800ec74:	2300      	movs	r3, #0
 800ec76:	4620      	mov	r0, r4
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7f1 ff4d 	bl	8000b18 <__aeabi_dcmpeq>
 800ec7e:	b918      	cbnz	r0, 800ec88 <__cvt+0x8c>
 800ec80:	f1c6 0601 	rsb	r6, r6, #1
 800ec84:	f8ca 6000 	str.w	r6, [sl]
 800ec88:	f8da 3000 	ldr.w	r3, [sl]
 800ec8c:	4499      	add	r9, r3
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2300      	movs	r3, #0
 800ec92:	4620      	mov	r0, r4
 800ec94:	4629      	mov	r1, r5
 800ec96:	f7f1 ff3f 	bl	8000b18 <__aeabi_dcmpeq>
 800ec9a:	b108      	cbz	r0, 800eca0 <__cvt+0xa4>
 800ec9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800eca0:	2230      	movs	r2, #48	; 0x30
 800eca2:	9b03      	ldr	r3, [sp, #12]
 800eca4:	454b      	cmp	r3, r9
 800eca6:	d307      	bcc.n	800ecb8 <__cvt+0xbc>
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecac:	1bdb      	subs	r3, r3, r7
 800ecae:	4638      	mov	r0, r7
 800ecb0:	6013      	str	r3, [r2, #0]
 800ecb2:	b004      	add	sp, #16
 800ecb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb8:	1c59      	adds	r1, r3, #1
 800ecba:	9103      	str	r1, [sp, #12]
 800ecbc:	701a      	strb	r2, [r3, #0]
 800ecbe:	e7f0      	b.n	800eca2 <__cvt+0xa6>

0800ecc0 <__exponent>:
 800ecc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2900      	cmp	r1, #0
 800ecc6:	bfb8      	it	lt
 800ecc8:	4249      	neglt	r1, r1
 800ecca:	f803 2b02 	strb.w	r2, [r3], #2
 800ecce:	bfb4      	ite	lt
 800ecd0:	222d      	movlt	r2, #45	; 0x2d
 800ecd2:	222b      	movge	r2, #43	; 0x2b
 800ecd4:	2909      	cmp	r1, #9
 800ecd6:	7042      	strb	r2, [r0, #1]
 800ecd8:	dd2a      	ble.n	800ed30 <__exponent+0x70>
 800ecda:	f10d 0407 	add.w	r4, sp, #7
 800ecde:	46a4      	mov	ip, r4
 800ece0:	270a      	movs	r7, #10
 800ece2:	46a6      	mov	lr, r4
 800ece4:	460a      	mov	r2, r1
 800ece6:	fb91 f6f7 	sdiv	r6, r1, r7
 800ecea:	fb07 1516 	mls	r5, r7, r6, r1
 800ecee:	3530      	adds	r5, #48	; 0x30
 800ecf0:	2a63      	cmp	r2, #99	; 0x63
 800ecf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ecf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ecfa:	4631      	mov	r1, r6
 800ecfc:	dcf1      	bgt.n	800ece2 <__exponent+0x22>
 800ecfe:	3130      	adds	r1, #48	; 0x30
 800ed00:	f1ae 0502 	sub.w	r5, lr, #2
 800ed04:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ed08:	1c44      	adds	r4, r0, #1
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	4561      	cmp	r1, ip
 800ed0e:	d30a      	bcc.n	800ed26 <__exponent+0x66>
 800ed10:	f10d 0209 	add.w	r2, sp, #9
 800ed14:	eba2 020e 	sub.w	r2, r2, lr
 800ed18:	4565      	cmp	r5, ip
 800ed1a:	bf88      	it	hi
 800ed1c:	2200      	movhi	r2, #0
 800ed1e:	4413      	add	r3, r2
 800ed20:	1a18      	subs	r0, r3, r0
 800ed22:	b003      	add	sp, #12
 800ed24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ed2e:	e7ed      	b.n	800ed0c <__exponent+0x4c>
 800ed30:	2330      	movs	r3, #48	; 0x30
 800ed32:	3130      	adds	r1, #48	; 0x30
 800ed34:	7083      	strb	r3, [r0, #2]
 800ed36:	70c1      	strb	r1, [r0, #3]
 800ed38:	1d03      	adds	r3, r0, #4
 800ed3a:	e7f1      	b.n	800ed20 <__exponent+0x60>

0800ed3c <_printf_float>:
 800ed3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	ed2d 8b02 	vpush	{d8}
 800ed44:	b08d      	sub	sp, #52	; 0x34
 800ed46:	460c      	mov	r4, r1
 800ed48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ed4c:	4616      	mov	r6, r2
 800ed4e:	461f      	mov	r7, r3
 800ed50:	4605      	mov	r5, r0
 800ed52:	f001 fe23 	bl	801099c <_localeconv_r>
 800ed56:	f8d0 a000 	ldr.w	sl, [r0]
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	f7f1 fa60 	bl	8000220 <strlen>
 800ed60:	2300      	movs	r3, #0
 800ed62:	930a      	str	r3, [sp, #40]	; 0x28
 800ed64:	6823      	ldr	r3, [r4, #0]
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	f8d8 3000 	ldr.w	r3, [r8]
 800ed6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ed70:	3307      	adds	r3, #7
 800ed72:	f023 0307 	bic.w	r3, r3, #7
 800ed76:	f103 0208 	add.w	r2, r3, #8
 800ed7a:	f8c8 2000 	str.w	r2, [r8]
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ed86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ed8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed8e:	9307      	str	r3, [sp, #28]
 800ed90:	f8cd 8018 	str.w	r8, [sp, #24]
 800ed94:	ee08 0a10 	vmov	s16, r0
 800ed98:	4b9f      	ldr	r3, [pc, #636]	; (800f018 <_printf_float+0x2dc>)
 800ed9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eda2:	f7f1 feeb 	bl	8000b7c <__aeabi_dcmpun>
 800eda6:	bb88      	cbnz	r0, 800ee0c <_printf_float+0xd0>
 800eda8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edac:	4b9a      	ldr	r3, [pc, #616]	; (800f018 <_printf_float+0x2dc>)
 800edae:	f04f 32ff 	mov.w	r2, #4294967295
 800edb2:	f7f1 fec5 	bl	8000b40 <__aeabi_dcmple>
 800edb6:	bb48      	cbnz	r0, 800ee0c <_printf_float+0xd0>
 800edb8:	2200      	movs	r2, #0
 800edba:	2300      	movs	r3, #0
 800edbc:	4640      	mov	r0, r8
 800edbe:	4649      	mov	r1, r9
 800edc0:	f7f1 feb4 	bl	8000b2c <__aeabi_dcmplt>
 800edc4:	b110      	cbz	r0, 800edcc <_printf_float+0x90>
 800edc6:	232d      	movs	r3, #45	; 0x2d
 800edc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edcc:	4b93      	ldr	r3, [pc, #588]	; (800f01c <_printf_float+0x2e0>)
 800edce:	4894      	ldr	r0, [pc, #592]	; (800f020 <_printf_float+0x2e4>)
 800edd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800edd4:	bf94      	ite	ls
 800edd6:	4698      	movls	r8, r3
 800edd8:	4680      	movhi	r8, r0
 800edda:	2303      	movs	r3, #3
 800eddc:	6123      	str	r3, [r4, #16]
 800edde:	9b05      	ldr	r3, [sp, #20]
 800ede0:	f023 0204 	bic.w	r2, r3, #4
 800ede4:	6022      	str	r2, [r4, #0]
 800ede6:	f04f 0900 	mov.w	r9, #0
 800edea:	9700      	str	r7, [sp, #0]
 800edec:	4633      	mov	r3, r6
 800edee:	aa0b      	add	r2, sp, #44	; 0x2c
 800edf0:	4621      	mov	r1, r4
 800edf2:	4628      	mov	r0, r5
 800edf4:	f000 f9d8 	bl	800f1a8 <_printf_common>
 800edf8:	3001      	adds	r0, #1
 800edfa:	f040 8090 	bne.w	800ef1e <_printf_float+0x1e2>
 800edfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ee02:	b00d      	add	sp, #52	; 0x34
 800ee04:	ecbd 8b02 	vpop	{d8}
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0c:	4642      	mov	r2, r8
 800ee0e:	464b      	mov	r3, r9
 800ee10:	4640      	mov	r0, r8
 800ee12:	4649      	mov	r1, r9
 800ee14:	f7f1 feb2 	bl	8000b7c <__aeabi_dcmpun>
 800ee18:	b140      	cbz	r0, 800ee2c <_printf_float+0xf0>
 800ee1a:	464b      	mov	r3, r9
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfbc      	itt	lt
 800ee20:	232d      	movlt	r3, #45	; 0x2d
 800ee22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ee26:	487f      	ldr	r0, [pc, #508]	; (800f024 <_printf_float+0x2e8>)
 800ee28:	4b7f      	ldr	r3, [pc, #508]	; (800f028 <_printf_float+0x2ec>)
 800ee2a:	e7d1      	b.n	800edd0 <_printf_float+0x94>
 800ee2c:	6863      	ldr	r3, [r4, #4]
 800ee2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee32:	9206      	str	r2, [sp, #24]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	d13f      	bne.n	800eeb8 <_printf_float+0x17c>
 800ee38:	2306      	movs	r3, #6
 800ee3a:	6063      	str	r3, [r4, #4]
 800ee3c:	9b05      	ldr	r3, [sp, #20]
 800ee3e:	6861      	ldr	r1, [r4, #4]
 800ee40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ee44:	2300      	movs	r3, #0
 800ee46:	9303      	str	r3, [sp, #12]
 800ee48:	ab0a      	add	r3, sp, #40	; 0x28
 800ee4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ee4e:	ab09      	add	r3, sp, #36	; 0x24
 800ee50:	ec49 8b10 	vmov	d0, r8, r9
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	6022      	str	r2, [r4, #0]
 800ee58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7ff fecd 	bl	800ebfc <__cvt>
 800ee62:	9b06      	ldr	r3, [sp, #24]
 800ee64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee66:	2b47      	cmp	r3, #71	; 0x47
 800ee68:	4680      	mov	r8, r0
 800ee6a:	d108      	bne.n	800ee7e <_printf_float+0x142>
 800ee6c:	1cc8      	adds	r0, r1, #3
 800ee6e:	db02      	blt.n	800ee76 <_printf_float+0x13a>
 800ee70:	6863      	ldr	r3, [r4, #4]
 800ee72:	4299      	cmp	r1, r3
 800ee74:	dd41      	ble.n	800eefa <_printf_float+0x1be>
 800ee76:	f1ab 0b02 	sub.w	fp, fp, #2
 800ee7a:	fa5f fb8b 	uxtb.w	fp, fp
 800ee7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee82:	d820      	bhi.n	800eec6 <_printf_float+0x18a>
 800ee84:	3901      	subs	r1, #1
 800ee86:	465a      	mov	r2, fp
 800ee88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ee8c:	9109      	str	r1, [sp, #36]	; 0x24
 800ee8e:	f7ff ff17 	bl	800ecc0 <__exponent>
 800ee92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee94:	1813      	adds	r3, r2, r0
 800ee96:	2a01      	cmp	r2, #1
 800ee98:	4681      	mov	r9, r0
 800ee9a:	6123      	str	r3, [r4, #16]
 800ee9c:	dc02      	bgt.n	800eea4 <_printf_float+0x168>
 800ee9e:	6822      	ldr	r2, [r4, #0]
 800eea0:	07d2      	lsls	r2, r2, #31
 800eea2:	d501      	bpl.n	800eea8 <_printf_float+0x16c>
 800eea4:	3301      	adds	r3, #1
 800eea6:	6123      	str	r3, [r4, #16]
 800eea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d09c      	beq.n	800edea <_printf_float+0xae>
 800eeb0:	232d      	movs	r3, #45	; 0x2d
 800eeb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eeb6:	e798      	b.n	800edea <_printf_float+0xae>
 800eeb8:	9a06      	ldr	r2, [sp, #24]
 800eeba:	2a47      	cmp	r2, #71	; 0x47
 800eebc:	d1be      	bne.n	800ee3c <_printf_float+0x100>
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1bc      	bne.n	800ee3c <_printf_float+0x100>
 800eec2:	2301      	movs	r3, #1
 800eec4:	e7b9      	b.n	800ee3a <_printf_float+0xfe>
 800eec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eeca:	d118      	bne.n	800eefe <_printf_float+0x1c2>
 800eecc:	2900      	cmp	r1, #0
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	dd0b      	ble.n	800eeea <_printf_float+0x1ae>
 800eed2:	6121      	str	r1, [r4, #16]
 800eed4:	b913      	cbnz	r3, 800eedc <_printf_float+0x1a0>
 800eed6:	6822      	ldr	r2, [r4, #0]
 800eed8:	07d0      	lsls	r0, r2, #31
 800eeda:	d502      	bpl.n	800eee2 <_printf_float+0x1a6>
 800eedc:	3301      	adds	r3, #1
 800eede:	440b      	add	r3, r1
 800eee0:	6123      	str	r3, [r4, #16]
 800eee2:	65a1      	str	r1, [r4, #88]	; 0x58
 800eee4:	f04f 0900 	mov.w	r9, #0
 800eee8:	e7de      	b.n	800eea8 <_printf_float+0x16c>
 800eeea:	b913      	cbnz	r3, 800eef2 <_printf_float+0x1b6>
 800eeec:	6822      	ldr	r2, [r4, #0]
 800eeee:	07d2      	lsls	r2, r2, #31
 800eef0:	d501      	bpl.n	800eef6 <_printf_float+0x1ba>
 800eef2:	3302      	adds	r3, #2
 800eef4:	e7f4      	b.n	800eee0 <_printf_float+0x1a4>
 800eef6:	2301      	movs	r3, #1
 800eef8:	e7f2      	b.n	800eee0 <_printf_float+0x1a4>
 800eefa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef00:	4299      	cmp	r1, r3
 800ef02:	db05      	blt.n	800ef10 <_printf_float+0x1d4>
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	6121      	str	r1, [r4, #16]
 800ef08:	07d8      	lsls	r0, r3, #31
 800ef0a:	d5ea      	bpl.n	800eee2 <_printf_float+0x1a6>
 800ef0c:	1c4b      	adds	r3, r1, #1
 800ef0e:	e7e7      	b.n	800eee0 <_printf_float+0x1a4>
 800ef10:	2900      	cmp	r1, #0
 800ef12:	bfd4      	ite	le
 800ef14:	f1c1 0202 	rsble	r2, r1, #2
 800ef18:	2201      	movgt	r2, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	e7e0      	b.n	800eee0 <_printf_float+0x1a4>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	055a      	lsls	r2, r3, #21
 800ef22:	d407      	bmi.n	800ef34 <_printf_float+0x1f8>
 800ef24:	6923      	ldr	r3, [r4, #16]
 800ef26:	4642      	mov	r2, r8
 800ef28:	4631      	mov	r1, r6
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	47b8      	blx	r7
 800ef2e:	3001      	adds	r0, #1
 800ef30:	d12c      	bne.n	800ef8c <_printf_float+0x250>
 800ef32:	e764      	b.n	800edfe <_printf_float+0xc2>
 800ef34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef38:	f240 80e0 	bls.w	800f0fc <_printf_float+0x3c0>
 800ef3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef40:	2200      	movs	r2, #0
 800ef42:	2300      	movs	r3, #0
 800ef44:	f7f1 fde8 	bl	8000b18 <__aeabi_dcmpeq>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d034      	beq.n	800efb6 <_printf_float+0x27a>
 800ef4c:	4a37      	ldr	r2, [pc, #220]	; (800f02c <_printf_float+0x2f0>)
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4631      	mov	r1, r6
 800ef52:	4628      	mov	r0, r5
 800ef54:	47b8      	blx	r7
 800ef56:	3001      	adds	r0, #1
 800ef58:	f43f af51 	beq.w	800edfe <_printf_float+0xc2>
 800ef5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef60:	429a      	cmp	r2, r3
 800ef62:	db02      	blt.n	800ef6a <_printf_float+0x22e>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	07d8      	lsls	r0, r3, #31
 800ef68:	d510      	bpl.n	800ef8c <_printf_float+0x250>
 800ef6a:	ee18 3a10 	vmov	r3, s16
 800ef6e:	4652      	mov	r2, sl
 800ef70:	4631      	mov	r1, r6
 800ef72:	4628      	mov	r0, r5
 800ef74:	47b8      	blx	r7
 800ef76:	3001      	adds	r0, #1
 800ef78:	f43f af41 	beq.w	800edfe <_printf_float+0xc2>
 800ef7c:	f04f 0800 	mov.w	r8, #0
 800ef80:	f104 091a 	add.w	r9, r4, #26
 800ef84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef86:	3b01      	subs	r3, #1
 800ef88:	4543      	cmp	r3, r8
 800ef8a:	dc09      	bgt.n	800efa0 <_printf_float+0x264>
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	079b      	lsls	r3, r3, #30
 800ef90:	f100 8105 	bmi.w	800f19e <_printf_float+0x462>
 800ef94:	68e0      	ldr	r0, [r4, #12]
 800ef96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef98:	4298      	cmp	r0, r3
 800ef9a:	bfb8      	it	lt
 800ef9c:	4618      	movlt	r0, r3
 800ef9e:	e730      	b.n	800ee02 <_printf_float+0xc6>
 800efa0:	2301      	movs	r3, #1
 800efa2:	464a      	mov	r2, r9
 800efa4:	4631      	mov	r1, r6
 800efa6:	4628      	mov	r0, r5
 800efa8:	47b8      	blx	r7
 800efaa:	3001      	adds	r0, #1
 800efac:	f43f af27 	beq.w	800edfe <_printf_float+0xc2>
 800efb0:	f108 0801 	add.w	r8, r8, #1
 800efb4:	e7e6      	b.n	800ef84 <_printf_float+0x248>
 800efb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	dc39      	bgt.n	800f030 <_printf_float+0x2f4>
 800efbc:	4a1b      	ldr	r2, [pc, #108]	; (800f02c <_printf_float+0x2f0>)
 800efbe:	2301      	movs	r3, #1
 800efc0:	4631      	mov	r1, r6
 800efc2:	4628      	mov	r0, r5
 800efc4:	47b8      	blx	r7
 800efc6:	3001      	adds	r0, #1
 800efc8:	f43f af19 	beq.w	800edfe <_printf_float+0xc2>
 800efcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efd0:	4313      	orrs	r3, r2
 800efd2:	d102      	bne.n	800efda <_printf_float+0x29e>
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	07d9      	lsls	r1, r3, #31
 800efd8:	d5d8      	bpl.n	800ef8c <_printf_float+0x250>
 800efda:	ee18 3a10 	vmov	r3, s16
 800efde:	4652      	mov	r2, sl
 800efe0:	4631      	mov	r1, r6
 800efe2:	4628      	mov	r0, r5
 800efe4:	47b8      	blx	r7
 800efe6:	3001      	adds	r0, #1
 800efe8:	f43f af09 	beq.w	800edfe <_printf_float+0xc2>
 800efec:	f04f 0900 	mov.w	r9, #0
 800eff0:	f104 0a1a 	add.w	sl, r4, #26
 800eff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff6:	425b      	negs	r3, r3
 800eff8:	454b      	cmp	r3, r9
 800effa:	dc01      	bgt.n	800f000 <_printf_float+0x2c4>
 800effc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800effe:	e792      	b.n	800ef26 <_printf_float+0x1ea>
 800f000:	2301      	movs	r3, #1
 800f002:	4652      	mov	r2, sl
 800f004:	4631      	mov	r1, r6
 800f006:	4628      	mov	r0, r5
 800f008:	47b8      	blx	r7
 800f00a:	3001      	adds	r0, #1
 800f00c:	f43f aef7 	beq.w	800edfe <_printf_float+0xc2>
 800f010:	f109 0901 	add.w	r9, r9, #1
 800f014:	e7ee      	b.n	800eff4 <_printf_float+0x2b8>
 800f016:	bf00      	nop
 800f018:	7fefffff 	.word	0x7fefffff
 800f01c:	080121d8 	.word	0x080121d8
 800f020:	080121dc 	.word	0x080121dc
 800f024:	080121e4 	.word	0x080121e4
 800f028:	080121e0 	.word	0x080121e0
 800f02c:	080121e8 	.word	0x080121e8
 800f030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f034:	429a      	cmp	r2, r3
 800f036:	bfa8      	it	ge
 800f038:	461a      	movge	r2, r3
 800f03a:	2a00      	cmp	r2, #0
 800f03c:	4691      	mov	r9, r2
 800f03e:	dc37      	bgt.n	800f0b0 <_printf_float+0x374>
 800f040:	f04f 0b00 	mov.w	fp, #0
 800f044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f048:	f104 021a 	add.w	r2, r4, #26
 800f04c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f04e:	9305      	str	r3, [sp, #20]
 800f050:	eba3 0309 	sub.w	r3, r3, r9
 800f054:	455b      	cmp	r3, fp
 800f056:	dc33      	bgt.n	800f0c0 <_printf_float+0x384>
 800f058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f05c:	429a      	cmp	r2, r3
 800f05e:	db3b      	blt.n	800f0d8 <_printf_float+0x39c>
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	07da      	lsls	r2, r3, #31
 800f064:	d438      	bmi.n	800f0d8 <_printf_float+0x39c>
 800f066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f068:	9a05      	ldr	r2, [sp, #20]
 800f06a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f06c:	1a9a      	subs	r2, r3, r2
 800f06e:	eba3 0901 	sub.w	r9, r3, r1
 800f072:	4591      	cmp	r9, r2
 800f074:	bfa8      	it	ge
 800f076:	4691      	movge	r9, r2
 800f078:	f1b9 0f00 	cmp.w	r9, #0
 800f07c:	dc35      	bgt.n	800f0ea <_printf_float+0x3ae>
 800f07e:	f04f 0800 	mov.w	r8, #0
 800f082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f086:	f104 0a1a 	add.w	sl, r4, #26
 800f08a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f08e:	1a9b      	subs	r3, r3, r2
 800f090:	eba3 0309 	sub.w	r3, r3, r9
 800f094:	4543      	cmp	r3, r8
 800f096:	f77f af79 	ble.w	800ef8c <_printf_float+0x250>
 800f09a:	2301      	movs	r3, #1
 800f09c:	4652      	mov	r2, sl
 800f09e:	4631      	mov	r1, r6
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	47b8      	blx	r7
 800f0a4:	3001      	adds	r0, #1
 800f0a6:	f43f aeaa 	beq.w	800edfe <_printf_float+0xc2>
 800f0aa:	f108 0801 	add.w	r8, r8, #1
 800f0ae:	e7ec      	b.n	800f08a <_printf_float+0x34e>
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4642      	mov	r2, r8
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	47b8      	blx	r7
 800f0ba:	3001      	adds	r0, #1
 800f0bc:	d1c0      	bne.n	800f040 <_printf_float+0x304>
 800f0be:	e69e      	b.n	800edfe <_printf_float+0xc2>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	4631      	mov	r1, r6
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	9205      	str	r2, [sp, #20]
 800f0c8:	47b8      	blx	r7
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	f43f ae97 	beq.w	800edfe <_printf_float+0xc2>
 800f0d0:	9a05      	ldr	r2, [sp, #20]
 800f0d2:	f10b 0b01 	add.w	fp, fp, #1
 800f0d6:	e7b9      	b.n	800f04c <_printf_float+0x310>
 800f0d8:	ee18 3a10 	vmov	r3, s16
 800f0dc:	4652      	mov	r2, sl
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b8      	blx	r7
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	d1be      	bne.n	800f066 <_printf_float+0x32a>
 800f0e8:	e689      	b.n	800edfe <_printf_float+0xc2>
 800f0ea:	9a05      	ldr	r2, [sp, #20]
 800f0ec:	464b      	mov	r3, r9
 800f0ee:	4442      	add	r2, r8
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	47b8      	blx	r7
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	d1c1      	bne.n	800f07e <_printf_float+0x342>
 800f0fa:	e680      	b.n	800edfe <_printf_float+0xc2>
 800f0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0fe:	2a01      	cmp	r2, #1
 800f100:	dc01      	bgt.n	800f106 <_printf_float+0x3ca>
 800f102:	07db      	lsls	r3, r3, #31
 800f104:	d538      	bpl.n	800f178 <_printf_float+0x43c>
 800f106:	2301      	movs	r3, #1
 800f108:	4642      	mov	r2, r8
 800f10a:	4631      	mov	r1, r6
 800f10c:	4628      	mov	r0, r5
 800f10e:	47b8      	blx	r7
 800f110:	3001      	adds	r0, #1
 800f112:	f43f ae74 	beq.w	800edfe <_printf_float+0xc2>
 800f116:	ee18 3a10 	vmov	r3, s16
 800f11a:	4652      	mov	r2, sl
 800f11c:	4631      	mov	r1, r6
 800f11e:	4628      	mov	r0, r5
 800f120:	47b8      	blx	r7
 800f122:	3001      	adds	r0, #1
 800f124:	f43f ae6b 	beq.w	800edfe <_printf_float+0xc2>
 800f128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f12c:	2200      	movs	r2, #0
 800f12e:	2300      	movs	r3, #0
 800f130:	f7f1 fcf2 	bl	8000b18 <__aeabi_dcmpeq>
 800f134:	b9d8      	cbnz	r0, 800f16e <_printf_float+0x432>
 800f136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f138:	f108 0201 	add.w	r2, r8, #1
 800f13c:	3b01      	subs	r3, #1
 800f13e:	4631      	mov	r1, r6
 800f140:	4628      	mov	r0, r5
 800f142:	47b8      	blx	r7
 800f144:	3001      	adds	r0, #1
 800f146:	d10e      	bne.n	800f166 <_printf_float+0x42a>
 800f148:	e659      	b.n	800edfe <_printf_float+0xc2>
 800f14a:	2301      	movs	r3, #1
 800f14c:	4652      	mov	r2, sl
 800f14e:	4631      	mov	r1, r6
 800f150:	4628      	mov	r0, r5
 800f152:	47b8      	blx	r7
 800f154:	3001      	adds	r0, #1
 800f156:	f43f ae52 	beq.w	800edfe <_printf_float+0xc2>
 800f15a:	f108 0801 	add.w	r8, r8, #1
 800f15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f160:	3b01      	subs	r3, #1
 800f162:	4543      	cmp	r3, r8
 800f164:	dcf1      	bgt.n	800f14a <_printf_float+0x40e>
 800f166:	464b      	mov	r3, r9
 800f168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f16c:	e6dc      	b.n	800ef28 <_printf_float+0x1ec>
 800f16e:	f04f 0800 	mov.w	r8, #0
 800f172:	f104 0a1a 	add.w	sl, r4, #26
 800f176:	e7f2      	b.n	800f15e <_printf_float+0x422>
 800f178:	2301      	movs	r3, #1
 800f17a:	4642      	mov	r2, r8
 800f17c:	e7df      	b.n	800f13e <_printf_float+0x402>
 800f17e:	2301      	movs	r3, #1
 800f180:	464a      	mov	r2, r9
 800f182:	4631      	mov	r1, r6
 800f184:	4628      	mov	r0, r5
 800f186:	47b8      	blx	r7
 800f188:	3001      	adds	r0, #1
 800f18a:	f43f ae38 	beq.w	800edfe <_printf_float+0xc2>
 800f18e:	f108 0801 	add.w	r8, r8, #1
 800f192:	68e3      	ldr	r3, [r4, #12]
 800f194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f196:	1a5b      	subs	r3, r3, r1
 800f198:	4543      	cmp	r3, r8
 800f19a:	dcf0      	bgt.n	800f17e <_printf_float+0x442>
 800f19c:	e6fa      	b.n	800ef94 <_printf_float+0x258>
 800f19e:	f04f 0800 	mov.w	r8, #0
 800f1a2:	f104 0919 	add.w	r9, r4, #25
 800f1a6:	e7f4      	b.n	800f192 <_printf_float+0x456>

0800f1a8 <_printf_common>:
 800f1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ac:	4616      	mov	r6, r2
 800f1ae:	4699      	mov	r9, r3
 800f1b0:	688a      	ldr	r2, [r1, #8]
 800f1b2:	690b      	ldr	r3, [r1, #16]
 800f1b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	bfb8      	it	lt
 800f1bc:	4613      	movlt	r3, r2
 800f1be:	6033      	str	r3, [r6, #0]
 800f1c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1c4:	4607      	mov	r7, r0
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	b10a      	cbz	r2, 800f1ce <_printf_common+0x26>
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	6033      	str	r3, [r6, #0]
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	0699      	lsls	r1, r3, #26
 800f1d2:	bf42      	ittt	mi
 800f1d4:	6833      	ldrmi	r3, [r6, #0]
 800f1d6:	3302      	addmi	r3, #2
 800f1d8:	6033      	strmi	r3, [r6, #0]
 800f1da:	6825      	ldr	r5, [r4, #0]
 800f1dc:	f015 0506 	ands.w	r5, r5, #6
 800f1e0:	d106      	bne.n	800f1f0 <_printf_common+0x48>
 800f1e2:	f104 0a19 	add.w	sl, r4, #25
 800f1e6:	68e3      	ldr	r3, [r4, #12]
 800f1e8:	6832      	ldr	r2, [r6, #0]
 800f1ea:	1a9b      	subs	r3, r3, r2
 800f1ec:	42ab      	cmp	r3, r5
 800f1ee:	dc26      	bgt.n	800f23e <_printf_common+0x96>
 800f1f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1f4:	1e13      	subs	r3, r2, #0
 800f1f6:	6822      	ldr	r2, [r4, #0]
 800f1f8:	bf18      	it	ne
 800f1fa:	2301      	movne	r3, #1
 800f1fc:	0692      	lsls	r2, r2, #26
 800f1fe:	d42b      	bmi.n	800f258 <_printf_common+0xb0>
 800f200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f204:	4649      	mov	r1, r9
 800f206:	4638      	mov	r0, r7
 800f208:	47c0      	blx	r8
 800f20a:	3001      	adds	r0, #1
 800f20c:	d01e      	beq.n	800f24c <_printf_common+0xa4>
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	68e5      	ldr	r5, [r4, #12]
 800f212:	6832      	ldr	r2, [r6, #0]
 800f214:	f003 0306 	and.w	r3, r3, #6
 800f218:	2b04      	cmp	r3, #4
 800f21a:	bf08      	it	eq
 800f21c:	1aad      	subeq	r5, r5, r2
 800f21e:	68a3      	ldr	r3, [r4, #8]
 800f220:	6922      	ldr	r2, [r4, #16]
 800f222:	bf0c      	ite	eq
 800f224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f228:	2500      	movne	r5, #0
 800f22a:	4293      	cmp	r3, r2
 800f22c:	bfc4      	itt	gt
 800f22e:	1a9b      	subgt	r3, r3, r2
 800f230:	18ed      	addgt	r5, r5, r3
 800f232:	2600      	movs	r6, #0
 800f234:	341a      	adds	r4, #26
 800f236:	42b5      	cmp	r5, r6
 800f238:	d11a      	bne.n	800f270 <_printf_common+0xc8>
 800f23a:	2000      	movs	r0, #0
 800f23c:	e008      	b.n	800f250 <_printf_common+0xa8>
 800f23e:	2301      	movs	r3, #1
 800f240:	4652      	mov	r2, sl
 800f242:	4649      	mov	r1, r9
 800f244:	4638      	mov	r0, r7
 800f246:	47c0      	blx	r8
 800f248:	3001      	adds	r0, #1
 800f24a:	d103      	bne.n	800f254 <_printf_common+0xac>
 800f24c:	f04f 30ff 	mov.w	r0, #4294967295
 800f250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f254:	3501      	adds	r5, #1
 800f256:	e7c6      	b.n	800f1e6 <_printf_common+0x3e>
 800f258:	18e1      	adds	r1, r4, r3
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	2030      	movs	r0, #48	; 0x30
 800f25e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f262:	4422      	add	r2, r4
 800f264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f26c:	3302      	adds	r3, #2
 800f26e:	e7c7      	b.n	800f200 <_printf_common+0x58>
 800f270:	2301      	movs	r3, #1
 800f272:	4622      	mov	r2, r4
 800f274:	4649      	mov	r1, r9
 800f276:	4638      	mov	r0, r7
 800f278:	47c0      	blx	r8
 800f27a:	3001      	adds	r0, #1
 800f27c:	d0e6      	beq.n	800f24c <_printf_common+0xa4>
 800f27e:	3601      	adds	r6, #1
 800f280:	e7d9      	b.n	800f236 <_printf_common+0x8e>
	...

0800f284 <_printf_i>:
 800f284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f288:	7e0f      	ldrb	r7, [r1, #24]
 800f28a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f28c:	2f78      	cmp	r7, #120	; 0x78
 800f28e:	4691      	mov	r9, r2
 800f290:	4680      	mov	r8, r0
 800f292:	460c      	mov	r4, r1
 800f294:	469a      	mov	sl, r3
 800f296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f29a:	d807      	bhi.n	800f2ac <_printf_i+0x28>
 800f29c:	2f62      	cmp	r7, #98	; 0x62
 800f29e:	d80a      	bhi.n	800f2b6 <_printf_i+0x32>
 800f2a0:	2f00      	cmp	r7, #0
 800f2a2:	f000 80d8 	beq.w	800f456 <_printf_i+0x1d2>
 800f2a6:	2f58      	cmp	r7, #88	; 0x58
 800f2a8:	f000 80a3 	beq.w	800f3f2 <_printf_i+0x16e>
 800f2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2b4:	e03a      	b.n	800f32c <_printf_i+0xa8>
 800f2b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2ba:	2b15      	cmp	r3, #21
 800f2bc:	d8f6      	bhi.n	800f2ac <_printf_i+0x28>
 800f2be:	a101      	add	r1, pc, #4	; (adr r1, 800f2c4 <_printf_i+0x40>)
 800f2c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2c4:	0800f31d 	.word	0x0800f31d
 800f2c8:	0800f331 	.word	0x0800f331
 800f2cc:	0800f2ad 	.word	0x0800f2ad
 800f2d0:	0800f2ad 	.word	0x0800f2ad
 800f2d4:	0800f2ad 	.word	0x0800f2ad
 800f2d8:	0800f2ad 	.word	0x0800f2ad
 800f2dc:	0800f331 	.word	0x0800f331
 800f2e0:	0800f2ad 	.word	0x0800f2ad
 800f2e4:	0800f2ad 	.word	0x0800f2ad
 800f2e8:	0800f2ad 	.word	0x0800f2ad
 800f2ec:	0800f2ad 	.word	0x0800f2ad
 800f2f0:	0800f43d 	.word	0x0800f43d
 800f2f4:	0800f361 	.word	0x0800f361
 800f2f8:	0800f41f 	.word	0x0800f41f
 800f2fc:	0800f2ad 	.word	0x0800f2ad
 800f300:	0800f2ad 	.word	0x0800f2ad
 800f304:	0800f45f 	.word	0x0800f45f
 800f308:	0800f2ad 	.word	0x0800f2ad
 800f30c:	0800f361 	.word	0x0800f361
 800f310:	0800f2ad 	.word	0x0800f2ad
 800f314:	0800f2ad 	.word	0x0800f2ad
 800f318:	0800f427 	.word	0x0800f427
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	1d1a      	adds	r2, r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	602a      	str	r2, [r5, #0]
 800f324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f32c:	2301      	movs	r3, #1
 800f32e:	e0a3      	b.n	800f478 <_printf_i+0x1f4>
 800f330:	6820      	ldr	r0, [r4, #0]
 800f332:	6829      	ldr	r1, [r5, #0]
 800f334:	0606      	lsls	r6, r0, #24
 800f336:	f101 0304 	add.w	r3, r1, #4
 800f33a:	d50a      	bpl.n	800f352 <_printf_i+0xce>
 800f33c:	680e      	ldr	r6, [r1, #0]
 800f33e:	602b      	str	r3, [r5, #0]
 800f340:	2e00      	cmp	r6, #0
 800f342:	da03      	bge.n	800f34c <_printf_i+0xc8>
 800f344:	232d      	movs	r3, #45	; 0x2d
 800f346:	4276      	negs	r6, r6
 800f348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f34c:	485e      	ldr	r0, [pc, #376]	; (800f4c8 <_printf_i+0x244>)
 800f34e:	230a      	movs	r3, #10
 800f350:	e019      	b.n	800f386 <_printf_i+0x102>
 800f352:	680e      	ldr	r6, [r1, #0]
 800f354:	602b      	str	r3, [r5, #0]
 800f356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f35a:	bf18      	it	ne
 800f35c:	b236      	sxthne	r6, r6
 800f35e:	e7ef      	b.n	800f340 <_printf_i+0xbc>
 800f360:	682b      	ldr	r3, [r5, #0]
 800f362:	6820      	ldr	r0, [r4, #0]
 800f364:	1d19      	adds	r1, r3, #4
 800f366:	6029      	str	r1, [r5, #0]
 800f368:	0601      	lsls	r1, r0, #24
 800f36a:	d501      	bpl.n	800f370 <_printf_i+0xec>
 800f36c:	681e      	ldr	r6, [r3, #0]
 800f36e:	e002      	b.n	800f376 <_printf_i+0xf2>
 800f370:	0646      	lsls	r6, r0, #25
 800f372:	d5fb      	bpl.n	800f36c <_printf_i+0xe8>
 800f374:	881e      	ldrh	r6, [r3, #0]
 800f376:	4854      	ldr	r0, [pc, #336]	; (800f4c8 <_printf_i+0x244>)
 800f378:	2f6f      	cmp	r7, #111	; 0x6f
 800f37a:	bf0c      	ite	eq
 800f37c:	2308      	moveq	r3, #8
 800f37e:	230a      	movne	r3, #10
 800f380:	2100      	movs	r1, #0
 800f382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f386:	6865      	ldr	r5, [r4, #4]
 800f388:	60a5      	str	r5, [r4, #8]
 800f38a:	2d00      	cmp	r5, #0
 800f38c:	bfa2      	ittt	ge
 800f38e:	6821      	ldrge	r1, [r4, #0]
 800f390:	f021 0104 	bicge.w	r1, r1, #4
 800f394:	6021      	strge	r1, [r4, #0]
 800f396:	b90e      	cbnz	r6, 800f39c <_printf_i+0x118>
 800f398:	2d00      	cmp	r5, #0
 800f39a:	d04d      	beq.n	800f438 <_printf_i+0x1b4>
 800f39c:	4615      	mov	r5, r2
 800f39e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3a2:	fb03 6711 	mls	r7, r3, r1, r6
 800f3a6:	5dc7      	ldrb	r7, [r0, r7]
 800f3a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3ac:	4637      	mov	r7, r6
 800f3ae:	42bb      	cmp	r3, r7
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	d9f4      	bls.n	800f39e <_printf_i+0x11a>
 800f3b4:	2b08      	cmp	r3, #8
 800f3b6:	d10b      	bne.n	800f3d0 <_printf_i+0x14c>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	07de      	lsls	r6, r3, #31
 800f3bc:	d508      	bpl.n	800f3d0 <_printf_i+0x14c>
 800f3be:	6923      	ldr	r3, [r4, #16]
 800f3c0:	6861      	ldr	r1, [r4, #4]
 800f3c2:	4299      	cmp	r1, r3
 800f3c4:	bfde      	ittt	le
 800f3c6:	2330      	movle	r3, #48	; 0x30
 800f3c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f3d0:	1b52      	subs	r2, r2, r5
 800f3d2:	6122      	str	r2, [r4, #16]
 800f3d4:	f8cd a000 	str.w	sl, [sp]
 800f3d8:	464b      	mov	r3, r9
 800f3da:	aa03      	add	r2, sp, #12
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4640      	mov	r0, r8
 800f3e0:	f7ff fee2 	bl	800f1a8 <_printf_common>
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d14c      	bne.n	800f482 <_printf_i+0x1fe>
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	b004      	add	sp, #16
 800f3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f2:	4835      	ldr	r0, [pc, #212]	; (800f4c8 <_printf_i+0x244>)
 800f3f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f3f8:	6829      	ldr	r1, [r5, #0]
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f400:	6029      	str	r1, [r5, #0]
 800f402:	061d      	lsls	r5, r3, #24
 800f404:	d514      	bpl.n	800f430 <_printf_i+0x1ac>
 800f406:	07df      	lsls	r7, r3, #31
 800f408:	bf44      	itt	mi
 800f40a:	f043 0320 	orrmi.w	r3, r3, #32
 800f40e:	6023      	strmi	r3, [r4, #0]
 800f410:	b91e      	cbnz	r6, 800f41a <_printf_i+0x196>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	f023 0320 	bic.w	r3, r3, #32
 800f418:	6023      	str	r3, [r4, #0]
 800f41a:	2310      	movs	r3, #16
 800f41c:	e7b0      	b.n	800f380 <_printf_i+0xfc>
 800f41e:	6823      	ldr	r3, [r4, #0]
 800f420:	f043 0320 	orr.w	r3, r3, #32
 800f424:	6023      	str	r3, [r4, #0]
 800f426:	2378      	movs	r3, #120	; 0x78
 800f428:	4828      	ldr	r0, [pc, #160]	; (800f4cc <_printf_i+0x248>)
 800f42a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f42e:	e7e3      	b.n	800f3f8 <_printf_i+0x174>
 800f430:	0659      	lsls	r1, r3, #25
 800f432:	bf48      	it	mi
 800f434:	b2b6      	uxthmi	r6, r6
 800f436:	e7e6      	b.n	800f406 <_printf_i+0x182>
 800f438:	4615      	mov	r5, r2
 800f43a:	e7bb      	b.n	800f3b4 <_printf_i+0x130>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	6826      	ldr	r6, [r4, #0]
 800f440:	6961      	ldr	r1, [r4, #20]
 800f442:	1d18      	adds	r0, r3, #4
 800f444:	6028      	str	r0, [r5, #0]
 800f446:	0635      	lsls	r5, r6, #24
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	d501      	bpl.n	800f450 <_printf_i+0x1cc>
 800f44c:	6019      	str	r1, [r3, #0]
 800f44e:	e002      	b.n	800f456 <_printf_i+0x1d2>
 800f450:	0670      	lsls	r0, r6, #25
 800f452:	d5fb      	bpl.n	800f44c <_printf_i+0x1c8>
 800f454:	8019      	strh	r1, [r3, #0]
 800f456:	2300      	movs	r3, #0
 800f458:	6123      	str	r3, [r4, #16]
 800f45a:	4615      	mov	r5, r2
 800f45c:	e7ba      	b.n	800f3d4 <_printf_i+0x150>
 800f45e:	682b      	ldr	r3, [r5, #0]
 800f460:	1d1a      	adds	r2, r3, #4
 800f462:	602a      	str	r2, [r5, #0]
 800f464:	681d      	ldr	r5, [r3, #0]
 800f466:	6862      	ldr	r2, [r4, #4]
 800f468:	2100      	movs	r1, #0
 800f46a:	4628      	mov	r0, r5
 800f46c:	f7f0 fee0 	bl	8000230 <memchr>
 800f470:	b108      	cbz	r0, 800f476 <_printf_i+0x1f2>
 800f472:	1b40      	subs	r0, r0, r5
 800f474:	6060      	str	r0, [r4, #4]
 800f476:	6863      	ldr	r3, [r4, #4]
 800f478:	6123      	str	r3, [r4, #16]
 800f47a:	2300      	movs	r3, #0
 800f47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f480:	e7a8      	b.n	800f3d4 <_printf_i+0x150>
 800f482:	6923      	ldr	r3, [r4, #16]
 800f484:	462a      	mov	r2, r5
 800f486:	4649      	mov	r1, r9
 800f488:	4640      	mov	r0, r8
 800f48a:	47d0      	blx	sl
 800f48c:	3001      	adds	r0, #1
 800f48e:	d0ab      	beq.n	800f3e8 <_printf_i+0x164>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	079b      	lsls	r3, r3, #30
 800f494:	d413      	bmi.n	800f4be <_printf_i+0x23a>
 800f496:	68e0      	ldr	r0, [r4, #12]
 800f498:	9b03      	ldr	r3, [sp, #12]
 800f49a:	4298      	cmp	r0, r3
 800f49c:	bfb8      	it	lt
 800f49e:	4618      	movlt	r0, r3
 800f4a0:	e7a4      	b.n	800f3ec <_printf_i+0x168>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4632      	mov	r2, r6
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	4640      	mov	r0, r8
 800f4aa:	47d0      	blx	sl
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d09b      	beq.n	800f3e8 <_printf_i+0x164>
 800f4b0:	3501      	adds	r5, #1
 800f4b2:	68e3      	ldr	r3, [r4, #12]
 800f4b4:	9903      	ldr	r1, [sp, #12]
 800f4b6:	1a5b      	subs	r3, r3, r1
 800f4b8:	42ab      	cmp	r3, r5
 800f4ba:	dcf2      	bgt.n	800f4a2 <_printf_i+0x21e>
 800f4bc:	e7eb      	b.n	800f496 <_printf_i+0x212>
 800f4be:	2500      	movs	r5, #0
 800f4c0:	f104 0619 	add.w	r6, r4, #25
 800f4c4:	e7f5      	b.n	800f4b2 <_printf_i+0x22e>
 800f4c6:	bf00      	nop
 800f4c8:	080121ea 	.word	0x080121ea
 800f4cc:	080121fb 	.word	0x080121fb

0800f4d0 <iprintf>:
 800f4d0:	b40f      	push	{r0, r1, r2, r3}
 800f4d2:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <iprintf+0x2c>)
 800f4d4:	b513      	push	{r0, r1, r4, lr}
 800f4d6:	681c      	ldr	r4, [r3, #0]
 800f4d8:	b124      	cbz	r4, 800f4e4 <iprintf+0x14>
 800f4da:	69a3      	ldr	r3, [r4, #24]
 800f4dc:	b913      	cbnz	r3, 800f4e4 <iprintf+0x14>
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f001 f9be 	bl	8010860 <__sinit>
 800f4e4:	ab05      	add	r3, sp, #20
 800f4e6:	9a04      	ldr	r2, [sp, #16]
 800f4e8:	68a1      	ldr	r1, [r4, #8]
 800f4ea:	9301      	str	r3, [sp, #4]
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f001 ff6d 	bl	80113cc <_vfiprintf_r>
 800f4f2:	b002      	add	sp, #8
 800f4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4f8:	b004      	add	sp, #16
 800f4fa:	4770      	bx	lr
 800f4fc:	20000014 	.word	0x20000014

0800f500 <putchar>:
 800f500:	4b09      	ldr	r3, [pc, #36]	; (800f528 <putchar+0x28>)
 800f502:	b513      	push	{r0, r1, r4, lr}
 800f504:	681c      	ldr	r4, [r3, #0]
 800f506:	4601      	mov	r1, r0
 800f508:	b134      	cbz	r4, 800f518 <putchar+0x18>
 800f50a:	69a3      	ldr	r3, [r4, #24]
 800f50c:	b923      	cbnz	r3, 800f518 <putchar+0x18>
 800f50e:	9001      	str	r0, [sp, #4]
 800f510:	4620      	mov	r0, r4
 800f512:	f001 f9a5 	bl	8010860 <__sinit>
 800f516:	9901      	ldr	r1, [sp, #4]
 800f518:	68a2      	ldr	r2, [r4, #8]
 800f51a:	4620      	mov	r0, r4
 800f51c:	b002      	add	sp, #8
 800f51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f522:	f002 b883 	b.w	801162c <_putc_r>
 800f526:	bf00      	nop
 800f528:	20000014 	.word	0x20000014

0800f52c <_puts_r>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	460e      	mov	r6, r1
 800f530:	4605      	mov	r5, r0
 800f532:	b118      	cbz	r0, 800f53c <_puts_r+0x10>
 800f534:	6983      	ldr	r3, [r0, #24]
 800f536:	b90b      	cbnz	r3, 800f53c <_puts_r+0x10>
 800f538:	f001 f992 	bl	8010860 <__sinit>
 800f53c:	69ab      	ldr	r3, [r5, #24]
 800f53e:	68ac      	ldr	r4, [r5, #8]
 800f540:	b913      	cbnz	r3, 800f548 <_puts_r+0x1c>
 800f542:	4628      	mov	r0, r5
 800f544:	f001 f98c 	bl	8010860 <__sinit>
 800f548:	4b2c      	ldr	r3, [pc, #176]	; (800f5fc <_puts_r+0xd0>)
 800f54a:	429c      	cmp	r4, r3
 800f54c:	d120      	bne.n	800f590 <_puts_r+0x64>
 800f54e:	686c      	ldr	r4, [r5, #4]
 800f550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f552:	07db      	lsls	r3, r3, #31
 800f554:	d405      	bmi.n	800f562 <_puts_r+0x36>
 800f556:	89a3      	ldrh	r3, [r4, #12]
 800f558:	0598      	lsls	r0, r3, #22
 800f55a:	d402      	bmi.n	800f562 <_puts_r+0x36>
 800f55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f55e:	f001 fa22 	bl	80109a6 <__retarget_lock_acquire_recursive>
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	0719      	lsls	r1, r3, #28
 800f566:	d51d      	bpl.n	800f5a4 <_puts_r+0x78>
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	b1db      	cbz	r3, 800f5a4 <_puts_r+0x78>
 800f56c:	3e01      	subs	r6, #1
 800f56e:	68a3      	ldr	r3, [r4, #8]
 800f570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f574:	3b01      	subs	r3, #1
 800f576:	60a3      	str	r3, [r4, #8]
 800f578:	bb39      	cbnz	r1, 800f5ca <_puts_r+0x9e>
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	da38      	bge.n	800f5f0 <_puts_r+0xc4>
 800f57e:	4622      	mov	r2, r4
 800f580:	210a      	movs	r1, #10
 800f582:	4628      	mov	r0, r5
 800f584:	f000 f916 	bl	800f7b4 <__swbuf_r>
 800f588:	3001      	adds	r0, #1
 800f58a:	d011      	beq.n	800f5b0 <_puts_r+0x84>
 800f58c:	250a      	movs	r5, #10
 800f58e:	e011      	b.n	800f5b4 <_puts_r+0x88>
 800f590:	4b1b      	ldr	r3, [pc, #108]	; (800f600 <_puts_r+0xd4>)
 800f592:	429c      	cmp	r4, r3
 800f594:	d101      	bne.n	800f59a <_puts_r+0x6e>
 800f596:	68ac      	ldr	r4, [r5, #8]
 800f598:	e7da      	b.n	800f550 <_puts_r+0x24>
 800f59a:	4b1a      	ldr	r3, [pc, #104]	; (800f604 <_puts_r+0xd8>)
 800f59c:	429c      	cmp	r4, r3
 800f59e:	bf08      	it	eq
 800f5a0:	68ec      	ldreq	r4, [r5, #12]
 800f5a2:	e7d5      	b.n	800f550 <_puts_r+0x24>
 800f5a4:	4621      	mov	r1, r4
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	f000 f956 	bl	800f858 <__swsetup_r>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d0dd      	beq.n	800f56c <_puts_r+0x40>
 800f5b0:	f04f 35ff 	mov.w	r5, #4294967295
 800f5b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5b6:	07da      	lsls	r2, r3, #31
 800f5b8:	d405      	bmi.n	800f5c6 <_puts_r+0x9a>
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	059b      	lsls	r3, r3, #22
 800f5be:	d402      	bmi.n	800f5c6 <_puts_r+0x9a>
 800f5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c2:	f001 f9f1 	bl	80109a8 <__retarget_lock_release_recursive>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	da04      	bge.n	800f5d8 <_puts_r+0xac>
 800f5ce:	69a2      	ldr	r2, [r4, #24]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	dc06      	bgt.n	800f5e2 <_puts_r+0xb6>
 800f5d4:	290a      	cmp	r1, #10
 800f5d6:	d004      	beq.n	800f5e2 <_puts_r+0xb6>
 800f5d8:	6823      	ldr	r3, [r4, #0]
 800f5da:	1c5a      	adds	r2, r3, #1
 800f5dc:	6022      	str	r2, [r4, #0]
 800f5de:	7019      	strb	r1, [r3, #0]
 800f5e0:	e7c5      	b.n	800f56e <_puts_r+0x42>
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	f000 f8e5 	bl	800f7b4 <__swbuf_r>
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	d1bf      	bne.n	800f56e <_puts_r+0x42>
 800f5ee:	e7df      	b.n	800f5b0 <_puts_r+0x84>
 800f5f0:	6823      	ldr	r3, [r4, #0]
 800f5f2:	250a      	movs	r5, #10
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	6022      	str	r2, [r4, #0]
 800f5f8:	701d      	strb	r5, [r3, #0]
 800f5fa:	e7db      	b.n	800f5b4 <_puts_r+0x88>
 800f5fc:	080122bc 	.word	0x080122bc
 800f600:	080122dc 	.word	0x080122dc
 800f604:	0801229c 	.word	0x0801229c

0800f608 <puts>:
 800f608:	4b02      	ldr	r3, [pc, #8]	; (800f614 <puts+0xc>)
 800f60a:	4601      	mov	r1, r0
 800f60c:	6818      	ldr	r0, [r3, #0]
 800f60e:	f7ff bf8d 	b.w	800f52c <_puts_r>
 800f612:	bf00      	nop
 800f614:	20000014 	.word	0x20000014

0800f618 <setbuf>:
 800f618:	2900      	cmp	r1, #0
 800f61a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f61e:	bf0c      	ite	eq
 800f620:	2202      	moveq	r2, #2
 800f622:	2200      	movne	r2, #0
 800f624:	f000 b800 	b.w	800f628 <setvbuf>

0800f628 <setvbuf>:
 800f628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f62c:	461d      	mov	r5, r3
 800f62e:	4b5d      	ldr	r3, [pc, #372]	; (800f7a4 <setvbuf+0x17c>)
 800f630:	681f      	ldr	r7, [r3, #0]
 800f632:	4604      	mov	r4, r0
 800f634:	460e      	mov	r6, r1
 800f636:	4690      	mov	r8, r2
 800f638:	b127      	cbz	r7, 800f644 <setvbuf+0x1c>
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	b913      	cbnz	r3, 800f644 <setvbuf+0x1c>
 800f63e:	4638      	mov	r0, r7
 800f640:	f001 f90e 	bl	8010860 <__sinit>
 800f644:	4b58      	ldr	r3, [pc, #352]	; (800f7a8 <setvbuf+0x180>)
 800f646:	429c      	cmp	r4, r3
 800f648:	d167      	bne.n	800f71a <setvbuf+0xf2>
 800f64a:	687c      	ldr	r4, [r7, #4]
 800f64c:	f1b8 0f02 	cmp.w	r8, #2
 800f650:	d006      	beq.n	800f660 <setvbuf+0x38>
 800f652:	f1b8 0f01 	cmp.w	r8, #1
 800f656:	f200 809f 	bhi.w	800f798 <setvbuf+0x170>
 800f65a:	2d00      	cmp	r5, #0
 800f65c:	f2c0 809c 	blt.w	800f798 <setvbuf+0x170>
 800f660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f662:	07db      	lsls	r3, r3, #31
 800f664:	d405      	bmi.n	800f672 <setvbuf+0x4a>
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	0598      	lsls	r0, r3, #22
 800f66a:	d402      	bmi.n	800f672 <setvbuf+0x4a>
 800f66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f66e:	f001 f99a 	bl	80109a6 <__retarget_lock_acquire_recursive>
 800f672:	4621      	mov	r1, r4
 800f674:	4638      	mov	r0, r7
 800f676:	f001 f85f 	bl	8010738 <_fflush_r>
 800f67a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f67c:	b141      	cbz	r1, 800f690 <setvbuf+0x68>
 800f67e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f682:	4299      	cmp	r1, r3
 800f684:	d002      	beq.n	800f68c <setvbuf+0x64>
 800f686:	4638      	mov	r0, r7
 800f688:	f001 fd96 	bl	80111b8 <_free_r>
 800f68c:	2300      	movs	r3, #0
 800f68e:	6363      	str	r3, [r4, #52]	; 0x34
 800f690:	2300      	movs	r3, #0
 800f692:	61a3      	str	r3, [r4, #24]
 800f694:	6063      	str	r3, [r4, #4]
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	0619      	lsls	r1, r3, #24
 800f69a:	d503      	bpl.n	800f6a4 <setvbuf+0x7c>
 800f69c:	6921      	ldr	r1, [r4, #16]
 800f69e:	4638      	mov	r0, r7
 800f6a0:	f001 fd8a 	bl	80111b8 <_free_r>
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f6aa:	f023 0303 	bic.w	r3, r3, #3
 800f6ae:	f1b8 0f02 	cmp.w	r8, #2
 800f6b2:	81a3      	strh	r3, [r4, #12]
 800f6b4:	d06c      	beq.n	800f790 <setvbuf+0x168>
 800f6b6:	ab01      	add	r3, sp, #4
 800f6b8:	466a      	mov	r2, sp
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	4638      	mov	r0, r7
 800f6be:	f001 f974 	bl	80109aa <__swhatbuf_r>
 800f6c2:	89a3      	ldrh	r3, [r4, #12]
 800f6c4:	4318      	orrs	r0, r3
 800f6c6:	81a0      	strh	r0, [r4, #12]
 800f6c8:	2d00      	cmp	r5, #0
 800f6ca:	d130      	bne.n	800f72e <setvbuf+0x106>
 800f6cc:	9d00      	ldr	r5, [sp, #0]
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f001 f9d0 	bl	8010a74 <malloc>
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d155      	bne.n	800f786 <setvbuf+0x15e>
 800f6da:	f8dd 9000 	ldr.w	r9, [sp]
 800f6de:	45a9      	cmp	r9, r5
 800f6e0:	d14a      	bne.n	800f778 <setvbuf+0x150>
 800f6e2:	f04f 35ff 	mov.w	r5, #4294967295
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	60a2      	str	r2, [r4, #8]
 800f6ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f6ee:	6022      	str	r2, [r4, #0]
 800f6f0:	6122      	str	r2, [r4, #16]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f8:	6162      	str	r2, [r4, #20]
 800f6fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6fc:	f043 0302 	orr.w	r3, r3, #2
 800f700:	07d2      	lsls	r2, r2, #31
 800f702:	81a3      	strh	r3, [r4, #12]
 800f704:	d405      	bmi.n	800f712 <setvbuf+0xea>
 800f706:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f70a:	d102      	bne.n	800f712 <setvbuf+0xea>
 800f70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f70e:	f001 f94b 	bl	80109a8 <__retarget_lock_release_recursive>
 800f712:	4628      	mov	r0, r5
 800f714:	b003      	add	sp, #12
 800f716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f71a:	4b24      	ldr	r3, [pc, #144]	; (800f7ac <setvbuf+0x184>)
 800f71c:	429c      	cmp	r4, r3
 800f71e:	d101      	bne.n	800f724 <setvbuf+0xfc>
 800f720:	68bc      	ldr	r4, [r7, #8]
 800f722:	e793      	b.n	800f64c <setvbuf+0x24>
 800f724:	4b22      	ldr	r3, [pc, #136]	; (800f7b0 <setvbuf+0x188>)
 800f726:	429c      	cmp	r4, r3
 800f728:	bf08      	it	eq
 800f72a:	68fc      	ldreq	r4, [r7, #12]
 800f72c:	e78e      	b.n	800f64c <setvbuf+0x24>
 800f72e:	2e00      	cmp	r6, #0
 800f730:	d0cd      	beq.n	800f6ce <setvbuf+0xa6>
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	b913      	cbnz	r3, 800f73c <setvbuf+0x114>
 800f736:	4638      	mov	r0, r7
 800f738:	f001 f892 	bl	8010860 <__sinit>
 800f73c:	f1b8 0f01 	cmp.w	r8, #1
 800f740:	bf08      	it	eq
 800f742:	89a3      	ldrheq	r3, [r4, #12]
 800f744:	6026      	str	r6, [r4, #0]
 800f746:	bf04      	itt	eq
 800f748:	f043 0301 	orreq.w	r3, r3, #1
 800f74c:	81a3      	strheq	r3, [r4, #12]
 800f74e:	89a2      	ldrh	r2, [r4, #12]
 800f750:	f012 0308 	ands.w	r3, r2, #8
 800f754:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f758:	d01c      	beq.n	800f794 <setvbuf+0x16c>
 800f75a:	07d3      	lsls	r3, r2, #31
 800f75c:	bf41      	itttt	mi
 800f75e:	2300      	movmi	r3, #0
 800f760:	426d      	negmi	r5, r5
 800f762:	60a3      	strmi	r3, [r4, #8]
 800f764:	61a5      	strmi	r5, [r4, #24]
 800f766:	bf58      	it	pl
 800f768:	60a5      	strpl	r5, [r4, #8]
 800f76a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f76c:	f015 0501 	ands.w	r5, r5, #1
 800f770:	d115      	bne.n	800f79e <setvbuf+0x176>
 800f772:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f776:	e7c8      	b.n	800f70a <setvbuf+0xe2>
 800f778:	4648      	mov	r0, r9
 800f77a:	f001 f97b 	bl	8010a74 <malloc>
 800f77e:	4606      	mov	r6, r0
 800f780:	2800      	cmp	r0, #0
 800f782:	d0ae      	beq.n	800f6e2 <setvbuf+0xba>
 800f784:	464d      	mov	r5, r9
 800f786:	89a3      	ldrh	r3, [r4, #12]
 800f788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f78c:	81a3      	strh	r3, [r4, #12]
 800f78e:	e7d0      	b.n	800f732 <setvbuf+0x10a>
 800f790:	2500      	movs	r5, #0
 800f792:	e7a8      	b.n	800f6e6 <setvbuf+0xbe>
 800f794:	60a3      	str	r3, [r4, #8]
 800f796:	e7e8      	b.n	800f76a <setvbuf+0x142>
 800f798:	f04f 35ff 	mov.w	r5, #4294967295
 800f79c:	e7b9      	b.n	800f712 <setvbuf+0xea>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	e7b7      	b.n	800f712 <setvbuf+0xea>
 800f7a2:	bf00      	nop
 800f7a4:	20000014 	.word	0x20000014
 800f7a8:	080122bc 	.word	0x080122bc
 800f7ac:	080122dc 	.word	0x080122dc
 800f7b0:	0801229c 	.word	0x0801229c

0800f7b4 <__swbuf_r>:
 800f7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b6:	460e      	mov	r6, r1
 800f7b8:	4614      	mov	r4, r2
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	b118      	cbz	r0, 800f7c6 <__swbuf_r+0x12>
 800f7be:	6983      	ldr	r3, [r0, #24]
 800f7c0:	b90b      	cbnz	r3, 800f7c6 <__swbuf_r+0x12>
 800f7c2:	f001 f84d 	bl	8010860 <__sinit>
 800f7c6:	4b21      	ldr	r3, [pc, #132]	; (800f84c <__swbuf_r+0x98>)
 800f7c8:	429c      	cmp	r4, r3
 800f7ca:	d12b      	bne.n	800f824 <__swbuf_r+0x70>
 800f7cc:	686c      	ldr	r4, [r5, #4]
 800f7ce:	69a3      	ldr	r3, [r4, #24]
 800f7d0:	60a3      	str	r3, [r4, #8]
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	071a      	lsls	r2, r3, #28
 800f7d6:	d52f      	bpl.n	800f838 <__swbuf_r+0x84>
 800f7d8:	6923      	ldr	r3, [r4, #16]
 800f7da:	b36b      	cbz	r3, 800f838 <__swbuf_r+0x84>
 800f7dc:	6923      	ldr	r3, [r4, #16]
 800f7de:	6820      	ldr	r0, [r4, #0]
 800f7e0:	1ac0      	subs	r0, r0, r3
 800f7e2:	6963      	ldr	r3, [r4, #20]
 800f7e4:	b2f6      	uxtb	r6, r6
 800f7e6:	4283      	cmp	r3, r0
 800f7e8:	4637      	mov	r7, r6
 800f7ea:	dc04      	bgt.n	800f7f6 <__swbuf_r+0x42>
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f000 ffa2 	bl	8010738 <_fflush_r>
 800f7f4:	bb30      	cbnz	r0, 800f844 <__swbuf_r+0x90>
 800f7f6:	68a3      	ldr	r3, [r4, #8]
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	60a3      	str	r3, [r4, #8]
 800f7fc:	6823      	ldr	r3, [r4, #0]
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	6022      	str	r2, [r4, #0]
 800f802:	701e      	strb	r6, [r3, #0]
 800f804:	6963      	ldr	r3, [r4, #20]
 800f806:	3001      	adds	r0, #1
 800f808:	4283      	cmp	r3, r0
 800f80a:	d004      	beq.n	800f816 <__swbuf_r+0x62>
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	07db      	lsls	r3, r3, #31
 800f810:	d506      	bpl.n	800f820 <__swbuf_r+0x6c>
 800f812:	2e0a      	cmp	r6, #10
 800f814:	d104      	bne.n	800f820 <__swbuf_r+0x6c>
 800f816:	4621      	mov	r1, r4
 800f818:	4628      	mov	r0, r5
 800f81a:	f000 ff8d 	bl	8010738 <_fflush_r>
 800f81e:	b988      	cbnz	r0, 800f844 <__swbuf_r+0x90>
 800f820:	4638      	mov	r0, r7
 800f822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f824:	4b0a      	ldr	r3, [pc, #40]	; (800f850 <__swbuf_r+0x9c>)
 800f826:	429c      	cmp	r4, r3
 800f828:	d101      	bne.n	800f82e <__swbuf_r+0x7a>
 800f82a:	68ac      	ldr	r4, [r5, #8]
 800f82c:	e7cf      	b.n	800f7ce <__swbuf_r+0x1a>
 800f82e:	4b09      	ldr	r3, [pc, #36]	; (800f854 <__swbuf_r+0xa0>)
 800f830:	429c      	cmp	r4, r3
 800f832:	bf08      	it	eq
 800f834:	68ec      	ldreq	r4, [r5, #12]
 800f836:	e7ca      	b.n	800f7ce <__swbuf_r+0x1a>
 800f838:	4621      	mov	r1, r4
 800f83a:	4628      	mov	r0, r5
 800f83c:	f000 f80c 	bl	800f858 <__swsetup_r>
 800f840:	2800      	cmp	r0, #0
 800f842:	d0cb      	beq.n	800f7dc <__swbuf_r+0x28>
 800f844:	f04f 37ff 	mov.w	r7, #4294967295
 800f848:	e7ea      	b.n	800f820 <__swbuf_r+0x6c>
 800f84a:	bf00      	nop
 800f84c:	080122bc 	.word	0x080122bc
 800f850:	080122dc 	.word	0x080122dc
 800f854:	0801229c 	.word	0x0801229c

0800f858 <__swsetup_r>:
 800f858:	4b32      	ldr	r3, [pc, #200]	; (800f924 <__swsetup_r+0xcc>)
 800f85a:	b570      	push	{r4, r5, r6, lr}
 800f85c:	681d      	ldr	r5, [r3, #0]
 800f85e:	4606      	mov	r6, r0
 800f860:	460c      	mov	r4, r1
 800f862:	b125      	cbz	r5, 800f86e <__swsetup_r+0x16>
 800f864:	69ab      	ldr	r3, [r5, #24]
 800f866:	b913      	cbnz	r3, 800f86e <__swsetup_r+0x16>
 800f868:	4628      	mov	r0, r5
 800f86a:	f000 fff9 	bl	8010860 <__sinit>
 800f86e:	4b2e      	ldr	r3, [pc, #184]	; (800f928 <__swsetup_r+0xd0>)
 800f870:	429c      	cmp	r4, r3
 800f872:	d10f      	bne.n	800f894 <__swsetup_r+0x3c>
 800f874:	686c      	ldr	r4, [r5, #4]
 800f876:	89a3      	ldrh	r3, [r4, #12]
 800f878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f87c:	0719      	lsls	r1, r3, #28
 800f87e:	d42c      	bmi.n	800f8da <__swsetup_r+0x82>
 800f880:	06dd      	lsls	r5, r3, #27
 800f882:	d411      	bmi.n	800f8a8 <__swsetup_r+0x50>
 800f884:	2309      	movs	r3, #9
 800f886:	6033      	str	r3, [r6, #0]
 800f888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f88c:	81a3      	strh	r3, [r4, #12]
 800f88e:	f04f 30ff 	mov.w	r0, #4294967295
 800f892:	e03e      	b.n	800f912 <__swsetup_r+0xba>
 800f894:	4b25      	ldr	r3, [pc, #148]	; (800f92c <__swsetup_r+0xd4>)
 800f896:	429c      	cmp	r4, r3
 800f898:	d101      	bne.n	800f89e <__swsetup_r+0x46>
 800f89a:	68ac      	ldr	r4, [r5, #8]
 800f89c:	e7eb      	b.n	800f876 <__swsetup_r+0x1e>
 800f89e:	4b24      	ldr	r3, [pc, #144]	; (800f930 <__swsetup_r+0xd8>)
 800f8a0:	429c      	cmp	r4, r3
 800f8a2:	bf08      	it	eq
 800f8a4:	68ec      	ldreq	r4, [r5, #12]
 800f8a6:	e7e6      	b.n	800f876 <__swsetup_r+0x1e>
 800f8a8:	0758      	lsls	r0, r3, #29
 800f8aa:	d512      	bpl.n	800f8d2 <__swsetup_r+0x7a>
 800f8ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8ae:	b141      	cbz	r1, 800f8c2 <__swsetup_r+0x6a>
 800f8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8b4:	4299      	cmp	r1, r3
 800f8b6:	d002      	beq.n	800f8be <__swsetup_r+0x66>
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f001 fc7d 	bl	80111b8 <_free_r>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	6363      	str	r3, [r4, #52]	; 0x34
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	6063      	str	r3, [r4, #4]
 800f8ce:	6923      	ldr	r3, [r4, #16]
 800f8d0:	6023      	str	r3, [r4, #0]
 800f8d2:	89a3      	ldrh	r3, [r4, #12]
 800f8d4:	f043 0308 	orr.w	r3, r3, #8
 800f8d8:	81a3      	strh	r3, [r4, #12]
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	b94b      	cbnz	r3, 800f8f2 <__swsetup_r+0x9a>
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8e8:	d003      	beq.n	800f8f2 <__swsetup_r+0x9a>
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	f001 f881 	bl	80109f4 <__smakebuf_r>
 800f8f2:	89a0      	ldrh	r0, [r4, #12]
 800f8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8f8:	f010 0301 	ands.w	r3, r0, #1
 800f8fc:	d00a      	beq.n	800f914 <__swsetup_r+0xbc>
 800f8fe:	2300      	movs	r3, #0
 800f900:	60a3      	str	r3, [r4, #8]
 800f902:	6963      	ldr	r3, [r4, #20]
 800f904:	425b      	negs	r3, r3
 800f906:	61a3      	str	r3, [r4, #24]
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	b943      	cbnz	r3, 800f91e <__swsetup_r+0xc6>
 800f90c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f910:	d1ba      	bne.n	800f888 <__swsetup_r+0x30>
 800f912:	bd70      	pop	{r4, r5, r6, pc}
 800f914:	0781      	lsls	r1, r0, #30
 800f916:	bf58      	it	pl
 800f918:	6963      	ldrpl	r3, [r4, #20]
 800f91a:	60a3      	str	r3, [r4, #8]
 800f91c:	e7f4      	b.n	800f908 <__swsetup_r+0xb0>
 800f91e:	2000      	movs	r0, #0
 800f920:	e7f7      	b.n	800f912 <__swsetup_r+0xba>
 800f922:	bf00      	nop
 800f924:	20000014 	.word	0x20000014
 800f928:	080122bc 	.word	0x080122bc
 800f92c:	080122dc 	.word	0x080122dc
 800f930:	0801229c 	.word	0x0801229c

0800f934 <quorem>:
 800f934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f938:	6903      	ldr	r3, [r0, #16]
 800f93a:	690c      	ldr	r4, [r1, #16]
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	4607      	mov	r7, r0
 800f940:	f2c0 8081 	blt.w	800fa46 <quorem+0x112>
 800f944:	3c01      	subs	r4, #1
 800f946:	f101 0814 	add.w	r8, r1, #20
 800f94a:	f100 0514 	add.w	r5, r0, #20
 800f94e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f952:	9301      	str	r3, [sp, #4]
 800f954:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f95c:	3301      	adds	r3, #1
 800f95e:	429a      	cmp	r2, r3
 800f960:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f964:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f968:	fbb2 f6f3 	udiv	r6, r2, r3
 800f96c:	d331      	bcc.n	800f9d2 <quorem+0x9e>
 800f96e:	f04f 0e00 	mov.w	lr, #0
 800f972:	4640      	mov	r0, r8
 800f974:	46ac      	mov	ip, r5
 800f976:	46f2      	mov	sl, lr
 800f978:	f850 2b04 	ldr.w	r2, [r0], #4
 800f97c:	b293      	uxth	r3, r2
 800f97e:	fb06 e303 	mla	r3, r6, r3, lr
 800f982:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f986:	b29b      	uxth	r3, r3
 800f988:	ebaa 0303 	sub.w	r3, sl, r3
 800f98c:	f8dc a000 	ldr.w	sl, [ip]
 800f990:	0c12      	lsrs	r2, r2, #16
 800f992:	fa13 f38a 	uxtah	r3, r3, sl
 800f996:	fb06 e202 	mla	r2, r6, r2, lr
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	9b00      	ldr	r3, [sp, #0]
 800f99e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f9a2:	b292      	uxth	r2, r2
 800f9a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f9a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800f9b0:	4581      	cmp	r9, r0
 800f9b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9b6:	f84c 3b04 	str.w	r3, [ip], #4
 800f9ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f9be:	d2db      	bcs.n	800f978 <quorem+0x44>
 800f9c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800f9c4:	b92b      	cbnz	r3, 800f9d2 <quorem+0x9e>
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	3b04      	subs	r3, #4
 800f9ca:	429d      	cmp	r5, r3
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	d32e      	bcc.n	800fa2e <quorem+0xfa>
 800f9d0:	613c      	str	r4, [r7, #16]
 800f9d2:	4638      	mov	r0, r7
 800f9d4:	f001 fad8 	bl	8010f88 <__mcmp>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	db24      	blt.n	800fa26 <quorem+0xf2>
 800f9dc:	3601      	adds	r6, #1
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f04f 0c00 	mov.w	ip, #0
 800f9e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9e8:	f8d0 e000 	ldr.w	lr, [r0]
 800f9ec:	b293      	uxth	r3, r2
 800f9ee:	ebac 0303 	sub.w	r3, ip, r3
 800f9f2:	0c12      	lsrs	r2, r2, #16
 800f9f4:	fa13 f38e 	uxtah	r3, r3, lr
 800f9f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f9fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa06:	45c1      	cmp	r9, r8
 800fa08:	f840 3b04 	str.w	r3, [r0], #4
 800fa0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fa10:	d2e8      	bcs.n	800f9e4 <quorem+0xb0>
 800fa12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa1a:	b922      	cbnz	r2, 800fa26 <quorem+0xf2>
 800fa1c:	3b04      	subs	r3, #4
 800fa1e:	429d      	cmp	r5, r3
 800fa20:	461a      	mov	r2, r3
 800fa22:	d30a      	bcc.n	800fa3a <quorem+0x106>
 800fa24:	613c      	str	r4, [r7, #16]
 800fa26:	4630      	mov	r0, r6
 800fa28:	b003      	add	sp, #12
 800fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	6812      	ldr	r2, [r2, #0]
 800fa30:	3b04      	subs	r3, #4
 800fa32:	2a00      	cmp	r2, #0
 800fa34:	d1cc      	bne.n	800f9d0 <quorem+0x9c>
 800fa36:	3c01      	subs	r4, #1
 800fa38:	e7c7      	b.n	800f9ca <quorem+0x96>
 800fa3a:	6812      	ldr	r2, [r2, #0]
 800fa3c:	3b04      	subs	r3, #4
 800fa3e:	2a00      	cmp	r2, #0
 800fa40:	d1f0      	bne.n	800fa24 <quorem+0xf0>
 800fa42:	3c01      	subs	r4, #1
 800fa44:	e7eb      	b.n	800fa1e <quorem+0xea>
 800fa46:	2000      	movs	r0, #0
 800fa48:	e7ee      	b.n	800fa28 <quorem+0xf4>
 800fa4a:	0000      	movs	r0, r0
 800fa4c:	0000      	movs	r0, r0
	...

0800fa50 <_dtoa_r>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ed2d 8b04 	vpush	{d8-d9}
 800fa58:	ec57 6b10 	vmov	r6, r7, d0
 800fa5c:	b093      	sub	sp, #76	; 0x4c
 800fa5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa64:	9106      	str	r1, [sp, #24]
 800fa66:	ee10 aa10 	vmov	sl, s0
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	9209      	str	r2, [sp, #36]	; 0x24
 800fa6e:	930c      	str	r3, [sp, #48]	; 0x30
 800fa70:	46bb      	mov	fp, r7
 800fa72:	b975      	cbnz	r5, 800fa92 <_dtoa_r+0x42>
 800fa74:	2010      	movs	r0, #16
 800fa76:	f000 fffd 	bl	8010a74 <malloc>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	6260      	str	r0, [r4, #36]	; 0x24
 800fa7e:	b920      	cbnz	r0, 800fa8a <_dtoa_r+0x3a>
 800fa80:	4ba7      	ldr	r3, [pc, #668]	; (800fd20 <_dtoa_r+0x2d0>)
 800fa82:	21ea      	movs	r1, #234	; 0xea
 800fa84:	48a7      	ldr	r0, [pc, #668]	; (800fd24 <_dtoa_r+0x2d4>)
 800fa86:	f001 fe7f 	bl	8011788 <__assert_func>
 800fa8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa8e:	6005      	str	r5, [r0, #0]
 800fa90:	60c5      	str	r5, [r0, #12]
 800fa92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa94:	6819      	ldr	r1, [r3, #0]
 800fa96:	b151      	cbz	r1, 800faae <_dtoa_r+0x5e>
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	604a      	str	r2, [r1, #4]
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	4093      	lsls	r3, r2
 800faa0:	608b      	str	r3, [r1, #8]
 800faa2:	4620      	mov	r0, r4
 800faa4:	f001 f82e 	bl	8010b04 <_Bfree>
 800faa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faaa:	2200      	movs	r2, #0
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	1e3b      	subs	r3, r7, #0
 800fab0:	bfaa      	itet	ge
 800fab2:	2300      	movge	r3, #0
 800fab4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fab8:	f8c8 3000 	strge.w	r3, [r8]
 800fabc:	4b9a      	ldr	r3, [pc, #616]	; (800fd28 <_dtoa_r+0x2d8>)
 800fabe:	bfbc      	itt	lt
 800fac0:	2201      	movlt	r2, #1
 800fac2:	f8c8 2000 	strlt.w	r2, [r8]
 800fac6:	ea33 030b 	bics.w	r3, r3, fp
 800faca:	d11b      	bne.n	800fb04 <_dtoa_r+0xb4>
 800facc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800face:	f242 730f 	movw	r3, #9999	; 0x270f
 800fad2:	6013      	str	r3, [r2, #0]
 800fad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fad8:	4333      	orrs	r3, r6
 800fada:	f000 8592 	beq.w	8010602 <_dtoa_r+0xbb2>
 800fade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fae0:	b963      	cbnz	r3, 800fafc <_dtoa_r+0xac>
 800fae2:	4b92      	ldr	r3, [pc, #584]	; (800fd2c <_dtoa_r+0x2dc>)
 800fae4:	e022      	b.n	800fb2c <_dtoa_r+0xdc>
 800fae6:	4b92      	ldr	r3, [pc, #584]	; (800fd30 <_dtoa_r+0x2e0>)
 800fae8:	9301      	str	r3, [sp, #4]
 800faea:	3308      	adds	r3, #8
 800faec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800faee:	6013      	str	r3, [r2, #0]
 800faf0:	9801      	ldr	r0, [sp, #4]
 800faf2:	b013      	add	sp, #76	; 0x4c
 800faf4:	ecbd 8b04 	vpop	{d8-d9}
 800faf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafc:	4b8b      	ldr	r3, [pc, #556]	; (800fd2c <_dtoa_r+0x2dc>)
 800fafe:	9301      	str	r3, [sp, #4]
 800fb00:	3303      	adds	r3, #3
 800fb02:	e7f3      	b.n	800faec <_dtoa_r+0x9c>
 800fb04:	2200      	movs	r2, #0
 800fb06:	2300      	movs	r3, #0
 800fb08:	4650      	mov	r0, sl
 800fb0a:	4659      	mov	r1, fp
 800fb0c:	f7f1 f804 	bl	8000b18 <__aeabi_dcmpeq>
 800fb10:	ec4b ab19 	vmov	d9, sl, fp
 800fb14:	4680      	mov	r8, r0
 800fb16:	b158      	cbz	r0, 800fb30 <_dtoa_r+0xe0>
 800fb18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	6013      	str	r3, [r2, #0]
 800fb1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f000 856b 	beq.w	80105fc <_dtoa_r+0xbac>
 800fb26:	4883      	ldr	r0, [pc, #524]	; (800fd34 <_dtoa_r+0x2e4>)
 800fb28:	6018      	str	r0, [r3, #0]
 800fb2a:	1e43      	subs	r3, r0, #1
 800fb2c:	9301      	str	r3, [sp, #4]
 800fb2e:	e7df      	b.n	800faf0 <_dtoa_r+0xa0>
 800fb30:	ec4b ab10 	vmov	d0, sl, fp
 800fb34:	aa10      	add	r2, sp, #64	; 0x40
 800fb36:	a911      	add	r1, sp, #68	; 0x44
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f001 facb 	bl	80110d4 <__d2b>
 800fb3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fb42:	ee08 0a10 	vmov	s16, r0
 800fb46:	2d00      	cmp	r5, #0
 800fb48:	f000 8084 	beq.w	800fc54 <_dtoa_r+0x204>
 800fb4c:	ee19 3a90 	vmov	r3, s19
 800fb50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fb58:	4656      	mov	r6, sl
 800fb5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fb5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fb66:	4b74      	ldr	r3, [pc, #464]	; (800fd38 <_dtoa_r+0x2e8>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	f7f0 fbb3 	bl	80002d8 <__aeabi_dsub>
 800fb72:	a365      	add	r3, pc, #404	; (adr r3, 800fd08 <_dtoa_r+0x2b8>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fd66 	bl	8000648 <__aeabi_dmul>
 800fb7c:	a364      	add	r3, pc, #400	; (adr r3, 800fd10 <_dtoa_r+0x2c0>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	f7f0 fbab 	bl	80002dc <__adddf3>
 800fb86:	4606      	mov	r6, r0
 800fb88:	4628      	mov	r0, r5
 800fb8a:	460f      	mov	r7, r1
 800fb8c:	f7f0 fcf2 	bl	8000574 <__aeabi_i2d>
 800fb90:	a361      	add	r3, pc, #388	; (adr r3, 800fd18 <_dtoa_r+0x2c8>)
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	f7f0 fd57 	bl	8000648 <__aeabi_dmul>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	4630      	mov	r0, r6
 800fba0:	4639      	mov	r1, r7
 800fba2:	f7f0 fb9b 	bl	80002dc <__adddf3>
 800fba6:	4606      	mov	r6, r0
 800fba8:	460f      	mov	r7, r1
 800fbaa:	f7f0 fffd 	bl	8000ba8 <__aeabi_d2iz>
 800fbae:	2200      	movs	r2, #0
 800fbb0:	9000      	str	r0, [sp, #0]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	f7f0 ffb8 	bl	8000b2c <__aeabi_dcmplt>
 800fbbc:	b150      	cbz	r0, 800fbd4 <_dtoa_r+0x184>
 800fbbe:	9800      	ldr	r0, [sp, #0]
 800fbc0:	f7f0 fcd8 	bl	8000574 <__aeabi_i2d>
 800fbc4:	4632      	mov	r2, r6
 800fbc6:	463b      	mov	r3, r7
 800fbc8:	f7f0 ffa6 	bl	8000b18 <__aeabi_dcmpeq>
 800fbcc:	b910      	cbnz	r0, 800fbd4 <_dtoa_r+0x184>
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	9b00      	ldr	r3, [sp, #0]
 800fbd6:	2b16      	cmp	r3, #22
 800fbd8:	d85a      	bhi.n	800fc90 <_dtoa_r+0x240>
 800fbda:	9a00      	ldr	r2, [sp, #0]
 800fbdc:	4b57      	ldr	r3, [pc, #348]	; (800fd3c <_dtoa_r+0x2ec>)
 800fbde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	ec51 0b19 	vmov	r0, r1, d9
 800fbea:	f7f0 ff9f 	bl	8000b2c <__aeabi_dcmplt>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d050      	beq.n	800fc94 <_dtoa_r+0x244>
 800fbf2:	9b00      	ldr	r3, [sp, #0]
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbfe:	1b5d      	subs	r5, r3, r5
 800fc00:	1e6b      	subs	r3, r5, #1
 800fc02:	9305      	str	r3, [sp, #20]
 800fc04:	bf45      	ittet	mi
 800fc06:	f1c5 0301 	rsbmi	r3, r5, #1
 800fc0a:	9304      	strmi	r3, [sp, #16]
 800fc0c:	2300      	movpl	r3, #0
 800fc0e:	2300      	movmi	r3, #0
 800fc10:	bf4c      	ite	mi
 800fc12:	9305      	strmi	r3, [sp, #20]
 800fc14:	9304      	strpl	r3, [sp, #16]
 800fc16:	9b00      	ldr	r3, [sp, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	db3d      	blt.n	800fc98 <_dtoa_r+0x248>
 800fc1c:	9b05      	ldr	r3, [sp, #20]
 800fc1e:	9a00      	ldr	r2, [sp, #0]
 800fc20:	920a      	str	r2, [sp, #40]	; 0x28
 800fc22:	4413      	add	r3, r2
 800fc24:	9305      	str	r3, [sp, #20]
 800fc26:	2300      	movs	r3, #0
 800fc28:	9307      	str	r3, [sp, #28]
 800fc2a:	9b06      	ldr	r3, [sp, #24]
 800fc2c:	2b09      	cmp	r3, #9
 800fc2e:	f200 8089 	bhi.w	800fd44 <_dtoa_r+0x2f4>
 800fc32:	2b05      	cmp	r3, #5
 800fc34:	bfc4      	itt	gt
 800fc36:	3b04      	subgt	r3, #4
 800fc38:	9306      	strgt	r3, [sp, #24]
 800fc3a:	9b06      	ldr	r3, [sp, #24]
 800fc3c:	f1a3 0302 	sub.w	r3, r3, #2
 800fc40:	bfcc      	ite	gt
 800fc42:	2500      	movgt	r5, #0
 800fc44:	2501      	movle	r5, #1
 800fc46:	2b03      	cmp	r3, #3
 800fc48:	f200 8087 	bhi.w	800fd5a <_dtoa_r+0x30a>
 800fc4c:	e8df f003 	tbb	[pc, r3]
 800fc50:	59383a2d 	.word	0x59383a2d
 800fc54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fc58:	441d      	add	r5, r3
 800fc5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fc5e:	2b20      	cmp	r3, #32
 800fc60:	bfc1      	itttt	gt
 800fc62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fc66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fc6a:	fa0b f303 	lslgt.w	r3, fp, r3
 800fc6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fc72:	bfda      	itte	le
 800fc74:	f1c3 0320 	rsble	r3, r3, #32
 800fc78:	fa06 f003 	lslle.w	r0, r6, r3
 800fc7c:	4318      	orrgt	r0, r3
 800fc7e:	f7f0 fc69 	bl	8000554 <__aeabi_ui2d>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4606      	mov	r6, r0
 800fc86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fc8a:	3d01      	subs	r5, #1
 800fc8c:	930e      	str	r3, [sp, #56]	; 0x38
 800fc8e:	e76a      	b.n	800fb66 <_dtoa_r+0x116>
 800fc90:	2301      	movs	r3, #1
 800fc92:	e7b2      	b.n	800fbfa <_dtoa_r+0x1aa>
 800fc94:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc96:	e7b1      	b.n	800fbfc <_dtoa_r+0x1ac>
 800fc98:	9b04      	ldr	r3, [sp, #16]
 800fc9a:	9a00      	ldr	r2, [sp, #0]
 800fc9c:	1a9b      	subs	r3, r3, r2
 800fc9e:	9304      	str	r3, [sp, #16]
 800fca0:	4253      	negs	r3, r2
 800fca2:	9307      	str	r3, [sp, #28]
 800fca4:	2300      	movs	r3, #0
 800fca6:	930a      	str	r3, [sp, #40]	; 0x28
 800fca8:	e7bf      	b.n	800fc2a <_dtoa_r+0x1da>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	9308      	str	r3, [sp, #32]
 800fcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	dc55      	bgt.n	800fd60 <_dtoa_r+0x310>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	9209      	str	r2, [sp, #36]	; 0x24
 800fcbe:	e00c      	b.n	800fcda <_dtoa_r+0x28a>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e7f3      	b.n	800fcac <_dtoa_r+0x25c>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcc8:	9308      	str	r3, [sp, #32]
 800fcca:	9b00      	ldr	r3, [sp, #0]
 800fccc:	4413      	add	r3, r2
 800fcce:	9302      	str	r3, [sp, #8]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	9303      	str	r3, [sp, #12]
 800fcd6:	bfb8      	it	lt
 800fcd8:	2301      	movlt	r3, #1
 800fcda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fcdc:	2200      	movs	r2, #0
 800fcde:	6042      	str	r2, [r0, #4]
 800fce0:	2204      	movs	r2, #4
 800fce2:	f102 0614 	add.w	r6, r2, #20
 800fce6:	429e      	cmp	r6, r3
 800fce8:	6841      	ldr	r1, [r0, #4]
 800fcea:	d93d      	bls.n	800fd68 <_dtoa_r+0x318>
 800fcec:	4620      	mov	r0, r4
 800fcee:	f000 fec9 	bl	8010a84 <_Balloc>
 800fcf2:	9001      	str	r0, [sp, #4]
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d13b      	bne.n	800fd70 <_dtoa_r+0x320>
 800fcf8:	4b11      	ldr	r3, [pc, #68]	; (800fd40 <_dtoa_r+0x2f0>)
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd00:	e6c0      	b.n	800fa84 <_dtoa_r+0x34>
 800fd02:	2301      	movs	r3, #1
 800fd04:	e7df      	b.n	800fcc6 <_dtoa_r+0x276>
 800fd06:	bf00      	nop
 800fd08:	636f4361 	.word	0x636f4361
 800fd0c:	3fd287a7 	.word	0x3fd287a7
 800fd10:	8b60c8b3 	.word	0x8b60c8b3
 800fd14:	3fc68a28 	.word	0x3fc68a28
 800fd18:	509f79fb 	.word	0x509f79fb
 800fd1c:	3fd34413 	.word	0x3fd34413
 800fd20:	08012219 	.word	0x08012219
 800fd24:	08012230 	.word	0x08012230
 800fd28:	7ff00000 	.word	0x7ff00000
 800fd2c:	08012215 	.word	0x08012215
 800fd30:	0801220c 	.word	0x0801220c
 800fd34:	080121e9 	.word	0x080121e9
 800fd38:	3ff80000 	.word	0x3ff80000
 800fd3c:	08012380 	.word	0x08012380
 800fd40:	0801228b 	.word	0x0801228b
 800fd44:	2501      	movs	r5, #1
 800fd46:	2300      	movs	r3, #0
 800fd48:	9306      	str	r3, [sp, #24]
 800fd4a:	9508      	str	r5, [sp, #32]
 800fd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd54:	2200      	movs	r2, #0
 800fd56:	2312      	movs	r3, #18
 800fd58:	e7b0      	b.n	800fcbc <_dtoa_r+0x26c>
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	9308      	str	r3, [sp, #32]
 800fd5e:	e7f5      	b.n	800fd4c <_dtoa_r+0x2fc>
 800fd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd66:	e7b8      	b.n	800fcda <_dtoa_r+0x28a>
 800fd68:	3101      	adds	r1, #1
 800fd6a:	6041      	str	r1, [r0, #4]
 800fd6c:	0052      	lsls	r2, r2, #1
 800fd6e:	e7b8      	b.n	800fce2 <_dtoa_r+0x292>
 800fd70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd72:	9a01      	ldr	r2, [sp, #4]
 800fd74:	601a      	str	r2, [r3, #0]
 800fd76:	9b03      	ldr	r3, [sp, #12]
 800fd78:	2b0e      	cmp	r3, #14
 800fd7a:	f200 809d 	bhi.w	800feb8 <_dtoa_r+0x468>
 800fd7e:	2d00      	cmp	r5, #0
 800fd80:	f000 809a 	beq.w	800feb8 <_dtoa_r+0x468>
 800fd84:	9b00      	ldr	r3, [sp, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	dd32      	ble.n	800fdf0 <_dtoa_r+0x3a0>
 800fd8a:	4ab7      	ldr	r2, [pc, #732]	; (8010068 <_dtoa_r+0x618>)
 800fd8c:	f003 030f 	and.w	r3, r3, #15
 800fd90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd98:	9b00      	ldr	r3, [sp, #0]
 800fd9a:	05d8      	lsls	r0, r3, #23
 800fd9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fda0:	d516      	bpl.n	800fdd0 <_dtoa_r+0x380>
 800fda2:	4bb2      	ldr	r3, [pc, #712]	; (801006c <_dtoa_r+0x61c>)
 800fda4:	ec51 0b19 	vmov	r0, r1, d9
 800fda8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fdac:	f7f0 fd76 	bl	800089c <__aeabi_ddiv>
 800fdb0:	f007 070f 	and.w	r7, r7, #15
 800fdb4:	4682      	mov	sl, r0
 800fdb6:	468b      	mov	fp, r1
 800fdb8:	2503      	movs	r5, #3
 800fdba:	4eac      	ldr	r6, [pc, #688]	; (801006c <_dtoa_r+0x61c>)
 800fdbc:	b957      	cbnz	r7, 800fdd4 <_dtoa_r+0x384>
 800fdbe:	4642      	mov	r2, r8
 800fdc0:	464b      	mov	r3, r9
 800fdc2:	4650      	mov	r0, sl
 800fdc4:	4659      	mov	r1, fp
 800fdc6:	f7f0 fd69 	bl	800089c <__aeabi_ddiv>
 800fdca:	4682      	mov	sl, r0
 800fdcc:	468b      	mov	fp, r1
 800fdce:	e028      	b.n	800fe22 <_dtoa_r+0x3d2>
 800fdd0:	2502      	movs	r5, #2
 800fdd2:	e7f2      	b.n	800fdba <_dtoa_r+0x36a>
 800fdd4:	07f9      	lsls	r1, r7, #31
 800fdd6:	d508      	bpl.n	800fdea <_dtoa_r+0x39a>
 800fdd8:	4640      	mov	r0, r8
 800fdda:	4649      	mov	r1, r9
 800fddc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fde0:	f7f0 fc32 	bl	8000648 <__aeabi_dmul>
 800fde4:	3501      	adds	r5, #1
 800fde6:	4680      	mov	r8, r0
 800fde8:	4689      	mov	r9, r1
 800fdea:	107f      	asrs	r7, r7, #1
 800fdec:	3608      	adds	r6, #8
 800fdee:	e7e5      	b.n	800fdbc <_dtoa_r+0x36c>
 800fdf0:	f000 809b 	beq.w	800ff2a <_dtoa_r+0x4da>
 800fdf4:	9b00      	ldr	r3, [sp, #0]
 800fdf6:	4f9d      	ldr	r7, [pc, #628]	; (801006c <_dtoa_r+0x61c>)
 800fdf8:	425e      	negs	r6, r3
 800fdfa:	4b9b      	ldr	r3, [pc, #620]	; (8010068 <_dtoa_r+0x618>)
 800fdfc:	f006 020f 	and.w	r2, r6, #15
 800fe00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	ec51 0b19 	vmov	r0, r1, d9
 800fe0c:	f7f0 fc1c 	bl	8000648 <__aeabi_dmul>
 800fe10:	1136      	asrs	r6, r6, #4
 800fe12:	4682      	mov	sl, r0
 800fe14:	468b      	mov	fp, r1
 800fe16:	2300      	movs	r3, #0
 800fe18:	2502      	movs	r5, #2
 800fe1a:	2e00      	cmp	r6, #0
 800fe1c:	d17a      	bne.n	800ff14 <_dtoa_r+0x4c4>
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1d3      	bne.n	800fdca <_dtoa_r+0x37a>
 800fe22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 8082 	beq.w	800ff2e <_dtoa_r+0x4de>
 800fe2a:	4b91      	ldr	r3, [pc, #580]	; (8010070 <_dtoa_r+0x620>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	4650      	mov	r0, sl
 800fe30:	4659      	mov	r1, fp
 800fe32:	f7f0 fe7b 	bl	8000b2c <__aeabi_dcmplt>
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d079      	beq.n	800ff2e <_dtoa_r+0x4de>
 800fe3a:	9b03      	ldr	r3, [sp, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d076      	beq.n	800ff2e <_dtoa_r+0x4de>
 800fe40:	9b02      	ldr	r3, [sp, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	dd36      	ble.n	800feb4 <_dtoa_r+0x464>
 800fe46:	9b00      	ldr	r3, [sp, #0]
 800fe48:	4650      	mov	r0, sl
 800fe4a:	4659      	mov	r1, fp
 800fe4c:	1e5f      	subs	r7, r3, #1
 800fe4e:	2200      	movs	r2, #0
 800fe50:	4b88      	ldr	r3, [pc, #544]	; (8010074 <_dtoa_r+0x624>)
 800fe52:	f7f0 fbf9 	bl	8000648 <__aeabi_dmul>
 800fe56:	9e02      	ldr	r6, [sp, #8]
 800fe58:	4682      	mov	sl, r0
 800fe5a:	468b      	mov	fp, r1
 800fe5c:	3501      	adds	r5, #1
 800fe5e:	4628      	mov	r0, r5
 800fe60:	f7f0 fb88 	bl	8000574 <__aeabi_i2d>
 800fe64:	4652      	mov	r2, sl
 800fe66:	465b      	mov	r3, fp
 800fe68:	f7f0 fbee 	bl	8000648 <__aeabi_dmul>
 800fe6c:	4b82      	ldr	r3, [pc, #520]	; (8010078 <_dtoa_r+0x628>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f7f0 fa34 	bl	80002dc <__adddf3>
 800fe74:	46d0      	mov	r8, sl
 800fe76:	46d9      	mov	r9, fp
 800fe78:	4682      	mov	sl, r0
 800fe7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fe7e:	2e00      	cmp	r6, #0
 800fe80:	d158      	bne.n	800ff34 <_dtoa_r+0x4e4>
 800fe82:	4b7e      	ldr	r3, [pc, #504]	; (801007c <_dtoa_r+0x62c>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	4640      	mov	r0, r8
 800fe88:	4649      	mov	r1, r9
 800fe8a:	f7f0 fa25 	bl	80002d8 <__aeabi_dsub>
 800fe8e:	4652      	mov	r2, sl
 800fe90:	465b      	mov	r3, fp
 800fe92:	4680      	mov	r8, r0
 800fe94:	4689      	mov	r9, r1
 800fe96:	f7f0 fe67 	bl	8000b68 <__aeabi_dcmpgt>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	f040 8295 	bne.w	80103ca <_dtoa_r+0x97a>
 800fea0:	4652      	mov	r2, sl
 800fea2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fea6:	4640      	mov	r0, r8
 800fea8:	4649      	mov	r1, r9
 800feaa:	f7f0 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f040 8289 	bne.w	80103c6 <_dtoa_r+0x976>
 800feb4:	ec5b ab19 	vmov	sl, fp, d9
 800feb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800feba:	2b00      	cmp	r3, #0
 800febc:	f2c0 8148 	blt.w	8010150 <_dtoa_r+0x700>
 800fec0:	9a00      	ldr	r2, [sp, #0]
 800fec2:	2a0e      	cmp	r2, #14
 800fec4:	f300 8144 	bgt.w	8010150 <_dtoa_r+0x700>
 800fec8:	4b67      	ldr	r3, [pc, #412]	; (8010068 <_dtoa_r+0x618>)
 800feca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fece:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f280 80d5 	bge.w	8010084 <_dtoa_r+0x634>
 800feda:	9b03      	ldr	r3, [sp, #12]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f300 80d1 	bgt.w	8010084 <_dtoa_r+0x634>
 800fee2:	f040 826f 	bne.w	80103c4 <_dtoa_r+0x974>
 800fee6:	4b65      	ldr	r3, [pc, #404]	; (801007c <_dtoa_r+0x62c>)
 800fee8:	2200      	movs	r2, #0
 800feea:	4640      	mov	r0, r8
 800feec:	4649      	mov	r1, r9
 800feee:	f7f0 fbab 	bl	8000648 <__aeabi_dmul>
 800fef2:	4652      	mov	r2, sl
 800fef4:	465b      	mov	r3, fp
 800fef6:	f7f0 fe2d 	bl	8000b54 <__aeabi_dcmpge>
 800fefa:	9e03      	ldr	r6, [sp, #12]
 800fefc:	4637      	mov	r7, r6
 800fefe:	2800      	cmp	r0, #0
 800ff00:	f040 8245 	bne.w	801038e <_dtoa_r+0x93e>
 800ff04:	9d01      	ldr	r5, [sp, #4]
 800ff06:	2331      	movs	r3, #49	; 0x31
 800ff08:	f805 3b01 	strb.w	r3, [r5], #1
 800ff0c:	9b00      	ldr	r3, [sp, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	9300      	str	r3, [sp, #0]
 800ff12:	e240      	b.n	8010396 <_dtoa_r+0x946>
 800ff14:	07f2      	lsls	r2, r6, #31
 800ff16:	d505      	bpl.n	800ff24 <_dtoa_r+0x4d4>
 800ff18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff1c:	f7f0 fb94 	bl	8000648 <__aeabi_dmul>
 800ff20:	3501      	adds	r5, #1
 800ff22:	2301      	movs	r3, #1
 800ff24:	1076      	asrs	r6, r6, #1
 800ff26:	3708      	adds	r7, #8
 800ff28:	e777      	b.n	800fe1a <_dtoa_r+0x3ca>
 800ff2a:	2502      	movs	r5, #2
 800ff2c:	e779      	b.n	800fe22 <_dtoa_r+0x3d2>
 800ff2e:	9f00      	ldr	r7, [sp, #0]
 800ff30:	9e03      	ldr	r6, [sp, #12]
 800ff32:	e794      	b.n	800fe5e <_dtoa_r+0x40e>
 800ff34:	9901      	ldr	r1, [sp, #4]
 800ff36:	4b4c      	ldr	r3, [pc, #304]	; (8010068 <_dtoa_r+0x618>)
 800ff38:	4431      	add	r1, r6
 800ff3a:	910d      	str	r1, [sp, #52]	; 0x34
 800ff3c:	9908      	ldr	r1, [sp, #32]
 800ff3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ff42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff46:	2900      	cmp	r1, #0
 800ff48:	d043      	beq.n	800ffd2 <_dtoa_r+0x582>
 800ff4a:	494d      	ldr	r1, [pc, #308]	; (8010080 <_dtoa_r+0x630>)
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	f7f0 fca5 	bl	800089c <__aeabi_ddiv>
 800ff52:	4652      	mov	r2, sl
 800ff54:	465b      	mov	r3, fp
 800ff56:	f7f0 f9bf 	bl	80002d8 <__aeabi_dsub>
 800ff5a:	9d01      	ldr	r5, [sp, #4]
 800ff5c:	4682      	mov	sl, r0
 800ff5e:	468b      	mov	fp, r1
 800ff60:	4649      	mov	r1, r9
 800ff62:	4640      	mov	r0, r8
 800ff64:	f7f0 fe20 	bl	8000ba8 <__aeabi_d2iz>
 800ff68:	4606      	mov	r6, r0
 800ff6a:	f7f0 fb03 	bl	8000574 <__aeabi_i2d>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	4640      	mov	r0, r8
 800ff74:	4649      	mov	r1, r9
 800ff76:	f7f0 f9af 	bl	80002d8 <__aeabi_dsub>
 800ff7a:	3630      	adds	r6, #48	; 0x30
 800ff7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ff80:	4652      	mov	r2, sl
 800ff82:	465b      	mov	r3, fp
 800ff84:	4680      	mov	r8, r0
 800ff86:	4689      	mov	r9, r1
 800ff88:	f7f0 fdd0 	bl	8000b2c <__aeabi_dcmplt>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d163      	bne.n	8010058 <_dtoa_r+0x608>
 800ff90:	4642      	mov	r2, r8
 800ff92:	464b      	mov	r3, r9
 800ff94:	4936      	ldr	r1, [pc, #216]	; (8010070 <_dtoa_r+0x620>)
 800ff96:	2000      	movs	r0, #0
 800ff98:	f7f0 f99e 	bl	80002d8 <__aeabi_dsub>
 800ff9c:	4652      	mov	r2, sl
 800ff9e:	465b      	mov	r3, fp
 800ffa0:	f7f0 fdc4 	bl	8000b2c <__aeabi_dcmplt>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	f040 80b5 	bne.w	8010114 <_dtoa_r+0x6c4>
 800ffaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffac:	429d      	cmp	r5, r3
 800ffae:	d081      	beq.n	800feb4 <_dtoa_r+0x464>
 800ffb0:	4b30      	ldr	r3, [pc, #192]	; (8010074 <_dtoa_r+0x624>)
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	4650      	mov	r0, sl
 800ffb6:	4659      	mov	r1, fp
 800ffb8:	f7f0 fb46 	bl	8000648 <__aeabi_dmul>
 800ffbc:	4b2d      	ldr	r3, [pc, #180]	; (8010074 <_dtoa_r+0x624>)
 800ffbe:	4682      	mov	sl, r0
 800ffc0:	468b      	mov	fp, r1
 800ffc2:	4640      	mov	r0, r8
 800ffc4:	4649      	mov	r1, r9
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f7f0 fb3e 	bl	8000648 <__aeabi_dmul>
 800ffcc:	4680      	mov	r8, r0
 800ffce:	4689      	mov	r9, r1
 800ffd0:	e7c6      	b.n	800ff60 <_dtoa_r+0x510>
 800ffd2:	4650      	mov	r0, sl
 800ffd4:	4659      	mov	r1, fp
 800ffd6:	f7f0 fb37 	bl	8000648 <__aeabi_dmul>
 800ffda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffdc:	9d01      	ldr	r5, [sp, #4]
 800ffde:	930f      	str	r3, [sp, #60]	; 0x3c
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	468b      	mov	fp, r1
 800ffe4:	4649      	mov	r1, r9
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	f7f0 fdde 	bl	8000ba8 <__aeabi_d2iz>
 800ffec:	4606      	mov	r6, r0
 800ffee:	f7f0 fac1 	bl	8000574 <__aeabi_i2d>
 800fff2:	3630      	adds	r6, #48	; 0x30
 800fff4:	4602      	mov	r2, r0
 800fff6:	460b      	mov	r3, r1
 800fff8:	4640      	mov	r0, r8
 800fffa:	4649      	mov	r1, r9
 800fffc:	f7f0 f96c 	bl	80002d8 <__aeabi_dsub>
 8010000:	f805 6b01 	strb.w	r6, [r5], #1
 8010004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010006:	429d      	cmp	r5, r3
 8010008:	4680      	mov	r8, r0
 801000a:	4689      	mov	r9, r1
 801000c:	f04f 0200 	mov.w	r2, #0
 8010010:	d124      	bne.n	801005c <_dtoa_r+0x60c>
 8010012:	4b1b      	ldr	r3, [pc, #108]	; (8010080 <_dtoa_r+0x630>)
 8010014:	4650      	mov	r0, sl
 8010016:	4659      	mov	r1, fp
 8010018:	f7f0 f960 	bl	80002dc <__adddf3>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	4640      	mov	r0, r8
 8010022:	4649      	mov	r1, r9
 8010024:	f7f0 fda0 	bl	8000b68 <__aeabi_dcmpgt>
 8010028:	2800      	cmp	r0, #0
 801002a:	d173      	bne.n	8010114 <_dtoa_r+0x6c4>
 801002c:	4652      	mov	r2, sl
 801002e:	465b      	mov	r3, fp
 8010030:	4913      	ldr	r1, [pc, #76]	; (8010080 <_dtoa_r+0x630>)
 8010032:	2000      	movs	r0, #0
 8010034:	f7f0 f950 	bl	80002d8 <__aeabi_dsub>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4640      	mov	r0, r8
 801003e:	4649      	mov	r1, r9
 8010040:	f7f0 fd74 	bl	8000b2c <__aeabi_dcmplt>
 8010044:	2800      	cmp	r0, #0
 8010046:	f43f af35 	beq.w	800feb4 <_dtoa_r+0x464>
 801004a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801004c:	1e6b      	subs	r3, r5, #1
 801004e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010050:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010054:	2b30      	cmp	r3, #48	; 0x30
 8010056:	d0f8      	beq.n	801004a <_dtoa_r+0x5fa>
 8010058:	9700      	str	r7, [sp, #0]
 801005a:	e049      	b.n	80100f0 <_dtoa_r+0x6a0>
 801005c:	4b05      	ldr	r3, [pc, #20]	; (8010074 <_dtoa_r+0x624>)
 801005e:	f7f0 faf3 	bl	8000648 <__aeabi_dmul>
 8010062:	4680      	mov	r8, r0
 8010064:	4689      	mov	r9, r1
 8010066:	e7bd      	b.n	800ffe4 <_dtoa_r+0x594>
 8010068:	08012380 	.word	0x08012380
 801006c:	08012358 	.word	0x08012358
 8010070:	3ff00000 	.word	0x3ff00000
 8010074:	40240000 	.word	0x40240000
 8010078:	401c0000 	.word	0x401c0000
 801007c:	40140000 	.word	0x40140000
 8010080:	3fe00000 	.word	0x3fe00000
 8010084:	9d01      	ldr	r5, [sp, #4]
 8010086:	4656      	mov	r6, sl
 8010088:	465f      	mov	r7, fp
 801008a:	4642      	mov	r2, r8
 801008c:	464b      	mov	r3, r9
 801008e:	4630      	mov	r0, r6
 8010090:	4639      	mov	r1, r7
 8010092:	f7f0 fc03 	bl	800089c <__aeabi_ddiv>
 8010096:	f7f0 fd87 	bl	8000ba8 <__aeabi_d2iz>
 801009a:	4682      	mov	sl, r0
 801009c:	f7f0 fa6a 	bl	8000574 <__aeabi_i2d>
 80100a0:	4642      	mov	r2, r8
 80100a2:	464b      	mov	r3, r9
 80100a4:	f7f0 fad0 	bl	8000648 <__aeabi_dmul>
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	4630      	mov	r0, r6
 80100ae:	4639      	mov	r1, r7
 80100b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80100b4:	f7f0 f910 	bl	80002d8 <__aeabi_dsub>
 80100b8:	f805 6b01 	strb.w	r6, [r5], #1
 80100bc:	9e01      	ldr	r6, [sp, #4]
 80100be:	9f03      	ldr	r7, [sp, #12]
 80100c0:	1bae      	subs	r6, r5, r6
 80100c2:	42b7      	cmp	r7, r6
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	d135      	bne.n	8010136 <_dtoa_r+0x6e6>
 80100ca:	f7f0 f907 	bl	80002dc <__adddf3>
 80100ce:	4642      	mov	r2, r8
 80100d0:	464b      	mov	r3, r9
 80100d2:	4606      	mov	r6, r0
 80100d4:	460f      	mov	r7, r1
 80100d6:	f7f0 fd47 	bl	8000b68 <__aeabi_dcmpgt>
 80100da:	b9d0      	cbnz	r0, 8010112 <_dtoa_r+0x6c2>
 80100dc:	4642      	mov	r2, r8
 80100de:	464b      	mov	r3, r9
 80100e0:	4630      	mov	r0, r6
 80100e2:	4639      	mov	r1, r7
 80100e4:	f7f0 fd18 	bl	8000b18 <__aeabi_dcmpeq>
 80100e8:	b110      	cbz	r0, 80100f0 <_dtoa_r+0x6a0>
 80100ea:	f01a 0f01 	tst.w	sl, #1
 80100ee:	d110      	bne.n	8010112 <_dtoa_r+0x6c2>
 80100f0:	4620      	mov	r0, r4
 80100f2:	ee18 1a10 	vmov	r1, s16
 80100f6:	f000 fd05 	bl	8010b04 <_Bfree>
 80100fa:	2300      	movs	r3, #0
 80100fc:	9800      	ldr	r0, [sp, #0]
 80100fe:	702b      	strb	r3, [r5, #0]
 8010100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010102:	3001      	adds	r0, #1
 8010104:	6018      	str	r0, [r3, #0]
 8010106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010108:	2b00      	cmp	r3, #0
 801010a:	f43f acf1 	beq.w	800faf0 <_dtoa_r+0xa0>
 801010e:	601d      	str	r5, [r3, #0]
 8010110:	e4ee      	b.n	800faf0 <_dtoa_r+0xa0>
 8010112:	9f00      	ldr	r7, [sp, #0]
 8010114:	462b      	mov	r3, r5
 8010116:	461d      	mov	r5, r3
 8010118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801011c:	2a39      	cmp	r2, #57	; 0x39
 801011e:	d106      	bne.n	801012e <_dtoa_r+0x6de>
 8010120:	9a01      	ldr	r2, [sp, #4]
 8010122:	429a      	cmp	r2, r3
 8010124:	d1f7      	bne.n	8010116 <_dtoa_r+0x6c6>
 8010126:	9901      	ldr	r1, [sp, #4]
 8010128:	2230      	movs	r2, #48	; 0x30
 801012a:	3701      	adds	r7, #1
 801012c:	700a      	strb	r2, [r1, #0]
 801012e:	781a      	ldrb	r2, [r3, #0]
 8010130:	3201      	adds	r2, #1
 8010132:	701a      	strb	r2, [r3, #0]
 8010134:	e790      	b.n	8010058 <_dtoa_r+0x608>
 8010136:	4ba6      	ldr	r3, [pc, #664]	; (80103d0 <_dtoa_r+0x980>)
 8010138:	2200      	movs	r2, #0
 801013a:	f7f0 fa85 	bl	8000648 <__aeabi_dmul>
 801013e:	2200      	movs	r2, #0
 8010140:	2300      	movs	r3, #0
 8010142:	4606      	mov	r6, r0
 8010144:	460f      	mov	r7, r1
 8010146:	f7f0 fce7 	bl	8000b18 <__aeabi_dcmpeq>
 801014a:	2800      	cmp	r0, #0
 801014c:	d09d      	beq.n	801008a <_dtoa_r+0x63a>
 801014e:	e7cf      	b.n	80100f0 <_dtoa_r+0x6a0>
 8010150:	9a08      	ldr	r2, [sp, #32]
 8010152:	2a00      	cmp	r2, #0
 8010154:	f000 80d7 	beq.w	8010306 <_dtoa_r+0x8b6>
 8010158:	9a06      	ldr	r2, [sp, #24]
 801015a:	2a01      	cmp	r2, #1
 801015c:	f300 80ba 	bgt.w	80102d4 <_dtoa_r+0x884>
 8010160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010162:	2a00      	cmp	r2, #0
 8010164:	f000 80b2 	beq.w	80102cc <_dtoa_r+0x87c>
 8010168:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801016c:	9e07      	ldr	r6, [sp, #28]
 801016e:	9d04      	ldr	r5, [sp, #16]
 8010170:	9a04      	ldr	r2, [sp, #16]
 8010172:	441a      	add	r2, r3
 8010174:	9204      	str	r2, [sp, #16]
 8010176:	9a05      	ldr	r2, [sp, #20]
 8010178:	2101      	movs	r1, #1
 801017a:	441a      	add	r2, r3
 801017c:	4620      	mov	r0, r4
 801017e:	9205      	str	r2, [sp, #20]
 8010180:	f000 fd78 	bl	8010c74 <__i2b>
 8010184:	4607      	mov	r7, r0
 8010186:	2d00      	cmp	r5, #0
 8010188:	dd0c      	ble.n	80101a4 <_dtoa_r+0x754>
 801018a:	9b05      	ldr	r3, [sp, #20]
 801018c:	2b00      	cmp	r3, #0
 801018e:	dd09      	ble.n	80101a4 <_dtoa_r+0x754>
 8010190:	42ab      	cmp	r3, r5
 8010192:	9a04      	ldr	r2, [sp, #16]
 8010194:	bfa8      	it	ge
 8010196:	462b      	movge	r3, r5
 8010198:	1ad2      	subs	r2, r2, r3
 801019a:	9204      	str	r2, [sp, #16]
 801019c:	9a05      	ldr	r2, [sp, #20]
 801019e:	1aed      	subs	r5, r5, r3
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	9305      	str	r3, [sp, #20]
 80101a4:	9b07      	ldr	r3, [sp, #28]
 80101a6:	b31b      	cbz	r3, 80101f0 <_dtoa_r+0x7a0>
 80101a8:	9b08      	ldr	r3, [sp, #32]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 80af 	beq.w	801030e <_dtoa_r+0x8be>
 80101b0:	2e00      	cmp	r6, #0
 80101b2:	dd13      	ble.n	80101dc <_dtoa_r+0x78c>
 80101b4:	4639      	mov	r1, r7
 80101b6:	4632      	mov	r2, r6
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 fe1b 	bl	8010df4 <__pow5mult>
 80101be:	ee18 2a10 	vmov	r2, s16
 80101c2:	4601      	mov	r1, r0
 80101c4:	4607      	mov	r7, r0
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 fd6a 	bl	8010ca0 <__multiply>
 80101cc:	ee18 1a10 	vmov	r1, s16
 80101d0:	4680      	mov	r8, r0
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 fc96 	bl	8010b04 <_Bfree>
 80101d8:	ee08 8a10 	vmov	s16, r8
 80101dc:	9b07      	ldr	r3, [sp, #28]
 80101de:	1b9a      	subs	r2, r3, r6
 80101e0:	d006      	beq.n	80101f0 <_dtoa_r+0x7a0>
 80101e2:	ee18 1a10 	vmov	r1, s16
 80101e6:	4620      	mov	r0, r4
 80101e8:	f000 fe04 	bl	8010df4 <__pow5mult>
 80101ec:	ee08 0a10 	vmov	s16, r0
 80101f0:	2101      	movs	r1, #1
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 fd3e 	bl	8010c74 <__i2b>
 80101f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	4606      	mov	r6, r0
 80101fe:	f340 8088 	ble.w	8010312 <_dtoa_r+0x8c2>
 8010202:	461a      	mov	r2, r3
 8010204:	4601      	mov	r1, r0
 8010206:	4620      	mov	r0, r4
 8010208:	f000 fdf4 	bl	8010df4 <__pow5mult>
 801020c:	9b06      	ldr	r3, [sp, #24]
 801020e:	2b01      	cmp	r3, #1
 8010210:	4606      	mov	r6, r0
 8010212:	f340 8081 	ble.w	8010318 <_dtoa_r+0x8c8>
 8010216:	f04f 0800 	mov.w	r8, #0
 801021a:	6933      	ldr	r3, [r6, #16]
 801021c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010220:	6918      	ldr	r0, [r3, #16]
 8010222:	f000 fcd7 	bl	8010bd4 <__hi0bits>
 8010226:	f1c0 0020 	rsb	r0, r0, #32
 801022a:	9b05      	ldr	r3, [sp, #20]
 801022c:	4418      	add	r0, r3
 801022e:	f010 001f 	ands.w	r0, r0, #31
 8010232:	f000 8092 	beq.w	801035a <_dtoa_r+0x90a>
 8010236:	f1c0 0320 	rsb	r3, r0, #32
 801023a:	2b04      	cmp	r3, #4
 801023c:	f340 808a 	ble.w	8010354 <_dtoa_r+0x904>
 8010240:	f1c0 001c 	rsb	r0, r0, #28
 8010244:	9b04      	ldr	r3, [sp, #16]
 8010246:	4403      	add	r3, r0
 8010248:	9304      	str	r3, [sp, #16]
 801024a:	9b05      	ldr	r3, [sp, #20]
 801024c:	4403      	add	r3, r0
 801024e:	4405      	add	r5, r0
 8010250:	9305      	str	r3, [sp, #20]
 8010252:	9b04      	ldr	r3, [sp, #16]
 8010254:	2b00      	cmp	r3, #0
 8010256:	dd07      	ble.n	8010268 <_dtoa_r+0x818>
 8010258:	ee18 1a10 	vmov	r1, s16
 801025c:	461a      	mov	r2, r3
 801025e:	4620      	mov	r0, r4
 8010260:	f000 fe22 	bl	8010ea8 <__lshift>
 8010264:	ee08 0a10 	vmov	s16, r0
 8010268:	9b05      	ldr	r3, [sp, #20]
 801026a:	2b00      	cmp	r3, #0
 801026c:	dd05      	ble.n	801027a <_dtoa_r+0x82a>
 801026e:	4631      	mov	r1, r6
 8010270:	461a      	mov	r2, r3
 8010272:	4620      	mov	r0, r4
 8010274:	f000 fe18 	bl	8010ea8 <__lshift>
 8010278:	4606      	mov	r6, r0
 801027a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801027c:	2b00      	cmp	r3, #0
 801027e:	d06e      	beq.n	801035e <_dtoa_r+0x90e>
 8010280:	ee18 0a10 	vmov	r0, s16
 8010284:	4631      	mov	r1, r6
 8010286:	f000 fe7f 	bl	8010f88 <__mcmp>
 801028a:	2800      	cmp	r0, #0
 801028c:	da67      	bge.n	801035e <_dtoa_r+0x90e>
 801028e:	9b00      	ldr	r3, [sp, #0]
 8010290:	3b01      	subs	r3, #1
 8010292:	ee18 1a10 	vmov	r1, s16
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	220a      	movs	r2, #10
 801029a:	2300      	movs	r3, #0
 801029c:	4620      	mov	r0, r4
 801029e:	f000 fc53 	bl	8010b48 <__multadd>
 80102a2:	9b08      	ldr	r3, [sp, #32]
 80102a4:	ee08 0a10 	vmov	s16, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 81b1 	beq.w	8010610 <_dtoa_r+0xbc0>
 80102ae:	2300      	movs	r3, #0
 80102b0:	4639      	mov	r1, r7
 80102b2:	220a      	movs	r2, #10
 80102b4:	4620      	mov	r0, r4
 80102b6:	f000 fc47 	bl	8010b48 <__multadd>
 80102ba:	9b02      	ldr	r3, [sp, #8]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	4607      	mov	r7, r0
 80102c0:	f300 808e 	bgt.w	80103e0 <_dtoa_r+0x990>
 80102c4:	9b06      	ldr	r3, [sp, #24]
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	dc51      	bgt.n	801036e <_dtoa_r+0x91e>
 80102ca:	e089      	b.n	80103e0 <_dtoa_r+0x990>
 80102cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80102d2:	e74b      	b.n	801016c <_dtoa_r+0x71c>
 80102d4:	9b03      	ldr	r3, [sp, #12]
 80102d6:	1e5e      	subs	r6, r3, #1
 80102d8:	9b07      	ldr	r3, [sp, #28]
 80102da:	42b3      	cmp	r3, r6
 80102dc:	bfbf      	itttt	lt
 80102de:	9b07      	ldrlt	r3, [sp, #28]
 80102e0:	9607      	strlt	r6, [sp, #28]
 80102e2:	1af2      	sublt	r2, r6, r3
 80102e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80102e6:	bfb6      	itet	lt
 80102e8:	189b      	addlt	r3, r3, r2
 80102ea:	1b9e      	subge	r6, r3, r6
 80102ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80102ee:	9b03      	ldr	r3, [sp, #12]
 80102f0:	bfb8      	it	lt
 80102f2:	2600      	movlt	r6, #0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	bfb7      	itett	lt
 80102f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80102fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010300:	1a9d      	sublt	r5, r3, r2
 8010302:	2300      	movlt	r3, #0
 8010304:	e734      	b.n	8010170 <_dtoa_r+0x720>
 8010306:	9e07      	ldr	r6, [sp, #28]
 8010308:	9d04      	ldr	r5, [sp, #16]
 801030a:	9f08      	ldr	r7, [sp, #32]
 801030c:	e73b      	b.n	8010186 <_dtoa_r+0x736>
 801030e:	9a07      	ldr	r2, [sp, #28]
 8010310:	e767      	b.n	80101e2 <_dtoa_r+0x792>
 8010312:	9b06      	ldr	r3, [sp, #24]
 8010314:	2b01      	cmp	r3, #1
 8010316:	dc18      	bgt.n	801034a <_dtoa_r+0x8fa>
 8010318:	f1ba 0f00 	cmp.w	sl, #0
 801031c:	d115      	bne.n	801034a <_dtoa_r+0x8fa>
 801031e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010322:	b993      	cbnz	r3, 801034a <_dtoa_r+0x8fa>
 8010324:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010328:	0d1b      	lsrs	r3, r3, #20
 801032a:	051b      	lsls	r3, r3, #20
 801032c:	b183      	cbz	r3, 8010350 <_dtoa_r+0x900>
 801032e:	9b04      	ldr	r3, [sp, #16]
 8010330:	3301      	adds	r3, #1
 8010332:	9304      	str	r3, [sp, #16]
 8010334:	9b05      	ldr	r3, [sp, #20]
 8010336:	3301      	adds	r3, #1
 8010338:	9305      	str	r3, [sp, #20]
 801033a:	f04f 0801 	mov.w	r8, #1
 801033e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010340:	2b00      	cmp	r3, #0
 8010342:	f47f af6a 	bne.w	801021a <_dtoa_r+0x7ca>
 8010346:	2001      	movs	r0, #1
 8010348:	e76f      	b.n	801022a <_dtoa_r+0x7da>
 801034a:	f04f 0800 	mov.w	r8, #0
 801034e:	e7f6      	b.n	801033e <_dtoa_r+0x8ee>
 8010350:	4698      	mov	r8, r3
 8010352:	e7f4      	b.n	801033e <_dtoa_r+0x8ee>
 8010354:	f43f af7d 	beq.w	8010252 <_dtoa_r+0x802>
 8010358:	4618      	mov	r0, r3
 801035a:	301c      	adds	r0, #28
 801035c:	e772      	b.n	8010244 <_dtoa_r+0x7f4>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	2b00      	cmp	r3, #0
 8010362:	dc37      	bgt.n	80103d4 <_dtoa_r+0x984>
 8010364:	9b06      	ldr	r3, [sp, #24]
 8010366:	2b02      	cmp	r3, #2
 8010368:	dd34      	ble.n	80103d4 <_dtoa_r+0x984>
 801036a:	9b03      	ldr	r3, [sp, #12]
 801036c:	9302      	str	r3, [sp, #8]
 801036e:	9b02      	ldr	r3, [sp, #8]
 8010370:	b96b      	cbnz	r3, 801038e <_dtoa_r+0x93e>
 8010372:	4631      	mov	r1, r6
 8010374:	2205      	movs	r2, #5
 8010376:	4620      	mov	r0, r4
 8010378:	f000 fbe6 	bl	8010b48 <__multadd>
 801037c:	4601      	mov	r1, r0
 801037e:	4606      	mov	r6, r0
 8010380:	ee18 0a10 	vmov	r0, s16
 8010384:	f000 fe00 	bl	8010f88 <__mcmp>
 8010388:	2800      	cmp	r0, #0
 801038a:	f73f adbb 	bgt.w	800ff04 <_dtoa_r+0x4b4>
 801038e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010390:	9d01      	ldr	r5, [sp, #4]
 8010392:	43db      	mvns	r3, r3
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	f04f 0800 	mov.w	r8, #0
 801039a:	4631      	mov	r1, r6
 801039c:	4620      	mov	r0, r4
 801039e:	f000 fbb1 	bl	8010b04 <_Bfree>
 80103a2:	2f00      	cmp	r7, #0
 80103a4:	f43f aea4 	beq.w	80100f0 <_dtoa_r+0x6a0>
 80103a8:	f1b8 0f00 	cmp.w	r8, #0
 80103ac:	d005      	beq.n	80103ba <_dtoa_r+0x96a>
 80103ae:	45b8      	cmp	r8, r7
 80103b0:	d003      	beq.n	80103ba <_dtoa_r+0x96a>
 80103b2:	4641      	mov	r1, r8
 80103b4:	4620      	mov	r0, r4
 80103b6:	f000 fba5 	bl	8010b04 <_Bfree>
 80103ba:	4639      	mov	r1, r7
 80103bc:	4620      	mov	r0, r4
 80103be:	f000 fba1 	bl	8010b04 <_Bfree>
 80103c2:	e695      	b.n	80100f0 <_dtoa_r+0x6a0>
 80103c4:	2600      	movs	r6, #0
 80103c6:	4637      	mov	r7, r6
 80103c8:	e7e1      	b.n	801038e <_dtoa_r+0x93e>
 80103ca:	9700      	str	r7, [sp, #0]
 80103cc:	4637      	mov	r7, r6
 80103ce:	e599      	b.n	800ff04 <_dtoa_r+0x4b4>
 80103d0:	40240000 	.word	0x40240000
 80103d4:	9b08      	ldr	r3, [sp, #32]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 80ca 	beq.w	8010570 <_dtoa_r+0xb20>
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	9302      	str	r3, [sp, #8]
 80103e0:	2d00      	cmp	r5, #0
 80103e2:	dd05      	ble.n	80103f0 <_dtoa_r+0x9a0>
 80103e4:	4639      	mov	r1, r7
 80103e6:	462a      	mov	r2, r5
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 fd5d 	bl	8010ea8 <__lshift>
 80103ee:	4607      	mov	r7, r0
 80103f0:	f1b8 0f00 	cmp.w	r8, #0
 80103f4:	d05b      	beq.n	80104ae <_dtoa_r+0xa5e>
 80103f6:	6879      	ldr	r1, [r7, #4]
 80103f8:	4620      	mov	r0, r4
 80103fa:	f000 fb43 	bl	8010a84 <_Balloc>
 80103fe:	4605      	mov	r5, r0
 8010400:	b928      	cbnz	r0, 801040e <_dtoa_r+0x9be>
 8010402:	4b87      	ldr	r3, [pc, #540]	; (8010620 <_dtoa_r+0xbd0>)
 8010404:	4602      	mov	r2, r0
 8010406:	f240 21ea 	movw	r1, #746	; 0x2ea
 801040a:	f7ff bb3b 	b.w	800fa84 <_dtoa_r+0x34>
 801040e:	693a      	ldr	r2, [r7, #16]
 8010410:	3202      	adds	r2, #2
 8010412:	0092      	lsls	r2, r2, #2
 8010414:	f107 010c 	add.w	r1, r7, #12
 8010418:	300c      	adds	r0, #12
 801041a:	f7fe fbd9 	bl	800ebd0 <memcpy>
 801041e:	2201      	movs	r2, #1
 8010420:	4629      	mov	r1, r5
 8010422:	4620      	mov	r0, r4
 8010424:	f000 fd40 	bl	8010ea8 <__lshift>
 8010428:	9b01      	ldr	r3, [sp, #4]
 801042a:	f103 0901 	add.w	r9, r3, #1
 801042e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010432:	4413      	add	r3, r2
 8010434:	9305      	str	r3, [sp, #20]
 8010436:	f00a 0301 	and.w	r3, sl, #1
 801043a:	46b8      	mov	r8, r7
 801043c:	9304      	str	r3, [sp, #16]
 801043e:	4607      	mov	r7, r0
 8010440:	4631      	mov	r1, r6
 8010442:	ee18 0a10 	vmov	r0, s16
 8010446:	f7ff fa75 	bl	800f934 <quorem>
 801044a:	4641      	mov	r1, r8
 801044c:	9002      	str	r0, [sp, #8]
 801044e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010452:	ee18 0a10 	vmov	r0, s16
 8010456:	f000 fd97 	bl	8010f88 <__mcmp>
 801045a:	463a      	mov	r2, r7
 801045c:	9003      	str	r0, [sp, #12]
 801045e:	4631      	mov	r1, r6
 8010460:	4620      	mov	r0, r4
 8010462:	f000 fdad 	bl	8010fc0 <__mdiff>
 8010466:	68c2      	ldr	r2, [r0, #12]
 8010468:	f109 3bff 	add.w	fp, r9, #4294967295
 801046c:	4605      	mov	r5, r0
 801046e:	bb02      	cbnz	r2, 80104b2 <_dtoa_r+0xa62>
 8010470:	4601      	mov	r1, r0
 8010472:	ee18 0a10 	vmov	r0, s16
 8010476:	f000 fd87 	bl	8010f88 <__mcmp>
 801047a:	4602      	mov	r2, r0
 801047c:	4629      	mov	r1, r5
 801047e:	4620      	mov	r0, r4
 8010480:	9207      	str	r2, [sp, #28]
 8010482:	f000 fb3f 	bl	8010b04 <_Bfree>
 8010486:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801048a:	ea43 0102 	orr.w	r1, r3, r2
 801048e:	9b04      	ldr	r3, [sp, #16]
 8010490:	430b      	orrs	r3, r1
 8010492:	464d      	mov	r5, r9
 8010494:	d10f      	bne.n	80104b6 <_dtoa_r+0xa66>
 8010496:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801049a:	d02a      	beq.n	80104f2 <_dtoa_r+0xaa2>
 801049c:	9b03      	ldr	r3, [sp, #12]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	dd02      	ble.n	80104a8 <_dtoa_r+0xa58>
 80104a2:	9b02      	ldr	r3, [sp, #8]
 80104a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80104a8:	f88b a000 	strb.w	sl, [fp]
 80104ac:	e775      	b.n	801039a <_dtoa_r+0x94a>
 80104ae:	4638      	mov	r0, r7
 80104b0:	e7ba      	b.n	8010428 <_dtoa_r+0x9d8>
 80104b2:	2201      	movs	r2, #1
 80104b4:	e7e2      	b.n	801047c <_dtoa_r+0xa2c>
 80104b6:	9b03      	ldr	r3, [sp, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	db04      	blt.n	80104c6 <_dtoa_r+0xa76>
 80104bc:	9906      	ldr	r1, [sp, #24]
 80104be:	430b      	orrs	r3, r1
 80104c0:	9904      	ldr	r1, [sp, #16]
 80104c2:	430b      	orrs	r3, r1
 80104c4:	d122      	bne.n	801050c <_dtoa_r+0xabc>
 80104c6:	2a00      	cmp	r2, #0
 80104c8:	ddee      	ble.n	80104a8 <_dtoa_r+0xa58>
 80104ca:	ee18 1a10 	vmov	r1, s16
 80104ce:	2201      	movs	r2, #1
 80104d0:	4620      	mov	r0, r4
 80104d2:	f000 fce9 	bl	8010ea8 <__lshift>
 80104d6:	4631      	mov	r1, r6
 80104d8:	ee08 0a10 	vmov	s16, r0
 80104dc:	f000 fd54 	bl	8010f88 <__mcmp>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	dc03      	bgt.n	80104ec <_dtoa_r+0xa9c>
 80104e4:	d1e0      	bne.n	80104a8 <_dtoa_r+0xa58>
 80104e6:	f01a 0f01 	tst.w	sl, #1
 80104ea:	d0dd      	beq.n	80104a8 <_dtoa_r+0xa58>
 80104ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80104f0:	d1d7      	bne.n	80104a2 <_dtoa_r+0xa52>
 80104f2:	2339      	movs	r3, #57	; 0x39
 80104f4:	f88b 3000 	strb.w	r3, [fp]
 80104f8:	462b      	mov	r3, r5
 80104fa:	461d      	mov	r5, r3
 80104fc:	3b01      	subs	r3, #1
 80104fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010502:	2a39      	cmp	r2, #57	; 0x39
 8010504:	d071      	beq.n	80105ea <_dtoa_r+0xb9a>
 8010506:	3201      	adds	r2, #1
 8010508:	701a      	strb	r2, [r3, #0]
 801050a:	e746      	b.n	801039a <_dtoa_r+0x94a>
 801050c:	2a00      	cmp	r2, #0
 801050e:	dd07      	ble.n	8010520 <_dtoa_r+0xad0>
 8010510:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010514:	d0ed      	beq.n	80104f2 <_dtoa_r+0xaa2>
 8010516:	f10a 0301 	add.w	r3, sl, #1
 801051a:	f88b 3000 	strb.w	r3, [fp]
 801051e:	e73c      	b.n	801039a <_dtoa_r+0x94a>
 8010520:	9b05      	ldr	r3, [sp, #20]
 8010522:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010526:	4599      	cmp	r9, r3
 8010528:	d047      	beq.n	80105ba <_dtoa_r+0xb6a>
 801052a:	ee18 1a10 	vmov	r1, s16
 801052e:	2300      	movs	r3, #0
 8010530:	220a      	movs	r2, #10
 8010532:	4620      	mov	r0, r4
 8010534:	f000 fb08 	bl	8010b48 <__multadd>
 8010538:	45b8      	cmp	r8, r7
 801053a:	ee08 0a10 	vmov	s16, r0
 801053e:	f04f 0300 	mov.w	r3, #0
 8010542:	f04f 020a 	mov.w	r2, #10
 8010546:	4641      	mov	r1, r8
 8010548:	4620      	mov	r0, r4
 801054a:	d106      	bne.n	801055a <_dtoa_r+0xb0a>
 801054c:	f000 fafc 	bl	8010b48 <__multadd>
 8010550:	4680      	mov	r8, r0
 8010552:	4607      	mov	r7, r0
 8010554:	f109 0901 	add.w	r9, r9, #1
 8010558:	e772      	b.n	8010440 <_dtoa_r+0x9f0>
 801055a:	f000 faf5 	bl	8010b48 <__multadd>
 801055e:	4639      	mov	r1, r7
 8010560:	4680      	mov	r8, r0
 8010562:	2300      	movs	r3, #0
 8010564:	220a      	movs	r2, #10
 8010566:	4620      	mov	r0, r4
 8010568:	f000 faee 	bl	8010b48 <__multadd>
 801056c:	4607      	mov	r7, r0
 801056e:	e7f1      	b.n	8010554 <_dtoa_r+0xb04>
 8010570:	9b03      	ldr	r3, [sp, #12]
 8010572:	9302      	str	r3, [sp, #8]
 8010574:	9d01      	ldr	r5, [sp, #4]
 8010576:	ee18 0a10 	vmov	r0, s16
 801057a:	4631      	mov	r1, r6
 801057c:	f7ff f9da 	bl	800f934 <quorem>
 8010580:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010584:	9b01      	ldr	r3, [sp, #4]
 8010586:	f805 ab01 	strb.w	sl, [r5], #1
 801058a:	1aea      	subs	r2, r5, r3
 801058c:	9b02      	ldr	r3, [sp, #8]
 801058e:	4293      	cmp	r3, r2
 8010590:	dd09      	ble.n	80105a6 <_dtoa_r+0xb56>
 8010592:	ee18 1a10 	vmov	r1, s16
 8010596:	2300      	movs	r3, #0
 8010598:	220a      	movs	r2, #10
 801059a:	4620      	mov	r0, r4
 801059c:	f000 fad4 	bl	8010b48 <__multadd>
 80105a0:	ee08 0a10 	vmov	s16, r0
 80105a4:	e7e7      	b.n	8010576 <_dtoa_r+0xb26>
 80105a6:	9b02      	ldr	r3, [sp, #8]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	bfc8      	it	gt
 80105ac:	461d      	movgt	r5, r3
 80105ae:	9b01      	ldr	r3, [sp, #4]
 80105b0:	bfd8      	it	le
 80105b2:	2501      	movle	r5, #1
 80105b4:	441d      	add	r5, r3
 80105b6:	f04f 0800 	mov.w	r8, #0
 80105ba:	ee18 1a10 	vmov	r1, s16
 80105be:	2201      	movs	r2, #1
 80105c0:	4620      	mov	r0, r4
 80105c2:	f000 fc71 	bl	8010ea8 <__lshift>
 80105c6:	4631      	mov	r1, r6
 80105c8:	ee08 0a10 	vmov	s16, r0
 80105cc:	f000 fcdc 	bl	8010f88 <__mcmp>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	dc91      	bgt.n	80104f8 <_dtoa_r+0xaa8>
 80105d4:	d102      	bne.n	80105dc <_dtoa_r+0xb8c>
 80105d6:	f01a 0f01 	tst.w	sl, #1
 80105da:	d18d      	bne.n	80104f8 <_dtoa_r+0xaa8>
 80105dc:	462b      	mov	r3, r5
 80105de:	461d      	mov	r5, r3
 80105e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105e4:	2a30      	cmp	r2, #48	; 0x30
 80105e6:	d0fa      	beq.n	80105de <_dtoa_r+0xb8e>
 80105e8:	e6d7      	b.n	801039a <_dtoa_r+0x94a>
 80105ea:	9a01      	ldr	r2, [sp, #4]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d184      	bne.n	80104fa <_dtoa_r+0xaaa>
 80105f0:	9b00      	ldr	r3, [sp, #0]
 80105f2:	3301      	adds	r3, #1
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	2331      	movs	r3, #49	; 0x31
 80105f8:	7013      	strb	r3, [r2, #0]
 80105fa:	e6ce      	b.n	801039a <_dtoa_r+0x94a>
 80105fc:	4b09      	ldr	r3, [pc, #36]	; (8010624 <_dtoa_r+0xbd4>)
 80105fe:	f7ff ba95 	b.w	800fb2c <_dtoa_r+0xdc>
 8010602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010604:	2b00      	cmp	r3, #0
 8010606:	f47f aa6e 	bne.w	800fae6 <_dtoa_r+0x96>
 801060a:	4b07      	ldr	r3, [pc, #28]	; (8010628 <_dtoa_r+0xbd8>)
 801060c:	f7ff ba8e 	b.w	800fb2c <_dtoa_r+0xdc>
 8010610:	9b02      	ldr	r3, [sp, #8]
 8010612:	2b00      	cmp	r3, #0
 8010614:	dcae      	bgt.n	8010574 <_dtoa_r+0xb24>
 8010616:	9b06      	ldr	r3, [sp, #24]
 8010618:	2b02      	cmp	r3, #2
 801061a:	f73f aea8 	bgt.w	801036e <_dtoa_r+0x91e>
 801061e:	e7a9      	b.n	8010574 <_dtoa_r+0xb24>
 8010620:	0801228b 	.word	0x0801228b
 8010624:	080121e8 	.word	0x080121e8
 8010628:	0801220c 	.word	0x0801220c

0801062c <__sflush_r>:
 801062c:	898a      	ldrh	r2, [r1, #12]
 801062e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010632:	4605      	mov	r5, r0
 8010634:	0710      	lsls	r0, r2, #28
 8010636:	460c      	mov	r4, r1
 8010638:	d458      	bmi.n	80106ec <__sflush_r+0xc0>
 801063a:	684b      	ldr	r3, [r1, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	dc05      	bgt.n	801064c <__sflush_r+0x20>
 8010640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010642:	2b00      	cmp	r3, #0
 8010644:	dc02      	bgt.n	801064c <__sflush_r+0x20>
 8010646:	2000      	movs	r0, #0
 8010648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801064c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801064e:	2e00      	cmp	r6, #0
 8010650:	d0f9      	beq.n	8010646 <__sflush_r+0x1a>
 8010652:	2300      	movs	r3, #0
 8010654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010658:	682f      	ldr	r7, [r5, #0]
 801065a:	602b      	str	r3, [r5, #0]
 801065c:	d032      	beq.n	80106c4 <__sflush_r+0x98>
 801065e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	075a      	lsls	r2, r3, #29
 8010664:	d505      	bpl.n	8010672 <__sflush_r+0x46>
 8010666:	6863      	ldr	r3, [r4, #4]
 8010668:	1ac0      	subs	r0, r0, r3
 801066a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801066c:	b10b      	cbz	r3, 8010672 <__sflush_r+0x46>
 801066e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010670:	1ac0      	subs	r0, r0, r3
 8010672:	2300      	movs	r3, #0
 8010674:	4602      	mov	r2, r0
 8010676:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010678:	6a21      	ldr	r1, [r4, #32]
 801067a:	4628      	mov	r0, r5
 801067c:	47b0      	blx	r6
 801067e:	1c43      	adds	r3, r0, #1
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	d106      	bne.n	8010692 <__sflush_r+0x66>
 8010684:	6829      	ldr	r1, [r5, #0]
 8010686:	291d      	cmp	r1, #29
 8010688:	d82c      	bhi.n	80106e4 <__sflush_r+0xb8>
 801068a:	4a2a      	ldr	r2, [pc, #168]	; (8010734 <__sflush_r+0x108>)
 801068c:	40ca      	lsrs	r2, r1
 801068e:	07d6      	lsls	r6, r2, #31
 8010690:	d528      	bpl.n	80106e4 <__sflush_r+0xb8>
 8010692:	2200      	movs	r2, #0
 8010694:	6062      	str	r2, [r4, #4]
 8010696:	04d9      	lsls	r1, r3, #19
 8010698:	6922      	ldr	r2, [r4, #16]
 801069a:	6022      	str	r2, [r4, #0]
 801069c:	d504      	bpl.n	80106a8 <__sflush_r+0x7c>
 801069e:	1c42      	adds	r2, r0, #1
 80106a0:	d101      	bne.n	80106a6 <__sflush_r+0x7a>
 80106a2:	682b      	ldr	r3, [r5, #0]
 80106a4:	b903      	cbnz	r3, 80106a8 <__sflush_r+0x7c>
 80106a6:	6560      	str	r0, [r4, #84]	; 0x54
 80106a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106aa:	602f      	str	r7, [r5, #0]
 80106ac:	2900      	cmp	r1, #0
 80106ae:	d0ca      	beq.n	8010646 <__sflush_r+0x1a>
 80106b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106b4:	4299      	cmp	r1, r3
 80106b6:	d002      	beq.n	80106be <__sflush_r+0x92>
 80106b8:	4628      	mov	r0, r5
 80106ba:	f000 fd7d 	bl	80111b8 <_free_r>
 80106be:	2000      	movs	r0, #0
 80106c0:	6360      	str	r0, [r4, #52]	; 0x34
 80106c2:	e7c1      	b.n	8010648 <__sflush_r+0x1c>
 80106c4:	6a21      	ldr	r1, [r4, #32]
 80106c6:	2301      	movs	r3, #1
 80106c8:	4628      	mov	r0, r5
 80106ca:	47b0      	blx	r6
 80106cc:	1c41      	adds	r1, r0, #1
 80106ce:	d1c7      	bne.n	8010660 <__sflush_r+0x34>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d0c4      	beq.n	8010660 <__sflush_r+0x34>
 80106d6:	2b1d      	cmp	r3, #29
 80106d8:	d001      	beq.n	80106de <__sflush_r+0xb2>
 80106da:	2b16      	cmp	r3, #22
 80106dc:	d101      	bne.n	80106e2 <__sflush_r+0xb6>
 80106de:	602f      	str	r7, [r5, #0]
 80106e0:	e7b1      	b.n	8010646 <__sflush_r+0x1a>
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e8:	81a3      	strh	r3, [r4, #12]
 80106ea:	e7ad      	b.n	8010648 <__sflush_r+0x1c>
 80106ec:	690f      	ldr	r7, [r1, #16]
 80106ee:	2f00      	cmp	r7, #0
 80106f0:	d0a9      	beq.n	8010646 <__sflush_r+0x1a>
 80106f2:	0793      	lsls	r3, r2, #30
 80106f4:	680e      	ldr	r6, [r1, #0]
 80106f6:	bf08      	it	eq
 80106f8:	694b      	ldreq	r3, [r1, #20]
 80106fa:	600f      	str	r7, [r1, #0]
 80106fc:	bf18      	it	ne
 80106fe:	2300      	movne	r3, #0
 8010700:	eba6 0807 	sub.w	r8, r6, r7
 8010704:	608b      	str	r3, [r1, #8]
 8010706:	f1b8 0f00 	cmp.w	r8, #0
 801070a:	dd9c      	ble.n	8010646 <__sflush_r+0x1a>
 801070c:	6a21      	ldr	r1, [r4, #32]
 801070e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010710:	4643      	mov	r3, r8
 8010712:	463a      	mov	r2, r7
 8010714:	4628      	mov	r0, r5
 8010716:	47b0      	blx	r6
 8010718:	2800      	cmp	r0, #0
 801071a:	dc06      	bgt.n	801072a <__sflush_r+0xfe>
 801071c:	89a3      	ldrh	r3, [r4, #12]
 801071e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010722:	81a3      	strh	r3, [r4, #12]
 8010724:	f04f 30ff 	mov.w	r0, #4294967295
 8010728:	e78e      	b.n	8010648 <__sflush_r+0x1c>
 801072a:	4407      	add	r7, r0
 801072c:	eba8 0800 	sub.w	r8, r8, r0
 8010730:	e7e9      	b.n	8010706 <__sflush_r+0xda>
 8010732:	bf00      	nop
 8010734:	20400001 	.word	0x20400001

08010738 <_fflush_r>:
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	690b      	ldr	r3, [r1, #16]
 801073c:	4605      	mov	r5, r0
 801073e:	460c      	mov	r4, r1
 8010740:	b913      	cbnz	r3, 8010748 <_fflush_r+0x10>
 8010742:	2500      	movs	r5, #0
 8010744:	4628      	mov	r0, r5
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	b118      	cbz	r0, 8010752 <_fflush_r+0x1a>
 801074a:	6983      	ldr	r3, [r0, #24]
 801074c:	b90b      	cbnz	r3, 8010752 <_fflush_r+0x1a>
 801074e:	f000 f887 	bl	8010860 <__sinit>
 8010752:	4b14      	ldr	r3, [pc, #80]	; (80107a4 <_fflush_r+0x6c>)
 8010754:	429c      	cmp	r4, r3
 8010756:	d11b      	bne.n	8010790 <_fflush_r+0x58>
 8010758:	686c      	ldr	r4, [r5, #4]
 801075a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d0ef      	beq.n	8010742 <_fflush_r+0xa>
 8010762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010764:	07d0      	lsls	r0, r2, #31
 8010766:	d404      	bmi.n	8010772 <_fflush_r+0x3a>
 8010768:	0599      	lsls	r1, r3, #22
 801076a:	d402      	bmi.n	8010772 <_fflush_r+0x3a>
 801076c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801076e:	f000 f91a 	bl	80109a6 <__retarget_lock_acquire_recursive>
 8010772:	4628      	mov	r0, r5
 8010774:	4621      	mov	r1, r4
 8010776:	f7ff ff59 	bl	801062c <__sflush_r>
 801077a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801077c:	07da      	lsls	r2, r3, #31
 801077e:	4605      	mov	r5, r0
 8010780:	d4e0      	bmi.n	8010744 <_fflush_r+0xc>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	059b      	lsls	r3, r3, #22
 8010786:	d4dd      	bmi.n	8010744 <_fflush_r+0xc>
 8010788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801078a:	f000 f90d 	bl	80109a8 <__retarget_lock_release_recursive>
 801078e:	e7d9      	b.n	8010744 <_fflush_r+0xc>
 8010790:	4b05      	ldr	r3, [pc, #20]	; (80107a8 <_fflush_r+0x70>)
 8010792:	429c      	cmp	r4, r3
 8010794:	d101      	bne.n	801079a <_fflush_r+0x62>
 8010796:	68ac      	ldr	r4, [r5, #8]
 8010798:	e7df      	b.n	801075a <_fflush_r+0x22>
 801079a:	4b04      	ldr	r3, [pc, #16]	; (80107ac <_fflush_r+0x74>)
 801079c:	429c      	cmp	r4, r3
 801079e:	bf08      	it	eq
 80107a0:	68ec      	ldreq	r4, [r5, #12]
 80107a2:	e7da      	b.n	801075a <_fflush_r+0x22>
 80107a4:	080122bc 	.word	0x080122bc
 80107a8:	080122dc 	.word	0x080122dc
 80107ac:	0801229c 	.word	0x0801229c

080107b0 <std>:
 80107b0:	2300      	movs	r3, #0
 80107b2:	b510      	push	{r4, lr}
 80107b4:	4604      	mov	r4, r0
 80107b6:	e9c0 3300 	strd	r3, r3, [r0]
 80107ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107be:	6083      	str	r3, [r0, #8]
 80107c0:	8181      	strh	r1, [r0, #12]
 80107c2:	6643      	str	r3, [r0, #100]	; 0x64
 80107c4:	81c2      	strh	r2, [r0, #14]
 80107c6:	6183      	str	r3, [r0, #24]
 80107c8:	4619      	mov	r1, r3
 80107ca:	2208      	movs	r2, #8
 80107cc:	305c      	adds	r0, #92	; 0x5c
 80107ce:	f7fe fa0d 	bl	800ebec <memset>
 80107d2:	4b05      	ldr	r3, [pc, #20]	; (80107e8 <std+0x38>)
 80107d4:	6263      	str	r3, [r4, #36]	; 0x24
 80107d6:	4b05      	ldr	r3, [pc, #20]	; (80107ec <std+0x3c>)
 80107d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80107da:	4b05      	ldr	r3, [pc, #20]	; (80107f0 <std+0x40>)
 80107dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107de:	4b05      	ldr	r3, [pc, #20]	; (80107f4 <std+0x44>)
 80107e0:	6224      	str	r4, [r4, #32]
 80107e2:	6323      	str	r3, [r4, #48]	; 0x30
 80107e4:	bd10      	pop	{r4, pc}
 80107e6:	bf00      	nop
 80107e8:	080116dd 	.word	0x080116dd
 80107ec:	080116ff 	.word	0x080116ff
 80107f0:	08011737 	.word	0x08011737
 80107f4:	0801175b 	.word	0x0801175b

080107f8 <_cleanup_r>:
 80107f8:	4901      	ldr	r1, [pc, #4]	; (8010800 <_cleanup_r+0x8>)
 80107fa:	f000 b8af 	b.w	801095c <_fwalk_reent>
 80107fe:	bf00      	nop
 8010800:	08010739 	.word	0x08010739

08010804 <__sfmoreglue>:
 8010804:	b570      	push	{r4, r5, r6, lr}
 8010806:	2268      	movs	r2, #104	; 0x68
 8010808:	1e4d      	subs	r5, r1, #1
 801080a:	4355      	muls	r5, r2
 801080c:	460e      	mov	r6, r1
 801080e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010812:	f000 fd3d 	bl	8011290 <_malloc_r>
 8010816:	4604      	mov	r4, r0
 8010818:	b140      	cbz	r0, 801082c <__sfmoreglue+0x28>
 801081a:	2100      	movs	r1, #0
 801081c:	e9c0 1600 	strd	r1, r6, [r0]
 8010820:	300c      	adds	r0, #12
 8010822:	60a0      	str	r0, [r4, #8]
 8010824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010828:	f7fe f9e0 	bl	800ebec <memset>
 801082c:	4620      	mov	r0, r4
 801082e:	bd70      	pop	{r4, r5, r6, pc}

08010830 <__sfp_lock_acquire>:
 8010830:	4801      	ldr	r0, [pc, #4]	; (8010838 <__sfp_lock_acquire+0x8>)
 8010832:	f000 b8b8 	b.w	80109a6 <__retarget_lock_acquire_recursive>
 8010836:	bf00      	nop
 8010838:	20010d59 	.word	0x20010d59

0801083c <__sfp_lock_release>:
 801083c:	4801      	ldr	r0, [pc, #4]	; (8010844 <__sfp_lock_release+0x8>)
 801083e:	f000 b8b3 	b.w	80109a8 <__retarget_lock_release_recursive>
 8010842:	bf00      	nop
 8010844:	20010d59 	.word	0x20010d59

08010848 <__sinit_lock_acquire>:
 8010848:	4801      	ldr	r0, [pc, #4]	; (8010850 <__sinit_lock_acquire+0x8>)
 801084a:	f000 b8ac 	b.w	80109a6 <__retarget_lock_acquire_recursive>
 801084e:	bf00      	nop
 8010850:	20010d5a 	.word	0x20010d5a

08010854 <__sinit_lock_release>:
 8010854:	4801      	ldr	r0, [pc, #4]	; (801085c <__sinit_lock_release+0x8>)
 8010856:	f000 b8a7 	b.w	80109a8 <__retarget_lock_release_recursive>
 801085a:	bf00      	nop
 801085c:	20010d5a 	.word	0x20010d5a

08010860 <__sinit>:
 8010860:	b510      	push	{r4, lr}
 8010862:	4604      	mov	r4, r0
 8010864:	f7ff fff0 	bl	8010848 <__sinit_lock_acquire>
 8010868:	69a3      	ldr	r3, [r4, #24]
 801086a:	b11b      	cbz	r3, 8010874 <__sinit+0x14>
 801086c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010870:	f7ff bff0 	b.w	8010854 <__sinit_lock_release>
 8010874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010878:	6523      	str	r3, [r4, #80]	; 0x50
 801087a:	4b13      	ldr	r3, [pc, #76]	; (80108c8 <__sinit+0x68>)
 801087c:	4a13      	ldr	r2, [pc, #76]	; (80108cc <__sinit+0x6c>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	62a2      	str	r2, [r4, #40]	; 0x28
 8010882:	42a3      	cmp	r3, r4
 8010884:	bf04      	itt	eq
 8010886:	2301      	moveq	r3, #1
 8010888:	61a3      	streq	r3, [r4, #24]
 801088a:	4620      	mov	r0, r4
 801088c:	f000 f820 	bl	80108d0 <__sfp>
 8010890:	6060      	str	r0, [r4, #4]
 8010892:	4620      	mov	r0, r4
 8010894:	f000 f81c 	bl	80108d0 <__sfp>
 8010898:	60a0      	str	r0, [r4, #8]
 801089a:	4620      	mov	r0, r4
 801089c:	f000 f818 	bl	80108d0 <__sfp>
 80108a0:	2200      	movs	r2, #0
 80108a2:	60e0      	str	r0, [r4, #12]
 80108a4:	2104      	movs	r1, #4
 80108a6:	6860      	ldr	r0, [r4, #4]
 80108a8:	f7ff ff82 	bl	80107b0 <std>
 80108ac:	68a0      	ldr	r0, [r4, #8]
 80108ae:	2201      	movs	r2, #1
 80108b0:	2109      	movs	r1, #9
 80108b2:	f7ff ff7d 	bl	80107b0 <std>
 80108b6:	68e0      	ldr	r0, [r4, #12]
 80108b8:	2202      	movs	r2, #2
 80108ba:	2112      	movs	r1, #18
 80108bc:	f7ff ff78 	bl	80107b0 <std>
 80108c0:	2301      	movs	r3, #1
 80108c2:	61a3      	str	r3, [r4, #24]
 80108c4:	e7d2      	b.n	801086c <__sinit+0xc>
 80108c6:	bf00      	nop
 80108c8:	080121d4 	.word	0x080121d4
 80108cc:	080107f9 	.word	0x080107f9

080108d0 <__sfp>:
 80108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d2:	4607      	mov	r7, r0
 80108d4:	f7ff ffac 	bl	8010830 <__sfp_lock_acquire>
 80108d8:	4b1e      	ldr	r3, [pc, #120]	; (8010954 <__sfp+0x84>)
 80108da:	681e      	ldr	r6, [r3, #0]
 80108dc:	69b3      	ldr	r3, [r6, #24]
 80108de:	b913      	cbnz	r3, 80108e6 <__sfp+0x16>
 80108e0:	4630      	mov	r0, r6
 80108e2:	f7ff ffbd 	bl	8010860 <__sinit>
 80108e6:	3648      	adds	r6, #72	; 0x48
 80108e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	d503      	bpl.n	80108f8 <__sfp+0x28>
 80108f0:	6833      	ldr	r3, [r6, #0]
 80108f2:	b30b      	cbz	r3, 8010938 <__sfp+0x68>
 80108f4:	6836      	ldr	r6, [r6, #0]
 80108f6:	e7f7      	b.n	80108e8 <__sfp+0x18>
 80108f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80108fc:	b9d5      	cbnz	r5, 8010934 <__sfp+0x64>
 80108fe:	4b16      	ldr	r3, [pc, #88]	; (8010958 <__sfp+0x88>)
 8010900:	60e3      	str	r3, [r4, #12]
 8010902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010906:	6665      	str	r5, [r4, #100]	; 0x64
 8010908:	f000 f84c 	bl	80109a4 <__retarget_lock_init_recursive>
 801090c:	f7ff ff96 	bl	801083c <__sfp_lock_release>
 8010910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010918:	6025      	str	r5, [r4, #0]
 801091a:	61a5      	str	r5, [r4, #24]
 801091c:	2208      	movs	r2, #8
 801091e:	4629      	mov	r1, r5
 8010920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010924:	f7fe f962 	bl	800ebec <memset>
 8010928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801092c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010930:	4620      	mov	r0, r4
 8010932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010934:	3468      	adds	r4, #104	; 0x68
 8010936:	e7d9      	b.n	80108ec <__sfp+0x1c>
 8010938:	2104      	movs	r1, #4
 801093a:	4638      	mov	r0, r7
 801093c:	f7ff ff62 	bl	8010804 <__sfmoreglue>
 8010940:	4604      	mov	r4, r0
 8010942:	6030      	str	r0, [r6, #0]
 8010944:	2800      	cmp	r0, #0
 8010946:	d1d5      	bne.n	80108f4 <__sfp+0x24>
 8010948:	f7ff ff78 	bl	801083c <__sfp_lock_release>
 801094c:	230c      	movs	r3, #12
 801094e:	603b      	str	r3, [r7, #0]
 8010950:	e7ee      	b.n	8010930 <__sfp+0x60>
 8010952:	bf00      	nop
 8010954:	080121d4 	.word	0x080121d4
 8010958:	ffff0001 	.word	0xffff0001

0801095c <_fwalk_reent>:
 801095c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010960:	4606      	mov	r6, r0
 8010962:	4688      	mov	r8, r1
 8010964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010968:	2700      	movs	r7, #0
 801096a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801096e:	f1b9 0901 	subs.w	r9, r9, #1
 8010972:	d505      	bpl.n	8010980 <_fwalk_reent+0x24>
 8010974:	6824      	ldr	r4, [r4, #0]
 8010976:	2c00      	cmp	r4, #0
 8010978:	d1f7      	bne.n	801096a <_fwalk_reent+0xe>
 801097a:	4638      	mov	r0, r7
 801097c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010980:	89ab      	ldrh	r3, [r5, #12]
 8010982:	2b01      	cmp	r3, #1
 8010984:	d907      	bls.n	8010996 <_fwalk_reent+0x3a>
 8010986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801098a:	3301      	adds	r3, #1
 801098c:	d003      	beq.n	8010996 <_fwalk_reent+0x3a>
 801098e:	4629      	mov	r1, r5
 8010990:	4630      	mov	r0, r6
 8010992:	47c0      	blx	r8
 8010994:	4307      	orrs	r7, r0
 8010996:	3568      	adds	r5, #104	; 0x68
 8010998:	e7e9      	b.n	801096e <_fwalk_reent+0x12>
	...

0801099c <_localeconv_r>:
 801099c:	4800      	ldr	r0, [pc, #0]	; (80109a0 <_localeconv_r+0x4>)
 801099e:	4770      	bx	lr
 80109a0:	20000168 	.word	0x20000168

080109a4 <__retarget_lock_init_recursive>:
 80109a4:	4770      	bx	lr

080109a6 <__retarget_lock_acquire_recursive>:
 80109a6:	4770      	bx	lr

080109a8 <__retarget_lock_release_recursive>:
 80109a8:	4770      	bx	lr

080109aa <__swhatbuf_r>:
 80109aa:	b570      	push	{r4, r5, r6, lr}
 80109ac:	460e      	mov	r6, r1
 80109ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109b2:	2900      	cmp	r1, #0
 80109b4:	b096      	sub	sp, #88	; 0x58
 80109b6:	4614      	mov	r4, r2
 80109b8:	461d      	mov	r5, r3
 80109ba:	da08      	bge.n	80109ce <__swhatbuf_r+0x24>
 80109bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80109c0:	2200      	movs	r2, #0
 80109c2:	602a      	str	r2, [r5, #0]
 80109c4:	061a      	lsls	r2, r3, #24
 80109c6:	d410      	bmi.n	80109ea <__swhatbuf_r+0x40>
 80109c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109cc:	e00e      	b.n	80109ec <__swhatbuf_r+0x42>
 80109ce:	466a      	mov	r2, sp
 80109d0:	f000 ff1a 	bl	8011808 <_fstat_r>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	dbf1      	blt.n	80109bc <__swhatbuf_r+0x12>
 80109d8:	9a01      	ldr	r2, [sp, #4]
 80109da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80109de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80109e2:	425a      	negs	r2, r3
 80109e4:	415a      	adcs	r2, r3
 80109e6:	602a      	str	r2, [r5, #0]
 80109e8:	e7ee      	b.n	80109c8 <__swhatbuf_r+0x1e>
 80109ea:	2340      	movs	r3, #64	; 0x40
 80109ec:	2000      	movs	r0, #0
 80109ee:	6023      	str	r3, [r4, #0]
 80109f0:	b016      	add	sp, #88	; 0x58
 80109f2:	bd70      	pop	{r4, r5, r6, pc}

080109f4 <__smakebuf_r>:
 80109f4:	898b      	ldrh	r3, [r1, #12]
 80109f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80109f8:	079d      	lsls	r5, r3, #30
 80109fa:	4606      	mov	r6, r0
 80109fc:	460c      	mov	r4, r1
 80109fe:	d507      	bpl.n	8010a10 <__smakebuf_r+0x1c>
 8010a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a04:	6023      	str	r3, [r4, #0]
 8010a06:	6123      	str	r3, [r4, #16]
 8010a08:	2301      	movs	r3, #1
 8010a0a:	6163      	str	r3, [r4, #20]
 8010a0c:	b002      	add	sp, #8
 8010a0e:	bd70      	pop	{r4, r5, r6, pc}
 8010a10:	ab01      	add	r3, sp, #4
 8010a12:	466a      	mov	r2, sp
 8010a14:	f7ff ffc9 	bl	80109aa <__swhatbuf_r>
 8010a18:	9900      	ldr	r1, [sp, #0]
 8010a1a:	4605      	mov	r5, r0
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f000 fc37 	bl	8011290 <_malloc_r>
 8010a22:	b948      	cbnz	r0, 8010a38 <__smakebuf_r+0x44>
 8010a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a28:	059a      	lsls	r2, r3, #22
 8010a2a:	d4ef      	bmi.n	8010a0c <__smakebuf_r+0x18>
 8010a2c:	f023 0303 	bic.w	r3, r3, #3
 8010a30:	f043 0302 	orr.w	r3, r3, #2
 8010a34:	81a3      	strh	r3, [r4, #12]
 8010a36:	e7e3      	b.n	8010a00 <__smakebuf_r+0xc>
 8010a38:	4b0d      	ldr	r3, [pc, #52]	; (8010a70 <__smakebuf_r+0x7c>)
 8010a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010a3c:	89a3      	ldrh	r3, [r4, #12]
 8010a3e:	6020      	str	r0, [r4, #0]
 8010a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a44:	81a3      	strh	r3, [r4, #12]
 8010a46:	9b00      	ldr	r3, [sp, #0]
 8010a48:	6163      	str	r3, [r4, #20]
 8010a4a:	9b01      	ldr	r3, [sp, #4]
 8010a4c:	6120      	str	r0, [r4, #16]
 8010a4e:	b15b      	cbz	r3, 8010a68 <__smakebuf_r+0x74>
 8010a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a54:	4630      	mov	r0, r6
 8010a56:	f000 fee9 	bl	801182c <_isatty_r>
 8010a5a:	b128      	cbz	r0, 8010a68 <__smakebuf_r+0x74>
 8010a5c:	89a3      	ldrh	r3, [r4, #12]
 8010a5e:	f023 0303 	bic.w	r3, r3, #3
 8010a62:	f043 0301 	orr.w	r3, r3, #1
 8010a66:	81a3      	strh	r3, [r4, #12]
 8010a68:	89a0      	ldrh	r0, [r4, #12]
 8010a6a:	4305      	orrs	r5, r0
 8010a6c:	81a5      	strh	r5, [r4, #12]
 8010a6e:	e7cd      	b.n	8010a0c <__smakebuf_r+0x18>
 8010a70:	080107f9 	.word	0x080107f9

08010a74 <malloc>:
 8010a74:	4b02      	ldr	r3, [pc, #8]	; (8010a80 <malloc+0xc>)
 8010a76:	4601      	mov	r1, r0
 8010a78:	6818      	ldr	r0, [r3, #0]
 8010a7a:	f000 bc09 	b.w	8011290 <_malloc_r>
 8010a7e:	bf00      	nop
 8010a80:	20000014 	.word	0x20000014

08010a84 <_Balloc>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a88:	4604      	mov	r4, r0
 8010a8a:	460d      	mov	r5, r1
 8010a8c:	b976      	cbnz	r6, 8010aac <_Balloc+0x28>
 8010a8e:	2010      	movs	r0, #16
 8010a90:	f7ff fff0 	bl	8010a74 <malloc>
 8010a94:	4602      	mov	r2, r0
 8010a96:	6260      	str	r0, [r4, #36]	; 0x24
 8010a98:	b920      	cbnz	r0, 8010aa4 <_Balloc+0x20>
 8010a9a:	4b18      	ldr	r3, [pc, #96]	; (8010afc <_Balloc+0x78>)
 8010a9c:	4818      	ldr	r0, [pc, #96]	; (8010b00 <_Balloc+0x7c>)
 8010a9e:	2166      	movs	r1, #102	; 0x66
 8010aa0:	f000 fe72 	bl	8011788 <__assert_func>
 8010aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010aa8:	6006      	str	r6, [r0, #0]
 8010aaa:	60c6      	str	r6, [r0, #12]
 8010aac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010aae:	68f3      	ldr	r3, [r6, #12]
 8010ab0:	b183      	cbz	r3, 8010ad4 <_Balloc+0x50>
 8010ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010aba:	b9b8      	cbnz	r0, 8010aec <_Balloc+0x68>
 8010abc:	2101      	movs	r1, #1
 8010abe:	fa01 f605 	lsl.w	r6, r1, r5
 8010ac2:	1d72      	adds	r2, r6, #5
 8010ac4:	0092      	lsls	r2, r2, #2
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 fb60 	bl	801118c <_calloc_r>
 8010acc:	b160      	cbz	r0, 8010ae8 <_Balloc+0x64>
 8010ace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ad2:	e00e      	b.n	8010af2 <_Balloc+0x6e>
 8010ad4:	2221      	movs	r2, #33	; 0x21
 8010ad6:	2104      	movs	r1, #4
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 fb57 	bl	801118c <_calloc_r>
 8010ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ae0:	60f0      	str	r0, [r6, #12]
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1e4      	bne.n	8010ab2 <_Balloc+0x2e>
 8010ae8:	2000      	movs	r0, #0
 8010aea:	bd70      	pop	{r4, r5, r6, pc}
 8010aec:	6802      	ldr	r2, [r0, #0]
 8010aee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010af2:	2300      	movs	r3, #0
 8010af4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010af8:	e7f7      	b.n	8010aea <_Balloc+0x66>
 8010afa:	bf00      	nop
 8010afc:	08012219 	.word	0x08012219
 8010b00:	080122fc 	.word	0x080122fc

08010b04 <_Bfree>:
 8010b04:	b570      	push	{r4, r5, r6, lr}
 8010b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b08:	4605      	mov	r5, r0
 8010b0a:	460c      	mov	r4, r1
 8010b0c:	b976      	cbnz	r6, 8010b2c <_Bfree+0x28>
 8010b0e:	2010      	movs	r0, #16
 8010b10:	f7ff ffb0 	bl	8010a74 <malloc>
 8010b14:	4602      	mov	r2, r0
 8010b16:	6268      	str	r0, [r5, #36]	; 0x24
 8010b18:	b920      	cbnz	r0, 8010b24 <_Bfree+0x20>
 8010b1a:	4b09      	ldr	r3, [pc, #36]	; (8010b40 <_Bfree+0x3c>)
 8010b1c:	4809      	ldr	r0, [pc, #36]	; (8010b44 <_Bfree+0x40>)
 8010b1e:	218a      	movs	r1, #138	; 0x8a
 8010b20:	f000 fe32 	bl	8011788 <__assert_func>
 8010b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b28:	6006      	str	r6, [r0, #0]
 8010b2a:	60c6      	str	r6, [r0, #12]
 8010b2c:	b13c      	cbz	r4, 8010b3e <_Bfree+0x3a>
 8010b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b30:	6862      	ldr	r2, [r4, #4]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b38:	6021      	str	r1, [r4, #0]
 8010b3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}
 8010b40:	08012219 	.word	0x08012219
 8010b44:	080122fc 	.word	0x080122fc

08010b48 <__multadd>:
 8010b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4c:	690d      	ldr	r5, [r1, #16]
 8010b4e:	4607      	mov	r7, r0
 8010b50:	460c      	mov	r4, r1
 8010b52:	461e      	mov	r6, r3
 8010b54:	f101 0c14 	add.w	ip, r1, #20
 8010b58:	2000      	movs	r0, #0
 8010b5a:	f8dc 3000 	ldr.w	r3, [ip]
 8010b5e:	b299      	uxth	r1, r3
 8010b60:	fb02 6101 	mla	r1, r2, r1, r6
 8010b64:	0c1e      	lsrs	r6, r3, #16
 8010b66:	0c0b      	lsrs	r3, r1, #16
 8010b68:	fb02 3306 	mla	r3, r2, r6, r3
 8010b6c:	b289      	uxth	r1, r1
 8010b6e:	3001      	adds	r0, #1
 8010b70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b74:	4285      	cmp	r5, r0
 8010b76:	f84c 1b04 	str.w	r1, [ip], #4
 8010b7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b7e:	dcec      	bgt.n	8010b5a <__multadd+0x12>
 8010b80:	b30e      	cbz	r6, 8010bc6 <__multadd+0x7e>
 8010b82:	68a3      	ldr	r3, [r4, #8]
 8010b84:	42ab      	cmp	r3, r5
 8010b86:	dc19      	bgt.n	8010bbc <__multadd+0x74>
 8010b88:	6861      	ldr	r1, [r4, #4]
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	3101      	adds	r1, #1
 8010b8e:	f7ff ff79 	bl	8010a84 <_Balloc>
 8010b92:	4680      	mov	r8, r0
 8010b94:	b928      	cbnz	r0, 8010ba2 <__multadd+0x5a>
 8010b96:	4602      	mov	r2, r0
 8010b98:	4b0c      	ldr	r3, [pc, #48]	; (8010bcc <__multadd+0x84>)
 8010b9a:	480d      	ldr	r0, [pc, #52]	; (8010bd0 <__multadd+0x88>)
 8010b9c:	21b5      	movs	r1, #181	; 0xb5
 8010b9e:	f000 fdf3 	bl	8011788 <__assert_func>
 8010ba2:	6922      	ldr	r2, [r4, #16]
 8010ba4:	3202      	adds	r2, #2
 8010ba6:	f104 010c 	add.w	r1, r4, #12
 8010baa:	0092      	lsls	r2, r2, #2
 8010bac:	300c      	adds	r0, #12
 8010bae:	f7fe f80f 	bl	800ebd0 <memcpy>
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	4638      	mov	r0, r7
 8010bb6:	f7ff ffa5 	bl	8010b04 <_Bfree>
 8010bba:	4644      	mov	r4, r8
 8010bbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010bc0:	3501      	adds	r5, #1
 8010bc2:	615e      	str	r6, [r3, #20]
 8010bc4:	6125      	str	r5, [r4, #16]
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	0801228b 	.word	0x0801228b
 8010bd0:	080122fc 	.word	0x080122fc

08010bd4 <__hi0bits>:
 8010bd4:	0c03      	lsrs	r3, r0, #16
 8010bd6:	041b      	lsls	r3, r3, #16
 8010bd8:	b9d3      	cbnz	r3, 8010c10 <__hi0bits+0x3c>
 8010bda:	0400      	lsls	r0, r0, #16
 8010bdc:	2310      	movs	r3, #16
 8010bde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010be2:	bf04      	itt	eq
 8010be4:	0200      	lsleq	r0, r0, #8
 8010be6:	3308      	addeq	r3, #8
 8010be8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010bec:	bf04      	itt	eq
 8010bee:	0100      	lsleq	r0, r0, #4
 8010bf0:	3304      	addeq	r3, #4
 8010bf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bf6:	bf04      	itt	eq
 8010bf8:	0080      	lsleq	r0, r0, #2
 8010bfa:	3302      	addeq	r3, #2
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	db05      	blt.n	8010c0c <__hi0bits+0x38>
 8010c00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c04:	f103 0301 	add.w	r3, r3, #1
 8010c08:	bf08      	it	eq
 8010c0a:	2320      	moveq	r3, #32
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	4770      	bx	lr
 8010c10:	2300      	movs	r3, #0
 8010c12:	e7e4      	b.n	8010bde <__hi0bits+0xa>

08010c14 <__lo0bits>:
 8010c14:	6803      	ldr	r3, [r0, #0]
 8010c16:	f013 0207 	ands.w	r2, r3, #7
 8010c1a:	4601      	mov	r1, r0
 8010c1c:	d00b      	beq.n	8010c36 <__lo0bits+0x22>
 8010c1e:	07da      	lsls	r2, r3, #31
 8010c20:	d423      	bmi.n	8010c6a <__lo0bits+0x56>
 8010c22:	0798      	lsls	r0, r3, #30
 8010c24:	bf49      	itett	mi
 8010c26:	085b      	lsrmi	r3, r3, #1
 8010c28:	089b      	lsrpl	r3, r3, #2
 8010c2a:	2001      	movmi	r0, #1
 8010c2c:	600b      	strmi	r3, [r1, #0]
 8010c2e:	bf5c      	itt	pl
 8010c30:	600b      	strpl	r3, [r1, #0]
 8010c32:	2002      	movpl	r0, #2
 8010c34:	4770      	bx	lr
 8010c36:	b298      	uxth	r0, r3
 8010c38:	b9a8      	cbnz	r0, 8010c66 <__lo0bits+0x52>
 8010c3a:	0c1b      	lsrs	r3, r3, #16
 8010c3c:	2010      	movs	r0, #16
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	b90a      	cbnz	r2, 8010c46 <__lo0bits+0x32>
 8010c42:	3008      	adds	r0, #8
 8010c44:	0a1b      	lsrs	r3, r3, #8
 8010c46:	071a      	lsls	r2, r3, #28
 8010c48:	bf04      	itt	eq
 8010c4a:	091b      	lsreq	r3, r3, #4
 8010c4c:	3004      	addeq	r0, #4
 8010c4e:	079a      	lsls	r2, r3, #30
 8010c50:	bf04      	itt	eq
 8010c52:	089b      	lsreq	r3, r3, #2
 8010c54:	3002      	addeq	r0, #2
 8010c56:	07da      	lsls	r2, r3, #31
 8010c58:	d403      	bmi.n	8010c62 <__lo0bits+0x4e>
 8010c5a:	085b      	lsrs	r3, r3, #1
 8010c5c:	f100 0001 	add.w	r0, r0, #1
 8010c60:	d005      	beq.n	8010c6e <__lo0bits+0x5a>
 8010c62:	600b      	str	r3, [r1, #0]
 8010c64:	4770      	bx	lr
 8010c66:	4610      	mov	r0, r2
 8010c68:	e7e9      	b.n	8010c3e <__lo0bits+0x2a>
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	4770      	bx	lr
 8010c6e:	2020      	movs	r0, #32
 8010c70:	4770      	bx	lr
	...

08010c74 <__i2b>:
 8010c74:	b510      	push	{r4, lr}
 8010c76:	460c      	mov	r4, r1
 8010c78:	2101      	movs	r1, #1
 8010c7a:	f7ff ff03 	bl	8010a84 <_Balloc>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	b928      	cbnz	r0, 8010c8e <__i2b+0x1a>
 8010c82:	4b05      	ldr	r3, [pc, #20]	; (8010c98 <__i2b+0x24>)
 8010c84:	4805      	ldr	r0, [pc, #20]	; (8010c9c <__i2b+0x28>)
 8010c86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c8a:	f000 fd7d 	bl	8011788 <__assert_func>
 8010c8e:	2301      	movs	r3, #1
 8010c90:	6144      	str	r4, [r0, #20]
 8010c92:	6103      	str	r3, [r0, #16]
 8010c94:	bd10      	pop	{r4, pc}
 8010c96:	bf00      	nop
 8010c98:	0801228b 	.word	0x0801228b
 8010c9c:	080122fc 	.word	0x080122fc

08010ca0 <__multiply>:
 8010ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca4:	4691      	mov	r9, r2
 8010ca6:	690a      	ldr	r2, [r1, #16]
 8010ca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	bfb8      	it	lt
 8010cb0:	460b      	movlt	r3, r1
 8010cb2:	460c      	mov	r4, r1
 8010cb4:	bfbc      	itt	lt
 8010cb6:	464c      	movlt	r4, r9
 8010cb8:	4699      	movlt	r9, r3
 8010cba:	6927      	ldr	r7, [r4, #16]
 8010cbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010cc0:	68a3      	ldr	r3, [r4, #8]
 8010cc2:	6861      	ldr	r1, [r4, #4]
 8010cc4:	eb07 060a 	add.w	r6, r7, sl
 8010cc8:	42b3      	cmp	r3, r6
 8010cca:	b085      	sub	sp, #20
 8010ccc:	bfb8      	it	lt
 8010cce:	3101      	addlt	r1, #1
 8010cd0:	f7ff fed8 	bl	8010a84 <_Balloc>
 8010cd4:	b930      	cbnz	r0, 8010ce4 <__multiply+0x44>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	4b44      	ldr	r3, [pc, #272]	; (8010dec <__multiply+0x14c>)
 8010cda:	4845      	ldr	r0, [pc, #276]	; (8010df0 <__multiply+0x150>)
 8010cdc:	f240 115d 	movw	r1, #349	; 0x15d
 8010ce0:	f000 fd52 	bl	8011788 <__assert_func>
 8010ce4:	f100 0514 	add.w	r5, r0, #20
 8010ce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010cec:	462b      	mov	r3, r5
 8010cee:	2200      	movs	r2, #0
 8010cf0:	4543      	cmp	r3, r8
 8010cf2:	d321      	bcc.n	8010d38 <__multiply+0x98>
 8010cf4:	f104 0314 	add.w	r3, r4, #20
 8010cf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010cfc:	f109 0314 	add.w	r3, r9, #20
 8010d00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010d04:	9202      	str	r2, [sp, #8]
 8010d06:	1b3a      	subs	r2, r7, r4
 8010d08:	3a15      	subs	r2, #21
 8010d0a:	f022 0203 	bic.w	r2, r2, #3
 8010d0e:	3204      	adds	r2, #4
 8010d10:	f104 0115 	add.w	r1, r4, #21
 8010d14:	428f      	cmp	r7, r1
 8010d16:	bf38      	it	cc
 8010d18:	2204      	movcc	r2, #4
 8010d1a:	9201      	str	r2, [sp, #4]
 8010d1c:	9a02      	ldr	r2, [sp, #8]
 8010d1e:	9303      	str	r3, [sp, #12]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d80c      	bhi.n	8010d3e <__multiply+0x9e>
 8010d24:	2e00      	cmp	r6, #0
 8010d26:	dd03      	ble.n	8010d30 <__multiply+0x90>
 8010d28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d05a      	beq.n	8010de6 <__multiply+0x146>
 8010d30:	6106      	str	r6, [r0, #16]
 8010d32:	b005      	add	sp, #20
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d38:	f843 2b04 	str.w	r2, [r3], #4
 8010d3c:	e7d8      	b.n	8010cf0 <__multiply+0x50>
 8010d3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d42:	f1ba 0f00 	cmp.w	sl, #0
 8010d46:	d024      	beq.n	8010d92 <__multiply+0xf2>
 8010d48:	f104 0e14 	add.w	lr, r4, #20
 8010d4c:	46a9      	mov	r9, r5
 8010d4e:	f04f 0c00 	mov.w	ip, #0
 8010d52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d56:	f8d9 1000 	ldr.w	r1, [r9]
 8010d5a:	fa1f fb82 	uxth.w	fp, r2
 8010d5e:	b289      	uxth	r1, r1
 8010d60:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010d68:	f8d9 2000 	ldr.w	r2, [r9]
 8010d6c:	4461      	add	r1, ip
 8010d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d72:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d7a:	b289      	uxth	r1, r1
 8010d7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d80:	4577      	cmp	r7, lr
 8010d82:	f849 1b04 	str.w	r1, [r9], #4
 8010d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d8a:	d8e2      	bhi.n	8010d52 <__multiply+0xb2>
 8010d8c:	9a01      	ldr	r2, [sp, #4]
 8010d8e:	f845 c002 	str.w	ip, [r5, r2]
 8010d92:	9a03      	ldr	r2, [sp, #12]
 8010d94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d98:	3304      	adds	r3, #4
 8010d9a:	f1b9 0f00 	cmp.w	r9, #0
 8010d9e:	d020      	beq.n	8010de2 <__multiply+0x142>
 8010da0:	6829      	ldr	r1, [r5, #0]
 8010da2:	f104 0c14 	add.w	ip, r4, #20
 8010da6:	46ae      	mov	lr, r5
 8010da8:	f04f 0a00 	mov.w	sl, #0
 8010dac:	f8bc b000 	ldrh.w	fp, [ip]
 8010db0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010db4:	fb09 220b 	mla	r2, r9, fp, r2
 8010db8:	4492      	add	sl, r2
 8010dba:	b289      	uxth	r1, r1
 8010dbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010dc0:	f84e 1b04 	str.w	r1, [lr], #4
 8010dc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010dc8:	f8be 1000 	ldrh.w	r1, [lr]
 8010dcc:	0c12      	lsrs	r2, r2, #16
 8010dce:	fb09 1102 	mla	r1, r9, r2, r1
 8010dd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010dd6:	4567      	cmp	r7, ip
 8010dd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ddc:	d8e6      	bhi.n	8010dac <__multiply+0x10c>
 8010dde:	9a01      	ldr	r2, [sp, #4]
 8010de0:	50a9      	str	r1, [r5, r2]
 8010de2:	3504      	adds	r5, #4
 8010de4:	e79a      	b.n	8010d1c <__multiply+0x7c>
 8010de6:	3e01      	subs	r6, #1
 8010de8:	e79c      	b.n	8010d24 <__multiply+0x84>
 8010dea:	bf00      	nop
 8010dec:	0801228b 	.word	0x0801228b
 8010df0:	080122fc 	.word	0x080122fc

08010df4 <__pow5mult>:
 8010df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010df8:	4615      	mov	r5, r2
 8010dfa:	f012 0203 	ands.w	r2, r2, #3
 8010dfe:	4606      	mov	r6, r0
 8010e00:	460f      	mov	r7, r1
 8010e02:	d007      	beq.n	8010e14 <__pow5mult+0x20>
 8010e04:	4c25      	ldr	r4, [pc, #148]	; (8010e9c <__pow5mult+0xa8>)
 8010e06:	3a01      	subs	r2, #1
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e0e:	f7ff fe9b 	bl	8010b48 <__multadd>
 8010e12:	4607      	mov	r7, r0
 8010e14:	10ad      	asrs	r5, r5, #2
 8010e16:	d03d      	beq.n	8010e94 <__pow5mult+0xa0>
 8010e18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e1a:	b97c      	cbnz	r4, 8010e3c <__pow5mult+0x48>
 8010e1c:	2010      	movs	r0, #16
 8010e1e:	f7ff fe29 	bl	8010a74 <malloc>
 8010e22:	4602      	mov	r2, r0
 8010e24:	6270      	str	r0, [r6, #36]	; 0x24
 8010e26:	b928      	cbnz	r0, 8010e34 <__pow5mult+0x40>
 8010e28:	4b1d      	ldr	r3, [pc, #116]	; (8010ea0 <__pow5mult+0xac>)
 8010e2a:	481e      	ldr	r0, [pc, #120]	; (8010ea4 <__pow5mult+0xb0>)
 8010e2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e30:	f000 fcaa 	bl	8011788 <__assert_func>
 8010e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e38:	6004      	str	r4, [r0, #0]
 8010e3a:	60c4      	str	r4, [r0, #12]
 8010e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e44:	b94c      	cbnz	r4, 8010e5a <__pow5mult+0x66>
 8010e46:	f240 2171 	movw	r1, #625	; 0x271
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f7ff ff12 	bl	8010c74 <__i2b>
 8010e50:	2300      	movs	r3, #0
 8010e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e56:	4604      	mov	r4, r0
 8010e58:	6003      	str	r3, [r0, #0]
 8010e5a:	f04f 0900 	mov.w	r9, #0
 8010e5e:	07eb      	lsls	r3, r5, #31
 8010e60:	d50a      	bpl.n	8010e78 <__pow5mult+0x84>
 8010e62:	4639      	mov	r1, r7
 8010e64:	4622      	mov	r2, r4
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7ff ff1a 	bl	8010ca0 <__multiply>
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	4680      	mov	r8, r0
 8010e70:	4630      	mov	r0, r6
 8010e72:	f7ff fe47 	bl	8010b04 <_Bfree>
 8010e76:	4647      	mov	r7, r8
 8010e78:	106d      	asrs	r5, r5, #1
 8010e7a:	d00b      	beq.n	8010e94 <__pow5mult+0xa0>
 8010e7c:	6820      	ldr	r0, [r4, #0]
 8010e7e:	b938      	cbnz	r0, 8010e90 <__pow5mult+0x9c>
 8010e80:	4622      	mov	r2, r4
 8010e82:	4621      	mov	r1, r4
 8010e84:	4630      	mov	r0, r6
 8010e86:	f7ff ff0b 	bl	8010ca0 <__multiply>
 8010e8a:	6020      	str	r0, [r4, #0]
 8010e8c:	f8c0 9000 	str.w	r9, [r0]
 8010e90:	4604      	mov	r4, r0
 8010e92:	e7e4      	b.n	8010e5e <__pow5mult+0x6a>
 8010e94:	4638      	mov	r0, r7
 8010e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e9a:	bf00      	nop
 8010e9c:	08012448 	.word	0x08012448
 8010ea0:	08012219 	.word	0x08012219
 8010ea4:	080122fc 	.word	0x080122fc

08010ea8 <__lshift>:
 8010ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eac:	460c      	mov	r4, r1
 8010eae:	6849      	ldr	r1, [r1, #4]
 8010eb0:	6923      	ldr	r3, [r4, #16]
 8010eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010eb6:	68a3      	ldr	r3, [r4, #8]
 8010eb8:	4607      	mov	r7, r0
 8010eba:	4691      	mov	r9, r2
 8010ebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ec0:	f108 0601 	add.w	r6, r8, #1
 8010ec4:	42b3      	cmp	r3, r6
 8010ec6:	db0b      	blt.n	8010ee0 <__lshift+0x38>
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f7ff fddb 	bl	8010a84 <_Balloc>
 8010ece:	4605      	mov	r5, r0
 8010ed0:	b948      	cbnz	r0, 8010ee6 <__lshift+0x3e>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	4b2a      	ldr	r3, [pc, #168]	; (8010f80 <__lshift+0xd8>)
 8010ed6:	482b      	ldr	r0, [pc, #172]	; (8010f84 <__lshift+0xdc>)
 8010ed8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010edc:	f000 fc54 	bl	8011788 <__assert_func>
 8010ee0:	3101      	adds	r1, #1
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	e7ee      	b.n	8010ec4 <__lshift+0x1c>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f100 0114 	add.w	r1, r0, #20
 8010eec:	f100 0210 	add.w	r2, r0, #16
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	4553      	cmp	r3, sl
 8010ef4:	db37      	blt.n	8010f66 <__lshift+0xbe>
 8010ef6:	6920      	ldr	r0, [r4, #16]
 8010ef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010efc:	f104 0314 	add.w	r3, r4, #20
 8010f00:	f019 091f 	ands.w	r9, r9, #31
 8010f04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010f0c:	d02f      	beq.n	8010f6e <__lshift+0xc6>
 8010f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8010f12:	468a      	mov	sl, r1
 8010f14:	f04f 0c00 	mov.w	ip, #0
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	fa02 f209 	lsl.w	r2, r2, r9
 8010f1e:	ea42 020c 	orr.w	r2, r2, ip
 8010f22:	f84a 2b04 	str.w	r2, [sl], #4
 8010f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f2a:	4298      	cmp	r0, r3
 8010f2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010f30:	d8f2      	bhi.n	8010f18 <__lshift+0x70>
 8010f32:	1b03      	subs	r3, r0, r4
 8010f34:	3b15      	subs	r3, #21
 8010f36:	f023 0303 	bic.w	r3, r3, #3
 8010f3a:	3304      	adds	r3, #4
 8010f3c:	f104 0215 	add.w	r2, r4, #21
 8010f40:	4290      	cmp	r0, r2
 8010f42:	bf38      	it	cc
 8010f44:	2304      	movcc	r3, #4
 8010f46:	f841 c003 	str.w	ip, [r1, r3]
 8010f4a:	f1bc 0f00 	cmp.w	ip, #0
 8010f4e:	d001      	beq.n	8010f54 <__lshift+0xac>
 8010f50:	f108 0602 	add.w	r6, r8, #2
 8010f54:	3e01      	subs	r6, #1
 8010f56:	4638      	mov	r0, r7
 8010f58:	612e      	str	r6, [r5, #16]
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	f7ff fdd2 	bl	8010b04 <_Bfree>
 8010f60:	4628      	mov	r0, r5
 8010f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	e7c1      	b.n	8010ef2 <__lshift+0x4a>
 8010f6e:	3904      	subs	r1, #4
 8010f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f78:	4298      	cmp	r0, r3
 8010f7a:	d8f9      	bhi.n	8010f70 <__lshift+0xc8>
 8010f7c:	e7ea      	b.n	8010f54 <__lshift+0xac>
 8010f7e:	bf00      	nop
 8010f80:	0801228b 	.word	0x0801228b
 8010f84:	080122fc 	.word	0x080122fc

08010f88 <__mcmp>:
 8010f88:	b530      	push	{r4, r5, lr}
 8010f8a:	6902      	ldr	r2, [r0, #16]
 8010f8c:	690c      	ldr	r4, [r1, #16]
 8010f8e:	1b12      	subs	r2, r2, r4
 8010f90:	d10e      	bne.n	8010fb0 <__mcmp+0x28>
 8010f92:	f100 0314 	add.w	r3, r0, #20
 8010f96:	3114      	adds	r1, #20
 8010f98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010fa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010fa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010fa8:	42a5      	cmp	r5, r4
 8010faa:	d003      	beq.n	8010fb4 <__mcmp+0x2c>
 8010fac:	d305      	bcc.n	8010fba <__mcmp+0x32>
 8010fae:	2201      	movs	r2, #1
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	bd30      	pop	{r4, r5, pc}
 8010fb4:	4283      	cmp	r3, r0
 8010fb6:	d3f3      	bcc.n	8010fa0 <__mcmp+0x18>
 8010fb8:	e7fa      	b.n	8010fb0 <__mcmp+0x28>
 8010fba:	f04f 32ff 	mov.w	r2, #4294967295
 8010fbe:	e7f7      	b.n	8010fb0 <__mcmp+0x28>

08010fc0 <__mdiff>:
 8010fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	4611      	mov	r1, r2
 8010fca:	4620      	mov	r0, r4
 8010fcc:	4690      	mov	r8, r2
 8010fce:	f7ff ffdb 	bl	8010f88 <__mcmp>
 8010fd2:	1e05      	subs	r5, r0, #0
 8010fd4:	d110      	bne.n	8010ff8 <__mdiff+0x38>
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f7ff fd53 	bl	8010a84 <_Balloc>
 8010fde:	b930      	cbnz	r0, 8010fee <__mdiff+0x2e>
 8010fe0:	4b3a      	ldr	r3, [pc, #232]	; (80110cc <__mdiff+0x10c>)
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	f240 2132 	movw	r1, #562	; 0x232
 8010fe8:	4839      	ldr	r0, [pc, #228]	; (80110d0 <__mdiff+0x110>)
 8010fea:	f000 fbcd 	bl	8011788 <__assert_func>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff8:	bfa4      	itt	ge
 8010ffa:	4643      	movge	r3, r8
 8010ffc:	46a0      	movge	r8, r4
 8010ffe:	4630      	mov	r0, r6
 8011000:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011004:	bfa6      	itte	ge
 8011006:	461c      	movge	r4, r3
 8011008:	2500      	movge	r5, #0
 801100a:	2501      	movlt	r5, #1
 801100c:	f7ff fd3a 	bl	8010a84 <_Balloc>
 8011010:	b920      	cbnz	r0, 801101c <__mdiff+0x5c>
 8011012:	4b2e      	ldr	r3, [pc, #184]	; (80110cc <__mdiff+0x10c>)
 8011014:	4602      	mov	r2, r0
 8011016:	f44f 7110 	mov.w	r1, #576	; 0x240
 801101a:	e7e5      	b.n	8010fe8 <__mdiff+0x28>
 801101c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011020:	6926      	ldr	r6, [r4, #16]
 8011022:	60c5      	str	r5, [r0, #12]
 8011024:	f104 0914 	add.w	r9, r4, #20
 8011028:	f108 0514 	add.w	r5, r8, #20
 801102c:	f100 0e14 	add.w	lr, r0, #20
 8011030:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011038:	f108 0210 	add.w	r2, r8, #16
 801103c:	46f2      	mov	sl, lr
 801103e:	2100      	movs	r1, #0
 8011040:	f859 3b04 	ldr.w	r3, [r9], #4
 8011044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011048:	fa1f f883 	uxth.w	r8, r3
 801104c:	fa11 f18b 	uxtah	r1, r1, fp
 8011050:	0c1b      	lsrs	r3, r3, #16
 8011052:	eba1 0808 	sub.w	r8, r1, r8
 8011056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801105a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801105e:	fa1f f888 	uxth.w	r8, r8
 8011062:	1419      	asrs	r1, r3, #16
 8011064:	454e      	cmp	r6, r9
 8011066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801106a:	f84a 3b04 	str.w	r3, [sl], #4
 801106e:	d8e7      	bhi.n	8011040 <__mdiff+0x80>
 8011070:	1b33      	subs	r3, r6, r4
 8011072:	3b15      	subs	r3, #21
 8011074:	f023 0303 	bic.w	r3, r3, #3
 8011078:	3304      	adds	r3, #4
 801107a:	3415      	adds	r4, #21
 801107c:	42a6      	cmp	r6, r4
 801107e:	bf38      	it	cc
 8011080:	2304      	movcc	r3, #4
 8011082:	441d      	add	r5, r3
 8011084:	4473      	add	r3, lr
 8011086:	469e      	mov	lr, r3
 8011088:	462e      	mov	r6, r5
 801108a:	4566      	cmp	r6, ip
 801108c:	d30e      	bcc.n	80110ac <__mdiff+0xec>
 801108e:	f10c 0203 	add.w	r2, ip, #3
 8011092:	1b52      	subs	r2, r2, r5
 8011094:	f022 0203 	bic.w	r2, r2, #3
 8011098:	3d03      	subs	r5, #3
 801109a:	45ac      	cmp	ip, r5
 801109c:	bf38      	it	cc
 801109e:	2200      	movcc	r2, #0
 80110a0:	441a      	add	r2, r3
 80110a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80110a6:	b17b      	cbz	r3, 80110c8 <__mdiff+0x108>
 80110a8:	6107      	str	r7, [r0, #16]
 80110aa:	e7a3      	b.n	8010ff4 <__mdiff+0x34>
 80110ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80110b0:	fa11 f288 	uxtah	r2, r1, r8
 80110b4:	1414      	asrs	r4, r2, #16
 80110b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80110ba:	b292      	uxth	r2, r2
 80110bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80110c0:	f84e 2b04 	str.w	r2, [lr], #4
 80110c4:	1421      	asrs	r1, r4, #16
 80110c6:	e7e0      	b.n	801108a <__mdiff+0xca>
 80110c8:	3f01      	subs	r7, #1
 80110ca:	e7ea      	b.n	80110a2 <__mdiff+0xe2>
 80110cc:	0801228b 	.word	0x0801228b
 80110d0:	080122fc 	.word	0x080122fc

080110d4 <__d2b>:
 80110d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110d8:	4689      	mov	r9, r1
 80110da:	2101      	movs	r1, #1
 80110dc:	ec57 6b10 	vmov	r6, r7, d0
 80110e0:	4690      	mov	r8, r2
 80110e2:	f7ff fccf 	bl	8010a84 <_Balloc>
 80110e6:	4604      	mov	r4, r0
 80110e8:	b930      	cbnz	r0, 80110f8 <__d2b+0x24>
 80110ea:	4602      	mov	r2, r0
 80110ec:	4b25      	ldr	r3, [pc, #148]	; (8011184 <__d2b+0xb0>)
 80110ee:	4826      	ldr	r0, [pc, #152]	; (8011188 <__d2b+0xb4>)
 80110f0:	f240 310a 	movw	r1, #778	; 0x30a
 80110f4:	f000 fb48 	bl	8011788 <__assert_func>
 80110f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011100:	bb35      	cbnz	r5, 8011150 <__d2b+0x7c>
 8011102:	2e00      	cmp	r6, #0
 8011104:	9301      	str	r3, [sp, #4]
 8011106:	d028      	beq.n	801115a <__d2b+0x86>
 8011108:	4668      	mov	r0, sp
 801110a:	9600      	str	r6, [sp, #0]
 801110c:	f7ff fd82 	bl	8010c14 <__lo0bits>
 8011110:	9900      	ldr	r1, [sp, #0]
 8011112:	b300      	cbz	r0, 8011156 <__d2b+0x82>
 8011114:	9a01      	ldr	r2, [sp, #4]
 8011116:	f1c0 0320 	rsb	r3, r0, #32
 801111a:	fa02 f303 	lsl.w	r3, r2, r3
 801111e:	430b      	orrs	r3, r1
 8011120:	40c2      	lsrs	r2, r0
 8011122:	6163      	str	r3, [r4, #20]
 8011124:	9201      	str	r2, [sp, #4]
 8011126:	9b01      	ldr	r3, [sp, #4]
 8011128:	61a3      	str	r3, [r4, #24]
 801112a:	2b00      	cmp	r3, #0
 801112c:	bf14      	ite	ne
 801112e:	2202      	movne	r2, #2
 8011130:	2201      	moveq	r2, #1
 8011132:	6122      	str	r2, [r4, #16]
 8011134:	b1d5      	cbz	r5, 801116c <__d2b+0x98>
 8011136:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801113a:	4405      	add	r5, r0
 801113c:	f8c9 5000 	str.w	r5, [r9]
 8011140:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011144:	f8c8 0000 	str.w	r0, [r8]
 8011148:	4620      	mov	r0, r4
 801114a:	b003      	add	sp, #12
 801114c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011154:	e7d5      	b.n	8011102 <__d2b+0x2e>
 8011156:	6161      	str	r1, [r4, #20]
 8011158:	e7e5      	b.n	8011126 <__d2b+0x52>
 801115a:	a801      	add	r0, sp, #4
 801115c:	f7ff fd5a 	bl	8010c14 <__lo0bits>
 8011160:	9b01      	ldr	r3, [sp, #4]
 8011162:	6163      	str	r3, [r4, #20]
 8011164:	2201      	movs	r2, #1
 8011166:	6122      	str	r2, [r4, #16]
 8011168:	3020      	adds	r0, #32
 801116a:	e7e3      	b.n	8011134 <__d2b+0x60>
 801116c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011174:	f8c9 0000 	str.w	r0, [r9]
 8011178:	6918      	ldr	r0, [r3, #16]
 801117a:	f7ff fd2b 	bl	8010bd4 <__hi0bits>
 801117e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011182:	e7df      	b.n	8011144 <__d2b+0x70>
 8011184:	0801228b 	.word	0x0801228b
 8011188:	080122fc 	.word	0x080122fc

0801118c <_calloc_r>:
 801118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801118e:	fba1 2402 	umull	r2, r4, r1, r2
 8011192:	b94c      	cbnz	r4, 80111a8 <_calloc_r+0x1c>
 8011194:	4611      	mov	r1, r2
 8011196:	9201      	str	r2, [sp, #4]
 8011198:	f000 f87a 	bl	8011290 <_malloc_r>
 801119c:	9a01      	ldr	r2, [sp, #4]
 801119e:	4605      	mov	r5, r0
 80111a0:	b930      	cbnz	r0, 80111b0 <_calloc_r+0x24>
 80111a2:	4628      	mov	r0, r5
 80111a4:	b003      	add	sp, #12
 80111a6:	bd30      	pop	{r4, r5, pc}
 80111a8:	220c      	movs	r2, #12
 80111aa:	6002      	str	r2, [r0, #0]
 80111ac:	2500      	movs	r5, #0
 80111ae:	e7f8      	b.n	80111a2 <_calloc_r+0x16>
 80111b0:	4621      	mov	r1, r4
 80111b2:	f7fd fd1b 	bl	800ebec <memset>
 80111b6:	e7f4      	b.n	80111a2 <_calloc_r+0x16>

080111b8 <_free_r>:
 80111b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ba:	2900      	cmp	r1, #0
 80111bc:	d044      	beq.n	8011248 <_free_r+0x90>
 80111be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111c2:	9001      	str	r0, [sp, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f1a1 0404 	sub.w	r4, r1, #4
 80111ca:	bfb8      	it	lt
 80111cc:	18e4      	addlt	r4, r4, r3
 80111ce:	f000 fb61 	bl	8011894 <__malloc_lock>
 80111d2:	4a1e      	ldr	r2, [pc, #120]	; (801124c <_free_r+0x94>)
 80111d4:	9801      	ldr	r0, [sp, #4]
 80111d6:	6813      	ldr	r3, [r2, #0]
 80111d8:	b933      	cbnz	r3, 80111e8 <_free_r+0x30>
 80111da:	6063      	str	r3, [r4, #4]
 80111dc:	6014      	str	r4, [r2, #0]
 80111de:	b003      	add	sp, #12
 80111e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111e4:	f000 bb5c 	b.w	80118a0 <__malloc_unlock>
 80111e8:	42a3      	cmp	r3, r4
 80111ea:	d908      	bls.n	80111fe <_free_r+0x46>
 80111ec:	6825      	ldr	r5, [r4, #0]
 80111ee:	1961      	adds	r1, r4, r5
 80111f0:	428b      	cmp	r3, r1
 80111f2:	bf01      	itttt	eq
 80111f4:	6819      	ldreq	r1, [r3, #0]
 80111f6:	685b      	ldreq	r3, [r3, #4]
 80111f8:	1949      	addeq	r1, r1, r5
 80111fa:	6021      	streq	r1, [r4, #0]
 80111fc:	e7ed      	b.n	80111da <_free_r+0x22>
 80111fe:	461a      	mov	r2, r3
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	b10b      	cbz	r3, 8011208 <_free_r+0x50>
 8011204:	42a3      	cmp	r3, r4
 8011206:	d9fa      	bls.n	80111fe <_free_r+0x46>
 8011208:	6811      	ldr	r1, [r2, #0]
 801120a:	1855      	adds	r5, r2, r1
 801120c:	42a5      	cmp	r5, r4
 801120e:	d10b      	bne.n	8011228 <_free_r+0x70>
 8011210:	6824      	ldr	r4, [r4, #0]
 8011212:	4421      	add	r1, r4
 8011214:	1854      	adds	r4, r2, r1
 8011216:	42a3      	cmp	r3, r4
 8011218:	6011      	str	r1, [r2, #0]
 801121a:	d1e0      	bne.n	80111de <_free_r+0x26>
 801121c:	681c      	ldr	r4, [r3, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	6053      	str	r3, [r2, #4]
 8011222:	4421      	add	r1, r4
 8011224:	6011      	str	r1, [r2, #0]
 8011226:	e7da      	b.n	80111de <_free_r+0x26>
 8011228:	d902      	bls.n	8011230 <_free_r+0x78>
 801122a:	230c      	movs	r3, #12
 801122c:	6003      	str	r3, [r0, #0]
 801122e:	e7d6      	b.n	80111de <_free_r+0x26>
 8011230:	6825      	ldr	r5, [r4, #0]
 8011232:	1961      	adds	r1, r4, r5
 8011234:	428b      	cmp	r3, r1
 8011236:	bf04      	itt	eq
 8011238:	6819      	ldreq	r1, [r3, #0]
 801123a:	685b      	ldreq	r3, [r3, #4]
 801123c:	6063      	str	r3, [r4, #4]
 801123e:	bf04      	itt	eq
 8011240:	1949      	addeq	r1, r1, r5
 8011242:	6021      	streq	r1, [r4, #0]
 8011244:	6054      	str	r4, [r2, #4]
 8011246:	e7ca      	b.n	80111de <_free_r+0x26>
 8011248:	b003      	add	sp, #12
 801124a:	bd30      	pop	{r4, r5, pc}
 801124c:	20010d5c 	.word	0x20010d5c

08011250 <sbrk_aligned>:
 8011250:	b570      	push	{r4, r5, r6, lr}
 8011252:	4e0e      	ldr	r6, [pc, #56]	; (801128c <sbrk_aligned+0x3c>)
 8011254:	460c      	mov	r4, r1
 8011256:	6831      	ldr	r1, [r6, #0]
 8011258:	4605      	mov	r5, r0
 801125a:	b911      	cbnz	r1, 8011262 <sbrk_aligned+0x12>
 801125c:	f000 fa2e 	bl	80116bc <_sbrk_r>
 8011260:	6030      	str	r0, [r6, #0]
 8011262:	4621      	mov	r1, r4
 8011264:	4628      	mov	r0, r5
 8011266:	f000 fa29 	bl	80116bc <_sbrk_r>
 801126a:	1c43      	adds	r3, r0, #1
 801126c:	d00a      	beq.n	8011284 <sbrk_aligned+0x34>
 801126e:	1cc4      	adds	r4, r0, #3
 8011270:	f024 0403 	bic.w	r4, r4, #3
 8011274:	42a0      	cmp	r0, r4
 8011276:	d007      	beq.n	8011288 <sbrk_aligned+0x38>
 8011278:	1a21      	subs	r1, r4, r0
 801127a:	4628      	mov	r0, r5
 801127c:	f000 fa1e 	bl	80116bc <_sbrk_r>
 8011280:	3001      	adds	r0, #1
 8011282:	d101      	bne.n	8011288 <sbrk_aligned+0x38>
 8011284:	f04f 34ff 	mov.w	r4, #4294967295
 8011288:	4620      	mov	r0, r4
 801128a:	bd70      	pop	{r4, r5, r6, pc}
 801128c:	20010d60 	.word	0x20010d60

08011290 <_malloc_r>:
 8011290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011294:	1ccd      	adds	r5, r1, #3
 8011296:	f025 0503 	bic.w	r5, r5, #3
 801129a:	3508      	adds	r5, #8
 801129c:	2d0c      	cmp	r5, #12
 801129e:	bf38      	it	cc
 80112a0:	250c      	movcc	r5, #12
 80112a2:	2d00      	cmp	r5, #0
 80112a4:	4607      	mov	r7, r0
 80112a6:	db01      	blt.n	80112ac <_malloc_r+0x1c>
 80112a8:	42a9      	cmp	r1, r5
 80112aa:	d905      	bls.n	80112b8 <_malloc_r+0x28>
 80112ac:	230c      	movs	r3, #12
 80112ae:	603b      	str	r3, [r7, #0]
 80112b0:	2600      	movs	r6, #0
 80112b2:	4630      	mov	r0, r6
 80112b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b8:	4e2e      	ldr	r6, [pc, #184]	; (8011374 <_malloc_r+0xe4>)
 80112ba:	f000 faeb 	bl	8011894 <__malloc_lock>
 80112be:	6833      	ldr	r3, [r6, #0]
 80112c0:	461c      	mov	r4, r3
 80112c2:	bb34      	cbnz	r4, 8011312 <_malloc_r+0x82>
 80112c4:	4629      	mov	r1, r5
 80112c6:	4638      	mov	r0, r7
 80112c8:	f7ff ffc2 	bl	8011250 <sbrk_aligned>
 80112cc:	1c43      	adds	r3, r0, #1
 80112ce:	4604      	mov	r4, r0
 80112d0:	d14d      	bne.n	801136e <_malloc_r+0xde>
 80112d2:	6834      	ldr	r4, [r6, #0]
 80112d4:	4626      	mov	r6, r4
 80112d6:	2e00      	cmp	r6, #0
 80112d8:	d140      	bne.n	801135c <_malloc_r+0xcc>
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	4631      	mov	r1, r6
 80112de:	4638      	mov	r0, r7
 80112e0:	eb04 0803 	add.w	r8, r4, r3
 80112e4:	f000 f9ea 	bl	80116bc <_sbrk_r>
 80112e8:	4580      	cmp	r8, r0
 80112ea:	d13a      	bne.n	8011362 <_malloc_r+0xd2>
 80112ec:	6821      	ldr	r1, [r4, #0]
 80112ee:	3503      	adds	r5, #3
 80112f0:	1a6d      	subs	r5, r5, r1
 80112f2:	f025 0503 	bic.w	r5, r5, #3
 80112f6:	3508      	adds	r5, #8
 80112f8:	2d0c      	cmp	r5, #12
 80112fa:	bf38      	it	cc
 80112fc:	250c      	movcc	r5, #12
 80112fe:	4629      	mov	r1, r5
 8011300:	4638      	mov	r0, r7
 8011302:	f7ff ffa5 	bl	8011250 <sbrk_aligned>
 8011306:	3001      	adds	r0, #1
 8011308:	d02b      	beq.n	8011362 <_malloc_r+0xd2>
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	442b      	add	r3, r5
 801130e:	6023      	str	r3, [r4, #0]
 8011310:	e00e      	b.n	8011330 <_malloc_r+0xa0>
 8011312:	6822      	ldr	r2, [r4, #0]
 8011314:	1b52      	subs	r2, r2, r5
 8011316:	d41e      	bmi.n	8011356 <_malloc_r+0xc6>
 8011318:	2a0b      	cmp	r2, #11
 801131a:	d916      	bls.n	801134a <_malloc_r+0xba>
 801131c:	1961      	adds	r1, r4, r5
 801131e:	42a3      	cmp	r3, r4
 8011320:	6025      	str	r5, [r4, #0]
 8011322:	bf18      	it	ne
 8011324:	6059      	strne	r1, [r3, #4]
 8011326:	6863      	ldr	r3, [r4, #4]
 8011328:	bf08      	it	eq
 801132a:	6031      	streq	r1, [r6, #0]
 801132c:	5162      	str	r2, [r4, r5]
 801132e:	604b      	str	r3, [r1, #4]
 8011330:	4638      	mov	r0, r7
 8011332:	f104 060b 	add.w	r6, r4, #11
 8011336:	f000 fab3 	bl	80118a0 <__malloc_unlock>
 801133a:	f026 0607 	bic.w	r6, r6, #7
 801133e:	1d23      	adds	r3, r4, #4
 8011340:	1af2      	subs	r2, r6, r3
 8011342:	d0b6      	beq.n	80112b2 <_malloc_r+0x22>
 8011344:	1b9b      	subs	r3, r3, r6
 8011346:	50a3      	str	r3, [r4, r2]
 8011348:	e7b3      	b.n	80112b2 <_malloc_r+0x22>
 801134a:	6862      	ldr	r2, [r4, #4]
 801134c:	42a3      	cmp	r3, r4
 801134e:	bf0c      	ite	eq
 8011350:	6032      	streq	r2, [r6, #0]
 8011352:	605a      	strne	r2, [r3, #4]
 8011354:	e7ec      	b.n	8011330 <_malloc_r+0xa0>
 8011356:	4623      	mov	r3, r4
 8011358:	6864      	ldr	r4, [r4, #4]
 801135a:	e7b2      	b.n	80112c2 <_malloc_r+0x32>
 801135c:	4634      	mov	r4, r6
 801135e:	6876      	ldr	r6, [r6, #4]
 8011360:	e7b9      	b.n	80112d6 <_malloc_r+0x46>
 8011362:	230c      	movs	r3, #12
 8011364:	603b      	str	r3, [r7, #0]
 8011366:	4638      	mov	r0, r7
 8011368:	f000 fa9a 	bl	80118a0 <__malloc_unlock>
 801136c:	e7a1      	b.n	80112b2 <_malloc_r+0x22>
 801136e:	6025      	str	r5, [r4, #0]
 8011370:	e7de      	b.n	8011330 <_malloc_r+0xa0>
 8011372:	bf00      	nop
 8011374:	20010d5c 	.word	0x20010d5c

08011378 <__sfputc_r>:
 8011378:	6893      	ldr	r3, [r2, #8]
 801137a:	3b01      	subs	r3, #1
 801137c:	2b00      	cmp	r3, #0
 801137e:	b410      	push	{r4}
 8011380:	6093      	str	r3, [r2, #8]
 8011382:	da08      	bge.n	8011396 <__sfputc_r+0x1e>
 8011384:	6994      	ldr	r4, [r2, #24]
 8011386:	42a3      	cmp	r3, r4
 8011388:	db01      	blt.n	801138e <__sfputc_r+0x16>
 801138a:	290a      	cmp	r1, #10
 801138c:	d103      	bne.n	8011396 <__sfputc_r+0x1e>
 801138e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011392:	f7fe ba0f 	b.w	800f7b4 <__swbuf_r>
 8011396:	6813      	ldr	r3, [r2, #0]
 8011398:	1c58      	adds	r0, r3, #1
 801139a:	6010      	str	r0, [r2, #0]
 801139c:	7019      	strb	r1, [r3, #0]
 801139e:	4608      	mov	r0, r1
 80113a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <__sfputs_r>:
 80113a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a8:	4606      	mov	r6, r0
 80113aa:	460f      	mov	r7, r1
 80113ac:	4614      	mov	r4, r2
 80113ae:	18d5      	adds	r5, r2, r3
 80113b0:	42ac      	cmp	r4, r5
 80113b2:	d101      	bne.n	80113b8 <__sfputs_r+0x12>
 80113b4:	2000      	movs	r0, #0
 80113b6:	e007      	b.n	80113c8 <__sfputs_r+0x22>
 80113b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113bc:	463a      	mov	r2, r7
 80113be:	4630      	mov	r0, r6
 80113c0:	f7ff ffda 	bl	8011378 <__sfputc_r>
 80113c4:	1c43      	adds	r3, r0, #1
 80113c6:	d1f3      	bne.n	80113b0 <__sfputs_r+0xa>
 80113c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080113cc <_vfiprintf_r>:
 80113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d0:	460d      	mov	r5, r1
 80113d2:	b09d      	sub	sp, #116	; 0x74
 80113d4:	4614      	mov	r4, r2
 80113d6:	4698      	mov	r8, r3
 80113d8:	4606      	mov	r6, r0
 80113da:	b118      	cbz	r0, 80113e4 <_vfiprintf_r+0x18>
 80113dc:	6983      	ldr	r3, [r0, #24]
 80113de:	b90b      	cbnz	r3, 80113e4 <_vfiprintf_r+0x18>
 80113e0:	f7ff fa3e 	bl	8010860 <__sinit>
 80113e4:	4b89      	ldr	r3, [pc, #548]	; (801160c <_vfiprintf_r+0x240>)
 80113e6:	429d      	cmp	r5, r3
 80113e8:	d11b      	bne.n	8011422 <_vfiprintf_r+0x56>
 80113ea:	6875      	ldr	r5, [r6, #4]
 80113ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113ee:	07d9      	lsls	r1, r3, #31
 80113f0:	d405      	bmi.n	80113fe <_vfiprintf_r+0x32>
 80113f2:	89ab      	ldrh	r3, [r5, #12]
 80113f4:	059a      	lsls	r2, r3, #22
 80113f6:	d402      	bmi.n	80113fe <_vfiprintf_r+0x32>
 80113f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113fa:	f7ff fad4 	bl	80109a6 <__retarget_lock_acquire_recursive>
 80113fe:	89ab      	ldrh	r3, [r5, #12]
 8011400:	071b      	lsls	r3, r3, #28
 8011402:	d501      	bpl.n	8011408 <_vfiprintf_r+0x3c>
 8011404:	692b      	ldr	r3, [r5, #16]
 8011406:	b9eb      	cbnz	r3, 8011444 <_vfiprintf_r+0x78>
 8011408:	4629      	mov	r1, r5
 801140a:	4630      	mov	r0, r6
 801140c:	f7fe fa24 	bl	800f858 <__swsetup_r>
 8011410:	b1c0      	cbz	r0, 8011444 <_vfiprintf_r+0x78>
 8011412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011414:	07dc      	lsls	r4, r3, #31
 8011416:	d50e      	bpl.n	8011436 <_vfiprintf_r+0x6a>
 8011418:	f04f 30ff 	mov.w	r0, #4294967295
 801141c:	b01d      	add	sp, #116	; 0x74
 801141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011422:	4b7b      	ldr	r3, [pc, #492]	; (8011610 <_vfiprintf_r+0x244>)
 8011424:	429d      	cmp	r5, r3
 8011426:	d101      	bne.n	801142c <_vfiprintf_r+0x60>
 8011428:	68b5      	ldr	r5, [r6, #8]
 801142a:	e7df      	b.n	80113ec <_vfiprintf_r+0x20>
 801142c:	4b79      	ldr	r3, [pc, #484]	; (8011614 <_vfiprintf_r+0x248>)
 801142e:	429d      	cmp	r5, r3
 8011430:	bf08      	it	eq
 8011432:	68f5      	ldreq	r5, [r6, #12]
 8011434:	e7da      	b.n	80113ec <_vfiprintf_r+0x20>
 8011436:	89ab      	ldrh	r3, [r5, #12]
 8011438:	0598      	lsls	r0, r3, #22
 801143a:	d4ed      	bmi.n	8011418 <_vfiprintf_r+0x4c>
 801143c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801143e:	f7ff fab3 	bl	80109a8 <__retarget_lock_release_recursive>
 8011442:	e7e9      	b.n	8011418 <_vfiprintf_r+0x4c>
 8011444:	2300      	movs	r3, #0
 8011446:	9309      	str	r3, [sp, #36]	; 0x24
 8011448:	2320      	movs	r3, #32
 801144a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801144e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011452:	2330      	movs	r3, #48	; 0x30
 8011454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011618 <_vfiprintf_r+0x24c>
 8011458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801145c:	f04f 0901 	mov.w	r9, #1
 8011460:	4623      	mov	r3, r4
 8011462:	469a      	mov	sl, r3
 8011464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011468:	b10a      	cbz	r2, 801146e <_vfiprintf_r+0xa2>
 801146a:	2a25      	cmp	r2, #37	; 0x25
 801146c:	d1f9      	bne.n	8011462 <_vfiprintf_r+0x96>
 801146e:	ebba 0b04 	subs.w	fp, sl, r4
 8011472:	d00b      	beq.n	801148c <_vfiprintf_r+0xc0>
 8011474:	465b      	mov	r3, fp
 8011476:	4622      	mov	r2, r4
 8011478:	4629      	mov	r1, r5
 801147a:	4630      	mov	r0, r6
 801147c:	f7ff ff93 	bl	80113a6 <__sfputs_r>
 8011480:	3001      	adds	r0, #1
 8011482:	f000 80aa 	beq.w	80115da <_vfiprintf_r+0x20e>
 8011486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011488:	445a      	add	r2, fp
 801148a:	9209      	str	r2, [sp, #36]	; 0x24
 801148c:	f89a 3000 	ldrb.w	r3, [sl]
 8011490:	2b00      	cmp	r3, #0
 8011492:	f000 80a2 	beq.w	80115da <_vfiprintf_r+0x20e>
 8011496:	2300      	movs	r3, #0
 8011498:	f04f 32ff 	mov.w	r2, #4294967295
 801149c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114a0:	f10a 0a01 	add.w	sl, sl, #1
 80114a4:	9304      	str	r3, [sp, #16]
 80114a6:	9307      	str	r3, [sp, #28]
 80114a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114ac:	931a      	str	r3, [sp, #104]	; 0x68
 80114ae:	4654      	mov	r4, sl
 80114b0:	2205      	movs	r2, #5
 80114b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114b6:	4858      	ldr	r0, [pc, #352]	; (8011618 <_vfiprintf_r+0x24c>)
 80114b8:	f7ee feba 	bl	8000230 <memchr>
 80114bc:	9a04      	ldr	r2, [sp, #16]
 80114be:	b9d8      	cbnz	r0, 80114f8 <_vfiprintf_r+0x12c>
 80114c0:	06d1      	lsls	r1, r2, #27
 80114c2:	bf44      	itt	mi
 80114c4:	2320      	movmi	r3, #32
 80114c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114ca:	0713      	lsls	r3, r2, #28
 80114cc:	bf44      	itt	mi
 80114ce:	232b      	movmi	r3, #43	; 0x2b
 80114d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114d4:	f89a 3000 	ldrb.w	r3, [sl]
 80114d8:	2b2a      	cmp	r3, #42	; 0x2a
 80114da:	d015      	beq.n	8011508 <_vfiprintf_r+0x13c>
 80114dc:	9a07      	ldr	r2, [sp, #28]
 80114de:	4654      	mov	r4, sl
 80114e0:	2000      	movs	r0, #0
 80114e2:	f04f 0c0a 	mov.w	ip, #10
 80114e6:	4621      	mov	r1, r4
 80114e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114ec:	3b30      	subs	r3, #48	; 0x30
 80114ee:	2b09      	cmp	r3, #9
 80114f0:	d94e      	bls.n	8011590 <_vfiprintf_r+0x1c4>
 80114f2:	b1b0      	cbz	r0, 8011522 <_vfiprintf_r+0x156>
 80114f4:	9207      	str	r2, [sp, #28]
 80114f6:	e014      	b.n	8011522 <_vfiprintf_r+0x156>
 80114f8:	eba0 0308 	sub.w	r3, r0, r8
 80114fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011500:	4313      	orrs	r3, r2
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	46a2      	mov	sl, r4
 8011506:	e7d2      	b.n	80114ae <_vfiprintf_r+0xe2>
 8011508:	9b03      	ldr	r3, [sp, #12]
 801150a:	1d19      	adds	r1, r3, #4
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	9103      	str	r1, [sp, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	bfbb      	ittet	lt
 8011514:	425b      	neglt	r3, r3
 8011516:	f042 0202 	orrlt.w	r2, r2, #2
 801151a:	9307      	strge	r3, [sp, #28]
 801151c:	9307      	strlt	r3, [sp, #28]
 801151e:	bfb8      	it	lt
 8011520:	9204      	strlt	r2, [sp, #16]
 8011522:	7823      	ldrb	r3, [r4, #0]
 8011524:	2b2e      	cmp	r3, #46	; 0x2e
 8011526:	d10c      	bne.n	8011542 <_vfiprintf_r+0x176>
 8011528:	7863      	ldrb	r3, [r4, #1]
 801152a:	2b2a      	cmp	r3, #42	; 0x2a
 801152c:	d135      	bne.n	801159a <_vfiprintf_r+0x1ce>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	1d1a      	adds	r2, r3, #4
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	9203      	str	r2, [sp, #12]
 8011536:	2b00      	cmp	r3, #0
 8011538:	bfb8      	it	lt
 801153a:	f04f 33ff 	movlt.w	r3, #4294967295
 801153e:	3402      	adds	r4, #2
 8011540:	9305      	str	r3, [sp, #20]
 8011542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011628 <_vfiprintf_r+0x25c>
 8011546:	7821      	ldrb	r1, [r4, #0]
 8011548:	2203      	movs	r2, #3
 801154a:	4650      	mov	r0, sl
 801154c:	f7ee fe70 	bl	8000230 <memchr>
 8011550:	b140      	cbz	r0, 8011564 <_vfiprintf_r+0x198>
 8011552:	2340      	movs	r3, #64	; 0x40
 8011554:	eba0 000a 	sub.w	r0, r0, sl
 8011558:	fa03 f000 	lsl.w	r0, r3, r0
 801155c:	9b04      	ldr	r3, [sp, #16]
 801155e:	4303      	orrs	r3, r0
 8011560:	3401      	adds	r4, #1
 8011562:	9304      	str	r3, [sp, #16]
 8011564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011568:	482c      	ldr	r0, [pc, #176]	; (801161c <_vfiprintf_r+0x250>)
 801156a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801156e:	2206      	movs	r2, #6
 8011570:	f7ee fe5e 	bl	8000230 <memchr>
 8011574:	2800      	cmp	r0, #0
 8011576:	d03f      	beq.n	80115f8 <_vfiprintf_r+0x22c>
 8011578:	4b29      	ldr	r3, [pc, #164]	; (8011620 <_vfiprintf_r+0x254>)
 801157a:	bb1b      	cbnz	r3, 80115c4 <_vfiprintf_r+0x1f8>
 801157c:	9b03      	ldr	r3, [sp, #12]
 801157e:	3307      	adds	r3, #7
 8011580:	f023 0307 	bic.w	r3, r3, #7
 8011584:	3308      	adds	r3, #8
 8011586:	9303      	str	r3, [sp, #12]
 8011588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801158a:	443b      	add	r3, r7
 801158c:	9309      	str	r3, [sp, #36]	; 0x24
 801158e:	e767      	b.n	8011460 <_vfiprintf_r+0x94>
 8011590:	fb0c 3202 	mla	r2, ip, r2, r3
 8011594:	460c      	mov	r4, r1
 8011596:	2001      	movs	r0, #1
 8011598:	e7a5      	b.n	80114e6 <_vfiprintf_r+0x11a>
 801159a:	2300      	movs	r3, #0
 801159c:	3401      	adds	r4, #1
 801159e:	9305      	str	r3, [sp, #20]
 80115a0:	4619      	mov	r1, r3
 80115a2:	f04f 0c0a 	mov.w	ip, #10
 80115a6:	4620      	mov	r0, r4
 80115a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115ac:	3a30      	subs	r2, #48	; 0x30
 80115ae:	2a09      	cmp	r2, #9
 80115b0:	d903      	bls.n	80115ba <_vfiprintf_r+0x1ee>
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0c5      	beq.n	8011542 <_vfiprintf_r+0x176>
 80115b6:	9105      	str	r1, [sp, #20]
 80115b8:	e7c3      	b.n	8011542 <_vfiprintf_r+0x176>
 80115ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80115be:	4604      	mov	r4, r0
 80115c0:	2301      	movs	r3, #1
 80115c2:	e7f0      	b.n	80115a6 <_vfiprintf_r+0x1da>
 80115c4:	ab03      	add	r3, sp, #12
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	462a      	mov	r2, r5
 80115ca:	4b16      	ldr	r3, [pc, #88]	; (8011624 <_vfiprintf_r+0x258>)
 80115cc:	a904      	add	r1, sp, #16
 80115ce:	4630      	mov	r0, r6
 80115d0:	f7fd fbb4 	bl	800ed3c <_printf_float>
 80115d4:	4607      	mov	r7, r0
 80115d6:	1c78      	adds	r0, r7, #1
 80115d8:	d1d6      	bne.n	8011588 <_vfiprintf_r+0x1bc>
 80115da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115dc:	07d9      	lsls	r1, r3, #31
 80115de:	d405      	bmi.n	80115ec <_vfiprintf_r+0x220>
 80115e0:	89ab      	ldrh	r3, [r5, #12]
 80115e2:	059a      	lsls	r2, r3, #22
 80115e4:	d402      	bmi.n	80115ec <_vfiprintf_r+0x220>
 80115e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115e8:	f7ff f9de 	bl	80109a8 <__retarget_lock_release_recursive>
 80115ec:	89ab      	ldrh	r3, [r5, #12]
 80115ee:	065b      	lsls	r3, r3, #25
 80115f0:	f53f af12 	bmi.w	8011418 <_vfiprintf_r+0x4c>
 80115f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115f6:	e711      	b.n	801141c <_vfiprintf_r+0x50>
 80115f8:	ab03      	add	r3, sp, #12
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	462a      	mov	r2, r5
 80115fe:	4b09      	ldr	r3, [pc, #36]	; (8011624 <_vfiprintf_r+0x258>)
 8011600:	a904      	add	r1, sp, #16
 8011602:	4630      	mov	r0, r6
 8011604:	f7fd fe3e 	bl	800f284 <_printf_i>
 8011608:	e7e4      	b.n	80115d4 <_vfiprintf_r+0x208>
 801160a:	bf00      	nop
 801160c:	080122bc 	.word	0x080122bc
 8011610:	080122dc 	.word	0x080122dc
 8011614:	0801229c 	.word	0x0801229c
 8011618:	08012454 	.word	0x08012454
 801161c:	0801245e 	.word	0x0801245e
 8011620:	0800ed3d 	.word	0x0800ed3d
 8011624:	080113a7 	.word	0x080113a7
 8011628:	0801245a 	.word	0x0801245a

0801162c <_putc_r>:
 801162c:	b570      	push	{r4, r5, r6, lr}
 801162e:	460d      	mov	r5, r1
 8011630:	4614      	mov	r4, r2
 8011632:	4606      	mov	r6, r0
 8011634:	b118      	cbz	r0, 801163e <_putc_r+0x12>
 8011636:	6983      	ldr	r3, [r0, #24]
 8011638:	b90b      	cbnz	r3, 801163e <_putc_r+0x12>
 801163a:	f7ff f911 	bl	8010860 <__sinit>
 801163e:	4b1c      	ldr	r3, [pc, #112]	; (80116b0 <_putc_r+0x84>)
 8011640:	429c      	cmp	r4, r3
 8011642:	d124      	bne.n	801168e <_putc_r+0x62>
 8011644:	6874      	ldr	r4, [r6, #4]
 8011646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011648:	07d8      	lsls	r0, r3, #31
 801164a:	d405      	bmi.n	8011658 <_putc_r+0x2c>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	0599      	lsls	r1, r3, #22
 8011650:	d402      	bmi.n	8011658 <_putc_r+0x2c>
 8011652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011654:	f7ff f9a7 	bl	80109a6 <__retarget_lock_acquire_recursive>
 8011658:	68a3      	ldr	r3, [r4, #8]
 801165a:	3b01      	subs	r3, #1
 801165c:	2b00      	cmp	r3, #0
 801165e:	60a3      	str	r3, [r4, #8]
 8011660:	da05      	bge.n	801166e <_putc_r+0x42>
 8011662:	69a2      	ldr	r2, [r4, #24]
 8011664:	4293      	cmp	r3, r2
 8011666:	db1c      	blt.n	80116a2 <_putc_r+0x76>
 8011668:	b2eb      	uxtb	r3, r5
 801166a:	2b0a      	cmp	r3, #10
 801166c:	d019      	beq.n	80116a2 <_putc_r+0x76>
 801166e:	6823      	ldr	r3, [r4, #0]
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	6022      	str	r2, [r4, #0]
 8011674:	701d      	strb	r5, [r3, #0]
 8011676:	b2ed      	uxtb	r5, r5
 8011678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801167a:	07da      	lsls	r2, r3, #31
 801167c:	d405      	bmi.n	801168a <_putc_r+0x5e>
 801167e:	89a3      	ldrh	r3, [r4, #12]
 8011680:	059b      	lsls	r3, r3, #22
 8011682:	d402      	bmi.n	801168a <_putc_r+0x5e>
 8011684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011686:	f7ff f98f 	bl	80109a8 <__retarget_lock_release_recursive>
 801168a:	4628      	mov	r0, r5
 801168c:	bd70      	pop	{r4, r5, r6, pc}
 801168e:	4b09      	ldr	r3, [pc, #36]	; (80116b4 <_putc_r+0x88>)
 8011690:	429c      	cmp	r4, r3
 8011692:	d101      	bne.n	8011698 <_putc_r+0x6c>
 8011694:	68b4      	ldr	r4, [r6, #8]
 8011696:	e7d6      	b.n	8011646 <_putc_r+0x1a>
 8011698:	4b07      	ldr	r3, [pc, #28]	; (80116b8 <_putc_r+0x8c>)
 801169a:	429c      	cmp	r4, r3
 801169c:	bf08      	it	eq
 801169e:	68f4      	ldreq	r4, [r6, #12]
 80116a0:	e7d1      	b.n	8011646 <_putc_r+0x1a>
 80116a2:	4629      	mov	r1, r5
 80116a4:	4622      	mov	r2, r4
 80116a6:	4630      	mov	r0, r6
 80116a8:	f7fe f884 	bl	800f7b4 <__swbuf_r>
 80116ac:	4605      	mov	r5, r0
 80116ae:	e7e3      	b.n	8011678 <_putc_r+0x4c>
 80116b0:	080122bc 	.word	0x080122bc
 80116b4:	080122dc 	.word	0x080122dc
 80116b8:	0801229c 	.word	0x0801229c

080116bc <_sbrk_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4d06      	ldr	r5, [pc, #24]	; (80116d8 <_sbrk_r+0x1c>)
 80116c0:	2300      	movs	r3, #0
 80116c2:	4604      	mov	r4, r0
 80116c4:	4608      	mov	r0, r1
 80116c6:	602b      	str	r3, [r5, #0]
 80116c8:	f7f0 fbbe 	bl	8001e48 <_sbrk>
 80116cc:	1c43      	adds	r3, r0, #1
 80116ce:	d102      	bne.n	80116d6 <_sbrk_r+0x1a>
 80116d0:	682b      	ldr	r3, [r5, #0]
 80116d2:	b103      	cbz	r3, 80116d6 <_sbrk_r+0x1a>
 80116d4:	6023      	str	r3, [r4, #0]
 80116d6:	bd38      	pop	{r3, r4, r5, pc}
 80116d8:	20010d64 	.word	0x20010d64

080116dc <__sread>:
 80116dc:	b510      	push	{r4, lr}
 80116de:	460c      	mov	r4, r1
 80116e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e4:	f000 f8e2 	bl	80118ac <_read_r>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	bfab      	itete	ge
 80116ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116ee:	89a3      	ldrhlt	r3, [r4, #12]
 80116f0:	181b      	addge	r3, r3, r0
 80116f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116f6:	bfac      	ite	ge
 80116f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80116fa:	81a3      	strhlt	r3, [r4, #12]
 80116fc:	bd10      	pop	{r4, pc}

080116fe <__swrite>:
 80116fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011702:	461f      	mov	r7, r3
 8011704:	898b      	ldrh	r3, [r1, #12]
 8011706:	05db      	lsls	r3, r3, #23
 8011708:	4605      	mov	r5, r0
 801170a:	460c      	mov	r4, r1
 801170c:	4616      	mov	r6, r2
 801170e:	d505      	bpl.n	801171c <__swrite+0x1e>
 8011710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011714:	2302      	movs	r3, #2
 8011716:	2200      	movs	r2, #0
 8011718:	f000 f898 	bl	801184c <_lseek_r>
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	4632      	mov	r2, r6
 801172a:	463b      	mov	r3, r7
 801172c:	4628      	mov	r0, r5
 801172e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011732:	f000 b817 	b.w	8011764 <_write_r>

08011736 <__sseek>:
 8011736:	b510      	push	{r4, lr}
 8011738:	460c      	mov	r4, r1
 801173a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173e:	f000 f885 	bl	801184c <_lseek_r>
 8011742:	1c43      	adds	r3, r0, #1
 8011744:	89a3      	ldrh	r3, [r4, #12]
 8011746:	bf15      	itete	ne
 8011748:	6560      	strne	r0, [r4, #84]	; 0x54
 801174a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801174e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011752:	81a3      	strheq	r3, [r4, #12]
 8011754:	bf18      	it	ne
 8011756:	81a3      	strhne	r3, [r4, #12]
 8011758:	bd10      	pop	{r4, pc}

0801175a <__sclose>:
 801175a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801175e:	f000 b831 	b.w	80117c4 <_close_r>
	...

08011764 <_write_r>:
 8011764:	b538      	push	{r3, r4, r5, lr}
 8011766:	4d07      	ldr	r5, [pc, #28]	; (8011784 <_write_r+0x20>)
 8011768:	4604      	mov	r4, r0
 801176a:	4608      	mov	r0, r1
 801176c:	4611      	mov	r1, r2
 801176e:	2200      	movs	r2, #0
 8011770:	602a      	str	r2, [r5, #0]
 8011772:	461a      	mov	r2, r3
 8011774:	f7f0 fb17 	bl	8001da6 <_write>
 8011778:	1c43      	adds	r3, r0, #1
 801177a:	d102      	bne.n	8011782 <_write_r+0x1e>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	b103      	cbz	r3, 8011782 <_write_r+0x1e>
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	bd38      	pop	{r3, r4, r5, pc}
 8011784:	20010d64 	.word	0x20010d64

08011788 <__assert_func>:
 8011788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801178a:	4614      	mov	r4, r2
 801178c:	461a      	mov	r2, r3
 801178e:	4b09      	ldr	r3, [pc, #36]	; (80117b4 <__assert_func+0x2c>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	4605      	mov	r5, r0
 8011794:	68d8      	ldr	r0, [r3, #12]
 8011796:	b14c      	cbz	r4, 80117ac <__assert_func+0x24>
 8011798:	4b07      	ldr	r3, [pc, #28]	; (80117b8 <__assert_func+0x30>)
 801179a:	9100      	str	r1, [sp, #0]
 801179c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117a0:	4906      	ldr	r1, [pc, #24]	; (80117bc <__assert_func+0x34>)
 80117a2:	462b      	mov	r3, r5
 80117a4:	f000 f81e 	bl	80117e4 <fiprintf>
 80117a8:	f000 f89f 	bl	80118ea <abort>
 80117ac:	4b04      	ldr	r3, [pc, #16]	; (80117c0 <__assert_func+0x38>)
 80117ae:	461c      	mov	r4, r3
 80117b0:	e7f3      	b.n	801179a <__assert_func+0x12>
 80117b2:	bf00      	nop
 80117b4:	20000014 	.word	0x20000014
 80117b8:	08012465 	.word	0x08012465
 80117bc:	08012472 	.word	0x08012472
 80117c0:	080124a0 	.word	0x080124a0

080117c4 <_close_r>:
 80117c4:	b538      	push	{r3, r4, r5, lr}
 80117c6:	4d06      	ldr	r5, [pc, #24]	; (80117e0 <_close_r+0x1c>)
 80117c8:	2300      	movs	r3, #0
 80117ca:	4604      	mov	r4, r0
 80117cc:	4608      	mov	r0, r1
 80117ce:	602b      	str	r3, [r5, #0]
 80117d0:	f7f0 fb05 	bl	8001dde <_close>
 80117d4:	1c43      	adds	r3, r0, #1
 80117d6:	d102      	bne.n	80117de <_close_r+0x1a>
 80117d8:	682b      	ldr	r3, [r5, #0]
 80117da:	b103      	cbz	r3, 80117de <_close_r+0x1a>
 80117dc:	6023      	str	r3, [r4, #0]
 80117de:	bd38      	pop	{r3, r4, r5, pc}
 80117e0:	20010d64 	.word	0x20010d64

080117e4 <fiprintf>:
 80117e4:	b40e      	push	{r1, r2, r3}
 80117e6:	b503      	push	{r0, r1, lr}
 80117e8:	4601      	mov	r1, r0
 80117ea:	ab03      	add	r3, sp, #12
 80117ec:	4805      	ldr	r0, [pc, #20]	; (8011804 <fiprintf+0x20>)
 80117ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f2:	6800      	ldr	r0, [r0, #0]
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	f7ff fde9 	bl	80113cc <_vfiprintf_r>
 80117fa:	b002      	add	sp, #8
 80117fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011800:	b003      	add	sp, #12
 8011802:	4770      	bx	lr
 8011804:	20000014 	.word	0x20000014

08011808 <_fstat_r>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	4d07      	ldr	r5, [pc, #28]	; (8011828 <_fstat_r+0x20>)
 801180c:	2300      	movs	r3, #0
 801180e:	4604      	mov	r4, r0
 8011810:	4608      	mov	r0, r1
 8011812:	4611      	mov	r1, r2
 8011814:	602b      	str	r3, [r5, #0]
 8011816:	f7f0 faee 	bl	8001df6 <_fstat>
 801181a:	1c43      	adds	r3, r0, #1
 801181c:	d102      	bne.n	8011824 <_fstat_r+0x1c>
 801181e:	682b      	ldr	r3, [r5, #0]
 8011820:	b103      	cbz	r3, 8011824 <_fstat_r+0x1c>
 8011822:	6023      	str	r3, [r4, #0]
 8011824:	bd38      	pop	{r3, r4, r5, pc}
 8011826:	bf00      	nop
 8011828:	20010d64 	.word	0x20010d64

0801182c <_isatty_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	4d06      	ldr	r5, [pc, #24]	; (8011848 <_isatty_r+0x1c>)
 8011830:	2300      	movs	r3, #0
 8011832:	4604      	mov	r4, r0
 8011834:	4608      	mov	r0, r1
 8011836:	602b      	str	r3, [r5, #0]
 8011838:	f7f0 faed 	bl	8001e16 <_isatty>
 801183c:	1c43      	adds	r3, r0, #1
 801183e:	d102      	bne.n	8011846 <_isatty_r+0x1a>
 8011840:	682b      	ldr	r3, [r5, #0]
 8011842:	b103      	cbz	r3, 8011846 <_isatty_r+0x1a>
 8011844:	6023      	str	r3, [r4, #0]
 8011846:	bd38      	pop	{r3, r4, r5, pc}
 8011848:	20010d64 	.word	0x20010d64

0801184c <_lseek_r>:
 801184c:	b538      	push	{r3, r4, r5, lr}
 801184e:	4d07      	ldr	r5, [pc, #28]	; (801186c <_lseek_r+0x20>)
 8011850:	4604      	mov	r4, r0
 8011852:	4608      	mov	r0, r1
 8011854:	4611      	mov	r1, r2
 8011856:	2200      	movs	r2, #0
 8011858:	602a      	str	r2, [r5, #0]
 801185a:	461a      	mov	r2, r3
 801185c:	f7f0 fae6 	bl	8001e2c <_lseek>
 8011860:	1c43      	adds	r3, r0, #1
 8011862:	d102      	bne.n	801186a <_lseek_r+0x1e>
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	b103      	cbz	r3, 801186a <_lseek_r+0x1e>
 8011868:	6023      	str	r3, [r4, #0]
 801186a:	bd38      	pop	{r3, r4, r5, pc}
 801186c:	20010d64 	.word	0x20010d64

08011870 <__ascii_mbtowc>:
 8011870:	b082      	sub	sp, #8
 8011872:	b901      	cbnz	r1, 8011876 <__ascii_mbtowc+0x6>
 8011874:	a901      	add	r1, sp, #4
 8011876:	b142      	cbz	r2, 801188a <__ascii_mbtowc+0x1a>
 8011878:	b14b      	cbz	r3, 801188e <__ascii_mbtowc+0x1e>
 801187a:	7813      	ldrb	r3, [r2, #0]
 801187c:	600b      	str	r3, [r1, #0]
 801187e:	7812      	ldrb	r2, [r2, #0]
 8011880:	1e10      	subs	r0, r2, #0
 8011882:	bf18      	it	ne
 8011884:	2001      	movne	r0, #1
 8011886:	b002      	add	sp, #8
 8011888:	4770      	bx	lr
 801188a:	4610      	mov	r0, r2
 801188c:	e7fb      	b.n	8011886 <__ascii_mbtowc+0x16>
 801188e:	f06f 0001 	mvn.w	r0, #1
 8011892:	e7f8      	b.n	8011886 <__ascii_mbtowc+0x16>

08011894 <__malloc_lock>:
 8011894:	4801      	ldr	r0, [pc, #4]	; (801189c <__malloc_lock+0x8>)
 8011896:	f7ff b886 	b.w	80109a6 <__retarget_lock_acquire_recursive>
 801189a:	bf00      	nop
 801189c:	20010d58 	.word	0x20010d58

080118a0 <__malloc_unlock>:
 80118a0:	4801      	ldr	r0, [pc, #4]	; (80118a8 <__malloc_unlock+0x8>)
 80118a2:	f7ff b881 	b.w	80109a8 <__retarget_lock_release_recursive>
 80118a6:	bf00      	nop
 80118a8:	20010d58 	.word	0x20010d58

080118ac <_read_r>:
 80118ac:	b538      	push	{r3, r4, r5, lr}
 80118ae:	4d07      	ldr	r5, [pc, #28]	; (80118cc <_read_r+0x20>)
 80118b0:	4604      	mov	r4, r0
 80118b2:	4608      	mov	r0, r1
 80118b4:	4611      	mov	r1, r2
 80118b6:	2200      	movs	r2, #0
 80118b8:	602a      	str	r2, [r5, #0]
 80118ba:	461a      	mov	r2, r3
 80118bc:	f7f0 fa56 	bl	8001d6c <_read>
 80118c0:	1c43      	adds	r3, r0, #1
 80118c2:	d102      	bne.n	80118ca <_read_r+0x1e>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	b103      	cbz	r3, 80118ca <_read_r+0x1e>
 80118c8:	6023      	str	r3, [r4, #0]
 80118ca:	bd38      	pop	{r3, r4, r5, pc}
 80118cc:	20010d64 	.word	0x20010d64

080118d0 <__ascii_wctomb>:
 80118d0:	b149      	cbz	r1, 80118e6 <__ascii_wctomb+0x16>
 80118d2:	2aff      	cmp	r2, #255	; 0xff
 80118d4:	bf85      	ittet	hi
 80118d6:	238a      	movhi	r3, #138	; 0x8a
 80118d8:	6003      	strhi	r3, [r0, #0]
 80118da:	700a      	strbls	r2, [r1, #0]
 80118dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80118e0:	bf98      	it	ls
 80118e2:	2001      	movls	r0, #1
 80118e4:	4770      	bx	lr
 80118e6:	4608      	mov	r0, r1
 80118e8:	4770      	bx	lr

080118ea <abort>:
 80118ea:	b508      	push	{r3, lr}
 80118ec:	2006      	movs	r0, #6
 80118ee:	f000 f82b 	bl	8011948 <raise>
 80118f2:	2001      	movs	r0, #1
 80118f4:	f7f0 fa30 	bl	8001d58 <_exit>

080118f8 <_raise_r>:
 80118f8:	291f      	cmp	r1, #31
 80118fa:	b538      	push	{r3, r4, r5, lr}
 80118fc:	4604      	mov	r4, r0
 80118fe:	460d      	mov	r5, r1
 8011900:	d904      	bls.n	801190c <_raise_r+0x14>
 8011902:	2316      	movs	r3, #22
 8011904:	6003      	str	r3, [r0, #0]
 8011906:	f04f 30ff 	mov.w	r0, #4294967295
 801190a:	bd38      	pop	{r3, r4, r5, pc}
 801190c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801190e:	b112      	cbz	r2, 8011916 <_raise_r+0x1e>
 8011910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011914:	b94b      	cbnz	r3, 801192a <_raise_r+0x32>
 8011916:	4620      	mov	r0, r4
 8011918:	f000 f830 	bl	801197c <_getpid_r>
 801191c:	462a      	mov	r2, r5
 801191e:	4601      	mov	r1, r0
 8011920:	4620      	mov	r0, r4
 8011922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011926:	f000 b817 	b.w	8011958 <_kill_r>
 801192a:	2b01      	cmp	r3, #1
 801192c:	d00a      	beq.n	8011944 <_raise_r+0x4c>
 801192e:	1c59      	adds	r1, r3, #1
 8011930:	d103      	bne.n	801193a <_raise_r+0x42>
 8011932:	2316      	movs	r3, #22
 8011934:	6003      	str	r3, [r0, #0]
 8011936:	2001      	movs	r0, #1
 8011938:	e7e7      	b.n	801190a <_raise_r+0x12>
 801193a:	2400      	movs	r4, #0
 801193c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011940:	4628      	mov	r0, r5
 8011942:	4798      	blx	r3
 8011944:	2000      	movs	r0, #0
 8011946:	e7e0      	b.n	801190a <_raise_r+0x12>

08011948 <raise>:
 8011948:	4b02      	ldr	r3, [pc, #8]	; (8011954 <raise+0xc>)
 801194a:	4601      	mov	r1, r0
 801194c:	6818      	ldr	r0, [r3, #0]
 801194e:	f7ff bfd3 	b.w	80118f8 <_raise_r>
 8011952:	bf00      	nop
 8011954:	20000014 	.word	0x20000014

08011958 <_kill_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	4d07      	ldr	r5, [pc, #28]	; (8011978 <_kill_r+0x20>)
 801195c:	2300      	movs	r3, #0
 801195e:	4604      	mov	r4, r0
 8011960:	4608      	mov	r0, r1
 8011962:	4611      	mov	r1, r2
 8011964:	602b      	str	r3, [r5, #0]
 8011966:	f7f0 f9e7 	bl	8001d38 <_kill>
 801196a:	1c43      	adds	r3, r0, #1
 801196c:	d102      	bne.n	8011974 <_kill_r+0x1c>
 801196e:	682b      	ldr	r3, [r5, #0]
 8011970:	b103      	cbz	r3, 8011974 <_kill_r+0x1c>
 8011972:	6023      	str	r3, [r4, #0]
 8011974:	bd38      	pop	{r3, r4, r5, pc}
 8011976:	bf00      	nop
 8011978:	20010d64 	.word	0x20010d64

0801197c <_getpid_r>:
 801197c:	f7f0 b9d4 	b.w	8001d28 <_getpid>

08011980 <_init>:
 8011980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011982:	bf00      	nop
 8011984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011986:	bc08      	pop	{r3}
 8011988:	469e      	mov	lr, r3
 801198a:	4770      	bx	lr

0801198c <_fini>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	bf00      	nop
 8011990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011992:	bc08      	pop	{r3}
 8011994:	469e      	mov	lr, r3
 8011996:	4770      	bx	lr
