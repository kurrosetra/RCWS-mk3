
MotorController_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  080123b0  080123b0  000223b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e2c  08012e2c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012e2c  08012e2c  00022e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e34  08012e34  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e34  08012e34  00022e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e38  08012e38  00022e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012e3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c24  200001e4  08013020  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010e08  08013020  00030e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d961  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072c7  00000000  00000000  0005db75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  00064e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e28  00000000  00000000  00066f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028850  00000000  00000000  00068da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f205  00000000  00000000  000915f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2456  00000000  00000000  000c07f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009738  00000000  00000000  001a2c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012398 	.word	0x08012398

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08012398 	.word	0x08012398

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9bf 	b.w	8001038 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f84d 	bl	8000d68 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f840 	bl	8000d68 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f82f 	bl	8000d68 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f821 	bl	8000d68 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b974 	b.w	8001038 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	468e      	mov	lr, r1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d14d      	bne.n	8000e12 <__udivmoddi4+0xaa>
 8000d76:	428a      	cmp	r2, r1
 8000d78:	4694      	mov	ip, r2
 8000d7a:	d969      	bls.n	8000e50 <__udivmoddi4+0xe8>
 8000d7c:	fab2 f282 	clz	r2, r2
 8000d80:	b152      	cbz	r2, 8000d98 <__udivmoddi4+0x30>
 8000d82:	fa01 f302 	lsl.w	r3, r1, r2
 8000d86:	f1c2 0120 	rsb	r1, r2, #32
 8000d8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d92:	ea41 0e03 	orr.w	lr, r1, r3
 8000d96:	4094      	lsls	r4, r2
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	0c21      	lsrs	r1, r4, #16
 8000d9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000da2:	fa1f f78c 	uxth.w	r7, ip
 8000da6:	fb08 e316 	mls	r3, r8, r6, lr
 8000daa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dae:	fb06 f107 	mul.w	r1, r6, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x64>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dbe:	f080 811f 	bcs.w	8001000 <__udivmoddi4+0x298>
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	f240 811c 	bls.w	8001000 <__udivmoddi4+0x298>
 8000dc8:	3e02      	subs	r6, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb00 f707 	mul.w	r7, r0, r7
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x92>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dec:	f080 810a 	bcs.w	8001004 <__udivmoddi4+0x29c>
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	f240 8107 	bls.w	8001004 <__udivmoddi4+0x29c>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfe:	1be4      	subs	r4, r4, r7
 8000e00:	2600      	movs	r6, #0
 8000e02:	b11d      	cbz	r5, 8000e0c <__udivmoddi4+0xa4>
 8000e04:	40d4      	lsrs	r4, r2
 8000e06:	2300      	movs	r3, #0
 8000e08:	e9c5 4300 	strd	r4, r3, [r5]
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0xc2>
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	f000 80ef 	beq.w	8000ffa <__udivmoddi4+0x292>
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e22:	4630      	mov	r0, r6
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	fab3 f683 	clz	r6, r3
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d14a      	bne.n	8000ec8 <__udivmoddi4+0x160>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xd4>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 80f9 	bhi.w	800102e <__udivmoddi4+0x2c6>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	469e      	mov	lr, r3
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e0      	beq.n	8000e0c <__udivmoddi4+0xa4>
 8000e4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4e:	e7dd      	b.n	8000e0c <__udivmoddi4+0xa4>
 8000e50:	b902      	cbnz	r2, 8000e54 <__udivmoddi4+0xec>
 8000e52:	deff      	udf	#255	; 0xff
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	f040 8092 	bne.w	8000f82 <__udivmoddi4+0x21a>
 8000e5e:	eba1 010c 	sub.w	r1, r1, ip
 8000e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e66:	fa1f fe8c 	uxth.w	lr, ip
 8000e6a:	2601      	movs	r6, #1
 8000e6c:	0c20      	lsrs	r0, r4, #16
 8000e6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e72:	fb07 1113 	mls	r1, r7, r3, r1
 8000e76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7a:	fb0e f003 	mul.w	r0, lr, r3
 8000e7e:	4288      	cmp	r0, r1
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x12c>
 8000e82:	eb1c 0101 	adds.w	r1, ip, r1
 8000e86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x12a>
 8000e8c:	4288      	cmp	r0, r1
 8000e8e:	f200 80cb 	bhi.w	8001028 <__udivmoddi4+0x2c0>
 8000e92:	4643      	mov	r3, r8
 8000e94:	1a09      	subs	r1, r1, r0
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000ea0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x156>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb4:	d202      	bcs.n	8000ebc <__udivmoddi4+0x154>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	f200 80bb 	bhi.w	8001032 <__udivmoddi4+0x2ca>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	eba4 040e 	sub.w	r4, r4, lr
 8000ec2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec6:	e79c      	b.n	8000e02 <__udivmoddi4+0x9a>
 8000ec8:	f1c6 0720 	rsb	r7, r6, #32
 8000ecc:	40b3      	lsls	r3, r6
 8000ece:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eda:	fa01 f306 	lsl.w	r3, r1, r6
 8000ede:	431c      	orrs	r4, r3
 8000ee0:	40f9      	lsrs	r1, r7
 8000ee2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eee:	0c20      	lsrs	r0, r4, #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	fb08 f00e 	mul.w	r0, r8, lr
 8000f00:	4288      	cmp	r0, r1
 8000f02:	fa02 f206 	lsl.w	r2, r2, r6
 8000f06:	d90b      	bls.n	8000f20 <__udivmoddi4+0x1b8>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f10:	f080 8088 	bcs.w	8001024 <__udivmoddi4+0x2bc>
 8000f14:	4288      	cmp	r0, r1
 8000f16:	f240 8085 	bls.w	8001024 <__udivmoddi4+0x2bc>
 8000f1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f28:	fb09 1110 	mls	r1, r9, r0, r1
 8000f2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f34:	458e      	cmp	lr, r1
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x1e2>
 8000f38:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f40:	d26c      	bcs.n	800101c <__udivmoddi4+0x2b4>
 8000f42:	458e      	cmp	lr, r1
 8000f44:	d96a      	bls.n	800101c <__udivmoddi4+0x2b4>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4461      	add	r1, ip
 8000f4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f52:	eba1 010e 	sub.w	r1, r1, lr
 8000f56:	42a1      	cmp	r1, r4
 8000f58:	46c8      	mov	r8, r9
 8000f5a:	46a6      	mov	lr, r4
 8000f5c:	d356      	bcc.n	800100c <__udivmoddi4+0x2a4>
 8000f5e:	d053      	beq.n	8001008 <__udivmoddi4+0x2a0>
 8000f60:	b15d      	cbz	r5, 8000f7a <__udivmoddi4+0x212>
 8000f62:	ebb3 0208 	subs.w	r2, r3, r8
 8000f66:	eb61 010e 	sbc.w	r1, r1, lr
 8000f6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f72:	40f1      	lsrs	r1, r6
 8000f74:	431f      	orrs	r7, r3
 8000f76:	e9c5 7100 	strd	r7, r1, [r5]
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	f1c2 0320 	rsb	r3, r2, #32
 8000f86:	40d8      	lsrs	r0, r3
 8000f88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f90:	4091      	lsls	r1, r2
 8000f92:	4301      	orrs	r1, r0
 8000f94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f98:	fa1f fe8c 	uxth.w	lr, ip
 8000f9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fa0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa4:	0c0b      	lsrs	r3, r1, #16
 8000fa6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000faa:	fb00 f60e 	mul.w	r6, r0, lr
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb4:	d908      	bls.n	8000fc8 <__udivmoddi4+0x260>
 8000fb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fbe:	d22f      	bcs.n	8001020 <__udivmoddi4+0x2b8>
 8000fc0:	429e      	cmp	r6, r3
 8000fc2:	d92d      	bls.n	8001020 <__udivmoddi4+0x2b8>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4463      	add	r3, ip
 8000fc8:	1b9b      	subs	r3, r3, r6
 8000fca:	b289      	uxth	r1, r1
 8000fcc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fd0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	d908      	bls.n	8000ff2 <__udivmoddi4+0x28a>
 8000fe0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe8:	d216      	bcs.n	8001018 <__udivmoddi4+0x2b0>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d914      	bls.n	8001018 <__udivmoddi4+0x2b0>
 8000fee:	3e02      	subs	r6, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	1ac9      	subs	r1, r1, r3
 8000ff4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff8:	e738      	b.n	8000e6c <__udivmoddi4+0x104>
 8000ffa:	462e      	mov	r6, r5
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e705      	b.n	8000e0c <__udivmoddi4+0xa4>
 8001000:	4606      	mov	r6, r0
 8001002:	e6e3      	b.n	8000dcc <__udivmoddi4+0x64>
 8001004:	4618      	mov	r0, r3
 8001006:	e6f8      	b.n	8000dfa <__udivmoddi4+0x92>
 8001008:	454b      	cmp	r3, r9
 800100a:	d2a9      	bcs.n	8000f60 <__udivmoddi4+0x1f8>
 800100c:	ebb9 0802 	subs.w	r8, r9, r2
 8001010:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001014:	3801      	subs	r0, #1
 8001016:	e7a3      	b.n	8000f60 <__udivmoddi4+0x1f8>
 8001018:	4646      	mov	r6, r8
 800101a:	e7ea      	b.n	8000ff2 <__udivmoddi4+0x28a>
 800101c:	4620      	mov	r0, r4
 800101e:	e794      	b.n	8000f4a <__udivmoddi4+0x1e2>
 8001020:	4640      	mov	r0, r8
 8001022:	e7d1      	b.n	8000fc8 <__udivmoddi4+0x260>
 8001024:	46d0      	mov	r8, sl
 8001026:	e77b      	b.n	8000f20 <__udivmoddi4+0x1b8>
 8001028:	3b02      	subs	r3, #2
 800102a:	4461      	add	r1, ip
 800102c:	e732      	b.n	8000e94 <__udivmoddi4+0x12c>
 800102e:	4630      	mov	r0, r6
 8001030:	e709      	b.n	8000e46 <__udivmoddi4+0xde>
 8001032:	4464      	add	r4, ip
 8001034:	3802      	subs	r0, #2
 8001036:	e742      	b.n	8000ebe <__udivmoddi4+0x156>

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b09c      	sub	sp, #112	; 0x70
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mx_motor_state */
  osMutexDef(mx_motor_state);
 8001042:	2300      	movs	r3, #0
 8001044:	66fb      	str	r3, [r7, #108]	; 0x6c
  mx_motor_stateHandle = osMutexCreate(osMutex(mx_motor_state));
 8001046:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800104a:	4618      	mov	r0, r3
 800104c:	f006 f9ce 	bl	80073ec <osMutexCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a43      	ldr	r2, [pc, #268]	; (8001160 <MX_FREERTOS_Init+0x124>)
 8001054:	6013      	str	r3, [r2, #0]

  /* definition and creation of mx_weapon_state */
  osMutexDef(mx_weapon_state);
 8001056:	2300      	movs	r3, #0
 8001058:	66bb      	str	r3, [r7, #104]	; 0x68
  mx_weapon_stateHandle = osMutexCreate(osMutex(mx_weapon_state));
 800105a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800105e:	4618      	mov	r0, r3
 8001060:	f006 f9c4 	bl	80073ec <osMutexCreate>
 8001064:	4603      	mov	r3, r0
 8001066:	4a3f      	ldr	r2, [pc, #252]	; (8001164 <MX_FREERTOS_Init+0x128>)
 8001068:	6013      	str	r3, [r2, #0]

  /* definition and creation of mx_motor_ext_state */
  osMutexDef(mx_motor_ext_state);
 800106a:	2300      	movs	r3, #0
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
  mx_motor_ext_stateHandle = osMutexCreate(osMutex(mx_motor_ext_state));
 800106e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001072:	4618      	mov	r0, r3
 8001074:	f006 f9ba 	bl	80073ec <osMutexCreate>
 8001078:	4603      	mov	r3, r0
 800107a:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <MX_FREERTOS_Init+0x12c>)
 800107c:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timWeapon */
  osTimerDef(timWeapon, tim_weapon_callback);
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <MX_FREERTOS_Init+0x130>)
 8001080:	663b      	str	r3, [r7, #96]	; 0x60
  timWeaponHandle = osTimerCreate(osTimer(timWeapon), osTimerPeriodic, NULL);
 8001082:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f006 f912 	bl	80072b4 <osTimerCreate>
 8001090:	4603      	mov	r3, r0
 8001092:	4a37      	ldr	r2, [pc, #220]	; (8001170 <MX_FREERTOS_Init+0x134>)
 8001094:	6013      	str	r3, [r2, #0]

  /* definition and creation of timMotor */
  osTimerDef(timMotor, tim_motor_callback);
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <MX_FREERTOS_Init+0x138>)
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
  timMotorHandle = osTimerCreate(osTimer(timMotor), osTimerPeriodic, NULL);
 800109a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109e:	2200      	movs	r2, #0
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 f906 	bl	80072b4 <osTimerCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a33      	ldr	r2, [pc, #204]	; (8001178 <MX_FREERTOS_Init+0x13c>)
 80010ac:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of q_manager */
  osMessageQDef(q_manager, 6, uint16_t);
 80010ae:	4a33      	ldr	r2, [pc, #204]	; (800117c <MX_FREERTOS_Init+0x140>)
 80010b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b8:	e883 0003 	stmia.w	r3, {r0, r1}
  q_managerHandle = osMessageCreate(osMessageQ(q_manager), NULL);
 80010bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 fb22 	bl	800770c <osMessageCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a2d      	ldr	r2, [pc, #180]	; (8001180 <MX_FREERTOS_Init+0x144>)
 80010cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mail_setup();
 80010ce:	f000 f8e9 	bl	80012a4 <mail_setup>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TManager */
  osThreadDef(TManager, t_manager, osPriorityHigh, 0, 512);
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <MX_FREERTOS_Init+0x148>)
 80010d4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80010d8:	461d      	mov	r5, r3
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	6023      	str	r3, [r4, #0]
  TManagerHandle = osThreadCreate(osThread(TManager), NULL);
 80010e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 f880 	bl	80071ee <osThreadCreate>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <MX_FREERTOS_Init+0x14c>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TBus */
  osThreadDef(TBus, t_bus, osPriorityLow, 0, 1024);
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_FREERTOS_Init+0x150>)
 80010f6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80010fa:	461d      	mov	r5, r3
 80010fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	6023      	str	r3, [r4, #0]
  TBusHandle = osThreadCreate(osThread(TBus), NULL);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f86f 	bl	80071ee <osThreadCreate>
 8001110:	4603      	mov	r3, r0
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <MX_FREERTOS_Init+0x154>)
 8001114:	6013      	str	r3, [r2, #0]

  /* definition and creation of TMotor */
  osThreadDef(TMotor, t_motor, osPriorityBelowNormal, 0, 1024);
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_FREERTOS_Init+0x158>)
 8001118:	f107 0418 	add.w	r4, r7, #24
 800111c:	461d      	mov	r5, r3
 800111e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	6023      	str	r3, [r4, #0]
  TMotorHandle = osThreadCreate(osThread(TMotor), NULL);
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f006 f85e 	bl	80071ee <osThreadCreate>
 8001132:	4603      	mov	r3, r0
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_FREERTOS_Init+0x15c>)
 8001136:	6013      	str	r3, [r2, #0]

  /* definition and creation of TWeapon */
  osThreadDef(TWeapon, t_weapon, osPriorityAboveNormal, 0, 1024);
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_FREERTOS_Init+0x160>)
 800113a:	1d3c      	adds	r4, r7, #4
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	6023      	str	r3, [r4, #0]
  TWeaponHandle = osThreadCreate(osThread(TWeapon), NULL);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f006 f84f 	bl	80071ee <osThreadCreate>
 8001150:	4603      	mov	r3, r0
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <MX_FREERTOS_Init+0x164>)
 8001154:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001156:	bf00      	nop
 8001158:	3770      	adds	r7, #112	; 0x70
 800115a:	46bd      	mov	sp, r7
 800115c:	bdb0      	pop	{r4, r5, r7, pc}
 800115e:	bf00      	nop
 8001160:	2000022c 	.word	0x2000022c
 8001164:	20000230 	.word	0x20000230
 8001168:	20000234 	.word	0x20000234
 800116c:	0800c325 	.word	0x0800c325
 8001170:	20000224 	.word	0x20000224
 8001174:	0800b74d 	.word	0x0800b74d
 8001178:	20000228 	.word	0x20000228
 800117c:	080123d4 	.word	0x080123d4
 8001180:	20000220 	.word	0x20000220
 8001184:	080123dc 	.word	0x080123dc
 8001188:	20000210 	.word	0x20000210
 800118c:	080123f0 	.word	0x080123f0
 8001190:	20000214 	.word	0x20000214
 8001194:	08012404 	.word	0x08012404
 8001198:	20000218 	.word	0x20000218
 800119c:	08012418 	.word	0x08012418
 80011a0:	2000021c 	.word	0x2000021c

080011a4 <opt_get_queue>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
osMessageQId opt_get_queue(const Queue_ID qID)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	switch (qID)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <opt_get_queue+0x16>
	{
	case Q_MANAGER_NOTIF:
		return q_managerHandle;
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <opt_get_queue+0x24>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	e000      	b.n	80011bc <opt_get_queue+0x18>
	default:
		return 0;
 80011ba:	2300      	movs	r3, #0
	}
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000220 	.word	0x20000220

080011cc <mtr_get_mail>:

osMailQId mtr_get_mail(const Mail_ID id)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	if (id == Mail_Bus_id)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <mtr_get_mail+0x16>
		return mail_busHandle;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <mtr_get_mail+0x48>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	e012      	b.n	8001208 <mtr_get_mail+0x3c>
	else if (id == Mail_Motor_id)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d102      	bne.n	80011ee <mtr_get_mail+0x22>
		return mail_motorHandle;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <mtr_get_mail+0x4c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	e00c      	b.n	8001208 <mtr_get_mail+0x3c>
	else if (id == Mail_Weapon_id)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d102      	bne.n	80011fa <mtr_get_mail+0x2e>
		return mail_weaponHandle;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <mtr_get_mail+0x50>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	e006      	b.n	8001208 <mtr_get_mail+0x3c>
	else if (id == Mail_Motor_Ext_id)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d102      	bne.n	8001206 <mtr_get_mail+0x3a>
		return mail_motorExtHandle;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <mtr_get_mail+0x54>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	e000      	b.n	8001208 <mtr_get_mail+0x3c>

	return NULL;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	20000200 	.word	0x20000200
 8001218:	20000204 	.word	0x20000204
 800121c:	2000020c 	.word	0x2000020c
 8001220:	20000208 	.word	0x20000208

08001224 <mtr_get_timer>:

osTimerId mtr_get_timer(const Timer_ID tID)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	switch (tID)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <mtr_get_timer+0x16>
 8001234:	2b01      	cmp	r3, #1
 8001236:	d003      	beq.n	8001240 <mtr_get_timer+0x1c>
 8001238:	e005      	b.n	8001246 <mtr_get_timer+0x22>
	{
	case Tim_Weapon_id:
		return timWeaponHandle;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <mtr_get_timer+0x30>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	e003      	b.n	8001248 <mtr_get_timer+0x24>
	case Tim_Motor_id:
		return timMotorHandle;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <mtr_get_timer+0x34>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	e000      	b.n	8001248 <mtr_get_timer+0x24>
	default:
		return NULL;
 8001246:	2300      	movs	r3, #0
	}
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000224 	.word	0x20000224
 8001258:	20000228 	.word	0x20000228

0800125c <mtr_get_mutex>:

osMutexId mtr_get_mutex(const Mutex_ID mId)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	switch (mId)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d008      	beq.n	800127e <mtr_get_mutex+0x22>
 800126c:	2b02      	cmp	r3, #2
 800126e:	dc0c      	bgt.n	800128a <mtr_get_mutex+0x2e>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <mtr_get_mutex+0x28>
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <mtr_get_mutex+0x2e>
	{
	case Mutex_Motor_id:
		return mx_motor_stateHandle;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <mtr_get_mutex+0x3c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	e006      	b.n	800128c <mtr_get_mutex+0x30>
	case Mutex_motor_ext_id:
		return mx_motor_ext_stateHandle;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <mtr_get_mutex+0x40>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	e003      	b.n	800128c <mtr_get_mutex+0x30>
	case Mutex_Weapon_id:
		return mx_weapon_stateHandle;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <mtr_get_mutex+0x44>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	e000      	b.n	800128c <mtr_get_mutex+0x30>
	default:
		return NULL;
 800128a:	2300      	movs	r3, #0
	}
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000022c 	.word	0x2000022c
 800129c:	20000234 	.word	0x20000234
 80012a0:	20000230 	.word	0x20000230

080012a4 <mail_setup>:

static void mail_setup()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Bus_t */
	osMailQDef(mail_bus, 10, MAIL_Bus_t); /* Define mail queue */
 80012aa:	230a      	movs	r3, #10
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
 80012ae:	2310      	movs	r3, #16
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
 80012b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b6:	63bb      	str	r3, [r7, #56]	; 0x38
	mail_busHandle = osMailCreate(osMailQ(mail_bus), NULL); /* create mail queue */
 80012b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 faea 	bl	8007898 <osMailCreate>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <mail_setup+0x8c>)
 80012c8:	6013      	str	r3, [r2, #0]

	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Motor_t */
	osMailQDef(mail_motor, 20, MAIL_Motor_t); /* Define mail queue */
 80012ca:	2314      	movs	r3, #20
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	230c      	movs	r3, #12
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
	mail_motorHandle = osMailCreate(osMailQ(mail_motor), NULL); /* create mail queue */
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 fada 	bl	8007898 <osMailCreate>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <mail_setup+0x90>)
 80012e8:	6013      	str	r3, [r2, #0]

	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Motor_t */
	osMailQDef(mail_motor_ext, 10, MAIL_Motor_Ext_t); /* Define mail queue */
 80012ea:	230a      	movs	r3, #10
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	230c      	movs	r3, #12
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	61bb      	str	r3, [r7, #24]
	mail_motorExtHandle = osMailCreate(osMailQ(mail_motor_ext), NULL); /* create mail queue */
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f006 faca 	bl	8007898 <osMailCreate>
 8001304:	4603      	mov	r3, r0
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <mail_setup+0x94>)
 8001308:	6013      	str	r3, [r2, #0]

	/* Create the mail queue used by the command_proc tasks to pass the struct MAIL_Weapon_t */
	osMailQDef(mail_weapon, 10, MAIL_Weapon_t); /* Define mail queue */
 800130a:	230a      	movs	r3, #10
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	2306      	movs	r3, #6
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	60bb      	str	r3, [r7, #8]
	mail_weaponHandle = osMailCreate(osMailQ(mail_weapon), NULL); /* create mail queue */
 8001318:	463b      	mov	r3, r7
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f006 fabb 	bl	8007898 <osMailCreate>
 8001322:	4603      	mov	r3, r0
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <mail_setup+0x98>)
 8001326:	6013      	str	r3, [r2, #0]

}
 8001328:	bf00      	nop
 800132a:	3740      	adds	r7, #64	; 0x40
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000200 	.word	0x20000200
 8001334:	20000204 	.word	0x20000204
 8001338:	20000208 	.word	0x20000208
 800133c:	2000020c 	.word	0x2000020c

08001340 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <MX_FDCAN1_Init+0x88>)
 8001348:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 800135e:	2200      	movs	r2, #0
 8001360:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001364:	2200      	movs	r2, #0
 8001366:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 800136a:	2200      	movs	r2, #0
 800136c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001370:	2202      	movs	r2, #2
 8001372:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 22;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001376:	2216      	movs	r2, #22
 8001378:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 147;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 800137c:	2293      	movs	r2, #147	; 0x93
 800137e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 22;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001382:	2216      	movs	r2, #22
 8001384:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001388:	2201      	movs	r2, #1
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 8;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 800138e:	2208      	movs	r2, #8
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 8001394:	2208      	movs	r2, #8
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 8;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 800139a:	2208      	movs	r2, #8
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 80013a0:	221c      	movs	r2, #28
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_FDCAN1_Init+0x84>)
 80013b2:	f001 f837 	bl	8002424 <HAL_FDCAN_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80013bc:	f000 fae2 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000238 	.word	0x20000238
 80013c8:	40006400 	.word	0x40006400

080013cc <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013d2:	4a20      	ldr	r2, [pc, #128]	; (8001454 <MX_FDCAN2_Init+0x88>)
 80013d4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_FDCAN2_Init+0x84>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 22;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001402:	2216      	movs	r2, #22
 8001404:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 147;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001408:	2293      	movs	r2, #147	; 0x93
 800140a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 22;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_FDCAN2_Init+0x84>)
 800140e:	2216      	movs	r2, #22
 8001410:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001414:	2201      	movs	r2, #1
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 16;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_FDCAN2_Init+0x84>)
 800141a:	2210      	movs	r2, #16
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 17;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001420:	2211      	movs	r2, #17
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 16;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001426:	2210      	movs	r2, #16
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 28;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_FDCAN2_Init+0x84>)
 800142c:	221c      	movs	r2, #28
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 8;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001432:	2208      	movs	r2, #8
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_FDCAN2_Init+0x84>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_FDCAN2_Init+0x84>)
 800143e:	f000 fff1 	bl	8002424 <HAL_FDCAN_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001448:	f000 fa9c 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000029c 	.word	0x2000029c
 8001454:	40006800 	.word	0x40006800

08001458 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0a0      	sub	sp, #128	; 0x80
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2250      	movs	r2, #80	; 0x50
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f00e f8c5 	bl	800f608 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <HAL_FDCAN_MspInit+0x16c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d14b      	bne.n	8001520 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800148e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001492:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fef3 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80014a4:	f000 fa6e 	bl	8001984 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80014a8:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_FDCAN_MspInit+0x170>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a46      	ldr	r2, [pc, #280]	; (80015c8 <HAL_FDCAN_MspInit+0x170>)
 80014b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_FDCAN_MspInit+0x170>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10b      	bne.n	80014d2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80014ba:	4b44      	ldr	r3, [pc, #272]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a43      	ldr	r2, [pc, #268]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 80014c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = BUS_RX_Pin|BUS_TX_Pin;
 80014ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80014fc:	2309      	movs	r3, #9
 80014fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f001 fe49 	bl	80031a0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2105      	movs	r1, #5
 8001512:	2015      	movs	r0, #21
 8001514:	f000 ff5e 	bl	80023d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001518:	2015      	movs	r0, #21
 800151a:	f000 ff75 	bl	8002408 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800151e:	e04d      	b.n	80015bc <HAL_FDCAN_MspInit+0x164>
  else if(fdcanHandle->Instance==FDCAN2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2a      	ldr	r2, [pc, #168]	; (80015d0 <HAL_FDCAN_MspInit+0x178>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d148      	bne.n	80015bc <HAL_FDCAN_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001534:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fea2 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8001546:	f000 fa1d 	bl	8001984 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HAL_FDCAN_MspInit+0x170>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_FDCAN_MspInit+0x170>)
 8001552:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_FDCAN_MspInit+0x170>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10b      	bne.n	8001574 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_FDCAN_MspInit+0x174>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_RX_Pin|MOTOR_TX_Pin;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800159c:	2309      	movs	r3, #9
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <HAL_FDCAN_MspInit+0x17c>)
 80015a8:	f001 fdfa 	bl	80031a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2105      	movs	r1, #5
 80015b0:	2056      	movs	r0, #86	; 0x56
 80015b2:	f000 ff0f 	bl	80023d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80015b6:	2056      	movs	r0, #86	; 0x56
 80015b8:	f000 ff26 	bl	8002408 <HAL_NVIC_EnableIRQ>
}
 80015bc:	bf00      	nop
 80015be:	3780      	adds	r7, #128	; 0x80
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40006400 	.word	0x40006400
 80015c8:	20000300 	.word	0x20000300
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40006800 	.word	0x40006800
 80015d4:	48000400 	.word	0x48000400

080015d8 <MX_GPIO_Init>:
     PA1   ------> USART2_DE
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b94      	ldr	r3, [pc, #592]	; (8001840 <MX_GPIO_Init+0x268>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a93      	ldr	r2, [pc, #588]	; (8001840 <MX_GPIO_Init+0x268>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b91      	ldr	r3, [pc, #580]	; (8001840 <MX_GPIO_Init+0x268>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001606:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <MX_GPIO_Init+0x268>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a8d      	ldr	r2, [pc, #564]	; (8001840 <MX_GPIO_Init+0x268>)
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <MX_GPIO_Init+0x268>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <MX_GPIO_Init+0x268>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a87      	ldr	r2, [pc, #540]	; (8001840 <MX_GPIO_Init+0x268>)
 8001624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <MX_GPIO_Init+0x268>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <MX_GPIO_Init+0x268>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a81      	ldr	r2, [pc, #516]	; (8001840 <MX_GPIO_Init+0x268>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <MX_GPIO_Init+0x268>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <MX_GPIO_Init+0x268>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a7b      	ldr	r2, [pc, #492]	; (8001840 <MX_GPIO_Init+0x268>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <MX_GPIO_Init+0x268>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COCK_PWR_EN_Pin|TRIGGER_ENABLE_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f248 0120 	movw	r1, #32800	; 0x8020
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f001 ff30 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_START_GPIO_Port, T_START_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167a:	4872      	ldr	r0, [pc, #456]	; (8001844 <MX_GPIO_Init+0x26c>)
 800167c:	f001 ff2a 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	4870      	ldr	r0, [pc, #448]	; (8001848 <MX_GPIO_Init+0x270>)
 8001686:	f001 ff25 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001690:	486c      	ldr	r0, [pc, #432]	; (8001844 <MX_GPIO_Init+0x26c>)
 8001692:	f001 ff1f 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC4 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_10
 8001696:	f64c 4310 	movw	r3, #52240	; 0xcc10
 800169a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169c:	2303      	movs	r3, #3
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4867      	ldr	r0, [pc, #412]	; (8001848 <MX_GPIO_Init+0x270>)
 80016ac:	f001 fd78 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80016b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4861      	ldr	r0, [pc, #388]	; (800184c <MX_GPIO_Init+0x274>)
 80016c6:	f001 fd6b 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IMU_DE_Pin|IMU_RX_Pin;
 80016ca:	2306      	movs	r3, #6
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f001 fd5a 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_TX_Pin;
 80016ec:	2308      	movs	r3, #8
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_TX_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f001 fd49 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COCK_PWR_EN_Pin;
 800170e:	2320      	movs	r3, #32
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001716:	2302      	movs	r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COCK_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f001 fd3a 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIM_AZ_ZERO_Pin;
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001730:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIM_AZ_ZERO_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f001 fd2c 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001748:	f242 4397 	movw	r3, #9367	; 0x2497
 800174c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	2303      	movs	r3, #3
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4839      	ldr	r0, [pc, #228]	; (8001844 <MX_GPIO_Init+0x26c>)
 800175e:	f001 fd1f 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MUNC_A_Pin|MUNC_B_Pin;
 8001762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001768:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4832      	ldr	r0, [pc, #200]	; (8001844 <MX_GPIO_Init+0x26c>)
 800177a:	f001 fd11 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_JS_PULSE_Pin;
 800177e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001788:	2301      	movs	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_JS_PULSE_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	482c      	ldr	r0, [pc, #176]	; (8001844 <MX_GPIO_Init+0x26c>)
 8001794:	f001 fd04 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_START_Pin|LED_BUILTIN_Pin;
 8001798:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4824      	ldr	r0, [pc, #144]	; (8001844 <MX_GPIO_Init+0x26c>)
 80017b2:	f001 fcf5 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_HOLD_Pin;
 80017b6:	2340      	movs	r3, #64	; 0x40
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_HOLD_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	481e      	ldr	r0, [pc, #120]	; (8001848 <MX_GPIO_Init+0x270>)
 80017ce:	f001 fce7 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d8:	2303      	movs	r3, #3
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f001 fcd9 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGGER_ENABLE_Pin;
 80017ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f001 fcc9 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800180e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001818:	2302      	movs	r3, #2
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <MX_GPIO_Init+0x26c>)
 8001824:	f001 fcbc 	bl	80031a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2105      	movs	r1, #5
 800182c:	2028      	movs	r0, #40	; 0x28
 800182e:	f000 fdd1 	bl	80023d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001832:	2028      	movs	r0, #40	; 0x28
 8001834:	f000 fde8 	bl	8002408 <HAL_NVIC_EnableIRQ>

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400
 8001848:	48000800 	.word	0x48000800
 800184c:	48001800 	.word	0x48001800

08001850 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_IWDG_Init+0x34>)
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <MX_IWDG_Init+0x38>)
 8001858:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_IWDG_Init+0x34>)
 800185c:	2206      	movs	r2, #6
 800185e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 625;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_IWDG_Init+0x34>)
 8001862:	f240 2271 	movw	r2, #625	; 0x271
 8001866:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 625;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_IWDG_Init+0x34>)
 800186a:	f240 2271 	movw	r2, #625	; 0x271
 800186e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_IWDG_Init+0x34>)
 8001872:	f001 fe61 	bl	8003538 <HAL_IWDG_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800187c:	f000 f882 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000304 	.word	0x20000304
 8001888:	40003000 	.word	0x40003000

0800188c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	reset_source_init();
 8001890:	f009 f98c 	bl	800abac <reset_source_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001894:	f000 fc8d 	bl	80021b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001898:	f000 f815 	bl	80018c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189c:	f7ff fe9c 	bl	80015d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80018a0:	f000 fba8 	bl	8001ff4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80018a4:	f000 fa1c 	bl	8001ce0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018a8:	f000 fa6e 	bl	8001d88 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 80018ac:	f7ff fd48 	bl	8001340 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80018b0:	f7ff fd8c 	bl	80013cc <MX_FDCAN2_Init>
  MX_IWDG_Init();
 80018b4:	f7ff ffcc 	bl	8001850 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	main_c_init();
 80018b8:	f009 f9da 	bl	800ac70 <main_c_init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80018bc:	f7ff fbbe 	bl	800103c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018c0:	f005 fc7e 	bl	80071c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80018c4:	e7fe      	b.n	80018c4 <main+0x38>

080018c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b094      	sub	sp, #80	; 0x50
 80018ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	2238      	movs	r2, #56	; 0x38
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00d fe97 	bl	800f608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f001 fe85 	bl	80035f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018ee:	2309      	movs	r3, #9
 80018f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001900:	2303      	movs	r3, #3
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001904:	2302      	movs	r3, #2
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001908:	2355      	movs	r3, #85	; 0x55
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800190c:	2302      	movs	r3, #2
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001914:	2302      	movs	r3, #2
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4618      	mov	r0, r3
 800191e:	f001 ff1f 	bl	8003760 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001928:	f000 f82c 	bl	8001984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2303      	movs	r3, #3
 8001932:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2104      	movs	r1, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fa23 	bl	8003d90 <HAL_RCC_ClockConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001950:	f000 f818 	bl	8001984 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001954:	f002 fc24 	bl	80041a0 <HAL_RCC_EnableCSS>
}
 8001958:	bf00      	nop
 800195a:	3750      	adds	r7, #80	; 0x50
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001972:	f000 fc37 	bl	80021e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40001400 	.word	0x40001400

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800198c:	e7fe      	b.n	800198c <Error_Handler+0x8>
	...

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_MspInit+0x50>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_MspInit+0x50>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_MspInit+0x50>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_MspInit+0x50>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_MspInit+0x50>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x50>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	210f      	movs	r1, #15
 80019ca:	f06f 0001 	mvn.w	r0, #1
 80019ce:	f000 fd01 	bl	80023d4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019d2:	f001 feb5 	bl	8003740 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_InitTick+0xcc>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <HAL_InitTick+0xcc>)
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_InitTick+0xcc>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fb8d 	bl	800413c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a22:	f002 fb5f 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8001a26:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <HAL_InitTick+0xd0>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	3b01      	subs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <HAL_InitTick+0xd8>)
 8001a3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a42:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001a56:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a58:	f002 fe50 	bl	80046fc <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11b      	bne.n	8001aa2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001a6a:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a6c:	f002 fe9e 	bl	80047ac <HAL_TIM_Base_Start_IT>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d111      	bne.n	8001aa2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a7e:	2037      	movs	r0, #55	; 0x37
 8001a80:	f000 fcc2 	bl	8002408 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d808      	bhi.n	8001a9c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	2037      	movs	r0, #55	; 0x37
 8001a90:	f000 fca0 	bl	80023d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e002      	b.n	8001aa2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3730      	adds	r7, #48	; 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	20000314 	.word	0x20000314
 8001abc:	40001400 	.word	0x40001400
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ac8:	f002 fb7a 	bl	80041c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x8>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <FDCAN1_IT0_IRQHandler+0x10>)
 8001afa:	f001 f8e7 	bl	8002ccc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000238 	.word	0x20000238

08001b08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM7_IRQHandler+0x10>)
 8001b0e:	f003 faa2 	bl	8005056 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000314 	.word	0x20000314

08001b1c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <FDCAN2_IT0_IRQHandler+0x10>)
 8001b22:	f001 f8d3 	bl	8002ccc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000029c 	.word	0x2000029c

08001b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_kill>:

int _kill(int pid, int sig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4a:	f00d fd25 	bl	800f598 <__errno>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2216      	movs	r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
	return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_exit>:

void _exit (int status)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffe7 	bl	8001b40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b72:	e7fe      	b.n	8001b72 <_exit+0x12>

08001b74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e00a      	b.n	8001b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b86:	f00d fb29 	bl	800f1dc <__io_getchar>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	60ba      	str	r2, [r7, #8]
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbf0      	blt.n	8001b86 <_read+0x12>
	}

return len;
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e009      	b.n	8001bd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00d faf9 	bl	800f1c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbf1      	blt.n	8001bc0 <_write+0x12>
	}
	return len;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_close>:

int _close(int file)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	return -1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_isatty>:

int _isatty(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	return 1;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <_sbrk+0x5c>)
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <_sbrk+0x60>)
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <_sbrk+0x64>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <_sbrk+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d207      	bcs.n	8001c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c80:	f00d fc8a 	bl	800f598 <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	220c      	movs	r2, #12
 8001c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e009      	b.n	8001ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <_sbrk+0x64>)
 8001ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2001c000 	.word	0x2001c000
 8001cb0:	00000400 	.word	0x00000400
 8001cb4:	20000360 	.word	0x20000360
 8001cb8:	20010e08 	.word	0x20010e08

08001cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SystemInit+0x20>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <SystemInit+0x20>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2224      	movs	r2, #36	; 0x24
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00d fc8a 	bl	800f608 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d52:	f002 ffa5 	bl	8004ca0 <HAL_TIM_Encoder_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d5c:	f7ff fe12 	bl	8001984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_TIM2_Init+0xa4>)
 8001d6e:	f004 f9bb 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d78:	f7ff fe04 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3730      	adds	r7, #48	; 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000364 	.word	0x20000364

08001d88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	; 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dbc:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <MX_TIM3_Init+0x100>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dc2:	22a9      	movs	r2, #169	; 0xa9
 8001dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de0:	4828      	ldr	r0, [pc, #160]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001de2:	f002 fc8b 	bl	80046fc <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001dec:	f7ff fdca 	bl	8001984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4821      	ldr	r0, [pc, #132]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dfe:	f003 fbbd 	bl	800557c <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001e08:	f7ff fdbc 	bl	8001984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0c:	481d      	ldr	r0, [pc, #116]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e0e:	f002 fd3d 	bl	800488c <HAL_TIM_PWM_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e18:	f7ff fdb4 	bl	8001984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e2c:	f004 f95c 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e36:	f7ff fda5 	bl	8001984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	; 0x60
 8001e3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e52:	f003 fa7f 	bl	8005354 <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e5c:	f7ff fd92 	bl	8001984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	2204      	movs	r2, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e68:	f003 fa74 	bl	8005354 <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001e72:	f7ff fd87 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e78:	f000 f886 	bl	8001f88 <HAL_TIM_MspPostInit>

}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	; 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200003b0 	.word	0x200003b0
 8001e88:	40000400 	.word	0x40000400

08001e8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d144      	bne.n	8001f38 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = COCK_ENC_A_Pin;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f06:	2301      	movs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(COCK_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f14:	f001 f944 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COCK_ENC_B_Pin;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(COCK_ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001f34:	f001 f934 	bl	80031a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000400 	.word	0x48000400

08001f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_TIM_Base_MspInit+0x38>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10b      	bne.n	8001f72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_TIM_Base_MspInit+0x3c>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_TIM_Base_MspInit+0x3c>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6593      	str	r3, [r2, #88]	; 0x58
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_TIM_Base_MspInit+0x3c>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_TIM_MspPostInit+0x64>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_TIM_MspPostInit+0x68>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_TIM_MspPostInit+0x68>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_TIM_MspPostInit+0x68>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = COCK_PWR_RETRACT_Pin|COCK_PWR_ERECT_Pin;
 8001fc2:	2350      	movs	r3, #80	; 0x50
 8001fc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f001 f8de 	bl	80031a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8001ffa:	4a23      	ldr	r2, [pc, #140]	; (8002088 <MX_USART1_UART_Init+0x94>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002000:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <MX_USART1_UART_Init+0x90>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_USART1_UART_Init+0x90>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_USART1_UART_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800203c:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_USART1_UART_Init+0x90>)
 800203e:	f004 f927 	bl	8006290 <HAL_UART_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002048:	f7ff fc9c 	bl	8001984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204c:	2100      	movs	r1, #0
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002050:	f004 ffc2 	bl	8006fd8 <HAL_UARTEx_SetTxFifoThreshold>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800205a:	f7ff fc93 	bl	8001984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205e:	2100      	movs	r1, #0
 8002060:	4808      	ldr	r0, [pc, #32]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002062:	f004 fff7 	bl	8007054 <HAL_UARTEx_SetRxFifoThreshold>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800206c:	f7ff fc8a 	bl	8001984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_USART1_UART_Init+0x90>)
 8002072:	f004 ff78 	bl	8006f66 <HAL_UARTEx_DisableFifoMode>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800207c:	f7ff fc82 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200003fc 	.word	0x200003fc
 8002088:	40013800 	.word	0x40013800

0800208c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b09e      	sub	sp, #120	; 0x78
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2250      	movs	r2, #80	; 0x50
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00d faab 	bl	800f608 <memset>
  if(uartHandle->Instance==USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a28      	ldr	r2, [pc, #160]	; (8002158 <HAL_UART_MspInit+0xcc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d149      	bne.n	8002150 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 f8db 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d4:	f7ff fc56 	bl	8001984 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_UART_MspInit+0xd0>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <HAL_UART_MspInit+0xd0>)
 80020de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e2:	6613      	str	r3, [r2, #96]	; 0x60
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_UART_MspInit+0xd0>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_UART_MspInit+0xd0>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_UART_MspInit+0xd0>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_UART_MspInit+0xd0>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800211a:	2307      	movs	r3, #7
 800211c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002128:	f001 f83a 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002136:	2301      	movs	r3, #1
 8002138:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800213e:	2307      	movs	r3, #7
 8002140:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214c:	f001 f828 	bl	80031a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002150:	bf00      	nop
 8002152:	3778      	adds	r7, #120	; 0x78
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013800 	.word	0x40013800
 800215c:	40021000 	.word	0x40021000

08002160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002160:	480d      	ldr	r0, [pc, #52]	; (8002198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002162:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <LoopForever+0x6>)
  ldr r1, =_edata
 8002166:	490e      	ldr	r1, [pc, #56]	; (80021a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <LoopForever+0xe>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800217c:	4c0b      	ldr	r4, [pc, #44]	; (80021ac <LoopForever+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800218a:	f7ff fd97 	bl	8001cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218e:	f00d fa09 	bl	800f5a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002192:	f7ff fb7b 	bl	800188c <main>

08002196 <LoopForever>:

LoopForever:
    b LoopForever
 8002196:	e7fe      	b.n	8002196 <LoopForever>
  ldr   r0, =_estack
 8002198:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021a4:	08012e3c 	.word	0x08012e3c
  ldr r2, =_sbss
 80021a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80021ac:	20010e08 	.word	0x20010e08

080021b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>

080021b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f000 f8fe 	bl	80023be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	200f      	movs	r0, #15
 80021c4:	f7ff fc0e 	bl	80019e4 <HAL_InitTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	e001      	b.n	80021d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d4:	f7ff fbdc 	bl	8001990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d8:	79fb      	ldrb	r3, [r7, #7]

}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x1c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_IncTick+0x20>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a03      	ldr	r2, [pc, #12]	; (8002200 <HAL_IncTick+0x1c>)
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	2000048c 	.word	0x2000048c
 8002204:	20000008 	.word	0x20000008

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	2000048c 	.word	0x2000048c

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d004      	beq.n	8002244 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_Delay+0x40>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002244:	bf00      	nop
 8002246:	f7ff ffdf 	bl	8002208 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	429a      	cmp	r2, r3
 8002254:	d8f7      	bhi.n	8002246 <HAL_Delay+0x26>
  {
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000008 	.word	0x20000008

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff4c 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e2:	f7ff ff63 	bl	80022ac <__NVIC_GetPriorityGrouping>
 80023e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f7ff ffb3 	bl	8002358 <NVIC_EncodePriority>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff82 	bl	8002304 <__NVIC_SetPriority>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff56 	bl	80022c8 <__NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e147      	b.n	80026c6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff f804 	bl	8001458 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0210 	bic.w	r2, r2, #16
 800245e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002460:	f7ff fed2 	bl	8002208 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002466:	e012      	b.n	800248e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002468:	f7ff fece 	bl	8002208 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d90b      	bls.n	800248e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e11b      	b.n	80026c6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d0e5      	beq.n	8002468 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ac:	f7ff feac 	bl	8002208 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80024b2:	e012      	b.n	80024da <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80024b4:	f7ff fea8 	bl	8002208 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b0a      	cmp	r3, #10
 80024c0:	d90b      	bls.n	80024da <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0f5      	b.n	80026c6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0e5      	beq.n	80024b4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0202 	orr.w	r2, r2, #2
 80024f6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a74      	ldr	r2, [pc, #464]	; (80026d0 <HAL_FDCAN_Init+0x2ac>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d103      	bne.n	800250a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002502:	4a74      	ldr	r2, [pc, #464]	; (80026d4 <HAL_FDCAN_Init+0x2b0>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7c1b      	ldrb	r3, [r3, #16]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002520:	619a      	str	r2, [r3, #24]
 8002522:	e007      	b.n	8002534 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002532:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7c5b      	ldrb	r3, [r3, #17]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d108      	bne.n	800254e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	e007      	b.n	800255e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800255c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7c9b      	ldrb	r3, [r3, #18]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002574:	619a      	str	r2, [r3, #24]
 8002576:	e007      	b.n	8002588 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002586:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80025ac:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0210 	bic.w	r2, r2, #16
 80025bc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	619a      	str	r2, [r3, #24]
 80025d6:	e02c      	b.n	8002632 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d028      	beq.n	8002632 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d01c      	beq.n	8002622 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0210 	orr.w	r2, r2, #16
 8002606:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d110      	bne.n	8002632 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	619a      	str	r2, [r3, #24]
 8002620:	e007      	b.n	8002632 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0220 	orr.w	r2, r2, #32
 8002630:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	3b01      	subs	r3, #1
 8002638:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	3b01      	subs	r3, #1
 8002640:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002642:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800264a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	3b01      	subs	r3, #1
 8002654:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800265a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800265c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002666:	d115      	bne.n	8002694 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	3b01      	subs	r3, #1
 8002674:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002676:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	3b01      	subs	r3, #1
 800267e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002680:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	3b01      	subs	r3, #1
 800268a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002690:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002692:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fc9a 	bl	8002fe4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40006400 	.word	0x40006400
 80026d4:	40006500 	.word	0x40006500

080026d8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026e8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <HAL_FDCAN_ConfigFilter+0x1e>
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d13d      	bne.n	8002772 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800270a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002712:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e01d      	b.n	800276e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	075a      	lsls	r2, r3, #29
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	079a      	lsls	r2, r3, #30
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3304      	adds	r3, #4
 8002766:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e006      	b.n	8002780 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d116      	bne.n	80027d4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ae:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	011a      	lsls	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	431a      	orrs	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e006      	b.n	80027e2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	0219      	lsls	r1, r3, #8
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	430a      	orrs	r2, r1
 8002812:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e006      	b.n	8002826 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d109      	bne.n	800285a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002854:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e006      	b.n	8002868 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	f043 0204 	orr.w	r2, r3, #4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d110      	bne.n	80028aa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e006      	b.n	80028b8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d12c      	bne.n	8002936 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e023      	b.n	8002944 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fbc8 	bl	80030a8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002928:	2201      	movs	r2, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e006      	b.n	8002944 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	f043 0208 	orr.w	r2, r3, #8
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800294c:	b480      	push	{r7}
 800294e:	b08b      	sub	sp, #44	; 0x2c
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002960:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002962:	7efb      	ldrb	r3, [r7, #27]
 8002964:	2b02      	cmp	r3, #2
 8002966:	f040 80bc 	bne.w	8002ae2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d121      	bne.n	80029b4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0af      	b.n	8002af0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	e020      	b.n	80029f6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e08d      	b.n	8002af0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e005      	b.n	8002a26 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3304      	adds	r3, #4
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e1b      	lsrs	r3, r3, #24
 8002a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0fda      	lsrs	r2, r3, #31
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	e00a      	b.n	8002ab0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	441a      	add	r2, r3
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3301      	adds	r3, #1
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	461a      	mov	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d3eb      	bcc.n	8002a9a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d105      	bne.n	8002ad4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002ad2:	e004      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e006      	b.n	8002af0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	372c      	adds	r7, #44	; 0x2c
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	08012964 	.word	0x08012964

08002b00 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b12:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d003      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x22>
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f040 80c8 	bne.w	8002cb2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03b      	beq.n	8002bb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d031      	beq.n	8002bb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d027      	beq.n	8002bb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01d      	beq.n	8002bb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d13b      	bne.n	8002c52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d131      	bne.n	8002c52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d127      	bne.n	8002c52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d113      	bne.n	8002c52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0202 	orr.w	r2, r2, #2
 8002c60:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e006      	b.n	8002cc0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cda:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	4013      	ands	r3, r2
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	4013      	ands	r3, r2
 8002d02:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002d26:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d3e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f923 	bl	8002fbc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d014      	beq.n	8002dbc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d9a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002db4:	6939      	ldr	r1, [r7, #16]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8e1 	bl	8002f7e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8b6 	bl	8002f3e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f007 ff8a 	bl	800acfc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f007 fffb 	bl	800adf4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f895 	bl	8002f54 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01a      	beq.n	8002e6e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e4e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f87d 	bl	8002f68 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e92:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f87d 	bl	8002f94 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ebe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f871 	bl	8002fa8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d011      	beq.n	8002ef8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002f06:	6979      	ldr	r1, [r7, #20]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f007 ff7f 	bl	800ae0c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f84d 	bl	8002fd0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002fec:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002fee:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d103      	bne.n	8003002 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003000:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003010:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003036:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	061a      	lsls	r2, r3, #24
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e005      	b.n	8003084 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3304      	adds	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d3f3      	bcc.n	8003078 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	4000a400 	.word	0x4000a400
 80030a4:	40006800 	.word	0x40006800

080030a8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80030c6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e00a      	b.n	80030ea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80030dc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80030e2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030e8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030f4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80030fa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003100:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	3304      	adds	r3, #4
 8003126:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3304      	adds	r3, #4
 8003132:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e020      	b.n	800317c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3303      	adds	r3, #3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3302      	adds	r3, #2
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	440b      	add	r3, r1
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003152:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	440b      	add	r3, r1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003160:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	440a      	add	r2, r1
 8003168:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800316a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	3304      	adds	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3304      	adds	r3, #4
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	4a06      	ldr	r2, [pc, #24]	; (800319c <FDCAN_CopyMessageToRAM+0xf4>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	461a      	mov	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4293      	cmp	r3, r2
 800318c:	d3d5      	bcc.n	800313a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	3724      	adds	r7, #36	; 0x24
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	08012964 	.word	0x08012964

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ae:	e15a      	b.n	8003466 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	4013      	ands	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 814c 	beq.w	8003460 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d005      	beq.n	80031e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d130      	bne.n	8003242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003216:	2201      	movs	r2, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 0201 	and.w	r2, r3, #1
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b03      	cmp	r3, #3
 800324c:	d017      	beq.n	800327e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d123      	bne.n	80032d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	6939      	ldr	r1, [r7, #16]
 80032ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0203 	and.w	r2, r3, #3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80a6 	beq.w	8003460 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_GPIO_Init+0x2e4>)
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	4a5a      	ldr	r2, [pc, #360]	; (8003484 <HAL_GPIO_Init+0x2e4>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6613      	str	r3, [r2, #96]	; 0x60
 8003320:	4b58      	ldr	r3, [pc, #352]	; (8003484 <HAL_GPIO_Init+0x2e4>)
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332c:	4a56      	ldr	r2, [pc, #344]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	220f      	movs	r2, #15
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003356:	d01f      	beq.n	8003398 <HAL_GPIO_Init+0x1f8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a4c      	ldr	r2, [pc, #304]	; (800348c <HAL_GPIO_Init+0x2ec>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d019      	beq.n	8003394 <HAL_GPIO_Init+0x1f4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a4b      	ldr	r2, [pc, #300]	; (8003490 <HAL_GPIO_Init+0x2f0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <HAL_GPIO_Init+0x1f0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_GPIO_Init+0x2f4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00d      	beq.n	800338c <HAL_GPIO_Init+0x1ec>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a49      	ldr	r2, [pc, #292]	; (8003498 <HAL_GPIO_Init+0x2f8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <HAL_GPIO_Init+0x1e8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a48      	ldr	r2, [pc, #288]	; (800349c <HAL_GPIO_Init+0x2fc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_GPIO_Init+0x1e4>
 8003380:	2305      	movs	r3, #5
 8003382:	e00a      	b.n	800339a <HAL_GPIO_Init+0x1fa>
 8003384:	2306      	movs	r3, #6
 8003386:	e008      	b.n	800339a <HAL_GPIO_Init+0x1fa>
 8003388:	2304      	movs	r3, #4
 800338a:	e006      	b.n	800339a <HAL_GPIO_Init+0x1fa>
 800338c:	2303      	movs	r3, #3
 800338e:	e004      	b.n	800339a <HAL_GPIO_Init+0x1fa>
 8003390:	2302      	movs	r3, #2
 8003392:	e002      	b.n	800339a <HAL_GPIO_Init+0x1fa>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_GPIO_Init+0x1fa>
 8003398:	2300      	movs	r3, #0
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	f002 0203 	and.w	r2, r2, #3
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	4093      	lsls	r3, r2
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033aa:	4937      	ldr	r1, [pc, #220]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033b8:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <HAL_GPIO_Init+0x300>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033dc:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <HAL_GPIO_Init+0x300>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_GPIO_Init+0x300>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <HAL_GPIO_Init+0x300>)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_GPIO_Init+0x300>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_GPIO_Init+0x300>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_GPIO_Init+0x300>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800345a:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_GPIO_Init+0x300>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f ae9d 	bne.w	80031b0 <HAL_GPIO_Init+0x10>
  }
}
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40021000 	.word	0x40021000
 8003488:	40010000 	.word	0x40010000
 800348c:	48000400 	.word	0x48000400
 8003490:	48000800 	.word	0x48000800
 8003494:	48000c00 	.word	0x48000c00
 8003498:	48001000 	.word	0x48001000
 800349c:	48001400 	.word	0x48001400
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e001      	b.n	80034c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
 80034e0:	4613      	mov	r3, r2
 80034e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e4:	787b      	ldrb	r3, [r7, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43d9      	mvns	r1, r3
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	400b      	ands	r3, r1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e041      	b.n	80035ce <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003552:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f245 5255 	movw	r2, #21845	; 0x5555
 800355c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6852      	ldr	r2, [r2, #4]
 8003566:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6892      	ldr	r2, [r2, #8]
 8003570:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003572:	f7fe fe49 	bl	8002208 <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003578:	e00f      	b.n	800359a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800357a:	f7fe fe45 	bl	8002208 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b31      	cmp	r3, #49	; 0x31
 8003586:	d908      	bls.n	800359a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e019      	b.n	80035ce <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e8      	bne.n	800357a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d005      	beq.n	80035c2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	611a      	str	r2, [r3, #16]
 80035c0:	e004      	b.n	80035cc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80035e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d141      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003606:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800360e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003612:	d131      	bne.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361a:	4a46      	ldr	r2, [pc, #280]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003624:	4b43      	ldr	r3, [pc, #268]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800362c:	4a41      	ldr	r2, [pc, #260]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003632:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003634:	4b40      	ldr	r3, [pc, #256]	; (8003738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2232      	movs	r2, #50	; 0x32
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4a3f      	ldr	r2, [pc, #252]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0c9b      	lsrs	r3, r3, #18
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364a:	e002      	b.n	8003652 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b01      	subs	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003652:	4b38      	ldr	r3, [pc, #224]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365e:	d102      	bne.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f2      	bne.n	800364c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d158      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e057      	b.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003678:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003688:	e04d      	b.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003690:	d141      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003692:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d131      	bne.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a6:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b0:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b8:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2232      	movs	r2, #50	; 0x32
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9b      	lsrs	r3, r3, #18
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d6:	e002      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ea:	d102      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f2      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d112      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e011      	b.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003714:	e007      	b.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003724:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40007000 	.word	0x40007000
 8003738:	20000000 	.word	0x20000000
 800373c:	431bde83 	.word	0x431bde83

08003740 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800374a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374e:	6093      	str	r3, [r2, #8]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40007000 	.word	0x40007000

08003760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e306      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d075      	beq.n	800386a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377e:	4b97      	ldr	r3, [pc, #604]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003788:	4b94      	ldr	r3, [pc, #592]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	d102      	bne.n	800379e <HAL_RCC_OscConfig+0x3e>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_OscConfig+0x44>
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d10b      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	4b8d      	ldr	r3, [pc, #564]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d05b      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d157      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e2e1      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x74>
 80037c6:	4b85      	ldr	r3, [pc, #532]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a84      	ldr	r2, [pc, #528]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x98>
 80037de:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7e      	ldr	r2, [pc, #504]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a7b      	ldr	r2, [pc, #492]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037f8:	4b78      	ldr	r3, [pc, #480]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a77      	ldr	r2, [pc, #476]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b75      	ldr	r3, [pc, #468]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a74      	ldr	r2, [pc, #464]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe fcf6 	bl	8002208 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe fcf2 	bl	8002208 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e2a6      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xc0>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe fce2 	bl	8002208 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe fcde 	bl	8002208 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e292      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800385a:	4b60      	ldr	r3, [pc, #384]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d075      	beq.n	8003962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003876:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003880:	4b56      	ldr	r3, [pc, #344]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b0c      	cmp	r3, #12
 800388e:	d102      	bne.n	8003896 <HAL_RCC_OscConfig+0x136>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d002      	beq.n	800389c <HAL_RCC_OscConfig+0x13c>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d11f      	bne.n	80038dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x154>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e265      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b49      	ldr	r3, [pc, #292]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	4946      	ldr	r1, [pc, #280]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038c8:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe f889 	bl	80019e4 <HAL_InitTick>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d043      	beq.n	8003960 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e251      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe fc8a 	bl	8002208 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fe fc86 	bl	8002208 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e23a      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800390a:	4b34      	ldr	r3, [pc, #208]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	492d      	ldr	r1, [pc, #180]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
 800392a:	e01a      	b.n	8003962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fc66 	bl	8002208 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7fe fc62 	bl	8002208 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e216      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1e0>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d041      	beq.n	80039f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397c:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe fc3f 	bl	8002208 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe fc3b 	bl	8002208 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e1ef      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ef      	beq.n	800398e <HAL_RCC_OscConfig+0x22e>
 80039ae:	e020      	b.n	80039f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fc22 	bl	8002208 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c6:	e00d      	b.n	80039e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fc1e 	bl	8002208 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d906      	bls.n	80039e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1d2      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e4:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ea      	bne.n	80039c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a6 	beq.w	8003b4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a04:	4b84      	ldr	r3, [pc, #528]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2b4>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x2b6>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b7f      	ldr	r3, [pc, #508]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a7e      	ldr	r2, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
 8003a26:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a32:	2301      	movs	r3, #1
 8003a34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a36:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <HAL_RCC_OscConfig+0x4bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d118      	bne.n	8003a74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a42:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x4bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a75      	ldr	r2, [pc, #468]	; (8003c1c <HAL_RCC_OscConfig+0x4bc>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fbdb 	bl	8002208 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a56:	f7fe fbd7 	bl	8002208 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e18b      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a68:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_RCC_OscConfig+0x4bc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d108      	bne.n	8003a8e <HAL_RCC_OscConfig+0x32e>
 8003a7c:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a65      	ldr	r2, [pc, #404]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8c:	e024      	b.n	8003ad8 <HAL_RCC_OscConfig+0x378>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d110      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x358>
 8003a96:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	4a5a      	ldr	r2, [pc, #360]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab6:	e00f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x378>
 8003ab8:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	4a56      	ldr	r2, [pc, #344]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d016      	beq.n	8003b0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fb92 	bl	8002208 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fb8e 	bl	8002208 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e140      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afe:	4b46      	ldr	r3, [pc, #280]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ed      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x388>
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0e:	f7fe fb7b 	bl	8002208 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fe fb77 	bl	8002208 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e129      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b2c:	4b3a      	ldr	r3, [pc, #232]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ed      	bne.n	8003b16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	4a34      	ldr	r2, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b60:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fb4a 	bl	8002208 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b78:	f7fe fb46 	bl	8002208 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0fa      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b8a:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x418>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe fb2d 	bl	8002208 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb2:	f7fe fb29 	bl	8002208 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0dd      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80d1 	beq.w	8003d7e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f000 808b 	beq.w	8003d00 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d15e      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fb03 	bl	8002208 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	e00c      	b.n	8003c20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe faff 	bl	8002208 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d905      	bls.n	8003c20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0b3      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ec      	bne.n	8003c06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2c:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4b56      	ldr	r3, [pc, #344]	; (8003d8c <HAL_RCC_OscConfig+0x62c>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6a11      	ldr	r1, [r2, #32]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c46:	0212      	lsls	r2, r2, #8
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0552      	lsls	r2, r2, #21
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c5a:	0852      	lsrs	r2, r2, #1
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0652      	lsls	r2, r2, #25
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c66:	06d2      	lsls	r2, r2, #27
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4947      	ldr	r1, [pc, #284]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a44      	ldr	r2, [pc, #272]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c7c:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a41      	ldr	r2, [pc, #260]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe fabe 	bl	8002208 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fe faba 	bl	8002208 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e06e      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x530>
 8003cae:	e066      	b.n	8003d7e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a2e      	ldr	r2, [pc, #184]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fa96 	bl	8002208 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fe fa92 	bl	8002208 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e046      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x580>
 8003cfe:	e03e      	b.n	8003d7e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e039      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <HAL_RCC_OscConfig+0x628>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d12c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d123      	bne.n	8003d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d11b      	bne.n	8003d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d113      	bne.n	8003d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	3b01      	subs	r3, #1
 8003d74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	019f800c 	.word	0x019f800c

08003d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e11e      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d910      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b8e      	ldr	r3, [pc, #568]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 020f 	bic.w	r2, r3, #15
 8003dbe:	498c      	ldr	r1, [pc, #560]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e106      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d073      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d129      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dec:	4b81      	ldr	r3, [pc, #516]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0f4      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dfc:	f000 f9fc 	bl	80041f8 <RCC_GetSysClockFreqFromPLLSource>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4a7c      	ldr	r2, [pc, #496]	; (8003ff8 <HAL_RCC_ClockConfig+0x268>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d93f      	bls.n	8003e8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d033      	beq.n	8003e8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d12f      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e2a:	4b72      	ldr	r3, [pc, #456]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	4a70      	ldr	r2, [pc, #448]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e024      	b.n	8003e8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e48:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0c6      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e58:	4b66      	ldr	r3, [pc, #408]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0be      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e68:	f000 f8ce 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4a61      	ldr	r2, [pc, #388]	; (8003ff8 <HAL_RCC_ClockConfig+0x268>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d909      	bls.n	8003e8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e76:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7e:	4a5d      	ldr	r2, [pc, #372]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4957      	ldr	r1, [pc, #348]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fe f9b4 	bl	8002208 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fe f9b0 	bl	8002208 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e095      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d023      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a42      	ldr	r2, [pc, #264]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003efc:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f04:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4936      	ldr	r1, [pc, #216]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	4a32      	ldr	r2, [pc, #200]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d21d      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 020f 	bic.w	r2, r3, #15
 8003f48:	4929      	ldr	r1, [pc, #164]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f50:	f7fe f95a 	bl	8002208 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f58:	f7fe f956 	bl	8002208 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e03b      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1ed      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4917      	ldr	r1, [pc, #92]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	490f      	ldr	r1, [pc, #60]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fba:	f000 f825 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	490c      	ldr	r1, [pc, #48]	; (8003ffc <HAL_RCC_ClockConfig+0x26c>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <HAL_RCC_ClockConfig+0x270>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_RCC_ClockConfig+0x274>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd fd00 	bl	80019e4 <HAL_InitTick>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	04c4b400 	.word	0x04c4b400
 8003ffc:	0801294c 	.word	0x0801294c
 8004000:	20000000 	.word	0x20000000
 8004004:	20000004 	.word	0x20000004

08004008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b04      	cmp	r3, #4
 8004018:	d102      	bne.n	8004020 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800401a:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e047      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004020:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b08      	cmp	r3, #8
 800402a:	d102      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e03e      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004032:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d136      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	3301      	adds	r3, #1
 8004054:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d10c      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800405c:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004066:	68d2      	ldr	r2, [r2, #12]
 8004068:	0a12      	lsrs	r2, r2, #8
 800406a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	617b      	str	r3, [r7, #20]
      break;
 8004074:	e00c      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	0a12      	lsrs	r2, r2, #8
 8004084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
      break;
 800408e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	0e5b      	lsrs	r3, r3, #25
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	3301      	adds	r3, #1
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e001      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040b0:	693b      	ldr	r3, [r7, #16]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000000 	.word	0x20000000

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e8:	f7ff fff0 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	0801295c 	.word	0x0801295c

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004114:	f7ff ffda 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0adb      	lsrs	r3, r3, #11
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4904      	ldr	r1, [pc, #16]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	0801295c 	.word	0x0801295c

0800413c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	220f      	movs	r2, #15
 800414a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0203 	and.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_RCC_GetClockConfig+0x60>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40022000 	.word	0x40022000

080041a0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_EnableCSS+0x1c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_RCC_EnableCSS+0x1c>)
 80041aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000

080041c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d0:	d105      	bne.n	80041de <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80041d2:	f000 f809 	bl	80041e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80041d6:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80041d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041dc:	621a      	str	r2, [r3, #32]
  }
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000

080041e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d10c      	bne.n	8004236 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004226:	68d2      	ldr	r2, [r2, #12]
 8004228:	0a12      	lsrs	r2, r2, #8
 800422a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	617b      	str	r3, [r7, #20]
    break;
 8004234:	e00c      	b.n	8004250 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	0a12      	lsrs	r2, r2, #8
 8004244:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]
    break;
 800424e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0e5b      	lsrs	r3, r3, #25
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800426a:	687b      	ldr	r3, [r7, #4]
}
 800426c:	4618      	mov	r0, r3
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40021000 	.word	0x40021000
 800427c:	007a1200 	.word	0x007a1200
 8004280:	00f42400 	.word	0x00f42400

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800428c:	2300      	movs	r3, #0
 800428e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004290:	2300      	movs	r3, #0
 8004292:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8098 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10d      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6593      	str	r3, [r2, #88]	; 0x58
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ce:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a39      	ldr	r2, [pc, #228]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042da:	f7fd ff95 	bl	8002208 <HAL_GetTick>
 80042de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e0:	e009      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7fd ff91 	bl	8002208 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d902      	bls.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	74fb      	strb	r3, [r7, #19]
        break;
 80042f4:	e005      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ef      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d159      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01e      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	d019      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004324:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004340:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd ff51 	bl	8002208 <HAL_GetTick>
 8004366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004368:	e00b      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd ff4d 	bl	8002208 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d902      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	74fb      	strb	r3, [r7, #19]
            break;
 8004380:	e006      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ec      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
 80043b2:	e005      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c0:	7c7b      	ldrb	r3, [r7, #17]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c6:	4ba7      	ldr	r3, [pc, #668]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	4aa6      	ldr	r2, [pc, #664]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043de:	4ba1      	ldr	r3, [pc, #644]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f023 0203 	bic.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	499d      	ldr	r1, [pc, #628]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004400:	4b98      	ldr	r3, [pc, #608]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f023 020c 	bic.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4995      	ldr	r1, [pc, #596]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004422:	4b90      	ldr	r3, [pc, #576]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	498c      	ldr	r1, [pc, #560]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004444:	4b87      	ldr	r3, [pc, #540]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4984      	ldr	r1, [pc, #528]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	497b      	ldr	r1, [pc, #492]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004488:	4b76      	ldr	r3, [pc, #472]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	4973      	ldr	r1, [pc, #460]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044aa:	4b6e      	ldr	r3, [pc, #440]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	496a      	ldr	r1, [pc, #424]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044cc:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4962      	ldr	r1, [pc, #392]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044ee:	4b5d      	ldr	r3, [pc, #372]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	4959      	ldr	r1, [pc, #356]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004510:	4b54      	ldr	r3, [pc, #336]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	4951      	ldr	r1, [pc, #324]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452e:	2b00      	cmp	r3, #0
 8004530:	d015      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004532:	4b4c      	ldr	r3, [pc, #304]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	4948      	ldr	r1, [pc, #288]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004550:	d105      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4a43      	ldr	r2, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	2b00      	cmp	r3, #0
 8004568:	d015      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	493a      	ldr	r1, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004588:	d105      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4a35      	ldr	r2, [pc, #212]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004594:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045a2:	4b30      	ldr	r3, [pc, #192]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	492c      	ldr	r1, [pc, #176]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c0:	d105      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c2:	4b28      	ldr	r3, [pc, #160]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4a27      	ldr	r2, [pc, #156]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045cc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	491e      	ldr	r1, [pc, #120]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f8:	d105      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004604:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d015      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	4910      	ldr	r1, [pc, #64]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004630:	d105      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4a0b      	ldr	r2, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	4902      	ldr	r1, [pc, #8]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004664:	40021000 	.word	0x40021000
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	4918      	ldr	r1, [pc, #96]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046de:	d105      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000

080046fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e049      	b.n	80047a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fd fc10 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f001 f84a 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04f      	b.n	8004864 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a23      	ldr	r2, [pc, #140]	; (8004870 <HAL_TIM_Base_Start_IT+0xc4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01d      	beq.n	8004822 <HAL_TIM_Base_Start_IT+0x76>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d018      	beq.n	8004822 <HAL_TIM_Base_Start_IT+0x76>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <HAL_TIM_Base_Start_IT+0xc8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_TIM_Base_Start_IT+0x76>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_TIM_Base_Start_IT+0xcc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00e      	beq.n	8004822 <HAL_TIM_Base_Start_IT+0x76>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_TIM_Base_Start_IT+0xd0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_TIM_Base_Start_IT+0x76>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <HAL_TIM_Base_Start_IT+0xd4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIM_Base_Start_IT+0x76>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <HAL_TIM_Base_Start_IT+0xd8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d115      	bne.n	800484e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	4b17      	ldr	r3, [pc, #92]	; (8004888 <HAL_TIM_Base_Start_IT+0xdc>)
 800482a:	4013      	ands	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b06      	cmp	r3, #6
 8004832:	d015      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0xb4>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d011      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	e008      	b.n	8004860 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e000      	b.n	8004862 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40013400 	.word	0x40013400
 8004880:	40014000 	.word	0x40014000
 8004884:	40015000 	.word	0x40015000
 8004888:	00010007 	.word	0x00010007

0800488c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e049      	b.n	8004932 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f841 	bl	800493a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 ff82 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <HAL_TIM_PWM_Start+0x24>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e03c      	b.n	80049ee <HAL_TIM_PWM_Start+0x9e>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b04      	cmp	r3, #4
 8004978:	d109      	bne.n	800498e <HAL_TIM_PWM_Start+0x3e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e02f      	b.n	80049ee <HAL_TIM_PWM_Start+0x9e>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d109      	bne.n	80049a8 <HAL_TIM_PWM_Start+0x58>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e022      	b.n	80049ee <HAL_TIM_PWM_Start+0x9e>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d109      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x72>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e015      	b.n	80049ee <HAL_TIM_PWM_Start+0x9e>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start+0x8c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e008      	b.n	80049ee <HAL_TIM_PWM_Start+0x9e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0a1      	b.n	8004b3a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0xb6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	e023      	b.n	8004a4e <HAL_TIM_PWM_Start+0xfe>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0xc6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	e01b      	b.n	8004a4e <HAL_TIM_PWM_Start+0xfe>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xd6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	e013      	b.n	8004a4e <HAL_TIM_PWM_Start+0xfe>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xe6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a34:	e00b      	b.n	8004a4e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0xf6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	e003      	b.n	8004a4e <HAL_TIM_PWM_Start+0xfe>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fb20 	bl	800609c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a38      	ldr	r2, [pc, #224]	; (8004b44 <HAL_TIM_PWM_Start+0x1f4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x148>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <HAL_TIM_PWM_Start+0x1f8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x148>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a35      	ldr	r2, [pc, #212]	; (8004b4c <HAL_TIM_PWM_Start+0x1fc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x148>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <HAL_TIM_PWM_Start+0x200>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x148>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a32      	ldr	r2, [pc, #200]	; (8004b54 <HAL_TIM_PWM_Start+0x204>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x148>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a31      	ldr	r2, [pc, #196]	; (8004b58 <HAL_TIM_PWM_Start+0x208>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_PWM_Start+0x14c>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_PWM_Start+0x14e>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <HAL_TIM_PWM_Start+0x1f4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x1a8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d018      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x1a8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a24      	ldr	r2, [pc, #144]	; (8004b5c <HAL_TIM_PWM_Start+0x20c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x1a8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <HAL_TIM_PWM_Start+0x210>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x1a8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_TIM_PWM_Start+0x1f8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x1a8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIM_PWM_Start+0x1fc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x1a8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <HAL_TIM_PWM_Start+0x208>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d115      	bne.n	8004b24 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_TIM_PWM_Start+0x214>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d015      	beq.n	8004b36 <HAL_TIM_PWM_Start+0x1e6>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b10:	d011      	beq.n	8004b36 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	e008      	b.n	8004b36 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e000      	b.n	8004b38 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800
 8004b58:	40015000 	.word	0x40015000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	00010007 	.word	0x00010007

08004b68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 fa8e 	bl	800609c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <HAL_TIM_PWM_Stop+0x120>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_TIM_PWM_Stop+0x54>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <HAL_TIM_PWM_Stop+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_TIM_PWM_Stop+0x54>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3d      	ldr	r2, [pc, #244]	; (8004c90 <HAL_TIM_PWM_Stop+0x128>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_TIM_PWM_Stop+0x54>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3c      	ldr	r2, [pc, #240]	; (8004c94 <HAL_TIM_PWM_Stop+0x12c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIM_PWM_Stop+0x54>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <HAL_TIM_PWM_Stop+0x130>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_PWM_Stop+0x54>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <HAL_TIM_PWM_Stop+0x134>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_PWM_Stop+0x58>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_TIM_PWM_Stop+0x5a>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d017      	beq.n	8004bf6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_TIM_PWM_Stop+0x8e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	f244 4344 	movw	r3, #17476	; 0x4444
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_PWM_Stop+0x8e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_TIM_PWM_Stop+0xbe>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	f244 4344 	movw	r3, #17476	; 0x4444
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_PWM_Stop+0xbe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Stop+0xce>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	e023      	b.n	8004c7e <HAL_TIM_PWM_Stop+0x116>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Stop+0xde>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	e01b      	b.n	8004c7e <HAL_TIM_PWM_Stop+0x116>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d104      	bne.n	8004c56 <HAL_TIM_PWM_Stop+0xee>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c54:	e013      	b.n	8004c7e <HAL_TIM_PWM_Stop+0x116>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Stop+0xfe>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c64:	e00b      	b.n	8004c7e <HAL_TIM_PWM_Stop+0x116>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Stop+0x10e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	e003      	b.n	8004c7e <HAL_TIM_PWM_Stop+0x116>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40013400 	.word	0x40013400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	40015000 	.word	0x40015000

08004ca0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e097      	b.n	8004de4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fd f8df 	bl	8001e8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004ce4:	f023 0307 	bic.w	r3, r3, #7
 8004ce8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 fd6d 	bl	80057d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	4313      	orrs	r3, r2
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d40:	f023 030c 	bic.w	r3, r3, #12
 8004d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	011a      	lsls	r2, r3, #4
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	031b      	lsls	r3, r3, #12
 8004d70:	4313      	orrs	r3, r2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	4313      	orrs	r3, r2
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d110      	bne.n	8004e3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e22:	7b7b      	ldrb	r3, [r7, #13]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d001      	beq.n	8004e2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e069      	b.n	8004f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3c:	e031      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d110      	bne.n	8004e66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e4a:	7b3b      	ldrb	r3, [r7, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e055      	b.n	8004f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e64:	e01d      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d108      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e72:	7b7b      	ldrb	r3, [r7, #13]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d102      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e78:	7b3b      	ldrb	r3, [r7, #12]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d001      	beq.n	8004e82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e03e      	b.n	8004f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_TIM_Encoder_Start+0xc4>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d008      	beq.n	8004ec0 <HAL_TIM_Encoder_Start+0xd4>
 8004eae:	e00f      	b.n	8004ed0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 f8ef 	bl	800609c <TIM_CCxChannelCmd>
      break;
 8004ebe:	e016      	b.n	8004eee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f8e7 	bl	800609c <TIM_CCxChannelCmd>
      break;
 8004ece:	e00e      	b.n	8004eee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 f8df 	bl	800609c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f8d8 	bl	800609c <TIM_CCxChannelCmd>
      break;
 8004eec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_TIM_Encoder_Stop+0x18>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d008      	beq.n	8004f30 <HAL_TIM_Encoder_Stop+0x28>
 8004f1e:	e00f      	b.n	8004f40 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 f8b7 	bl	800609c <TIM_CCxChannelCmd>
      break;
 8004f2e:	e016      	b.n	8004f5e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2104      	movs	r1, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 f8af 	bl	800609c <TIM_CCxChannelCmd>
      break;
 8004f3e:	e00e      	b.n	8004f5e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 f8a7 	bl	800609c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2104      	movs	r1, #4
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 f8a0 	bl	800609c <TIM_CCxChannelCmd>
      break;
 8004f5c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10f      	bne.n	8004f8e <HAL_TIM_Encoder_Stop+0x86>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	f244 4344 	movw	r3, #17476	; 0x4444
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <HAL_TIM_Encoder_Stop+0x86>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_TIM_Encoder_Stop+0x92>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d148      	bne.n	800502c <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_Encoder_Stop+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa8:	e023      	b.n	8004ff2 <HAL_TIM_Encoder_Stop+0xea>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_Encoder_Stop+0xb2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb8:	e01b      	b.n	8004ff2 <HAL_TIM_Encoder_Stop+0xea>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_Encoder_Stop+0xc2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc8:	e013      	b.n	8004ff2 <HAL_TIM_Encoder_Stop+0xea>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_Encoder_Stop+0xd2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fd8:	e00b      	b.n	8004ff2 <HAL_TIM_Encoder_Stop+0xea>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_Encoder_Stop+0xe2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe8:	e003      	b.n	8004ff2 <HAL_TIM_Encoder_Stop+0xea>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_Encoder_Stop+0xfa>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	e024      	b.n	800504c <HAL_TIM_Encoder_Stop+0x144>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d104      	bne.n	8005012 <HAL_TIM_Encoder_Stop+0x10a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005010:	e01c      	b.n	800504c <HAL_TIM_Encoder_Stop+0x144>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d104      	bne.n	8005022 <HAL_TIM_Encoder_Stop+0x11a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005020:	e014      	b.n	800504c <HAL_TIM_Encoder_Stop+0x144>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800502a:	e00f      	b.n	800504c <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b02      	cmp	r3, #2
 800506a:	d122      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d11b      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0202 	mvn.w	r2, #2
 8005082:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb7d 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 800509e:	e005      	b.n	80050ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb6f 	bl	8005784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fb80 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d122      	bne.n	8005106 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d11b      	bne.n	8005106 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0204 	mvn.w	r2, #4
 80050d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fb53 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 80050f2:	e005      	b.n	8005100 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb45 	bl	8005784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fb56 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b08      	cmp	r3, #8
 8005112:	d122      	bne.n	800515a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b08      	cmp	r3, #8
 8005120:	d11b      	bne.n	800515a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0208 	mvn.w	r2, #8
 800512a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2204      	movs	r2, #4
 8005130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb29 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 8005146:	e005      	b.n	8005154 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb1b 	bl	8005784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fb2c 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b10      	cmp	r3, #16
 8005166:	d122      	bne.n	80051ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d11b      	bne.n	80051ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0210 	mvn.w	r2, #16
 800517e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2208      	movs	r2, #8
 8005184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 faff 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 800519a:	e005      	b.n	80051a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 faf1 	bl	8005784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fb02 	bl	80057ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10e      	bne.n	80051da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f06f 0201 	mvn.w	r2, #1
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc fbc3 	bl	8001960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d10e      	bne.n	8005206 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d107      	bne.n	8005206 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 f809 	bl	8006218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d107      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fffc 	bl	800622c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fab0 	bl	80057c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0220 	mvn.w	r2, #32
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 ffbc 	bl	8006204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529a:	d10f      	bne.n	80052bc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 ffc2 	bl	8006240 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ca:	d10f      	bne.n	80052ec <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 ffb4 	bl	8006254 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fa:	d10f      	bne.n	800531c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 ffa6 	bl	8006268 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800532a:	d10f      	bne.n	800534c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005336:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533a:	d107      	bne.n	800534c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 ff98 	bl	800627c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800536e:	2302      	movs	r3, #2
 8005370:	e0ff      	b.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b14      	cmp	r3, #20
 800537e:	f200 80f0 	bhi.w	8005562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005563 	.word	0x08005563
 8005390:	08005563 	.word	0x08005563
 8005394:	08005563 	.word	0x08005563
 8005398:	0800541d 	.word	0x0800541d
 800539c:	08005563 	.word	0x08005563
 80053a0:	08005563 	.word	0x08005563
 80053a4:	08005563 	.word	0x08005563
 80053a8:	0800545f 	.word	0x0800545f
 80053ac:	08005563 	.word	0x08005563
 80053b0:	08005563 	.word	0x08005563
 80053b4:	08005563 	.word	0x08005563
 80053b8:	0800549f 	.word	0x0800549f
 80053bc:	08005563 	.word	0x08005563
 80053c0:	08005563 	.word	0x08005563
 80053c4:	08005563 	.word	0x08005563
 80053c8:	080054e1 	.word	0x080054e1
 80053cc:	08005563 	.word	0x08005563
 80053d0:	08005563 	.word	0x08005563
 80053d4:	08005563 	.word	0x08005563
 80053d8:	08005521 	.word	0x08005521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fa94 	bl	8005910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0204 	bic.w	r2, r2, #4
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	619a      	str	r2, [r3, #24]
      break;
 800541a:	e0a5      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb0e 	bl	8005a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	021a      	lsls	r2, r3, #8
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	619a      	str	r2, [r3, #24]
      break;
 800545c:	e084      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb81 	bl	8005b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0208 	orr.w	r2, r2, #8
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0204 	bic.w	r2, r2, #4
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
      break;
 800549c:	e064      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fbf3 	bl	8005c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69d9      	ldr	r1, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	61da      	str	r2, [r3, #28]
      break;
 80054de:	e043      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fc66 	bl	8005db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0208 	orr.w	r2, r2, #8
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0204 	bic.w	r2, r2, #4
 800550a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800551e:	e023      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fcb0 	bl	8005e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	021a      	lsls	r2, r3, #8
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005560:	e002      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
      break;
 8005566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop

0800557c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIM_ConfigClockSource+0x1c>
 8005594:	2302      	movs	r3, #2
 8005596:	e0e6      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x1ea>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80055b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a67      	ldr	r2, [pc, #412]	; (8005770 <HAL_TIM_ConfigClockSource+0x1f4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f000 80b1 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x1be>
 80055d8:	4a65      	ldr	r2, [pc, #404]	; (8005770 <HAL_TIM_ConfigClockSource+0x1f4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f200 80b6 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 80055e0:	4a64      	ldr	r2, [pc, #400]	; (8005774 <HAL_TIM_ConfigClockSource+0x1f8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f000 80a9 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x1be>
 80055e8:	4a62      	ldr	r2, [pc, #392]	; (8005774 <HAL_TIM_ConfigClockSource+0x1f8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	f200 80ae 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 80055f0:	4a61      	ldr	r2, [pc, #388]	; (8005778 <HAL_TIM_ConfigClockSource+0x1fc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	f000 80a1 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x1be>
 80055f8:	4a5f      	ldr	r2, [pc, #380]	; (8005778 <HAL_TIM_ConfigClockSource+0x1fc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	f200 80a6 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005600:	4a5e      	ldr	r2, [pc, #376]	; (800577c <HAL_TIM_ConfigClockSource+0x200>)
 8005602:	4293      	cmp	r3, r2
 8005604:	f000 8099 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005608:	4a5c      	ldr	r2, [pc, #368]	; (800577c <HAL_TIM_ConfigClockSource+0x200>)
 800560a:	4293      	cmp	r3, r2
 800560c:	f200 809e 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005610:	4a5b      	ldr	r2, [pc, #364]	; (8005780 <HAL_TIM_ConfigClockSource+0x204>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f000 8091 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005618:	4a59      	ldr	r2, [pc, #356]	; (8005780 <HAL_TIM_ConfigClockSource+0x204>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f200 8096 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005620:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005624:	f000 8089 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005628:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800562c:	f200 808e 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005634:	d03e      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0x138>
 8005636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563a:	f200 8087 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	f000 8086 	beq.w	8005752 <HAL_TIM_ConfigClockSource+0x1d6>
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564a:	d87f      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 800564c:	2b70      	cmp	r3, #112	; 0x70
 800564e:	d01a      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x10a>
 8005650:	2b70      	cmp	r3, #112	; 0x70
 8005652:	d87b      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005654:	2b60      	cmp	r3, #96	; 0x60
 8005656:	d050      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x17e>
 8005658:	2b60      	cmp	r3, #96	; 0x60
 800565a:	d877      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 800565c:	2b50      	cmp	r3, #80	; 0x50
 800565e:	d03c      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x15e>
 8005660:	2b50      	cmp	r3, #80	; 0x50
 8005662:	d873      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d058      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x19e>
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d86f      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	d064      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005670:	2b30      	cmp	r3, #48	; 0x30
 8005672:	d86b      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d060      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d867      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05c      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005680:	2b10      	cmp	r3, #16
 8005682:	d05a      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x1be>
 8005684:	e062      	b.n	800574c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f000 fce1 	bl	800605c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	609a      	str	r2, [r3, #8]
      break;
 80056b2:	e04f      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6899      	ldr	r1, [r3, #8]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f000 fcca 	bl	800605c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d6:	609a      	str	r2, [r3, #8]
      break;
 80056d8:	e03c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fc3c 	bl	8005f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2150      	movs	r1, #80	; 0x50
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fc95 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e02c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fc5b 	bl	8005fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2160      	movs	r1, #96	; 0x60
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fc85 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005718:	e01c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fc1c 	bl	8005f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2140      	movs	r1, #64	; 0x40
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fc75 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005738:	e00c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f000 fc6c 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 800574a:	e003      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	e000      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8005752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	00100070 	.word	0x00100070
 8005774:	00100050 	.word	0x00100050
 8005778:	00100040 	.word	0x00100040
 800577c:	00100030 	.word	0x00100030
 8005780:	00100020 	.word	0x00100020

08005784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a42      	ldr	r2, [pc, #264]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3f      	ldr	r2, [pc, #252]	; (80058f4 <TIM_Base_SetConfig+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3e      	ldr	r2, [pc, #248]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <TIM_Base_SetConfig+0x128>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <TIM_Base_SetConfig+0x12c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a31      	ldr	r2, [pc, #196]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01f      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d01b      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2e      	ldr	r2, [pc, #184]	; (80058f4 <TIM_Base_SetConfig+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d017      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <TIM_Base_SetConfig+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <TIM_Base_SetConfig+0x130>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <TIM_Base_SetConfig+0x134>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <TIM_Base_SetConfig+0x138>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a25      	ldr	r2, [pc, #148]	; (8005900 <TIM_Base_SetConfig+0x12c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <TIM_Base_SetConfig+0x100>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <TIM_Base_SetConfig+0x128>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00f      	beq.n	80058d4 <TIM_Base_SetConfig+0x100>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a13      	ldr	r2, [pc, #76]	; (8005904 <TIM_Base_SetConfig+0x130>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <TIM_Base_SetConfig+0x100>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a12      	ldr	r2, [pc, #72]	; (8005908 <TIM_Base_SetConfig+0x134>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_Base_SetConfig+0x100>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a11      	ldr	r2, [pc, #68]	; (800590c <TIM_Base_SetConfig+0x138>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0x100>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <TIM_Base_SetConfig+0x12c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	615a      	str	r2, [r3, #20]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40013400 	.word	0x40013400
 8005900:	40015000 	.word	0x40015000
 8005904:	40014000 	.word	0x40014000
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800

08005910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f023 0201 	bic.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 0302 	bic.w	r3, r3, #2
 800595c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a30      	ldr	r2, [pc, #192]	; (8005a2c <TIM_OC1_SetConfig+0x11c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <TIM_OC1_SetConfig+0x88>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2f      	ldr	r2, [pc, #188]	; (8005a30 <TIM_OC1_SetConfig+0x120>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_OC1_SetConfig+0x88>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <TIM_OC1_SetConfig+0x124>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_OC1_SetConfig+0x88>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <TIM_OC1_SetConfig+0x128>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_OC1_SetConfig+0x88>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <TIM_OC1_SetConfig+0x12c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC1_SetConfig+0x88>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2b      	ldr	r2, [pc, #172]	; (8005a40 <TIM_OC1_SetConfig+0x130>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10c      	bne.n	80059b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0308 	bic.w	r3, r3, #8
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <TIM_OC1_SetConfig+0x11c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <TIM_OC1_SetConfig+0xd2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <TIM_OC1_SetConfig+0x120>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_OC1_SetConfig+0xd2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <TIM_OC1_SetConfig+0x124>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_OC1_SetConfig+0xd2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1a      	ldr	r2, [pc, #104]	; (8005a38 <TIM_OC1_SetConfig+0x128>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_OC1_SetConfig+0xd2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <TIM_OC1_SetConfig+0x12c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC1_SetConfig+0xd2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <TIM_OC1_SetConfig+0x130>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d111      	bne.n	8005a06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800
 8005a40:	40015000 	.word	0x40015000

08005a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f023 0210 	bic.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0320 	bic.w	r3, r3, #32
 8005a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <TIM_OC2_SetConfig+0x110>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_OC2_SetConfig+0x74>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a2b      	ldr	r2, [pc, #172]	; (8005b58 <TIM_OC2_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_OC2_SetConfig+0x74>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <TIM_OC2_SetConfig+0x118>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10d      	bne.n	8005ad4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <TIM_OC2_SetConfig+0x110>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <TIM_OC2_SetConfig+0xc0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <TIM_OC2_SetConfig+0x114>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00f      	beq.n	8005b04 <TIM_OC2_SetConfig+0xc0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a1e      	ldr	r2, [pc, #120]	; (8005b60 <TIM_OC2_SetConfig+0x11c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_OC2_SetConfig+0xc0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <TIM_OC2_SetConfig+0x120>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_OC2_SetConfig+0xc0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <TIM_OC2_SetConfig+0x124>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC2_SetConfig+0xc0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <TIM_OC2_SetConfig+0x118>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40013400 	.word	0x40013400
 8005b5c:	40015000 	.word	0x40015000
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800

08005b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2b      	ldr	r2, [pc, #172]	; (8005c78 <TIM_OC3_SetConfig+0x10c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_OC3_SetConfig+0x72>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <TIM_OC3_SetConfig+0x110>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC3_SetConfig+0x72>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a29      	ldr	r2, [pc, #164]	; (8005c80 <TIM_OC3_SetConfig+0x114>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10d      	bne.n	8005bfa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <TIM_OC3_SetConfig+0x10c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <TIM_OC3_SetConfig+0xbe>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <TIM_OC3_SetConfig+0x110>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00f      	beq.n	8005c2a <TIM_OC3_SetConfig+0xbe>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <TIM_OC3_SetConfig+0x118>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_OC3_SetConfig+0xbe>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <TIM_OC3_SetConfig+0x11c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_OC3_SetConfig+0xbe>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <TIM_OC3_SetConfig+0x120>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC3_SetConfig+0xbe>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <TIM_OC3_SetConfig+0x114>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d113      	bne.n	8005c52 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40015000 	.word	0x40015000
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <TIM_OC4_SetConfig+0x110>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_OC4_SetConfig+0x74>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <TIM_OC4_SetConfig+0x114>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_OC4_SetConfig+0x74>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <TIM_OC4_SetConfig+0x118>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d10d      	bne.n	8005d20 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <TIM_OC4_SetConfig+0x110>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <TIM_OC4_SetConfig+0xc0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <TIM_OC4_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00f      	beq.n	8005d50 <TIM_OC4_SetConfig+0xc0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <TIM_OC4_SetConfig+0x11c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_OC4_SetConfig+0xc0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_OC4_SetConfig+0x120>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_OC4_SetConfig+0xc0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <TIM_OC4_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_OC4_SetConfig+0xc0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <TIM_OC4_SetConfig+0x118>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d113      	bne.n	8005d78 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40013400 	.word	0x40013400
 8005da8:	40015000 	.word	0x40015000
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400
 8005db4:	40014800 	.word	0x40014800

08005db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <TIM_OC5_SetConfig+0xbc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <TIM_OC5_SetConfig+0x82>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <TIM_OC5_SetConfig+0xc0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00f      	beq.n	8005e3a <TIM_OC5_SetConfig+0x82>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <TIM_OC5_SetConfig+0xc4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_OC5_SetConfig+0x82>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <TIM_OC5_SetConfig+0xc8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <TIM_OC5_SetConfig+0x82>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <TIM_OC5_SetConfig+0xcc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_OC5_SetConfig+0x82>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <TIM_OC5_SetConfig+0xd0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d109      	bne.n	8005e4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40015000 	.word	0x40015000

08005e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <TIM_OC6_SetConfig+0xc0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <TIM_OC6_SetConfig+0x84>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <TIM_OC6_SetConfig+0xc4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00f      	beq.n	8005f10 <TIM_OC6_SetConfig+0x84>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <TIM_OC6_SetConfig+0xc8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <TIM_OC6_SetConfig+0x84>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <TIM_OC6_SetConfig+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_OC6_SetConfig+0x84>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <TIM_OC6_SetConfig+0xd0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC6_SetConfig+0x84>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <TIM_OC6_SetConfig+0xd4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d109      	bne.n	8005f24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	029b      	lsls	r3, r3, #10
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40013400 	.word	0x40013400
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40014800 	.word	0x40014800
 8005f60:	40015000 	.word	0x40015000

08005f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 030a 	bic.w	r3, r3, #10
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0210 	bic.w	r2, r3, #16
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	031b      	lsls	r3, r3, #12
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	f043 0307 	orr.w	r3, r3, #7
 8006048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	021a      	lsls	r2, r3, #8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	431a      	orrs	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	609a      	str	r2, [r3, #8]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2201      	movs	r2, #1
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	43db      	mvns	r3, r3
 80060be:	401a      	ands	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1a      	ldr	r2, [r3, #32]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	fa01 f303 	lsl.w	r3, r1, r3
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e06f      	b.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a31      	ldr	r2, [pc, #196]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a30      	ldr	r2, [pc, #192]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2e      	ldr	r2, [pc, #184]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d108      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006144:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d01d      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d018      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d013      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00e      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a16      	ldr	r2, [pc, #88]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10c      	bne.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40015000 	.word	0x40015000
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40014000 	.word	0x40014000

08006204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e042      	b.n	8006328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fb fee9 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2224      	movs	r2, #36	; 0x24
 80062be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f996 	bl	8006604 <UART_SetConfig>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e022      	b.n	8006328 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fc86 	bl	8006bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800630e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fd0d 	bl	8006d40 <UART_CheckIdleState>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006346:	2b20      	cmp	r3, #32
 8006348:	f040 8083 	bne.w	8006452 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_UART_Transmit+0x28>
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e07b      	b.n	8006454 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_UART_Transmit+0x3a>
 8006366:	2302      	movs	r3, #2
 8006368:	e074      	b.n	8006454 <HAL_UART_Transmit+0x124>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2221      	movs	r2, #33	; 0x21
 800637e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006382:	f7fb ff41 	bl	8002208 <HAL_GetTick>
 8006386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a0:	d108      	bne.n	80063b4 <HAL_UART_Transmit+0x84>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d104      	bne.n	80063b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e003      	b.n	80063bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80063c4:	e02c      	b.n	8006420 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fd00 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e039      	b.n	8006454 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3302      	adds	r3, #2
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e007      	b.n	800640e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1cc      	bne.n	80063c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	2140      	movs	r1, #64	; 0x40
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fccd 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e006      	b.n	8006454 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	2b20      	cmp	r3, #32
 8006474:	f040 80c0 	bne.w	80065f8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_Receive+0x28>
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0b8      	b.n	80065fa <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_UART_Receive+0x3a>
 8006492:	2302      	movs	r3, #2
 8006494:	e0b1      	b.n	80065fa <HAL_UART_Receive+0x19e>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2222      	movs	r2, #34	; 0x22
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b4:	f7fb fea8 	bl	8002208 <HAL_GetTick>
 80064b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	88fa      	ldrh	r2, [r7, #6]
 80064be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	88fa      	ldrh	r2, [r7, #6]
 80064c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d10e      	bne.n	80064f2 <HAL_UART_Receive+0x96>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <HAL_UART_Receive+0x8c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e6:	e02d      	b.n	8006544 <HAL_UART_Receive+0xe8>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	22ff      	movs	r2, #255	; 0xff
 80064ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f0:	e028      	b.n	8006544 <HAL_UART_Receive+0xe8>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10d      	bne.n	8006516 <HAL_UART_Receive+0xba>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_UART_Receive+0xb0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800650a:	e01b      	b.n	8006544 <HAL_UART_Receive+0xe8>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	227f      	movs	r2, #127	; 0x7f
 8006510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006514:	e016      	b.n	8006544 <HAL_UART_Receive+0xe8>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651e:	d10d      	bne.n	800653c <HAL_UART_Receive+0xe0>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <HAL_UART_Receive+0xd6>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	227f      	movs	r2, #127	; 0x7f
 800652c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006530:	e008      	b.n	8006544 <HAL_UART_Receive+0xe8>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	223f      	movs	r2, #63	; 0x3f
 8006536:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800653a:	e003      	b.n	8006544 <HAL_UART_Receive+0xe8>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800654a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d108      	bne.n	8006568 <HAL_UART_Receive+0x10c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e003      	b.n	8006570 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006578:	e032      	b.n	80065e0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	2120      	movs	r1, #32
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fc26 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e032      	b.n	80065fa <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10c      	bne.n	80065b4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	8a7b      	ldrh	r3, [r7, #18]
 80065a4:	4013      	ands	r3, r2
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3302      	adds	r3, #2
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e00c      	b.n	80065ce <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	8a7b      	ldrh	r3, [r7, #18]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4013      	ands	r3, r2
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1c6      	bne.n	800657a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006608:	b08c      	sub	sp, #48	; 0x30
 800660a:	af00      	add	r7, sp, #0
 800660c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	431a      	orrs	r2, r3
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	431a      	orrs	r2, r3
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	4313      	orrs	r3, r2
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4baa      	ldr	r3, [pc, #680]	; (80068dc <UART_SetConfig+0x2d8>)
 8006634:	4013      	ands	r3, r2
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800663c:	430b      	orrs	r3, r1
 800663e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a9f      	ldr	r2, [pc, #636]	; (80068e0 <UART_SetConfig+0x2dc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666c:	4313      	orrs	r3, r2
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800667a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006684:	430b      	orrs	r3, r1
 8006686:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f023 010f 	bic.w	r1, r3, #15
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a90      	ldr	r2, [pc, #576]	; (80068e4 <UART_SetConfig+0x2e0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d125      	bne.n	80066f4 <UART_SetConfig+0xf0>
 80066a8:	4b8f      	ldr	r3, [pc, #572]	; (80068e8 <UART_SetConfig+0x2e4>)
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d81a      	bhi.n	80066ec <UART_SetConfig+0xe8>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0xb8>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d2:	e116      	b.n	8006902 <UART_SetConfig+0x2fe>
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066da:	e112      	b.n	8006902 <UART_SetConfig+0x2fe>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e2:	e10e      	b.n	8006902 <UART_SetConfig+0x2fe>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e10a      	b.n	8006902 <UART_SetConfig+0x2fe>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f2:	e106      	b.n	8006902 <UART_SetConfig+0x2fe>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a7c      	ldr	r2, [pc, #496]	; (80068ec <UART_SetConfig+0x2e8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d138      	bne.n	8006770 <UART_SetConfig+0x16c>
 80066fe:	4b7a      	ldr	r3, [pc, #488]	; (80068e8 <UART_SetConfig+0x2e4>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	f003 030c 	and.w	r3, r3, #12
 8006708:	2b0c      	cmp	r3, #12
 800670a:	d82d      	bhi.n	8006768 <UART_SetConfig+0x164>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x110>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006749 	.word	0x08006749
 8006718:	08006769 	.word	0x08006769
 800671c:	08006769 	.word	0x08006769
 8006720:	08006769 	.word	0x08006769
 8006724:	08006759 	.word	0x08006759
 8006728:	08006769 	.word	0x08006769
 800672c:	08006769 	.word	0x08006769
 8006730:	08006769 	.word	0x08006769
 8006734:	08006751 	.word	0x08006751
 8006738:	08006769 	.word	0x08006769
 800673c:	08006769 	.word	0x08006769
 8006740:	08006769 	.word	0x08006769
 8006744:	08006761 	.word	0x08006761
 8006748:	2300      	movs	r3, #0
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674e:	e0d8      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006750:	2302      	movs	r3, #2
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006756:	e0d4      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675e:	e0d0      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006766:	e0cc      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676e:	e0c8      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a5e      	ldr	r2, [pc, #376]	; (80068f0 <UART_SetConfig+0x2ec>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d125      	bne.n	80067c6 <UART_SetConfig+0x1c2>
 800677a:	4b5b      	ldr	r3, [pc, #364]	; (80068e8 <UART_SetConfig+0x2e4>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006784:	2b30      	cmp	r3, #48	; 0x30
 8006786:	d016      	beq.n	80067b6 <UART_SetConfig+0x1b2>
 8006788:	2b30      	cmp	r3, #48	; 0x30
 800678a:	d818      	bhi.n	80067be <UART_SetConfig+0x1ba>
 800678c:	2b20      	cmp	r3, #32
 800678e:	d00a      	beq.n	80067a6 <UART_SetConfig+0x1a2>
 8006790:	2b20      	cmp	r3, #32
 8006792:	d814      	bhi.n	80067be <UART_SetConfig+0x1ba>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <UART_SetConfig+0x19a>
 8006798:	2b10      	cmp	r3, #16
 800679a:	d008      	beq.n	80067ae <UART_SetConfig+0x1aa>
 800679c:	e00f      	b.n	80067be <UART_SetConfig+0x1ba>
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a4:	e0ad      	b.n	8006902 <UART_SetConfig+0x2fe>
 80067a6:	2302      	movs	r3, #2
 80067a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ac:	e0a9      	b.n	8006902 <UART_SetConfig+0x2fe>
 80067ae:	2304      	movs	r3, #4
 80067b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b4:	e0a5      	b.n	8006902 <UART_SetConfig+0x2fe>
 80067b6:	2308      	movs	r3, #8
 80067b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067bc:	e0a1      	b.n	8006902 <UART_SetConfig+0x2fe>
 80067be:	2310      	movs	r3, #16
 80067c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c4:	e09d      	b.n	8006902 <UART_SetConfig+0x2fe>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a4a      	ldr	r2, [pc, #296]	; (80068f4 <UART_SetConfig+0x2f0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d125      	bne.n	800681c <UART_SetConfig+0x218>
 80067d0:	4b45      	ldr	r3, [pc, #276]	; (80068e8 <UART_SetConfig+0x2e4>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067da:	2bc0      	cmp	r3, #192	; 0xc0
 80067dc:	d016      	beq.n	800680c <UART_SetConfig+0x208>
 80067de:	2bc0      	cmp	r3, #192	; 0xc0
 80067e0:	d818      	bhi.n	8006814 <UART_SetConfig+0x210>
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d00a      	beq.n	80067fc <UART_SetConfig+0x1f8>
 80067e6:	2b80      	cmp	r3, #128	; 0x80
 80067e8:	d814      	bhi.n	8006814 <UART_SetConfig+0x210>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <UART_SetConfig+0x1f0>
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d008      	beq.n	8006804 <UART_SetConfig+0x200>
 80067f2:	e00f      	b.n	8006814 <UART_SetConfig+0x210>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fa:	e082      	b.n	8006902 <UART_SetConfig+0x2fe>
 80067fc:	2302      	movs	r3, #2
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006802:	e07e      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006804:	2304      	movs	r3, #4
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680a:	e07a      	b.n	8006902 <UART_SetConfig+0x2fe>
 800680c:	2308      	movs	r3, #8
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006812:	e076      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006814:	2310      	movs	r3, #16
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681a:	e072      	b.n	8006902 <UART_SetConfig+0x2fe>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a35      	ldr	r2, [pc, #212]	; (80068f8 <UART_SetConfig+0x2f4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d12a      	bne.n	800687c <UART_SetConfig+0x278>
 8006826:	4b30      	ldr	r3, [pc, #192]	; (80068e8 <UART_SetConfig+0x2e4>)
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006834:	d01a      	beq.n	800686c <UART_SetConfig+0x268>
 8006836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800683a:	d81b      	bhi.n	8006874 <UART_SetConfig+0x270>
 800683c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006840:	d00c      	beq.n	800685c <UART_SetConfig+0x258>
 8006842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006846:	d815      	bhi.n	8006874 <UART_SetConfig+0x270>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <UART_SetConfig+0x250>
 800684c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006850:	d008      	beq.n	8006864 <UART_SetConfig+0x260>
 8006852:	e00f      	b.n	8006874 <UART_SetConfig+0x270>
 8006854:	2300      	movs	r3, #0
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685a:	e052      	b.n	8006902 <UART_SetConfig+0x2fe>
 800685c:	2302      	movs	r3, #2
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006862:	e04e      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686a:	e04a      	b.n	8006902 <UART_SetConfig+0x2fe>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e046      	b.n	8006902 <UART_SetConfig+0x2fe>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e042      	b.n	8006902 <UART_SetConfig+0x2fe>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <UART_SetConfig+0x2dc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d13a      	bne.n	80068fc <UART_SetConfig+0x2f8>
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <UART_SetConfig+0x2e4>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006894:	d01a      	beq.n	80068cc <UART_SetConfig+0x2c8>
 8006896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800689a:	d81b      	bhi.n	80068d4 <UART_SetConfig+0x2d0>
 800689c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a0:	d00c      	beq.n	80068bc <UART_SetConfig+0x2b8>
 80068a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a6:	d815      	bhi.n	80068d4 <UART_SetConfig+0x2d0>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <UART_SetConfig+0x2b0>
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b0:	d008      	beq.n	80068c4 <UART_SetConfig+0x2c0>
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0x2d0>
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ba:	e022      	b.n	8006902 <UART_SetConfig+0x2fe>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068c2:	e01e      	b.n	8006902 <UART_SetConfig+0x2fe>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ca:	e01a      	b.n	8006902 <UART_SetConfig+0x2fe>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d2:	e016      	b.n	8006902 <UART_SetConfig+0x2fe>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068da:	e012      	b.n	8006902 <UART_SetConfig+0x2fe>
 80068dc:	cfff69f3 	.word	0xcfff69f3
 80068e0:	40008000 	.word	0x40008000
 80068e4:	40013800 	.word	0x40013800
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40004400 	.word	0x40004400
 80068f0:	40004800 	.word	0x40004800
 80068f4:	40004c00 	.word	0x40004c00
 80068f8:	40005000 	.word	0x40005000
 80068fc:	2310      	movs	r3, #16
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4aae      	ldr	r2, [pc, #696]	; (8006bc0 <UART_SetConfig+0x5bc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	f040 8097 	bne.w	8006a3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800690e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006912:	2b08      	cmp	r3, #8
 8006914:	d823      	bhi.n	800695e <UART_SetConfig+0x35a>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <UART_SetConfig+0x318>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006941 	.word	0x08006941
 8006920:	0800695f 	.word	0x0800695f
 8006924:	08006949 	.word	0x08006949
 8006928:	0800695f 	.word	0x0800695f
 800692c:	0800694f 	.word	0x0800694f
 8006930:	0800695f 	.word	0x0800695f
 8006934:	0800695f 	.word	0x0800695f
 8006938:	0800695f 	.word	0x0800695f
 800693c:	08006957 	.word	0x08006957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006940:	f7fd fbd0 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006944:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006946:	e010      	b.n	800696a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006948:	4b9e      	ldr	r3, [pc, #632]	; (8006bc4 <UART_SetConfig+0x5c0>)
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800694c:	e00d      	b.n	800696a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694e:	f7fd fb5b 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8006952:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006954:	e009      	b.n	800696a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800695c:	e005      	b.n	800696a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006968:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8130 	beq.w	8006bd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	4a94      	ldr	r2, [pc, #592]	; (8006bc8 <UART_SetConfig+0x5c4>)
 8006978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697c:	461a      	mov	r2, r3
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	fbb3 f3f2 	udiv	r3, r3, r2
 8006984:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	4413      	add	r3, r2
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	429a      	cmp	r2, r3
 8006994:	d305      	bcc.n	80069a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d903      	bls.n	80069aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069a8:	e113      	b.n	8006bd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2200      	movs	r2, #0
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	60fa      	str	r2, [r7, #12]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	4a84      	ldr	r2, [pc, #528]	; (8006bc8 <UART_SetConfig+0x5c4>)
 80069b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2200      	movs	r2, #0
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069cc:	f7fa f9b4 	bl	8000d38 <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	020b      	lsls	r3, r1, #8
 80069e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069e6:	0202      	lsls	r2, r0, #8
 80069e8:	6979      	ldr	r1, [r7, #20]
 80069ea:	6849      	ldr	r1, [r1, #4]
 80069ec:	0849      	lsrs	r1, r1, #1
 80069ee:	2000      	movs	r0, #0
 80069f0:	460c      	mov	r4, r1
 80069f2:	4605      	mov	r5, r0
 80069f4:	eb12 0804 	adds.w	r8, r2, r4
 80069f8:	eb43 0905 	adc.w	r9, r3, r5
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	469a      	mov	sl, r3
 8006a04:	4693      	mov	fp, r2
 8006a06:	4652      	mov	r2, sl
 8006a08:	465b      	mov	r3, fp
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	f7fa f993 	bl	8000d38 <__aeabi_uldivmod>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4613      	mov	r3, r2
 8006a18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a20:	d308      	bcc.n	8006a34 <UART_SetConfig+0x430>
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a28:	d204      	bcs.n	8006a34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	e0ce      	b.n	8006bd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a3a:	e0ca      	b.n	8006bd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d166      	bne.n	8006b14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d827      	bhi.n	8006a9e <UART_SetConfig+0x49a>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0x450>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a81 	.word	0x08006a81
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	08006a9f 	.word	0x08006a9f
 8006a64:	08006a8f 	.word	0x08006a8f
 8006a68:	08006a9f 	.word	0x08006a9f
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006a9f 	.word	0x08006a9f
 8006a74:	08006a97 	.word	0x08006a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fd fb34 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a7e:	e014      	b.n	8006aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a80:	f7fd fb46 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8006a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a86:	e010      	b.n	8006aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a88:	4b4e      	ldr	r3, [pc, #312]	; (8006bc4 <UART_SetConfig+0x5c0>)
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a8c:	e00d      	b.n	8006aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8e:	f7fd fabb 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a94:	e009      	b.n	8006aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a9c:	e005      	b.n	8006aaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006aa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8090 	beq.w	8006bd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	4a44      	ldr	r2, [pc, #272]	; (8006bc8 <UART_SetConfig+0x5c4>)
 8006ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac4:	005a      	lsls	r2, r3, #1
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	441a      	add	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d916      	bls.n	8006b0c <UART_SetConfig+0x508>
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae4:	d212      	bcs.n	8006b0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f023 030f 	bic.w	r3, r3, #15
 8006aee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	8bfb      	ldrh	r3, [r7, #30]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	8bfa      	ldrh	r2, [r7, #30]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	e062      	b.n	8006bd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b12:	e05e      	b.n	8006bd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d828      	bhi.n	8006b6e <UART_SetConfig+0x56a>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x520>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b6f 	.word	0x08006b6f
 8006b34:	08006b5f 	.word	0x08006b5f
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006b6f 	.word	0x08006b6f
 8006b44:	08006b67 	.word	0x08006b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b48:	f7fd facc 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006b4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b4e:	e014      	b.n	8006b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b50:	f7fd fade 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8006b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b56:	e010      	b.n	8006b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <UART_SetConfig+0x5c0>)
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b5c:	e00d      	b.n	8006b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fd fa53 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b64:	e009      	b.n	8006b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b6c:	e005      	b.n	8006b7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b78:	bf00      	nop
    }

    if (pclk != 0U)
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d028      	beq.n	8006bd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	4a10      	ldr	r2, [pc, #64]	; (8006bc8 <UART_SetConfig+0x5c4>)
 8006b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	441a      	add	r2, r3
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d910      	bls.n	8006bcc <UART_SetConfig+0x5c8>
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d20c      	bcs.n	8006bcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	e009      	b.n	8006bd2 <UART_SetConfig+0x5ce>
 8006bbe:	bf00      	nop
 8006bc0:	40008000 	.word	0x40008000
 8006bc4:	00f42400 	.word	0x00f42400
 8006bc8:	08012974 	.word	0x08012974
      }
      else
      {
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2200      	movs	r2, #0
 8006be6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2200      	movs	r2, #0
 8006bec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006bee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3730      	adds	r7, #48	; 0x30
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01a      	beq.n	8006d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfa:	d10a      	bne.n	8006d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d50:	f7fb fa5a 	bl	8002208 <HAL_GetTick>
 8006d54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d10e      	bne.n	8006d82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f82f 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e025      	b.n	8006dce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d10e      	bne.n	8006dae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f819 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e00f      	b.n	8006dce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b09c      	sub	sp, #112	; 0x70
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de6:	e0a9      	b.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	f000 80a5 	beq.w	8006f3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fb fa09 	bl	8002208 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d140      	bne.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e6      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	663b      	str	r3, [r7, #96]	; 0x60
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e069      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d051      	beq.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea6:	d149      	bne.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f04:	623a      	str	r2, [r7, #32]
 8006f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	69f9      	ldr	r1, [r7, #28]
 8006f0a:	6a3a      	ldr	r2, [r7, #32]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e010      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f43f af46 	beq.w	8006de8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3770      	adds	r7, #112	; 0x70
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e027      	b.n	8006fcc <HAL_UARTEx_DisableFifoMode+0x66>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2224      	movs	r2, #36	; 0x24
 8006f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006faa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e02d      	b.n	800704c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	; 0x24
 8006ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0201 	bic.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f84f 	bl	80070d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007068:	2302      	movs	r3, #2
 800706a:	e02d      	b.n	80070c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2224      	movs	r2, #36	; 0x24
 8007078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f811 	bl	80070d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d108      	bne.n	80070f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070f0:	e031      	b.n	8007156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070f2:	2308      	movs	r3, #8
 80070f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070f6:	2308      	movs	r3, #8
 80070f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	0e5b      	lsrs	r3, r3, #25
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	0f5b      	lsrs	r3, r3, #29
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	7b3a      	ldrb	r2, [r7, #12]
 800711e:	4911      	ldr	r1, [pc, #68]	; (8007164 <UARTEx_SetNbDataToProcess+0x94>)
 8007120:	5c8a      	ldrb	r2, [r1, r2]
 8007122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007126:	7b3a      	ldrb	r2, [r7, #12]
 8007128:	490f      	ldr	r1, [pc, #60]	; (8007168 <UARTEx_SetNbDataToProcess+0x98>)
 800712a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800712c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	7b7a      	ldrb	r2, [r7, #13]
 800713c:	4909      	ldr	r1, [pc, #36]	; (8007164 <UARTEx_SetNbDataToProcess+0x94>)
 800713e:	5c8a      	ldrb	r2, [r1, r2]
 8007140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007144:	7b7a      	ldrb	r2, [r7, #13]
 8007146:	4908      	ldr	r1, [pc, #32]	; (8007168 <UARTEx_SetNbDataToProcess+0x98>)
 8007148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800714a:	fb93 f3f2 	sdiv	r3, r3, r2
 800714e:	b29a      	uxth	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	0801298c 	.word	0x0801298c
 8007168:	08012994 	.word	0x08012994

0800716c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800717a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800717e:	2b84      	cmp	r3, #132	; 0x84
 8007180:	d005      	beq.n	800718e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007182:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	3303      	adds	r3, #3
 800718c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800718e:	68fb      	ldr	r3, [r7, #12]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a2:	f3ef 8305 	mrs	r3, IPSR
 80071a6:	607b      	str	r3, [r7, #4]
  return(result);
 80071a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bf14      	ite	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	2300      	moveq	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80071c4:	f001 ff02 	bl	8008fcc <vTaskStartScheduler>
  
  return osOK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	bd80      	pop	{r7, pc}

080071ce <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80071d2:	f7ff ffe3 	bl	800719c <inHandlerMode>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80071dc:	f001 fffe 	bl	80091dc <xTaskGetTickCountFromISR>
 80071e0:	4603      	mov	r3, r0
 80071e2:	e002      	b.n	80071ea <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80071e4:	f001 ffea 	bl	80091bc <xTaskGetTickCount>
 80071e8:	4603      	mov	r3, r0
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	bd80      	pop	{r7, pc}

080071ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80071ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f0:	b087      	sub	sp, #28
 80071f2:	af02      	add	r7, sp, #8
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685c      	ldr	r4, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007204:	b29e      	uxth	r6, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ffad 	bl	800716c <makeFreeRtosPriority>
 8007212:	4602      	mov	r2, r0
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	9200      	str	r2, [sp, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4632      	mov	r2, r6
 8007220:	4629      	mov	r1, r5
 8007222:	4620      	mov	r0, r4
 8007224:	f001 fc2a 	bl	8008a7c <xTaskCreate>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d001      	beq.n	8007232 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800723c <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8007240:	f002 fade 	bl	8009800 <xTaskGetCurrentTaskHandle>
 8007244:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 8007246:	4618      	mov	r0, r3
 8007248:	bd80      	pop	{r7, pc}

0800724a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fd4c 	bl	8008cf0 <vTaskDelete>
  return osOK;
 8007258:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800726e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff7a 	bl	800716c <makeFreeRtosPriority>
 8007278:	4603      	mov	r3, r0
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fdfb 	bl	8008e78 <vTaskPrioritySet>
  return osOK;
 8007282:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <osDelay+0x16>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	e000      	b.n	80072a4 <osDelay+0x18>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 fdb3 	bl	8008e10 <vTaskDelay>
  
  return osOK;
 80072aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	460b      	mov	r3, r1
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	72fb      	strb	r3, [r7, #11]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <osTimerCreate+0x18>
 80072c8:	2201      	movs	r2, #1
 80072ca:	e000      	b.n	80072ce <osTimerCreate+0x1a>
 80072cc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
  return xTimerCreate((const char *)"",
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2101      	movs	r1, #1
 80072d8:	4803      	ldr	r0, [pc, #12]	; (80072e8 <osTimerCreate+0x34>)
 80072da:	f002 fcf5 	bl	8009cc8 <xTimerCreate>
 80072de:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	0801242c 	.word	0x0801242c

080072ec <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <osTimerStart+0x20>
    ticks = 1;
 8007308:	2301      	movs	r3, #1
 800730a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800730c:	f7ff ff46 	bl	800719c <inHandlerMode>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01a      	beq.n	800734c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007316:	f107 030c 	add.w	r3, r7, #12
 800731a:	2200      	movs	r2, #0
 800731c:	9200      	str	r2, [sp, #0]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	2109      	movs	r1, #9
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f002 fd2c 	bl	8009d80 <xTimerGenericCommand>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d002      	beq.n	8007334 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800732e:	23ff      	movs	r3, #255	; 0xff
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e018      	b.n	8007366 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d015      	beq.n	8007366 <osTimerStart+0x7a>
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <osTimerStart+0x84>)
 800733c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	e00c      	b.n	8007366 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	2104      	movs	r1, #4
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f002 fd12 	bl	8009d80 <xTimerGenericCommand>
 800735c:	4603      	mov	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d001      	beq.n	8007366 <osTimerStart+0x7a>
      result = osErrorOS;
 8007362:	23ff      	movs	r3, #255	; 0xff
 8007364:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007366:	697b      	ldr	r3, [r7, #20]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af02      	add	r7, sp, #8
 800737a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8007384:	f7ff ff0a 	bl	800719c <inHandlerMode>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d019      	beq.n	80073c2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800738e:	f107 0308 	add.w	r3, r7, #8
 8007392:	2200      	movs	r2, #0
 8007394:	9200      	str	r2, [sp, #0]
 8007396:	2200      	movs	r2, #0
 8007398:	2108      	movs	r1, #8
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f002 fcf0 	bl	8009d80 <xTimerGenericCommand>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d001      	beq.n	80073aa <osTimerStop+0x36>
      return osErrorOS;
 80073a6:	23ff      	movs	r3, #255	; 0xff
 80073a8:	e019      	b.n	80073de <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d015      	beq.n	80073dc <osTimerStop+0x68>
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <osTimerStop+0x74>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	e00c      	b.n	80073dc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	2103      	movs	r1, #3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f002 fcd7 	bl	8009d80 <xTimerGenericCommand>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d001      	beq.n	80073dc <osTimerStop+0x68>
      result = osErrorOS;
 80073d8:	23ff      	movs	r3, #255	; 0xff
 80073da:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80073f4:	2001      	movs	r0, #1
 80073f6:	f000 fd10 	bl	8007e1a <xQueueCreateMutex>
 80073fa:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <osMutexWait+0x18>
    return osErrorParameter;
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	e03a      	b.n	8007492 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d103      	bne.n	8007430 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007428:	f04f 33ff 	mov.w	r3, #4294967295
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	e009      	b.n	8007444 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d006      	beq.n	8007444 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <osMutexWait+0x40>
      ticks = 1;
 8007440:	2301      	movs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007444:	f7ff feaa 	bl	800719c <inHandlerMode>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d017      	beq.n	800747e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800744e:	f107 0308 	add.w	r3, r7, #8
 8007452:	461a      	mov	r2, r3
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 f90a 	bl	8008670 <xQueueReceiveFromISR>
 800745c:	4603      	mov	r3, r0
 800745e:	2b01      	cmp	r3, #1
 8007460:	d001      	beq.n	8007466 <osMutexWait+0x62>
      return osErrorOS;
 8007462:	23ff      	movs	r3, #255	; 0xff
 8007464:	e015      	b.n	8007492 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d011      	beq.n	8007490 <osMutexWait+0x8c>
 800746c:	4b0b      	ldr	r3, [pc, #44]	; (800749c <osMutexWait+0x98>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	e008      	b.n	8007490 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 ffe9 	bl	8008458 <xQueueSemaphoreTake>
 8007486:	4603      	mov	r3, r0
 8007488:	2b01      	cmp	r3, #1
 800748a:	d001      	beq.n	8007490 <osMutexWait+0x8c>
    return osErrorOS;
 800748c:	23ff      	movs	r3, #255	; 0xff
 800748e:	e000      	b.n	8007492 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80074b0:	f7ff fe74 	bl	800719c <inHandlerMode>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d016      	beq.n	80074e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fe5c 	bl	800817e <xQueueGiveFromISR>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d001      	beq.n	80074d0 <osMutexRelease+0x30>
      return osErrorOS;
 80074cc:	23ff      	movs	r3, #255	; 0xff
 80074ce:	e017      	b.n	8007500 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d013      	beq.n	80074fe <osMutexRelease+0x5e>
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <osMutexRelease+0x68>)
 80074d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	e00a      	b.n	80074fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fcac 	bl	8007e4c <xQueueGenericSend>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d001      	beq.n	80074fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80074fa:	23ff      	movs	r3, #255	; 0xff
 80074fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80074fe:	68fb      	ldr	r3, [r7, #12]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	3303      	adds	r3, #3
 800751a:	f023 0303 	bic.w	r3, r3, #3
 800751e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007520:	2014      	movs	r0, #20
 8007522:	f003 f959 	bl	800a7d8 <pvPortMalloc>
 8007526:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d046      	beq.n	80075bc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f003 f946 	bl	800a7d8 <pvPortMalloc>
 800754c:	4602      	mov	r2, r0
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d02b      	beq.n	80075b2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	4618      	mov	r0, r3
 8007566:	f003 f937 	bl	800a7d8 <pvPortMalloc>
 800756a:	4602      	mov	r2, r0
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007578:	2300      	movs	r3, #0
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	e008      	b.n	8007590 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	4413      	add	r3, r2
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3301      	adds	r3, #1
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	d3f1      	bcc.n	800757e <osPoolCreate+0x72>
 800759a:	e00f      	b.n	80075bc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f003 f9e5 	bl	800a970 <vPortFree>
        vPortFree(thePool);
 80075a6:	6978      	ldr	r0, [r7, #20]
 80075a8:	f003 f9e2 	bl	800a970 <vPortFree>
        thePool = NULL;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e004      	b.n	80075bc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80075b2:	6978      	ldr	r0, [r7, #20]
 80075b4:	f003 f9dc 	bl	800a970 <vPortFree>
      thePool = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80075bc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b08a      	sub	sp, #40	; 0x28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80075d6:	f7ff fde1 	bl	800719c <inHandlerMode>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00e      	beq.n	80075fe <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075e0:	f3ef 8211 	mrs	r2, BASEPRI
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	617a      	str	r2, [r7, #20]
 80075f6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075f8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
 80075fc:	e001      	b.n	8007602 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80075fe:	f002 ffc9 	bl	800a594 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	e029      	b.n	800765c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6892      	ldr	r2, [r2, #8]
 8007614:	fbb3 f1f2 	udiv	r1, r3, r2
 8007618:	fb01 f202 	mul.w	r2, r1, r2
 800761c:	1a9b      	subs	r3, r3, r2
 800761e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	4413      	add	r3, r2
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d113      	bne.n	8007656 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	4413      	add	r3, r2
 8007636:	2201      	movs	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4619      	mov	r1, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	440b      	add	r3, r1
 800764c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	611a      	str	r2, [r3, #16]
      break;
 8007654:	e007      	b.n	8007666 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3301      	adds	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	429a      	cmp	r2, r3
 8007664:	d3d0      	bcc.n	8007608 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8007666:	f7ff fd99 	bl	800719c <inHandlerMode>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800767a:	e001      	b.n	8007680 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800767c:	f002 ffba 	bl	800a5f4 <vPortExitCritical>
  }
  
  return p;
 8007680:	6a3b      	ldr	r3, [r7, #32]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3728      	adds	r7, #40	; 0x28
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <osPoolFree+0x14>
    return osErrorParameter;
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	e030      	b.n	8007700 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <osPoolFree+0x1e>
    return osErrorParameter;
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	e02b      	b.n	8007700 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d201      	bcs.n	80076b6 <osPoolFree+0x2c>
    return osErrorParameter;
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	e024      	b.n	8007700 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ca:	fb01 f202 	mul.w	r2, r1, r2
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <osPoolFree+0x4e>
    return osErrorParameter;
 80076d4:	2380      	movs	r3, #128	; 0x80
 80076d6:	e013      	b.n	8007700 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d301      	bcc.n	80076f2 <osPoolFree+0x68>
    return osErrorParameter;
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	e006      	b.n	8007700 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	4619      	mov	r1, r3
 8007722:	f000 fb0b 	bl	8007d3c <xQueueGenericCreate>
 8007726:	4603      	mov	r3, r0
#endif
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800773c:	2300      	movs	r3, #0
 800773e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <osMessagePut+0x1e>
    ticks = 1;
 800774a:	2301      	movs	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800774e:	f7ff fd25 	bl	800719c <inHandlerMode>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d018      	beq.n	800778a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007758:	f107 0210 	add.w	r2, r7, #16
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	2300      	movs	r3, #0
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fc70 	bl	8008048 <xQueueGenericSendFromISR>
 8007768:	4603      	mov	r3, r0
 800776a:	2b01      	cmp	r3, #1
 800776c:	d001      	beq.n	8007772 <osMessagePut+0x42>
      return osErrorOS;
 800776e:	23ff      	movs	r3, #255	; 0xff
 8007770:	e018      	b.n	80077a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d014      	beq.n	80077a2 <osMessagePut+0x72>
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <osMessagePut+0x7c>)
 800777a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	e00b      	b.n	80077a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800778a:	f107 0108 	add.w	r1, r7, #8
 800778e:	2300      	movs	r3, #0
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fb5a 	bl	8007e4c <xQueueGenericSend>
 8007798:	4603      	mov	r3, r0
 800779a:	2b01      	cmp	r3, #1
 800779c:	d001      	beq.n	80077a2 <osMessagePut+0x72>
      return osErrorOS;
 800779e:	23ff      	movs	r3, #255	; 0xff
 80077a0:	e000      	b.n	80077a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b08b      	sub	sp, #44	; 0x2c
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80077ca:	2380      	movs	r3, #128	; 0x80
 80077cc:	617b      	str	r3, [r7, #20]
    return event;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	461c      	mov	r4, r3
 80077d2:	f107 0314 	add.w	r3, r7, #20
 80077d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077de:	e054      	b.n	800788a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d103      	bne.n	80077f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
 80077f6:	e009      	b.n	800780c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <osMessageGet+0x5c>
      ticks = 1;
 8007808:	2301      	movs	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800780c:	f7ff fcc6 	bl	800719c <inHandlerMode>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01c      	beq.n	8007850 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007816:	f107 0220 	add.w	r2, r7, #32
 800781a:	f107 0314 	add.w	r3, r7, #20
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	68b8      	ldr	r0, [r7, #8]
 8007824:	f000 ff24 	bl	8008670 <xQueueReceiveFromISR>
 8007828:	4603      	mov	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d102      	bne.n	8007834 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800782e:	2310      	movs	r3, #16
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e001      	b.n	8007838 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01d      	beq.n	800787a <osMessageGet+0xca>
 800783e:	4b15      	ldr	r3, [pc, #84]	; (8007894 <osMessageGet+0xe4>)
 8007840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	e014      	b.n	800787a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007850:	f107 0314 	add.w	r3, r7, #20
 8007854:	3304      	adds	r3, #4
 8007856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007858:	4619      	mov	r1, r3
 800785a:	68b8      	ldr	r0, [r7, #8]
 800785c:	f000 fd1c 	bl	8008298 <xQueueReceive>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d102      	bne.n	800786c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007866:	2310      	movs	r3, #16
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	e006      	b.n	800787a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <osMessageGet+0xc6>
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <osMessageGet+0xc8>
 8007876:	2340      	movs	r3, #64	; 0x40
 8007878:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	461c      	mov	r4, r3
 800787e:	f107 0314 	add.w	r3, r7, #20
 8007882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	372c      	adds	r7, #44	; 0x2c
 800788e:	46bd      	mov	sp, r7
 8007890:	bd90      	pop	{r4, r7, pc}
 8007892:	bf00      	nop
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689c      	ldr	r4, [r3, #8]
 80078b6:	200c      	movs	r0, #12
 80078b8:	f002 ff8e 	bl	800a7d8 <pvPortMalloc>
 80078bc:	4603      	mov	r3, r0
 80078be:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <osMailCreate+0x36>
    return NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e038      	b.n	8007940 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	681c      	ldr	r4, [r3, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2104      	movs	r1, #4
 80078e6:	f000 fa29 	bl	8007d3c <xQueueGenericCreate>
 80078ea:	4603      	mov	r3, r0
 80078ec:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d107      	bne.n	800790a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f003 f835 	bl	800a970 <vPortFree>
    return NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	e01a      	b.n	8007940 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	681c      	ldr	r4, [r3, #0]
 8007910:	f107 030c 	add.w	r3, r7, #12
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fdf9 	bl	800750c <osPoolCreate>
 800791a:	4603      	mov	r3, r0
 800791c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d107      	bne.n	800793a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f003 f81d 	bl	800a970 <vPortFree>
    return NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	e002      	b.n	8007940 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8007940:	4618      	mov	r0, r3
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	bd90      	pop	{r4, r7, pc}

08007948 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <osMailAlloc+0x14>
    return NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	e006      	b.n	800796a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fe30 	bl	80075c6 <osPoolAlloc>
 8007966:	60f8      	str	r0, [r7, #12]
  
  return p;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <osMailPut+0x14>
    return osErrorParameter;
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	e02c      	b.n	80079e2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800798c:	f7ff fc06 	bl	800719c <inHandlerMode>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d018      	beq.n	80079c8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6858      	ldr	r0, [r3, #4]
 800799a:	f107 020c 	add.w	r2, r7, #12
 800799e:	4639      	mov	r1, r7
 80079a0:	2300      	movs	r3, #0
 80079a2:	f000 fb51 	bl	8008048 <xQueueGenericSendFromISR>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d001      	beq.n	80079b0 <osMailPut+0x3c>
      return osErrorOS;
 80079ac:	23ff      	movs	r3, #255	; 0xff
 80079ae:	e018      	b.n	80079e2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d014      	beq.n	80079e0 <osMailPut+0x6c>
 80079b6:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <osMailPut+0x78>)
 80079b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	e00b      	b.n	80079e0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6858      	ldr	r0, [r3, #4]
 80079cc:	4639      	mov	r1, r7
 80079ce:	2300      	movs	r3, #0
 80079d0:	2200      	movs	r2, #0
 80079d2:	f000 fa3b 	bl	8007e4c <xQueueGenericSend>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d001      	beq.n	80079e0 <osMailPut+0x6c>
      return osErrorOS;
 80079dc:	23ff      	movs	r3, #255	; 0xff
 80079de:	e000      	b.n	80079e2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80079f0:	b590      	push	{r4, r7, lr}
 80079f2:	b08b      	sub	sp, #44	; 0x2c
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	617b      	str	r3, [r7, #20]
    return event;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	461c      	mov	r4, r3
 8007a0e:	f107 0314 	add.w	r3, r7, #20
 8007a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a1a:	e056      	b.n	8007aca <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d103      	bne.n	8007a34 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
 8007a32:	e009      	b.n	8007a48 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <osMailGet+0x58>
      ticks = 1;
 8007a44:	2301      	movs	r3, #1
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007a48:	f7ff fba8 	bl	800719c <inHandlerMode>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01d      	beq.n	8007a8e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6858      	ldr	r0, [r3, #4]
 8007a56:	f107 0220 	add.w	r2, r7, #32
 8007a5a:	f107 0314 	add.w	r3, r7, #20
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	f000 fe05 	bl	8008670 <xQueueReceiveFromISR>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d102      	bne.n	8007a72 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8007a6c:	2320      	movs	r3, #32
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e001      	b.n	8007a76 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01e      	beq.n	8007aba <osMailGet+0xca>
 8007a7c:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <osMailGet+0xe4>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	e015      	b.n	8007aba <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6858      	ldr	r0, [r3, #4]
 8007a92:	f107 0314 	add.w	r3, r7, #20
 8007a96:	3304      	adds	r3, #4
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f000 fbfc 	bl	8008298 <xQueueReceive>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d102      	bne.n	8007aac <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8007aa6:	2320      	movs	r3, #32
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e006      	b.n	8007aba <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <osMailGet+0xc6>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e000      	b.n	8007ab8 <osMailGet+0xc8>
 8007ab6:	2340      	movs	r3, #64	; 0x40
 8007ab8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	461c      	mov	r4, r3
 8007abe:	f107 0314 	add.w	r3, r7, #20
 8007ac2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	372c      	adds	r7, #44	; 0x2c
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd90      	pop	{r4, r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <osMailFree+0x14>
    return osErrorParameter;
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	e006      	b.n	8007afa <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fdc9 	bl	800768a <osPoolFree>
 8007af8:	4603      	mov	r3, r0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f103 0208 	add.w	r2, r3, #8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f103 0208 	add.w	r2, r3, #8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f103 0208 	add.w	r2, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	d103      	bne.n	8007bc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e00c      	b.n	8007bde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e002      	b.n	8007bd2 <vListInsert+0x2e>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d2f6      	bcs.n	8007bcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6892      	ldr	r2, [r2, #8]
 8007c2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6852      	ldr	r2, [r2, #4]
 8007c36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d103      	bne.n	8007c4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xQueueGenericReset+0x2a>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60bb      	str	r3, [r7, #8]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c96:	f002 fc7d 	bl	800a594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ca6:	fb01 f303 	mul.w	r3, r1, r3
 8007caa:	441a      	add	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	68f9      	ldr	r1, [r7, #12]
 8007cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ccc:	fb01 f303 	mul.w	r3, r1, r3
 8007cd0:	441a      	add	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	22ff      	movs	r2, #255	; 0xff
 8007cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	22ff      	movs	r2, #255	; 0xff
 8007ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d114      	bne.n	8007d16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01a      	beq.n	8007d2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 fbe5 	bl	80094c8 <xTaskRemoveFromEventList>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d012      	beq.n	8007d2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d04:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <xQueueGenericReset+0xcc>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	e009      	b.n	8007d2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3310      	adds	r3, #16
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fef1 	bl	8007b02 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3324      	adds	r3, #36	; 0x24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff feec 	bl	8007b02 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d2a:	f002 fc63 	bl	800a5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d2e:	2301      	movs	r3, #1
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	613b      	str	r3, [r7, #16]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	3348      	adds	r3, #72	; 0x48
 8007d74:	4618      	mov	r0, r3
 8007d76:	f002 fd2f 	bl	800a7d8 <pvPortMalloc>
 8007d7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	3348      	adds	r3, #72	; 0x48
 8007d8a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d8c:	79fa      	ldrb	r2, [r7, #7]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4613      	mov	r3, r2
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f805 	bl	8007da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3720      	adds	r7, #32
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d103      	bne.n	8007dc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	69b8      	ldr	r0, [r7, #24]
 8007dda:	f7ff ff47 	bl	8007c6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e06:	2300      	movs	r3, #0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f81d 	bl	8007e4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	4603      	mov	r3, r0
 8007e22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6939      	ldr	r1, [r7, #16]
 8007e32:	6978      	ldr	r0, [r7, #20]
 8007e34:	f7ff ff82 	bl	8007d3c <xQueueGenericCreate>
 8007e38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff ffd3 	bl	8007de6 <prvInitialiseMutex>

		return xNewQueue;
 8007e40:	68fb      	ldr	r3, [r7, #12]
	}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08e      	sub	sp, #56	; 0x38
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <xQueueGenericSend+0x32>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <xQueueGenericSend+0x40>
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <xQueueGenericSend+0x44>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <xQueueGenericSend+0x46>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <xQueueGenericSend+0x60>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d103      	bne.n	8007eba <xQueueGenericSend+0x6e>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <xQueueGenericSend+0x72>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <xQueueGenericSend+0x74>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xQueueGenericSend+0x8e>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	623b      	str	r3, [r7, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eda:	f001 fca1 	bl	8009820 <xTaskGetSchedulerState>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <xQueueGenericSend+0x9e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <xQueueGenericSend+0xa2>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xQueueGenericSend+0xa4>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xQueueGenericSend+0xbe>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	61fb      	str	r3, [r7, #28]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f0a:	f002 fb43 	bl	800a594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d302      	bcc.n	8007f20 <xQueueGenericSend+0xd4>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d129      	bne.n	8007f74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f26:	f000 fc3b 	bl	80087a0 <prvCopyDataToQueue>
 8007f2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d010      	beq.n	8007f56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fac5 	bl	80094c8 <xTaskRemoveFromEventList>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d013      	beq.n	8007f6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f44:	4b3f      	ldr	r3, [pc, #252]	; (8008044 <xQueueGenericSend+0x1f8>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	e00a      	b.n	8007f6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f5c:	4b39      	ldr	r3, [pc, #228]	; (8008044 <xQueueGenericSend+0x1f8>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f6c:	f002 fb42 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e063      	b.n	800803c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7a:	f002 fb3b 	bl	800a5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e05c      	b.n	800803c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fafd 	bl	800958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f96:	f002 fb2d 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9a:	f001 f865 	bl	8009068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f9e:	f002 faf9 	bl	800a594 <vPortEnterCritical>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d103      	bne.n	8007fb8 <xQueueGenericSend+0x16c>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d103      	bne.n	8007fce <xQueueGenericSend+0x182>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fce:	f002 fb11 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd2:	1d3a      	adds	r2, r7, #4
 8007fd4:	f107 0314 	add.w	r3, r7, #20
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 faec 	bl	80095b8 <xTaskCheckForTimeOut>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d124      	bne.n	8008030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fe8:	f000 fcd2 	bl	8008990 <prvIsQueueFull>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	3310      	adds	r3, #16
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fa14 	bl	8009428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008002:	f000 fc5d 	bl	80088c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008006:	f001 f83d 	bl	8009084 <xTaskResumeAll>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f af7c 	bne.w	8007f0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <xQueueGenericSend+0x1f8>)
 8008014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	e772      	b.n	8007f0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008026:	f000 fc4b 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800802a:	f001 f82b 	bl	8009084 <xTaskResumeAll>
 800802e:	e76c      	b.n	8007f0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008032:	f000 fc45 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008036:	f001 f825 	bl	8009084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800803a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800803c:	4618      	mov	r0, r3
 800803e:	3738      	adds	r7, #56	; 0x38
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed04 	.word	0xe000ed04

08008048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b090      	sub	sp, #64	; 0x40
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <xQueueGenericSendFromISR+0x3c>
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <xQueueGenericSendFromISR+0x40>
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <xQueueGenericSendFromISR+0x42>
 8008088:	2300      	movs	r3, #0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d103      	bne.n	80080b2 <xQueueGenericSendFromISR+0x6a>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <xQueueGenericSendFromISR+0x6e>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <xQueueGenericSendFromISR+0x70>
 80080b6:	2300      	movs	r3, #0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	623b      	str	r3, [r7, #32]
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080d2:	f002 fb41 	bl	800a758 <vPortValidateInterruptPriority>
	__asm volatile
 80080d6:	f3ef 8211 	mrs	r2, BASEPRI
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	61fa      	str	r2, [r7, #28]
 80080ec:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80080ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d302      	bcc.n	8008104 <xQueueGenericSendFromISR+0xbc>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d12f      	bne.n	8008164 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800811a:	f000 fb41 	bl	80087a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800811e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d112      	bne.n	800814e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d016      	beq.n	800815e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f001 f9c7 	bl	80094c8 <xTaskRemoveFromEventList>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	e007      	b.n	800815e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800814e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008152:	3301      	adds	r3, #1
 8008154:	b2db      	uxtb	r3, r3
 8008156:	b25a      	sxtb	r2, r3
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800815e:	2301      	movs	r3, #1
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008162:	e001      	b.n	8008168 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008164:	2300      	movs	r3, #0
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f383 8811 	msr	BASEPRI, r3
}
 8008172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008176:	4618      	mov	r0, r3
 8008178:	3740      	adds	r7, #64	; 0x40
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b08e      	sub	sp, #56	; 0x38
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	623b      	str	r3, [r7, #32]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00a      	beq.n	80081c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61fb      	str	r3, [r7, #28]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <xQueueGiveFromISR+0x58>
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <xQueueGiveFromISR+0x5c>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <xQueueGiveFromISR+0x5e>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61bb      	str	r3, [r7, #24]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081f6:	f002 faaf 	bl	800a758 <vPortValidateInterruptPriority>
	__asm volatile
 80081fa:	f3ef 8211 	mrs	r2, BASEPRI
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	617a      	str	r2, [r7, #20]
 8008210:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008212:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008222:	429a      	cmp	r2, r3
 8008224:	d22b      	bcs.n	800827e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800822c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d112      	bne.n	8008268 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	3324      	adds	r3, #36	; 0x24
 800824e:	4618      	mov	r0, r3
 8008250:	f001 f93a 	bl	80094c8 <xTaskRemoveFromEventList>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00e      	beq.n	8008278 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2201      	movs	r2, #1
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	e007      	b.n	8008278 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800826c:	3301      	adds	r3, #1
 800826e:	b2db      	uxtb	r3, r3
 8008270:	b25a      	sxtb	r2, r3
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008278:	2301      	movs	r3, #1
 800827a:	637b      	str	r3, [r7, #52]	; 0x34
 800827c:	e001      	b.n	8008282 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800827e:	2300      	movs	r3, #0
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f383 8811 	msr	BASEPRI, r3
}
 800828c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008290:	4618      	mov	r0, r3
 8008292:	3738      	adds	r7, #56	; 0x38
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	; 0x30
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <xQueueReceive+0x30>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	623b      	str	r3, [r7, #32]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <xQueueReceive+0x3e>
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <xQueueReceive+0x42>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <xQueueReceive+0x44>
 80082da:	2300      	movs	r3, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <xQueueReceive+0x5e>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61fb      	str	r3, [r7, #28]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f6:	f001 fa93 	bl	8009820 <xTaskGetSchedulerState>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <xQueueReceive+0x6e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <xQueueReceive+0x72>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <xQueueReceive+0x74>
 800830a:	2300      	movs	r3, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <xQueueReceive+0x8e>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61bb      	str	r3, [r7, #24]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008326:	f002 f935 	bl	800a594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01f      	beq.n	8008376 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800833a:	f000 fa9b 	bl	8008874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	1e5a      	subs	r2, r3, #1
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00f      	beq.n	800836e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	3310      	adds	r3, #16
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f8b8 	bl	80094c8 <xTaskRemoveFromEventList>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800835e:	4b3d      	ldr	r3, [pc, #244]	; (8008454 <xQueueReceive+0x1bc>)
 8008360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800836e:	f002 f941 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 8008372:	2301      	movs	r3, #1
 8008374:	e069      	b.n	800844a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800837c:	f002 f93a 	bl	800a5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008380:	2300      	movs	r3, #0
 8008382:	e062      	b.n	800844a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f8fc 	bl	800958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008398:	f002 f92c 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800839c:	f000 fe64 	bl	8009068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083a0:	f002 f8f8 	bl	800a594 <vPortEnterCritical>
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083aa:	b25b      	sxtb	r3, r3
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b0:	d103      	bne.n	80083ba <xQueueReceive+0x122>
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d103      	bne.n	80083d0 <xQueueReceive+0x138>
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083d0:	f002 f910 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083d4:	1d3a      	adds	r2, r7, #4
 80083d6:	f107 0310 	add.w	r3, r7, #16
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 f8eb 	bl	80095b8 <xTaskCheckForTimeOut>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d123      	bne.n	8008430 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ea:	f000 fabb 	bl	8008964 <prvIsQueueEmpty>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	3324      	adds	r3, #36	; 0x24
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 f813 	bl	8009428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008404:	f000 fa5c 	bl	80088c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008408:	f000 fe3c 	bl	8009084 <xTaskResumeAll>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d189      	bne.n	8008326 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <xQueueReceive+0x1bc>)
 8008414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	e780      	b.n	8008326 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008426:	f000 fa4b 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800842a:	f000 fe2b 	bl	8009084 <xTaskResumeAll>
 800842e:	e77a      	b.n	8008326 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008432:	f000 fa45 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008436:	f000 fe25 	bl	8009084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800843a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843c:	f000 fa92 	bl	8008964 <prvIsQueueEmpty>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	f43f af6f 	beq.w	8008326 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008448:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800844a:	4618      	mov	r0, r3
 800844c:	3730      	adds	r7, #48	; 0x30
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08e      	sub	sp, #56	; 0x38
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008462:	2300      	movs	r3, #0
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800846a:	2300      	movs	r3, #0
 800846c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	623b      	str	r3, [r7, #32]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	61fb      	str	r3, [r7, #28]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084a8:	f001 f9ba 	bl	8009820 <xTaskGetSchedulerState>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <xQueueSemaphoreTake+0x60>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <xQueueSemaphoreTake+0x64>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <xQueueSemaphoreTake+0x66>
 80084bc:	2300      	movs	r3, #0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	61bb      	str	r3, [r7, #24]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084d8:	f002 f85c 	bl	800a594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d024      	beq.n	8008532 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	1e5a      	subs	r2, r3, #1
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80084f8:	f001 fb3a 	bl	8009b70 <pvTaskIncrementMutexHeldCount>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00f      	beq.n	800852a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	3310      	adds	r3, #16
 800850e:	4618      	mov	r0, r3
 8008510:	f000 ffda 	bl	80094c8 <xTaskRemoveFromEventList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d007      	beq.n	800852a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800851a:	4b54      	ldr	r3, [pc, #336]	; (800866c <xQueueSemaphoreTake+0x214>)
 800851c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800852a:	f002 f863 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 800852e:	2301      	movs	r3, #1
 8008530:	e097      	b.n	8008662 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d111      	bne.n	800855c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	617b      	str	r3, [r7, #20]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008554:	f002 f84e 	bl	800a5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008558:	2300      	movs	r3, #0
 800855a:	e082      	b.n	8008662 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008562:	f107 030c 	add.w	r3, r7, #12
 8008566:	4618      	mov	r0, r3
 8008568:	f001 f810 	bl	800958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008570:	f002 f840 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008574:	f000 fd78 	bl	8009068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008578:	f002 f80c 	bl	800a594 <vPortEnterCritical>
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008582:	b25b      	sxtb	r3, r3
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d103      	bne.n	8008592 <xQueueSemaphoreTake+0x13a>
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008598:	b25b      	sxtb	r3, r3
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d103      	bne.n	80085a8 <xQueueSemaphoreTake+0x150>
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a8:	f002 f824 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ac:	463a      	mov	r2, r7
 80085ae:	f107 030c 	add.w	r3, r7, #12
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 ffff 	bl	80095b8 <xTaskCheckForTimeOut>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d132      	bne.n	8008626 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085c2:	f000 f9cf 	bl	8008964 <prvIsQueueEmpty>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d026      	beq.n	800861a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d109      	bne.n	80085e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80085d4:	f001 ffde 	bl	800a594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 f93d 	bl	800985c <xTaskPriorityInherit>
 80085e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80085e4:	f002 f806 	bl	800a5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	3324      	adds	r3, #36	; 0x24
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 ff19 	bl	8009428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085f8:	f000 f962 	bl	80088c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085fc:	f000 fd42 	bl	8009084 <xTaskResumeAll>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	f47f af68 	bne.w	80084d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008608:	4b18      	ldr	r3, [pc, #96]	; (800866c <xQueueSemaphoreTake+0x214>)
 800860a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	e75e      	b.n	80084d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800861a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800861c:	f000 f950 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008620:	f000 fd30 	bl	8009084 <xTaskResumeAll>
 8008624:	e758      	b.n	80084d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008628:	f000 f94a 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800862c:	f000 fd2a 	bl	8009084 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008632:	f000 f997 	bl	8008964 <prvIsQueueEmpty>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	f43f af4d 	beq.w	80084d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00d      	beq.n	8008660 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008644:	f001 ffa6 	bl	800a594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800864a:	f000 f891 	bl	8008770 <prvGetDisinheritPriorityAfterTimeout>
 800864e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008656:	4618      	mov	r0, r3
 8008658:	f001 f9fc 	bl	8009a54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800865c:	f001 ffca 	bl	800a5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008662:	4618      	mov	r0, r3
 8008664:	3738      	adds	r7, #56	; 0x38
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	; 0x38
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	623b      	str	r3, [r7, #32]
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <xQueueReceiveFromISR+0x3a>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <xQueueReceiveFromISR+0x3e>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <xQueueReceiveFromISR+0x40>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	61fb      	str	r3, [r7, #28]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086ca:	f002 f845 	bl	800a758 <vPortValidateInterruptPriority>
	__asm volatile
 80086ce:	f3ef 8211 	mrs	r2, BASEPRI
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	61ba      	str	r2, [r7, #24]
 80086e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02f      	beq.n	8008756 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008704:	f000 f8b6 	bl	8008874 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	1e5a      	subs	r2, r3, #1
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008718:	d112      	bne.n	8008740 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d016      	beq.n	8008750 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	3310      	adds	r3, #16
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fece 	bl	80094c8 <xTaskRemoveFromEventList>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00e      	beq.n	8008750 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	e007      	b.n	8008750 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008744:	3301      	adds	r3, #1
 8008746:	b2db      	uxtb	r3, r3
 8008748:	b25a      	sxtb	r2, r3
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008750:	2301      	movs	r3, #1
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
 8008754:	e001      	b.n	800875a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f383 8811 	msr	BASEPRI, r3
}
 8008764:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008768:	4618      	mov	r0, r3
 800876a:	3738      	adds	r7, #56	; 0x38
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f1c3 0307 	rsb	r3, r3, #7
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e001      	b.n	8008792 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008792:	68fb      	ldr	r3, [r7, #12]
	}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d14d      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 f8bc 	bl	8009948 <xTaskPriorityDisinherit>
 80087d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	609a      	str	r2, [r3, #8]
 80087d8:	e043      	b.n	8008862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d119      	bne.n	8008814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6858      	ldr	r0, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e8:	461a      	mov	r2, r3
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	f006 fefe 	bl	800f5ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	441a      	add	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d32b      	bcc.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	e026      	b.n	8008862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68d8      	ldr	r0, [r3, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	461a      	mov	r2, r3
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	f006 fee4 	bl	800f5ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	425b      	negs	r3, r3
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d207      	bcs.n	8008850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	425b      	negs	r3, r3
 800884a:	441a      	add	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d105      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3b01      	subs	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	429a      	cmp	r2, r3
 800889e:	d303      	bcc.n	80088a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68d9      	ldr	r1, [r3, #12]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	461a      	mov	r2, r3
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f006 fe9a 	bl	800f5ec <memcpy>
	}
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088c8:	f001 fe64 	bl	800a594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d4:	e011      	b.n	80088fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3324      	adds	r3, #36	; 0x24
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fdf0 	bl	80094c8 <xTaskRemoveFromEventList>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088ee:	f000 fec5 	bl	800967c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dce9      	bgt.n	80088d6 <prvUnlockQueue+0x16>
 8008902:	e000      	b.n	8008906 <prvUnlockQueue+0x46>
					break;
 8008904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	22ff      	movs	r2, #255	; 0xff
 800890a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800890e:	f001 fe71 	bl	800a5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008912:	f001 fe3f 	bl	800a594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800891e:	e011      	b.n	8008944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d012      	beq.n	800894e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3310      	adds	r3, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fdcb 	bl	80094c8 <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008938:	f000 fea0 	bl	800967c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	3b01      	subs	r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dce9      	bgt.n	8008920 <prvUnlockQueue+0x60>
 800894c:	e000      	b.n	8008950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800894e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	22ff      	movs	r2, #255	; 0xff
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008958:	f001 fe4c 	bl	800a5f4 <vPortExitCritical>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800896c:	f001 fe12 	bl	800a594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e001      	b.n	8008982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f001 fe37 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 8008986:	68fb      	ldr	r3, [r7, #12]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008998:	f001 fdfc 	bl	800a594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d102      	bne.n	80089ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b2:	f001 fe1f 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e014      	b.n	80089fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089d0:	4a0f      	ldr	r2, [pc, #60]	; (8008a10 <vQueueAddToRegistry+0x50>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089dc:	490c      	ldr	r1, [pc, #48]	; (8008a10 <vQueueAddToRegistry+0x50>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089e6:	4a0a      	ldr	r2, [pc, #40]	; (8008a10 <vQueueAddToRegistry+0x50>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089f2:	e006      	b.n	8008a02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	d9e7      	bls.n	80089d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000490 	.word	0x20000490

08008a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a24:	f001 fdb6 	bl	800a594 <vPortEnterCritical>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d103      	bne.n	8008a3e <vQueueWaitForMessageRestricted+0x2a>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d103      	bne.n	8008a54 <vQueueWaitForMessageRestricted+0x40>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a54:	f001 fdce 	bl	800a5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3324      	adds	r3, #36	; 0x24
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fd01 	bl	8009470 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f7ff ff26 	bl	80088c0 <prvUnlockQueue>
	}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08c      	sub	sp, #48	; 0x30
 8008a80:	af04      	add	r7, sp, #16
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fea1 	bl	800a7d8 <pvPortMalloc>
 8008a96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00e      	beq.n	8008abc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a9e:	2084      	movs	r0, #132	; 0x84
 8008aa0:	f001 fe9a 	bl	800a7d8 <pvPortMalloc>
 8008aa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8008ab2:	e005      	b.n	8008ac0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ab4:	6978      	ldr	r0, [r7, #20]
 8008ab6:	f001 ff5b 	bl	800a970 <vPortFree>
 8008aba:	e001      	b.n	8008ac0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d013      	beq.n	8008aee <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	9302      	str	r3, [sp, #8]
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f80e 	bl	8008afe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ae2:	69f8      	ldr	r0, [r7, #28]
 8008ae4:	f000 f89a 	bl	8008c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	e002      	b.n	8008af4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295
 8008af2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008af4:	69bb      	ldr	r3, [r7, #24]
	}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b088      	sub	sp, #32
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	461a      	mov	r2, r3
 8008b16:	21a5      	movs	r1, #165	; 0xa5
 8008b18:	f006 fd76 	bl	800f608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b26:	3b01      	subs	r3, #1
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	617b      	str	r3, [r7, #20]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01f      	beq.n	8008b9c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	e012      	b.n	8008b88 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	4413      	add	r3, r2
 8008b68:	7819      	ldrb	r1, [r3, #0]
 8008b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	3334      	adds	r3, #52	; 0x34
 8008b72:	460a      	mov	r2, r1
 8008b74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d006      	beq.n	8008b90 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	3301      	adds	r3, #1
 8008b86:	61fb      	str	r3, [r7, #28]
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2b3f      	cmp	r3, #63	; 0x3f
 8008b8c:	d9e9      	bls.n	8008b62 <prvInitialiseNewTask+0x64>
 8008b8e:	e000      	b.n	8008b92 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8008b9a:	e003      	b.n	8008ba4 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	2b06      	cmp	r3, #6
 8008ba8:	d901      	bls.n	8008bae <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008baa:	2306      	movs	r3, #6
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb8:	675a      	str	r2, [r3, #116]	; 0x74
		pxNewTCB->uxMutexesHeld = 0;
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	679a      	str	r2, [r3, #120]	; 0x78
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe ffbc 	bl	8007b42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	3318      	adds	r3, #24
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe ffb7 	bl	8007b42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	f1c3 0207 	rsb	r2, r3, #7
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	2200      	movs	r2, #0
 8008bee:	67da      	str	r2, [r3, #124]	; 0x7c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	69b8      	ldr	r0, [r7, #24]
 8008bfe:	f001 fb9f 	bl	800a340 <pxPortInitialiseStack>
 8008c02:	4602      	mov	r2, r0
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c14:	bf00      	nop
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c24:	f001 fcb6 	bl	800a594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c28:	4b2a      	ldr	r3, [pc, #168]	; (8008cd4 <prvAddNewTaskToReadyList+0xb8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	4a29      	ldr	r2, [pc, #164]	; (8008cd4 <prvAddNewTaskToReadyList+0xb8>)
 8008c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c32:	4b29      	ldr	r3, [pc, #164]	; (8008cd8 <prvAddNewTaskToReadyList+0xbc>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c3a:	4a27      	ldr	r2, [pc, #156]	; (8008cd8 <prvAddNewTaskToReadyList+0xbc>)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c40:	4b24      	ldr	r3, [pc, #144]	; (8008cd4 <prvAddNewTaskToReadyList+0xb8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d110      	bne.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c48:	f000 fd3c 	bl	80096c4 <prvInitialiseTaskLists>
 8008c4c:	e00d      	b.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c4e:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <prvAddNewTaskToReadyList+0xc0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c56:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <prvAddNewTaskToReadyList+0xbc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d802      	bhi.n	8008c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c64:	4a1c      	ldr	r2, [pc, #112]	; (8008cd8 <prvAddNewTaskToReadyList+0xbc>)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <prvAddNewTaskToReadyList+0xc4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	4a1b      	ldr	r2, [pc, #108]	; (8008ce0 <prvAddNewTaskToReadyList+0xc4>)
 8008c72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	2201      	movs	r2, #1
 8008c7a:	409a      	lsls	r2, r3
 8008c7c:	4b19      	ldr	r3, [pc, #100]	; (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <prvAddNewTaskToReadyList+0xc8>)
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4a15      	ldr	r2, [pc, #84]	; (8008ce8 <prvAddNewTaskToReadyList+0xcc>)
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7fe ff5d 	bl	8007b5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ca2:	f001 fca7 	bl	800a5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <prvAddNewTaskToReadyList+0xc0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00e      	beq.n	8008ccc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cae:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <prvAddNewTaskToReadyList+0xbc>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d207      	bcs.n	8008ccc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <prvAddNewTaskToReadyList+0xd0>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200005d0 	.word	0x200005d0
 8008cd8:	200004d0 	.word	0x200004d0
 8008cdc:	200005dc 	.word	0x200005dc
 8008ce0:	200005ec 	.word	0x200005ec
 8008ce4:	200005d8 	.word	0x200005d8
 8008ce8:	200004d4 	.word	0x200004d4
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008cf8:	f001 fc4c 	bl	800a594 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <vTaskDelete+0x18>
 8008d02:	4b39      	ldr	r3, [pc, #228]	; (8008de8 <vTaskDelete+0xf8>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	e000      	b.n	8008d0a <vTaskDelete+0x1a>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe ff80 	bl	8007c16 <uxListRemove>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d115      	bne.n	8008d48 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d20:	4932      	ldr	r1, [pc, #200]	; (8008dec <vTaskDelete+0xfc>)
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <vTaskDelete+0x58>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	2201      	movs	r2, #1
 8008d38:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3c:	43da      	mvns	r2, r3
 8008d3e:	4b2c      	ldr	r3, [pc, #176]	; (8008df0 <vTaskDelete+0x100>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4013      	ands	r3, r2
 8008d44:	4a2a      	ldr	r2, [pc, #168]	; (8008df0 <vTaskDelete+0x100>)
 8008d46:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3318      	adds	r3, #24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe ff5e 	bl	8007c16 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008d5a:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <vTaskDelete+0x104>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	4a24      	ldr	r2, [pc, #144]	; (8008df4 <vTaskDelete+0x104>)
 8008d62:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008d64:	4b20      	ldr	r3, [pc, #128]	; (8008de8 <vTaskDelete+0xf8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d10b      	bne.n	8008d86 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4619      	mov	r1, r3
 8008d74:	4820      	ldr	r0, [pc, #128]	; (8008df8 <vTaskDelete+0x108>)
 8008d76:	f7fe fef1 	bl	8007b5c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008d7a:	4b20      	ldr	r3, [pc, #128]	; (8008dfc <vTaskDelete+0x10c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	4a1e      	ldr	r2, [pc, #120]	; (8008dfc <vTaskDelete+0x10c>)
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e009      	b.n	8008d9a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008d86:	4b1e      	ldr	r3, [pc, #120]	; (8008e00 <vTaskDelete+0x110>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <vTaskDelete+0x110>)
 8008d8e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fd05 	bl	80097a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008d96:	f000 fd13 	bl	80097c0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008d9a:	f001 fc2b 	bl	800a5f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008d9e:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <vTaskDelete+0x114>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01b      	beq.n	8008dde <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008da6:	4b10      	ldr	r3, [pc, #64]	; (8008de8 <vTaskDelete+0xf8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d116      	bne.n	8008dde <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008db0:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <vTaskDelete+0x118>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <vTaskDelete+0xde>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60bb      	str	r3, [r7, #8]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <vTaskDelete+0x11c>)
 8008dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008dde:	bf00      	nop
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	200004d0 	.word	0x200004d0
 8008dec:	200004d4 	.word	0x200004d4
 8008df0:	200005d8 	.word	0x200005d8
 8008df4:	200005ec 	.word	0x200005ec
 8008df8:	200005a4 	.word	0x200005a4
 8008dfc:	200005b8 	.word	0x200005b8
 8008e00:	200005d0 	.word	0x200005d0
 8008e04:	200005dc 	.word	0x200005dc
 8008e08:	200005f8 	.word	0x200005f8
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d017      	beq.n	8008e52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <vTaskDelay+0x60>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <vTaskDelay+0x30>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	60bb      	str	r3, [r7, #8]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e40:	f000 f912 	bl	8009068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e44:	2100      	movs	r1, #0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fea6 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e4c:	f000 f91a 	bl	8009084 <xTaskResumeAll>
 8008e50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d107      	bne.n	8008e68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e58:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <vTaskDelay+0x64>)
 8008e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e68:	bf00      	nop
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200005f8 	.word	0x200005f8
 8008e74:	e000ed04 	.word	0xe000ed04

08008e78 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b06      	cmp	r3, #6
 8008e8a:	d90a      	bls.n	8008ea2 <vTaskPrioritySet+0x2a>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	60fb      	str	r3, [r7, #12]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b06      	cmp	r3, #6
 8008ea6:	d901      	bls.n	8008eac <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ea8:	2306      	movs	r3, #6
 8008eaa:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008eac:	f001 fb72 	bl	800a594 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d102      	bne.n	8008ebc <vTaskPrioritySet+0x44>
 8008eb6:	4b41      	ldr	r3, [pc, #260]	; (8008fbc <vTaskPrioritySet+0x144>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	e000      	b.n	8008ebe <vTaskPrioritySet+0x46>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec4:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d06f      	beq.n	8008fae <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d90d      	bls.n	8008ef2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8008ed6:	4b39      	ldr	r3, [pc, #228]	; (8008fbc <vTaskPrioritySet+0x144>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d00f      	beq.n	8008f00 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008ee0:	4b36      	ldr	r3, [pc, #216]	; (8008fbc <vTaskPrioritySet+0x144>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d309      	bcc.n	8008f00 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e006      	b.n	8008f00 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8008ef2:	4b32      	ldr	r3, [pc, #200]	; (8008fbc <vTaskPrioritySet+0x144>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d101      	bne.n	8008f00 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8008efc:	2301      	movs	r3, #1
 8008efe:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d102      	bne.n	8008f18 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	675a      	str	r2, [r3, #116]	; 0x74
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db04      	blt.n	8008f30 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	f1c3 0207 	rsb	r2, r3, #7
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	6959      	ldr	r1, [r3, #20]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4a20      	ldr	r2, [pc, #128]	; (8008fc0 <vTaskPrioritySet+0x148>)
 8008f40:	4413      	add	r3, r2
 8008f42:	4299      	cmp	r1, r3
 8008f44:	d128      	bne.n	8008f98 <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fe63 	bl	8007c16 <uxListRemove>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d109      	bne.n	8008f6a <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8008f56:	2201      	movs	r2, #1
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5e:	43da      	mvns	r2, r3
 8008f60:	4b18      	ldr	r3, [pc, #96]	; (8008fc4 <vTaskPrioritySet+0x14c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4013      	ands	r3, r2
 8008f66:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <vTaskPrioritySet+0x14c>)
 8008f68:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	2201      	movs	r2, #1
 8008f70:	409a      	lsls	r2, r3
 8008f72:	4b14      	ldr	r3, [pc, #80]	; (8008fc4 <vTaskPrioritySet+0x14c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	4a12      	ldr	r2, [pc, #72]	; (8008fc4 <vTaskPrioritySet+0x14c>)
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4a0d      	ldr	r2, [pc, #52]	; (8008fc0 <vTaskPrioritySet+0x148>)
 8008f8a:	441a      	add	r2, r3
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fe fde2 	bl	8007b5c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d007      	beq.n	8008fae <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <vTaskPrioritySet+0x150>)
 8008fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8008fae:	f001 fb21 	bl	800a5f4 <vPortExitCritical>
	}
 8008fb2:	bf00      	nop
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	200004d0 	.word	0x200004d0
 8008fc0:	200004d4 	.word	0x200004d4
 8008fc4:	200005d8 	.word	0x200005d8
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008fd2:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <vTaskStartScheduler+0x84>)
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fe0:	491c      	ldr	r1, [pc, #112]	; (8009054 <vTaskStartScheduler+0x88>)
 8008fe2:	481d      	ldr	r0, [pc, #116]	; (8009058 <vTaskStartScheduler+0x8c>)
 8008fe4:	f7ff fd4a 	bl	8008a7c <xTaskCreate>
 8008fe8:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d102      	bne.n	8008ff6 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ff0:	f000 fe38 	bl	8009c64 <xTimerCreateTimerTask>
 8008ff4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d116      	bne.n	800902a <vTaskStartScheduler+0x5e>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	60bb      	str	r3, [r7, #8]
}
 800900e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009010:	4b12      	ldr	r3, [pc, #72]	; (800905c <vTaskStartScheduler+0x90>)
 8009012:	f04f 32ff 	mov.w	r2, #4294967295
 8009016:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <vTaskStartScheduler+0x94>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <vTaskStartScheduler+0x98>)
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009024:	f001 fa14 	bl	800a450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009028:	e00e      	b.n	8009048 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009030:	d10a      	bne.n	8009048 <vTaskStartScheduler+0x7c>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	607b      	str	r3, [r7, #4]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <vTaskStartScheduler+0x7a>
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200005f4 	.word	0x200005f4
 8009054:	08012430 	.word	0x08012430
 8009058:	08009695 	.word	0x08009695
 800905c:	200005f0 	.word	0x200005f0
 8009060:	200005dc 	.word	0x200005dc
 8009064:	200005d4 	.word	0x200005d4

08009068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800906c:	4b04      	ldr	r3, [pc, #16]	; (8009080 <vTaskSuspendAll+0x18>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	4a03      	ldr	r2, [pc, #12]	; (8009080 <vTaskSuspendAll+0x18>)
 8009074:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009076:	bf00      	nop
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	200005f8 	.word	0x200005f8

08009084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009092:	4b41      	ldr	r3, [pc, #260]	; (8009198 <xTaskResumeAll+0x114>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	603b      	str	r3, [r7, #0]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090b0:	f001 fa70 	bl	800a594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090b4:	4b38      	ldr	r3, [pc, #224]	; (8009198 <xTaskResumeAll+0x114>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	4a37      	ldr	r2, [pc, #220]	; (8009198 <xTaskResumeAll+0x114>)
 80090bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090be:	4b36      	ldr	r3, [pc, #216]	; (8009198 <xTaskResumeAll+0x114>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d161      	bne.n	800918a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090c6:	4b35      	ldr	r3, [pc, #212]	; (800919c <xTaskResumeAll+0x118>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d05d      	beq.n	800918a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ce:	e02e      	b.n	800912e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d0:	4b33      	ldr	r3, [pc, #204]	; (80091a0 <xTaskResumeAll+0x11c>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3318      	adds	r3, #24
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fd9a 	bl	8007c16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3304      	adds	r3, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fd95 	bl	8007c16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	2201      	movs	r2, #1
 80090f2:	409a      	lsls	r2, r3
 80090f4:	4b2b      	ldr	r3, [pc, #172]	; (80091a4 <xTaskResumeAll+0x120>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	4a2a      	ldr	r2, [pc, #168]	; (80091a4 <xTaskResumeAll+0x120>)
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4a27      	ldr	r2, [pc, #156]	; (80091a8 <xTaskResumeAll+0x124>)
 800910c:	441a      	add	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3304      	adds	r3, #4
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f7fe fd21 	bl	8007b5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	4b23      	ldr	r3, [pc, #140]	; (80091ac <xTaskResumeAll+0x128>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	429a      	cmp	r2, r3
 8009126:	d302      	bcc.n	800912e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009128:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <xTaskResumeAll+0x12c>)
 800912a:	2201      	movs	r2, #1
 800912c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800912e:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <xTaskResumeAll+0x11c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1cc      	bne.n	80090d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800913c:	f000 fb40 	bl	80097c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <xTaskResumeAll+0x130>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d010      	beq.n	800916e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800914c:	f000 f858 	bl	8009200 <xTaskIncrementTick>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009156:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <xTaskResumeAll+0x12c>)
 8009158:	2201      	movs	r2, #1
 800915a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3b01      	subs	r3, #1
 8009160:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f1      	bne.n	800914c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <xTaskResumeAll+0x130>)
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800916e:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <xTaskResumeAll+0x12c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009176:	2301      	movs	r3, #1
 8009178:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800917a:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <xTaskResumeAll+0x134>)
 800917c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800918a:	f001 fa33 	bl	800a5f4 <vPortExitCritical>

	return xAlreadyYielded;
 800918e:	68bb      	ldr	r3, [r7, #8]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	200005f8 	.word	0x200005f8
 800919c:	200005d0 	.word	0x200005d0
 80091a0:	20000590 	.word	0x20000590
 80091a4:	200005d8 	.word	0x200005d8
 80091a8:	200004d4 	.word	0x200004d4
 80091ac:	200004d0 	.word	0x200004d0
 80091b0:	200005e4 	.word	0x200005e4
 80091b4:	200005e0 	.word	0x200005e0
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <xTaskGetTickCount+0x1c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091c8:	687b      	ldr	r3, [r7, #4]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	200005d4 	.word	0x200005d4

080091dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091e2:	f001 fab9 	bl	800a758 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80091e6:	2300      	movs	r3, #0
 80091e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80091ea:	4b04      	ldr	r3, [pc, #16]	; (80091fc <xTaskGetTickCountFromISR+0x20>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091f0:	683b      	ldr	r3, [r7, #0]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	200005d4 	.word	0x200005d4

08009200 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800920a:	4b4e      	ldr	r3, [pc, #312]	; (8009344 <xTaskIncrementTick+0x144>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 808e 	bne.w	8009330 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009214:	4b4c      	ldr	r3, [pc, #304]	; (8009348 <xTaskIncrementTick+0x148>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800921c:	4a4a      	ldr	r2, [pc, #296]	; (8009348 <xTaskIncrementTick+0x148>)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d120      	bne.n	800926a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009228:	4b48      	ldr	r3, [pc, #288]	; (800934c <xTaskIncrementTick+0x14c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <xTaskIncrementTick+0x48>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	603b      	str	r3, [r7, #0]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xTaskIncrementTick+0x46>
 8009248:	4b40      	ldr	r3, [pc, #256]	; (800934c <xTaskIncrementTick+0x14c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	4b40      	ldr	r3, [pc, #256]	; (8009350 <xTaskIncrementTick+0x150>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a3e      	ldr	r2, [pc, #248]	; (800934c <xTaskIncrementTick+0x14c>)
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	4a3e      	ldr	r2, [pc, #248]	; (8009350 <xTaskIncrementTick+0x150>)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	4b3d      	ldr	r3, [pc, #244]	; (8009354 <xTaskIncrementTick+0x154>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3301      	adds	r3, #1
 8009262:	4a3c      	ldr	r2, [pc, #240]	; (8009354 <xTaskIncrementTick+0x154>)
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	f000 faab 	bl	80097c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800926a:	4b3b      	ldr	r3, [pc, #236]	; (8009358 <xTaskIncrementTick+0x158>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	429a      	cmp	r2, r3
 8009272:	d348      	bcc.n	8009306 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009274:	4b35      	ldr	r3, [pc, #212]	; (800934c <xTaskIncrementTick+0x14c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927e:	4b36      	ldr	r3, [pc, #216]	; (8009358 <xTaskIncrementTick+0x158>)
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	601a      	str	r2, [r3, #0]
					break;
 8009286:	e03e      	b.n	8009306 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009288:	4b30      	ldr	r3, [pc, #192]	; (800934c <xTaskIncrementTick+0x14c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d203      	bcs.n	80092a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092a0:	4a2d      	ldr	r2, [pc, #180]	; (8009358 <xTaskIncrementTick+0x158>)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092a6:	e02e      	b.n	8009306 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fcb2 	bl	8007c16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	3318      	adds	r3, #24
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fca9 	bl	8007c16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	2201      	movs	r2, #1
 80092ca:	409a      	lsls	r2, r3
 80092cc:	4b23      	ldr	r3, [pc, #140]	; (800935c <xTaskIncrementTick+0x15c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	4a22      	ldr	r2, [pc, #136]	; (800935c <xTaskIncrementTick+0x15c>)
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a1f      	ldr	r2, [pc, #124]	; (8009360 <xTaskIncrementTick+0x160>)
 80092e4:	441a      	add	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	3304      	adds	r3, #4
 80092ea:	4619      	mov	r1, r3
 80092ec:	4610      	mov	r0, r2
 80092ee:	f7fe fc35 	bl	8007b5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <xTaskIncrementTick+0x164>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d3b9      	bcc.n	8009274 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009304:	e7b6      	b.n	8009274 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009306:	4b17      	ldr	r3, [pc, #92]	; (8009364 <xTaskIncrementTick+0x164>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	4914      	ldr	r1, [pc, #80]	; (8009360 <xTaskIncrementTick+0x160>)
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	440b      	add	r3, r1
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d901      	bls.n	8009322 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009322:	4b11      	ldr	r3, [pc, #68]	; (8009368 <xTaskIncrementTick+0x168>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	e004      	b.n	800933a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009330:	4b0e      	ldr	r3, [pc, #56]	; (800936c <xTaskIncrementTick+0x16c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	4a0d      	ldr	r2, [pc, #52]	; (800936c <xTaskIncrementTick+0x16c>)
 8009338:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800933a:	697b      	ldr	r3, [r7, #20]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200005f8 	.word	0x200005f8
 8009348:	200005d4 	.word	0x200005d4
 800934c:	20000588 	.word	0x20000588
 8009350:	2000058c 	.word	0x2000058c
 8009354:	200005e8 	.word	0x200005e8
 8009358:	200005f0 	.word	0x200005f0
 800935c:	200005d8 	.word	0x200005d8
 8009360:	200004d4 	.word	0x200004d4
 8009364:	200004d0 	.word	0x200004d0
 8009368:	200005e4 	.word	0x200005e4
 800936c:	200005e0 	.word	0x200005e0

08009370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009376:	4b27      	ldr	r3, [pc, #156]	; (8009414 <vTaskSwitchContext+0xa4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800937e:	4b26      	ldr	r3, [pc, #152]	; (8009418 <vTaskSwitchContext+0xa8>)
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009384:	e03f      	b.n	8009406 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009386:	4b24      	ldr	r3, [pc, #144]	; (8009418 <vTaskSwitchContext+0xa8>)
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938c:	4b23      	ldr	r3, [pc, #140]	; (800941c <vTaskSwitchContext+0xac>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	fab3 f383 	clz	r3, r3
 8009398:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	f1c3 031f 	rsb	r3, r3, #31
 80093a0:	617b      	str	r3, [r7, #20]
 80093a2:	491f      	ldr	r1, [pc, #124]	; (8009420 <vTaskSwitchContext+0xb0>)
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	607b      	str	r3, [r7, #4]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <vTaskSwitchContext+0x5a>
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4a12      	ldr	r2, [pc, #72]	; (8009420 <vTaskSwitchContext+0xb0>)
 80093d8:	4413      	add	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	605a      	str	r2, [r3, #4]
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	3308      	adds	r3, #8
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d104      	bne.n	80093fc <vTaskSwitchContext+0x8c>
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	605a      	str	r2, [r3, #4]
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	4a08      	ldr	r2, [pc, #32]	; (8009424 <vTaskSwitchContext+0xb4>)
 8009404:	6013      	str	r3, [r2, #0]
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	200005f8 	.word	0x200005f8
 8009418:	200005e4 	.word	0x200005e4
 800941c:	200005d8 	.word	0x200005d8
 8009420:	200004d4 	.word	0x200004d4
 8009424:	200004d0 	.word	0x200004d0

08009428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	60fb      	str	r3, [r7, #12]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800944e:	4b07      	ldr	r3, [pc, #28]	; (800946c <vTaskPlaceOnEventList+0x44>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3318      	adds	r3, #24
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fe fba4 	bl	8007ba4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800945c:	2101      	movs	r1, #1
 800945e:	6838      	ldr	r0, [r7, #0]
 8009460:	f000 fb9a 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	200004d0 	.word	0x200004d0

08009470 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	617b      	str	r3, [r7, #20]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3318      	adds	r3, #24
 800949e:	4619      	mov	r1, r3
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7fe fb5b 	bl	8007b5c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80094ac:	f04f 33ff 	mov.w	r3, #4294967295
 80094b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	68b8      	ldr	r0, [r7, #8]
 80094b6:	f000 fb6f 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
	}
 80094ba:	bf00      	nop
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	200004d0 	.word	0x200004d0

080094c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60fb      	str	r3, [r7, #12]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	3318      	adds	r3, #24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe fb8c 	bl	8007c16 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <xTaskRemoveFromEventList+0xac>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d11c      	bne.n	8009540 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	3304      	adds	r3, #4
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe fb83 	bl	8007c16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	2201      	movs	r2, #1
 8009516:	409a      	lsls	r2, r3
 8009518:	4b17      	ldr	r3, [pc, #92]	; (8009578 <xTaskRemoveFromEventList+0xb0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4313      	orrs	r3, r2
 800951e:	4a16      	ldr	r2, [pc, #88]	; (8009578 <xTaskRemoveFromEventList+0xb0>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4a13      	ldr	r2, [pc, #76]	; (800957c <xTaskRemoveFromEventList+0xb4>)
 8009530:	441a      	add	r2, r3
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3304      	adds	r3, #4
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f7fe fb0f 	bl	8007b5c <vListInsertEnd>
 800953e:	e005      	b.n	800954c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3318      	adds	r3, #24
 8009544:	4619      	mov	r1, r3
 8009546:	480e      	ldr	r0, [pc, #56]	; (8009580 <xTaskRemoveFromEventList+0xb8>)
 8009548:	f7fe fb08 	bl	8007b5c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <xTaskRemoveFromEventList+0xbc>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009556:	429a      	cmp	r2, r3
 8009558:	d905      	bls.n	8009566 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800955a:	2301      	movs	r3, #1
 800955c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800955e:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <xTaskRemoveFromEventList+0xc0>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e001      	b.n	800956a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800956a:	697b      	ldr	r3, [r7, #20]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	200005f8 	.word	0x200005f8
 8009578:	200005d8 	.word	0x200005d8
 800957c:	200004d4 	.word	0x200004d4
 8009580:	20000590 	.word	0x20000590
 8009584:	200004d0 	.word	0x200004d0
 8009588:	200005e4 	.word	0x200005e4

0800958c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009594:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <vTaskInternalSetTimeOutState+0x24>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <vTaskInternalSetTimeOutState+0x28>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	605a      	str	r2, [r3, #4]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200005e8 	.word	0x200005e8
 80095b4:	200005d4 	.word	0x200005d4

080095b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	613b      	str	r3, [r7, #16]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	60fb      	str	r3, [r7, #12]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095fa:	f000 ffcb 	bl	800a594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095fe:	4b1d      	ldr	r3, [pc, #116]	; (8009674 <xTaskCheckForTimeOut+0xbc>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d102      	bne.n	800961e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
 800961c:	e023      	b.n	8009666 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <xTaskCheckForTimeOut+0xc0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d007      	beq.n	800963a <xTaskCheckForTimeOut+0x82>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	429a      	cmp	r2, r3
 8009632:	d302      	bcc.n	800963a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e015      	b.n	8009666 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	429a      	cmp	r2, r3
 8009642:	d20b      	bcs.n	800965c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	1ad2      	subs	r2, r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff9b 	bl	800958c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e004      	b.n	8009666 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009662:	2301      	movs	r3, #1
 8009664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009666:	f000 ffc5 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 800966a:	69fb      	ldr	r3, [r7, #28]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	200005d4 	.word	0x200005d4
 8009678:	200005e8 	.word	0x200005e8

0800967c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009680:	4b03      	ldr	r3, [pc, #12]	; (8009690 <vTaskMissedYield+0x14>)
 8009682:	2201      	movs	r2, #1
 8009684:	601a      	str	r2, [r3, #0]
}
 8009686:	bf00      	nop
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	200005e4 	.word	0x200005e4

08009694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800969c:	f000 f852 	bl	8009744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <prvIdleTask+0x28>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d9f9      	bls.n	800969c <prvIdleTask+0x8>
			{
				taskYIELD();
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <prvIdleTask+0x2c>)
 80096aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096b8:	e7f0      	b.n	800969c <prvIdleTask+0x8>
 80096ba:	bf00      	nop
 80096bc:	200004d4 	.word	0x200004d4
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	e00c      	b.n	80096ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4a12      	ldr	r2, [pc, #72]	; (8009724 <prvInitialiseTaskLists+0x60>)
 80096dc:	4413      	add	r3, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fa0f 	bl	8007b02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3301      	adds	r3, #1
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b06      	cmp	r3, #6
 80096ee:	d9ef      	bls.n	80096d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096f0:	480d      	ldr	r0, [pc, #52]	; (8009728 <prvInitialiseTaskLists+0x64>)
 80096f2:	f7fe fa06 	bl	8007b02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096f6:	480d      	ldr	r0, [pc, #52]	; (800972c <prvInitialiseTaskLists+0x68>)
 80096f8:	f7fe fa03 	bl	8007b02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096fc:	480c      	ldr	r0, [pc, #48]	; (8009730 <prvInitialiseTaskLists+0x6c>)
 80096fe:	f7fe fa00 	bl	8007b02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009702:	480c      	ldr	r0, [pc, #48]	; (8009734 <prvInitialiseTaskLists+0x70>)
 8009704:	f7fe f9fd 	bl	8007b02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009708:	480b      	ldr	r0, [pc, #44]	; (8009738 <prvInitialiseTaskLists+0x74>)
 800970a:	f7fe f9fa 	bl	8007b02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <prvInitialiseTaskLists+0x78>)
 8009710:	4a05      	ldr	r2, [pc, #20]	; (8009728 <prvInitialiseTaskLists+0x64>)
 8009712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009714:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <prvInitialiseTaskLists+0x7c>)
 8009716:	4a05      	ldr	r2, [pc, #20]	; (800972c <prvInitialiseTaskLists+0x68>)
 8009718:	601a      	str	r2, [r3, #0]
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200004d4 	.word	0x200004d4
 8009728:	20000560 	.word	0x20000560
 800972c:	20000574 	.word	0x20000574
 8009730:	20000590 	.word	0x20000590
 8009734:	200005a4 	.word	0x200005a4
 8009738:	200005bc 	.word	0x200005bc
 800973c:	20000588 	.word	0x20000588
 8009740:	2000058c 	.word	0x2000058c

08009744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800974a:	e019      	b.n	8009780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800974c:	f000 ff22 	bl	800a594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <prvCheckTasksWaitingTermination+0x50>)
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3304      	adds	r3, #4
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe fa5a 	bl	8007c16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009762:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <prvCheckTasksWaitingTermination+0x54>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3b01      	subs	r3, #1
 8009768:	4a0b      	ldr	r2, [pc, #44]	; (8009798 <prvCheckTasksWaitingTermination+0x54>)
 800976a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <prvCheckTasksWaitingTermination+0x58>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3b01      	subs	r3, #1
 8009772:	4a0a      	ldr	r2, [pc, #40]	; (800979c <prvCheckTasksWaitingTermination+0x58>)
 8009774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009776:	f000 ff3d 	bl	800a5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f810 	bl	80097a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <prvCheckTasksWaitingTermination+0x58>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e1      	bne.n	800974c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200005a4 	.word	0x200005a4
 8009798:	200005d0 	.word	0x200005d0
 800979c:	200005b8 	.word	0x200005b8

080097a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 f8df 	bl	800a970 <vPortFree>
			vPortFree( pxTCB );
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f8dc 	bl	800a970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097c6:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <prvResetNextTaskUnblockTime+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <prvResetNextTaskUnblockTime+0x3c>)
 80097d2:	f04f 32ff 	mov.w	r2, #4294967295
 80097d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097d8:	e008      	b.n	80097ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvResetNextTaskUnblockTime+0x38>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	4a04      	ldr	r2, [pc, #16]	; (80097fc <prvResetNextTaskUnblockTime+0x3c>)
 80097ea:	6013      	str	r3, [r2, #0]
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20000588 	.word	0x20000588
 80097fc:	200005f0 	.word	0x200005f0

08009800 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <xTaskGetCurrentTaskHandle+0x1c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800980c:	687b      	ldr	r3, [r7, #4]
	}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	200004d0 	.word	0x200004d0

08009820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <xTaskGetSchedulerState+0x34>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800982e:	2301      	movs	r3, #1
 8009830:	607b      	str	r3, [r7, #4]
 8009832:	e008      	b.n	8009846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <xTaskGetSchedulerState+0x38>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800983c:	2302      	movs	r3, #2
 800983e:	607b      	str	r3, [r7, #4]
 8009840:	e001      	b.n	8009846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009842:	2300      	movs	r3, #0
 8009844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009846:	687b      	ldr	r3, [r7, #4]
	}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	200005dc 	.word	0x200005dc
 8009858:	200005f8 	.word	0x200005f8

0800985c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d05e      	beq.n	8009930 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4b31      	ldr	r3, [pc, #196]	; (800993c <xTaskPriorityInherit+0xe0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	429a      	cmp	r2, r3
 800987e:	d24e      	bcs.n	800991e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	db06      	blt.n	8009896 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009888:	4b2c      	ldr	r3, [pc, #176]	; (800993c <xTaskPriorityInherit+0xe0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	f1c3 0207 	rsb	r2, r3, #7
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6959      	ldr	r1, [r3, #20]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4a26      	ldr	r2, [pc, #152]	; (8009940 <xTaskPriorityInherit+0xe4>)
 80098a8:	4413      	add	r3, r2
 80098aa:	4299      	cmp	r1, r3
 80098ac:	d12f      	bne.n	800990e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe f9af 	bl	8007c16 <uxListRemove>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	2201      	movs	r2, #1
 80098c4:	fa02 f303 	lsl.w	r3, r2, r3
 80098c8:	43da      	mvns	r2, r3
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4013      	ands	r3, r2
 80098d0:	4a1c      	ldr	r2, [pc, #112]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098d4:	4b19      	ldr	r3, [pc, #100]	; (800993c <xTaskPriorityInherit+0xe0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	409a      	lsls	r2, r3
 80098e6:	4b17      	ldr	r3, [pc, #92]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	4a15      	ldr	r2, [pc, #84]	; (8009944 <xTaskPriorityInherit+0xe8>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a10      	ldr	r2, [pc, #64]	; (8009940 <xTaskPriorityInherit+0xe4>)
 80098fe:	441a      	add	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7fe f928 	bl	8007b5c <vListInsertEnd>
 800990c:	e004      	b.n	8009918 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800990e:	4b0b      	ldr	r3, [pc, #44]	; (800993c <xTaskPriorityInherit+0xe0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	e008      	b.n	8009930 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009922:	4b06      	ldr	r3, [pc, #24]	; (800993c <xTaskPriorityInherit+0xe0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	429a      	cmp	r2, r3
 800992a:	d201      	bcs.n	8009930 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009930:	68fb      	ldr	r3, [r7, #12]
	}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	200004d0 	.word	0x200004d0
 8009940:	200004d4 	.word	0x200004d4
 8009944:	200005d8 	.word	0x200005d8

08009948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d06e      	beq.n	8009a3c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800995e:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <xTaskPriorityDisinherit+0x100>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	429a      	cmp	r2, r3
 8009966:	d00a      	beq.n	800997e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	60fb      	str	r3, [r7, #12]
}
 800997a:	bf00      	nop
 800997c:	e7fe      	b.n	800997c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a0:	1e5a      	subs	r2, r3, #1
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	679a      	str	r2, [r3, #120]	; 0x78

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d044      	beq.n	8009a3c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d140      	bne.n	8009a3c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	3304      	adds	r3, #4
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe f929 	bl	8007c16 <uxListRemove>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d115      	bne.n	80099f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	491f      	ldr	r1, [pc, #124]	; (8009a4c <xTaskPriorityDisinherit+0x104>)
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <xTaskPriorityDisinherit+0xae>
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e4:	2201      	movs	r2, #1
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	43da      	mvns	r2, r3
 80099ec:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4013      	ands	r3, r2
 80099f2:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 80099f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	f1c3 0207 	rsb	r2, r3, #7
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	2201      	movs	r2, #1
 8009a10:	409a      	lsls	r2, r3
 8009a12:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <xTaskPriorityDisinherit+0x108>)
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <xTaskPriorityDisinherit+0x104>)
 8009a2a:	441a      	add	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7fe f892 	bl	8007b5c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a3c:	697b      	ldr	r3, [r7, #20]
	}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	200004d0 	.word	0x200004d0
 8009a4c:	200004d4 	.word	0x200004d4
 8009a50:	200005d8 	.word	0x200005d8

08009a54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a62:	2301      	movs	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d077      	beq.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	60fb      	str	r3, [r7, #12]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d902      	bls.n	8009a9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	e002      	b.n	8009aa0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d058      	beq.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d153      	bne.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009ab4:	4b2b      	ldr	r3, [pc, #172]	; (8009b64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d10a      	bne.n	8009ad4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60bb      	str	r3, [r7, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	db04      	blt.n	8009af2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f1c3 0207 	rsb	r2, r3, #7
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	6959      	ldr	r1, [r3, #20]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4a19      	ldr	r2, [pc, #100]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b02:	4413      	add	r3, r2
 8009b04:	4299      	cmp	r1, r3
 8009b06:	d129      	bne.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe f882 	bl	8007c16 <uxListRemove>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b22:	43da      	mvns	r2, r3
 8009b24:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4013      	ands	r3, r2
 8009b2a:	4a10      	ldr	r2, [pc, #64]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	2201      	movs	r2, #1
 8009b34:	409a      	lsls	r2, r3
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	4a0b      	ldr	r2, [pc, #44]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4a06      	ldr	r2, [pc, #24]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b4e:	441a      	add	r2, r3
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fe f800 	bl	8007b5c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b5c:	bf00      	nop
 8009b5e:	3720      	adds	r7, #32
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200004d0 	.word	0x200004d0
 8009b68:	200004d4 	.word	0x200004d4
 8009b6c:	200005d8 	.word	0x200005d8

08009b70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b74:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009b82:	3201      	adds	r2, #1
 8009b84:	679a      	str	r2, [r3, #120]	; 0x78
		}

		return pxCurrentTCB;
 8009b86:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b88:	681b      	ldr	r3, [r3, #0]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	200004d0 	.word	0x200004d0

08009b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b29      	ldr	r3, [pc, #164]	; (8009c48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ba8:	4b28      	ldr	r3, [pc, #160]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe f831 	bl	8007c16 <uxListRemove>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bba:	4b24      	ldr	r3, [pc, #144]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	43da      	mvns	r2, r3
 8009bc8:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d10a      	bne.n	8009bf0 <prvAddCurrentTaskToDelayedList+0x58>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009be0:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	481a      	ldr	r0, [pc, #104]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bea:	f7fd ffb7 	bl	8007b5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bee:	e026      	b.n	8009c3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bf8:	4b14      	ldr	r3, [pc, #80]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d209      	bcs.n	8009c1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3304      	adds	r3, #4
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7fd ffc5 	bl	8007ba4 <vListInsert>
}
 8009c1a:	e010      	b.n	8009c3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c1c:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3304      	adds	r3, #4
 8009c26:	4619      	mov	r1, r3
 8009c28:	4610      	mov	r0, r2
 8009c2a:	f7fd ffbb 	bl	8007ba4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d202      	bcs.n	8009c3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c38:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	6013      	str	r3, [r2, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200005d4 	.word	0x200005d4
 8009c4c:	200004d0 	.word	0x200004d0
 8009c50:	200005d8 	.word	0x200005d8
 8009c54:	200005bc 	.word	0x200005bc
 8009c58:	2000058c 	.word	0x2000058c
 8009c5c:	20000588 	.word	0x20000588
 8009c60:	200005f0 	.word	0x200005f0

08009c64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c6e:	f000 fb31 	bl	800a2d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c72:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <xTimerCreateTimerTask+0x54>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009c7a:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <xTimerCreateTimerTask+0x58>)
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	2302      	movs	r3, #2
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c88:	490d      	ldr	r1, [pc, #52]	; (8009cc0 <xTimerCreateTimerTask+0x5c>)
 8009c8a:	480e      	ldr	r0, [pc, #56]	; (8009cc4 <xTimerCreateTimerTask+0x60>)
 8009c8c:	f7fe fef6 	bl	8008a7c <xTaskCreate>
 8009c90:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	603b      	str	r3, [r7, #0]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xTimerCreateTimerTask+0x48>
	return xReturn;
 8009cae:	687b      	ldr	r3, [r7, #4]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	2000062c 	.word	0x2000062c
 8009cbc:	20000630 	.word	0x20000630
 8009cc0:	08012438 	.word	0x08012438
 8009cc4:	08009eb5 	.word	0x08009eb5

08009cc8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009cd6:	2028      	movs	r0, #40	; 0x28
 8009cd8:	f000 fd7e 	bl	800a7d8 <pvPortMalloc>
 8009cdc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00d      	beq.n	8009d00 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f805 	bl	8009d0a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009d00:	697b      	ldr	r3, [r7, #20]
	}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b086      	sub	sp, #24
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10a      	bne.n	8009d34 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	617b      	str	r3, [r7, #20]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01e      	beq.n	8009d78 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009d3a:	f000 facb 	bl	800a2d4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	6a3a      	ldr	r2, [r7, #32]
 8009d54:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	3304      	adds	r3, #4
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fd fef1 	bl	8007b42 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d008      	beq.n	8009d78 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d6c:	f043 0304 	orr.w	r3, r3, #4
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009d78:	bf00      	nop
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08a      	sub	sp, #40	; 0x28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	623b      	str	r3, [r7, #32]
}
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dae:	4b1a      	ldr	r3, [pc, #104]	; (8009e18 <xTimerGenericCommand+0x98>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d02a      	beq.n	8009e0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	dc18      	bgt.n	8009dfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009dc8:	f7ff fd2a 	bl	8009820 <xTaskGetSchedulerState>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d109      	bne.n	8009de6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009dd2:	4b11      	ldr	r3, [pc, #68]	; (8009e18 <xTimerGenericCommand+0x98>)
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	f107 0114 	add.w	r1, r7, #20
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dde:	f7fe f835 	bl	8007e4c <xQueueGenericSend>
 8009de2:	6278      	str	r0, [r7, #36]	; 0x24
 8009de4:	e012      	b.n	8009e0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009de6:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <xTimerGenericCommand+0x98>)
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f107 0114 	add.w	r1, r7, #20
 8009dee:	2300      	movs	r3, #0
 8009df0:	2200      	movs	r2, #0
 8009df2:	f7fe f82b 	bl	8007e4c <xQueueGenericSend>
 8009df6:	6278      	str	r0, [r7, #36]	; 0x24
 8009df8:	e008      	b.n	8009e0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <xTimerGenericCommand+0x98>)
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f107 0114 	add.w	r1, r7, #20
 8009e02:	2300      	movs	r3, #0
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	f7fe f91f 	bl	8008048 <xQueueGenericSendFromISR>
 8009e0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3728      	adds	r7, #40	; 0x28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	2000062c 	.word	0x2000062c

08009e1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e26:	4b22      	ldr	r3, [pc, #136]	; (8009eb0 <prvProcessExpiredTimer+0x94>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fd feee 	bl	8007c16 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d022      	beq.n	8009e8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	699a      	ldr	r2, [r3, #24]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	18d1      	adds	r1, r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	6978      	ldr	r0, [r7, #20]
 8009e56:	f000 f8d1 	bl	8009ffc <prvInsertTimerInActiveList>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d01f      	beq.n	8009ea0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e60:	2300      	movs	r3, #0
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	2300      	movs	r3, #0
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	6978      	ldr	r0, [r7, #20]
 8009e6c:	f7ff ff88 	bl	8009d80 <xTimerGenericCommand>
 8009e70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d113      	bne.n	8009ea0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	60fb      	str	r3, [r7, #12]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e94:	f023 0301 	bic.w	r3, r3, #1
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	4798      	blx	r3
}
 8009ea8:	bf00      	nop
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20000624 	.word	0x20000624

08009eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ebc:	f107 0308 	add.w	r3, r7, #8
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f857 	bl	8009f74 <prvGetNextExpireTime>
 8009ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f803 	bl	8009ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ed2:	f000 f8d5 	bl	800a080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ed6:	e7f1      	b.n	8009ebc <prvTimerTask+0x8>

08009ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ee2:	f7ff f8c1 	bl	8009068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f866 	bl	8009fbc <prvSampleTimeNow>
 8009ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d130      	bne.n	8009f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <prvProcessTimerOrBlockTask+0x3c>
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d806      	bhi.n	8009f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f06:	f7ff f8bd 	bl	8009084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff85 	bl	8009e1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f12:	e024      	b.n	8009f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d008      	beq.n	8009f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f1a:	4b13      	ldr	r3, [pc, #76]	; (8009f68 <prvProcessTimerOrBlockTask+0x90>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <prvProcessTimerOrBlockTask+0x50>
 8009f24:	2301      	movs	r3, #1
 8009f26:	e000      	b.n	8009f2a <prvProcessTimerOrBlockTask+0x52>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <prvProcessTimerOrBlockTask+0x94>)
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f7fe fd6b 	bl	8008a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f3e:	f7ff f8a1 	bl	8009084 <xTaskResumeAll>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10a      	bne.n	8009f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f48:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <prvProcessTimerOrBlockTask+0x98>)
 8009f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	f3bf 8f6f 	isb	sy
}
 8009f58:	e001      	b.n	8009f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f5a:	f7ff f893 	bl	8009084 <xTaskResumeAll>
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000628 	.word	0x20000628
 8009f6c:	2000062c 	.word	0x2000062c
 8009f70:	e000ed04 	.word	0xe000ed04

08009f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f7c:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <prvGetNextExpireTime+0x44>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <prvGetNextExpireTime+0x16>
 8009f86:	2201      	movs	r2, #1
 8009f88:	e000      	b.n	8009f8c <prvGetNextExpireTime+0x18>
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d105      	bne.n	8009fa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f98:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <prvGetNextExpireTime+0x44>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	e001      	b.n	8009fa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000624 	.word	0x20000624

08009fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009fc4:	f7ff f8fa 	bl	80091bc <xTaskGetTickCount>
 8009fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009fca:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <prvSampleTimeNow+0x3c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d205      	bcs.n	8009fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fd4:	f000 f91a 	bl	800a20c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e002      	b.n	8009fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fe6:	4a04      	ldr	r2, [pc, #16]	; (8009ff8 <prvSampleTimeNow+0x3c>)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fec:	68fb      	ldr	r3, [r7, #12]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000634 	.word	0x20000634

08009ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d812      	bhi.n	800a048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	1ad2      	subs	r2, r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d302      	bcc.n	800a036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a030:	2301      	movs	r3, #1
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	e01b      	b.n	800a06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a036:	4b10      	ldr	r3, [pc, #64]	; (800a078 <prvInsertTimerInActiveList+0x7c>)
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fd fdaf 	bl	8007ba4 <vListInsert>
 800a046:	e012      	b.n	800a06e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d206      	bcs.n	800a05e <prvInsertTimerInActiveList+0x62>
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d302      	bcc.n	800a05e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a058:	2301      	movs	r3, #1
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e007      	b.n	800a06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a05e:	4b07      	ldr	r3, [pc, #28]	; (800a07c <prvInsertTimerInActiveList+0x80>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3304      	adds	r3, #4
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f7fd fd9b 	bl	8007ba4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a06e:	697b      	ldr	r3, [r7, #20]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20000628 	.word	0x20000628
 800a07c:	20000624 	.word	0x20000624

0800a080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08c      	sub	sp, #48	; 0x30
 800a084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a086:	e0ae      	b.n	800a1e6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f2c0 80aa 	blt.w	800a1e4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d004      	beq.n	800a0a6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fd fdb8 	bl	8007c16 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ff87 	bl	8009fbc <prvSampleTimeNow>
 800a0ae:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b09      	cmp	r3, #9
 800a0b4:	f200 8097 	bhi.w	800a1e6 <prvProcessReceivedCommands+0x166>
 800a0b8:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <prvProcessReceivedCommands+0x40>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0e9 	.word	0x0800a0e9
 800a0c4:	0800a0e9 	.word	0x0800a0e9
 800a0c8:	0800a0e9 	.word	0x0800a0e9
 800a0cc:	0800a15d 	.word	0x0800a15d
 800a0d0:	0800a171 	.word	0x0800a171
 800a0d4:	0800a1bb 	.word	0x0800a1bb
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0e9 	.word	0x0800a0e9
 800a0e0:	0800a15d 	.word	0x0800a15d
 800a0e4:	0800a171 	.word	0x0800a171
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	18d1      	adds	r1, r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a3a      	ldr	r2, [r7, #32]
 800a106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a108:	f7ff ff78 	bl	8009ffc <prvInsertTimerInActiveList>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d069      	beq.n	800a1e6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d05e      	beq.n	800a1e6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	441a      	add	r2, r3
 800a130:	2300      	movs	r3, #0
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	2100      	movs	r1, #0
 800a138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a13a:	f7ff fe21 	bl	8009d80 <xTimerGenericCommand>
 800a13e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d14f      	bne.n	800a1e6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	61bb      	str	r3, [r7, #24]
}
 800a158:	bf00      	nop
 800a15a:	e7fe      	b.n	800a15a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	b2da      	uxtb	r2, r3
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a16e:	e03a      	b.n	800a1e6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	617b      	str	r3, [r7, #20]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	699a      	ldr	r2, [r3, #24]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	18d1      	adds	r1, r2, r3
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	6a3a      	ldr	r2, [r7, #32]
 800a1b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1b4:	f7ff ff22 	bl	8009ffc <prvInsertTimerInActiveList>
					break;
 800a1b8:	e015      	b.n	800a1e6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ca:	f000 fbd1 	bl	800a970 <vPortFree>
 800a1ce:	e00a      	b.n	800a1e6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1d6:	f023 0301 	bic.w	r3, r3, #1
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1e2:	e000      	b.n	800a1e6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a1e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1e6:	4b08      	ldr	r3, [pc, #32]	; (800a208 <prvProcessReceivedCommands+0x188>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f107 0108 	add.w	r1, r7, #8
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe f851 	bl	8008298 <xQueueReceive>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f47f af45 	bne.w	800a088 <prvProcessReceivedCommands+0x8>
	}
}
 800a1fe:	bf00      	nop
 800a200:	bf00      	nop
 800a202:	3728      	adds	r7, #40	; 0x28
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	2000062c 	.word	0x2000062c

0800a20c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a212:	e048      	b.n	800a2a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a214:	4b2d      	ldr	r3, [pc, #180]	; (800a2cc <prvSwitchTimerLists+0xc0>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21e:	4b2b      	ldr	r3, [pc, #172]	; (800a2cc <prvSwitchTimerLists+0xc0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fd fcf2 	bl	8007c16 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d02e      	beq.n	800a2a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4413      	add	r3, r2
 800a250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	429a      	cmp	r2, r3
 800a258:	d90e      	bls.n	800a278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a266:	4b19      	ldr	r3, [pc, #100]	; (800a2cc <prvSwitchTimerLists+0xc0>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4619      	mov	r1, r3
 800a270:	4610      	mov	r0, r2
 800a272:	f7fd fc97 	bl	8007ba4 <vListInsert>
 800a276:	e016      	b.n	800a2a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a278:	2300      	movs	r3, #0
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	2300      	movs	r3, #0
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	2100      	movs	r1, #0
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff fd7c 	bl	8009d80 <xTimerGenericCommand>
 800a288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	603b      	str	r3, [r7, #0]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2a6:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <prvSwitchTimerLists+0xc0>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1b1      	bne.n	800a214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2b0:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <prvSwitchTimerLists+0xc0>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2b6:	4b06      	ldr	r3, [pc, #24]	; (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <prvSwitchTimerLists+0xc0>)
 800a2bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2be:	4a04      	ldr	r2, [pc, #16]	; (800a2d0 <prvSwitchTimerLists+0xc4>)
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	6013      	str	r3, [r2, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20000624 	.word	0x20000624
 800a2d0:	20000628 	.word	0x20000628

0800a2d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2d8:	f000 f95c 	bl	800a594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2dc:	4b12      	ldr	r3, [pc, #72]	; (800a328 <prvCheckForValidListAndQueue+0x54>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d11d      	bne.n	800a320 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2e4:	4811      	ldr	r0, [pc, #68]	; (800a32c <prvCheckForValidListAndQueue+0x58>)
 800a2e6:	f7fd fc0c 	bl	8007b02 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2ea:	4811      	ldr	r0, [pc, #68]	; (800a330 <prvCheckForValidListAndQueue+0x5c>)
 800a2ec:	f7fd fc09 	bl	8007b02 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2f0:	4b10      	ldr	r3, [pc, #64]	; (800a334 <prvCheckForValidListAndQueue+0x60>)
 800a2f2:	4a0e      	ldr	r2, [pc, #56]	; (800a32c <prvCheckForValidListAndQueue+0x58>)
 800a2f4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2f6:	4b10      	ldr	r3, [pc, #64]	; (800a338 <prvCheckForValidListAndQueue+0x64>)
 800a2f8:	4a0d      	ldr	r2, [pc, #52]	; (800a330 <prvCheckForValidListAndQueue+0x5c>)
 800a2fa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	210c      	movs	r1, #12
 800a300:	200a      	movs	r0, #10
 800a302:	f7fd fd1b 	bl	8007d3c <xQueueGenericCreate>
 800a306:	4603      	mov	r3, r0
 800a308:	4a07      	ldr	r2, [pc, #28]	; (800a328 <prvCheckForValidListAndQueue+0x54>)
 800a30a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <prvCheckForValidListAndQueue+0x54>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d005      	beq.n	800a320 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <prvCheckForValidListAndQueue+0x54>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4908      	ldr	r1, [pc, #32]	; (800a33c <prvCheckForValidListAndQueue+0x68>)
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe fb50 	bl	80089c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a320:	f000 f968 	bl	800a5f4 <vPortExitCritical>
}
 800a324:	bf00      	nop
 800a326:	bd80      	pop	{r7, pc}
 800a328:	2000062c 	.word	0x2000062c
 800a32c:	200005fc 	.word	0x200005fc
 800a330:	20000610 	.word	0x20000610
 800a334:	20000624 	.word	0x20000624
 800a338:	20000628 	.word	0x20000628
 800a33c:	08012440 	.word	0x08012440

0800a340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3b04      	subs	r3, #4
 800a350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3b04      	subs	r3, #4
 800a35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f023 0201 	bic.w	r2, r3, #1
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3b04      	subs	r3, #4
 800a36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a370:	4a0c      	ldr	r2, [pc, #48]	; (800a3a4 <pxPortInitialiseStack+0x64>)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3b14      	subs	r3, #20
 800a37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3b04      	subs	r3, #4
 800a386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f06f 0202 	mvn.w	r2, #2
 800a38e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3b20      	subs	r3, #32
 800a394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a396:	68fb      	ldr	r3, [r7, #12]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	0800a3a9 	.word	0x0800a3a9

0800a3a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3b2:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <prvTaskExitError+0x54>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ba:	d00a      	beq.n	800a3d2 <prvTaskExitError+0x2a>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	60fb      	str	r3, [r7, #12]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <prvTaskExitError+0x28>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	60bb      	str	r3, [r7, #8]
}
 800a3e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3e6:	bf00      	nop
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0fc      	beq.n	800a3e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	2000000c 	.word	0x2000000c

0800a400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <pxCurrentTCBConst2>)
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	f380 8809 	msr	PSP, r0
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f04f 0000 	mov.w	r0, #0
 800a416:	f380 8811 	msr	BASEPRI, r0
 800a41a:	4770      	bx	lr
 800a41c:	f3af 8000 	nop.w

0800a420 <pxCurrentTCBConst2>:
 800a420:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <prvPortStartFirstTask+0x24>)
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	6800      	ldr	r0, [r0, #0]
 800a42e:	f380 8808 	msr	MSP, r0
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8814 	msr	CONTROL, r0
 800a43a:	b662      	cpsie	i
 800a43c:	b661      	cpsie	f
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	df00      	svc	0
 800a448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a44a:	bf00      	nop
 800a44c:	e000ed08 	.word	0xe000ed08

0800a450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a456:	4b46      	ldr	r3, [pc, #280]	; (800a570 <xPortStartScheduler+0x120>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a46      	ldr	r2, [pc, #280]	; (800a574 <xPortStartScheduler+0x124>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d10a      	bne.n	800a476 <xPortStartScheduler+0x26>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a476:	4b3e      	ldr	r3, [pc, #248]	; (800a570 <xPortStartScheduler+0x120>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <xPortStartScheduler+0x128>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10a      	bne.n	800a496 <xPortStartScheduler+0x46>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a496:	4b39      	ldr	r3, [pc, #228]	; (800a57c <xPortStartScheduler+0x12c>)
 800a498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	4b31      	ldr	r3, [pc, #196]	; (800a580 <xPortStartScheduler+0x130>)
 800a4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4be:	4b31      	ldr	r3, [pc, #196]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4c4:	e009      	b.n	800a4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4a2d      	ldr	r2, [pc, #180]	; (800a584 <xPortStartScheduler+0x134>)
 800a4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b80      	cmp	r3, #128	; 0x80
 800a4e4:	d0ef      	beq.n	800a4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <xPortStartScheduler+0x134>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d00a      	beq.n	800a508 <xPortStartScheduler+0xb8>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a508:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <xPortStartScheduler+0x134>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <xPortStartScheduler+0x134>)
 800a510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a512:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <xPortStartScheduler+0x134>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a51a:	4a1a      	ldr	r2, [pc, #104]	; (800a584 <xPortStartScheduler+0x134>)
 800a51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a526:	4b18      	ldr	r3, [pc, #96]	; (800a588 <xPortStartScheduler+0x138>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a17      	ldr	r2, [pc, #92]	; (800a588 <xPortStartScheduler+0x138>)
 800a52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <xPortStartScheduler+0x138>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a14      	ldr	r2, [pc, #80]	; (800a588 <xPortStartScheduler+0x138>)
 800a538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a53e:	f000 f8dd 	bl	800a6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <xPortStartScheduler+0x13c>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a548:	f000 f8fc 	bl	800a744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a54c:	4b10      	ldr	r3, [pc, #64]	; (800a590 <xPortStartScheduler+0x140>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <xPortStartScheduler+0x140>)
 800a552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a558:	f7ff ff66 	bl	800a428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a55c:	f7fe ff08 	bl	8009370 <vTaskSwitchContext>
	prvTaskExitError();
 800a560:	f7ff ff22 	bl	800a3a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	e000ed00 	.word	0xe000ed00
 800a574:	410fc271 	.word	0x410fc271
 800a578:	410fc270 	.word	0x410fc270
 800a57c:	e000e400 	.word	0xe000e400
 800a580:	20000638 	.word	0x20000638
 800a584:	2000063c 	.word	0x2000063c
 800a588:	e000ed20 	.word	0xe000ed20
 800a58c:	2000000c 	.word	0x2000000c
 800a590:	e000ef34 	.word	0xe000ef34

0800a594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	607b      	str	r3, [r7, #4]
}
 800a5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d10f      	bne.n	800a5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <vPortEnterCritical+0x5c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <vPortEnterCritical+0x4a>
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	2000000c 	.word	0x2000000c
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5fa:	4b12      	ldr	r3, [pc, #72]	; (800a644 <vPortExitCritical+0x50>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vPortExitCritical+0x24>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <vPortExitCritical+0x50>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a09      	ldr	r2, [pc, #36]	; (800a644 <vPortExitCritical+0x50>)
 800a620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a622:	4b08      	ldr	r3, [pc, #32]	; (800a644 <vPortExitCritical+0x50>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <vPortExitCritical+0x42>
 800a62a:	2300      	movs	r3, #0
 800a62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f383 8811 	msr	BASEPRI, r3
}
 800a634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	2000000c 	.word	0x2000000c
	...

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f01e 0f10 	tst.w	lr, #16
 800a660:	bf08      	it	eq
 800a662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a674:	f380 8811 	msr	BASEPRI, r0
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f7fe fe76 	bl	8009370 <vTaskSwitchContext>
 800a684:	f04f 0000 	mov.w	r0, #0
 800a688:	f380 8811 	msr	BASEPRI, r0
 800a68c:	bc09      	pop	{r0, r3}
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	6808      	ldr	r0, [r1, #0]
 800a692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a696:	f01e 0f10 	tst.w	lr, #16
 800a69a:	bf08      	it	eq
 800a69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6a0:	f380 8809 	msr	PSP, r0
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	607b      	str	r3, [r7, #4]
}
 800a6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6d2:	f7fe fd95 	bl	8009200 <xTaskIncrementTick>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <SysTick_Handler+0x40>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f383 8811 	msr	BASEPRI, r3
}
 800a6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <vPortSetupTimerInterrupt+0x38>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <vPortSetupTimerInterrupt+0x3c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <vPortSetupTimerInterrupt+0x40>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	099b      	lsrs	r3, r3, #6
 800a718:	4a09      	ldr	r2, [pc, #36]	; (800a740 <vPortSetupTimerInterrupt+0x44>)
 800a71a:	3b01      	subs	r3, #1
 800a71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a720:	2207      	movs	r2, #7
 800a722:	601a      	str	r2, [r3, #0]
}
 800a724:	bf00      	nop
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	e000e010 	.word	0xe000e010
 800a734:	e000e018 	.word	0xe000e018
 800a738:	20000000 	.word	0x20000000
 800a73c:	10624dd3 	.word	0x10624dd3
 800a740:	e000e014 	.word	0xe000e014

0800a744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a754 <vPortEnableVFP+0x10>
 800a748:	6801      	ldr	r1, [r0, #0]
 800a74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a74e:	6001      	str	r1, [r0, #0]
 800a750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a752:	bf00      	nop
 800a754:	e000ed88 	.word	0xe000ed88

0800a758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a75e:	f3ef 8305 	mrs	r3, IPSR
 800a762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b0f      	cmp	r3, #15
 800a768:	d914      	bls.n	800a794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a76a:	4a17      	ldr	r2, [pc, #92]	; (800a7c8 <vPortValidateInterruptPriority+0x70>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a774:	4b15      	ldr	r3, [pc, #84]	; (800a7cc <vPortValidateInterruptPriority+0x74>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	7afa      	ldrb	r2, [r7, #11]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d20a      	bcs.n	800a794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a794:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <vPortValidateInterruptPriority+0x78>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a79c:	4b0d      	ldr	r3, [pc, #52]	; (800a7d4 <vPortValidateInterruptPriority+0x7c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d90a      	bls.n	800a7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	603b      	str	r3, [r7, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <vPortValidateInterruptPriority+0x60>
	}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	e000e3f0 	.word	0xe000e3f0
 800a7cc:	20000638 	.word	0x20000638
 800a7d0:	e000ed0c 	.word	0xe000ed0c
 800a7d4:	2000063c 	.word	0x2000063c

0800a7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	; 0x28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7e4:	f7fe fc40 	bl	8009068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7e8:	4b5b      	ldr	r3, [pc, #364]	; (800a958 <pvPortMalloc+0x180>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7f0:	f000 f920 	bl	800aa34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7f4:	4b59      	ldr	r3, [pc, #356]	; (800a95c <pvPortMalloc+0x184>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8093 	bne.w	800a928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01d      	beq.n	800a844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a808:	2208      	movs	r2, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	2b00      	cmp	r3, #0
 800a818:	d014      	beq.n	800a844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f023 0307 	bic.w	r3, r3, #7
 800a820:	3308      	adds	r3, #8
 800a822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <pvPortMalloc+0x6c>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	617b      	str	r3, [r7, #20]
}
 800a840:	bf00      	nop
 800a842:	e7fe      	b.n	800a842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d06e      	beq.n	800a928 <pvPortMalloc+0x150>
 800a84a:	4b45      	ldr	r3, [pc, #276]	; (800a960 <pvPortMalloc+0x188>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d869      	bhi.n	800a928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a854:	4b43      	ldr	r3, [pc, #268]	; (800a964 <pvPortMalloc+0x18c>)
 800a856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a858:	4b42      	ldr	r3, [pc, #264]	; (800a964 <pvPortMalloc+0x18c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a85e:	e004      	b.n	800a86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d903      	bls.n	800a87c <pvPortMalloc+0xa4>
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1f1      	bne.n	800a860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a87c:	4b36      	ldr	r3, [pc, #216]	; (800a958 <pvPortMalloc+0x180>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a882:	429a      	cmp	r2, r3
 800a884:	d050      	beq.n	800a928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2208      	movs	r2, #8
 800a88c:	4413      	add	r3, r2
 800a88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d91f      	bls.n	800a8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	613b      	str	r3, [r7, #16]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8e2:	69b8      	ldr	r0, [r7, #24]
 800a8e4:	f000 f908 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <pvPortMalloc+0x188>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	4a1b      	ldr	r2, [pc, #108]	; (800a960 <pvPortMalloc+0x188>)
 800a8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8f6:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <pvPortMalloc+0x188>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <pvPortMalloc+0x190>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d203      	bcs.n	800a90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a902:	4b17      	ldr	r3, [pc, #92]	; (800a960 <pvPortMalloc+0x188>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a18      	ldr	r2, [pc, #96]	; (800a968 <pvPortMalloc+0x190>)
 800a908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <pvPortMalloc+0x184>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	431a      	orrs	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a91e:	4b13      	ldr	r3, [pc, #76]	; (800a96c <pvPortMalloc+0x194>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a11      	ldr	r2, [pc, #68]	; (800a96c <pvPortMalloc+0x194>)
 800a926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a928:	f7fe fbac 	bl	8009084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f003 0307 	and.w	r3, r3, #7
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <pvPortMalloc+0x174>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60fb      	str	r3, [r7, #12]
}
 800a948:	bf00      	nop
 800a94a:	e7fe      	b.n	800a94a <pvPortMalloc+0x172>
	return pvReturn;
 800a94c:	69fb      	ldr	r3, [r7, #28]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3728      	adds	r7, #40	; 0x28
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20010648 	.word	0x20010648
 800a95c:	2001065c 	.word	0x2001065c
 800a960:	2001064c 	.word	0x2001064c
 800a964:	20010640 	.word	0x20010640
 800a968:	20010650 	.word	0x20010650
 800a96c:	20010654 	.word	0x20010654

0800a970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d04d      	beq.n	800aa1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a982:	2308      	movs	r3, #8
 800a984:	425b      	negs	r3, r3
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4413      	add	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <vPortFree+0xb8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4013      	ands	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <vPortFree+0x44>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	60fb      	str	r3, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <vPortFree+0x62>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60bb      	str	r3, [r7, #8]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	4b14      	ldr	r3, [pc, #80]	; (800aa28 <vPortFree+0xb8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01e      	beq.n	800aa1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11a      	bne.n	800aa1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <vPortFree+0xb8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9f8:	f7fe fb36 	bl	8009068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <vPortFree+0xbc>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a09      	ldr	r2, [pc, #36]	; (800aa2c <vPortFree+0xbc>)
 800aa08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f000 f874 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <vPortFree+0xc0>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3301      	adds	r3, #1
 800aa16:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <vPortFree+0xc0>)
 800aa18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa1a:	f7fe fb33 	bl	8009084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	2001065c 	.word	0x2001065c
 800aa2c:	2001064c 	.word	0x2001064c
 800aa30:	20010658 	.word	0x20010658

0800aa34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aa3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa40:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <prvHeapInit+0xac>)
 800aa42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00c      	beq.n	800aa68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3307      	adds	r3, #7
 800aa52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0307 	bic.w	r3, r3, #7
 800aa5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <prvHeapInit+0xac>)
 800aa64:	4413      	add	r3, r2
 800aa66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa6c:	4a1d      	ldr	r2, [pc, #116]	; (800aae4 <prvHeapInit+0xb0>)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa72:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <prvHeapInit+0xb0>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa80:	2208      	movs	r2, #8
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <prvHeapInit+0xb4>)
 800aa94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <prvHeapInit+0xb4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <prvHeapInit+0xb4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvHeapInit+0xb4>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <prvHeapInit+0xb8>)
 800aac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <prvHeapInit+0xbc>)
 800aaca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aacc:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <prvHeapInit+0xc0>)
 800aace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20000640 	.word	0x20000640
 800aae4:	20010640 	.word	0x20010640
 800aae8:	20010648 	.word	0x20010648
 800aaec:	20010650 	.word	0x20010650
 800aaf0:	2001064c 	.word	0x2001064c
 800aaf4:	2001065c 	.word	0x2001065c

0800aaf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <prvInsertBlockIntoFreeList+0xac>)
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e002      	b.n	800ab0c <prvInsertBlockIntoFreeList+0x14>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d8f7      	bhi.n	800ab06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	4413      	add	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d108      	bne.n	800ab3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	441a      	add	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d118      	bne.n	800ab80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d00d      	beq.n	800ab76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	441a      	add	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e008      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e003      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d002      	beq.n	800ab96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20010640 	.word	0x20010640
 800aba8:	20010648 	.word	0x20010648

0800abac <reset_source_init>:
/* MAIN variables */
static reset_cause_e g_reset_cause;

/* MAIN functions */
void reset_source_init()
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0
	g_reset_cause = RESET_CAUSE_UNKNOWN;
 800abb0:	4b27      	ldr	r3, [pc, #156]	; (800ac50 <reset_source_init+0xa4>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800abb6:	4b27      	ldr	r3, [pc, #156]	; (800ac54 <reset_source_init+0xa8>)
 800abb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da03      	bge.n	800abc8 <reset_source_init+0x1c>
		g_reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800abc0:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <reset_source_init+0xa4>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e035      	b.n	800ac34 <reset_source_init+0x88>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800abc8:	4b22      	ldr	r3, [pc, #136]	; (800ac54 <reset_source_init+0xa8>)
 800abca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <reset_source_init+0x32>
		g_reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800abd6:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <reset_source_init+0xa4>)
 800abd8:	2202      	movs	r2, #2
 800abda:	701a      	strb	r2, [r3, #0]
 800abdc:	e02a      	b.n	800ac34 <reset_source_init+0x88>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800abde:	4b1d      	ldr	r3, [pc, #116]	; (800ac54 <reset_source_init+0xa8>)
 800abe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <reset_source_init+0x48>
		g_reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800abec:	4b18      	ldr	r3, [pc, #96]	; (800ac50 <reset_source_init+0xa4>)
 800abee:	2203      	movs	r2, #3
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e01f      	b.n	800ac34 <reset_source_init+0x88>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800abf4:	4b17      	ldr	r3, [pc, #92]	; (800ac54 <reset_source_init+0xa8>)
 800abf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <reset_source_init+0x5e>
		/* This reset is induced by calling the ARM CMSIS */
		/* `NVIC_SystemReset()` function! */
		g_reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800ac02:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <reset_source_init+0xa4>)
 800ac04:	2204      	movs	r2, #4
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	e014      	b.n	800ac34 <reset_source_init+0x88>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800ac0a:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <reset_source_init+0xa8>)
 800ac0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <reset_source_init+0x74>
		g_reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800ac18:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <reset_source_init+0xa4>)
 800ac1a:	2205      	movs	r2, #5
 800ac1c:	701a      	strb	r2, [r3, #0]
 800ac1e:	e009      	b.n	800ac34 <reset_source_init+0x88>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800ac20:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <reset_source_init+0xa8>)
 800ac22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d002      	beq.n	800ac34 <reset_source_init+0x88>
		g_reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800ac2e:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <reset_source_init+0xa4>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	701a      	strb	r2, [r3, #0]

	__HAL_RCC_CLEAR_RESET_FLAGS();
 800ac34:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <reset_source_init+0xa8>)
 800ac36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac3a:	4a06      	ldr	r2, [pc, #24]	; (800ac54 <reset_source_init+0xa8>)
 800ac3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	20010660 	.word	0x20010660
 800ac54:	40021000 	.word	0x40021000

0800ac58 <get_reset_cause>:

uint8_t get_reset_cause()
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
	return g_reset_cause;
 800ac5c:	4b03      	ldr	r3, [pc, #12]	; (800ac6c <get_reset_cause+0x14>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20010660 	.word	0x20010660

0800ac70 <main_c_init>:

void main_c_init()
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
	retarget_init();
 800ac74:	f004 fa84 	bl	800f180 <retarget_init>

	LOG("====\r\n");
 800ac78:	f7f7 fac6 	bl	8002208 <HAL_GetTick>
 800ac7c:	4601      	mov	r1, r0
 800ac7e:	2342      	movs	r3, #66	; 0x42
 800ac80:	4a18      	ldr	r2, [pc, #96]	; (800ace4 <main_c_init+0x74>)
 800ac82:	4819      	ldr	r0, [pc, #100]	; (800ace8 <main_c_init+0x78>)
 800ac84:	f005 f932 	bl	800feec <iprintf>
	LOG("MotorController firmware!\r\n");
 800ac88:	f7f7 fabe 	bl	8002208 <HAL_GetTick>
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	2343      	movs	r3, #67	; 0x43
 800ac90:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <main_c_init+0x74>)
 800ac92:	4816      	ldr	r0, [pc, #88]	; (800acec <main_c_init+0x7c>)
 800ac94:	f005 f92a 	bl	800feec <iprintf>
	LOG("====\r\n");
 800ac98:	f7f7 fab6 	bl	8002208 <HAL_GetTick>
 800ac9c:	4601      	mov	r1, r0
 800ac9e:	2344      	movs	r3, #68	; 0x44
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <main_c_init+0x74>)
 800aca2:	4811      	ldr	r0, [pc, #68]	; (800ace8 <main_c_init+0x78>)
 800aca4:	f005 f922 	bl	800feec <iprintf>

	if ((g_reset_cause == RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET) || (g_reset_cause == RESET_CAUSE_SOFTWARE_RESET)) {
 800aca8:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <main_c_init+0x80>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b03      	cmp	r3, #3
 800acae:	d003      	beq.n	800acb8 <main_c_init+0x48>
 800acb0:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <main_c_init+0x80>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d107      	bne.n	800acc8 <main_c_init+0x58>
		LOG("system is reset from IWDG or s/w reset!\r\n");
 800acb8:	f7f7 faa6 	bl	8002208 <HAL_GetTick>
 800acbc:	4601      	mov	r1, r0
 800acbe:	2347      	movs	r3, #71	; 0x47
 800acc0:	4a08      	ldr	r2, [pc, #32]	; (800ace4 <main_c_init+0x74>)
 800acc2:	480c      	ldr	r0, [pc, #48]	; (800acf4 <main_c_init+0x84>)
 800acc4:	f005 f912 	bl	800feec <iprintf>
	}

	if (g_reset_cause == RESET_CAUSE_EXTERNAL_RESET_PIN_RESET)
 800acc8:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <main_c_init+0x80>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b05      	cmp	r3, #5
 800acce:	d107      	bne.n	800ace0 <main_c_init+0x70>
		LOG("do you reset this chip?\r\n");
 800acd0:	f7f7 fa9a 	bl	8002208 <HAL_GetTick>
 800acd4:	4601      	mov	r1, r0
 800acd6:	234b      	movs	r3, #75	; 0x4b
 800acd8:	4a02      	ldr	r2, [pc, #8]	; (800ace4 <main_c_init+0x74>)
 800acda:	4807      	ldr	r0, [pc, #28]	; (800acf8 <main_c_init+0x88>)
 800acdc:	f005 f906 	bl	800feec <iprintf>

}
 800ace0:	bf00      	nop
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	08012448 	.word	0x08012448
 800ace8:	08012454 	.word	0x08012454
 800acec:	08012468 	.word	0x08012468
 800acf0:	20010660 	.word	0x20010660
 800acf4:	08012490 	.word	0x08012490
 800acf8:	080124c8 	.word	0x080124c8

0800acfc <HAL_FDCAN_RxFifo0Callback>:
 * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
 *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
 * @retval None
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b0b4      	sub	sp, #208	; 0xd0
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[64];
	BUS_Rx_Buffer_t bus_buffer;
	CAN_Data_t ingenia_buffer;

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d068      	beq.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
		if (hfdcan->Instance == hfdcan2.Instance) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	4b35      	ldr	r3, [pc, #212]	; (800adec <HAL_FDCAN_RxFifo0Callback+0xf0>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d128      	bne.n	800ad6e <HAL_FDCAN_RxFifo0Callback+0x72>
//			Ingenia_IRQHandler(hfdcan);
			/* Retrieve Rx messages from RX FIFO0 */
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800ad1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ad20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800ad24:	2140      	movs	r1, #64	; 0x40
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7f7 fe10 	bl	800294c <HAL_FDCAN_GetRxMessage>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d157      	bne.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
				if (RxHeader.IdType == FDCAN_STANDARD_ID) {
 800ad32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d153      	bne.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
					ingenia_buffer.id = RxHeader.Identifier;
 800ad3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad3e:	60fb      	str	r3, [r7, #12]
					ingenia_buffer.len = FDCAN_Convert_Datalength(RxHeader.DataLength);
 800ad40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 fd63 	bl	800c810 <FDCAN_Convert_Datalength>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	743b      	strb	r3, [r7, #16]
					memcpy(ingenia_buffer.rxData, RxData, ingenia_buffer.len);
 800ad4e:	7c3b      	ldrb	r3, [r7, #16]
 800ad50:	461a      	mov	r2, r3
 800ad52:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800ad56:	f107 030c 	add.w	r3, r7, #12
 800ad5a:	3305      	adds	r3, #5
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f004 fc45 	bl	800f5ec <memcpy>

					Ingenia_rx_callback(&ingenia_buffer);
 800ad62:	f107 030c 	add.w	r3, r7, #12
 800ad66:	4618      	mov	r0, r3
 800ad68:	f002 fed2 	bl	800db10 <Ingenia_rx_callback>
				}
			}
		}
	}

}
 800ad6c:	e039      	b.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
		else if (hfdcan->Instance == hfdcan1.Instance) {
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	4b1f      	ldr	r3, [pc, #124]	; (800adf0 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d133      	bne.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800ad7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ad7e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800ad82:	2140      	movs	r1, #64	; 0x40
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7f7 fde1 	bl	800294c <HAL_FDCAN_GetRxMessage>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d128      	bne.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
				if (RxHeader.IdType == FDCAN_STANDARD_ID) {
 800ad90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d124      	bne.n	800ade2 <HAL_FDCAN_RxFifo0Callback+0xe6>
					bus_buffer.lastTimestamp = HAL_GetTick();
 800ad98:	f7f7 fa36 	bl	8002208 <HAL_GetTick>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	667b      	str	r3, [r7, #100]	; 0x64
					bus_buffer.id = RxHeader.Identifier;
 800ada0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ada4:	61fb      	str	r3, [r7, #28]
					bus_buffer.len = FDCAN_Convert_Datalength(RxHeader.DataLength);
 800ada6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adaa:	4618      	mov	r0, r3
 800adac:	f001 fd30 	bl	800c810 <FDCAN_Convert_Datalength>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 3020 	strb.w	r3, [r7, #32]
					memcpy(bus_buffer.data, RxData, bus_buffer.len);
 800adb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adba:	461a      	mov	r2, r3
 800adbc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800adc0:	f107 031c 	add.w	r3, r7, #28
 800adc4:	3305      	adds	r3, #5
 800adc6:	4618      	mov	r0, r3
 800adc8:	f004 fc10 	bl	800f5ec <memcpy>
					bus_buffer.counter++;
 800adcc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800add0:	3301      	adds	r3, #1
 800add2:	b2db      	uxtb	r3, r3
 800add4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					bus_rx_callback(&bus_buffer);
 800add8:	f107 031c 	add.w	r3, r7, #28
 800addc:	4618      	mov	r0, r3
 800adde:	f001 fd27 	bl	800c830 <bus_rx_callback>
}
 800ade2:	bf00      	nop
 800ade4:	37d0      	adds	r7, #208	; 0xd0
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	2000029c 	.word	0x2000029c
 800adf0:	20000238 	.word	0x20000238

0800adf4 <HAL_FDCAN_RxFifo1Callback>:
 * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
 *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
 * @retval None
 */
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
	UNUSED(RxFifo1ITs);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
	 */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
	...

0800ae0c <HAL_FDCAN_ErrorStatusCallback>:
 * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
 *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
 * @retval None
 */
void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	/* Prevent unused argument(s) compilation warning */
	if (hfdcan->Instance == hfdcan1.Instance) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b0e      	ldr	r3, [pc, #56]	; (800ae54 <HAL_FDCAN_ErrorStatusCallback+0x48>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d10c      	bne.n	800ae3c <HAL_FDCAN_ErrorStatusCallback+0x30>
		MX_FDCAN1_Init();
 800ae22:	f7f6 fa8d 	bl	8001340 <MX_FDCAN1_Init>
		bus_init();
 800ae26:	f001 fc4b 	bl	800c6c0 <bus_init>
		LOG("\r\n===BUS ERROR!===\r\n\r\n");
 800ae2a:	f7f7 f9ed 	bl	8002208 <HAL_GetTick>
 800ae2e:	4601      	mov	r1, r0
 800ae30:	239f      	movs	r3, #159	; 0x9f
 800ae32:	4a09      	ldr	r2, [pc, #36]	; (800ae58 <HAL_FDCAN_ErrorStatusCallback+0x4c>)
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <HAL_FDCAN_ErrorStatusCallback+0x50>)
 800ae36:	f005 f859 	bl	800feec <iprintf>
		mtr_error_callback();

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
	 */
}
 800ae3a:	e007      	b.n	800ae4c <HAL_FDCAN_ErrorStatusCallback+0x40>
	else if (hfdcan->Instance == hfdcan2.Instance)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <HAL_FDCAN_ErrorStatusCallback+0x54>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d101      	bne.n	800ae4c <HAL_FDCAN_ErrorStatusCallback+0x40>
		mtr_error_callback();
 800ae48:	f002 fc82 	bl	800d750 <mtr_error_callback>
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20000238 	.word	0x20000238
 800ae58:	08012448 	.word	0x08012448
 800ae5c:	080124f0 	.word	0x080124f0
 800ae60:	2000029c 	.word	0x2000029c

0800ae64 <t_motor_homing>:

static const uint32_t HOMING_UPDATE_TIMEOUT = 25;
static const uint32_t HOMING_HYST_POS = 5;

void t_motor_homing(void const *argument)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b094      	sub	sp, #80	; 0x50
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor_homing */
	uint32_t _homing_timer = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	LOG("t_homing created!\r\n");

	*(uint8_t*) &motor.mode_state = 0;
 800ae70:	4bbd      	ldr	r3, [pc, #756]	; (800b168 <t_motor_homing+0x304>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
	motor.mode_state.movementMode = MOVE_MODE_HOMING;
 800ae76:	4abd      	ldr	r2, [pc, #756]	; (800b16c <t_motor_homing+0x308>)
 800ae78:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800ae7c:	2105      	movs	r1, #5
 800ae7e:	f361 0303 	bfi	r3, r1, #0, #4
 800ae82:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

	motor.pan_command.power_enable = motor.tilt_command.power_enable = 1;
 800ae86:	4bb9      	ldr	r3, [pc, #740]	; (800b16c <t_motor_homing+0x308>)
 800ae88:	2201      	movs	r2, #1
 800ae8a:	761a      	strb	r2, [r3, #24]
 800ae8c:	4bb7      	ldr	r3, [pc, #732]	; (800b16c <t_motor_homing+0x308>)
 800ae8e:	7e1a      	ldrb	r2, [r3, #24]
 800ae90:	4bb6      	ldr	r3, [pc, #728]	; (800b16c <t_motor_homing+0x308>)
 800ae92:	711a      	strb	r2, [r3, #4]
	/* update motor state */
	hal_motor_update_motor_state(&motor, 1);
 800ae94:	2101      	movs	r1, #1
 800ae96:	48b5      	ldr	r0, [pc, #724]	; (800b16c <t_motor_homing+0x308>)
 800ae98:	f002 fc0e 	bl	800d6b8 <hal_motor_update_motor_state>
	for ( ;; ) {
		int32_t _p, _t;
		float _fp, _ft;

		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Motor_Ext_id), 5);
 800ae9c:	2002      	movs	r0, #2
 800ae9e:	f7f6 f995 	bl	80011cc <mtr_get_mail>
 800aea2:	4601      	mov	r1, r0
 800aea4:	f107 030c 	add.w	r3, r7, #12
 800aea8:	2205      	movs	r2, #5
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fc fda0 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	f040 811f 	bne.w	800b0f6 <t_motor_homing+0x292>
			/* create buffer pointer to hold queue value */
			MAIL_Motor_Ext_t *pRMail;
			pRMail = event.value.p;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c

			switch (pRMail->sender_id)
 800aebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	f000 8109 	beq.w	800b0d8 <t_motor_homing+0x274>
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	f300 8108 	bgt.w	800b0dc <t_motor_homing+0x278>
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <t_motor_homing+0x72>
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d04b      	beq.n	800af6c <t_motor_homing+0x108>
				}
				break;
			case Motor_Ext_Sender_Balistic_id:
				break;
			default:
				break;
 800aed4:	e102      	b.n	800b0dc <t_motor_homing+0x278>
				if (pRMail->param.mode.ready_to_be_terminated == 1) {
 800aed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed8:	791b      	ldrb	r3, [r3, #4]
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 80fd 	beq.w	800b0e0 <t_motor_homing+0x27c>
					osMutexWait(mtr_get_mutex(Mutex_motor_ext_id), osWaitForever);
 800aee6:	2002      	movs	r0, #2
 800aee8:	f7f6 f9b8 	bl	800125c <mtr_get_mutex>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f04f 31ff 	mov.w	r1, #4294967295
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fc fa86 	bl	8007404 <osMutexWait>
					osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800aef8:	2002      	movs	r0, #2
 800aefa:	f7f6 f967 	bl	80011cc <mtr_get_mail>
 800aefe:	4603      	mov	r3, r0
 800af00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af02:	4618      	mov	r0, r3
 800af04:	f7fc fde8 	bl	8007ad8 <osMailFree>
					hal_motor_set_pan_power(0);
 800af08:	2000      	movs	r0, #0
 800af0a:	f002 f9df 	bl	800d2cc <hal_motor_set_pan_power>
					motor.pan_state.power = 0;
 800af0e:	4b97      	ldr	r3, [pc, #604]	; (800b16c <t_motor_homing+0x308>)
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					hal_motor_set_tilt_power(0);
 800af16:	2000      	movs	r0, #0
 800af18:	f002 fa0e 	bl	800d338 <hal_motor_set_tilt_power>
					motor.tilt_state.power = 0;
 800af1c:	4b93      	ldr	r3, [pc, #588]	; (800b16c <t_motor_homing+0x308>)
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					ext_state = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800af24:	2001      	movs	r0, #1
 800af26:	f7f6 f951 	bl	80011cc <mtr_get_mail>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fc fd0a 	bl	8007948 <osMailAlloc>
 800af34:	61f8      	str	r0, [r7, #28]
					ext_state->sender_id = Motor_Sender_Ext_id;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2201      	movs	r2, #1
 800af3a:	701a      	strb	r2, [r3, #0]
					ext_state->param.ext.ready_to_be_terminated = 1;
 800af3c:	69fa      	ldr	r2, [r7, #28]
 800af3e:	7913      	ldrb	r3, [r2, #4]
 800af40:	f043 0310 	orr.w	r3, r3, #16
 800af44:	7113      	strb	r3, [r2, #4]
					osMailPut(mtr_get_mail(Mail_Motor_id), ext_state);
 800af46:	2001      	movs	r0, #1
 800af48:	f7f6 f940 	bl	80011cc <mtr_get_mail>
 800af4c:	4603      	mov	r3, r0
 800af4e:	69f9      	ldr	r1, [r7, #28]
 800af50:	4618      	mov	r0, r3
 800af52:	f7fc fd0f 	bl	8007974 <osMailPut>
					osMutexRelease(mtr_get_mutex(Mutex_motor_ext_id));
 800af56:	2002      	movs	r0, #2
 800af58:	f7f6 f980 	bl	800125c <mtr_get_mutex>
 800af5c:	4603      	mov	r3, r0
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fc fa9e 	bl	80074a0 <osMutexRelease>
					osThreadTerminate(NULL);
 800af64:	2000      	movs	r0, #0
 800af66:	f7fc f970 	bl	800724a <osThreadTerminate>
					break;
 800af6a:	e0bc      	b.n	800b0e6 <t_motor_homing+0x282>
				if (motor.mode_state.moveModeStart == 0) {
 800af6c:	4b7f      	ldr	r3, [pc, #508]	; (800b16c <t_motor_homing+0x308>)
 800af6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af72:	f003 0310 	and.w	r3, r3, #16
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f040 80b3 	bne.w	800b0e4 <t_motor_homing+0x280>
					_p = motor.pan_state.pos;
 800af7e:	4b7b      	ldr	r3, [pc, #492]	; (800b16c <t_motor_homing+0x308>)
 800af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af82:	63bb      	str	r3, [r7, #56]	; 0x38
					_t = motor.tilt_state.pos;
 800af84:	4b79      	ldr	r3, [pc, #484]	; (800b16c <t_motor_homing+0x308>)
 800af86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
					_fp = (float) pRMail->param.value.pan / 1000;
 800af8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af96:	eddf 6a76 	vldr	s13, [pc, #472]	; 800b170 <t_motor_homing+0x30c>
 800af9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
					_ft = (float) pRMail->param.value.tilt / 1000;
 800afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800afae:	eddf 6a70 	vldr	s13, [pc, #448]	; 800b170 <t_motor_homing+0x30c>
 800afb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
					int32_t _rp = _p % RWS_MOTOR_PAN_FULL_REV_IN_C;
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	4a6d      	ldr	r2, [pc, #436]	; (800b174 <t_motor_homing+0x310>)
 800afbe:	fb82 1203 	smull	r1, r2, r2, r3
 800afc2:	13d1      	asrs	r1, r2, #15
 800afc4:	17da      	asrs	r2, r3, #31
 800afc6:	1a8a      	subs	r2, r1, r2
 800afc8:	496b      	ldr	r1, [pc, #428]	; (800b178 <t_motor_homing+0x314>)
 800afca:	fb01 f202 	mul.w	r2, r1, r2
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	62bb      	str	r3, [r7, #40]	; 0x28
					float c_az = RWS_MOTOR_PAN_C_TO_DEG(_rp);
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afdc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b17c <t_motor_homing+0x318>
 800afe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afe4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
					if (c_az < 0)
 800afe8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800afec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff4:	d507      	bpl.n	800b006 <t_motor_homing+0x1a2>
						c_az += 360.f;
 800aff6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800affa:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800b180 <t_motor_homing+0x31c>
 800affe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b002:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
					float d_az = 0.0f;
 800b006:	f04f 0300 	mov.w	r3, #0
 800b00a:	647b      	str	r3, [r7, #68]	; 0x44
					if (_fp >= c_az)
 800b00c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b010:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01c:	db08      	blt.n	800b030 <t_motor_homing+0x1cc>
						d_az = _fp - c_az;
 800b01e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b022:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b02a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800b02e:	e00b      	b.n	800b048 <t_motor_homing+0x1e4>
						d_az = _fp + 360.0f - c_az;
 800b030:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b034:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800b180 <t_motor_homing+0x31c>
 800b038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b03c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b040:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b044:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					if (d_az > 180.0f)
 800b048:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b04c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b184 <t_motor_homing+0x320>
 800b050:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b058:	dd07      	ble.n	800b06a <t_motor_homing+0x206>
						d_az -= 360.0f;
 800b05a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b05e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b180 <t_motor_homing+0x31c>
 800b062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b066:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					motor.pan_command.pos_hom_in_c = _p + RWS_MOTOR_PAN_DEG_TO_C(d_az);
 800b06a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b06e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b188 <t_motor_homing+0x324>
 800b072:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b07a:	ee17 2a90 	vmov	r2, s15
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	4413      	add	r3, r2
 800b082:	4a3a      	ldr	r2, [pc, #232]	; (800b16c <t_motor_homing+0x308>)
 800b084:	6153      	str	r3, [r2, #20]
					float c_el = RWS_MOTOR_TILT_C_TO_DEG(_t);
 800b086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b088:	ee07 3a90 	vmov	s15, r3
 800b08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b090:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800b18c <t_motor_homing+0x328>
 800b094:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
					float d_el = _ft - c_el;
 800b09c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b0a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0a8:	edc7 7a08 	vstr	s15, [r7, #32]
					motor.tilt_command.pos_hom_in_c = _t + RWS_MOTOR_TILT_DEG_TO_C(d_el);
 800b0ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800b0b0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b190 <t_motor_homing+0x32c>
 800b0b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0bc:	ee17 2a90 	vmov	r2, s15
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c2:	4413      	add	r3, r2
 800b0c4:	4a29      	ldr	r2, [pc, #164]	; (800b16c <t_motor_homing+0x308>)
 800b0c6:	6293      	str	r3, [r2, #40]	; 0x28
					motor.mode_state.moveModeStart = 1;
 800b0c8:	4a28      	ldr	r2, [pc, #160]	; (800b16c <t_motor_homing+0x308>)
 800b0ca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b0ce:	f043 0310 	orr.w	r3, r3, #16
 800b0d2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				break;
 800b0d6:	e005      	b.n	800b0e4 <t_motor_homing+0x280>
				break;
 800b0d8:	bf00      	nop
 800b0da:	e004      	b.n	800b0e6 <t_motor_homing+0x282>
				break;
 800b0dc:	bf00      	nop
 800b0de:	e002      	b.n	800b0e6 <t_motor_homing+0x282>
				break;
 800b0e0:	bf00      	nop
 800b0e2:	e000      	b.n	800b0e6 <t_motor_homing+0x282>
				break;
 800b0e4:	bf00      	nop
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800b0e6:	2002      	movs	r0, #2
 800b0e8:	f7f6 f870 	bl	80011cc <mtr_get_mail>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fc fcf1 	bl	8007ad8 <osMailFree>
		}

		if (HAL_GetTick() >= _homing_timer) {
 800b0f6:	f7f7 f887 	bl	8002208 <HAL_GetTick>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fe:	4293      	cmp	r3, r2
 800b100:	f200 8099 	bhi.w	800b236 <t_motor_homing+0x3d2>
			_homing_timer = HAL_GetTick() + HOMING_UPDATE_TIMEOUT;
 800b104:	f7f7 f880 	bl	8002208 <HAL_GetTick>
 800b108:	4603      	mov	r3, r0
 800b10a:	2219      	movs	r2, #25
 800b10c:	4413      	add	r3, r2
 800b10e:	64fb      	str	r3, [r7, #76]	; 0x4c

			/* update motor state */
			hal_motor_update_motor_state(&motor, 0);
 800b110:	2100      	movs	r1, #0
 800b112:	4816      	ldr	r0, [pc, #88]	; (800b16c <t_motor_homing+0x308>)
 800b114:	f002 fad0 	bl	800d6b8 <hal_motor_update_motor_state>
			/* check if ended */
			uint8_t _mtr_ended = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			int32_t _dif_pos = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	61bb      	str	r3, [r7, #24]
			if (is_motor_az_enable(motor.enable)) {
 800b122:	4b12      	ldr	r3, [pc, #72]	; (800b16c <t_motor_homing+0x308>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d032      	beq.n	800b194 <t_motor_homing+0x330>
				_dif_pos = motor.pan_command.pos_hom_in_c - motor.pan_state.pos;
 800b12e:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <t_motor_homing+0x308>)
 800b130:	695a      	ldr	r2, [r3, #20]
 800b132:	4b0e      	ldr	r3, [pc, #56]	; (800b16c <t_motor_homing+0x308>)
 800b134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	61bb      	str	r3, [r7, #24]
				if (labs(_dif_pos) <= HOMING_HYST_POS) {
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfb8      	it	lt
 800b140:	425b      	neglt	r3, r3
 800b142:	461a      	mov	r2, r3
 800b144:	2305      	movs	r3, #5
 800b146:	429a      	cmp	r2, r3
 800b148:	d809      	bhi.n	800b15e <t_motor_homing+0x2fa>
					_mtr_ended |= MTR_AZ_ENABLE;
 800b14a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b14e:	f043 0301 	orr.w	r3, r3, #1
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					motor.pan_command.power_enable = 0;
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <t_motor_homing+0x308>)
 800b158:	2200      	movs	r2, #0
 800b15a:	711a      	strb	r2, [r3, #4]
 800b15c:	e020      	b.n	800b1a0 <t_motor_homing+0x33c>
				}
				else
					motor.tilt_command.power_enable = 1;
 800b15e:	4b03      	ldr	r3, [pc, #12]	; (800b16c <t_motor_homing+0x308>)
 800b160:	2201      	movs	r2, #1
 800b162:	761a      	strb	r2, [r3, #24]
 800b164:	e01c      	b.n	800b1a0 <t_motor_homing+0x33c>
 800b166:	bf00      	nop
 800b168:	20010690 	.word	0x20010690
 800b16c:	20010664 	.word	0x20010664
 800b170:	447a0000 	.word	0x447a0000
 800b174:	1414a1d3 	.word	0x1414a1d3
 800b178:	00065fd3 	.word	0x00065fd3
 800b17c:	3a61e81c 	.word	0x3a61e81c
 800b180:	43b40000 	.word	0x43b40000
 800b184:	43340000 	.word	0x43340000
 800b188:	44910d11 	.word	0x44910d11
 800b18c:	3a09b0bb 	.word	0x3a09b0bb
 800b190:	44edfbb6 	.word	0x44edfbb6
			}
			else
				_mtr_ended |= MTR_AZ_ENABLE;
 800b194:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b198:	f043 0301 	orr.w	r3, r3, #1
 800b19c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			if (is_motor_el_enable(motor.enable)) {
 800b1a0:	4b2a      	ldr	r3, [pc, #168]	; (800b24c <t_motor_homing+0x3e8>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f003 0302 	and.w	r3, r3, #2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01b      	beq.n	800b1e4 <t_motor_homing+0x380>
				_dif_pos = motor.tilt_command.pos_hom_in_c - motor.tilt_state.pos;
 800b1ac:	4b27      	ldr	r3, [pc, #156]	; (800b24c <t_motor_homing+0x3e8>)
 800b1ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1b0:	4b26      	ldr	r3, [pc, #152]	; (800b24c <t_motor_homing+0x3e8>)
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	61bb      	str	r3, [r7, #24]
				if (labs(_dif_pos) <= HOMING_HYST_POS) {
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfb8      	it	lt
 800b1be:	425b      	neglt	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	2305      	movs	r3, #5
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d809      	bhi.n	800b1dc <t_motor_homing+0x378>
					_mtr_ended |= MTR_EL_ENABLE;
 800b1c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1cc:	f043 0302 	orr.w	r3, r3, #2
 800b1d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					motor.tilt_command.power_enable = 0;
 800b1d4:	4b1d      	ldr	r3, [pc, #116]	; (800b24c <t_motor_homing+0x3e8>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	761a      	strb	r2, [r3, #24]
 800b1da:	e009      	b.n	800b1f0 <t_motor_homing+0x38c>
				}
				else
					motor.tilt_command.power_enable = 1;
 800b1dc:	4b1b      	ldr	r3, [pc, #108]	; (800b24c <t_motor_homing+0x3e8>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	761a      	strb	r2, [r3, #24]
 800b1e2:	e005      	b.n	800b1f0 <t_motor_homing+0x38c>
			}
			else
				_mtr_ended |= MTR_EL_ENABLE;
 800b1e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1e8:	f043 0302 	orr.w	r3, r3, #2
 800b1ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			if (_mtr_ended == (MTR_AZ_ENABLE | MTR_EL_ENABLE))
 800b1f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1f4:	2b03      	cmp	r3, #3
 800b1f6:	d106      	bne.n	800b206 <t_motor_homing+0x3a2>
				motor.mode_state.moveModeEnd = 1;
 800b1f8:	4a14      	ldr	r2, [pc, #80]	; (800b24c <t_motor_homing+0x3e8>)
 800b1fa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b1fe:	f043 0320 	orr.w	r3, r3, #32
 800b202:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

			/* start moving */
			if (motor.mode_state.moveModeStart == 1 && motor.mode_state.moveModeEnd == 0)
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <t_motor_homing+0x3e8>)
 800b208:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00f      	beq.n	800b236 <t_motor_homing+0x3d2>
 800b216:	4b0d      	ldr	r3, [pc, #52]	; (800b24c <t_motor_homing+0x3e8>)
 800b218:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b21c:	f003 0320 	and.w	r3, r3, #32
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d107      	bne.n	800b236 <t_motor_homing+0x3d2>
				hal_motor_set_position(motor.pan_command.pos_hom_in_c, motor.tilt_command.pos_hom_in_c);
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <t_motor_homing+0x3e8>)
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	4a08      	ldr	r2, [pc, #32]	; (800b24c <t_motor_homing+0x3e8>)
 800b22c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f002 f8b9 	bl	800d3a8 <hal_motor_set_position>

		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_Ext_id, 0);
 800b236:	2000      	movs	r0, #0
 800b238:	f7f5 ffb4 	bl	80011a4 <opt_get_queue>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2200      	movs	r2, #0
 800b240:	2108      	movs	r1, #8
 800b242:	4618      	mov	r0, r3
 800b244:	f7fc fa74 	bl	8007730 <osMessagePut>
	for ( ;; ) {
 800b248:	e628      	b.n	800ae9c <t_motor_homing+0x38>
 800b24a:	bf00      	nop
 800b24c:	20010664 	.word	0x20010664

0800b250 <t_motor_manual>:
#endif	//if DEBUG_MOTOR_MANUAL==1

static const uint32_t MANUAL_UPDATE_TIMEOUT = 25;

void t_motor_manual(void const *argument)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor_manual */
	uint32_t _mtr_update_timer = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t _cmd_recv_timestamp = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t _debug_send_timer = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t _debug_motor_command_counter = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	857b      	strh	r3, [r7, #42]	; 0x2a
#if RTOS_USE_STACK_HIGH_WATER==1
	uint32_t _stack_highwater_timer = 0;
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

	*(uint8_t*) &motor.mode_state = 0;
 800b268:	4b82      	ldr	r3, [pc, #520]	; (800b474 <t_motor_manual+0x224>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	701a      	strb	r2, [r3, #0]
	motor.mode_state.movementMode = MOVE_MODE_MAN;
 800b26e:	4a82      	ldr	r2, [pc, #520]	; (800b478 <t_motor_manual+0x228>)
 800b270:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b274:	f36f 0303 	bfc	r3, #0, #4
 800b278:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

	LOG("t_manual created\r\n");

	/* Infinite loop */
	for ( ;; ) {
		int32_t _p = 0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t _t = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	623b      	str	r3, [r7, #32]

		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Motor_Ext_id), 5);
 800b284:	2002      	movs	r0, #2
 800b286:	f7f5 ffa1 	bl	80011cc <mtr_get_mail>
 800b28a:	4601      	mov	r1, r0
 800b28c:	f107 030c 	add.w	r3, r7, #12
 800b290:	2205      	movs	r2, #5
 800b292:	4618      	mov	r0, r3
 800b294:	f7fc fbac 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	f040 8095 	bne.w	800b3ca <t_motor_manual+0x17a>
			/* create buffer pointer to hold queue value */
			MAIL_Motor_Ext_t *pRMail;
			MAIL_Motor_t *ext_state;
			pRMail = event.value.p;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	61fb      	str	r3, [r7, #28]

			switch (pRMail->sender_id)
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <t_motor_manual+0x62>
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d05a      	beq.n	800b366 <t_motor_manual+0x116>

				LOG("cmd=%ld,%ld\r\n", motor.pan_command.spd_man_in_c, motor.tilt_command.spd_man_in_c);
				_cmd_recv_timestamp = HAL_GetTick();
				break;
			default:
				break;
 800b2b0:	e083      	b.n	800b3ba <t_motor_manual+0x16a>
				motor.pan_command.power_enable = motor.tilt_command.power_enable = pRMail->param.mode.motor_enable;
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	791b      	ldrb	r3, [r3, #4]
 800b2b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4b6e      	ldr	r3, [pc, #440]	; (800b478 <t_motor_manual+0x228>)
 800b2c0:	761a      	strb	r2, [r3, #24]
 800b2c2:	4b6d      	ldr	r3, [pc, #436]	; (800b478 <t_motor_manual+0x228>)
 800b2c4:	7e1a      	ldrb	r2, [r3, #24]
 800b2c6:	4b6c      	ldr	r3, [pc, #432]	; (800b478 <t_motor_manual+0x228>)
 800b2c8:	711a      	strb	r2, [r3, #4]
				if (pRMail->param.mode.ready_to_be_terminated == 1) {
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	791b      	ldrb	r3, [r3, #4]
 800b2ce:	f003 0304 	and.w	r3, r3, #4
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d042      	beq.n	800b35e <t_motor_manual+0x10e>
					osMutexWait(mtr_get_mutex(Mutex_motor_ext_id), osWaitForever);
 800b2d8:	2002      	movs	r0, #2
 800b2da:	f7f5 ffbf 	bl	800125c <mtr_get_mutex>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f04f 31ff 	mov.w	r1, #4294967295
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fc f88d 	bl	8007404 <osMutexWait>
					osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800b2ea:	2002      	movs	r0, #2
 800b2ec:	f7f5 ff6e 	bl	80011cc <mtr_get_mail>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	69f9      	ldr	r1, [r7, #28]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fc fbef 	bl	8007ad8 <osMailFree>
					hal_motor_set_pan_power(0);
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	f001 ffe6 	bl	800d2cc <hal_motor_set_pan_power>
					motor.pan_state.power = 0;
 800b300:	4b5d      	ldr	r3, [pc, #372]	; (800b478 <t_motor_manual+0x228>)
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					hal_motor_set_tilt_power(0);
 800b308:	2000      	movs	r0, #0
 800b30a:	f002 f815 	bl	800d338 <hal_motor_set_tilt_power>
					motor.tilt_state.power = 0;
 800b30e:	4b5a      	ldr	r3, [pc, #360]	; (800b478 <t_motor_manual+0x228>)
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					ext_state = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800b316:	2001      	movs	r0, #1
 800b318:	f7f5 ff58 	bl	80011cc <mtr_get_mail>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2100      	movs	r1, #0
 800b320:	4618      	mov	r0, r3
 800b322:	f7fc fb11 	bl	8007948 <osMailAlloc>
 800b326:	61b8      	str	r0, [r7, #24]
					ext_state->sender_id = Motor_Sender_Ext_id;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2201      	movs	r2, #1
 800b32c:	701a      	strb	r2, [r3, #0]
					ext_state->param.ext.ready_to_be_terminated = 1;
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	7913      	ldrb	r3, [r2, #4]
 800b332:	f043 0310 	orr.w	r3, r3, #16
 800b336:	7113      	strb	r3, [r2, #4]
					osMailPut(mtr_get_mail(Mail_Motor_id), ext_state);
 800b338:	2001      	movs	r0, #1
 800b33a:	f7f5 ff47 	bl	80011cc <mtr_get_mail>
 800b33e:	4603      	mov	r3, r0
 800b340:	69b9      	ldr	r1, [r7, #24]
 800b342:	4618      	mov	r0, r3
 800b344:	f7fc fb16 	bl	8007974 <osMailPut>
					osMutexRelease(mtr_get_mutex(Mutex_motor_ext_id));
 800b348:	2002      	movs	r0, #2
 800b34a:	f7f5 ff87 	bl	800125c <mtr_get_mutex>
 800b34e:	4603      	mov	r3, r0
 800b350:	4618      	mov	r0, r3
 800b352:	f7fc f8a5 	bl	80074a0 <osMutexRelease>
					osThreadTerminate(NULL);
 800b356:	2000      	movs	r0, #0
 800b358:	f7fb ff77 	bl	800724a <osThreadTerminate>
					break;
 800b35c:	e02d      	b.n	800b3ba <t_motor_manual+0x16a>
				_cmd_recv_timestamp = HAL_GetTick();
 800b35e:	f7f6 ff53 	bl	8002208 <HAL_GetTick>
 800b362:	6338      	str	r0, [r7, #48]	; 0x30
				break;
 800b364:	e029      	b.n	800b3ba <t_motor_manual+0x16a>
				_p = pRMail->param.value.pan;
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
				_t = pRMail->param.value.tilt;
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	623b      	str	r3, [r7, #32]
				if (labs(_p) < 100)
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b374:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800b378:	db04      	blt.n	800b384 <t_motor_manual+0x134>
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	2b63      	cmp	r3, #99	; 0x63
 800b37e:	dc01      	bgt.n	800b384 <t_motor_manual+0x134>
					_p = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
				_p = hal_motor_pan_speed_to_c(_p);
 800b384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b386:	f001 ff6f 	bl	800d268 <hal_motor_pan_speed_to_c>
 800b38a:	6278      	str	r0, [r7, #36]	; 0x24
				motor.pan_command.spd_man_in_c = _p;
 800b38c:	4a3a      	ldr	r2, [pc, #232]	; (800b478 <t_motor_manual+0x228>)
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	6093      	str	r3, [r2, #8]
				if (labs(_t) < 100)
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800b398:	db04      	blt.n	800b3a4 <t_motor_manual+0x154>
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	2b63      	cmp	r3, #99	; 0x63
 800b39e:	dc01      	bgt.n	800b3a4 <t_motor_manual+0x154>
					_t = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
				_t = hal_motor_tilt_speed_to_c(_t);
 800b3a4:	6a38      	ldr	r0, [r7, #32]
 800b3a6:	f001 ff79 	bl	800d29c <hal_motor_tilt_speed_to_c>
 800b3aa:	6238      	str	r0, [r7, #32]
				motor.tilt_command.spd_man_in_c = _t;
 800b3ac:	4a32      	ldr	r2, [pc, #200]	; (800b478 <t_motor_manual+0x228>)
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	61d3      	str	r3, [r2, #28]
				_cmd_recv_timestamp = HAL_GetTick();
 800b3b2:	f7f6 ff29 	bl	8002208 <HAL_GetTick>
 800b3b6:	6338      	str	r0, [r7, #48]	; 0x30
				break;
 800b3b8:	bf00      	nop
			}
			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800b3ba:	2002      	movs	r0, #2
 800b3bc:	f7f5 ff06 	bl	80011cc <mtr_get_mail>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	69f9      	ldr	r1, [r7, #28]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fc fb87 	bl	8007ad8 <osMailFree>
		}

		if ((_cmd_recv_timestamp > 0) && (HAL_GetTick() >= _cmd_recv_timestamp + BUS_MAX_TIMEOUT)) {
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d01b      	beq.n	800b408 <t_motor_manual+0x1b8>
 800b3d0:	f7f6 ff1a 	bl	8002208 <HAL_GetTick>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d313      	bcc.n	800b408 <t_motor_manual+0x1b8>
			_cmd_recv_timestamp = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	633b      	str	r3, [r7, #48]	; 0x30

			motor.pan_command.power_enable = 0;
 800b3e4:	4b24      	ldr	r3, [pc, #144]	; (800b478 <t_motor_manual+0x228>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	711a      	strb	r2, [r3, #4]
			motor.pan_command.spd_man_in_c = 0;
 800b3ea:	4b23      	ldr	r3, [pc, #140]	; (800b478 <t_motor_manual+0x228>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	609a      	str	r2, [r3, #8]
			motor.pan_command.pos_bal_in_c = 0;
 800b3f0:	4b21      	ldr	r3, [pc, #132]	; (800b478 <t_motor_manual+0x228>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	611a      	str	r2, [r3, #16]

			motor.tilt_command.power_enable = 0;
 800b3f6:	4b20      	ldr	r3, [pc, #128]	; (800b478 <t_motor_manual+0x228>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	761a      	strb	r2, [r3, #24]
			motor.tilt_command.spd_man_in_c = 0;
 800b3fc:	4b1e      	ldr	r3, [pc, #120]	; (800b478 <t_motor_manual+0x228>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	61da      	str	r2, [r3, #28]
			motor.tilt_command.pos_bal_in_c = 0;
 800b402:	4b1d      	ldr	r3, [pc, #116]	; (800b478 <t_motor_manual+0x228>)
 800b404:	2200      	movs	r2, #0
 800b406:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if (HAL_GetTick() >= _mtr_update_timer) {
 800b408:	f7f6 fefe 	bl	8002208 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b410:	4293      	cmp	r3, r2
 800b412:	d816      	bhi.n	800b442 <t_motor_manual+0x1f2>
			_mtr_update_timer = HAL_GetTick() + MANUAL_UPDATE_TIMEOUT;
 800b414:	f7f6 fef8 	bl	8002208 <HAL_GetTick>
 800b418:	4603      	mov	r3, r0
 800b41a:	2219      	movs	r2, #25
 800b41c:	4413      	add	r3, r2
 800b41e:	637b      	str	r3, [r7, #52]	; 0x34

			hal_motor_update_motor_state(&motor, 1);
 800b420:	2101      	movs	r1, #1
 800b422:	4815      	ldr	r0, [pc, #84]	; (800b478 <t_motor_manual+0x228>)
 800b424:	f002 f948 	bl	800d6b8 <hal_motor_update_motor_state>

			_debug_motor_command_counter += hal_motor_set_speed(motor.pan_command.spd_man_in_c,
 800b428:	4b13      	ldr	r3, [pc, #76]	; (800b478 <t_motor_manual+0x228>)
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	4a12      	ldr	r2, [pc, #72]	; (800b478 <t_motor_manual+0x228>)
 800b42e:	69d2      	ldr	r2, [r2, #28]
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f002 f814 	bl	800d460 <hal_motor_set_speed>
 800b438:	4603      	mov	r3, r0
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b43e:	4413      	add	r3, r2
 800b440:	857b      	strh	r3, [r7, #42]	; 0x2a

//			LOG("cmd=%d,%ld,%ld\r\n", motor.tilt_command.power_enable,motor.pan_command.spd_man_in_c, motor.tilt_command.spd_man_in_c);

		}

		if (_debug_send_timer <= HAL_GetTick()) {
 800b442:	f7f6 fee1 	bl	8002208 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d807      	bhi.n	800b45e <t_motor_manual+0x20e>
			_debug_send_timer = HAL_GetTick() + 1000;
 800b44e:	f7f6 fedb 	bl	8002208 <HAL_GetTick>
 800b452:	4603      	mov	r3, r0
 800b454:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c

			LOG("[%d]in c= %ld,%ld\r\n", _debug_motor_command_counter, motor.pan_command.spd_man_in_c,
					motor.tilt_command.spd_man_in_c);
			_debug_motor_command_counter = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	857b      	strh	r3, [r7, #42]	; 0x2a
			LOG("\t\tshw=%d\r\n", uxTaskGetStackHighWaterMark2(NULL));
		}
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_Ext_id, 0);
 800b45e:	2000      	movs	r0, #0
 800b460:	f7f5 fea0 	bl	80011a4 <opt_get_queue>
 800b464:	4603      	mov	r3, r0
 800b466:	2200      	movs	r2, #0
 800b468:	2108      	movs	r1, #8
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fc f960 	bl	8007730 <osMessagePut>
	for ( ;; ) {
 800b470:	e704      	b.n	800b27c <t_motor_manual+0x2c>
 800b472:	bf00      	nop
 800b474:	20010690 	.word	0x20010690
 800b478:	20010664 	.word	0x20010664

0800b47c <t_motor_memory>:
#endif	//if DEBUG_MOTOR_MEMORY==1

static const uint32_t MEMORY_UPDATE_TIMEOUT = 25;

void t_motor_memory(void const *argument)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b090      	sub	sp, #64	; 0x40
 800b480:	af02      	add	r7, sp, #8
 800b482:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor_memory */
	uint32_t _memory_timer = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t _memory_pan_speed, _memory_tilt_speed;
	uint32_t _cmd_recv_timestamp = HAL_GetTick();
 800b488:	f7f6 febe 	bl	8002208 <HAL_GetTick>
 800b48c:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t _debug_send_timer = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t _debug_motor_command_counter = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	847b      	strh	r3, [r7, #34]	; 0x22

	LOG("t_memory created!\r\n");
 800b496:	f7fb fe9a 	bl	80071ce <osKernelSysTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	0953      	lsrs	r3, r2, #5
 800b49e:	498b      	ldr	r1, [pc, #556]	; (800b6cc <t_motor_memory+0x250>)
 800b4a0:	fba1 1303 	umull	r1, r3, r1, r3
 800b4a4:	09db      	lsrs	r3, r3, #7
 800b4a6:	498a      	ldr	r1, [pc, #552]	; (800b6d0 <t_motor_memory+0x254>)
 800b4a8:	fb01 f303 	mul.w	r3, r1, r3
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	221e      	movs	r2, #30
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4888      	ldr	r0, [pc, #544]	; (800b6d4 <t_motor_memory+0x258>)
 800b4b4:	f004 fd1a 	bl	800feec <iprintf>

	_memory_pan_speed = motor.pan_command.spd_man_in_c;
 800b4b8:	4b87      	ldr	r3, [pc, #540]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	633b      	str	r3, [r7, #48]	; 0x30
	_memory_tilt_speed = motor.tilt_command.spd_man_in_c;
 800b4be:	4b86      	ldr	r3, [pc, #536]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	*(uint8_t*) &motor.mode_state = 0;
 800b4c4:	4b85      	ldr	r3, [pc, #532]	; (800b6dc <t_motor_memory+0x260>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
	motor.mode_state.movementMode = MOVE_MODE_MEMORY;
 800b4ca:	4a83      	ldr	r2, [pc, #524]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4cc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b4d0:	2104      	movs	r1, #4
 800b4d2:	f361 0303 	bfi	r3, r1, #0, #4
 800b4d6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

	motor.pan_command.power_enable = motor.tilt_command.power_enable = 1;
 800b4da:	4b7f      	ldr	r3, [pc, #508]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4dc:	2201      	movs	r2, #1
 800b4de:	761a      	strb	r2, [r3, #24]
 800b4e0:	4b7d      	ldr	r3, [pc, #500]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4e2:	7e1a      	ldrb	r2, [r3, #24]
 800b4e4:	4b7c      	ldr	r3, [pc, #496]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4e6:	711a      	strb	r2, [r3, #4]
	hal_motor_update_motor_state(&motor, 1);
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	487b      	ldr	r0, [pc, #492]	; (800b6d8 <t_motor_memory+0x25c>)
 800b4ec:	f002 f8e4 	bl	800d6b8 <hal_motor_update_motor_state>

	/* Infinite loop */
	for ( ;; ) {
		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Motor_Ext_id), 5);
 800b4f0:	2002      	movs	r0, #2
 800b4f2:	f7f5 fe6b 	bl	80011cc <mtr_get_mail>
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	f107 030c 	add.w	r3, r7, #12
 800b4fc:	2205      	movs	r2, #5
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fc fa76 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b20      	cmp	r3, #32
 800b508:	d179      	bne.n	800b5fe <t_motor_memory+0x182>
			/* create buffer pointer to hold queue value */
			MAIL_Motor_Ext_t *pRMail;
			pRMail = event.value.p;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	61fb      	str	r3, [r7, #28]

			switch (pRMail->sender_id)
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <t_motor_memory+0xa0>
 800b516:	2b02      	cmp	r3, #2
 800b518:	d068      	beq.n	800b5ec <t_motor_memory+0x170>
				_cmd_recv_timestamp = HAL_GetTick();
				break;
			case Motor_Ext_Sender_Offset_id:
				break;
			default:
				break;
 800b51a:	e068      	b.n	800b5ee <t_motor_memory+0x172>
				LOG("mode= %02X\r\n", *(uint8_t* )&pRMail->param.mode);
 800b51c:	f7fb fe57 	bl	80071ce <osKernelSysTick>
 800b520:	4603      	mov	r3, r0
 800b522:	095a      	lsrs	r2, r3, #5
 800b524:	4969      	ldr	r1, [pc, #420]	; (800b6cc <t_motor_memory+0x250>)
 800b526:	fba1 1202 	umull	r1, r2, r1, r2
 800b52a:	09d1      	lsrs	r1, r2, #7
 800b52c:	4a68      	ldr	r2, [pc, #416]	; (800b6d0 <t_motor_memory+0x254>)
 800b52e:	fb01 f202 	mul.w	r2, r1, r2
 800b532:	1a99      	subs	r1, r3, r2
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	3304      	adds	r3, #4
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2235      	movs	r2, #53	; 0x35
 800b53c:	4868      	ldr	r0, [pc, #416]	; (800b6e0 <t_motor_memory+0x264>)
 800b53e:	f004 fcd5 	bl	800feec <iprintf>
				if (pRMail->param.mode.ready_to_be_terminated == 1) {
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	791b      	ldrb	r3, [r3, #4]
 800b546:	f003 0304 	and.w	r3, r3, #4
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d049      	beq.n	800b5e4 <t_motor_memory+0x168>
					osMutexWait(mtr_get_mutex(Mutex_motor_ext_id), osWaitForever);
 800b550:	2002      	movs	r0, #2
 800b552:	f7f5 fe83 	bl	800125c <mtr_get_mutex>
 800b556:	4603      	mov	r3, r0
 800b558:	f04f 31ff 	mov.w	r1, #4294967295
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fb ff51 	bl	8007404 <osMutexWait>
					osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800b562:	2002      	movs	r0, #2
 800b564:	f7f5 fe32 	bl	80011cc <mtr_get_mail>
 800b568:	4603      	mov	r3, r0
 800b56a:	69f9      	ldr	r1, [r7, #28]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fc fab3 	bl	8007ad8 <osMailFree>
					ext_state = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800b572:	2001      	movs	r0, #1
 800b574:	f7f5 fe2a 	bl	80011cc <mtr_get_mail>
 800b578:	4603      	mov	r3, r0
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fc f9e3 	bl	8007948 <osMailAlloc>
 800b582:	61b8      	str	r0, [r7, #24]
					ext_state->sender_id = Motor_Sender_Ext_id;
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2201      	movs	r2, #1
 800b588:	701a      	strb	r2, [r3, #0]
					ext_state->param.ext.ready_to_be_terminated = 1;
 800b58a:	69ba      	ldr	r2, [r7, #24]
 800b58c:	7913      	ldrb	r3, [r2, #4]
 800b58e:	f043 0310 	orr.w	r3, r3, #16
 800b592:	7113      	strb	r3, [r2, #4]
					osMailPut(mtr_get_mail(Mail_Motor_id), ext_state);
 800b594:	2001      	movs	r0, #1
 800b596:	f7f5 fe19 	bl	80011cc <mtr_get_mail>
 800b59a:	4603      	mov	r3, r0
 800b59c:	69b9      	ldr	r1, [r7, #24]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fc f9e8 	bl	8007974 <osMailPut>
					osMutexRelease(mtr_get_mutex(Mutex_motor_ext_id));
 800b5a4:	2002      	movs	r0, #2
 800b5a6:	f7f5 fe59 	bl	800125c <mtr_get_mutex>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fb ff77 	bl	80074a0 <osMutexRelease>
					_memory_pan_speed = _memory_tilt_speed = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30
					LOG("terminated!\r\n");
 800b5ba:	f7fb fe08 	bl	80071ce <osKernelSysTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	0953      	lsrs	r3, r2, #5
 800b5c2:	4942      	ldr	r1, [pc, #264]	; (800b6cc <t_motor_memory+0x250>)
 800b5c4:	fba1 1303 	umull	r1, r3, r1, r3
 800b5c8:	09db      	lsrs	r3, r3, #7
 800b5ca:	4941      	ldr	r1, [pc, #260]	; (800b6d0 <t_motor_memory+0x254>)
 800b5cc:	fb01 f303 	mul.w	r3, r1, r3
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	2248      	movs	r2, #72	; 0x48
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4843      	ldr	r0, [pc, #268]	; (800b6e4 <t_motor_memory+0x268>)
 800b5d8:	f004 fc88 	bl	800feec <iprintf>
					osThreadTerminate(NULL);
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f7fb fe34 	bl	800724a <osThreadTerminate>
					break;
 800b5e2:	e004      	b.n	800b5ee <t_motor_memory+0x172>
				_cmd_recv_timestamp = HAL_GetTick();
 800b5e4:	f7f6 fe10 	bl	8002208 <HAL_GetTick>
 800b5e8:	62b8      	str	r0, [r7, #40]	; 0x28
				break;
 800b5ea:	e000      	b.n	800b5ee <t_motor_memory+0x172>
				break;
 800b5ec:	bf00      	nop
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800b5ee:	2002      	movs	r0, #2
 800b5f0:	f7f5 fdec 	bl	80011cc <mtr_get_mail>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	69f9      	ldr	r1, [r7, #28]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fc fa6d 	bl	8007ad8 <osMailFree>
		}

		if (_cmd_recv_timestamp > 0 && (HAL_GetTick() >= _cmd_recv_timestamp + BUS_MAX_TIMEOUT)) {
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	2b00      	cmp	r3, #0
 800b602:	d019      	beq.n	800b638 <t_motor_memory+0x1bc>
 800b604:	f7f6 fe00 	bl	8002208 <HAL_GetTick>
 800b608:	4602      	mov	r2, r0
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b610:	429a      	cmp	r2, r3
 800b612:	d311      	bcc.n	800b638 <t_motor_memory+0x1bc>
			motor.pan_command.power_enable = motor.tilt_command.power_enable = 0;
 800b614:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <t_motor_memory+0x25c>)
 800b616:	2200      	movs	r2, #0
 800b618:	761a      	strb	r2, [r3, #24]
 800b61a:	4b2f      	ldr	r3, [pc, #188]	; (800b6d8 <t_motor_memory+0x25c>)
 800b61c:	7e1a      	ldrb	r2, [r3, #24]
 800b61e:	4b2e      	ldr	r3, [pc, #184]	; (800b6d8 <t_motor_memory+0x25c>)
 800b620:	711a      	strb	r2, [r3, #4]
			motor.pan_command.spd_man_in_c = motor.tilt_command.spd_man_in_c = 0;
 800b622:	4b2d      	ldr	r3, [pc, #180]	; (800b6d8 <t_motor_memory+0x25c>)
 800b624:	2200      	movs	r2, #0
 800b626:	61da      	str	r2, [r3, #28]
 800b628:	4b2b      	ldr	r3, [pc, #172]	; (800b6d8 <t_motor_memory+0x25c>)
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	4a2a      	ldr	r2, [pc, #168]	; (800b6d8 <t_motor_memory+0x25c>)
 800b62e:	6093      	str	r3, [r2, #8]
			hal_motor_update_motor_state(&motor, 1);
 800b630:	2101      	movs	r1, #1
 800b632:	4829      	ldr	r0, [pc, #164]	; (800b6d8 <t_motor_memory+0x25c>)
 800b634:	f002 f840 	bl	800d6b8 <hal_motor_update_motor_state>
		}

		if (HAL_GetTick() >= _memory_timer) {
 800b638:	f7f6 fde6 	bl	8002208 <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	4293      	cmp	r3, r2
 800b642:	d812      	bhi.n	800b66a <t_motor_memory+0x1ee>
			_memory_timer = HAL_GetTick() + MEMORY_UPDATE_TIMEOUT;
 800b644:	f7f6 fde0 	bl	8002208 <HAL_GetTick>
 800b648:	4603      	mov	r3, r0
 800b64a:	2219      	movs	r2, #25
 800b64c:	4413      	add	r3, r2
 800b64e:	637b      	str	r3, [r7, #52]	; 0x34

			hal_motor_update_motor_state(&motor, 0);
 800b650:	2100      	movs	r1, #0
 800b652:	4821      	ldr	r0, [pc, #132]	; (800b6d8 <t_motor_memory+0x25c>)
 800b654:	f002 f830 	bl	800d6b8 <hal_motor_update_motor_state>

			_debug_motor_command_counter += hal_motor_set_speed(_memory_pan_speed, _memory_tilt_speed);
 800b658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b65a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b65c:	f001 ff00 	bl	800d460 <hal_motor_set_speed>
 800b660:	4603      	mov	r3, r0
 800b662:	b29a      	uxth	r2, r3
 800b664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b666:	4413      	add	r3, r2
 800b668:	847b      	strh	r3, [r7, #34]	; 0x22

//			LOG("cmd=%d,%ld,%ld\r\n", motor.tilt_command.power_enable,motor.pan_command.spd_man_in_c, motor.tilt_command.spd_man_in_c);
		}

		if (_debug_send_timer <= HAL_GetTick()) {
 800b66a:	f7f6 fdcd 	bl	8002208 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	4293      	cmp	r3, r2
 800b674:	d81f      	bhi.n	800b6b6 <t_motor_memory+0x23a>
			_debug_send_timer = HAL_GetTick() + 1000;
 800b676:	f7f6 fdc7 	bl	8002208 <HAL_GetTick>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b680:	627b      	str	r3, [r7, #36]	; 0x24

			LOG("[%d]in c= %ld,%ld\r\n", _debug_motor_command_counter, motor.pan_command.spd_man_in_c,
 800b682:	f7fb fda4 	bl	80071ce <osKernelSysTick>
 800b686:	4603      	mov	r3, r0
 800b688:	095a      	lsrs	r2, r3, #5
 800b68a:	4910      	ldr	r1, [pc, #64]	; (800b6cc <t_motor_memory+0x250>)
 800b68c:	fba1 1202 	umull	r1, r2, r1, r2
 800b690:	09d1      	lsrs	r1, r2, #7
 800b692:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <t_motor_memory+0x254>)
 800b694:	fb01 f202 	mul.w	r2, r1, r2
 800b698:	1a99      	subs	r1, r3, r2
 800b69a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800b69c:	4b0e      	ldr	r3, [pc, #56]	; (800b6d8 <t_motor_memory+0x25c>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	4a0d      	ldr	r2, [pc, #52]	; (800b6d8 <t_motor_memory+0x25c>)
 800b6a2:	69d2      	ldr	r2, [r2, #28]
 800b6a4:	9201      	str	r2, [sp, #4]
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	226d      	movs	r2, #109	; 0x6d
 800b6ac:	480e      	ldr	r0, [pc, #56]	; (800b6e8 <t_motor_memory+0x26c>)
 800b6ae:	f004 fc1d 	bl	800feec <iprintf>
					motor.tilt_command.spd_man_in_c);
			_debug_motor_command_counter = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	847b      	strh	r3, [r7, #34]	; 0x22
		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_Ext_id, 0);
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	f7f5 fd74 	bl	80011a4 <opt_get_queue>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2108      	movs	r1, #8
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fc f834 	bl	8007730 <osMessagePut>
	for ( ;; ) {
 800b6c8:	e712      	b.n	800b4f0 <t_motor_memory+0x74>
 800b6ca:	bf00      	nop
 800b6cc:	0a7c5ac5 	.word	0x0a7c5ac5
 800b6d0:	000186a0 	.word	0x000186a0
 800b6d4:	08012514 	.word	0x08012514
 800b6d8:	20010664 	.word	0x20010664
 800b6dc:	20010690 	.word	0x20010690
 800b6e0:	08012538 	.word	0x08012538
 800b6e4:	08012554 	.word	0x08012554
 800b6e8:	08012574 	.word	0x08012574

0800b6ec <t_motor_stab>:
 */

#include "t_motor.h"

void t_motor_stab(void const * argument)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN t_motor_stab */
	*(uint8_t*) &motor.mode_state = 0;
 800b6f4:	4b07      	ldr	r3, [pc, #28]	; (800b714 <t_motor_stab+0x28>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
	motor.mode_state.movementMode = MOVE_MODE_STAB;
 800b6fa:	4a07      	ldr	r2, [pc, #28]	; (800b718 <t_motor_stab+0x2c>)
 800b6fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b700:	2102      	movs	r1, #2
 800b702:	f361 0303 	bfi	r3, r1, #0, #4
 800b706:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800b70a:	2064      	movs	r0, #100	; 0x64
 800b70c:	f7fb fdbe 	bl	800728c <osDelay>
 800b710:	e7fb      	b.n	800b70a <t_motor_stab+0x1e>
 800b712:	bf00      	nop
 800b714:	20010690 	.word	0x20010690
 800b718:	20010664 	.word	0x20010664

0800b71c <t_motor_travel>:
  }
	/* USER CODE END t_motor_stab */
}

void t_motor_travel(void const * argument)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN t_motor_travel */
	*(uint8_t*) &motor.mode_state = 0;
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <t_motor_travel+0x28>)
 800b726:	2200      	movs	r2, #0
 800b728:	701a      	strb	r2, [r3, #0]
	motor.mode_state.movementMode = MOVE_MODE_TRAVEL;
 800b72a:	4a07      	ldr	r2, [pc, #28]	; (800b748 <t_motor_travel+0x2c>)
 800b72c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b730:	2101      	movs	r1, #1
 800b732:	f361 0303 	bfi	r3, r1, #0, #4
 800b736:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800b73a:	2064      	movs	r0, #100	; 0x64
 800b73c:	f7fb fda6 	bl	800728c <osDelay>
 800b740:	e7fb      	b.n	800b73a <t_motor_travel+0x1e>
 800b742:	bf00      	nop
 800b744:	20010690 	.word	0x20010690
 800b748:	20010664 	.word	0x20010664

0800b74c <tim_motor_callback>:
static void t_motor_init();
static void mtr_send_to_bus();
static void t_motor_ext_revive_task(const uint8_t movement_mode);

void tim_motor_callback(void const *argument)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tim_motor_callback */
	if (HAL_GetTick() < g_init_timeout)
 800b754:	f7f6 fd58 	bl	8002208 <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <tim_motor_callback+0x40>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d209      	bcs.n	800b776 <tim_motor_callback+0x2a>
		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), (T_Motor_id | T_Motor_Ext_id), 0);
 800b762:	2000      	movs	r0, #0
 800b764:	f7f5 fd1e 	bl	80011a4 <opt_get_queue>
 800b768:	4603      	mov	r3, r0
 800b76a:	2200      	movs	r2, #0
 800b76c:	210a      	movs	r1, #10
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fb ffde 	bl	8007730 <osMessagePut>
	else
		osTimerStop(mtr_get_timer(Tim_Motor_id));
}
 800b774:	e006      	b.n	800b784 <tim_motor_callback+0x38>
		osTimerStop(mtr_get_timer(Tim_Motor_id));
 800b776:	2001      	movs	r0, #1
 800b778:	f7f5 fd54 	bl	8001224 <mtr_get_timer>
 800b77c:	4603      	mov	r3, r0
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fb fdf8 	bl	8007374 <osTimerStop>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	200106bc 	.word	0x200106bc

0800b790 <t_motor>:

void t_motor(void const *argument)
{
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	b08d      	sub	sp, #52	; 0x34
 800b794:	af04      	add	r7, sp, #16
 800b796:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor */
	uint32_t _bus_send_timer = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	61fb      	str	r3, [r7, #28]

	LOG("Created!\r\n");
 800b79c:	f7fb fd17 	bl	80071ce <osKernelSysTick>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	0953      	lsrs	r3, r2, #5
 800b7a4:	499b      	ldr	r1, [pc, #620]	; (800ba14 <t_motor+0x284>)
 800b7a6:	fba1 1303 	umull	r1, r3, r1, r3
 800b7aa:	09db      	lsrs	r3, r3, #7
 800b7ac:	499a      	ldr	r1, [pc, #616]	; (800ba18 <t_motor+0x288>)
 800b7ae:	fb01 f303 	mul.w	r3, r1, r3
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	2241      	movs	r2, #65	; 0x41
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4898      	ldr	r0, [pc, #608]	; (800ba1c <t_motor+0x28c>)
 800b7ba:	f004 fb97 	bl	800feec <iprintf>

	osMutexWait(mtr_get_mutex(Mutex_Motor_id), osWaitForever);
 800b7be:	2001      	movs	r0, #1
 800b7c0:	f7f5 fd4c 	bl	800125c <mtr_get_mutex>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	f04f 31ff 	mov.w	r1, #4294967295
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fb fe1a 	bl	8007404 <osMutexWait>
	/* TODO Select which motor to be activated */
	motor.enable = 0;
 800b7d0:	4b93      	ldr	r3, [pc, #588]	; (800ba20 <t_motor+0x290>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
//	motor.enable |= MTR_AZ_ENABLE;
	motor.enable |= MTR_EL_ENABLE;
 800b7d6:	4b92      	ldr	r3, [pc, #584]	; (800ba20 <t_motor+0x290>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	f043 0302 	orr.w	r3, r3, #2
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	4b8f      	ldr	r3, [pc, #572]	; (800ba20 <t_motor+0x290>)
 800b7e2:	701a      	strb	r2, [r3, #0]

	if (get_reset_cause() == RESET_CAUSE_EXTERNAL_RESET_PIN_RESET)
 800b7e4:	f7ff fa38 	bl	800ac58 <get_reset_cause>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b05      	cmp	r3, #5
 800b7ec:	d103      	bne.n	800b7f6 <t_motor+0x66>
		osDelay(3000);
 800b7ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b7f2:	f7fb fd4b 	bl	800728c <osDelay>
	t_motor_init();
 800b7f6:	f000 f91b 	bl	800ba30 <t_motor_init>
	osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	f7f5 fd2e 	bl	800125c <mtr_get_mutex>
 800b800:	4603      	mov	r3, r0
 800b802:	4618      	mov	r0, r3
 800b804:	f7fb fe4c 	bl	80074a0 <osMutexRelease>
	motor.mode_state.movementMode = MOVE_MODE_MAN;
 800b808:	4a85      	ldr	r2, [pc, #532]	; (800ba20 <t_motor+0x290>)
 800b80a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800b80e:	f36f 0303 	bfc	r3, #0, #4
 800b812:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
	t_motor_ext_revive_task(MOVE_MODE_MAN);
 800b816:	2000      	movs	r0, #0
 800b818:	f000 f944 	bl	800baa4 <t_motor_ext_revive_task>
	/* create manual task */

	/* Infinite loop */
	for ( ;; ) {
		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Motor_id), 50);
 800b81c:	2001      	movs	r0, #1
 800b81e:	f7f5 fcd5 	bl	80011cc <mtr_get_mail>
 800b822:	4601      	mov	r1, r0
 800b824:	f107 0308 	add.w	r3, r7, #8
 800b828:	2232      	movs	r2, #50	; 0x32
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fc f8e0 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b20      	cmp	r3, #32
 800b834:	f040 80b4 	bne.w	800b9a0 <t_motor+0x210>
			/* create buffer pointer to hold queue value */
			MAIL_Motor_t *pRMail;
			MAIL_Motor_Ext_t *ext_mail;
			pRMail = event.value.p;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	61bb      	str	r3, [r7, #24]

			switch (pRMail->sender_id)
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b02      	cmp	r3, #2
 800b842:	f000 809e 	beq.w	800b982 <t_motor+0x1f2>
 800b846:	2b02      	cmp	r3, #2
 800b848:	f300 809d 	bgt.w	800b986 <t_motor+0x1f6>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <t_motor+0xc8>
 800b850:	2b01      	cmp	r3, #1
 800b852:	f000 8086 	beq.w	800b962 <t_motor+0x1d2>
				}
				break;
			case Motor_Sender_Sensor_id:
				break;
			default:
				break;
 800b856:	e096      	b.n	800b986 <t_motor+0x1f6>
				LOG("[I]cmd=%02X;st=%02X;rst=%d\r\n", *(uint8_t* )&pRMail->param.mode, *(uint8_t* )&motor.mode_state,
 800b858:	f7fb fcb9 	bl	80071ce <osKernelSysTick>
 800b85c:	4603      	mov	r3, r0
 800b85e:	095a      	lsrs	r2, r3, #5
 800b860:	496c      	ldr	r1, [pc, #432]	; (800ba14 <t_motor+0x284>)
 800b862:	fba1 1202 	umull	r1, r2, r1, r2
 800b866:	09d4      	lsrs	r4, r2, #7
 800b868:	4a6b      	ldr	r2, [pc, #428]	; (800ba18 <t_motor+0x288>)
 800b86a:	fb04 f202 	mul.w	r2, r4, r2
 800b86e:	1a9c      	subs	r4, r3, r2
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	3304      	adds	r3, #4
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	461e      	mov	r6, r3
 800b878:	4b6a      	ldr	r3, [pc, #424]	; (800ba24 <t_motor+0x294>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	461d      	mov	r5, r3
 800b87e:	f7ff f9eb 	bl	800ac58 <get_reset_cause>
 800b882:	4603      	mov	r3, r0
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	9500      	str	r5, [sp, #0]
 800b888:	4633      	mov	r3, r6
 800b88a:	225f      	movs	r2, #95	; 0x5f
 800b88c:	4621      	mov	r1, r4
 800b88e:	4866      	ldr	r0, [pc, #408]	; (800ba28 <t_motor+0x298>)
 800b890:	f004 fb2c 	bl	800feec <iprintf>
				motor.mode_command.movementMode = pRMail->param.mode.movementMode;
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	791b      	ldrb	r3, [r3, #4]
 800b898:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b89c:	b2d9      	uxtb	r1, r3
 800b89e:	4a60      	ldr	r2, [pc, #384]	; (800ba20 <t_motor+0x290>)
 800b8a0:	7853      	ldrb	r3, [r2, #1]
 800b8a2:	f361 0344 	bfi	r3, r1, #1, #4
 800b8a6:	7053      	strb	r3, [r2, #1]
				if (osMutexWait(mtr_get_mutex(Mutex_motor_ext_id), 0) == osOK) {
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f7f5 fcd7 	bl	800125c <mtr_get_mutex>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fb fda6 	bl	8007404 <osMutexWait>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d165      	bne.n	800b98a <t_motor+0x1fa>
					ext_mail = osMailAlloc(mtr_get_mail(Mail_Motor_Ext_id), 0);
 800b8be:	2002      	movs	r0, #2
 800b8c0:	f7f5 fc84 	bl	80011cc <mtr_get_mail>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fc f83d 	bl	8007948 <osMailAlloc>
 800b8ce:	6178      	str	r0, [r7, #20]
					ext_mail->sender_id = Motor_Ext_Sender_Mode_id;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	701a      	strb	r2, [r3, #0]
					*(uint8_t*) &ext_mail->param.mode = 0;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	3304      	adds	r3, #4
 800b8da:	2200      	movs	r2, #0
 800b8dc:	701a      	strb	r2, [r3, #0]
					if (pRMail->param.mode.modeAbort == 1)
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	791b      	ldrb	r3, [r3, #4]
 800b8e2:	f003 0320 	and.w	r3, r3, #32
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <t_motor+0x166>
						motor.mode_command.movementMode = MOVE_MODE_MAN;
 800b8ec:	4a4c      	ldr	r2, [pc, #304]	; (800ba20 <t_motor+0x290>)
 800b8ee:	7853      	ldrb	r3, [r2, #1]
 800b8f0:	f36f 0344 	bfc	r3, #1, #4
 800b8f4:	7053      	strb	r3, [r2, #1]
					if (motor.mode_state.movementMode != motor.mode_command.movementMode)
 800b8f6:	4b4a      	ldr	r3, [pc, #296]	; (800ba20 <t_motor+0x290>)
 800b8f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b900:	b2da      	uxtb	r2, r3
 800b902:	4b47      	ldr	r3, [pc, #284]	; (800ba20 <t_motor+0x290>)
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d004      	beq.n	800b91a <t_motor+0x18a>
						ext_mail->param.mode.ready_to_be_terminated = 1;
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	7913      	ldrb	r3, [r2, #4]
 800b914:	f043 0304 	orr.w	r3, r3, #4
 800b918:	7113      	strb	r3, [r2, #4]
					ext_mail->param.mode.motor_enable = pRMail->param.mode.motorEnable;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	791b      	ldrb	r3, [r3, #4]
 800b91e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b922:	b2d9      	uxtb	r1, r3
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	7913      	ldrb	r3, [r2, #4]
 800b928:	f361 0300 	bfi	r3, r1, #0, #1
 800b92c:	7113      	strb	r3, [r2, #4]
					ext_mail->param.mode.balistic_active = pRMail->param.mode.ballisticActive;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	791b      	ldrb	r3, [r3, #4]
 800b932:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b936:	b2d9      	uxtb	r1, r3
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	7913      	ldrb	r3, [r2, #4]
 800b93c:	f361 0341 	bfi	r3, r1, #1, #1
 800b940:	7113      	strb	r3, [r2, #4]
					osMailPut(mtr_get_mail(Mail_Motor_Ext_id), ext_mail);
 800b942:	2002      	movs	r0, #2
 800b944:	f7f5 fc42 	bl	80011cc <mtr_get_mail>
 800b948:	4603      	mov	r3, r0
 800b94a:	6979      	ldr	r1, [r7, #20]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fc f811 	bl	8007974 <osMailPut>
					osMutexRelease(mtr_get_mutex(Mutex_motor_ext_id));
 800b952:	2002      	movs	r0, #2
 800b954:	f7f5 fc82 	bl	800125c <mtr_get_mutex>
 800b958:	4603      	mov	r3, r0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fb fda0 	bl	80074a0 <osMutexRelease>
				break;
 800b960:	e013      	b.n	800b98a <t_motor+0x1fa>
				if (pRMail->param.ext.ready_to_be_terminated == 1) {
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	791b      	ldrb	r3, [r3, #4]
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00e      	beq.n	800b98e <t_motor+0x1fe>
					t_motor_ext_revive_task(motor.mode_command.movementMode);
 800b970:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <t_motor+0x290>)
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f892 	bl	800baa4 <t_motor_ext_revive_task>
				break;
 800b980:	e005      	b.n	800b98e <t_motor+0x1fe>
				break;
 800b982:	bf00      	nop
 800b984:	e004      	b.n	800b990 <t_motor+0x200>
				break;
 800b986:	bf00      	nop
 800b988:	e002      	b.n	800b990 <t_motor+0x200>
				break;
 800b98a:	bf00      	nop
 800b98c:	e000      	b.n	800b990 <t_motor+0x200>
				break;
 800b98e:	bf00      	nop
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Motor_id), pRMail);
 800b990:	2001      	movs	r0, #1
 800b992:	f7f5 fc1b 	bl	80011cc <mtr_get_mail>
 800b996:	4603      	mov	r3, r0
 800b998:	69b9      	ldr	r1, [r7, #24]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fc f89c 	bl	8007ad8 <osMailFree>
		}

		if (osKernelSysTick() >= _bus_send_timer) {
 800b9a0:	f7fb fc15 	bl	80071ce <osKernelSysTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d828      	bhi.n	800b9fe <t_motor+0x26e>
			_bus_send_timer = HAL_GetTick() + 100;
 800b9ac:	f7f6 fc2c 	bl	8002208 <HAL_GetTick>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	3364      	adds	r3, #100	; 0x64
 800b9b4:	61fb      	str	r3, [r7, #28]

			mtr_send_to_bus();
 800b9b6:	f000 f94d 	bl	800bc54 <mtr_send_to_bus>
			LOG("[O]state=%02X,%04X,%02X,%04X\r\n", motor.pan_state.power, motor.pan_state.statusword,
 800b9ba:	f7fb fc08 	bl	80071ce <osKernelSysTick>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	095a      	lsrs	r2, r3, #5
 800b9c2:	4914      	ldr	r1, [pc, #80]	; (800ba14 <t_motor+0x284>)
 800b9c4:	fba1 1202 	umull	r1, r2, r1, r2
 800b9c8:	09d1      	lsrs	r1, r2, #7
 800b9ca:	4a13      	ldr	r2, [pc, #76]	; (800ba18 <t_motor+0x288>)
 800b9cc:	fb01 f202 	mul.w	r2, r1, r2
 800b9d0:	1a99      	subs	r1, r3, r2
 800b9d2:	4b13      	ldr	r3, [pc, #76]	; (800ba20 <t_motor+0x290>)
 800b9d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9d8:	461c      	mov	r4, r3
 800b9da:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <t_motor+0x290>)
 800b9dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <t_motor+0x290>)
 800b9e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <t_motor+0x290>)
 800b9ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9ee:	9302      	str	r3, [sp, #8]
 800b9f0:	9001      	str	r0, [sp, #4]
 800b9f2:	9200      	str	r2, [sp, #0]
 800b9f4:	4623      	mov	r3, r4
 800b9f6:	2289      	movs	r2, #137	; 0x89
 800b9f8:	480c      	ldr	r0, [pc, #48]	; (800ba2c <t_motor+0x29c>)
 800b9fa:	f004 fa77 	bl	800feec <iprintf>
					motor.tilt_state.power, motor.tilt_state.statusword);
		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_id, 0);
 800b9fe:	2000      	movs	r0, #0
 800ba00:	f7f5 fbd0 	bl	80011a4 <opt_get_queue>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2200      	movs	r2, #0
 800ba08:	2102      	movs	r1, #2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fb fe90 	bl	8007730 <osMessagePut>
	for ( ;; ) {
 800ba10:	e704      	b.n	800b81c <t_motor+0x8c>
 800ba12:	bf00      	nop
 800ba14:	0a7c5ac5 	.word	0x0a7c5ac5
 800ba18:	000186a0 	.word	0x000186a0
 800ba1c:	08012598 	.word	0x08012598
 800ba20:	20010664 	.word	0x20010664
 800ba24:	20010690 	.word	0x20010690
 800ba28:	080125b4 	.word	0x080125b4
 800ba2c:	080125e0 	.word	0x080125e0

0800ba30 <t_motor_init>:
	}
	/* USER CODE END t_motor */
}

static void t_motor_init()
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
	motor.pan_state.pos = motor.tilt_state.pos = 0;
 800ba34:	4b18      	ldr	r3, [pc, #96]	; (800ba98 <t_motor_init+0x68>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	651a      	str	r2, [r3, #80]	; 0x50
 800ba3a:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <t_motor_init+0x68>)
 800ba3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3e:	4a16      	ldr	r2, [pc, #88]	; (800ba98 <t_motor_init+0x68>)
 800ba40:	63d3      	str	r3, [r2, #60]	; 0x3c

	g_init_timeout = osKernelSysTick() + MTR_INIT_TIMEOUT;
 800ba42:	f7fb fbc4 	bl	80071ce <osKernelSysTick>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800ba4c:	3360      	adds	r3, #96	; 0x60
 800ba4e:	4a13      	ldr	r2, [pc, #76]	; (800ba9c <t_motor_init+0x6c>)
 800ba50:	6013      	str	r3, [r2, #0]
	osTimerStart(mtr_get_timer(Tim_Motor_id), 500);
 800ba52:	2001      	movs	r0, #1
 800ba54:	f7f5 fbe6 	bl	8001224 <mtr_get_timer>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fb fc44 	bl	80072ec <osTimerStart>
	while (hal_motor_init(motor.enable) != HAL_OK) {
 800ba64:	e006      	b.n	800ba74 <t_motor_init+0x44>
		LOG_E("motor init failed!\r\n");
 800ba66:	219a      	movs	r1, #154	; 0x9a
 800ba68:	480d      	ldr	r0, [pc, #52]	; (800baa0 <t_motor_init+0x70>)
 800ba6a:	f004 fa3f 	bl	800feec <iprintf>
		osDelay(10);
 800ba6e:	200a      	movs	r0, #10
 800ba70:	f7fb fc0c 	bl	800728c <osDelay>
	while (hal_motor_init(motor.enable) != HAL_OK) {
 800ba74:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <t_motor_init+0x68>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 f955 	bl	800cd28 <hal_motor_init>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f0      	bne.n	800ba66 <t_motor_init+0x36>
	}
	osTimerStop(mtr_get_timer(Tim_Motor_id));
 800ba84:	2001      	movs	r0, #1
 800ba86:	f7f5 fbcd 	bl	8001224 <mtr_get_timer>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fb fc71 	bl	8007374 <osTimerStop>
}
 800ba92:	bf00      	nop
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20010664 	.word	0x20010664
 800ba9c:	200106bc 	.word	0x200106bc
 800baa0:	08012610 	.word	0x08012610

0800baa4 <t_motor_ext_revive_task>:

static void t_motor_ext_revive_task(const uint8_t movement_mode)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b0a0      	sub	sp, #128	; 0x80
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	71fb      	strb	r3, [r7, #7]
	static const int8_t priority = osPriorityNormal;
	taskENTER_CRITICAL();
 800baae:	f7fe fd71 	bl	800a594 <vPortEnterCritical>

	if (movement_mode == MOVE_MODE_MAN) {
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d118      	bne.n	800baea <t_motor_ext_revive_task+0x46>
		/* definition and creation of TMoveManual */
		osThreadDef(TMoveManual, t_motor_manual, priority, 0, 512);
 800bab8:	4b53      	ldr	r3, [pc, #332]	; (800bc08 <t_motor_ext_revive_task+0x164>)
 800baba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800babc:	4b53      	ldr	r3, [pc, #332]	; (800bc0c <t_motor_ext_revive_task+0x168>)
 800babe:	673b      	str	r3, [r7, #112]	; 0x70
 800bac0:	4b53      	ldr	r3, [pc, #332]	; (800bc10 <t_motor_ext_revive_task+0x16c>)
 800bac2:	f993 3000 	ldrsb.w	r3, [r3]
 800bac6:	b21b      	sxth	r3, r3
 800bac8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800bacc:	2300      	movs	r3, #0
 800bace:	67bb      	str	r3, [r7, #120]	; 0x78
 800bad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bad4:	67fb      	str	r3, [r7, #124]	; 0x7c
		TMoveManualHandle = osThreadCreate(osThread(TMoveManual), NULL);
 800bad6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bada:	2100      	movs	r1, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f7fb fb86 	bl	80071ee <osThreadCreate>
 800bae2:	4603      	mov	r3, r0
 800bae4:	4a4b      	ldr	r2, [pc, #300]	; (800bc14 <t_motor_ext_revive_task+0x170>)
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	e087      	b.n	800bbfa <t_motor_ext_revive_task+0x156>
	}
	else if (movement_mode == MOVE_MODE_TRAVEL) {
 800baea:	79fb      	ldrb	r3, [r7, #7]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d118      	bne.n	800bb22 <t_motor_ext_revive_task+0x7e>
		/* definition and creation of TMoveManual */
		osThreadDef(TMoveTravel, t_motor_travel, priority, 0, 512);
 800baf0:	4b49      	ldr	r3, [pc, #292]	; (800bc18 <t_motor_ext_revive_task+0x174>)
 800baf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800baf4:	4b49      	ldr	r3, [pc, #292]	; (800bc1c <t_motor_ext_revive_task+0x178>)
 800baf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baf8:	4b45      	ldr	r3, [pc, #276]	; (800bc10 <t_motor_ext_revive_task+0x16c>)
 800bafa:	f993 3000 	ldrsb.w	r3, [r3]
 800bafe:	b21b      	sxth	r3, r3
 800bb00:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800bb04:	2300      	movs	r3, #0
 800bb06:	667b      	str	r3, [r7, #100]	; 0x64
 800bb08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb0c:	66bb      	str	r3, [r7, #104]	; 0x68
		TMoveTravelHandle = osThreadCreate(osThread(TMoveTravel), NULL);
 800bb0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fb fb6a 	bl	80071ee <osThreadCreate>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	4a40      	ldr	r2, [pc, #256]	; (800bc20 <t_motor_ext_revive_task+0x17c>)
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	e06b      	b.n	800bbfa <t_motor_ext_revive_task+0x156>
	}
	else if (movement_mode == MOVE_MODE_STAB) {
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d118      	bne.n	800bb5a <t_motor_ext_revive_task+0xb6>
		/* definition and creation of TMoveStab */
		osThreadDef(TMoveStab, t_motor_stab, priority, 0, 512);
 800bb28:	4b3e      	ldr	r3, [pc, #248]	; (800bc24 <t_motor_ext_revive_task+0x180>)
 800bb2a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb2c:	4b3e      	ldr	r3, [pc, #248]	; (800bc28 <t_motor_ext_revive_task+0x184>)
 800bb2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb30:	4b37      	ldr	r3, [pc, #220]	; (800bc10 <t_motor_ext_revive_task+0x16c>)
 800bb32:	f993 3000 	ldrsb.w	r3, [r3]
 800bb36:	b21b      	sxth	r3, r3
 800bb38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	653b      	str	r3, [r7, #80]	; 0x50
 800bb40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb44:	657b      	str	r3, [r7, #84]	; 0x54
		TMoveStabHandle = osThreadCreate(osThread(TMoveStab), NULL);
 800bb46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fb fb4e 	bl	80071ee <osThreadCreate>
 800bb52:	4603      	mov	r3, r0
 800bb54:	4a35      	ldr	r2, [pc, #212]	; (800bc2c <t_motor_ext_revive_task+0x188>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	e04f      	b.n	800bbfa <t_motor_ext_revive_task+0x156>
	}
	else if (movement_mode == MOVE_MODE_TRACK) {
 800bb5a:	79fb      	ldrb	r3, [r7, #7]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d117      	bne.n	800bb90 <t_motor_ext_revive_task+0xec>
		/* definition and creation of TMoveTrack */
		osThreadDef(TMoveTrack, t_motor_track, priority, 0, 512);
 800bb60:	4b33      	ldr	r3, [pc, #204]	; (800bc30 <t_motor_ext_revive_task+0x18c>)
 800bb62:	633b      	str	r3, [r7, #48]	; 0x30
 800bb64:	4b33      	ldr	r3, [pc, #204]	; (800bc34 <t_motor_ext_revive_task+0x190>)
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
 800bb68:	4b29      	ldr	r3, [pc, #164]	; (800bc10 <t_motor_ext_revive_task+0x16c>)
 800bb6a:	f993 3000 	ldrsb.w	r3, [r3]
 800bb6e:	b21b      	sxth	r3, r3
 800bb70:	873b      	strh	r3, [r7, #56]	; 0x38
 800bb72:	2300      	movs	r3, #0
 800bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb7a:	643b      	str	r3, [r7, #64]	; 0x40
		TMoveTrackHandle = osThreadCreate(osThread(TMoveTrack), NULL);
 800bb7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb80:	2100      	movs	r1, #0
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fb fb33 	bl	80071ee <osThreadCreate>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	4a2b      	ldr	r2, [pc, #172]	; (800bc38 <t_motor_ext_revive_task+0x194>)
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	e034      	b.n	800bbfa <t_motor_ext_revive_task+0x156>
	}
	else if (movement_mode == MOVE_MODE_MEMORY) {
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	2b04      	cmp	r3, #4
 800bb94:	d117      	bne.n	800bbc6 <t_motor_ext_revive_task+0x122>
		/* definition and creation of TMoveMemory */
		osThreadDef(TMoveMemory, t_motor_memory, priority, 0, 512);
 800bb96:	4b29      	ldr	r3, [pc, #164]	; (800bc3c <t_motor_ext_revive_task+0x198>)
 800bb98:	61fb      	str	r3, [r7, #28]
 800bb9a:	4b29      	ldr	r3, [pc, #164]	; (800bc40 <t_motor_ext_revive_task+0x19c>)
 800bb9c:	623b      	str	r3, [r7, #32]
 800bb9e:	4b1c      	ldr	r3, [pc, #112]	; (800bc10 <t_motor_ext_revive_task+0x16c>)
 800bba0:	f993 3000 	ldrsb.w	r3, [r3]
 800bba4:	b21b      	sxth	r3, r3
 800bba6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bba8:	2300      	movs	r3, #0
 800bbaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		TMoveMemoryHandle = osThreadCreate(osThread(TMoveMemory), NULL);
 800bbb2:	f107 031c 	add.w	r3, r7, #28
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fb fb18 	bl	80071ee <osThreadCreate>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4a20      	ldr	r2, [pc, #128]	; (800bc44 <t_motor_ext_revive_task+0x1a0>)
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	e019      	b.n	800bbfa <t_motor_ext_revive_task+0x156>
	}
	else if (movement_mode == MOVE_MODE_HOMING) {
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	2b05      	cmp	r3, #5
 800bbca:	d116      	bne.n	800bbfa <t_motor_ext_revive_task+0x156>
		/* definition and creation of TMoveHoming */
		osThreadDef(TMoveHoming, t_motor_homing, priority, 0, 512);
 800bbcc:	4b1e      	ldr	r3, [pc, #120]	; (800bc48 <t_motor_ext_revive_task+0x1a4>)
 800bbce:	60bb      	str	r3, [r7, #8]
 800bbd0:	4b1e      	ldr	r3, [pc, #120]	; (800bc4c <t_motor_ext_revive_task+0x1a8>)
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <t_motor_ext_revive_task+0x16c>)
 800bbd6:	f993 3000 	ldrsb.w	r3, [r3]
 800bbda:	b21b      	sxth	r3, r3
 800bbdc:	823b      	strh	r3, [r7, #16]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbe6:	61bb      	str	r3, [r7, #24]
		TMoveHomingHandle = osThreadCreate(osThread(TMoveHoming), NULL);
 800bbe8:	f107 0308 	add.w	r3, r7, #8
 800bbec:	2100      	movs	r1, #0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fb fafd 	bl	80071ee <osThreadCreate>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	4a16      	ldr	r2, [pc, #88]	; (800bc50 <t_motor_ext_revive_task+0x1ac>)
 800bbf8:	6013      	str	r3, [r2, #0]
	}

	taskEXIT_CRITICAL();
 800bbfa:	f7fe fcfb 	bl	800a5f4 <vPortExitCritical>
}
 800bbfe:	bf00      	nop
 800bc00:	3780      	adds	r7, #128	; 0x80
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	08012634 	.word	0x08012634
 800bc0c:	0800b251 	.word	0x0800b251
 800bc10:	0801299c 	.word	0x0801299c
 800bc14:	200106c0 	.word	0x200106c0
 800bc18:	08012640 	.word	0x08012640
 800bc1c:	0800b71d 	.word	0x0800b71d
 800bc20:	200106c4 	.word	0x200106c4
 800bc24:	0801264c 	.word	0x0801264c
 800bc28:	0800b6ed 	.word	0x0800b6ed
 800bc2c:	200106c8 	.word	0x200106c8
 800bc30:	08012658 	.word	0x08012658
 800bc34:	0800be0d 	.word	0x0800be0d
 800bc38:	200106cc 	.word	0x200106cc
 800bc3c:	08012664 	.word	0x08012664
 800bc40:	0800b47d 	.word	0x0800b47d
 800bc44:	200106d0 	.word	0x200106d0
 800bc48:	08012670 	.word	0x08012670
 800bc4c:	0800ae65 	.word	0x0800ae65
 800bc50:	200106d4 	.word	0x200106d4

0800bc54 <mtr_send_to_bus>:

static void mtr_send_to_bus()
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af02      	add	r7, sp, #8
	/* ================ */
	Body_motor_status_t _pan_state;
	Body_motor_status_t _tilt_state;
	MAIL_Bus_t *state_mail;

	*(uint8_t*) &_pan_state = 0;
 800bc5a:	1d3b      	adds	r3, r7, #4
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
	*(uint8_t*) &_tilt_state = 0;
 800bc60:	463b      	mov	r3, r7
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
	_pan_state.motorEnable = motor.pan_state.power;
 800bc66:	4b64      	ldr	r3, [pc, #400]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bc68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	793b      	ldrb	r3, [r7, #4]
 800bc74:	f362 0300 	bfi	r3, r2, #0, #1
 800bc78:	713b      	strb	r3, [r7, #4]
	if ((motor.pan_state.statusword & 0x4000) != 0)
 800bc7a:	4b5f      	ldr	r3, [pc, #380]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bc7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <mtr_send_to_bus+0x3a>
		_pan_state.initialAngleSuccess = 1;
 800bc86:	793b      	ldrb	r3, [r7, #4]
 800bc88:	f043 0302 	orr.w	r3, r3, #2
 800bc8c:	713b      	strb	r3, [r7, #4]
	if ((motor.pan_state.statusword & 0x8) != 0)
 800bc8e:	4b5a      	ldr	r3, [pc, #360]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bc90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc92:	f003 0308 	and.w	r3, r3, #8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <mtr_send_to_bus+0x5c>
		_pan_state.fault |= 0b1;
 800bc9a:	793b      	ldrb	r3, [r7, #4]
 800bc9c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	f043 0301 	orr.w	r3, r3, #1
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	793b      	ldrb	r3, [r7, #4]
 800bcaa:	f362 03c4 	bfi	r3, r2, #3, #2
 800bcae:	713b      	strb	r3, [r7, #4]
	if ((motor.pan_state.statusword & 0x2000) != 0)
 800bcb0:	4b51      	ldr	r3, [pc, #324]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bcb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00a      	beq.n	800bcd2 <mtr_send_to_bus+0x7e>
		_pan_state.fault |= 0b10;
 800bcbc:	793b      	ldrb	r3, [r7, #4]
 800bcbe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f043 0302 	orr.w	r3, r3, #2
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	793b      	ldrb	r3, [r7, #4]
 800bccc:	f362 03c4 	bfi	r3, r2, #3, #2
 800bcd0:	713b      	strb	r3, [r7, #4]

	_tilt_state.motorEnable = motor.tilt_state.power;
 800bcd2:	4b49      	ldr	r3, [pc, #292]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bcd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	783b      	ldrb	r3, [r7, #0]
 800bce0:	f362 0300 	bfi	r3, r2, #0, #1
 800bce4:	703b      	strb	r3, [r7, #0]
	if ((motor.tilt_state.statusword & 0x4000) != 0)
 800bce6:	4b44      	ldr	r3, [pc, #272]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <mtr_send_to_bus+0xa8>
		_tilt_state.initialAngleSuccess = 1;
 800bcf4:	783b      	ldrb	r3, [r7, #0]
 800bcf6:	f043 0302 	orr.w	r3, r3, #2
 800bcfa:	703b      	strb	r3, [r7, #0]
	if ((motor.tilt_state.statusword & 0x8) != 0)
 800bcfc:	4b3e      	ldr	r3, [pc, #248]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bcfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd02:	f003 0308 	and.w	r3, r3, #8
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <mtr_send_to_bus+0xcc>
		_tilt_state.fault |= 0b1;
 800bd0a:	783b      	ldrb	r3, [r7, #0]
 800bd0c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	f043 0301 	orr.w	r3, r3, #1
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	783b      	ldrb	r3, [r7, #0]
 800bd1a:	f362 03c4 	bfi	r3, r2, #3, #2
 800bd1e:	703b      	strb	r3, [r7, #0]
	if ((motor.tilt_state.statusword & 0x2000) != 0)
 800bd20:	4b35      	ldr	r3, [pc, #212]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bd22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <mtr_send_to_bus+0xf0>
		_tilt_state.fault |= 0b10;
 800bd2e:	783b      	ldrb	r3, [r7, #0]
 800bd30:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	f043 0302 	orr.w	r3, r3, #2
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	783b      	ldrb	r3, [r7, #0]
 800bd3e:	f362 03c4 	bfi	r3, r2, #3, #2
 800bd42:	703b      	strb	r3, [r7, #0]

	/* allocate memory; receiver must be free it */
	state_mail = osMailAlloc(mtr_get_mail(Mail_Bus_id), 0);
 800bd44:	2000      	movs	r0, #0
 800bd46:	f7f5 fa41 	bl	80011cc <mtr_get_mail>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fb fdfa 	bl	8007948 <osMailAlloc>
 800bd54:	60f8      	str	r0, [r7, #12]
	state_mail->sender_id = Bus_Sender_Motor_State_id;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	701a      	strb	r2, [r3, #0]
	state_mail->param.motor.state.mode = motor.mode_state;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4a26      	ldr	r2, [pc, #152]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bd60:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bd64:	711a      	strb	r2, [r3, #4]
	state_mail->param.motor.state.pan_state = _pan_state;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	793a      	ldrb	r2, [r7, #4]
 800bd6a:	715a      	strb	r2, [r3, #5]
	state_mail->param.motor.state.tilt_state = _tilt_state;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	783a      	ldrb	r2, [r7, #0]
 800bd70:	719a      	strb	r2, [r3, #6]

	/* send mail queue*/
	osMailPut(mtr_get_mail(Mail_Bus_id), state_mail);
 800bd72:	2000      	movs	r0, #0
 800bd74:	f7f5 fa2a 	bl	80011cc <mtr_get_mail>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	68f9      	ldr	r1, [r7, #12]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fb fdf9 	bl	8007974 <osMailPut>
	/* send motor position */
	/* =================== */
	MAIL_Bus_t *pos_mail;

	/* allocate memory; receiver must be free it */
	pos_mail = osMailAlloc(mtr_get_mail(Mail_Bus_id), 0);
 800bd82:	2000      	movs	r0, #0
 800bd84:	f7f5 fa22 	bl	80011cc <mtr_get_mail>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fb fddb 	bl	8007948 <osMailAlloc>
 800bd92:	60b8      	str	r0, [r7, #8]
	pos_mail->sender_id = Bus_Sender_Motor_Position_id;
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2201      	movs	r2, #1
 800bd98:	701a      	strb	r2, [r3, #0]
	pos_mail->param.motor.position.pan = motor.pan_state.pos;
 800bd9a:	4b17      	ldr	r3, [pc, #92]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bd9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	605a      	str	r2, [r3, #4]
	pos_mail->param.motor.position.tilt = motor.tilt_state.pos;
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <mtr_send_to_bus+0x1a4>)
 800bda4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	609a      	str	r2, [r3, #8]

	LOG("st=%02X;PT=%ld,%ld\r\n", *(uint8_t* )&motor.mode_state, pos_mail->param.motor.position.pan,
 800bdaa:	f7fb fa10 	bl	80071ce <osKernelSysTick>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	095a      	lsrs	r2, r3, #5
 800bdb2:	4912      	ldr	r1, [pc, #72]	; (800bdfc <mtr_send_to_bus+0x1a8>)
 800bdb4:	fba1 1202 	umull	r1, r2, r1, r2
 800bdb8:	09d1      	lsrs	r1, r2, #7
 800bdba:	4a11      	ldr	r2, [pc, #68]	; (800be00 <mtr_send_to_bus+0x1ac>)
 800bdbc:	fb01 f202 	mul.w	r2, r1, r2
 800bdc0:	1a99      	subs	r1, r3, r2
 800bdc2:	4b10      	ldr	r3, [pc, #64]	; (800be04 <mtr_send_to_bus+0x1b0>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	6892      	ldr	r2, [r2, #8]
 800bdd0:	9201      	str	r2, [sp, #4]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	22f7      	movs	r2, #247	; 0xf7
 800bdd8:	480b      	ldr	r0, [pc, #44]	; (800be08 <mtr_send_to_bus+0x1b4>)
 800bdda:	f004 f887 	bl	800feec <iprintf>
			pos_mail->param.motor.position.tilt);

	/* send mail queue*/
	osMailPut(mtr_get_mail(Mail_Bus_id), pos_mail);
 800bdde:	2000      	movs	r0, #0
 800bde0:	f7f5 f9f4 	bl	80011cc <mtr_get_mail>
 800bde4:	4603      	mov	r3, r0
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fb fdc3 	bl	8007974 <osMailPut>
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20010664 	.word	0x20010664
 800bdfc:	0a7c5ac5 	.word	0x0a7c5ac5
 800be00:	000186a0 	.word	0x000186a0
 800be04:	20010690 	.word	0x20010690
 800be08:	0801267c 	.word	0x0801267c

0800be0c <t_motor_track>:
#	define LOG_E(str, ...)
#endif	//if DEBUG_MOTOR_TRACK==1

static const uint32_t TRACK_UPDATE_TIMEOUT = 25;
void t_motor_track(void const *argument)
{
 800be0c:	b590      	push	{r4, r7, lr}
 800be0e:	b091      	sub	sp, #68	; 0x44
 800be10:	af02      	add	r7, sp, #8
 800be12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_motor_track */
	uint32_t _track_timer = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t _cmd_recv_timestamp = HAL_GetTick();
 800be18:	f7f6 f9f6 	bl	8002208 <HAL_GetTick>
 800be1c:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t _debug_send_timer = 0;
 800be1e:	2300      	movs	r3, #0
 800be20:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t _debug_motor_command_counter = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	857b      	strh	r3, [r7, #42]	; 0x2a

	LOG("t_track created!\r\n");
 800be26:	f7fb f9d2 	bl	80071ce <osKernelSysTick>
 800be2a:	4602      	mov	r2, r0
 800be2c:	0953      	lsrs	r3, r2, #5
 800be2e:	49ad      	ldr	r1, [pc, #692]	; (800c0e4 <t_motor_track+0x2d8>)
 800be30:	fba1 1303 	umull	r1, r3, r1, r3
 800be34:	09db      	lsrs	r3, r3, #7
 800be36:	49ac      	ldr	r1, [pc, #688]	; (800c0e8 <t_motor_track+0x2dc>)
 800be38:	fb01 f303 	mul.w	r3, r1, r3
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	221d      	movs	r2, #29
 800be40:	4619      	mov	r1, r3
 800be42:	48aa      	ldr	r0, [pc, #680]	; (800c0ec <t_motor_track+0x2e0>)
 800be44:	f004 f852 	bl	800feec <iprintf>

	*(uint8_t*) &motor.mode_state = 0;
 800be48:	4ba9      	ldr	r3, [pc, #676]	; (800c0f0 <t_motor_track+0x2e4>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	701a      	strb	r2, [r3, #0]
	motor.mode_state.movementMode = MOVE_MODE_TRACK;
 800be4e:	4aa9      	ldr	r2, [pc, #676]	; (800c0f4 <t_motor_track+0x2e8>)
 800be50:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800be54:	2103      	movs	r1, #3
 800be56:	f361 0303 	bfi	r3, r1, #0, #4
 800be5a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

	motor.pan_command.power_enable = motor.tilt_command.power_enable = 1;
 800be5e:	4ba5      	ldr	r3, [pc, #660]	; (800c0f4 <t_motor_track+0x2e8>)
 800be60:	2201      	movs	r2, #1
 800be62:	761a      	strb	r2, [r3, #24]
 800be64:	4ba3      	ldr	r3, [pc, #652]	; (800c0f4 <t_motor_track+0x2e8>)
 800be66:	7e1a      	ldrb	r2, [r3, #24]
 800be68:	4ba2      	ldr	r3, [pc, #648]	; (800c0f4 <t_motor_track+0x2e8>)
 800be6a:	711a      	strb	r2, [r3, #4]
	hal_motor_update_motor_state(&motor, 1);
 800be6c:	2101      	movs	r1, #1
 800be6e:	48a1      	ldr	r0, [pc, #644]	; (800c0f4 <t_motor_track+0x2e8>)
 800be70:	f001 fc22 	bl	800d6b8 <hal_motor_update_motor_state>

	Kontrol_Konstanta_init();
 800be74:	f002 fffa 	bl	800ee6c <Kontrol_Konstanta_init>
	Kontrol_init();
 800be78:	f002 ffe4 	bl	800ee44 <Kontrol_init>

	/* Infinite loop */
	for ( ;; ) {
		float wMotor[2] = { 0.0f, 0.0f };
 800be7c:	f04f 0300 	mov.w	r3, #0
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	f04f 0300 	mov.w	r3, #0
 800be86:	61fb      	str	r3, [r7, #28]

		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Motor_Ext_id), 5);
 800be88:	2002      	movs	r0, #2
 800be8a:	f7f5 f99f 	bl	80011cc <mtr_get_mail>
 800be8e:	4601      	mov	r1, r0
 800be90:	f107 030c 	add.w	r3, r7, #12
 800be94:	2205      	movs	r2, #5
 800be96:	4618      	mov	r0, r3
 800be98:	f7fb fdaa 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	f040 80b5 	bne.w	800c00e <t_motor_track+0x202>
			/* create buffer pointer to hold queue value */
			MAIL_Motor_Ext_t *pRMail;
			pRMail = event.value.p;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24

			switch (pRMail->sender_id)
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b02      	cmp	r3, #2
 800beae:	f000 80a3 	beq.w	800bff8 <t_motor_track+0x1ec>
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	f300 80a2 	bgt.w	800bffc <t_motor_track+0x1f0>
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <t_motor_track+0xb6>
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d064      	beq.n	800bf8a <t_motor_track+0x17e>

				break;
			case Motor_Ext_Sender_Offset_id:
				break;
			default:
				break;
 800bec0:	e09c      	b.n	800bffc <t_motor_track+0x1f0>
				LOG("mode= %02X\r\n", *(uint8_t* ) &pRMail->param.mode);
 800bec2:	f7fb f984 	bl	80071ce <osKernelSysTick>
 800bec6:	4603      	mov	r3, r0
 800bec8:	095a      	lsrs	r2, r3, #5
 800beca:	4986      	ldr	r1, [pc, #536]	; (800c0e4 <t_motor_track+0x2d8>)
 800becc:	fba1 1202 	umull	r1, r2, r1, r2
 800bed0:	09d1      	lsrs	r1, r2, #7
 800bed2:	4a85      	ldr	r2, [pc, #532]	; (800c0e8 <t_motor_track+0x2dc>)
 800bed4:	fb01 f202 	mul.w	r2, r1, r2
 800bed8:	1a99      	subs	r1, r3, r2
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	3304      	adds	r3, #4
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2236      	movs	r2, #54	; 0x36
 800bee2:	4885      	ldr	r0, [pc, #532]	; (800c0f8 <t_motor_track+0x2ec>)
 800bee4:	f004 f802 	bl	800feec <iprintf>
				if (pRMail->param.mode.ready_to_be_terminated == 1) {
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	791b      	ldrb	r3, [r3, #4]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d045      	beq.n	800bf82 <t_motor_track+0x176>
					osMutexWait(mtr_get_mutex(Mutex_motor_ext_id), osWaitForever);
 800bef6:	2002      	movs	r0, #2
 800bef8:	f7f5 f9b0 	bl	800125c <mtr_get_mutex>
 800befc:	4603      	mov	r3, r0
 800befe:	f04f 31ff 	mov.w	r1, #4294967295
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fb fa7e 	bl	8007404 <osMutexWait>
					osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800bf08:	2002      	movs	r0, #2
 800bf0a:	f7f5 f95f 	bl	80011cc <mtr_get_mail>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fb fde0 	bl	8007ad8 <osMailFree>
					ext_state = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800bf18:	2001      	movs	r0, #1
 800bf1a:	f7f5 f957 	bl	80011cc <mtr_get_mail>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2100      	movs	r1, #0
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fb fd10 	bl	8007948 <osMailAlloc>
 800bf28:	6238      	str	r0, [r7, #32]
					ext_state->sender_id = Motor_Sender_Ext_id;
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]
					ext_state->param.ext.ready_to_be_terminated = 1;
 800bf30:	6a3a      	ldr	r2, [r7, #32]
 800bf32:	7913      	ldrb	r3, [r2, #4]
 800bf34:	f043 0310 	orr.w	r3, r3, #16
 800bf38:	7113      	strb	r3, [r2, #4]
					osMailPut(mtr_get_mail(Mail_Motor_id), ext_state);
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	f7f5 f946 	bl	80011cc <mtr_get_mail>
 800bf40:	4603      	mov	r3, r0
 800bf42:	6a39      	ldr	r1, [r7, #32]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fb fd15 	bl	8007974 <osMailPut>
					osMutexRelease(mtr_get_mutex(Mutex_motor_ext_id));
 800bf4a:	2002      	movs	r0, #2
 800bf4c:	f7f5 f986 	bl	800125c <mtr_get_mutex>
 800bf50:	4603      	mov	r3, r0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fb faa4 	bl	80074a0 <osMutexRelease>
					LOG("terminated!\r\n");
 800bf58:	f7fb f939 	bl	80071ce <osKernelSysTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	0953      	lsrs	r3, r2, #5
 800bf60:	4960      	ldr	r1, [pc, #384]	; (800c0e4 <t_motor_track+0x2d8>)
 800bf62:	fba1 1303 	umull	r1, r3, r1, r3
 800bf66:	09db      	lsrs	r3, r3, #7
 800bf68:	495f      	ldr	r1, [pc, #380]	; (800c0e8 <t_motor_track+0x2dc>)
 800bf6a:	fb01 f303 	mul.w	r3, r1, r3
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	2248      	movs	r2, #72	; 0x48
 800bf72:	4619      	mov	r1, r3
 800bf74:	4861      	ldr	r0, [pc, #388]	; (800c0fc <t_motor_track+0x2f0>)
 800bf76:	f003 ffb9 	bl	800feec <iprintf>
					osThreadTerminate(NULL);
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	f7fb f965 	bl	800724a <osThreadTerminate>
					break;
 800bf80:	e03d      	b.n	800bffe <t_motor_track+0x1f2>
				_cmd_recv_timestamp = HAL_GetTick();
 800bf82:	f7f6 f941 	bl	8002208 <HAL_GetTick>
 800bf86:	6338      	str	r0, [r7, #48]	; 0x30
				break;
 800bf88:	e039      	b.n	800bffe <t_motor_track+0x1f2>
				Kontrol_CalcQDot(*(uint8_t*) &pRMail->param.track.trk_state, motor.pan_state.pos, motor.tilt_state.pos,
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	4618      	mov	r0, r3
 800bf92:	4b58      	ldr	r3, [pc, #352]	; (800c0f4 <t_motor_track+0x2e8>)
 800bf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf9e:	4b55      	ldr	r3, [pc, #340]	; (800c0f4 <t_motor_track+0x2e8>)
 800bfa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa2:	ee07 3a10 	vmov	s14, r3
 800bfa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
						motor.pan_state.speed, motor.pan_state.speed, pRMail->param.track.trk_x, pRMail->param.track.trk_y,
 800bfaa:	4b52      	ldr	r3, [pc, #328]	; (800c0f4 <t_motor_track+0x2e8>)
 800bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				Kontrol_CalcQDot(*(uint8_t*) &pRMail->param.track.trk_state, motor.pan_state.pos, motor.tilt_state.pos,
 800bfae:	ee06 3a90 	vmov	s13, r3
 800bfb2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
						motor.pan_state.speed, motor.pan_state.speed, pRMail->param.track.trk_x, pRMail->param.track.trk_y,
 800bfb6:	4b4f      	ldr	r3, [pc, #316]	; (800c0f4 <t_motor_track+0x2e8>)
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				Kontrol_CalcQDot(*(uint8_t*) &pRMail->param.track.trk_state, motor.pan_state.pos, motor.tilt_state.pos,
 800bfba:	ee06 3a10 	vmov	s12, r3
 800bfbe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
						motor.pan_state.speed, motor.pan_state.speed, pRMail->param.track.trk_x, pRMail->param.track.trk_y,
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
				Kontrol_CalcQDot(*(uint8_t*) &pRMail->param.track.trk_state, motor.pan_state.pos, motor.tilt_state.pos,
 800bfc8:	4619      	mov	r1, r3
						motor.pan_state.speed, motor.pan_state.speed, pRMail->param.track.trk_x, pRMail->param.track.trk_y,
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
				Kontrol_CalcQDot(*(uint8_t*) &pRMail->param.track.trk_state, motor.pan_state.pos, motor.tilt_state.pos,
 800bfd0:	461c      	mov	r4, r3
 800bfd2:	f107 0218 	add.w	r2, r7, #24
 800bfd6:	f107 0318 	add.w	r3, r7, #24
 800bfda:	3304      	adds	r3, #4
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	eef0 1a46 	vmov.f32	s3, s12
 800bfe6:	eeb0 1a66 	vmov.f32	s2, s13
 800bfea:	eef0 0a47 	vmov.f32	s1, s14
 800bfee:	eeb0 0a67 	vmov.f32	s0, s15
 800bff2:	f002 ff69 	bl	800eec8 <Kontrol_CalcQDot>
				break;
 800bff6:	e002      	b.n	800bffe <t_motor_track+0x1f2>
				break;
 800bff8:	bf00      	nop
 800bffa:	e000      	b.n	800bffe <t_motor_track+0x1f2>
				break;
 800bffc:	bf00      	nop
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Motor_Ext_id), pRMail);
 800bffe:	2002      	movs	r0, #2
 800c000:	f7f5 f8e4 	bl	80011cc <mtr_get_mail>
 800c004:	4603      	mov	r3, r0
 800c006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fb fd65 	bl	8007ad8 <osMailFree>
		}

		if (_cmd_recv_timestamp > 0 && (HAL_GetTick() >= _cmd_recv_timestamp + BUS_MAX_TIMEOUT)) {
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	2b00      	cmp	r3, #0
 800c012:	d019      	beq.n	800c048 <t_motor_track+0x23c>
 800c014:	f7f6 f8f8 	bl	8002208 <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c020:	429a      	cmp	r2, r3
 800c022:	d311      	bcc.n	800c048 <t_motor_track+0x23c>
			motor.pan_command.power_enable = motor.tilt_command.power_enable = 0;
 800c024:	4b33      	ldr	r3, [pc, #204]	; (800c0f4 <t_motor_track+0x2e8>)
 800c026:	2200      	movs	r2, #0
 800c028:	761a      	strb	r2, [r3, #24]
 800c02a:	4b32      	ldr	r3, [pc, #200]	; (800c0f4 <t_motor_track+0x2e8>)
 800c02c:	7e1a      	ldrb	r2, [r3, #24]
 800c02e:	4b31      	ldr	r3, [pc, #196]	; (800c0f4 <t_motor_track+0x2e8>)
 800c030:	711a      	strb	r2, [r3, #4]
			motor.pan_command.spd_trk_in_c = motor.tilt_command.spd_trk_in_c = 0;
 800c032:	4b30      	ldr	r3, [pc, #192]	; (800c0f4 <t_motor_track+0x2e8>)
 800c034:	2200      	movs	r2, #0
 800c036:	621a      	str	r2, [r3, #32]
 800c038:	4b2e      	ldr	r3, [pc, #184]	; (800c0f4 <t_motor_track+0x2e8>)
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	4a2d      	ldr	r2, [pc, #180]	; (800c0f4 <t_motor_track+0x2e8>)
 800c03e:	60d3      	str	r3, [r2, #12]
			hal_motor_update_motor_state(&motor, 1);
 800c040:	2101      	movs	r1, #1
 800c042:	482c      	ldr	r0, [pc, #176]	; (800c0f4 <t_motor_track+0x2e8>)
 800c044:	f001 fb38 	bl	800d6b8 <hal_motor_update_motor_state>
		}

		if (HAL_GetTick() >= _track_timer) {
 800c048:	f7f6 f8de 	bl	8002208 <HAL_GetTick>
 800c04c:	4602      	mov	r2, r0
 800c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c050:	4293      	cmp	r3, r2
 800c052:	d816      	bhi.n	800c082 <t_motor_track+0x276>
			_track_timer = HAL_GetTick() + TRACK_UPDATE_TIMEOUT;
 800c054:	f7f6 f8d8 	bl	8002208 <HAL_GetTick>
 800c058:	4603      	mov	r3, r0
 800c05a:	2219      	movs	r2, #25
 800c05c:	4413      	add	r3, r2
 800c05e:	637b      	str	r3, [r7, #52]	; 0x34

			hal_motor_update_motor_state(&motor, 0);
 800c060:	2100      	movs	r1, #0
 800c062:	4824      	ldr	r0, [pc, #144]	; (800c0f4 <t_motor_track+0x2e8>)
 800c064:	f001 fb28 	bl	800d6b8 <hal_motor_update_motor_state>

			_debug_motor_command_counter += hal_motor_set_speed(motor.pan_command.spd_trk_in_c,
 800c068:	4b22      	ldr	r3, [pc, #136]	; (800c0f4 <t_motor_track+0x2e8>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	4a21      	ldr	r2, [pc, #132]	; (800c0f4 <t_motor_track+0x2e8>)
 800c06e:	6a12      	ldr	r2, [r2, #32]
 800c070:	4611      	mov	r1, r2
 800c072:	4618      	mov	r0, r3
 800c074:	f001 f9f4 	bl	800d460 <hal_motor_set_speed>
 800c078:	4603      	mov	r3, r0
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c07e:	4413      	add	r3, r2
 800c080:	857b      	strh	r3, [r7, #42]	; 0x2a
					motor.tilt_command.spd_trk_in_c);

//			LOG("cmd=%d,%ld,%ld\r\n", motor.tilt_command.power_enable,motor.pan_command.spd_man_in_c, motor.tilt_command.spd_man_in_c);
		}

		if (_debug_send_timer <= HAL_GetTick()) {
 800c082:	f7f6 f8c1 	bl	8002208 <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d81f      	bhi.n	800c0ce <t_motor_track+0x2c2>
			_debug_send_timer = HAL_GetTick() + 1000;
 800c08e:	f7f6 f8bb 	bl	8002208 <HAL_GetTick>
 800c092:	4603      	mov	r3, r0
 800c094:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c

			LOG("[%d]in c= %ld,%ld\r\n", _debug_motor_command_counter, motor.pan_command.spd_man_in_c,
 800c09a:	f7fb f898 	bl	80071ce <osKernelSysTick>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	095a      	lsrs	r2, r3, #5
 800c0a2:	4910      	ldr	r1, [pc, #64]	; (800c0e4 <t_motor_track+0x2d8>)
 800c0a4:	fba1 1202 	umull	r1, r2, r1, r2
 800c0a8:	09d1      	lsrs	r1, r2, #7
 800c0aa:	4a0f      	ldr	r2, [pc, #60]	; (800c0e8 <t_motor_track+0x2dc>)
 800c0ac:	fb01 f202 	mul.w	r2, r1, r2
 800c0b0:	1a99      	subs	r1, r3, r2
 800c0b2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 800c0b4:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <t_motor_track+0x2e8>)
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	4a0e      	ldr	r2, [pc, #56]	; (800c0f4 <t_motor_track+0x2e8>)
 800c0ba:	69d2      	ldr	r2, [r2, #28]
 800c0bc:	9201      	str	r2, [sp, #4]
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2276      	movs	r2, #118	; 0x76
 800c0c4:	480e      	ldr	r0, [pc, #56]	; (800c100 <t_motor_track+0x2f4>)
 800c0c6:	f003 ff11 	bl	800feec <iprintf>
					motor.tilt_command.spd_man_in_c);
			_debug_motor_command_counter = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	857b      	strh	r3, [r7, #42]	; 0x2a
		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Motor_Ext_id, 0);
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f7f5 f868 	bl	80011a4 <opt_get_queue>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	2108      	movs	r1, #8
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fb fb28 	bl	8007730 <osMessagePut>
	for ( ;; ) {
 800c0e0:	e6cc      	b.n	800be7c <t_motor_track+0x70>
 800c0e2:	bf00      	nop
 800c0e4:	0a7c5ac5 	.word	0x0a7c5ac5
 800c0e8:	000186a0 	.word	0x000186a0
 800c0ec:	080126a0 	.word	0x080126a0
 800c0f0:	20010690 	.word	0x20010690
 800c0f4:	20010664 	.word	0x20010664
 800c0f8:	080126c4 	.word	0x080126c4
 800c0fc:	080126e0 	.word	0x080126e0
 800c100:	08012700 	.word	0x08012700

0800c104 <t_bus>:

BUS_Rx_Buffer_t bus_recv;
BUS_Tx_Buffer_t bus_send;

void t_bus(void const *argument)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b092      	sub	sp, #72	; 0x48
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_bus_recv */
	uint32_t _timer_motor_state, _timer_weapon_state, _timer_pos, _timer_imu;
	uint8_t _send_motor_state[5];
	uint8_t _send_weapon_state[3];
	int32_t _pan = 0, _tilt = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	637b      	str	r3, [r7, #52]	; 0x34
 800c110:	2300      	movs	r3, #0
 800c112:	633b      	str	r3, [r7, #48]	; 0x30
	int16_t _yaw = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int32_t _pitch = 0, _roll = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c11c:	2300      	movs	r3, #0
 800c11e:	627b      	str	r3, [r7, #36]	; 0x24

	LOG("BUS init\r\n");
	bus_init();
 800c120:	f000 face 	bl	800c6c0 <bus_init>

	osDelay(T_Bus_id);
 800c124:	2001      	movs	r0, #1
 800c126:	f7fb f8b1 	bl	800728c <osDelay>

	_timer_motor_state = _timer_weapon_state = _timer_pos = _timer_imu = osKernelSysTick() + 100;
 800c12a:	f7fb f850 	bl	80071ce <osKernelSysTick>
 800c12e:	4603      	mov	r3, r0
 800c130:	3364      	adds	r3, #100	; 0x64
 800c132:	63bb      	str	r3, [r7, #56]	; 0x38
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13a:	643b      	str	r3, [r7, #64]	; 0x40
 800c13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c13e:	647b      	str	r3, [r7, #68]	; 0x44
	/* Infinite loop */
	for ( ;; ) {
		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Bus_id), 20);
 800c140:	2000      	movs	r0, #0
 800c142:	f7f5 f843 	bl	80011cc <mtr_get_mail>
 800c146:	4601      	mov	r1, r0
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	2214      	movs	r2, #20
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fb fc4e 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b20      	cmp	r3, #32
 800c158:	d149      	bne.n	800c1ee <t_bus+0xea>
			/* create buffer pointer to hold queue value */
			MAIL_Bus_t *pRMail;
			pRMail = event.value.p;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	623b      	str	r3, [r7, #32]

			switch (pRMail->sender_id)
 800c15e:	6a3b      	ldr	r3, [r7, #32]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b03      	cmp	r3, #3
 800c164:	d83b      	bhi.n	800c1de <t_bus+0xda>
 800c166:	a201      	add	r2, pc, #4	; (adr r2, 800c16c <t_bus+0x68>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c19b 	.word	0x0800c19b
 800c170:	0800c1bd 	.word	0x0800c1bd
 800c174:	0800c17d 	.word	0x0800c17d
 800c178:	0800c1cb 	.word	0x0800c1cb
			{
			case Bus_Sender_Weapon_State_id:
				/* from weapon_send_to_bus -> t_weapon.c */
				_send_weapon_state[0] = *(uint8_t*) &pRMail->param.weapon.state;
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	3304      	adds	r3, #4
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	753b      	strb	r3, [r7, #20]
				_send_weapon_state[1] = pRMail->param.weapon.munition_counter >> 8;
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	88db      	ldrh	r3, [r3, #6]
 800c188:	0a1b      	lsrs	r3, r3, #8
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	757b      	strb	r3, [r7, #21]
				_send_weapon_state[2] = pRMail->param.weapon.munition_counter & 0xFF;
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	88db      	ldrh	r3, [r3, #6]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	75bb      	strb	r3, [r7, #22]
				break;
 800c198:	e021      	b.n	800c1de <t_bus+0xda>
			case Bus_Sender_Motor_State_id:
				/* from mtr_send_to_bus() -> t_motor.c */
				_send_motor_state[0] = *(uint8_t*) &pRMail->param.motor.state.mode;
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	3304      	adds	r3, #4
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	763b      	strb	r3, [r7, #24]
				_send_motor_state[1] = *(uint8_t*) &pRMail->param.motor.state.pan_state;
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	3305      	adds	r3, #5
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	767b      	strb	r3, [r7, #25]
				_send_motor_state[2] = 0;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	76bb      	strb	r3, [r7, #26]
				_send_motor_state[3] = *(uint8_t*) &pRMail->param.motor.state.tilt_state;
 800c1ae:	6a3b      	ldr	r3, [r7, #32]
 800c1b0:	3306      	adds	r3, #6
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	76fb      	strb	r3, [r7, #27]
				_send_motor_state[4] = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	773b      	strb	r3, [r7, #28]
				LOG("%02X %02X\r\n", _send_motor_state[0], _send_motor_state[1]);
				break;
 800c1ba:	e010      	b.n	800c1de <t_bus+0xda>
			case Bus_Sender_Motor_Position_id:
				/* from mtr_send_to_bus() -> t_motor.c */
				_pan = pRMail->param.motor.position.pan;
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	637b      	str	r3, [r7, #52]	; 0x34
				_tilt = pRMail->param.motor.position.tilt;
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	633b      	str	r3, [r7, #48]	; 0x30
				break;
 800c1c8:	e009      	b.n	800c1de <t_bus+0xda>
			case Bus_Sender_Imu_id:
				_yaw = pRMail->param.imu.yaw;
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	889b      	ldrh	r3, [r3, #4]
 800c1ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
				_pitch = pRMail->param.imu.pitch;
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
				_roll = pRMail->param.imu.roll;
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800c1dc:	bf00      	nop
			}

			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Bus_id), pRMail);
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f7f4 fff4 	bl	80011cc <mtr_get_mail>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	6a39      	ldr	r1, [r7, #32]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fb fc75 	bl	8007ad8 <osMailFree>
		}

		/* send motor state to panel */
		if (HAL_GetTick() >= _timer_motor_state) {
 800c1ee:	f7f6 f80b 	bl	8002208 <HAL_GetTick>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d811      	bhi.n	800c21e <t_bus+0x11a>
			_timer_motor_state = HAL_GetTick() + 100;
 800c1fa:	f7f6 f805 	bl	8002208 <HAL_GetTick>
 800c1fe:	4603      	mov	r3, r0
 800c200:	3364      	adds	r3, #100	; 0x64
 800c202:	647b      	str	r3, [r7, #68]	; 0x44

			if (bus_send_motor_status(_send_motor_state) == HAL_OK)
 800c204:	f107 0318 	add.w	r3, r7, #24
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 fa91 	bl	800c730 <bus_send_motor_status>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <t_bus+0x11a>
				LOG("send M state: %02X\r\n", _send_motor_state[0]);
			else
				_timer_motor_state = HAL_GetTick() + 1;
 800c214:	f7f5 fff8 	bl	8002208 <HAL_GetTick>
 800c218:	4603      	mov	r3, r0
 800c21a:	3301      	adds	r3, #1
 800c21c:	647b      	str	r3, [r7, #68]	; 0x44
		}

		if (HAL_GetTick() >= _timer_weapon_state) {
 800c21e:	f7f5 fff3 	bl	8002208 <HAL_GetTick>
 800c222:	4602      	mov	r2, r0
 800c224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c226:	4293      	cmp	r3, r2
 800c228:	d811      	bhi.n	800c24e <t_bus+0x14a>
			_timer_weapon_state = HAL_GetTick() + 100;
 800c22a:	f7f5 ffed 	bl	8002208 <HAL_GetTick>
 800c22e:	4603      	mov	r3, r0
 800c230:	3364      	adds	r3, #100	; 0x64
 800c232:	643b      	str	r3, [r7, #64]	; 0x40

			if (bus_send_weapon_status(_send_weapon_state) == HAL_OK)
 800c234:	f107 0314 	add.w	r3, r7, #20
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 fa8d 	bl	800c758 <bus_send_weapon_status>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d004      	beq.n	800c24e <t_bus+0x14a>
				LOG("send W state: %02X\r\n",_send_motor_state[0]);
			else
				_timer_weapon_state = HAL_GetTick() + 1;
 800c244:	f7f5 ffe0 	bl	8002208 <HAL_GetTick>
 800c248:	4603      	mov	r3, r0
 800c24a:	3301      	adds	r3, #1
 800c24c:	643b      	str	r3, [r7, #64]	; 0x40
		}

		/* send motor position to panel */
		if (HAL_GetTick() >= _timer_pos) {
 800c24e:	f7f5 ffdb 	bl	8002208 <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c256:	4293      	cmp	r3, r2
 800c258:	d810      	bhi.n	800c27c <t_bus+0x178>
			_timer_pos = HAL_GetTick() + 100;
 800c25a:	f7f5 ffd5 	bl	8002208 <HAL_GetTick>
 800c25e:	4603      	mov	r3, r0
 800c260:	3364      	adds	r3, #100	; 0x64
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c

			if (bus_send_position(_pan, _tilt) == HAL_OK)
 800c264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c266:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c268:	f000 fa8a 	bl	800c780 <bus_send_position>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d004      	beq.n	800c27c <t_bus+0x178>
				LOG("send position (%ld,%ld)\r\n", _pan, _tilt);
			else
				_timer_pos = HAL_GetTick() + 1;
 800c272:	f7f5 ffc9 	bl	8002208 <HAL_GetTick>
 800c276:	4603      	mov	r3, r0
 800c278:	3301      	adds	r3, #1
 800c27a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		/* send imu's platform to panel */
		if (osKernelSysTick() >= _timer_imu) {
 800c27c:	f7fa ffa7 	bl	80071ce <osKernelSysTick>
 800c280:	4602      	mov	r2, r0
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	4293      	cmp	r3, r2
 800c286:	d813      	bhi.n	800c2b0 <t_bus+0x1ac>
			_timer_imu = osKernelSysTick() + 100;
 800c288:	f7fa ffa1 	bl	80071ce <osKernelSysTick>
 800c28c:	4603      	mov	r3, r0
 800c28e:	3364      	adds	r3, #100	; 0x64
 800c290:	63bb      	str	r3, [r7, #56]	; 0x38

			if (bus_send_imu(_yaw, _pitch, _roll) != HAL_OK)
 800c292:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800c296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 faaa 	bl	800c7f4 <bus_send_imu>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d004      	beq.n	800c2b0 <t_bus+0x1ac>
				_timer_imu = osKernelSysTick() + 1;
 800c2a6:	f7fa ff92 	bl	80071ce <osKernelSysTick>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	63bb      	str	r3, [r7, #56]	; 0x38

		}

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Bus_id, 0);
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	f7f4 ff77 	bl	80011a4 <opt_get_queue>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fb fa37 	bl	8007730 <osMessagePut>
	for ( ;; ) {
 800c2c2:	e73d      	b.n	800c140 <t_bus+0x3c>

0800c2c4 <t_manager>:
#	define LOG(str, ...)
#	define LOG_E(str, ...)
#endif	//if DEBUG_MANAGER==1

void t_manager(void const *argument)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_manager */
	LOG("created!\r\n");

	osThreadSetPriority(osThreadGetId(), osPriorityIdle);
 800c2cc:	f7fa ffb6 	bl	800723c <osThreadGetId>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f06f 0102 	mvn.w	r1, #2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fa ffc3 	bl	8007262 <osThreadSetPriority>

	osDelay(T_Manager_id);
 800c2dc:	200f      	movs	r0, #15
 800c2de:	f7fa ffd5 	bl	800728c <osDelay>
	/* Infinite loop */
	uint16_t allNotif = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	82fb      	strh	r3, [r7, #22]

	for ( ;; ) {
		osEvent event = osMessageGet(opt_get_queue(Q_MANAGER_NOTIF), 1000);
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	f7f4 ff5c 	bl	80011a4 <opt_get_queue>
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	f107 0308 	add.w	r3, r7, #8
 800c2f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fb fa5a 	bl	80077b0 <osMessageGet>
		if (event.status == osEventMessage) {
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b10      	cmp	r3, #16
 800c300:	d1f1      	bne.n	800c2e6 <t_manager+0x22>
			uint16_t notif = event.value.v;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	82bb      	strh	r3, [r7, #20]
			allNotif |= notif;
 800c306:	8afa      	ldrh	r2, [r7, #22]
 800c308:	8abb      	ldrh	r3, [r7, #20]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	82fb      	strh	r3, [r7, #22]
//#if DEBUG_WEAPON==1
//			if (notif == T_Weapon_id)
//				printf("\t\tWeapon notif recv\r\n");
//#endif	//if DEBUG_WEAPON==1

			if (allNotif == T_Manager_id) {
 800c30e:	8afb      	ldrh	r3, [r7, #22]
 800c310:	2b0f      	cmp	r3, #15
 800c312:	d1e8      	bne.n	800c2e6 <t_manager+0x22>
				allNotif = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	82fb      	strh	r3, [r7, #22]
				/* refresh wdt timer */
				HAL_IWDG_Refresh(&hiwdg);
 800c318:	4801      	ldr	r0, [pc, #4]	; (800c320 <t_manager+0x5c>)
 800c31a:	f7f7 f95c 	bl	80035d6 <HAL_IWDG_Refresh>
	for ( ;; ) {
 800c31e:	e7e2      	b.n	800c2e6 <t_manager+0x22>
 800c320:	20000304 	.word	0x20000304

0800c324 <tim_weapon_callback>:
Weapon_t weapon;

static void weapon_send_to_bus();

void tim_weapon_callback(void const *argument)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tim_weapon_callback */
	(void) argument;

	HAL_StatusTypeDef ret;

	if (weapon.state == WS_COCK_ACTIVE) {
 800c32c:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <tim_weapon_callback+0x48>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d116      	bne.n	800c362 <tim_weapon_callback+0x3e>
		ret = cock_handler(&weapon.cock);
 800c334:	480e      	ldr	r0, [pc, #56]	; (800c370 <tim_weapon_callback+0x4c>)
 800c336:	f002 ffef 	bl	800f318 <cock_handler>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK || ret == HAL_ERROR)
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <tim_weapon_callback+0x26>
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d106      	bne.n	800c358 <tim_weapon_callback+0x34>
			osTimerStop(mtr_get_timer(Tim_Weapon_id));
 800c34a:	2000      	movs	r0, #0
 800c34c:	f7f4 ff6a 	bl	8001224 <mtr_get_timer>
 800c350:	4603      	mov	r3, r0
 800c352:	4618      	mov	r0, r3
 800c354:	f7fb f80e 	bl	8007374 <osTimerStop>
		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800c358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c35c:	4805      	ldr	r0, [pc, #20]	; (800c374 <tim_weapon_callback+0x50>)
 800c35e:	f7f7 f8d1 	bl	8003504 <HAL_GPIO_TogglePin>
//		}
////		ret = trig_handler(&weapon.trig);
////		if (ret == HAL_OK || ret == HAL_ERROR)
////			osTimerStop(mtr_get_timer(Tim_Weapon_id));
	}
}
 800c362:	bf00      	nop
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	200106d8 	.word	0x200106d8
 800c370:	200106dc 	.word	0x200106dc
 800c374:	48000400 	.word	0x48000400

0800c378 <t_weapon>:

void t_weapon(void const *argument)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN t_weapon */
	LOG("Created!\r\n");

	weapon.state = WS_IDLE;
 800c380:	4ba1      	ldr	r3, [pc, #644]	; (800c608 <t_weapon+0x290>)
 800c382:	2200      	movs	r2, #0
 800c384:	701a      	strb	r2, [r3, #0]
	weapon.trig.enable = weapon.trig.start = weapon.trig.s_timeout = weapon.trig.h_timeout = 0;
 800c386:	4ba0      	ldr	r3, [pc, #640]	; (800c608 <t_weapon+0x290>)
 800c388:	2200      	movs	r2, #0
 800c38a:	615a      	str	r2, [r3, #20]
 800c38c:	4b9e      	ldr	r3, [pc, #632]	; (800c608 <t_weapon+0x290>)
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	4a9d      	ldr	r2, [pc, #628]	; (800c608 <t_weapon+0x290>)
 800c392:	6113      	str	r3, [r2, #16]
 800c394:	4b9c      	ldr	r3, [pc, #624]	; (800c608 <t_weapon+0x290>)
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	4b9b      	ldr	r3, [pc, #620]	; (800c608 <t_weapon+0x290>)
 800c39c:	735a      	strb	r2, [r3, #13]
 800c39e:	4b9a      	ldr	r3, [pc, #616]	; (800c608 <t_weapon+0x290>)
 800c3a0:	7b5a      	ldrb	r2, [r3, #13]
 800c3a2:	4b99      	ldr	r3, [pc, #612]	; (800c608 <t_weapon+0x290>)
 800c3a4:	731a      	strb	r2, [r3, #12]
	trig_all_stop();
 800c3a6:	f003 f8ef 	bl	800f588 <trig_all_stop>

	cock_init(&weapon.cock);
 800c3aa:	4898      	ldr	r0, [pc, #608]	; (800c60c <t_weapon+0x294>)
 800c3ac:	f002 ff9a 	bl	800f2e4 <cock_init>
	munisi_reset();
 800c3b0:	f003 f850 	bl	800f454 <munisi_reset>

	t_js_counter = 0;
 800c3b4:	4b96      	ldr	r3, [pc, #600]	; (800c610 <t_weapon+0x298>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	601a      	str	r2, [r3, #0]
	osDelay(T_Weapon_id);
 800c3ba:	2004      	movs	r0, #4
 800c3bc:	f7fa ff66 	bl	800728c <osDelay>

	/* Infinite loop */
//	uint32_t led_timer = 0;
	uint32_t _bus_recv_timer = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	61fb      	str	r3, [r7, #28]
	uint32_t _stack_highwater = 0;
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

	for ( ;; ) {
		/* get message from the queue */
		osEvent event = osMailGet(mtr_get_mail(Mail_Weapon_id), 10);
 800c3c4:	2003      	movs	r0, #3
 800c3c6:	f7f4 ff01 	bl	80011cc <mtr_get_mail>
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	f107 030c 	add.w	r3, r7, #12
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fb fb0c 	bl	80079f0 <osMailGet>
		if (event.status == osEventMail) {
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	f040 80ce 	bne.w	800c57c <t_weapon+0x204>
			/* create buffer pointer to hold queue value */
			MAIL_Weapon_t *pRMail;
			pRMail = event.value.p;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	61bb      	str	r3, [r7, #24]

			LOG("recv:%d -> %02X %02X\r\n", pRMail->sender_id, pRMail->param.command.mode.triggerEnable,
					pRMail->param.command.mode.cockEnable);

			switch (pRMail->sender_id)
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	f000 808f 	beq.w	800c50c <t_weapon+0x194>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	f300 808f 	bgt.w	800c512 <t_weapon+0x19a>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <t_weapon+0x84>
 800c3f8:	2b01      	cmp	r3, #1
				}
				break;
			case Weapon_Sender_Sensor_Cock_id:
				break;
			case Weapon_Sender_Sensor_Trigger_id:
				break;
 800c3fa:	e08a      	b.n	800c512 <t_weapon+0x19a>
				if (pRMail->param.command.mode.triggerEnable == 1) {
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	789b      	ldrb	r3, [r3, #2]
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00d      	beq.n	800c426 <t_weapon+0xae>
					if (weapon.state == WS_IDLE) {
 800c40a:	4b7f      	ldr	r3, [pc, #508]	; (800c608 <t_weapon+0x290>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d118      	bne.n	800c444 <t_weapon+0xcc>
						trig_set_power(1);
 800c412:	2001      	movs	r0, #1
 800c414:	f003 f868 	bl	800f4e8 <trig_set_power>
						weapon.trig.enable = 1;
 800c418:	4b7b      	ldr	r3, [pc, #492]	; (800c608 <t_weapon+0x290>)
 800c41a:	2201      	movs	r2, #1
 800c41c:	731a      	strb	r2, [r3, #12]
						weapon.state = WS_TRIGGER_ACTIVE;
 800c41e:	4b7a      	ldr	r3, [pc, #488]	; (800c608 <t_weapon+0x290>)
 800c420:	2202      	movs	r2, #2
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	e00e      	b.n	800c444 <t_weapon+0xcc>
					if (weapon.state == WS_TRIGGER_ACTIVE) {
 800c426:	4b78      	ldr	r3, [pc, #480]	; (800c608 <t_weapon+0x290>)
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d10a      	bne.n	800c444 <t_weapon+0xcc>
						trig_set_power(0);
 800c42e:	2000      	movs	r0, #0
 800c430:	f003 f85a 	bl	800f4e8 <trig_set_power>
						weapon.trig.enable = 0;
 800c434:	4b74      	ldr	r3, [pc, #464]	; (800c608 <t_weapon+0x290>)
 800c436:	2200      	movs	r2, #0
 800c438:	731a      	strb	r2, [r3, #12]
						trig_all_stop();
 800c43a:	f003 f8a5 	bl	800f588 <trig_all_stop>
						weapon.state = WS_IDLE;
 800c43e:	4b72      	ldr	r3, [pc, #456]	; (800c608 <t_weapon+0x290>)
 800c440:	2200      	movs	r2, #0
 800c442:	701a      	strb	r2, [r3, #0]
				if (pRMail->param.command.mode.cockStartMoving == 1) {
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	789b      	ldrb	r3, [r3, #2]
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00e      	beq.n	800c470 <t_weapon+0xf8>
					if (weapon.state == WS_COCK_ACTIVE) {
 800c452:	4b6d      	ldr	r3, [pc, #436]	; (800c608 <t_weapon+0x290>)
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d10a      	bne.n	800c470 <t_weapon+0xf8>
						cock_start(&weapon.cock);
 800c45a:	486c      	ldr	r0, [pc, #432]	; (800c60c <t_weapon+0x294>)
 800c45c:	f002 ffba 	bl	800f3d4 <cock_start>
						osTimerStart(mtr_get_timer(Tim_Weapon_id), 50);
 800c460:	2000      	movs	r0, #0
 800c462:	f7f4 fedf 	bl	8001224 <mtr_get_timer>
 800c466:	4603      	mov	r3, r0
 800c468:	2132      	movs	r1, #50	; 0x32
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fa ff3e 	bl	80072ec <osTimerStart>
				if (pRMail->param.command.mode.cockEnable == 1) {
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	789b      	ldrb	r3, [r3, #2]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <t_weapon+0x11e>
					if (weapon.state == WS_IDLE) {
 800c47e:	4b62      	ldr	r3, [pc, #392]	; (800c608 <t_weapon+0x290>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d112      	bne.n	800c4ac <t_weapon+0x134>
						cock_power(&weapon.cock, 1);
 800c486:	2101      	movs	r1, #1
 800c488:	4860      	ldr	r0, [pc, #384]	; (800c60c <t_weapon+0x294>)
 800c48a:	f002 ffbf 	bl	800f40c <cock_power>
						weapon.state = WS_COCK_ACTIVE;
 800c48e:	4b5e      	ldr	r3, [pc, #376]	; (800c608 <t_weapon+0x290>)
 800c490:	2201      	movs	r2, #1
 800c492:	701a      	strb	r2, [r3, #0]
 800c494:	e00a      	b.n	800c4ac <t_weapon+0x134>
					if (weapon.state == WS_COCK_ACTIVE) {
 800c496:	4b5c      	ldr	r3, [pc, #368]	; (800c608 <t_weapon+0x290>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d106      	bne.n	800c4ac <t_weapon+0x134>
						cock_power(&weapon.cock, 0);
 800c49e:	2100      	movs	r1, #0
 800c4a0:	485a      	ldr	r0, [pc, #360]	; (800c60c <t_weapon+0x294>)
 800c4a2:	f002 ffb3 	bl	800f40c <cock_power>
						weapon.state = WS_IDLE;
 800c4a6:	4b58      	ldr	r3, [pc, #352]	; (800c608 <t_weapon+0x290>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
				if (weapon.state != WS_COCK_ACTIVE)
 800c4ac:	4b56      	ldr	r3, [pc, #344]	; (800c608 <t_weapon+0x290>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d003      	beq.n	800c4bc <t_weapon+0x144>
					weapon.trig.shoot_limit = pRMail->param.command.shoot_limit;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	889a      	ldrh	r2, [r3, #4]
 800c4b8:	4b53      	ldr	r3, [pc, #332]	; (800c608 <t_weapon+0x290>)
 800c4ba:	81da      	strh	r2, [r3, #14]
				if (pRMail->param.command.mode.munitionCounterReset == 1)
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	789b      	ldrb	r3, [r3, #2]
 800c4c0:	f003 0308 	and.w	r3, r3, #8
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <t_weapon+0x156>
					munisi_reset();
 800c4ca:	f002 ffc3 	bl	800f454 <munisi_reset>
				_bus_recv_timer = osKernelSysTick();
 800c4ce:	f7fa fe7e 	bl	80071ce <osKernelSysTick>
 800c4d2:	61f8      	str	r0, [r7, #28]
				if (weapon.state == WS_IDLE) {
 800c4d4:	4b4c      	ldr	r3, [pc, #304]	; (800c608 <t_weapon+0x290>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d119      	bne.n	800c510 <t_weapon+0x198>
					if (osMutexWait(mtr_get_mutex(Mutex_Motor_id), 0) == osOK) {
 800c4dc:	2001      	movs	r0, #1
 800c4de:	f7f4 febd 	bl	800125c <mtr_get_mutex>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fa ff8c 	bl	8007404 <osMutexWait>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10e      	bne.n	800c510 <t_weapon+0x198>
						osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800c4f2:	2001      	movs	r0, #1
 800c4f4:	f7f4 feb2 	bl	800125c <mtr_get_mutex>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fa ffd0 	bl	80074a0 <osMutexRelease>
						HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800c500:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c504:	4843      	ldr	r0, [pc, #268]	; (800c614 <t_weapon+0x29c>)
 800c506:	f7f6 fffd 	bl	8003504 <HAL_GPIO_TogglePin>
				break;
 800c50a:	e001      	b.n	800c510 <t_weapon+0x198>
				break;
 800c50c:	bf00      	nop
 800c50e:	e000      	b.n	800c512 <t_weapon+0x19a>
				break;
 800c510:	bf00      	nop
			};
			/* free memory allocated for mail */
			osMailFree(mtr_get_mail(Mail_Weapon_id), pRMail);
 800c512:	2003      	movs	r0, #3
 800c514:	f7f4 fe5a 	bl	80011cc <mtr_get_mail>
 800c518:	4603      	mov	r3, r0
 800c51a:	69b9      	ldr	r1, [r7, #24]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fb fadb 	bl	8007ad8 <osMailFree>

			if (weapon.trig.enable == 1) {
 800c522:	4b39      	ldr	r3, [pc, #228]	; (800c608 <t_weapon+0x290>)
 800c524:	7b1b      	ldrb	r3, [r3, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d11a      	bne.n	800c560 <t_weapon+0x1e8>
				if (trig_pulse_state() == 1) {
 800c52a:	f003 f81b 	bl	800f564 <trig_pulse_state>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b01      	cmp	r3, #1
 800c532:	d10f      	bne.n	800c554 <t_weapon+0x1dc>
					if (weapon.trig.start == 0) {
 800c534:	4b34      	ldr	r3, [pc, #208]	; (800c608 <t_weapon+0x290>)
 800c536:	7b5b      	ldrb	r3, [r3, #13]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d107      	bne.n	800c54c <t_weapon+0x1d4>
						trig_start();
 800c53c:	f002 ffe6 	bl	800f50c <trig_start>
						weapon.trig.s_timeout = osKernelSysTick() + 60;
 800c540:	f7fa fe45 	bl	80071ce <osKernelSysTick>
 800c544:	4603      	mov	r3, r0
 800c546:	333c      	adds	r3, #60	; 0x3c
 800c548:	4a2f      	ldr	r2, [pc, #188]	; (800c608 <t_weapon+0x290>)
 800c54a:	6113      	str	r3, [r2, #16]
					}
					weapon.trig.start = 1;
 800c54c:	4b2e      	ldr	r3, [pc, #184]	; (800c608 <t_weapon+0x290>)
 800c54e:	2201      	movs	r2, #1
 800c550:	735a      	strb	r2, [r3, #13]
 800c552:	e00a      	b.n	800c56a <t_weapon+0x1f2>
				}
				else {
					trig_all_stop();
 800c554:	f003 f818 	bl	800f588 <trig_all_stop>
					weapon.trig.start = 0;
 800c558:	4b2b      	ldr	r3, [pc, #172]	; (800c608 <t_weapon+0x290>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	735a      	strb	r2, [r3, #13]
 800c55e:	e004      	b.n	800c56a <t_weapon+0x1f2>
				}
			}
			else {
				trig_all_stop();
 800c560:	f003 f812 	bl	800f588 <trig_all_stop>
				weapon.trig.start = 0;
 800c564:	4b28      	ldr	r3, [pc, #160]	; (800c608 <t_weapon+0x290>)
 800c566:	2200      	movs	r2, #0
 800c568:	735a      	strb	r2, [r3, #13]
			}

			if (osKernelSysTick() >= weapon.trig.s_timeout) {
 800c56a:	f7fa fe30 	bl	80071ce <osKernelSysTick>
 800c56e:	4602      	mov	r2, r0
 800c570:	4b25      	ldr	r3, [pc, #148]	; (800c608 <t_weapon+0x290>)
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	429a      	cmp	r2, r3
 800c576:	d301      	bcc.n	800c57c <t_weapon+0x204>
				trig_s_stop();
 800c578:	f002 ffdc 	bl	800f534 <trig_s_stop>
			LOG("\t\tshw=%d\r\n",uxTaskGetStackHighWaterMark2(NULL));
		}
#endif	//if RTOS_USE_STACK_HIGH_WATER==1

		/* send notif to task manager that this thread is still running */
		osMessagePut(opt_get_queue(Q_MANAGER_NOTIF), T_Weapon_id, 0);
 800c57c:	2000      	movs	r0, #0
 800c57e:	f7f4 fe11 	bl	80011a4 <opt_get_queue>
 800c582:	4603      	mov	r3, r0
 800c584:	2200      	movs	r2, #0
 800c586:	2104      	movs	r1, #4
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fb f8d1 	bl	8007730 <osMessagePut>

		if (weapon.state == WS_TRIGGER_ACTIVE)
 800c58e:	4b1e      	ldr	r3, [pc, #120]	; (800c608 <t_weapon+0x290>)
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b02      	cmp	r3, #2
 800c594:	d103      	bne.n	800c59e <t_weapon+0x226>
			munisi_set_state(1);
 800c596:	2001      	movs	r0, #1
 800c598:	f002 ff68 	bl	800f46c <munisi_set_state>
 800c59c:	e002      	b.n	800c5a4 <t_weapon+0x22c>
		else
			munisi_set_state(0);
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f002 ff64 	bl	800f46c <munisi_set_state>

		if (weapon.state == WS_IDLE) {
 800c5a4:	4b18      	ldr	r3, [pc, #96]	; (800c608 <t_weapon+0x290>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d114      	bne.n	800c5d6 <t_weapon+0x25e>
			if (_bus_recv_timer == 0) {
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <t_weapon+0x248>
				HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c5b8:	4816      	ldr	r0, [pc, #88]	; (800c614 <t_weapon+0x29c>)
 800c5ba:	f7f6 ff8b 	bl	80034d4 <HAL_GPIO_WritePin>
 800c5be:	e01f      	b.n	800c600 <t_weapon+0x288>
			}
			else {
				if (osKernelSysTick() >= (_bus_recv_timer + BUS_TIMEOUT)) {
 800c5c0:	f7fa fe05 	bl	80071ce <osKernelSysTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d317      	bcc.n	800c600 <t_weapon+0x288>
					_bus_recv_timer = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	e014      	b.n	800c600 <t_weapon+0x288>
				}
			}
		}
		else if (weapon.state == WS_TRIGGER_ACTIVE) {
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <t_weapon+0x290>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d110      	bne.n	800c600 <t_weapon+0x288>
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, !HAL_GPIO_ReadPin(T_START_GPIO_Port, T_START_Pin));
 800c5de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c5e2:	480c      	ldr	r0, [pc, #48]	; (800c614 <t_weapon+0x29c>)
 800c5e4:	f7f6 ff5e 	bl	80034a4 <HAL_GPIO_ReadPin>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bf0c      	ite	eq
 800c5ee:	2301      	moveq	r3, #1
 800c5f0:	2300      	movne	r3, #0
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c5fa:	4806      	ldr	r0, [pc, #24]	; (800c614 <t_weapon+0x29c>)
 800c5fc:	f7f6 ff6a 	bl	80034d4 <HAL_GPIO_WritePin>
		}

		weapon_send_to_bus();
 800c600:	f000 f80a 	bl	800c618 <weapon_send_to_bus>
	for ( ;; ) {
 800c604:	e6de      	b.n	800c3c4 <t_weapon+0x4c>
 800c606:	bf00      	nop
 800c608:	200106d8 	.word	0x200106d8
 800c60c:	200106dc 	.word	0x200106dc
 800c610:	20010df4 	.word	0x20010df4
 800c614:	48000400 	.word	0x48000400

0800c618 <weapon_send_to_bus>:
	}
	/* USER CODE END t_weapon */
}

static void weapon_send_to_bus()
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
	static uint32_t _timer = 0;

	if (osKernelSysTick() >= _timer) {
 800c61e:	f7fa fdd6 	bl	80071ce <osKernelSysTick>
 800c622:	4602      	mov	r2, r0
 800c624:	4b24      	ldr	r3, [pc, #144]	; (800c6b8 <weapon_send_to_bus+0xa0>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d340      	bcc.n	800c6ae <weapon_send_to_bus+0x96>
		_timer = osKernelSysTick() + 100;
 800c62c:	f7fa fdcf 	bl	80071ce <osKernelSysTick>
 800c630:	4603      	mov	r3, r0
 800c632:	3364      	adds	r3, #100	; 0x64
 800c634:	4a20      	ldr	r2, [pc, #128]	; (800c6b8 <weapon_send_to_bus+0xa0>)
 800c636:	6013      	str	r3, [r2, #0]

		Body_weapon_status_t _state;
		MAIL_Bus_t *bus_mail;

		*(uint8_t*) &_state = 0;
 800c638:	463b      	mov	r3, r7
 800c63a:	2200      	movs	r2, #0
 800c63c:	701a      	strb	r2, [r3, #0]
		_state.triggerEnable = weapon.trig.enable;
 800c63e:	4b1f      	ldr	r3, [pc, #124]	; (800c6bc <weapon_send_to_bus+0xa4>)
 800c640:	7b1b      	ldrb	r3, [r3, #12]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	b2da      	uxtb	r2, r3
 800c648:	783b      	ldrb	r3, [r7, #0]
 800c64a:	f362 0300 	bfi	r3, r2, #0, #1
 800c64e:	703b      	strb	r3, [r7, #0]
		_state.cockEnable = weapon.cock.enable;
 800c650:	4b1a      	ldr	r3, [pc, #104]	; (800c6bc <weapon_send_to_bus+0xa4>)
 800c652:	791b      	ldrb	r3, [r3, #4]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	783b      	ldrb	r3, [r7, #0]
 800c65c:	f362 0341 	bfi	r3, r2, #1, #1
 800c660:	703b      	strb	r3, [r7, #0]
		_state.cockMoving = weapon.cock.start;
 800c662:	4b16      	ldr	r3, [pc, #88]	; (800c6bc <weapon_send_to_bus+0xa4>)
 800c664:	795b      	ldrb	r3, [r3, #5]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	783b      	ldrb	r3, [r7, #0]
 800c66e:	f362 0382 	bfi	r3, r2, #2, #1
 800c672:	703b      	strb	r3, [r7, #0]

		// allocate memory; receiver must be free it
		bus_mail = osMailAlloc(mtr_get_mail(Mail_Bus_id), 0);
 800c674:	2000      	movs	r0, #0
 800c676:	f7f4 fda9 	bl	80011cc <mtr_get_mail>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2100      	movs	r1, #0
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fb f962 	bl	8007948 <osMailAlloc>
 800c684:	6078      	str	r0, [r7, #4]
		bus_mail->sender_id = Bus_Sender_Weapon_State_id;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2202      	movs	r2, #2
 800c68a:	701a      	strb	r2, [r3, #0]
		bus_mail->param.weapon.state = _state;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	783a      	ldrb	r2, [r7, #0]
 800c690:	711a      	strb	r2, [r3, #4]
		bus_mail->param.weapon.munition_counter = munisi_get_counter();
 800c692:	f002 fefb 	bl	800f48c <munisi_get_counter>
 800c696:	4603      	mov	r3, r0
 800c698:	461a      	mov	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	80da      	strh	r2, [r3, #6]

		/* send mail queue*/
		osMailPut(mtr_get_mail(Mail_Bus_id), bus_mail);
 800c69e:	2000      	movs	r0, #0
 800c6a0:	f7f4 fd94 	bl	80011cc <mtr_get_mail>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fb f963 	bl	8007974 <osMailPut>

		LOG("mun= %d\r\n", munisi_get_counter());
	}
}
 800c6ae:	bf00      	nop
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200106f0 	.word	0x200106f0
 800c6bc:	200106d8 	.word	0x200106d8

0800c6c0 <bus_init>:
FDCAN_TxHeaderTypeDef bus_tx_imu;

FDCAN_HandleTypeDef *hfdcan = &hfdcan1;

void bus_init()
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
	FDCAN_RX_Filter0_Range(hfdcan, 0, RWS_PANEL_ID, (RWS_PANEL_ID + 0xF));
 800c6c4:	4b15      	ldr	r3, [pc, #84]	; (800c71c <bus_init+0x5c>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	f240 131f 	movw	r3, #287	; 0x11f
 800c6cc:	f44f 7288 	mov.w	r2, #272	; 0x110
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	f000 fa59 	bl	800cb88 <FDCAN_RX_Filter0_Range>
	FDCAN_Config(hfdcan);
 800c6d6:	4b11      	ldr	r3, [pc, #68]	; (800c71c <bus_init+0x5c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 f9ea 	bl	800cab4 <FDCAN_Config>
	FDCAN_TX_Config(&bus_tx_motor_status, RWS_MOTOR_STATUS_ID, FDCAN_DLC_BYTES_5);
 800c6e0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c6e4:	f240 1121 	movw	r1, #289	; 0x121
 800c6e8:	480d      	ldr	r0, [pc, #52]	; (800c720 <bus_init+0x60>)
 800c6ea:	f000 fa78 	bl	800cbde <FDCAN_TX_Config>
	FDCAN_TX_Config(&bus_tx_position, RWS_MOTOR_POS_ID, FDCAN_DLC_BYTES_8);
 800c6ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c6f2:	f44f 7191 	mov.w	r1, #290	; 0x122
 800c6f6:	480b      	ldr	r0, [pc, #44]	; (800c724 <bus_init+0x64>)
 800c6f8:	f000 fa71 	bl	800cbde <FDCAN_TX_Config>
	FDCAN_TX_Config(&bus_tx_imu, RWS_MOTOR_IMU_ID, FDCAN_DLC_BYTES_8);
 800c6fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c700:	f240 1123 	movw	r1, #291	; 0x123
 800c704:	4808      	ldr	r0, [pc, #32]	; (800c728 <bus_init+0x68>)
 800c706:	f000 fa6a 	bl	800cbde <FDCAN_TX_Config>
	FDCAN_TX_Config(&bus_tx_weapon_status, RWS_WEAPON_STATUS_ID, FDCAN_DLC_BYTES_3);
 800c70a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c70e:	f44f 7192 	mov.w	r1, #292	; 0x124
 800c712:	4806      	ldr	r0, [pc, #24]	; (800c72c <bus_init+0x6c>)
 800c714:	f000 fa63 	bl	800cbde <FDCAN_TX_Config>
}
 800c718:	bf00      	nop
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20000010 	.word	0x20000010
 800c720:	200106f4 	.word	0x200106f4
 800c724:	2001073c 	.word	0x2001073c
 800c728:	20010760 	.word	0x20010760
 800c72c:	20010718 	.word	0x20010718

0800c730 <bus_send_motor_status>:

HAL_StatusTypeDef bus_send_motor_status(uint8_t *data)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &bus_tx_motor_status, data);
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <bus_send_motor_status+0x20>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	4905      	ldr	r1, [pc, #20]	; (800c754 <bus_send_motor_status+0x24>)
 800c740:	4618      	mov	r0, r3
 800c742:	f7f6 f8bf 	bl	80028c4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c746:	4603      	mov	r3, r0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20000010 	.word	0x20000010
 800c754:	200106f4 	.word	0x200106f4

0800c758 <bus_send_weapon_status>:

HAL_StatusTypeDef bus_send_weapon_status(uint8_t *data)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
	return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &bus_tx_weapon_status, data);
 800c760:	4b05      	ldr	r3, [pc, #20]	; (800c778 <bus_send_weapon_status+0x20>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	4905      	ldr	r1, [pc, #20]	; (800c77c <bus_send_weapon_status+0x24>)
 800c768:	4618      	mov	r0, r3
 800c76a:	f7f6 f8ab 	bl	80028c4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c76e:	4603      	mov	r3, r0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	20000010 	.word	0x20000010
 800c77c:	20010718 	.word	0x20010718

0800c780 <bus_send_position>:

HAL_StatusTypeDef bus_send_position(const int32_t pan, const int32_t tilt)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
	Rws_Union_u p, t;
	uint8_t data[8];

	p.i32 = pan;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	61bb      	str	r3, [r7, #24]
	t.i32 = tilt;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	617b      	str	r3, [r7, #20]
	for ( int i = 0; i < 4; i++ ) {
 800c792:	2300      	movs	r3, #0
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	e018      	b.n	800c7ca <bus_send_position+0x4a>
		data[i] = p.u8[i];
 800c798:	f107 0218 	add.w	r2, r7, #24
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	4413      	add	r3, r2
 800c7a0:	7819      	ldrb	r1, [r3, #0]
 800c7a2:	f107 020c 	add.w	r2, r7, #12
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	460a      	mov	r2, r1
 800c7ac:	701a      	strb	r2, [r3, #0]
		data[i + 4] = t.u8[i];
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	f107 0114 	add.w	r1, r7, #20
 800c7b6:	69fa      	ldr	r2, [r7, #28]
 800c7b8:	440a      	add	r2, r1
 800c7ba:	7812      	ldrb	r2, [r2, #0]
 800c7bc:	3320      	adds	r3, #32
 800c7be:	443b      	add	r3, r7
 800c7c0:	f803 2c14 	strb.w	r2, [r3, #-20]
	for ( int i = 0; i < 4; i++ ) {
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	61fb      	str	r3, [r7, #28]
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	dde3      	ble.n	800c798 <bus_send_position+0x18>
	}

	return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &bus_tx_position, data);
 800c7d0:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <bus_send_position+0x6c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f107 020c 	add.w	r2, r7, #12
 800c7d8:	4905      	ldr	r1, [pc, #20]	; (800c7f0 <bus_send_position+0x70>)
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f6 f872 	bl	80028c4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3720      	adds	r7, #32
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000010 	.word	0x20000010
 800c7f0:	2001073c 	.word	0x2001073c

0800c7f4 <bus_send_imu>:

HAL_StatusTypeDef bus_send_imu(const int16_t yaw, const int32_t pitch, const int32_t roll)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	81fb      	strh	r3, [r7, #14]

	return HAL_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <FDCAN_Convert_Datalength>:

uint8_t FDCAN_Convert_Datalength(const uint32_t datalength)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
	return dlc2len[datalength >> 16];
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	0c1b      	lsrs	r3, r3, #16
 800c81c:	4a03      	ldr	r2, [pc, #12]	; (800c82c <FDCAN_Convert_Datalength+0x1c>)
 800c81e:	5cd3      	ldrb	r3, [r2, r3]
}
 800c820:	4618      	mov	r0, r3
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	080129a0 	.word	0x080129a0

0800c830 <bus_rx_callback>:

void bus_rx_callback(BUS_Rx_Buffer_t *buffer)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b08c      	sub	sp, #48	; 0x30
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
	if (buffer->id == RWS_PANEL_CMD_ID) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f240 1211 	movw	r2, #273	; 0x111
 800c840:	4293      	cmp	r3, r2
 800c842:	d151      	bne.n	800c8e8 <bus_rx_callback+0xb8>
		MAIL_Weapon_t *wpnMail;
		// allocate memory; receiver must be free it
		wpnMail = osMailAlloc(mtr_get_mail(Mail_Weapon_id), 0);
 800c844:	2003      	movs	r0, #3
 800c846:	f7f4 fcc1 	bl	80011cc <mtr_get_mail>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2100      	movs	r1, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fb f87a 	bl	8007948 <osMailAlloc>
 800c854:	6178      	str	r0, [r7, #20]
		wpnMail->sender_id = Weapon_Sender_Bus_id;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2200      	movs	r2, #0
 800c85a:	701a      	strb	r2, [r3, #0]
		*(uint8_t*) &wpnMail->param.command.mode = buffer->data[1];
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	3302      	adds	r3, #2
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	7992      	ldrb	r2, [r2, #6]
 800c864:	701a      	strb	r2, [r3, #0]
		wpnMail->param.command.shoot_limit = ((uint16_t) buffer->data[2] << 8) | buffer->data[3];
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	79db      	ldrb	r3, [r3, #7]
 800c86a:	021b      	lsls	r3, r3, #8
 800c86c:	b21a      	sxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	7a1b      	ldrb	r3, [r3, #8]
 800c872:	b21b      	sxth	r3, r3
 800c874:	4313      	orrs	r3, r2
 800c876:	b21b      	sxth	r3, r3
 800c878:	b29a      	uxth	r2, r3
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	809a      	strh	r2, [r3, #4]

		/* send mail queue*/
		osMailPut(mtr_get_mail(Mail_Weapon_id), wpnMail);
 800c87e:	2003      	movs	r0, #3
 800c880:	f7f4 fca4 	bl	80011cc <mtr_get_mail>
 800c884:	4603      	mov	r3, r0
 800c886:	6979      	ldr	r1, [r7, #20]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7fb f873 	bl	8007974 <osMailPut>

		/* if t_motor is ready */
		if (osMutexWait(mtr_get_mutex(Mutex_Motor_id), 0) == osOK) {
 800c88e:	2001      	movs	r0, #1
 800c890:	f7f4 fce4 	bl	800125c <mtr_get_mutex>
 800c894:	4603      	mov	r3, r0
 800c896:	2100      	movs	r1, #0
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fa fdb3 	bl	8007404 <osMutexWait>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f040 8100 	bne.w	800caa6 <bus_rx_callback+0x276>
			LOG("send mtr_st\r\n");
			MAIL_Motor_t *mtrMail;
			/* allocate memory; receiver must be free it */
			mtrMail = osMailAlloc(mtr_get_mail(Mail_Motor_id), 0);
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	f7f4 fc90 	bl	80011cc <mtr_get_mail>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fb f849 	bl	8007948 <osMailAlloc>
 800c8b6:	6138      	str	r0, [r7, #16]
			mtrMail->sender_id = Motor_Sender_Bus_Mode_id;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]

			*(uint8_t*) &mtrMail->param.mode = buffer->data[0];
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	7952      	ldrb	r2, [r2, #5]
 800c8c6:	701a      	strb	r2, [r3, #0]

			/* send mail queue*/
			osMailPut(mtr_get_mail(Mail_Motor_id), mtrMail);
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	f7f4 fc7f 	bl	80011cc <mtr_get_mail>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	6939      	ldr	r1, [r7, #16]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fb f84e 	bl	8007974 <osMailPut>

			osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f7f4 fcbf 	bl	800125c <mtr_get_mutex>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fa fddd 	bl	80074a0 <osMutexRelease>
				/* send mail queue*/
				osMailPut(mtr_get_mail(Mail_Motor_Ext_id), mtrExtMail);
			}
		}
	}
}
 800c8e6:	e0de      	b.n	800caa6 <bus_rx_callback+0x276>
	else if (buffer->id == RWS_PANEL_TRK_ID) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f240 1213 	movw	r2, #275	; 0x113
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d151      	bne.n	800c998 <bus_rx_callback+0x168>
		trk_state = buffer->data[0];
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	795b      	ldrb	r3, [r3, #5]
 800c8f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		trk_x = (int16_t) buffer->data[1] << 8 | buffer->data[2];
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	799b      	ldrb	r3, [r3, #6]
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	b21a      	sxth	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	79db      	ldrb	r3, [r3, #7]
 800c908:	b21b      	sxth	r3, r3
 800c90a:	4313      	orrs	r3, r2
 800c90c:	843b      	strh	r3, [r7, #32]
		trk_y = (int16_t) buffer->data[3] << 8 | buffer->data[4];
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7a1b      	ldrb	r3, [r3, #8]
 800c912:	021b      	lsls	r3, r3, #8
 800c914:	b21a      	sxth	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	7a5b      	ldrb	r3, [r3, #9]
 800c91a:	b21b      	sxth	r3, r3
 800c91c:	4313      	orrs	r3, r2
 800c91e:	83fb      	strh	r3, [r7, #30]
		if (osMutexWait(mtr_get_mutex(Mutex_Motor_id), 0) == osOK) {
 800c920:	2001      	movs	r0, #1
 800c922:	f7f4 fc9b 	bl	800125c <mtr_get_mutex>
 800c926:	4603      	mov	r3, r0
 800c928:	2100      	movs	r1, #0
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fa fd6a 	bl	8007404 <osMutexWait>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	f040 80b7 	bne.w	800caa6 <bus_rx_callback+0x276>
			osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800c938:	2001      	movs	r0, #1
 800c93a:	f7f4 fc8f 	bl	800125c <mtr_get_mutex>
 800c93e:	4603      	mov	r3, r0
 800c940:	4618      	mov	r0, r3
 800c942:	f7fa fdad 	bl	80074a0 <osMutexRelease>
			if (motor.mode_state.movementMode == MOVE_MODE_TRACK) {
 800c946:	4b5a      	ldr	r3, [pc, #360]	; (800cab0 <bus_rx_callback+0x280>)
 800c948:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b03      	cmp	r3, #3
 800c954:	f040 80a7 	bne.w	800caa6 <bus_rx_callback+0x276>
				mtrExtMail = osMailAlloc(mtr_get_mail(Mail_Motor_Ext_id), 0);
 800c958:	2002      	movs	r0, #2
 800c95a:	f7f4 fc37 	bl	80011cc <mtr_get_mail>
 800c95e:	4603      	mov	r3, r0
 800c960:	2100      	movs	r1, #0
 800c962:	4618      	mov	r0, r3
 800c964:	f7fa fff0 	bl	8007948 <osMailAlloc>
 800c968:	61b8      	str	r0, [r7, #24]
				mtrExtMail->sender_id = Motor_Ext_Sender_Value_id;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	2201      	movs	r2, #1
 800c96e:	701a      	strb	r2, [r3, #0]
				*(uint8_t*) &mtrExtMail->param.track.trk_state = trk_state;
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	3304      	adds	r3, #4
 800c974:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c978:	701a      	strb	r2, [r3, #0]
				mtrExtMail->param.track.trk_x = trk_x;
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	8c3a      	ldrh	r2, [r7, #32]
 800c97e:	80da      	strh	r2, [r3, #6]
				mtrExtMail->param.track.trk_y = trk_y;
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	8bfa      	ldrh	r2, [r7, #30]
 800c984:	811a      	strh	r2, [r3, #8]
				osMailPut(mtr_get_mail(Mail_Motor_Ext_id), mtrExtMail);
 800c986:	2002      	movs	r0, #2
 800c988:	f7f4 fc20 	bl	80011cc <mtr_get_mail>
 800c98c:	4603      	mov	r3, r0
 800c98e:	69b9      	ldr	r1, [r7, #24]
 800c990:	4618      	mov	r0, r3
 800c992:	f7fa ffef 	bl	8007974 <osMailPut>
}
 800c996:	e086      	b.n	800caa6 <bus_rx_callback+0x276>
	else if ((buffer->id == RWS_PANEL_MAN_ID) || (buffer->id == RWS_PANEL_BAL_ID) || (buffer->id == RWS_PANEL_HOM_ID)) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800c9a0:	d00a      	beq.n	800c9b8 <bus_rx_callback+0x188>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800c9aa:	d005      	beq.n	800c9b8 <bus_rx_callback+0x188>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f240 1215 	movw	r2, #277	; 0x115
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d176      	bne.n	800caa6 <bus_rx_callback+0x276>
		for ( int i = 0; i < 4; i++ ) {
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9bc:	e018      	b.n	800c9f0 <bus_rx_callback+0x1c0>
			pan.u8[i] = buffer->data[i];
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	4413      	add	r3, r2
 800c9c4:	3305      	adds	r3, #5
 800c9c6:	7819      	ldrb	r1, [r3, #0]
 800c9c8:	f107 020c 	add.w	r2, r7, #12
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	4413      	add	r3, r2
 800c9d0:	460a      	mov	r2, r1
 800c9d2:	701a      	strb	r2, [r3, #0]
			tilt.u8[i] = buffer->data[4 + i];
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
 800c9dc:	7959      	ldrb	r1, [r3, #5]
 800c9de:	f107 0208 	add.w	r2, r7, #8
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	4413      	add	r3, r2
 800c9e6:	460a      	mov	r2, r1
 800c9e8:	701a      	strb	r2, [r3, #0]
		for ( int i = 0; i < 4; i++ ) {
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	dde3      	ble.n	800c9be <bus_rx_callback+0x18e>
		if (osMutexWait(mtr_get_mutex(Mutex_Motor_id), 0) == osOK) {
 800c9f6:	2001      	movs	r0, #1
 800c9f8:	f7f4 fc30 	bl	800125c <mtr_get_mutex>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2100      	movs	r1, #0
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fa fcff 	bl	8007404 <osMutexWait>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d14c      	bne.n	800caa6 <bus_rx_callback+0x276>
			osMutexRelease(mtr_get_mutex(Mutex_Motor_id));
 800ca0c:	2001      	movs	r0, #1
 800ca0e:	f7f4 fc25 	bl	800125c <mtr_get_mutex>
 800ca12:	4603      	mov	r3, r0
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fa fd43 	bl	80074a0 <osMutexRelease>
			uint8_t motor_mode = motor.mode_state.movementMode;
 800ca1a:	4b25      	ldr	r3, [pc, #148]	; (800cab0 <bus_rx_callback+0x280>)
 800ca1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			if ((motor_mode == MOVE_MODE_MAN) || (motor_mode == MOVE_MODE_TRAVEL) || (motor_mode == MOVE_MODE_STAB)
 800ca2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00b      	beq.n	800ca4a <bus_rx_callback+0x21a>
 800ca32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d007      	beq.n	800ca4a <bus_rx_callback+0x21a>
 800ca3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d003      	beq.n	800ca4a <bus_rx_callback+0x21a>
					|| (motor_mode == MOVE_MODE_HOMING)) {
 800ca42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca46:	2b05      	cmp	r3, #5
 800ca48:	d12d      	bne.n	800caa6 <bus_rx_callback+0x276>
				mtrExtMail = osMailAlloc(mtr_get_mail(Mail_Motor_Ext_id), 0);
 800ca4a:	2002      	movs	r0, #2
 800ca4c:	f7f4 fbbe 	bl	80011cc <mtr_get_mail>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2100      	movs	r1, #0
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fa ff77 	bl	8007948 <osMailAlloc>
 800ca5a:	6278      	str	r0, [r7, #36]	; 0x24
				if ((motor_mode == MOVE_MODE_MAN) || (motor_mode == MOVE_MODE_HOMING))
 800ca5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <bus_rx_callback+0x23c>
 800ca64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca68:	2b05      	cmp	r3, #5
 800ca6a:	d103      	bne.n	800ca74 <bus_rx_callback+0x244>
					mtrExtMail->sender_id = Motor_Ext_Sender_Value_id;
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	2201      	movs	r2, #1
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	e00a      	b.n	800ca8a <bus_rx_callback+0x25a>
				else if ((motor_mode == MOVE_MODE_TRAVEL) || (motor_mode == MOVE_MODE_STAB))
 800ca74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d003      	beq.n	800ca84 <bus_rx_callback+0x254>
 800ca7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d102      	bne.n	800ca8a <bus_rx_callback+0x25a>
					mtrExtMail->sender_id = Motor_Ext_Sender_Offset_id;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	2202      	movs	r2, #2
 800ca88:	701a      	strb	r2, [r3, #0]
				mtrExtMail->param.value.pan = pan.i32;
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	605a      	str	r2, [r3, #4]
				mtrExtMail->param.value.tilt = tilt.i32;
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	609a      	str	r2, [r3, #8]
				osMailPut(mtr_get_mail(Mail_Motor_Ext_id), mtrExtMail);
 800ca96:	2002      	movs	r0, #2
 800ca98:	f7f4 fb98 	bl	80011cc <mtr_get_mail>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fa ff67 	bl	8007974 <osMailPut>
}
 800caa6:	bf00      	nop
 800caa8:	3730      	adds	r7, #48	; 0x30
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20010664 	.word	0x20010664

0800cab4 <FDCAN_Config>:
 * @brief  Configures the FDCAN.
 * @param  None
 * @retval None
 */
static void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	/* Configure and enable Tx Delay Compensation, required for BRS mode.
	 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
	 TdcFilter default recommended value: 0 */
	if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cac4:	d117      	bne.n	800caf6 <FDCAN_Config+0x42>
		/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
		if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, (hfdcan->Init.DataTimeSeg1 * hfdcan->Init.DataPrescaler), 0)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cace:	fb02 f303 	mul.w	r3, r2, r3
 800cad2:	2200      	movs	r2, #0
 800cad4:	4619      	mov	r1, r3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7f5 fe89 	bl	80027ee <HAL_FDCAN_ConfigTxDelayCompensation>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d001      	beq.n	800cae6 <FDCAN_Config+0x32>
				!= HAL_OK) {
			Error_Handler();
 800cae2:	f7f4 ff4f 	bl	8001984 <Error_Handler>
		}
		if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7f5 fea3 	bl	8002832 <HAL_FDCAN_EnableTxDelayCompensation>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <FDCAN_Config+0x42>
			Error_Handler();
 800caf2:	f7f4 ff47 	bl	8001984 <Error_Handler>
		}
	}

	/* Activate Rx FIFO 0 new message notification */
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800caf6:	2200      	movs	r2, #0
 800caf8:	2101      	movs	r1, #1
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7f6 f800 	bl	8002b00 <HAL_FDCAN_ActivateNotification>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <FDCAN_Config+0x56>
		Error_Handler();
 800cb06:	f7f4 ff3d 	bl	8001984 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_BUS_OFF, 0) != HAL_OK) {
//		Error_Handler();
//	}

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7f5 feb2 	bl	8002874 <HAL_FDCAN_Start>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <FDCAN_Config+0x66>
		Error_Handler();
 800cb16:	f7f4 ff35 	bl	8001984 <Error_Handler>
	}

}
 800cb1a:	bf00      	nop
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <__FDCAN_RX_Filter_Range>:

static void __FDCAN_RX_Filter_Range(FDCAN_Rx_Filter_Params_t *params)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b08a      	sub	sp, #40	; 0x28
 800cb26:	af02      	add	r7, sp, #8
 800cb28:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = params->index;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800cb34:	2300      	movs	r3, #0
 800cb36:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = params->type;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = params->low_id;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = params->high_id;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(params->hfdcan, &sFilterConfig) != HAL_OK) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f107 0208 	add.w	r2, r7, #8
 800cb52:	4611      	mov	r1, r2
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7f5 fdbf 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <__FDCAN_RX_Filter_Range+0x42>
		Error_Handler();
 800cb60:	f7f4 ff10 	bl	8001984 <Error_Handler>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(params->hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE,
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6818      	ldr	r0, [r3, #0]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	2202      	movs	r2, #2
 800cb70:	2102      	movs	r1, #2
 800cb72:	f7f5 fe0b 	bl	800278c <HAL_FDCAN_ConfigGlobalFilter>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <__FDCAN_RX_Filter_Range+0x5e>
	FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
 800cb7c:	f7f4 ff02 	bl	8001984 <Error_Handler>
	}
}
 800cb80:	bf00      	nop
 800cb82:	3720      	adds	r7, #32
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <FDCAN_RX_Filter0_Range>:

static void FDCAN_RX_Filter0_Range(FDCAN_HandleTypeDef *hfdcan, const uint32_t filterIndex, const uint32_t filterId1,
		const uint32_t filterId2)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	; 0x28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	FDCAN_Rx_Filter_Params_t params = { .hfdcan = hfdcan, .index = filterIndex, .type = FDCAN_FILTER_TO_RXFIFO0 };
 800cb96:	f107 0314 	add.w	r3, r7, #20
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
 800cba0:	609a      	str	r2, [r3, #8]
 800cba2:	60da      	str	r2, [r3, #12]
 800cba4:	611a      	str	r2, [r3, #16]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	617b      	str	r3, [r7, #20]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	61bb      	str	r3, [r7, #24]
 800cbae:	2301      	movs	r3, #1
 800cbb0:	627b      	str	r3, [r7, #36]	; 0x24
	if (filterId1 > filterId2) {
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d904      	bls.n	800cbc4 <FDCAN_RX_Filter0_Range+0x3c>
		params.low_id = filterId2;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	61fb      	str	r3, [r7, #28]
		params.high_id = filterId1;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	623b      	str	r3, [r7, #32]
 800cbc2:	e003      	b.n	800cbcc <FDCAN_RX_Filter0_Range+0x44>
	}
	else {
		params.low_id = filterId1;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	61fb      	str	r3, [r7, #28]
		params.high_id = filterId2;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	623b      	str	r3, [r7, #32]
	}
	__FDCAN_RX_Filter_Range(&params);
 800cbcc:	f107 0314 	add.w	r3, r7, #20
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff ffa6 	bl	800cb22 <__FDCAN_RX_Filter_Range>
}
 800cbd6:	bf00      	nop
 800cbd8:	3728      	adds	r7, #40	; 0x28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <FDCAN_TX_Config>:
 * @param  dataLength FDCAN Tx Data Length, default FDCAN_DLC_BYTES_8 8 Bytes to be send.
 *         This parameter can be any combination of @arg FDCAN_data_length_code.
 * @retval None
 */
static void FDCAN_TX_Config(FDCAN_TxHeaderTypeDef *txHeader, const uint32_t txID, const uint32_t dataLength)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b085      	sub	sp, #20
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	60f8      	str	r0, [r7, #12]
 800cbe6:	60b9      	str	r1, [r7, #8]
 800cbe8:	607a      	str	r2, [r7, #4]
	/* Prepare Tx Header */
	txHeader->Identifier = txID;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	601a      	str	r2, [r3, #0]
	txHeader->IdType = FDCAN_STANDARD_ID;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	605a      	str	r2, [r3, #4]
	txHeader->TxFrameType = FDCAN_DATA_FRAME;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	609a      	str	r2, [r3, #8]
	txHeader->DataLength = dataLength;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	60da      	str	r2, [r3, #12]
	txHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	611a      	str	r2, [r3, #16]
	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	615a      	str	r2, [r3, #20]
	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	619a      	str	r2, [r3, #24]
	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	61da      	str	r2, [r3, #28]
	txHeader->MessageMarker = 0;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	621a      	str	r2, [r3, #32]
}
 800cc20:	bf00      	nop
 800cc22:	3714      	adds	r7, #20
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <motor_param_init>:
} Motor_control_t;

Motor_control_t mc;

static void motor_param_init(Servo_t *servo)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
	Ingenia_write_nmt(servo, NMT_START_REMOTE_NODE);
 800cc34:	2101      	movs	r1, #1
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f001 f91a 	bl	800de70 <Ingenia_write_nmt>
	uint32_t motor_pan_max_accel = (RWS_MOTOR_PAN_MAX_SPEED * 3) / 2;
 800cc3c:	4b35      	ldr	r3, [pc, #212]	; (800cd14 <motor_param_init+0xe8>)
 800cc3e:	60fb      	str	r3, [r7, #12]
//	uint32_t motor_tilt_max_accel = (RWS_MOTOR_TILT_MAX_SPEED * 3) / 2;
	uint32_t motor_tilt_max_accel = RWS_MOTOR_TILT_MAX_SPEED;
 800cc40:	f44f 3328 	mov.w	r3, #172032	; 0x2a000
 800cc44:	60bb      	str	r3, [r7, #8]

	/* set mode to profile position */
	Ingenia_setModeOfOperation(servo, DRIVE_MODE_PROFILE_POSITION);
 800cc46:	2101      	movs	r1, #1
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f001 fd8e 	bl	800e76a <Ingenia_setModeOfOperation>

	LOG("mode=position mode\r\n");
 800cc4e:	f7fa fabe 	bl	80071ce <osKernelSysTick>
 800cc52:	4603      	mov	r3, r0
 800cc54:	4a30      	ldr	r2, [pc, #192]	; (800cd18 <motor_param_init+0xec>)
 800cc56:	fba2 1203 	umull	r1, r2, r2, r3
 800cc5a:	0b51      	lsrs	r1, r2, #13
 800cc5c:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc60:	fb01 f202 	mul.w	r2, r1, r2
 800cc64:	1a99      	subs	r1, r3, r2
 800cc66:	2334      	movs	r3, #52	; 0x34
 800cc68:	4a2c      	ldr	r2, [pc, #176]	; (800cd1c <motor_param_init+0xf0>)
 800cc6a:	482d      	ldr	r0, [pc, #180]	; (800cd20 <motor_param_init+0xf4>)
 800cc6c:	f003 f93e 	bl	800feec <iprintf>

	if (servo->_u8Node == MTR_AZ_ID) {
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	d11d      	bne.n	800ccb6 <motor_param_init+0x8a>
		/* set max motor speed */
		Ingenia_write_sdo_u32(servo, 0x6080, 0, RWS_MOTOR_PAN_MAX_SPEED);
 800cc7a:	4b2a      	ldr	r3, [pc, #168]	; (800cd24 <motor_param_init+0xf8>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fa09 	bl	800e09a <Ingenia_write_sdo_u32>
		/* set max profile acceleration */
		Ingenia_write_sdo_u32(servo, 0x6083, 0, motor_pan_max_accel);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f246 0183 	movw	r1, #24707	; 0x6083
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 fa02 	bl	800e09a <Ingenia_write_sdo_u32>
		/* set max profile de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6084, 0, motor_pan_max_accel);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f246 0184 	movw	r1, #24708	; 0x6084
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f001 f9fb 	bl	800e09a <Ingenia_write_sdo_u32>
		/* set max profile quick stop de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6085, 0, motor_pan_max_accel * 2);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f246 0185 	movw	r1, #24709	; 0x6085
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f001 f9f3 	bl	800e09a <Ingenia_write_sdo_u32>
 800ccb4:	e022      	b.n	800ccfc <motor_param_init+0xd0>
	}
	else if (servo->_u8Node == MTR_EL_ID) {
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800ccbc:	2b21      	cmp	r3, #33	; 0x21
 800ccbe:	d11d      	bne.n	800ccfc <motor_param_init+0xd0>
		/* set max motor speed */
		Ingenia_write_sdo_u32(servo, 0x6080, 0, RWS_MOTOR_TILT_MAX_SPEED);
 800ccc0:	f44f 3328 	mov.w	r3, #172032	; 0x2a000
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 f9e5 	bl	800e09a <Ingenia_write_sdo_u32>
		/* set max profile acceleration */
		Ingenia_write_sdo_u32(servo, 0x6083, 0, motor_tilt_max_accel);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f246 0183 	movw	r1, #24707	; 0x6083
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f001 f9de 	bl	800e09a <Ingenia_write_sdo_u32>
		/* set max profile de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6084, 0, motor_tilt_max_accel);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f246 0184 	movw	r1, #24708	; 0x6084
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 f9d7 	bl	800e09a <Ingenia_write_sdo_u32>
		/* set max profile quick stop de-acceleration */
		Ingenia_write_sdo_u32(servo, 0x6085, 0, motor_tilt_max_accel * 2);
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f246 0185 	movw	r1, #24709	; 0x6085
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f001 f9cf 	bl	800e09a <Ingenia_write_sdo_u32>
	}

	/* set TPDO4 event timer */
	Ingenia_write_sdo_u16(servo, 0x1803, 10, 20);
 800ccfc:	2314      	movs	r3, #20
 800ccfe:	220a      	movs	r2, #10
 800cd00:	f641 0103 	movw	r1, #6147	; 0x1803
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f001 f9de 	bl	800e0c6 <Ingenia_write_sdo_u16>

}
 800cd0a:	bf00      	nop
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	000249f0 	.word	0x000249f0
 800cd18:	d1b71759 	.word	0xd1b71759
 800cd1c:	08012724 	.word	0x08012724
 800cd20:	08012730 	.word	0x08012730
 800cd24:	000186a0 	.word	0x000186a0

0800cd28 <hal_motor_init>:

HAL_StatusTypeDef hal_motor_init(const uint8_t enable)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	4603      	mov	r3, r0
 800cd30:	71fb      	strb	r3, [r7, #7]
	LOG("Motor init...\r\n");
 800cd32:	f7fa fa4c 	bl	80071ce <osKernelSysTick>
 800cd36:	4603      	mov	r3, r0
 800cd38:	4aae      	ldr	r2, [pc, #696]	; (800cff4 <hal_motor_init+0x2cc>)
 800cd3a:	fba2 1203 	umull	r1, r2, r2, r3
 800cd3e:	0b51      	lsrs	r1, r2, #13
 800cd40:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd44:	fb01 f202 	mul.w	r2, r1, r2
 800cd48:	1a99      	subs	r1, r3, r2
 800cd4a:	2352      	movs	r3, #82	; 0x52
 800cd4c:	4aaa      	ldr	r2, [pc, #680]	; (800cff8 <hal_motor_init+0x2d0>)
 800cd4e:	48ab      	ldr	r0, [pc, #684]	; (800cffc <hal_motor_init+0x2d4>)
 800cd50:	f003 f8cc 	bl	800feec <iprintf>

	mc.hfdcan = &hfdcan2;
 800cd54:	4baa      	ldr	r3, [pc, #680]	; (800d000 <hal_motor_init+0x2d8>)
 800cd56:	4aab      	ldr	r2, [pc, #684]	; (800d004 <hal_motor_init+0x2dc>)
 800cd58:	601a      	str	r2, [r3, #0]
	mc.mtr_enable = enable;
 800cd5a:	4aa9      	ldr	r2, [pc, #676]	; (800d000 <hal_motor_init+0x2d8>)
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	7113      	strb	r3, [r2, #4]

//	if (HAL_FDCAN_ActivateNotification(mc.hfdcan, FDCAN_IT_BUS_OFF, 0) != HAL_OK)
//		return HAL_ERROR;

	Ingenia_begin(mc.hfdcan);
 800cd60:	4ba7      	ldr	r3, [pc, #668]	; (800d000 <hal_motor_init+0x2d8>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f001 fea6 	bl	800eab6 <Ingenia_begin>

	if (is_motor_az_enable(mc.mtr_enable)) {
 800cd6a:	4ba5      	ldr	r3, [pc, #660]	; (800d000 <hal_motor_init+0x2d8>)
 800cd6c:	791b      	ldrb	r3, [r3, #4]
 800cd6e:	f003 0301 	and.w	r3, r3, #1
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d052      	beq.n	800ce1c <hal_motor_init+0xf4>
		LOG("enabling pan motor ...\r\n");
 800cd76:	f7fa fa2a 	bl	80071ce <osKernelSysTick>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	4a9d      	ldr	r2, [pc, #628]	; (800cff4 <hal_motor_init+0x2cc>)
 800cd7e:	fba2 1203 	umull	r1, r2, r2, r3
 800cd82:	0b51      	lsrs	r1, r2, #13
 800cd84:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd88:	fb01 f202 	mul.w	r2, r1, r2
 800cd8c:	1a99      	subs	r1, r3, r2
 800cd8e:	235d      	movs	r3, #93	; 0x5d
 800cd90:	4a99      	ldr	r2, [pc, #612]	; (800cff8 <hal_motor_init+0x2d0>)
 800cd92:	489d      	ldr	r0, [pc, #628]	; (800d008 <hal_motor_init+0x2e0>)
 800cd94:	f003 f8aa 	bl	800feec <iprintf>
		if (Ingenia_init(&mc.mtrAzi, mc.hfdcan, MTR_AZ_ID) != HAL_OK) {
 800cd98:	4b99      	ldr	r3, [pc, #612]	; (800d000 <hal_motor_init+0x2d8>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2220      	movs	r2, #32
 800cd9e:	4619      	mov	r1, r3
 800cda0:	489a      	ldr	r0, [pc, #616]	; (800d00c <hal_motor_init+0x2e4>)
 800cda2:	f000 ff4f 	bl	800dc44 <Ingenia_init>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d012      	beq.n	800cdd2 <hal_motor_init+0xaa>
			LOG("init MTR_AZI failed!\r\n");
 800cdac:	f7fa fa0f 	bl	80071ce <osKernelSysTick>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	4a90      	ldr	r2, [pc, #576]	; (800cff4 <hal_motor_init+0x2cc>)
 800cdb4:	fba2 1203 	umull	r1, r2, r2, r3
 800cdb8:	0b51      	lsrs	r1, r2, #13
 800cdba:	f242 7210 	movw	r2, #10000	; 0x2710
 800cdbe:	fb01 f202 	mul.w	r2, r1, r2
 800cdc2:	1a99      	subs	r1, r3, r2
 800cdc4:	235f      	movs	r3, #95	; 0x5f
 800cdc6:	4a8c      	ldr	r2, [pc, #560]	; (800cff8 <hal_motor_init+0x2d0>)
 800cdc8:	4891      	ldr	r0, [pc, #580]	; (800d010 <hal_motor_init+0x2e8>)
 800cdca:	f003 f88f 	bl	800feec <iprintf>
			return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e19a      	b.n	800d108 <hal_motor_init+0x3e0>
		}

		LOG("pan param init...\r\n");
 800cdd2:	f7fa f9fc 	bl	80071ce <osKernelSysTick>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	4a86      	ldr	r2, [pc, #536]	; (800cff4 <hal_motor_init+0x2cc>)
 800cdda:	fba2 1203 	umull	r1, r2, r2, r3
 800cdde:	0b51      	lsrs	r1, r2, #13
 800cde0:	f242 7210 	movw	r2, #10000	; 0x2710
 800cde4:	fb01 f202 	mul.w	r2, r1, r2
 800cde8:	1a99      	subs	r1, r3, r2
 800cdea:	2363      	movs	r3, #99	; 0x63
 800cdec:	4a82      	ldr	r2, [pc, #520]	; (800cff8 <hal_motor_init+0x2d0>)
 800cdee:	4889      	ldr	r0, [pc, #548]	; (800d014 <hal_motor_init+0x2ec>)
 800cdf0:	f003 f87c 	bl	800feec <iprintf>
		motor_param_init(&mc.mtrAzi);
 800cdf4:	4885      	ldr	r0, [pc, #532]	; (800d00c <hal_motor_init+0x2e4>)
 800cdf6:	f7ff ff19 	bl	800cc2c <motor_param_init>
		LOG("done!\r\n");
 800cdfa:	f7fa f9e8 	bl	80071ce <osKernelSysTick>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4a7c      	ldr	r2, [pc, #496]	; (800cff4 <hal_motor_init+0x2cc>)
 800ce02:	fba2 1203 	umull	r1, r2, r2, r3
 800ce06:	0b51      	lsrs	r1, r2, #13
 800ce08:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce0c:	fb01 f202 	mul.w	r2, r1, r2
 800ce10:	1a99      	subs	r1, r3, r2
 800ce12:	2365      	movs	r3, #101	; 0x65
 800ce14:	4a78      	ldr	r2, [pc, #480]	; (800cff8 <hal_motor_init+0x2d0>)
 800ce16:	4880      	ldr	r0, [pc, #512]	; (800d018 <hal_motor_init+0x2f0>)
 800ce18:	f003 f868 	bl	800feec <iprintf>
	}

	if (is_motor_el_enable(mc.mtr_enable)) {
 800ce1c:	4b78      	ldr	r3, [pc, #480]	; (800d000 <hal_motor_init+0x2d8>)
 800ce1e:	791b      	ldrb	r3, [r3, #4]
 800ce20:	f003 0302 	and.w	r3, r3, #2
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d067      	beq.n	800cef8 <hal_motor_init+0x1d0>
		LOG("enabling tilt motor ...\r\n");
 800ce28:	f7fa f9d1 	bl	80071ce <osKernelSysTick>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	4a71      	ldr	r2, [pc, #452]	; (800cff4 <hal_motor_init+0x2cc>)
 800ce30:	fba2 1203 	umull	r1, r2, r2, r3
 800ce34:	0b51      	lsrs	r1, r2, #13
 800ce36:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce3a:	fb01 f202 	mul.w	r2, r1, r2
 800ce3e:	1a99      	subs	r1, r3, r2
 800ce40:	2369      	movs	r3, #105	; 0x69
 800ce42:	4a6d      	ldr	r2, [pc, #436]	; (800cff8 <hal_motor_init+0x2d0>)
 800ce44:	4875      	ldr	r0, [pc, #468]	; (800d01c <hal_motor_init+0x2f4>)
 800ce46:	f003 f851 	bl	800feec <iprintf>
		if (Ingenia_init(&mc.mtrEle, mc.hfdcan, MTR_EL_ID) != HAL_OK) {
 800ce4a:	4b6d      	ldr	r3, [pc, #436]	; (800d000 <hal_motor_init+0x2d8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2221      	movs	r2, #33	; 0x21
 800ce50:	4619      	mov	r1, r3
 800ce52:	4873      	ldr	r0, [pc, #460]	; (800d020 <hal_motor_init+0x2f8>)
 800ce54:	f000 fef6 	bl	800dc44 <Ingenia_init>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d012      	beq.n	800ce84 <hal_motor_init+0x15c>
			LOG("init MTR_ELE failed!\r\n");
 800ce5e:	f7fa f9b6 	bl	80071ce <osKernelSysTick>
 800ce62:	4603      	mov	r3, r0
 800ce64:	4a63      	ldr	r2, [pc, #396]	; (800cff4 <hal_motor_init+0x2cc>)
 800ce66:	fba2 1203 	umull	r1, r2, r2, r3
 800ce6a:	0b51      	lsrs	r1, r2, #13
 800ce6c:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce70:	fb01 f202 	mul.w	r2, r1, r2
 800ce74:	1a99      	subs	r1, r3, r2
 800ce76:	236b      	movs	r3, #107	; 0x6b
 800ce78:	4a5f      	ldr	r2, [pc, #380]	; (800cff8 <hal_motor_init+0x2d0>)
 800ce7a:	486a      	ldr	r0, [pc, #424]	; (800d024 <hal_motor_init+0x2fc>)
 800ce7c:	f003 f836 	bl	800feec <iprintf>
			return HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e141      	b.n	800d108 <hal_motor_init+0x3e0>
		}
		else
			LOG("tilt node=0x%02X\r\n", mc.mtrEle._u8Node);
 800ce84:	f7fa f9a3 	bl	80071ce <osKernelSysTick>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	4a5a      	ldr	r2, [pc, #360]	; (800cff4 <hal_motor_init+0x2cc>)
 800ce8c:	fba2 1203 	umull	r1, r2, r2, r3
 800ce90:	0b51      	lsrs	r1, r2, #13
 800ce92:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce96:	fb01 f202 	mul.w	r2, r1, r2
 800ce9a:	1a99      	subs	r1, r3, r2
 800ce9c:	4b58      	ldr	r3, [pc, #352]	; (800d000 <hal_motor_init+0x2d8>)
 800ce9e:	f893 3595 	ldrb.w	r3, [r3, #1429]	; 0x595
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	236f      	movs	r3, #111	; 0x6f
 800cea6:	4a54      	ldr	r2, [pc, #336]	; (800cff8 <hal_motor_init+0x2d0>)
 800cea8:	485f      	ldr	r0, [pc, #380]	; (800d028 <hal_motor_init+0x300>)
 800ceaa:	f003 f81f 	bl	800feec <iprintf>

		LOG("tilt param init\r\n");
 800ceae:	f7fa f98e 	bl	80071ce <osKernelSysTick>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	4a4f      	ldr	r2, [pc, #316]	; (800cff4 <hal_motor_init+0x2cc>)
 800ceb6:	fba2 1203 	umull	r1, r2, r2, r3
 800ceba:	0b51      	lsrs	r1, r2, #13
 800cebc:	f242 7210 	movw	r2, #10000	; 0x2710
 800cec0:	fb01 f202 	mul.w	r2, r1, r2
 800cec4:	1a99      	subs	r1, r3, r2
 800cec6:	2371      	movs	r3, #113	; 0x71
 800cec8:	4a4b      	ldr	r2, [pc, #300]	; (800cff8 <hal_motor_init+0x2d0>)
 800ceca:	4858      	ldr	r0, [pc, #352]	; (800d02c <hal_motor_init+0x304>)
 800cecc:	f003 f80e 	bl	800feec <iprintf>
		motor_param_init(&mc.mtrEle);
 800ced0:	4853      	ldr	r0, [pc, #332]	; (800d020 <hal_motor_init+0x2f8>)
 800ced2:	f7ff feab 	bl	800cc2c <motor_param_init>
		LOG("done!\r\n");
 800ced6:	f7fa f97a 	bl	80071ce <osKernelSysTick>
 800ceda:	4603      	mov	r3, r0
 800cedc:	4a45      	ldr	r2, [pc, #276]	; (800cff4 <hal_motor_init+0x2cc>)
 800cede:	fba2 1203 	umull	r1, r2, r2, r3
 800cee2:	0b51      	lsrs	r1, r2, #13
 800cee4:	f242 7210 	movw	r2, #10000	; 0x2710
 800cee8:	fb01 f202 	mul.w	r2, r1, r2
 800ceec:	1a99      	subs	r1, r3, r2
 800ceee:	2373      	movs	r3, #115	; 0x73
 800cef0:	4a41      	ldr	r2, [pc, #260]	; (800cff8 <hal_motor_init+0x2d0>)
 800cef2:	4849      	ldr	r0, [pc, #292]	; (800d018 <hal_motor_init+0x2f0>)
 800cef4:	f002 fffa 	bl	800feec <iprintf>
	}

	if ((is_motor_az_enable(mc.mtr_enable) != 0) || (is_motor_el_enable(mc.mtr_enable) != 0)) {
 800cef8:	4b41      	ldr	r3, [pc, #260]	; (800d000 <hal_motor_init+0x2d8>)
 800cefa:	791b      	ldrb	r3, [r3, #4]
 800cefc:	f003 0301 	and.w	r3, r3, #1
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d108      	bne.n	800cf18 <hal_motor_init+0x1f0>
 800cf06:	4b3e      	ldr	r3, [pc, #248]	; (800d000 <hal_motor_init+0x2d8>)
 800cf08:	791b      	ldrb	r3, [r3, #4]
 800cf0a:	105b      	asrs	r3, r3, #1
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 80e6 	beq.w	800d0e4 <hal_motor_init+0x3bc>
		uint32_t _mtrInitialTimer = osKernelSysTick() + MTR_INIT_TIMEOUT;
 800cf18:	f7fa f959 	bl	80071ce <osKernelSysTick>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800cf22:	3360      	adds	r3, #96	; 0x60
 800cf24:	60fb      	str	r3, [r7, #12]
		uint8_t _mtr_ready = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	75fb      	strb	r3, [r7, #23]
		uint8_t _mtr_finished = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	75bb      	strb	r3, [r7, #22]
		if (is_motor_az_enable(mc.mtr_enable))
 800cf2e:	4b34      	ldr	r3, [pc, #208]	; (800d000 <hal_motor_init+0x2d8>)
 800cf30:	791b      	ldrb	r3, [r3, #4]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <hal_motor_init+0x21a>
			bitSet(_mtr_finished, 0);
 800cf3a:	7dbb      	ldrb	r3, [r7, #22]
 800cf3c:	f043 0301 	orr.w	r3, r3, #1
 800cf40:	75bb      	strb	r3, [r7, #22]
		if (is_motor_el_enable(mc.mtr_enable))
 800cf42:	4b2f      	ldr	r3, [pc, #188]	; (800d000 <hal_motor_init+0x2d8>)
 800cf44:	791b      	ldrb	r3, [r3, #4]
 800cf46:	f003 0302 	and.w	r3, r3, #2
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <hal_motor_init+0x22e>
			bitSet(_mtr_finished, 1);
 800cf4e:	7dbb      	ldrb	r3, [r7, #22]
 800cf50:	f043 0302 	orr.w	r3, r3, #2
 800cf54:	75bb      	strb	r3, [r7, #22]

		LOG("start angle det process\r\n");
 800cf56:	f7fa f93a 	bl	80071ce <osKernelSysTick>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	4a25      	ldr	r2, [pc, #148]	; (800cff4 <hal_motor_init+0x2cc>)
 800cf5e:	fba2 1203 	umull	r1, r2, r2, r3
 800cf62:	0b51      	lsrs	r1, r2, #13
 800cf64:	f242 7210 	movw	r2, #10000	; 0x2710
 800cf68:	fb01 f202 	mul.w	r2, r1, r2
 800cf6c:	1a99      	subs	r1, r3, r2
 800cf6e:	237f      	movs	r3, #127	; 0x7f
 800cf70:	4a21      	ldr	r2, [pc, #132]	; (800cff8 <hal_motor_init+0x2d0>)
 800cf72:	482f      	ldr	r0, [pc, #188]	; (800d030 <hal_motor_init+0x308>)
 800cf74:	f002 ffba 	bl	800feec <iprintf>
		while (osKernelSysTick() < _mtrInitialTimer) {
 800cf78:	e0a8      	b.n	800d0cc <hal_motor_init+0x3a4>
			if (is_motor_az_enable(mc.mtr_enable)) {
 800cf7a:	4b21      	ldr	r3, [pc, #132]	; (800d000 <hal_motor_init+0x2d8>)
 800cf7c:	791b      	ldrb	r3, [r3, #4]
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d013      	beq.n	800cfae <hal_motor_init+0x286>
				if (!bitRead(_mtr_ready, 0))
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <hal_motor_init+0x26e>
					Ingenia_enableMotor(&mc.mtrAzi);
 800cf90:	481e      	ldr	r0, [pc, #120]	; (800d00c <hal_motor_init+0x2e4>)
 800cf92:	f001 fbc9 	bl	800e728 <Ingenia_enableMotor>

				if (mc.mtrAzi._isInitialAngleDeterminationProcessFinished == 1) {
 800cf96:	4b1a      	ldr	r3, [pc, #104]	; (800d000 <hal_motor_init+0x2d8>)
 800cf98:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d106      	bne.n	800cfae <hal_motor_init+0x286>
					bitSet(_mtr_ready, 0);
 800cfa0:	7dfb      	ldrb	r3, [r7, #23]
 800cfa2:	f043 0301 	orr.w	r3, r3, #1
 800cfa6:	75fb      	strb	r3, [r7, #23]
					Ingenia_disableMotor(&mc.mtrAzi);
 800cfa8:	4818      	ldr	r0, [pc, #96]	; (800d00c <hal_motor_init+0x2e4>)
 800cfaa:	f001 fbc9 	bl	800e740 <Ingenia_disableMotor>
				}
			}

			if (is_motor_el_enable(mc.mtr_enable)) {
 800cfae:	4b14      	ldr	r3, [pc, #80]	; (800d000 <hal_motor_init+0x2d8>)
 800cfb0:	791b      	ldrb	r3, [r3, #4]
 800cfb2:	f003 0302 	and.w	r3, r3, #2
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d015      	beq.n	800cfe6 <hal_motor_init+0x2be>
				if (!bitRead(_mtr_ready, 1))
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	085b      	lsrs	r3, r3, #1
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d102      	bne.n	800cfce <hal_motor_init+0x2a6>
					Ingenia_enableMotor(&mc.mtrEle);
 800cfc8:	4815      	ldr	r0, [pc, #84]	; (800d020 <hal_motor_init+0x2f8>)
 800cfca:	f001 fbad 	bl	800e728 <Ingenia_enableMotor>

				if (mc.mtrEle._isInitialAngleDeterminationProcessFinished == 1) {
 800cfce:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <hal_motor_init+0x2d8>)
 800cfd0:	f893 3596 	ldrb.w	r3, [r3, #1430]	; 0x596
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d106      	bne.n	800cfe6 <hal_motor_init+0x2be>
					bitSet(_mtr_ready, 1);
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	f043 0302 	orr.w	r3, r3, #2
 800cfde:	75fb      	strb	r3, [r7, #23]
					Ingenia_disableMotor(&mc.mtrEle);
 800cfe0:	480f      	ldr	r0, [pc, #60]	; (800d020 <hal_motor_init+0x2f8>)
 800cfe2:	f001 fbad 	bl	800e740 <Ingenia_disableMotor>
				}
			}

			if (_mtr_ready == _mtr_finished)
 800cfe6:	7dfa      	ldrb	r2, [r7, #23]
 800cfe8:	7dbb      	ldrb	r3, [r7, #22]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d076      	beq.n	800d0dc <hal_motor_init+0x3b4>
				break;
			else {
				for ( int i = 0; i < 300; i++ ) {
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e050      	b.n	800d096 <hal_motor_init+0x36e>
 800cff4:	d1b71759 	.word	0xd1b71759
 800cff8:	08012724 	.word	0x08012724
 800cffc:	08012754 	.word	0x08012754
 800d000:	20010784 	.word	0x20010784
 800d004:	2000029c 	.word	0x2000029c
 800d008:	08012770 	.word	0x08012770
 800d00c:	2001078c 	.word	0x2001078c
 800d010:	08012798 	.word	0x08012798
 800d014:	080127bc 	.word	0x080127bc
 800d018:	080127dc 	.word	0x080127dc
 800d01c:	080127f0 	.word	0x080127f0
 800d020:	20010a60 	.word	0x20010a60
 800d024:	08012818 	.word	0x08012818
 800d028:	0801283c 	.word	0x0801283c
 800d02c:	0801285c 	.word	0x0801285c
 800d030:	0801287c 	.word	0x0801287c
					printf(".");
 800d034:	202e      	movs	r0, #46	; 0x2e
 800d036:	f002 ff71 	bl	800ff1c <putchar>
					osDelay(50);
 800d03a:	2032      	movs	r0, #50	; 0x32
 800d03c:	f7fa f926 	bl	800728c <osDelay>
					if (is_motor_az_enable(mc.mtr_enable)) {
 800d040:	4b33      	ldr	r3, [pc, #204]	; (800d110 <hal_motor_init+0x3e8>)
 800d042:	791b      	ldrb	r3, [r3, #4]
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00b      	beq.n	800d064 <hal_motor_init+0x33c>
						/* get statusword from can interrupt */
						Ingenia_getDecodedStatusWord(&mc.mtrAzi);
 800d04c:	4831      	ldr	r0, [pc, #196]	; (800d114 <hal_motor_init+0x3ec>)
 800d04e:	f001 f8f1 	bl	800e234 <Ingenia_getDecodedStatusWord>
						if (mc.mtrAzi._isInitialAngleDeterminationProcessFinished)
 800d052:	4b2f      	ldr	r3, [pc, #188]	; (800d110 <hal_motor_init+0x3e8>)
 800d054:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <hal_motor_init+0x33c>
							bitSet(_mtr_ready, 0);
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
 800d05e:	f043 0301 	orr.w	r3, r3, #1
 800d062:	75fb      	strb	r3, [r7, #23]
					}

					if (is_motor_el_enable(mc.mtr_enable)) {
 800d064:	4b2a      	ldr	r3, [pc, #168]	; (800d110 <hal_motor_init+0x3e8>)
 800d066:	791b      	ldrb	r3, [r3, #4]
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <hal_motor_init+0x360>
						/* get statusword from can interrupt */
						Ingenia_getDecodedStatusWord(&mc.mtrEle);
 800d070:	4829      	ldr	r0, [pc, #164]	; (800d118 <hal_motor_init+0x3f0>)
 800d072:	f001 f8df 	bl	800e234 <Ingenia_getDecodedStatusWord>
						if (mc.mtrEle._isInitialAngleDeterminationProcessFinished)
 800d076:	4b26      	ldr	r3, [pc, #152]	; (800d110 <hal_motor_init+0x3e8>)
 800d078:	f893 3596 	ldrb.w	r3, [r3, #1430]	; 0x596
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d003      	beq.n	800d088 <hal_motor_init+0x360>
							bitSet(_mtr_ready, 1);
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	f043 0302 	orr.w	r3, r3, #2
 800d086:	75fb      	strb	r3, [r7, #23]
					}

					/* if all motor already initialized */
					if (_mtr_ready == _mtr_finished)
 800d088:	7dfa      	ldrb	r2, [r7, #23]
 800d08a:	7dbb      	ldrb	r3, [r7, #22]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d007      	beq.n	800d0a0 <hal_motor_init+0x378>
				for ( int i = 0; i < 300; i++ ) {
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	3301      	adds	r3, #1
 800d094:	613b      	str	r3, [r7, #16]
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d09c:	dbca      	blt.n	800d034 <hal_motor_init+0x30c>
 800d09e:	e000      	b.n	800d0a2 <hal_motor_init+0x37a>
						break;
 800d0a0:	bf00      	nop
				}
			}

			if (is_motor_az_enable(mc.mtr_enable))
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	; (800d110 <hal_motor_init+0x3e8>)
 800d0a4:	791b      	ldrb	r3, [r3, #4]
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d002      	beq.n	800d0b4 <hal_motor_init+0x38c>
				Ingenia_disableMotor(&mc.mtrAzi);
 800d0ae:	4819      	ldr	r0, [pc, #100]	; (800d114 <hal_motor_init+0x3ec>)
 800d0b0:	f001 fb46 	bl	800e740 <Ingenia_disableMotor>
			if (is_motor_el_enable(mc.mtr_enable))
 800d0b4:	4b16      	ldr	r3, [pc, #88]	; (800d110 <hal_motor_init+0x3e8>)
 800d0b6:	791b      	ldrb	r3, [r3, #4]
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <hal_motor_init+0x39e>
				Ingenia_disableMotor(&mc.mtrEle);
 800d0c0:	4815      	ldr	r0, [pc, #84]	; (800d118 <hal_motor_init+0x3f0>)
 800d0c2:	f001 fb3d 	bl	800e740 <Ingenia_disableMotor>

			osDelay(100);
 800d0c6:	2064      	movs	r0, #100	; 0x64
 800d0c8:	f7fa f8e0 	bl	800728c <osDelay>
		while (osKernelSysTick() < _mtrInitialTimer) {
 800d0cc:	f7fa f87f 	bl	80071ce <osKernelSysTick>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	f63f af50 	bhi.w	800cf7a <hal_motor_init+0x252>
 800d0da:	e000      	b.n	800d0de <hal_motor_init+0x3b6>
				break;
 800d0dc:	bf00      	nop
		}
		printf("\r\n");
 800d0de:	480f      	ldr	r0, [pc, #60]	; (800d11c <hal_motor_init+0x3f4>)
 800d0e0:	f002 ffa0 	bl	8010024 <puts>
	}

	LOG("Motor Ready!\r\n");
 800d0e4:	f7fa f873 	bl	80071ce <osKernelSysTick>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	4a0d      	ldr	r2, [pc, #52]	; (800d120 <hal_motor_init+0x3f8>)
 800d0ec:	fba2 1203 	umull	r1, r2, r2, r3
 800d0f0:	0b51      	lsrs	r1, r2, #13
 800d0f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800d0f6:	fb01 f202 	mul.w	r2, r1, r2
 800d0fa:	1a99      	subs	r1, r3, r2
 800d0fc:	23b9      	movs	r3, #185	; 0xb9
 800d0fe:	4a09      	ldr	r2, [pc, #36]	; (800d124 <hal_motor_init+0x3fc>)
 800d100:	4809      	ldr	r0, [pc, #36]	; (800d128 <hal_motor_init+0x400>)
 800d102:	f002 fef3 	bl	800feec <iprintf>

	return HAL_OK;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	20010784 	.word	0x20010784
 800d114:	2001078c 	.word	0x2001078c
 800d118:	20010a60 	.word	0x20010a60
 800d11c:	080128a4 	.word	0x080128a4
 800d120:	d1b71759 	.word	0xd1b71759
 800d124:	08012724 	.word	0x08012724
 800d128:	080128a8 	.word	0x080128a8

0800d12c <hal_motor_stop>:

static void hal_motor_stop(Servo_t *servo)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af02      	add	r7, sp, #8
 800d132:	6078      	str	r0, [r7, #4]
	Ingenia_setTargetPositionVelocity(servo, servo->posActual, 0, 1, 0, 0);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 12bc 	ldr.w	r1, [r3, #700]	; 0x2bc
 800d13a:	2300      	movs	r3, #0
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	2300      	movs	r3, #0
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	2301      	movs	r3, #1
 800d144:	2200      	movs	r2, #0
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f001 fb20 	bl	800e78c <Ingenia_setTargetPositionVelocity>
}
 800d14c:	bf00      	nop
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <hal_motor_speed>:

static HAL_StatusTypeDef hal_motor_speed(Servo_t *servo, const int32_t spd)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b088      	sub	sp, #32
 800d158:	af02      	add	r7, sp, #8
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
	uint32_t _abs_speed = abs(spd);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	bfb8      	it	lt
 800d164:	425b      	neglt	r3, r3
 800d166:	613b      	str	r3, [r7, #16]

	int32_t _pos = servo->posActual;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d16e:	617b      	str	r3, [r7, #20]
	int32_t _max_pos = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	60fb      	str	r3, [r7, #12]

	_max_pos = _abs_speed / 2;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	085b      	lsrs	r3, r3, #1
 800d178:	60fb      	str	r3, [r7, #12]

	if (spd == 0)
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d103      	bne.n	800d188 <hal_motor_speed+0x34>
		hal_motor_stop(servo);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7ff ffd3 	bl	800d12c <hal_motor_stop>
 800d186:	e015      	b.n	800d1b4 <hal_motor_speed+0x60>
	else {
		if (spd < 0)
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	da04      	bge.n	800d198 <hal_motor_speed+0x44>
			_pos -= _max_pos;
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	e003      	b.n	800d1a0 <hal_motor_speed+0x4c>
		else
			_pos += _max_pos;
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	617b      	str	r3, [r7, #20]

		Ingenia_setTargetPositionVelocity(servo, _pos, _abs_speed, 1, 0, 0);
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9301      	str	r3, [sp, #4]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	6979      	ldr	r1, [r7, #20]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 faec 	bl	800e78c <Ingenia_setTargetPositionVelocity>
	}
	return HAL_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <mtr_speed_to_c>:

static int32_t mtr_speed_to_c(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800d1be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1c2:	b092      	sub	sp, #72	; 0x48
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6378      	str	r0, [r7, #52]	; 0x34
 800d1c8:	6339      	str	r1, [r7, #48]	; 0x30
 800d1ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1cc:	62bb      	str	r3, [r7, #40]	; 0x28
	int64_t atas = ((int64_t) x - in_min) * ((int64_t) out_max - out_min);
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d0:	17da      	asrs	r2, r3, #31
 800d1d2:	623b      	str	r3, [r7, #32]
 800d1d4:	627a      	str	r2, [r7, #36]	; 0x24
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	17da      	asrs	r2, r3, #31
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	617a      	str	r2, [r7, #20]
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	ebb3 0a02 	subs.w	sl, r3, r2
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	460a      	mov	r2, r1
 800d1ee:	eb63 0b02 	sbc.w	fp, r3, r2
 800d1f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1f4:	17da      	asrs	r2, r3, #31
 800d1f6:	61bb      	str	r3, [r7, #24]
 800d1f8:	61fa      	str	r2, [r7, #28]
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	17da      	asrs	r2, r3, #31
 800d1fe:	60bb      	str	r3, [r7, #8]
 800d200:	60fa      	str	r2, [r7, #12]
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d208:	4602      	mov	r2, r0
 800d20a:	ebb3 0802 	subs.w	r8, r3, r2
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	460a      	mov	r2, r1
 800d212:	eb63 0902 	sbc.w	r9, r3, r2
 800d216:	fb08 f20b 	mul.w	r2, r8, fp
 800d21a:	fb0a f309 	mul.w	r3, sl, r9
 800d21e:	4413      	add	r3, r2
 800d220:	fbaa 4508 	umull	r4, r5, sl, r8
 800d224:	442b      	add	r3, r5
 800d226:	461d      	mov	r5, r3
 800d228:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800d22c:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
	int32_t bawah = in_max - in_min;
 800d230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (bawah > 0)
 800d238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	dd0e      	ble.n	800d25c <mtr_speed_to_c+0x9e>
		return (uint32_t) ((atas / bawah) + out_min);
 800d23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d240:	17da      	asrs	r2, r3, #31
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	607a      	str	r2, [r7, #4]
 800d246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d24a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d24e:	f7f3 fd23 	bl	8000c98 <__aeabi_ldivmod>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d258:	4413      	add	r3, r2
 800d25a:	e000      	b.n	800d25e <mtr_speed_to_c+0xa0>

	return 1;
 800d25c:	2301      	movs	r3, #1
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3748      	adds	r7, #72	; 0x48
 800d262:	46bd      	mov	sp, r7
 800d264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d268 <hal_motor_pan_speed_to_c>:

/* mapping max_command(1000000) to RWS_MOTOR_PAN_MAX_SPEED(100000) */
int32_t hal_motor_pan_speed_to_c(int32_t speed)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af02      	add	r7, sp, #8
 800d26e:	6078      	str	r0, [r7, #4]
	return mtr_speed_to_c(speed, -1000000, 1000000, -RWS_MOTOR_PAN_MAX_SPEED, RWS_MOTOR_PAN_MAX_SPEED);
 800d270:	4b06      	ldr	r3, [pc, #24]	; (800d28c <hal_motor_pan_speed_to_c+0x24>)
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	4b06      	ldr	r3, [pc, #24]	; (800d290 <hal_motor_pan_speed_to_c+0x28>)
 800d276:	4a07      	ldr	r2, [pc, #28]	; (800d294 <hal_motor_pan_speed_to_c+0x2c>)
 800d278:	4907      	ldr	r1, [pc, #28]	; (800d298 <hal_motor_pan_speed_to_c+0x30>)
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff ff9f 	bl	800d1be <mtr_speed_to_c>
 800d280:	4603      	mov	r3, r0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	000186a0 	.word	0x000186a0
 800d290:	fffe7960 	.word	0xfffe7960
 800d294:	000f4240 	.word	0x000f4240
 800d298:	fff0bdc0 	.word	0xfff0bdc0

0800d29c <hal_motor_tilt_speed_to_c>:

/* mapping max_command(1000000) to RWS_MOTOR_TILT_MAX_SPEED (172032L) */
int32_t hal_motor_tilt_speed_to_c(int32_t speed)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af02      	add	r7, sp, #8
 800d2a2:	6078      	str	r0, [r7, #4]
	return mtr_speed_to_c(speed, -1000000L, 1000000L, -RWS_MOTOR_TILT_MAX_SPEED, RWS_MOTOR_TILT_MAX_SPEED);
 800d2a4:	f44f 3328 	mov.w	r3, #172032	; 0x2a000
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	4b05      	ldr	r3, [pc, #20]	; (800d2c0 <hal_motor_tilt_speed_to_c+0x24>)
 800d2ac:	4a05      	ldr	r2, [pc, #20]	; (800d2c4 <hal_motor_tilt_speed_to_c+0x28>)
 800d2ae:	4906      	ldr	r1, [pc, #24]	; (800d2c8 <hal_motor_tilt_speed_to_c+0x2c>)
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7ff ff84 	bl	800d1be <mtr_speed_to_c>
 800d2b6:	4603      	mov	r3, r0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	fffd6000 	.word	0xfffd6000
 800d2c4:	000f4240 	.word	0x000f4240
 800d2c8:	fff0bdc0 	.word	0xfff0bdc0

0800d2cc <hal_motor_set_pan_power>:

void hal_motor_set_pan_power(const uint8_t act)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af02      	add	r7, sp, #8
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	71fb      	strb	r3, [r7, #7]
	if (is_motor_az_enable(mc.mtr_enable)) {
 800d2d6:	4b13      	ldr	r3, [pc, #76]	; (800d324 <hal_motor_set_pan_power+0x58>)
 800d2d8:	791b      	ldrb	r3, [r3, #4]
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d009      	beq.n	800d2f6 <hal_motor_set_pan_power+0x2a>
		if (act != 0)
 800d2e2:	79fb      	ldrb	r3, [r7, #7]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <hal_motor_set_pan_power+0x24>
			Ingenia_enableMotor(&mc.mtrAzi);
 800d2e8:	480f      	ldr	r0, [pc, #60]	; (800d328 <hal_motor_set_pan_power+0x5c>)
 800d2ea:	f001 fa1d 	bl	800e728 <Ingenia_enableMotor>
 800d2ee:	e002      	b.n	800d2f6 <hal_motor_set_pan_power+0x2a>
		else
			Ingenia_disableMotor(&mc.mtrAzi);
 800d2f0:	480d      	ldr	r0, [pc, #52]	; (800d328 <hal_motor_set_pan_power+0x5c>)
 800d2f2:	f001 fa25 	bl	800e740 <Ingenia_disableMotor>
	}
	LOG("\r\nPAN_power: %d\r\n\r\n", act);
 800d2f6:	f7f9 ff6a 	bl	80071ce <osKernelSysTick>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	4a0b      	ldr	r2, [pc, #44]	; (800d32c <hal_motor_set_pan_power+0x60>)
 800d2fe:	fba2 1203 	umull	r1, r2, r2, r3
 800d302:	0b51      	lsrs	r1, r2, #13
 800d304:	f242 7210 	movw	r2, #10000	; 0x2710
 800d308:	fb01 f202 	mul.w	r2, r1, r2
 800d30c:	1a99      	subs	r1, r3, r2
 800d30e:	79fb      	ldrb	r3, [r7, #7]
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	23f8      	movs	r3, #248	; 0xf8
 800d314:	4a06      	ldr	r2, [pc, #24]	; (800d330 <hal_motor_set_pan_power+0x64>)
 800d316:	4807      	ldr	r0, [pc, #28]	; (800d334 <hal_motor_set_pan_power+0x68>)
 800d318:	f002 fde8 	bl	800feec <iprintf>
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	20010784 	.word	0x20010784
 800d328:	2001078c 	.word	0x2001078c
 800d32c:	d1b71759 	.word	0xd1b71759
 800d330:	08012724 	.word	0x08012724
 800d334:	080128c4 	.word	0x080128c4

0800d338 <hal_motor_set_tilt_power>:

void hal_motor_set_tilt_power(const uint8_t act)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af02      	add	r7, sp, #8
 800d33e:	4603      	mov	r3, r0
 800d340:	71fb      	strb	r3, [r7, #7]
	if (is_motor_el_enable(mc.mtr_enable)) {
 800d342:	4b14      	ldr	r3, [pc, #80]	; (800d394 <hal_motor_set_tilt_power+0x5c>)
 800d344:	791b      	ldrb	r3, [r3, #4]
 800d346:	f003 0302 	and.w	r3, r3, #2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d009      	beq.n	800d362 <hal_motor_set_tilt_power+0x2a>
		if (act == 1)
 800d34e:	79fb      	ldrb	r3, [r7, #7]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d103      	bne.n	800d35c <hal_motor_set_tilt_power+0x24>
			Ingenia_enableMotor(&mc.mtrEle);
 800d354:	4810      	ldr	r0, [pc, #64]	; (800d398 <hal_motor_set_tilt_power+0x60>)
 800d356:	f001 f9e7 	bl	800e728 <Ingenia_enableMotor>
 800d35a:	e002      	b.n	800d362 <hal_motor_set_tilt_power+0x2a>
		else
			Ingenia_disableMotor(&mc.mtrEle);
 800d35c:	480e      	ldr	r0, [pc, #56]	; (800d398 <hal_motor_set_tilt_power+0x60>)
 800d35e:	f001 f9ef 	bl	800e740 <Ingenia_disableMotor>
	}
	LOG("\r\nTILT_power: %d\r\n\r\n", act);
 800d362:	f7f9 ff34 	bl	80071ce <osKernelSysTick>
 800d366:	4603      	mov	r3, r0
 800d368:	4a0c      	ldr	r2, [pc, #48]	; (800d39c <hal_motor_set_tilt_power+0x64>)
 800d36a:	fba2 1203 	umull	r1, r2, r2, r3
 800d36e:	0b51      	lsrs	r1, r2, #13
 800d370:	f242 7210 	movw	r2, #10000	; 0x2710
 800d374:	fb01 f202 	mul.w	r2, r1, r2
 800d378:	1a99      	subs	r1, r3, r2
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	f240 1303 	movw	r3, #259	; 0x103
 800d382:	4a07      	ldr	r2, [pc, #28]	; (800d3a0 <hal_motor_set_tilt_power+0x68>)
 800d384:	4807      	ldr	r0, [pc, #28]	; (800d3a4 <hal_motor_set_tilt_power+0x6c>)
 800d386:	f002 fdb1 	bl	800feec <iprintf>
}
 800d38a:	bf00      	nop
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	20010784 	.word	0x20010784
 800d398:	20010a60 	.word	0x20010a60
 800d39c:	d1b71759 	.word	0xd1b71759
 800d3a0:	08012724 	.word	0x08012724
 800d3a4:	080128e4 	.word	0x080128e4

0800d3a8 <hal_motor_set_position>:

uint8_t hal_motor_set_position(const int32_t pan_pos_in_c, const int32_t tilt_pos_in_c)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
	uint8_t ret = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
	if (is_motor_az_enable(mc.mtr_enable)) {
 800d3b6:	4b27      	ldr	r3, [pc, #156]	; (800d454 <hal_motor_set_position+0xac>)
 800d3b8:	791b      	ldrb	r3, [r3, #4]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d016      	beq.n	800d3f0 <hal_motor_set_position+0x48>
		if (Ingenia_getDecodedStatusWord2(mc.mtrAzi.statusword) == STATUS_OPERATION_ENABLED) {
 800d3c2:	4b24      	ldr	r3, [pc, #144]	; (800d454 <hal_motor_set_position+0xac>)
 800d3c4:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 feb1 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b04      	cmp	r3, #4
 800d3d2:	d10d      	bne.n	800d3f0 <hal_motor_set_position+0x48>
//			LOG("motor pan moving\r\n");
			Ingenia_setTargetPositionVelocity(&mc.mtrAzi, pan_pos_in_c, (RWS_MOTOR_PAN_MAX_SPEED / 2), 1, 0, 0);
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	2301      	movs	r3, #1
 800d3de:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	481c      	ldr	r0, [pc, #112]	; (800d458 <hal_motor_set_position+0xb0>)
 800d3e6:	f001 f9d1 	bl	800e78c <Ingenia_setTargetPositionVelocity>
			ret++;
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (is_motor_az_enable(mc.mtr_enable) && is_motor_el_enable(mc.mtr_enable))
 800d3f0:	4b18      	ldr	r3, [pc, #96]	; (800d454 <hal_motor_set_position+0xac>)
 800d3f2:	791b      	ldrb	r3, [r3, #4]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d008      	beq.n	800d40e <hal_motor_set_position+0x66>
 800d3fc:	4b15      	ldr	r3, [pc, #84]	; (800d454 <hal_motor_set_position+0xac>)
 800d3fe:	791b      	ldrb	r3, [r3, #4]
 800d400:	f003 0302 	and.w	r3, r3, #2
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <hal_motor_set_position+0x66>
		HAL_Delay(3);
 800d408:	2003      	movs	r0, #3
 800d40a:	f7f4 ff09 	bl	8002220 <HAL_Delay>

	if (is_motor_el_enable(mc.mtr_enable)) {
 800d40e:	4b11      	ldr	r3, [pc, #68]	; (800d454 <hal_motor_set_position+0xac>)
 800d410:	791b      	ldrb	r3, [r3, #4]
 800d412:	f003 0302 	and.w	r3, r3, #2
 800d416:	2b00      	cmp	r3, #0
 800d418:	d016      	beq.n	800d448 <hal_motor_set_position+0xa0>
		if (Ingenia_getDecodedStatusWord2(mc.mtrEle.statusword) == STATUS_OPERATION_ENABLED) {
 800d41a:	4b0e      	ldr	r3, [pc, #56]	; (800d454 <hal_motor_set_position+0xac>)
 800d41c:	f8b3 35aa 	ldrh.w	r3, [r3, #1450]	; 0x5aa
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fe85 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800d426:	4603      	mov	r3, r0
 800d428:	2b04      	cmp	r3, #4
 800d42a:	d10d      	bne.n	800d448 <hal_motor_set_position+0xa0>
//			LOG("motor tilt moving\r\n");
			Ingenia_setTargetPositionVelocity(&mc.mtrEle, tilt_pos_in_c, (RWS_MOTOR_TILT_MAX_SPEED / 2), 1, 0, 0);
 800d42c:	2300      	movs	r3, #0
 800d42e:	9301      	str	r3, [sp, #4]
 800d430:	2300      	movs	r3, #0
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	2301      	movs	r3, #1
 800d436:	f44f 32a8 	mov.w	r2, #86016	; 0x15000
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	4807      	ldr	r0, [pc, #28]	; (800d45c <hal_motor_set_position+0xb4>)
 800d43e:	f001 f9a5 	bl	800e78c <Ingenia_setTargetPositionVelocity>
			ret++;
 800d442:	7bfb      	ldrb	r3, [r7, #15]
 800d444:	3301      	adds	r3, #1
 800d446:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 800d448:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	20010784 	.word	0x20010784
 800d458:	2001078c 	.word	0x2001078c
 800d45c:	20010a60 	.word	0x20010a60

0800d460 <hal_motor_set_speed>:

uint8_t hal_motor_set_speed(const int32_t pan_speed, const int32_t tilt_speed)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
	static uint8_t _pan_idle_counter = 0;
	static uint8_t _tilt_idle_counter = 0;
	uint8_t ret = 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	73fb      	strb	r3, [r7, #15]

	if (is_motor_az_enable(mc.mtr_enable)) {
 800d46e:	4b3a      	ldr	r3, [pc, #232]	; (800d558 <hal_motor_set_speed+0xf8>)
 800d470:	791b      	ldrb	r3, [r3, #4]
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	d029      	beq.n	800d4ce <hal_motor_set_speed+0x6e>
		if (Ingenia_getDecodedStatusWord2(mc.mtrAzi.statusword) == STATUS_OPERATION_ENABLED) {
 800d47a:	4b37      	ldr	r3, [pc, #220]	; (800d558 <hal_motor_set_speed+0xf8>)
 800d47c:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 800d480:	4618      	mov	r0, r3
 800d482:	f000 fe55 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800d486:	4603      	mov	r3, r0
 800d488:	2b04      	cmp	r3, #4
 800d48a:	d10d      	bne.n	800d4a8 <hal_motor_set_speed+0x48>
			if (hal_motor_speed(&mc.mtrAzi, pan_speed) == HAL_OK)
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	4833      	ldr	r0, [pc, #204]	; (800d55c <hal_motor_set_speed+0xfc>)
 800d490:	f7ff fe60 	bl	800d154 <hal_motor_speed>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <hal_motor_set_speed+0x40>
				ret++;
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	3301      	adds	r3, #1
 800d49e:	73fb      	strb	r3, [r7, #15]
			_pan_idle_counter = 0;
 800d4a0:	4b2f      	ldr	r3, [pc, #188]	; (800d560 <hal_motor_set_speed+0x100>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	e012      	b.n	800d4ce <hal_motor_set_speed+0x6e>
		}
		else {
			/* reduce upload rate */
			if (++_pan_idle_counter > 10) {
 800d4a8:	4b2d      	ldr	r3, [pc, #180]	; (800d560 <hal_motor_set_speed+0x100>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	4b2b      	ldr	r3, [pc, #172]	; (800d560 <hal_motor_set_speed+0x100>)
 800d4b2:	701a      	strb	r2, [r3, #0]
 800d4b4:	4b2a      	ldr	r3, [pc, #168]	; (800d560 <hal_motor_set_speed+0x100>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b0a      	cmp	r3, #10
 800d4ba:	d908      	bls.n	800d4ce <hal_motor_set_speed+0x6e>
				_pan_idle_counter = 0;
 800d4bc:	4b28      	ldr	r3, [pc, #160]	; (800d560 <hal_motor_set_speed+0x100>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	701a      	strb	r2, [r3, #0]
				hal_motor_set_pan_power(0);
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	f7ff ff02 	bl	800d2cc <hal_motor_set_pan_power>
				ret++;
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	if (is_motor_az_enable(mc.mtr_enable) && is_motor_el_enable(mc.mtr_enable))
 800d4ce:	4b22      	ldr	r3, [pc, #136]	; (800d558 <hal_motor_set_speed+0xf8>)
 800d4d0:	791b      	ldrb	r3, [r3, #4]
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d008      	beq.n	800d4ec <hal_motor_set_speed+0x8c>
 800d4da:	4b1f      	ldr	r3, [pc, #124]	; (800d558 <hal_motor_set_speed+0xf8>)
 800d4dc:	791b      	ldrb	r3, [r3, #4]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d002      	beq.n	800d4ec <hal_motor_set_speed+0x8c>
		osDelay(3);
 800d4e6:	2003      	movs	r0, #3
 800d4e8:	f7f9 fed0 	bl	800728c <osDelay>

	if (is_motor_el_enable(mc.mtr_enable)) {
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <hal_motor_set_speed+0xf8>)
 800d4ee:	791b      	ldrb	r3, [r3, #4]
 800d4f0:	f003 0302 	and.w	r3, r3, #2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d029      	beq.n	800d54c <hal_motor_set_speed+0xec>
		if (Ingenia_getDecodedStatusWord2(mc.mtrEle.statusword) == STATUS_OPERATION_ENABLED) {
 800d4f8:	4b17      	ldr	r3, [pc, #92]	; (800d558 <hal_motor_set_speed+0xf8>)
 800d4fa:	f8b3 35aa 	ldrh.w	r3, [r3, #1450]	; 0x5aa
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 fe16 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800d504:	4603      	mov	r3, r0
 800d506:	2b04      	cmp	r3, #4
 800d508:	d10d      	bne.n	800d526 <hal_motor_set_speed+0xc6>
			if (hal_motor_speed(&mc.mtrEle, tilt_speed) == HAL_OK)
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	4815      	ldr	r0, [pc, #84]	; (800d564 <hal_motor_set_speed+0x104>)
 800d50e:	f7ff fe21 	bl	800d154 <hal_motor_speed>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <hal_motor_set_speed+0xbe>
				ret++;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	3301      	adds	r3, #1
 800d51c:	73fb      	strb	r3, [r7, #15]
			_tilt_idle_counter = 0;
 800d51e:	4b12      	ldr	r3, [pc, #72]	; (800d568 <hal_motor_set_speed+0x108>)
 800d520:	2200      	movs	r2, #0
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	e012      	b.n	800d54c <hal_motor_set_speed+0xec>
		}
		else {
			/* reduce upload rate */
			if (++_tilt_idle_counter > 10) {
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <hal_motor_set_speed+0x108>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	3301      	adds	r3, #1
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	4b0e      	ldr	r3, [pc, #56]	; (800d568 <hal_motor_set_speed+0x108>)
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	4b0d      	ldr	r3, [pc, #52]	; (800d568 <hal_motor_set_speed+0x108>)
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b0a      	cmp	r3, #10
 800d538:	d908      	bls.n	800d54c <hal_motor_set_speed+0xec>
				_tilt_idle_counter = 0;
 800d53a:	4b0b      	ldr	r3, [pc, #44]	; (800d568 <hal_motor_set_speed+0x108>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	701a      	strb	r2, [r3, #0]
				hal_motor_set_tilt_power(0);
 800d540:	2000      	movs	r0, #0
 800d542:	f7ff fef9 	bl	800d338 <hal_motor_set_tilt_power>
				ret++;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
 800d548:	3301      	adds	r3, #1
 800d54a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return ret;
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20010784 	.word	0x20010784
 800d55c:	2001078c 	.word	0x2001078c
 800d560:	20010d34 	.word	0x20010d34
 800d564:	20010a60 	.word	0x20010a60
 800d568:	20010d35 	.word	0x20010d35

0800d56c <hal_motor_get_motor_state>:

	return 0.0f;
}

static void hal_motor_get_motor_state(Servo_Value_t *p, Servo_Value_t *t)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	static uint32_t p_state_counter = 0;
	static uint32_t p_value_counter = 0;
	static uint32_t t_state_counter = 0;
	static uint32_t t_value_counter = 0;

	if (p_state_counter != mc.mtrAzi.tpdo3_counter) {
 800d576:	4b35      	ldr	r3, [pc, #212]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d578:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800d57c:	4b34      	ldr	r3, [pc, #208]	; (800d650 <hal_motor_get_motor_state+0xe4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	429a      	cmp	r2, r3
 800d582:	d014      	beq.n	800d5ae <hal_motor_get_motor_state+0x42>
		p_state_counter = mc.mtrAzi.tpdo3_counter;
 800d584:	4b31      	ldr	r3, [pc, #196]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d586:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d58a:	4a31      	ldr	r2, [pc, #196]	; (800d650 <hal_motor_get_motor_state+0xe4>)
 800d58c:	6013      	str	r3, [r2, #0]
		p->statusword = mc.mtrAzi.statusword;
 800d58e:	4b2f      	ldr	r3, [pc, #188]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d590:	f8b3 22d6 	ldrh.w	r2, [r3, #726]	; 0x2d6
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	805a      	strh	r2, [r3, #2]
		p->current_value = mc.mtrAzi.current;
 800d598:	4b2c      	ldr	r3, [pc, #176]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d59a:	f9b3 22d4 	ldrsh.w	r2, [r3, #724]	; 0x2d4
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	809a      	strh	r2, [r3, #4]
		p->dc_link_voltage = mc.mtrAzi.voltage;
 800d5a2:	4b2a      	ldr	r3, [pc, #168]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5a4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	609a      	str	r2, [r3, #8]
	}

	if (p_value_counter != mc.mtrAzi.tpdo4_counter) {
 800d5ae:	4b27      	ldr	r3, [pc, #156]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5b0:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 800d5b4:	4b27      	ldr	r3, [pc, #156]	; (800d654 <hal_motor_get_motor_state+0xe8>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d00e      	beq.n	800d5da <hal_motor_get_motor_state+0x6e>
		p_state_counter = mc.mtrAzi.tpdo4_counter;
 800d5bc:	4b23      	ldr	r3, [pc, #140]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5be:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d5c2:	4a23      	ldr	r2, [pc, #140]	; (800d650 <hal_motor_get_motor_state+0xe4>)
 800d5c4:	6013      	str	r3, [r2, #0]
		p->speed = mc.mtrAzi.veloActual;
 800d5c6:	4b21      	ldr	r3, [pc, #132]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5c8:	f8d3 22c8 	ldr.w	r2, [r3, #712]	; 0x2c8
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	611a      	str	r2, [r3, #16]
		p->pos = mc.mtrAzi.posActual;
 800d5d0:	4b1e      	ldr	r3, [pc, #120]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5d2:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60da      	str	r2, [r3, #12]
	}

	if (t_state_counter != mc.mtrEle.tpdo3_counter) {
 800d5da:	4b1c      	ldr	r3, [pc, #112]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5dc:	f8d3 25ac 	ldr.w	r2, [r3, #1452]	; 0x5ac
 800d5e0:	4b1d      	ldr	r3, [pc, #116]	; (800d658 <hal_motor_get_motor_state+0xec>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d014      	beq.n	800d612 <hal_motor_get_motor_state+0xa6>
		t_state_counter = mc.mtrEle.tpdo3_counter;
 800d5e8:	4b18      	ldr	r3, [pc, #96]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5ea:	f8d3 35ac 	ldr.w	r3, [r3, #1452]	; 0x5ac
 800d5ee:	4a1a      	ldr	r2, [pc, #104]	; (800d658 <hal_motor_get_motor_state+0xec>)
 800d5f0:	6013      	str	r3, [r2, #0]
		t->statusword = mc.mtrEle.statusword;
 800d5f2:	4b16      	ldr	r3, [pc, #88]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5f4:	f8b3 25aa 	ldrh.w	r2, [r3, #1450]	; 0x5aa
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	805a      	strh	r2, [r3, #2]
		t->current_value = mc.mtrEle.current;
 800d5fc:	4b13      	ldr	r3, [pc, #76]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d5fe:	f9b3 25a8 	ldrsh.w	r2, [r3, #1448]	; 0x5a8
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	809a      	strh	r2, [r3, #4]
		t->dc_link_voltage = mc.mtrEle.voltage;
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d608:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800d60c:	461a      	mov	r2, r3
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	609a      	str	r2, [r3, #8]
	}

	if (t_value_counter != mc.mtrEle.tpdo4_counter) {
 800d612:	4b0e      	ldr	r3, [pc, #56]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d614:	f8d3 25a0 	ldr.w	r2, [r3, #1440]	; 0x5a0
 800d618:	4b10      	ldr	r3, [pc, #64]	; (800d65c <hal_motor_get_motor_state+0xf0>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d00e      	beq.n	800d63e <hal_motor_get_motor_state+0xd2>
		t_state_counter = mc.mtrEle.tpdo4_counter;
 800d620:	4b0a      	ldr	r3, [pc, #40]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d622:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800d626:	4a0c      	ldr	r2, [pc, #48]	; (800d658 <hal_motor_get_motor_state+0xec>)
 800d628:	6013      	str	r3, [r2, #0]
		t->speed = mc.mtrEle.veloActual;
 800d62a:	4b08      	ldr	r3, [pc, #32]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d62c:	f8d3 259c 	ldr.w	r2, [r3, #1436]	; 0x59c
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	611a      	str	r2, [r3, #16]
		t->pos = mc.mtrEle.posActual;
 800d634:	4b05      	ldr	r3, [pc, #20]	; (800d64c <hal_motor_get_motor_state+0xe0>)
 800d636:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	60da      	str	r2, [r3, #12]
	}
}
 800d63e:	bf00      	nop
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	20010784 	.word	0x20010784
 800d650:	20010d38 	.word	0x20010d38
 800d654:	20010d3c 	.word	0x20010d3c
 800d658:	20010d40 	.word	0x20010d40
 800d65c:	20010d44 	.word	0x20010d44

0800d660 <hal_motor_set_power>:

static void hal_motor_set_power(Motor_t *mtr)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	if (is_motor_az_enable(mtr->enable))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00b      	beq.n	800d68c <hal_motor_set_power+0x2c>
		if (mtr->pan_command.power_enable != mtr->pan_state.power)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	791a      	ldrb	r2, [r3, #4]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d67e:	429a      	cmp	r2, r3
 800d680:	d004      	beq.n	800d68c <hal_motor_set_power+0x2c>
			hal_motor_set_pan_power(mtr->pan_command.power_enable);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	791b      	ldrb	r3, [r3, #4]
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff fe20 	bl	800d2cc <hal_motor_set_pan_power>

	if (is_motor_el_enable(mtr->enable))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <hal_motor_set_power+0x50>
		if (mtr->tilt_command.power_enable != mtr->tilt_state.power)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7e1a      	ldrb	r2, [r3, #24]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d004      	beq.n	800d6b0 <hal_motor_set_power+0x50>
			hal_motor_set_tilt_power(mtr->tilt_command.power_enable);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	7e1b      	ldrb	r3, [r3, #24]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff fe44 	bl	800d338 <hal_motor_set_tilt_power>
}
 800d6b0:	bf00      	nop
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <hal_motor_update_motor_state>:

void hal_motor_update_motor_state(Motor_t *mtr, const uint8_t power_update)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	70fb      	strb	r3, [r7, #3]
	hal_motor_get_motor_state(&mtr->pan_state, &mtr->tilt_state);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3344      	adds	r3, #68	; 0x44
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	f7ff ff4b 	bl	800d56c <hal_motor_get_motor_state>

	if (is_motor_az_enable(mtr->enable)) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d011      	beq.n	800d706 <hal_motor_update_motor_state+0x4e>
		if (Ingenia_getDecodedStatusWord2(mc.mtrAzi.statusword) == STATUS_OPERATION_ENABLED)
 800d6e2:	4b1a      	ldr	r3, [pc, #104]	; (800d74c <hal_motor_update_motor_state+0x94>)
 800d6e4:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fd21 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b04      	cmp	r3, #4
 800d6f2:	d104      	bne.n	800d6fe <hal_motor_update_motor_state+0x46>
			mtr->pan_state.power = 1;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d6fc:	e003      	b.n	800d706 <hal_motor_update_motor_state+0x4e>
		else
			mtr->pan_state.power = 0;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}

	if (is_motor_el_enable(mtr->enable)) {
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	f003 0302 	and.w	r3, r3, #2
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d011      	beq.n	800d736 <hal_motor_update_motor_state+0x7e>
		if (Ingenia_getDecodedStatusWord2(mc.mtrEle.statusword) == STATUS_OPERATION_ENABLED)
 800d712:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <hal_motor_update_motor_state+0x94>)
 800d714:	f8b3 35aa 	ldrh.w	r3, [r3, #1450]	; 0x5aa
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 fd09 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b04      	cmp	r3, #4
 800d722:	d104      	bne.n	800d72e <hal_motor_update_motor_state+0x76>
			mtr->tilt_state.power = 1;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d72c:	e003      	b.n	800d736 <hal_motor_update_motor_state+0x7e>
		else
			mtr->tilt_state.power = 0;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	if (power_update != 0)
 800d736:	78fb      	ldrb	r3, [r7, #3]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <hal_motor_update_motor_state+0x8a>
		hal_motor_set_power(mtr);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7ff ff8f 	bl	800d660 <hal_motor_set_power>
}
 800d742:	bf00      	nop
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20010784 	.word	0x20010784

0800d750 <mtr_error_callback>:

void mtr_error_callback()
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
	MX_FDCAN2_Init();
 800d754:	f7f3 fe3a 	bl	80013cc <MX_FDCAN2_Init>
	hal_motor_init(mc.mtr_enable);
 800d758:	4b0c      	ldr	r3, [pc, #48]	; (800d78c <mtr_error_callback+0x3c>)
 800d75a:	791b      	ldrb	r3, [r3, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fae3 	bl	800cd28 <hal_motor_init>
	LOG("\r\n\nBUS MTR ERROR\r\n\n");
 800d762:	f7f9 fd34 	bl	80071ce <osKernelSysTick>
 800d766:	4603      	mov	r3, r0
 800d768:	4a09      	ldr	r2, [pc, #36]	; (800d790 <mtr_error_callback+0x40>)
 800d76a:	fba2 1203 	umull	r1, r2, r2, r3
 800d76e:	0b51      	lsrs	r1, r2, #13
 800d770:	f242 7210 	movw	r2, #10000	; 0x2710
 800d774:	fb01 f202 	mul.w	r2, r1, r2
 800d778:	1a99      	subs	r1, r3, r2
 800d77a:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 800d77e:	4a05      	ldr	r2, [pc, #20]	; (800d794 <mtr_error_callback+0x44>)
 800d780:	4805      	ldr	r0, [pc, #20]	; (800d798 <mtr_error_callback+0x48>)
 800d782:	f002 fbb3 	bl	800feec <iprintf>
}
 800d786:	bf00      	nop
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20010784 	.word	0x20010784
 800d790:	d1b71759 	.word	0xd1b71759
 800d794:	08012724 	.word	0x08012724
 800d798:	08012908 	.word	0x08012908

0800d79c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(LIM_AZ_ZERO_Pin) != 0x00u) {
 800d7a0:	4b06      	ldr	r3, [pc, #24]	; (800d7bc <EXTI9_5_IRQHandler+0x20>)
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <EXTI9_5_IRQHandler+0x16>
		__HAL_GPIO_EXTI_CLEAR_IT(LIM_AZ_ZERO_Pin);
 800d7ac:	4b03      	ldr	r3, [pc, #12]	; (800d7bc <EXTI9_5_IRQHandler+0x20>)
 800d7ae:	2280      	movs	r2, #128	; 0x80
 800d7b0:	615a      	str	r2, [r3, #20]
//				pTMail->param.sensor.trigger.pulse_off = 1;
//
//			osMailPut(mtr_get_mail(T_Weapon_id), pTMail);
//		}
	}
}
 800d7b2:	bf00      	nop
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	40010400 	.word	0x40010400

0800d7c0 <Ingenia_tpdo_callback>:

void Ingenia_tpdo_callback(CAN_Buffer_t *buffer)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08e      	sub	sp, #56	; 0x38
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	CAN_Data_t data;
	uint32_t _id_node = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	623b      	str	r3, [r7, #32]
	int _pos = 0, _velo = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	637b      	str	r3, [r7, #52]	; 0x34
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	633b      	str	r3, [r7, #48]	; 0x30
	int _voltage = 0, _current = 0, _statusword = 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7d8:	2300      	movs	r3, #0
 800d7da:	61fb      	str	r3, [r7, #28]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	61bb      	str	r3, [r7, #24]

	if (can_buffer_available(buffer) > 0) {
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 f86d 	bl	800e8c0 <can_buffer_available>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 80c5 	beq.w	800d978 <Ingenia_tpdo_callback+0x1b8>
		can_buffer_read(buffer, &data);
 800d7ee:	f107 0308 	add.w	r3, r7, #8
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f001 f91f 	bl	800ea38 <can_buffer_read>
		if ((data.id & COB_TPDO4) == COB_TPDO4) {
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	f403 6390 	and.w	r3, r3, #1152	; 0x480
 800d800:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d804:	d155      	bne.n	800d8b2 <Ingenia_tpdo_callback+0xf2>
			_id_node = data.id - COB_TPDO4;
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800d80c:	623b      	str	r3, [r7, #32]

			for ( int i = 0; i < 4; i++ ) {
 800d80e:	2300      	movs	r3, #0
 800d810:	62bb      	str	r3, [r7, #40]	; 0x28
 800d812:	e01d      	b.n	800d850 <Ingenia_tpdo_callback+0x90>
				_pos |= (int32_t) data.rxData[i] << (8 * i);
 800d814:	f107 020d 	add.w	r2, r7, #13
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	4413      	add	r3, r2
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	fa02 f303 	lsl.w	r3, r2, r3
 800d828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d82a:	4313      	orrs	r3, r2
 800d82c:	637b      	str	r3, [r7, #52]	; 0x34
				_velo |= (int32_t) data.rxData[i + 4] << (8 * i);
 800d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d830:	3304      	adds	r3, #4
 800d832:	3338      	adds	r3, #56	; 0x38
 800d834:	443b      	add	r3, r7
 800d836:	f813 3c2b 	ldrb.w	r3, [r3, #-43]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	fa02 f303 	lsl.w	r3, r2, r3
 800d844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d846:	4313      	orrs	r3, r2
 800d848:	633b      	str	r3, [r7, #48]	; 0x30
			for ( int i = 0; i < 4; i++ ) {
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	3301      	adds	r3, #1
 800d84e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	2b03      	cmp	r3, #3
 800d854:	ddde      	ble.n	800d814 <Ingenia_tpdo_callback+0x54>
			}

			if (_id_node == mc.mtrAzi._u8Node) {
 800d856:	4b4a      	ldr	r3, [pc, #296]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d858:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 800d85c:	461a      	mov	r2, r3
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	4293      	cmp	r3, r2
 800d862:	d10f      	bne.n	800d884 <Ingenia_tpdo_callback+0xc4>
				mc.mtrAzi.posActual = _pos;
 800d864:	4a46      	ldr	r2, [pc, #280]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d868:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
				mc.mtrAzi.veloActual = _velo;
 800d86c:	4a44      	ldr	r2, [pc, #272]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	f8c2 32c8 	str.w	r3, [r2, #712]	; 0x2c8
				mc.mtrAzi.tpdo4_counter++;
 800d874:	4b42      	ldr	r3, [pc, #264]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d876:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d87a:	3301      	adds	r3, #1
 800d87c:	4a40      	ldr	r2, [pc, #256]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d87e:	f8c2 32cc 	str.w	r3, [r2, #716]	; 0x2cc
				mc.mtrEle.statusword = _statusword;
				mc.mtrEle.tpdo3_counter++;
			}
		}
	}
}
 800d882:	e079      	b.n	800d978 <Ingenia_tpdo_callback+0x1b8>
			else if (_id_node == mc.mtrEle._u8Node) {
 800d884:	4b3e      	ldr	r3, [pc, #248]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d886:	f893 3595 	ldrb.w	r3, [r3, #1429]	; 0x595
 800d88a:	461a      	mov	r2, r3
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	4293      	cmp	r3, r2
 800d890:	d172      	bne.n	800d978 <Ingenia_tpdo_callback+0x1b8>
				mc.mtrEle.posActual = _pos;
 800d892:	4a3b      	ldr	r2, [pc, #236]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d896:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
				mc.mtrEle.veloActual = _velo;
 800d89a:	4a39      	ldr	r2, [pc, #228]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89e:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
				mc.mtrEle.tpdo4_counter++;
 800d8a2:	4b37      	ldr	r3, [pc, #220]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d8a4:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	4a35      	ldr	r2, [pc, #212]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d8ac:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
}
 800d8b0:	e062      	b.n	800d978 <Ingenia_tpdo_callback+0x1b8>
		else if ((data.id & COB_TPDO3) == COB_TPDO3) {
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800d8b8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800d8bc:	d15c      	bne.n	800d978 <Ingenia_tpdo_callback+0x1b8>
			_id_node = data.id - COB_TPDO3;
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d8c4:	623b      	str	r3, [r7, #32]
			for ( int i = 0; i < 4; i++ )
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ca:	e00f      	b.n	800d8ec <Ingenia_tpdo_callback+0x12c>
				_voltage |= (int32_t) data.rxData[i] << (8 * i);
 800d8cc:	f107 020d 	add.w	r2, r7, #13
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	4413      	add	r3, r2
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	00db      	lsls	r3, r3, #3
 800d8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			for ( int i = 0; i < 4; i++ )
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	ddec      	ble.n	800d8cc <Ingenia_tpdo_callback+0x10c>
			_current = (int16_t) data.rxData[5] << 8 | data.rxData[4];
 800d8f2:	7cbb      	ldrb	r3, [r7, #18]
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	7c7a      	ldrb	r2, [r7, #17]
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	61fb      	str	r3, [r7, #28]
			_statusword = (uint16_t) data.rxData[7] << 8 | data.rxData[6];
 800d8fc:	7d3b      	ldrb	r3, [r7, #20]
 800d8fe:	021b      	lsls	r3, r3, #8
 800d900:	7cfa      	ldrb	r2, [r7, #19]
 800d902:	4313      	orrs	r3, r2
 800d904:	61bb      	str	r3, [r7, #24]
			if (_id_node == mc.mtrAzi._u8Node) {
 800d906:	4b1e      	ldr	r3, [pc, #120]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d908:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 800d90c:	461a      	mov	r2, r3
 800d90e:	6a3b      	ldr	r3, [r7, #32]
 800d910:	4293      	cmp	r3, r2
 800d912:	d115      	bne.n	800d940 <Ingenia_tpdo_callback+0x180>
				mc.mtrAzi.voltage = _voltage;
 800d914:	4a1a      	ldr	r2, [pc, #104]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
				mc.mtrAzi.current = _current;
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	b21a      	sxth	r2, r3
 800d920:	4b17      	ldr	r3, [pc, #92]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d922:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
				mc.mtrAzi.statusword = _statusword;
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	b29a      	uxth	r2, r3
 800d92a:	4b15      	ldr	r3, [pc, #84]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d92c:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
				mc.mtrAzi.tpdo3_counter++;
 800d930:	4b13      	ldr	r3, [pc, #76]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d932:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d936:	3301      	adds	r3, #1
 800d938:	4a11      	ldr	r2, [pc, #68]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d93a:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
}
 800d93e:	e01b      	b.n	800d978 <Ingenia_tpdo_callback+0x1b8>
			else if (_id_node == mc.mtrEle._u8Node) {
 800d940:	4b0f      	ldr	r3, [pc, #60]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d942:	f893 3595 	ldrb.w	r3, [r3, #1429]	; 0x595
 800d946:	461a      	mov	r2, r3
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d114      	bne.n	800d978 <Ingenia_tpdo_callback+0x1b8>
				mc.mtrEle.voltage = _voltage;
 800d94e:	4a0c      	ldr	r2, [pc, #48]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d952:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
				mc.mtrEle.current = _current;
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	b21a      	sxth	r2, r3
 800d95a:	4b09      	ldr	r3, [pc, #36]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d95c:	f8a3 25a8 	strh.w	r2, [r3, #1448]	; 0x5a8
				mc.mtrEle.statusword = _statusword;
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	b29a      	uxth	r2, r3
 800d964:	4b06      	ldr	r3, [pc, #24]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d966:	f8a3 25aa 	strh.w	r2, [r3, #1450]	; 0x5aa
				mc.mtrEle.tpdo3_counter++;
 800d96a:	4b05      	ldr	r3, [pc, #20]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d96c:	f8d3 35ac 	ldr.w	r3, [r3, #1452]	; 0x5ac
 800d970:	3301      	adds	r3, #1
 800d972:	4a03      	ldr	r2, [pc, #12]	; (800d980 <Ingenia_tpdo_callback+0x1c0>)
 800d974:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
}
 800d978:	bf00      	nop
 800d97a:	3738      	adds	r7, #56	; 0x38
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20010784 	.word	0x20010784

0800d984 <Ingenia_nmt_callback>:

void Ingenia_nmt_callback(CAN_Buffer_t *buffer)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08a      	sub	sp, #40	; 0x28
 800d988:	af02      	add	r7, sp, #8
 800d98a:	6078      	str	r0, [r7, #4]
	CAN_Data_t data;

	if (can_buffer_available(buffer) > 0) {
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 ff97 	bl	800e8c0 <can_buffer_available>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d030      	beq.n	800d9fa <Ingenia_nmt_callback+0x76>
		can_buffer_peek(buffer, &data);
 800d998:	f107 030c 	add.w	r3, r7, #12
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f001 f822 	bl	800e9e8 <can_buffer_peek>

		LOG("NMT_id= %03lX\r\n", data.id);
 800d9a4:	f7f9 fc13 	bl	80071ce <osKernelSysTick>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	4a16      	ldr	r2, [pc, #88]	; (800da04 <Ingenia_nmt_callback+0x80>)
 800d9ac:	fba2 1203 	umull	r1, r2, r2, r3
 800d9b0:	0b51      	lsrs	r1, r2, #13
 800d9b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800d9b6:	fb01 f202 	mul.w	r2, r1, r2
 800d9ba:	1a99      	subs	r1, r3, r2
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	f240 2309 	movw	r3, #521	; 0x209
 800d9c4:	4a10      	ldr	r2, [pc, #64]	; (800da08 <Ingenia_nmt_callback+0x84>)
 800d9c6:	4811      	ldr	r0, [pc, #68]	; (800da0c <Ingenia_nmt_callback+0x88>)
 800d9c8:	f002 fa90 	bl	800feec <iprintf>
		for ( int i = 0; i < data.len; i++ ) {
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61fb      	str	r3, [r7, #28]
 800d9d0:	e00b      	b.n	800d9ea <Ingenia_nmt_callback+0x66>
			printf("%02X ", data.rxData[i]);
 800d9d2:	f107 0211 	add.w	r2, r7, #17
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	4413      	add	r3, r2
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	4619      	mov	r1, r3
 800d9de:	480c      	ldr	r0, [pc, #48]	; (800da10 <Ingenia_nmt_callback+0x8c>)
 800d9e0:	f002 fa84 	bl	800feec <iprintf>
		for ( int i = 0; i < data.len; i++ ) {
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	61fb      	str	r3, [r7, #28]
 800d9ea:	7c3b      	ldrb	r3, [r7, #16]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	dbee      	blt.n	800d9d2 <Ingenia_nmt_callback+0x4e>
		}
		printf("\r\n");
 800d9f4:	4807      	ldr	r0, [pc, #28]	; (800da14 <Ingenia_nmt_callback+0x90>)
 800d9f6:	f002 fb15 	bl	8010024 <puts>
	}
}
 800d9fa:	bf00      	nop
 800d9fc:	3720      	adds	r7, #32
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	d1b71759 	.word	0xd1b71759
 800da08:	08012724 	.word	0x08012724
 800da0c:	08012928 	.word	0x08012928
 800da10:	08012944 	.word	0x08012944
 800da14:	080128a4 	.word	0x080128a4

0800da18 <Ingenia_node_init>:

static SlaveNode_t slaveNodeBank;

/* init node slave buffer */
void Ingenia_node_init()
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
	slaveNodeBank.size = 0;
 800da1e:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <Ingenia_node_init+0x44>)
 800da20:	2200      	movs	r2, #0
 800da22:	f883 2020 	strb.w	r2, [r3, #32]
	for ( int i = 0; i < SERVO_NODE_SIZE_MAX; i++ ) {
 800da26:	2300      	movs	r3, #0
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	e00d      	b.n	800da48 <Ingenia_node_init+0x30>
		slaveNodeBank.node[i].id = 0;
 800da2c:	4a0b      	ldr	r2, [pc, #44]	; (800da5c <Ingenia_node_init+0x44>)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2100      	movs	r1, #0
 800da32:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		slaveNodeBank.node[i].servo = NULL;
 800da36:	4a09      	ldr	r2, [pc, #36]	; (800da5c <Ingenia_node_init+0x44>)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	4413      	add	r3, r2
 800da3e:	2200      	movs	r2, #0
 800da40:	605a      	str	r2, [r3, #4]
	for ( int i = 0; i < SERVO_NODE_SIZE_MAX; i++ ) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	3301      	adds	r3, #1
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	ddee      	ble.n	800da2c <Ingenia_node_init+0x14>
	}
}
 800da4e:	bf00      	nop
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	20010d48 	.word	0x20010d48

0800da60 <Ingenia_node_add>:

static HAL_StatusTypeDef Ingenia_node_add(Servo_t *servo)
{
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
	uint8_t currentBankSize = slaveNodeBank.size;
 800da68:	4b28      	ldr	r3, [pc, #160]	; (800db0c <Ingenia_node_add+0xac>)
 800da6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da6e:	72fb      	strb	r3, [r7, #11]

	if ((servo->_u8Node < SERVO_NODE_ID_MIN) || (servo->_u8Node > SERVO_NODE_ID_MAX))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <Ingenia_node_add+0x26>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800da80:	b25b      	sxtb	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	da01      	bge.n	800da8a <Ingenia_node_add+0x2a>
		return HAL_ERROR;
 800da86:	2301      	movs	r3, #1
 800da88:	e03a      	b.n	800db00 <Ingenia_node_add+0xa0>

	/* check if the node already exist in the banks */
	if (currentBankSize > 0) {
 800da8a:	7afb      	ldrb	r3, [r7, #11]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d014      	beq.n	800daba <Ingenia_node_add+0x5a>
		for ( int i = 0; i < currentBankSize; i++ ) {
 800da90:	2300      	movs	r3, #0
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e00d      	b.n	800dab2 <Ingenia_node_add+0x52>
			if (slaveNodeBank.node[i].id == servo->_u8Node)
 800da96:	4a1d      	ldr	r2, [pc, #116]	; (800db0c <Ingenia_node_add+0xac>)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d101      	bne.n	800daac <Ingenia_node_add+0x4c>
				return HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e029      	b.n	800db00 <Ingenia_node_add+0xa0>
		for ( int i = 0; i < currentBankSize; i++ ) {
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3301      	adds	r3, #1
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	7afb      	ldrb	r3, [r7, #11]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	dbed      	blt.n	800da96 <Ingenia_node_add+0x36>
		}
	}

	/* check if the node buffer still has enough space */
	if (currentBankSize < SERVO_NODE_SIZE_MAX - 1) {
 800daba:	7afb      	ldrb	r3, [r7, #11]
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	d81e      	bhi.n	800dafe <Ingenia_node_add+0x9e>
		slaveNodeBank.node[currentBankSize].id = servo->_u8Node;
 800dac0:	7afb      	ldrb	r3, [r7, #11]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	f892 12b9 	ldrb.w	r1, [r2, #697]	; 0x2b9
 800dac8:	4a10      	ldr	r2, [pc, #64]	; (800db0c <Ingenia_node_add+0xac>)
 800daca:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		slaveNodeBank.node[currentBankSize].servo = servo;
 800dace:	7afb      	ldrb	r3, [r7, #11]
 800dad0:	4a0e      	ldr	r2, [pc, #56]	; (800db0c <Ingenia_node_add+0xac>)
 800dad2:	00db      	lsls	r3, r3, #3
 800dad4:	4413      	add	r3, r2
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	605a      	str	r2, [r3, #4]
		slaveNodeBank.node[currentBankSize].servo->_isRegistered = 1;
 800dada:	7afb      	ldrb	r3, [r7, #11]
 800dadc:	4a0b      	ldr	r2, [pc, #44]	; (800db0c <Ingenia_node_add+0xac>)
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	4413      	add	r3, r2
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		slaveNodeBank.size++;
 800daea:	4b08      	ldr	r3, [pc, #32]	; (800db0c <Ingenia_node_add+0xac>)
 800daec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daf0:	3301      	adds	r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	4b05      	ldr	r3, [pc, #20]	; (800db0c <Ingenia_node_add+0xac>)
 800daf6:	f883 2020 	strb.w	r2, [r3, #32]
	}
	else
		return HAL_ERROR;

	return HAL_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	e000      	b.n	800db00 <Ingenia_node_add+0xa0>
		return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
}
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	20010d48 	.word	0x20010d48

0800db10 <Ingenia_rx_callback>:

	return HAL_ERROR;
}

void Ingenia_rx_callback(CAN_Data_t *data)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	uint32_t id;
	uint32_t idType;

	id = data->id % 0x80;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db20:	613b      	str	r3, [r7, #16]
	idType = data->id - id;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	60fb      	str	r3, [r7, #12]
//	LOG("%03lX\r\n", data->id);

	/* check if the node already exist in the banks */
	for ( int i = 0; i < slaveNodeBank.size; i++ ) {
 800db2c:	2300      	movs	r3, #0
 800db2e:	617b      	str	r3, [r7, #20]
 800db30:	e078      	b.n	800dc24 <Ingenia_rx_callback+0x114>
		if (slaveNodeBank.node[i].id == id) {
 800db32:	4a43      	ldr	r2, [pc, #268]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800db3a:	461a      	mov	r2, r3
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	4293      	cmp	r3, r2
 800db40:	d16d      	bne.n	800dc1e <Ingenia_rx_callback+0x10e>
			if (idType == COB_EMERGENCY) {
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b80      	cmp	r3, #128	; 0x80
 800db46:	d115      	bne.n	800db74 <Ingenia_rx_callback+0x64>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufEMER, data);
 800db48:	4a3d      	ldr	r2, [pc, #244]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	4413      	add	r3, r2
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800db56:	6879      	ldr	r1, [r7, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	f000 fee9 	bl	800e930 <can_buffer_write>
				Ingenia_emer_callback(&slaveNodeBank.node[i].servo->buffer.bufEMER);
 800db5e:	4a38      	ldr	r2, [pc, #224]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	4413      	add	r3, r2
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 f8b2 	bl	800dcd6 <Ingenia_emer_callback>
 800db72:	e054      	b.n	800dc1e <Ingenia_rx_callback+0x10e>
			}
			else if (idType == COB_NMT_CTRL) {
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db7a:	d113      	bne.n	800dba4 <Ingenia_rx_callback+0x94>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufNMT, data);
 800db7c:	4a30      	ldr	r2, [pc, #192]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	4413      	add	r3, r2
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	33cc      	adds	r3, #204	; 0xcc
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fed0 	bl	800e930 <can_buffer_write>
				Ingenia_nmt_callback(&slaveNodeBank.node[i].servo->buffer.bufNMT);
 800db90:	4a2b      	ldr	r2, [pc, #172]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	00db      	lsls	r3, r3, #3
 800db96:	4413      	add	r3, r2
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	33cc      	adds	r3, #204	; 0xcc
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff fef1 	bl	800d984 <Ingenia_nmt_callback>
 800dba2:	e03c      	b.n	800dc1e <Ingenia_rx_callback+0x10e>
			}
			else if (idType == COB_TSDO) {
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800dbaa:	d113      	bne.n	800dbd4 <Ingenia_rx_callback+0xc4>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufTSDO, data);
 800dbac:	4a24      	ldr	r2, [pc, #144]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	4413      	add	r3, r2
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	3328      	adds	r3, #40	; 0x28
 800dbb8:	6879      	ldr	r1, [r7, #4]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 feb8 	bl	800e930 <can_buffer_write>
				Ingenia_tsdo_callback(&slaveNodeBank.node[i].servo->buffer.bufTSDO);
 800dbc0:	4a1f      	ldr	r2, [pc, #124]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	4413      	add	r3, r2
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	3328      	adds	r3, #40	; 0x28
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 f88c 	bl	800dcea <Ingenia_tsdo_callback>
 800dbd2:	e024      	b.n	800dc1e <Ingenia_rx_callback+0x10e>
			}
			else if ((idType == COB_TPDO1) || (idType == COB_TPDO2) || (idType == COB_TPDO3) || (idType == COB_TPDO4)) {
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800dbda:	d00b      	beq.n	800dbf4 <Ingenia_rx_callback+0xe4>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dbe2:	d007      	beq.n	800dbf4 <Ingenia_rx_callback+0xe4>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800dbea:	d003      	beq.n	800dbf4 <Ingenia_rx_callback+0xe4>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dbf2:	d114      	bne.n	800dc1e <Ingenia_rx_callback+0x10e>
				can_buffer_write(&slaveNodeBank.node[i].servo->buffer.bufTPDO, data);
 800dbf4:	4a12      	ldr	r2, [pc, #72]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	00db      	lsls	r3, r3, #3
 800dbfa:	4413      	add	r3, r2
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f000 fe93 	bl	800e930 <can_buffer_write>
				Ingenia_tpdo_callback(&slaveNodeBank.node[i].servo->buffer.bufTPDO);
 800dc0a:	4a0d      	ldr	r2, [pc, #52]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	4413      	add	r3, r2
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fdd1 	bl	800d7c0 <Ingenia_tpdo_callback>
	for ( int i = 0; i < slaveNodeBank.size; i++ ) {
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	3301      	adds	r3, #1
 800dc22:	617b      	str	r3, [r7, #20]
 800dc24:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <Ingenia_rx_callback+0x130>)
 800dc26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	f6ff af7f 	blt.w	800db32 <Ingenia_rx_callback+0x22>
			}
		}
	}
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	20010d48 	.word	0x20010d48

0800dc44 <Ingenia_init>:

HAL_StatusTypeDef Ingenia_init(Servo_t *servo, CAN_INTERFACE_HANDLETYPE *hcan, const uint8_t node)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	71fb      	strb	r3, [r7, #7]
	can_buffer_flush(&servo->buffer.bufEMER);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 ff19 	bl	800ea90 <can_buffer_flush>
	can_buffer_flush(&servo->buffer.bufNMT);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	33cc      	adds	r3, #204	; 0xcc
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 ff14 	bl	800ea90 <can_buffer_flush>
	can_buffer_flush(&servo->buffer.bufTPDO);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 ff0e 	bl	800ea90 <can_buffer_flush>
	can_buffer_flush(&servo->buffer.bufTSDO);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3328      	adds	r3, #40	; 0x28
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 ff09 	bl	800ea90 <can_buffer_flush>
	servo->hcan = hcan;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	601a      	str	r2, [r3, #0]
	servo->_u8Node = node;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	79fa      	ldrb	r2, [r7, #7]
 800dc88:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
	servo->_isRegistered = 0;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
	servo->_isInitialAngleDeterminationProcessFinished = 0;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
	servo->posActual = 0;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	servo->veloActual = 0;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	Ingenia_prepare_tx_header(servo);
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f001 f803 	bl	800ecb8 <Ingenia_prepare_tx_header>

#if INGENIA_USE_RTOS==1
	HAL_Delay(10);
 800dcb2:	200a      	movs	r0, #10
 800dcb4:	f7f4 fab4 	bl	8002220 <HAL_Delay>
//	Ingenia_write_nmt(servo, NMT_RESET_COMM);
//	HAL_Delay(500);
	Ingenia_write_nmt(servo, NMT_START_REMOTE_NODE);
 800dcb8:	2101      	movs	r1, #1
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f000 f8d8 	bl	800de70 <Ingenia_write_nmt>
	HAL_Delay(10);
 800dcc0:	200a      	movs	r0, #10
 800dcc2:	f7f4 faad 	bl	8002220 <HAL_Delay>
#endif	//if INGENIA_USE_RTOS==1

	return Ingenia_node_add(servo);
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff feca 	bl	800da60 <Ingenia_node_add>
 800dccc:	4603      	mov	r3, r0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <Ingenia_emer_callback>:
	}
	return HAL_ERROR;
}

__weak void Ingenia_emer_callback(CAN_Buffer_t *buffer)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
	UNUSED(buffer);
}
 800dcde:	bf00      	nop
 800dce0:	370c      	adds	r7, #12
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <Ingenia_tsdo_callback>:
{
	UNUSED(buffer);
}

__weak void Ingenia_tsdo_callback(CAN_Buffer_t *buffer)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
	UNUSED(buffer);
}
 800dcf2:	bf00      	nop
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <Ingenia_read_sdo>:

uint32_t Ingenia_read_sdo(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint8_t *bIsValid)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b092      	sub	sp, #72	; 0x48
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	607b      	str	r3, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	817b      	strh	r3, [r7, #10]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	727b      	strb	r3, [r7, #9]
	/* read register using SDO */
	uint8_t canTxBuffer[8];
	uint8_t isValid = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t millis = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t elapseTime;
	uint32_t sendTimer = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	643b      	str	r3, [r7, #64]	; 0x40
	CAN_Data_t cData;
	uint16_t u16IndexFeed;
	uint8_t u8SubIndexFeed;
	uint32_t u32Result = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t _id_target = COB_RSDO + servo->_u8Node;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800dd28:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800dd2c:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t _len = 4;
 800dd2e:	2304      	movs	r3, #4
 800dd30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* flush current buffer */
	can_buffer_flush(&servo->buffer.bufTSDO);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3328      	adds	r3, #40	; 0x28
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 fea9 	bl	800ea90 <can_buffer_flush>
	memset(canTxBuffer, 0, 8);
 800dd3e:	f107 0320 	add.w	r3, r7, #32
 800dd42:	2208      	movs	r2, #8
 800dd44:	2100      	movs	r1, #0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f001 fc5e 	bl	800f608 <memset>

	canTxBuffer[0] = 0x40;  //css[5..7]=2(upload), bit[0..4]=x
 800dd4c:	2340      	movs	r3, #64	; 0x40
 800dd4e:	f887 3020 	strb.w	r3, [r7, #32]
	canTxBuffer[1] = u16Index & 0xFF;
 800dd52:	897b      	ldrh	r3, [r7, #10]
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	canTxBuffer[2] = u16Index >> 8 & 0xFF;
 800dd5a:	897b      	ldrh	r3, [r7, #10]
 800dd5c:	0a1b      	lsrs	r3, r3, #8
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	canTxBuffer[3] = u8SubIndex;
 800dd66:	7a7b      	ldrb	r3, [r7, #9]
 800dd68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	elapseTime = HAL_GetTick() + 1000;
 800dd6c:	f7f4 fa4c 	bl	8002208 <HAL_GetTick>
 800dd70:	4603      	mov	r3, r0
 800dd72:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dd76:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (!isValid) {
 800dd78:	e04e      	b.n	800de18 <Ingenia_read_sdo+0x11a>
		millis = HAL_GetTick();
 800dd7a:	f7f4 fa45 	bl	8002208 <HAL_GetTick>
 800dd7e:	63b8      	str	r0, [r7, #56]	; 0x38
		/* check if timeout exceeded */
		if (millis >= elapseTime)
 800dd80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d24c      	bcs.n	800de22 <Ingenia_read_sdo+0x124>
			break;

		if (millis >= sendTimer) {
 800dd88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d30a      	bcc.n	800dda6 <Ingenia_read_sdo+0xa8>
			/* Start the Transmission process */
			_INGENIA_write_data(servo, _id_target, _len, canTxBuffer);
 800dd90:	f107 0320 	add.w	r3, r7, #32
 800dd94:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dd98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f000 ffb0 	bl	800ed00 <_INGENIA_write_data>
			/* retry send command */
			sendTimer = millis + 200;
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	33c8      	adds	r3, #200	; 0xc8
 800dda4:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (can_buffer_available(&servo->buffer.bufTSDO) > 0) {
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	3328      	adds	r3, #40	; 0x28
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 fd88 	bl	800e8c0 <can_buffer_available>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d02d      	beq.n	800de12 <Ingenia_read_sdo+0x114>
			if (can_buffer_read(&servo->buffer.bufTSDO, &cData) > 0) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3328      	adds	r3, #40	; 0x28
 800ddba:	f107 0210 	add.w	r2, r7, #16
 800ddbe:	4611      	mov	r1, r2
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 fe39 	bl	800ea38 <can_buffer_read>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dd25      	ble.n	800de18 <Ingenia_read_sdo+0x11a>
				/* check id sender (must be from CBO_TSDO & match index & sub-index */
				u16IndexFeed = (uint16_t) cData.rxData[2] << 8 | cData.rxData[1];
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	021b      	lsls	r3, r3, #8
 800ddd0:	b21a      	sxth	r2, r3
 800ddd2:	7dbb      	ldrb	r3, [r7, #22]
 800ddd4:	b21b      	sxth	r3, r3
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	b21b      	sxth	r3, r3
 800ddda:	857b      	strh	r3, [r7, #42]	; 0x2a
				u8SubIndexFeed = cData.rxData[3];
 800dddc:	7e3b      	ldrb	r3, [r7, #24]
 800ddde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				if ((u16IndexFeed == u16Index) && (u8SubIndexFeed == u8SubIndex)) {
 800dde2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800dde4:	897b      	ldrh	r3, [r7, #10]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d116      	bne.n	800de18 <Ingenia_read_sdo+0x11a>
 800ddea:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800ddee:	7a7b      	ldrb	r3, [r7, #9]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d111      	bne.n	800de18 <Ingenia_read_sdo+0x11a>
					u32Result = (uint32_t) cData.rxData[7] << 24 | (uint32_t) cData.rxData[6] << 16
 800ddf4:	7f3b      	ldrb	r3, [r7, #28]
 800ddf6:	061a      	lsls	r2, r3, #24
 800ddf8:	7efb      	ldrb	r3, [r7, #27]
 800ddfa:	041b      	lsls	r3, r3, #16
 800ddfc:	431a      	orrs	r2, r3
							| (uint32_t) cData.rxData[5] << 8 | (uint32_t) cData.rxData[4];
 800ddfe:	7ebb      	ldrb	r3, [r7, #26]
 800de00:	021b      	lsls	r3, r3, #8
 800de02:	4313      	orrs	r3, r2
 800de04:	7e7a      	ldrb	r2, [r7, #25]
					u32Result = (uint32_t) cData.rxData[7] << 24 | (uint32_t) cData.rxData[6] << 16
 800de06:	4313      	orrs	r3, r2
 800de08:	63fb      	str	r3, [r7, #60]	; 0x3c

					isValid = 1;
 800de0a:	2301      	movs	r3, #1
 800de0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800de10:	e002      	b.n	800de18 <Ingenia_read_sdo+0x11a>
				}
			}
		}
#if INGENIA_USE_RTOS==1
		else
			osDelay(1);
 800de12:	2001      	movs	r0, #1
 800de14:	f7f9 fa3a 	bl	800728c <osDelay>
	while (!isValid) {
 800de18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d0ac      	beq.n	800dd7a <Ingenia_read_sdo+0x7c>
 800de20:	e000      	b.n	800de24 <Ingenia_read_sdo+0x126>
			break;
 800de22:	bf00      	nop
#endif	//if INGENIA_USE_RTOS==1

	}

	*bIsValid = isValid;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800de2a:	701a      	strb	r2, [r3, #0]

	return u32Result;
 800de2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3748      	adds	r7, #72	; 0x48
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <Ingenia_read_reg_sdo>:

uint32_t Ingenia_read_reg_sdo(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	460b      	mov	r3, r1
 800de40:	807b      	strh	r3, [r7, #2]
 800de42:	4613      	mov	r3, r2
 800de44:	707b      	strb	r3, [r7, #1]

	uint32_t u32Result = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]
	uint8_t isValid = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	72fb      	strb	r3, [r7, #11]

	while (!isValid) {
 800de4e:	e007      	b.n	800de60 <Ingenia_read_reg_sdo+0x2a>
		u32Result = Ingenia_read_sdo(servo, u16Index, u8SubIndex, &isValid);
 800de50:	f107 030b 	add.w	r3, r7, #11
 800de54:	787a      	ldrb	r2, [r7, #1]
 800de56:	8879      	ldrh	r1, [r7, #2]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ff50 	bl	800dcfe <Ingenia_read_sdo>
 800de5e:	60f8      	str	r0, [r7, #12]
	while (!isValid) {
 800de60:	7afb      	ldrb	r3, [r7, #11]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d0f4      	beq.n	800de50 <Ingenia_read_reg_sdo+0x1a>
	}

	return u32Result;
 800de66:	68fb      	ldr	r3, [r7, #12]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <Ingenia_write_nmt>:

HAL_StatusTypeDef Ingenia_write_nmt(Servo_t *servo, NmtModes_e mode)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	70fb      	strb	r3, [r7, #3]
	uint8_t canTxBuffer[CAN_DATA_MAX];

	memset(canTxBuffer, 0, CAN_DATA_MAX);
 800de7c:	f107 0308 	add.w	r3, r7, #8
 800de80:	2208      	movs	r2, #8
 800de82:	2100      	movs	r1, #0
 800de84:	4618      	mov	r0, r3
 800de86:	f001 fbbf 	bl	800f608 <memset>
	canTxBuffer[0] = mode;
 800de8a:	78fb      	ldrb	r3, [r7, #3]
 800de8c:	723b      	strb	r3, [r7, #8]
	canTxBuffer[1] = servo->_u8Node;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800de94:	727b      	strb	r3, [r7, #9]

	/* Start the Transmission process */
	return _INGENIA_write_data(servo, COB_NMT_SERVICE, 2, canTxBuffer);
 800de96:	f107 0308 	add.w	r3, r7, #8
 800de9a:	2202      	movs	r2, #2
 800de9c:	2100      	movs	r1, #0
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 ff2e 	bl	800ed00 <_INGENIA_write_data>
 800dea4:	4603      	mov	r3, r0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <Ingenia_write_rpdo>:

void Ingenia_write_rpdo(Servo_t *servo, uint32_t cob_rpdo, uint8_t *data, uint8_t len)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b088      	sub	sp, #32
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	607a      	str	r2, [r7, #4]
 800deba:	70fb      	strb	r3, [r7, #3]
	uint8_t canTxBuffer[8];
	uint32_t id_target = cob_rpdo | servo->_u8Node;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800dec2:	461a      	mov	r2, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	61fb      	str	r3, [r7, #28]

	memcpy(canTxBuffer, data, len);
 800deca:	78fa      	ldrb	r2, [r7, #3]
 800decc:	f107 0310 	add.w	r3, r7, #16
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f001 fb8a 	bl	800f5ec <memcpy>

	/* Start the Transmission process */
	uint32_t timeout = HAL_GetTick() + 1000;
 800ded8:	f7f4 f996 	bl	8002208 <HAL_GetTick>
 800dedc:	4603      	mov	r3, r0
 800dede:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dee2:	61bb      	str	r3, [r7, #24]
	while (_INGENIA_write_data(servo, id_target, len, canTxBuffer) != HAL_OK) {
 800dee4:	e008      	b.n	800def8 <Ingenia_write_rpdo+0x4a>
		if (HAL_GetTick() > timeout)
 800dee6:	f7f4 f98f 	bl	8002208 <HAL_GetTick>
 800deea:	4602      	mov	r2, r0
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	4293      	cmp	r3, r2
 800def0:	d30d      	bcc.n	800df0e <Ingenia_write_rpdo+0x60>
			break;
		HAL_Delay(1);
 800def2:	2001      	movs	r0, #1
 800def4:	f7f4 f994 	bl	8002220 <HAL_Delay>
	while (_INGENIA_write_data(servo, id_target, len, canTxBuffer) != HAL_OK) {
 800def8:	f107 0310 	add.w	r3, r7, #16
 800defc:	78fa      	ldrb	r2, [r7, #3]
 800defe:	69f9      	ldr	r1, [r7, #28]
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f000 fefd 	bl	800ed00 <_INGENIA_write_data>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1ec      	bne.n	800dee6 <Ingenia_write_rpdo+0x38>
	}
}
 800df0c:	e000      	b.n	800df10 <Ingenia_write_rpdo+0x62>
			break;
 800df0e:	bf00      	nop
}
 800df10:	bf00      	nop
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <Ingenia_write_sdo>:

HAL_StatusTypeDef Ingenia_write_sdo(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint8_t objSize, uint32_t value)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08c      	sub	sp, #48	; 0x30
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	4608      	mov	r0, r1
 800df22:	4611      	mov	r1, r2
 800df24:	461a      	mov	r2, r3
 800df26:	4603      	mov	r3, r0
 800df28:	807b      	strh	r3, [r7, #2]
 800df2a:	460b      	mov	r3, r1
 800df2c:	707b      	strb	r3, [r7, #1]
 800df2e:	4613      	mov	r3, r2
 800df30:	703b      	strb	r3, [r7, #0]
	uint8_t canTxBuffer[8];
	uint8_t sdoDataSize = 0;
 800df32:	2300      	movs	r3, #0
 800df34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t elapseTime;
	uint8_t isValid = 0;
 800df38:	2300      	movs	r3, #0
 800df3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CAN_Data_t dummy;
	uint32_t _id_target = COB_RSDO + servo->_u8Node;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800df44:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800df48:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t _len = 8;
 800df4a:	2308      	movs	r3, #8
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(canTxBuffer, 0, CAN_DATA_MAX);
 800df50:	f107 0318 	add.w	r3, r7, #24
 800df54:	2208      	movs	r2, #8
 800df56:	2100      	movs	r1, #0
 800df58:	4618      	mov	r0, r3
 800df5a:	f001 fb55 	bl	800f608 <memset>
	switch (objSize)
 800df5e:	783b      	ldrb	r3, [r7, #0]
 800df60:	2b04      	cmp	r3, #4
 800df62:	d018      	beq.n	800df96 <Ingenia_write_sdo+0x7e>
 800df64:	2b04      	cmp	r3, #4
 800df66:	dc29      	bgt.n	800dfbc <Ingenia_write_sdo+0xa4>
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d002      	beq.n	800df72 <Ingenia_write_sdo+0x5a>
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d007      	beq.n	800df80 <Ingenia_write_sdo+0x68>
 800df70:	e024      	b.n	800dfbc <Ingenia_write_sdo+0xa4>
	{
	case 1:
		sdoDataSize = SDO_DATA_SIZE_1;
 800df72:	230c      	movs	r3, #12
 800df74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		canTxBuffer[4] = value;
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	773b      	strb	r3, [r7, #28]
		break;
 800df7e:	e01d      	b.n	800dfbc <Ingenia_write_sdo+0xa4>
	case 2:
		sdoDataSize = SDO_DATA_SIZE_2;
 800df80:	2308      	movs	r3, #8
 800df82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		canTxBuffer[4] = value & 0xFF;
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	773b      	strb	r3, [r7, #28]
		canTxBuffer[5] = value >> 8 & 0xFF;
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	0a1b      	lsrs	r3, r3, #8
 800df90:	b2db      	uxtb	r3, r3
 800df92:	777b      	strb	r3, [r7, #29]
		break;
 800df94:	e012      	b.n	800dfbc <Ingenia_write_sdo+0xa4>
	case 4:
		sdoDataSize = SDO_DATA_SIZE_4;
 800df96:	2300      	movs	r3, #0
 800df98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		canTxBuffer[4] = value & 0xFF;
 800df9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	773b      	strb	r3, [r7, #28]
		canTxBuffer[5] = value >> 8 & 0xFF;
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa4:	0a1b      	lsrs	r3, r3, #8
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	777b      	strb	r3, [r7, #29]
		canTxBuffer[6] = value >> 16 & 0xFF;
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfac:	0c1b      	lsrs	r3, r3, #16
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	77bb      	strb	r3, [r7, #30]
		canTxBuffer[7] = value >> 24 & 0xFF;
 800dfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb4:	0e1b      	lsrs	r3, r3, #24
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	77fb      	strb	r3, [r7, #31]
		break;
 800dfba:	bf00      	nop
	}

	canTxBuffer[0] = SDO_DOWNLOAD_REQUEST_BITS | SDO_E_TRANSFER_BIT | SDO_S_SIZE_INDICATOR_BIT | sdoDataSize;
 800dfbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfc0:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	763b      	strb	r3, [r7, #24]

	canTxBuffer[1] = u16Index & 0xFF;
 800dfc8:	887b      	ldrh	r3, [r7, #2]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	767b      	strb	r3, [r7, #25]
	canTxBuffer[2] = (u16Index >> 8) & 0xFF;
 800dfce:	887b      	ldrh	r3, [r7, #2]
 800dfd0:	0a1b      	lsrs	r3, r3, #8
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	76bb      	strb	r3, [r7, #26]
	canTxBuffer[3] = u8SubIndex;
 800dfd8:	787b      	ldrb	r3, [r7, #1]
 800dfda:	76fb      	strb	r3, [r7, #27]

	can_buffer_flush(&servo->buffer.bufTSDO);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	3328      	adds	r3, #40	; 0x28
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f000 fd55 	bl	800ea90 <can_buffer_flush>
	/* Start the Transmission process */
	if (_INGENIA_write_data(servo, _id_target, _len, canTxBuffer) == HAL_OK) {
 800dfe6:	f107 0318 	add.w	r3, r7, #24
 800dfea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dfee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fe85 	bl	800ed00 <_INGENIA_write_data>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d149      	bne.n	800e090 <Ingenia_write_sdo+0x178>
		/* ignore reply */
		elapseTime = HAL_GetTick() + 1000;
 800dffc:	f7f4 f904 	bl	8002208 <HAL_GetTick>
 800e000:	4603      	mov	r3, r0
 800e002:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e006:	623b      	str	r3, [r7, #32]
		isValid = 0;
 800e008:	2300      	movs	r3, #0
 800e00a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		while (!isValid) {
 800e00e:	e033      	b.n	800e078 <Ingenia_write_sdo+0x160>
			if (HAL_GetTick() >= elapseTime)
 800e010:	f7f4 f8fa 	bl	8002208 <HAL_GetTick>
 800e014:	4602      	mov	r2, r0
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	4293      	cmp	r3, r2
 800e01a:	d932      	bls.n	800e082 <Ingenia_write_sdo+0x16a>
				break;
			if (can_buffer_available(&servo->buffer.bufTSDO)) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	3328      	adds	r3, #40	; 0x28
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fc4d 	bl	800e8c0 <can_buffer_available>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d022      	beq.n	800e072 <Ingenia_write_sdo+0x15a>
				can_buffer_read(&servo->buffer.bufTSDO, &dummy);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3328      	adds	r3, #40	; 0x28
 800e030:	f107 0208 	add.w	r2, r7, #8
 800e034:	4611      	mov	r1, r2
 800e036:	4618      	mov	r0, r3
 800e038:	f000 fcfe 	bl	800ea38 <can_buffer_read>
				if (((dummy.rxData[0] & SDO_DOWNLOAD_RESPONSE_BITS) == SDO_DOWNLOAD_RESPONSE_BITS)
 800e03c:	7b7b      	ldrb	r3, [r7, #13]
 800e03e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e042:	2b60      	cmp	r3, #96	; 0x60
 800e044:	d115      	bne.n	800e072 <Ingenia_write_sdo+0x15a>
						&& (dummy.rxData[1] == (u16Index & 0xFF)) && (dummy.rxData[2] == ((u16Index >> 8) & 0xFF))
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	461a      	mov	r2, r3
 800e04a:	887b      	ldrh	r3, [r7, #2]
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	429a      	cmp	r2, r3
 800e050:	d10f      	bne.n	800e072 <Ingenia_write_sdo+0x15a>
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	461a      	mov	r2, r3
 800e056:	887b      	ldrh	r3, [r7, #2]
 800e058:	0a1b      	lsrs	r3, r3, #8
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	429a      	cmp	r2, r3
 800e060:	d107      	bne.n	800e072 <Ingenia_write_sdo+0x15a>
						&& (dummy.rxData[3] == u8SubIndex)) {
 800e062:	7c3b      	ldrb	r3, [r7, #16]
 800e064:	787a      	ldrb	r2, [r7, #1]
 800e066:	429a      	cmp	r2, r3
 800e068:	d103      	bne.n	800e072 <Ingenia_write_sdo+0x15a>

					isValid = 1;
 800e06a:	2301      	movs	r3, #1
 800e06c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;
 800e070:	e008      	b.n	800e084 <Ingenia_write_sdo+0x16c>
				}
			}
#if INGENIA_USE_RTOS==1
			osDelay(10);
 800e072:	200a      	movs	r0, #10
 800e074:	f7f9 f90a 	bl	800728c <osDelay>
		while (!isValid) {
 800e078:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d0c7      	beq.n	800e010 <Ingenia_write_sdo+0xf8>
 800e080:	e000      	b.n	800e084 <Ingenia_write_sdo+0x16c>
				break;
 800e082:	bf00      	nop
//			osThreadYield();
#endif	//if INGENIA_USE_RTOS==1

		}
		if (isValid)
 800e084:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d001      	beq.n	800e090 <Ingenia_write_sdo+0x178>
			return HAL_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	e000      	b.n	800e092 <Ingenia_write_sdo+0x17a>
	}

	return HAL_ERROR;
 800e090:	2301      	movs	r3, #1
}
 800e092:	4618      	mov	r0, r3
 800e094:	3730      	adds	r7, #48	; 0x30
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <Ingenia_write_sdo_u32>:

HAL_StatusTypeDef Ingenia_write_sdo_u32(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint32_t value)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b086      	sub	sp, #24
 800e09e:	af02      	add	r7, sp, #8
 800e0a0:	60f8      	str	r0, [r7, #12]
 800e0a2:	607b      	str	r3, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	817b      	strh	r3, [r7, #10]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	727b      	strb	r3, [r7, #9]
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 4, value);
 800e0ac:	7a7a      	ldrb	r2, [r7, #9]
 800e0ae:	8979      	ldrh	r1, [r7, #10]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	2304      	movs	r3, #4
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff ff2e 	bl	800df18 <Ingenia_write_sdo>
 800e0bc:	4603      	mov	r3, r0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <Ingenia_write_sdo_u16>:
{
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 4, value);
}

HAL_StatusTypeDef Ingenia_write_sdo_u16(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint16_t value)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b086      	sub	sp, #24
 800e0ca:	af02      	add	r7, sp, #8
 800e0cc:	60f8      	str	r0, [r7, #12]
 800e0ce:	4608      	mov	r0, r1
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	817b      	strh	r3, [r7, #10]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	727b      	strb	r3, [r7, #9]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	80fb      	strh	r3, [r7, #6]
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 2, value);
 800e0e0:	88fb      	ldrh	r3, [r7, #6]
 800e0e2:	7a7a      	ldrb	r2, [r7, #9]
 800e0e4:	8979      	ldrh	r1, [r7, #10]
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f7ff ff14 	bl	800df18 <Ingenia_write_sdo>
 800e0f0:	4603      	mov	r3, r0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <Ingenia_write_sdo_u8>:
{
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 2, value);
}

HAL_StatusTypeDef Ingenia_write_sdo_u8(Servo_t *servo, uint16_t u16Index, uint8_t u8SubIndex, uint8_t value)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af02      	add	r7, sp, #8
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	4608      	mov	r0, r1
 800e104:	4611      	mov	r1, r2
 800e106:	461a      	mov	r2, r3
 800e108:	4603      	mov	r3, r0
 800e10a:	807b      	strh	r3, [r7, #2]
 800e10c:	460b      	mov	r3, r1
 800e10e:	707b      	strb	r3, [r7, #1]
 800e110:	4613      	mov	r3, r2
 800e112:	703b      	strb	r3, [r7, #0]
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 1, value);
 800e114:	783b      	ldrb	r3, [r7, #0]
 800e116:	787a      	ldrb	r2, [r7, #1]
 800e118:	8879      	ldrh	r1, [r7, #2]
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	2301      	movs	r3, #1
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7ff fefa 	bl	800df18 <Ingenia_write_sdo>
 800e124:	4603      	mov	r3, r0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
	...

0800e130 <Ingenia_getDecodedStatusWord2>:
{
	return Ingenia_write_sdo(servo, u16Index, u8SubIndex, 1, value);
}

StateMachineStatus_e Ingenia_getDecodedStatusWord2(const uint16_t statusword)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	80fb      	strh	r3, [r7, #6]
	uint16_t u16StatusWord = statusword;
 800e13a:	88fb      	ldrh	r3, [r7, #6]
 800e13c:	81bb      	strh	r3, [r7, #12]
	uint16_t u16LSBMask;
	StateMachineStatus_e eStateMachineStatus = STATUS_UNKNOWN;
 800e13e:	2308      	movs	r3, #8
 800e140:	73fb      	strb	r3, [r7, #15]

	u16LSBMask = STATUS_WORD_REGISTER_BITS_READY_TO_SWITCH_ON | STATUS_WORD_REGISTER_BITS_SWITCHED_ON |
 800e142:	230f      	movs	r3, #15
 800e144:	817b      	strh	r3, [r7, #10]
//

//	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
//			== STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED);

	switch ((u16StatusWord & u16LSBMask))
 800e146:	89ba      	ldrh	r2, [r7, #12]
 800e148:	897b      	ldrh	r3, [r7, #10]
 800e14a:	4013      	ands	r3, r2
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	2b0f      	cmp	r3, #15
 800e150:	d85d      	bhi.n	800e20e <Ingenia_getDecodedStatusWord2+0xde>
 800e152:	a201      	add	r2, pc, #4	; (adr r2, 800e158 <Ingenia_getDecodedStatusWord2+0x28>)
 800e154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e158:	0800e199 	.word	0x0800e199
 800e15c:	0800e1af 	.word	0x0800e1af
 800e160:	0800e20f 	.word	0x0800e20f
 800e164:	0800e1bf 	.word	0x0800e1bf
 800e168:	0800e20f 	.word	0x0800e20f
 800e16c:	0800e20f 	.word	0x0800e20f
 800e170:	0800e20f 	.word	0x0800e20f
 800e174:	0800e1cf 	.word	0x0800e1cf
 800e178:	0800e1ff 	.word	0x0800e1ff
 800e17c:	0800e20f 	.word	0x0800e20f
 800e180:	0800e20f 	.word	0x0800e20f
 800e184:	0800e20f 	.word	0x0800e20f
 800e188:	0800e20f 	.word	0x0800e20f
 800e18c:	0800e20f 	.word	0x0800e20f
 800e190:	0800e20f 	.word	0x0800e20f
 800e194:	0800e1ef 	.word	0x0800e1ef
	{
	case 0x00:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800e198:	89bb      	ldrh	r3, [r7, #12]
 800e19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <Ingenia_getDecodedStatusWord2+0x78>
			eStateMachineStatus = STATUS_NOT_READY_TO_SWITCH_ON;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
		}
		else {
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
		}
		break;
 800e1a6:	e03e      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
		break;
 800e1ac:	e03b      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>

	case 0x01:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e1ae:	89bb      	ldrh	r3, [r7, #12]
 800e1b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1b4:	2b20      	cmp	r3, #32
 800e1b6:	d12d      	bne.n	800e214 <Ingenia_getDecodedStatusWord2+0xe4>
				== 0x20) {
			eStateMachineStatus = STATUS_READY_TO_SWITCH_ON;
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e1bc:	e02a      	b.n	800e214 <Ingenia_getDecodedStatusWord2+0xe4>

	case 0x03:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e1be:	89bb      	ldrh	r3, [r7, #12]
 800e1c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1c4:	2b20      	cmp	r3, #32
 800e1c6:	d127      	bne.n	800e218 <Ingenia_getDecodedStatusWord2+0xe8>
				== 0x20) {
			eStateMachineStatus = STATUS_SWITCH_ON;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e1cc:	e024      	b.n	800e218 <Ingenia_getDecodedStatusWord2+0xe8>

	case 0x07:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e1ce:	89bb      	ldrh	r3, [r7, #12]
 800e1d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1d4:	2b20      	cmp	r3, #32
 800e1d6:	d102      	bne.n	800e1de <Ingenia_getDecodedStatusWord2+0xae>
				== 0x20) {
			eStateMachineStatus = STATUS_OPERATION_ENABLED;
 800e1d8:	2304      	movs	r3, #4
 800e1da:	73fb      	strb	r3, [r7, #15]
		}
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
				== 0x00) {
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
		}
		break;
 800e1dc:	e01e      	b.n	800e21c <Ingenia_getDecodedStatusWord2+0xec>
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e1de:	89bb      	ldrh	r3, [r7, #12]
 800e1e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d119      	bne.n	800e21c <Ingenia_getDecodedStatusWord2+0xec>
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
 800e1e8:	2305      	movs	r3, #5
 800e1ea:	73fb      	strb	r3, [r7, #15]
		break;
 800e1ec:	e016      	b.n	800e21c <Ingenia_getDecodedStatusWord2+0xec>

	case 0x0F:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800e1ee:	89bb      	ldrh	r3, [r7, #12]
 800e1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d113      	bne.n	800e220 <Ingenia_getDecodedStatusWord2+0xf0>
			eStateMachineStatus = STATUS_FAULT_REACTION_ACTIVE;
 800e1f8:	2306      	movs	r3, #6
 800e1fa:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e1fc:	e010      	b.n	800e220 <Ingenia_getDecodedStatusWord2+0xf0>

	case 0x08:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800e1fe:	89bb      	ldrh	r3, [r7, #12]
 800e200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10d      	bne.n	800e224 <Ingenia_getDecodedStatusWord2+0xf4>
			eStateMachineStatus = STATUS_FAULT;
 800e208:	2307      	movs	r3, #7
 800e20a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e20c:	e00a      	b.n	800e224 <Ingenia_getDecodedStatusWord2+0xf4>

	default:
		eStateMachineStatus = STATUS_UNKNOWN;
 800e20e:	2308      	movs	r3, #8
 800e210:	73fb      	strb	r3, [r7, #15]
		break;
 800e212:	e008      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>
		break;
 800e214:	bf00      	nop
 800e216:	e006      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>
		break;
 800e218:	bf00      	nop
 800e21a:	e004      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>
		break;
 800e21c:	bf00      	nop
 800e21e:	e002      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>
		break;
 800e220:	bf00      	nop
 800e222:	e000      	b.n	800e226 <Ingenia_getDecodedStatusWord2+0xf6>
		break;
 800e224:	bf00      	nop
	}

	return eStateMachineStatus;
 800e226:	7bfb      	ldrb	r3, [r7, #15]

}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <Ingenia_getDecodedStatusWord>:

StateMachineStatus_e Ingenia_getDecodedStatusWord(Servo_t *servo)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
	uint16_t u16StatusWord = servo->statusword;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8b3 32ce 	ldrh.w	r3, [r3, #718]	; 0x2ce
 800e242:	81fb      	strh	r3, [r7, #14]

	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800e244:	89fb      	ldrh	r3, [r7, #14]
 800e246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
			== STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED);
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	bf14      	ite	ne
 800e24e:	2301      	movne	r3, #1
 800e250:	2300      	moveq	r3, #0
 800e252:	b2db      	uxtb	r3, r3
 800e254:	461a      	mov	r2, r3
	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba

	return Ingenia_getDecodedStatusWord2(u16StatusWord);
 800e25c:	89fb      	ldrh	r3, [r7, #14]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff ff66 	bl	800e130 <Ingenia_getDecodedStatusWord2>
 800e264:	4603      	mov	r3, r0
//		eStateMachineStatus = STATUS_UNKNOWN;
//		break;
//	}
//
//	return eStateMachineStatus;
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
	...

0800e270 <Ingenia_decodeStatusWord>:

static StateMachineStatus_e Ingenia_decodeStatusWord(Servo_t *servo, uint16_t u16StatusWord)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	460b      	mov	r3, r1
 800e27a:	807b      	strh	r3, [r7, #2]
	uint16_t u16LSBMask;
	StateMachineStatus_e eStateMachineStatus = STATUS_UNKNOWN;
 800e27c:	2308      	movs	r3, #8
 800e27e:	73fb      	strb	r3, [r7, #15]

	u16LSBMask = STATUS_WORD_REGISTER_BITS_READY_TO_SWITCH_ON | STATUS_WORD_REGISTER_BITS_SWITCHED_ON |
 800e280:	230f      	movs	r3, #15
 800e282:	81bb      	strh	r3, [r7, #12]
// xxxx xxxx x0xx 1111  | Fault reaction active     //
// xxxx xxxx x0xx 1000  | Fault                     //
// ----------------------------------------------   //
//

	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800e284:	887b      	ldrh	r3, [r7, #2]
 800e286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
			== STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED);
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	bf14      	ite	ne
 800e28e:	2301      	movne	r3, #1
 800e290:	2300      	moveq	r3, #0
 800e292:	b2db      	uxtb	r3, r3
 800e294:	461a      	mov	r2, r3
	servo->_isInitialAngleDeterminationProcessFinished = ((u16StatusWord & STATUS_WORD_REGISTER_BITS_ANGLE_PROC_FINISHED)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba

	switch ((u16StatusWord & u16LSBMask))
 800e29c:	887a      	ldrh	r2, [r7, #2]
 800e29e:	89bb      	ldrh	r3, [r7, #12]
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	2b0f      	cmp	r3, #15
 800e2a6:	d85e      	bhi.n	800e366 <Ingenia_decodeStatusWord+0xf6>
 800e2a8:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <Ingenia_decodeStatusWord+0x40>)
 800e2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ae:	bf00      	nop
 800e2b0:	0800e2f1 	.word	0x0800e2f1
 800e2b4:	0800e307 	.word	0x0800e307
 800e2b8:	0800e367 	.word	0x0800e367
 800e2bc:	0800e317 	.word	0x0800e317
 800e2c0:	0800e367 	.word	0x0800e367
 800e2c4:	0800e367 	.word	0x0800e367
 800e2c8:	0800e367 	.word	0x0800e367
 800e2cc:	0800e327 	.word	0x0800e327
 800e2d0:	0800e357 	.word	0x0800e357
 800e2d4:	0800e367 	.word	0x0800e367
 800e2d8:	0800e367 	.word	0x0800e367
 800e2dc:	0800e367 	.word	0x0800e367
 800e2e0:	0800e367 	.word	0x0800e367
 800e2e4:	0800e367 	.word	0x0800e367
 800e2e8:	0800e367 	.word	0x0800e367
 800e2ec:	0800e347 	.word	0x0800e347
	{
	case 0x00:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800e2f0:	887b      	ldrh	r3, [r7, #2]
 800e2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d102      	bne.n	800e300 <Ingenia_decodeStatusWord+0x90>
			eStateMachineStatus = STATUS_NOT_READY_TO_SWITCH_ON;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
		}
		else {
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
		}
		break;
 800e2fe:	e03e      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>
			eStateMachineStatus = STATUS_SWITCH_ON_DISABLED;
 800e300:	2301      	movs	r3, #1
 800e302:	73fb      	strb	r3, [r7, #15]
		break;
 800e304:	e03b      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>

	case 0x01:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e306:	887b      	ldrh	r3, [r7, #2]
 800e308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e30c:	2b20      	cmp	r3, #32
 800e30e:	d12d      	bne.n	800e36c <Ingenia_decodeStatusWord+0xfc>
				== 0x20) {
			eStateMachineStatus = STATUS_READY_TO_SWITCH_ON;
 800e310:	2302      	movs	r3, #2
 800e312:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e314:	e02a      	b.n	800e36c <Ingenia_decodeStatusWord+0xfc>

	case 0x03:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e316:	887b      	ldrh	r3, [r7, #2]
 800e318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e31c:	2b20      	cmp	r3, #32
 800e31e:	d127      	bne.n	800e370 <Ingenia_decodeStatusWord+0x100>
				== 0x20) {
			eStateMachineStatus = STATUS_SWITCH_ON;
 800e320:	2303      	movs	r3, #3
 800e322:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e324:	e024      	b.n	800e370 <Ingenia_decodeStatusWord+0x100>

	case 0x07:
		if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e326:	887b      	ldrh	r3, [r7, #2]
 800e328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e32c:	2b20      	cmp	r3, #32
 800e32e:	d102      	bne.n	800e336 <Ingenia_decodeStatusWord+0xc6>
				== 0x20) {
			eStateMachineStatus = STATUS_OPERATION_ENABLED;
 800e330:	2304      	movs	r3, #4
 800e332:	73fb      	strb	r3, [r7, #15]
		}
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
				== 0x00) {
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
		}
		break;
 800e334:	e01e      	b.n	800e374 <Ingenia_decodeStatusWord+0x104>
		else if ((u16StatusWord & (STATUS_WORD_REGISTER_BITS_QUICK_STOP | STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED))
 800e336:	887b      	ldrh	r3, [r7, #2]
 800e338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d119      	bne.n	800e374 <Ingenia_decodeStatusWord+0x104>
			eStateMachineStatus = STATUS_QUICK_STOP_ACTIVE;
 800e340:	2305      	movs	r3, #5
 800e342:	73fb      	strb	r3, [r7, #15]
		break;
 800e344:	e016      	b.n	800e374 <Ingenia_decodeStatusWord+0x104>

	case 0x0F:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800e346:	887b      	ldrh	r3, [r7, #2]
 800e348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d113      	bne.n	800e378 <Ingenia_decodeStatusWord+0x108>
			eStateMachineStatus = STATUS_FAULT_REACTION_ACTIVE;
 800e350:	2306      	movs	r3, #6
 800e352:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e354:	e010      	b.n	800e378 <Ingenia_decodeStatusWord+0x108>

	case 0x08:
		if ((u16StatusWord & STATUS_WORD_REGISTER_BITS_SWITCH_ON_DISABLED) == 0x00) {
 800e356:	887b      	ldrh	r3, [r7, #2]
 800e358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10d      	bne.n	800e37c <Ingenia_decodeStatusWord+0x10c>
			eStateMachineStatus = STATUS_FAULT;
 800e360:	2307      	movs	r3, #7
 800e362:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800e364:	e00a      	b.n	800e37c <Ingenia_decodeStatusWord+0x10c>

	default:
		eStateMachineStatus = STATUS_UNKNOWN;
 800e366:	2308      	movs	r3, #8
 800e368:	73fb      	strb	r3, [r7, #15]
		break;
 800e36a:	e008      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>
		break;
 800e36c:	bf00      	nop
 800e36e:	e006      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>
		break;
 800e370:	bf00      	nop
 800e372:	e004      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>
		break;
 800e374:	bf00      	nop
 800e376:	e002      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>
		break;
 800e378:	bf00      	nop
 800e37a:	e000      	b.n	800e37e <Ingenia_decodeStatusWord+0x10e>
		break;
 800e37c:	bf00      	nop
	}

	return eStateMachineStatus;
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <Ingenia_getStateMachineStatus>:

static void Ingenia_getStateMachineStatus(Servo_t *servo, StateMachineStatus_e *peStateMachineStatus)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
	uint16_t u16StatusWord = Ingenia_read_reg_sdo(servo, OBJECT_STATUS_WORD);
 800e396:	2200      	movs	r2, #0
 800e398:	f246 0141 	movw	r1, #24641	; 0x6041
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7ff fd4a 	bl	800de36 <Ingenia_read_reg_sdo>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	81fb      	strh	r3, [r7, #14]

	*peStateMachineStatus = Ingenia_decodeStatusWord(servo, u16StatusWord);
 800e3a6:	89fb      	ldrh	r3, [r7, #14]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7ff ff60 	bl	800e270 <Ingenia_decodeStatusWord>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	701a      	strb	r2, [r3, #0]
}
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <Ingenia_sendStateMachineCommand>:

static void Ingenia_sendStateMachineCommand(Servo_t *servo, const StateMachineCommand_e eStateMachineCommand)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
	uint8_t isValidCommand = 1;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
	uint8_t needsTransition = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	73bb      	strb	r3, [r7, #14]
	uint16_t u16TransitionAuxValue = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	81bb      	strh	r3, [r7, #12]
	uint16_t u16ActualControlWord = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	817b      	strh	r3, [r7, #10]

	u16ActualControlWord = Ingenia_read_reg_sdo(servo, OBJECT_CONTROL_WORD);
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f246 0140 	movw	r1, #24640	; 0x6040
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7ff fd27 	bl	800de36 <Ingenia_read_reg_sdo>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	817b      	strh	r3, [r7, #10]
	switch (eStateMachineCommand)
 800e3ec:	78fb      	ldrb	r3, [r7, #3]
 800e3ee:	2b07      	cmp	r3, #7
 800e3f0:	d860      	bhi.n	800e4b4 <Ingenia_sendStateMachineCommand+0xf4>
 800e3f2:	a201      	add	r2, pc, #4	; (adr r2, 800e3f8 <Ingenia_sendStateMachineCommand+0x38>)
 800e3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f8:	0800e419 	.word	0x0800e419
 800e3fc:	0800e42b 	.word	0x0800e42b
 800e400:	0800e43d 	.word	0x0800e43d
 800e404:	0800e44f 	.word	0x0800e44f
 800e408:	0800e459 	.word	0x0800e459
 800e40c:	0800e46b 	.word	0x0800e46b
 800e410:	0800e47d 	.word	0x0800e47d
 800e414:	0800e48f 	.word	0x0800e48f
	{
	case COMMAND_SHUTDOWN:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e418:	897b      	ldrh	r3, [r7, #10]
 800e41a:	f023 0381 	bic.w	r3, r3, #129	; 0x81
 800e41e:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE | CONTROL_WORD_REGISTER_BITS_QUICK_STOP);
 800e420:	897b      	ldrh	r3, [r7, #10]
 800e422:	f043 0306 	orr.w	r3, r3, #6
 800e426:	817b      	strh	r3, [r7, #10]
		break;
 800e428:	e047      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_SWITCH_ON:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e42a:	897b      	ldrh	r3, [r7, #10]
 800e42c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e430:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800e432:	897b      	ldrh	r3, [r7, #10]
 800e434:	f043 0307 	orr.w	r3, r3, #7
 800e438:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP);
		break;
 800e43a:	e03e      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_SWITCH_ON_AND_ENABLE_OPERATION:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e43c:	897b      	ldrh	r3, [r7, #10]
 800e43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e442:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800e444:	897b      	ldrh	r3, [r7, #10]
 800e446:	f043 030f 	orr.w	r3, r3, #15
 800e44a:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP | CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION);
		break;
 800e44c:	e035      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_DISABLE_VOLTAGE:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e44e:	897b      	ldrh	r3, [r7, #10]
 800e450:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800e454:	817b      	strh	r3, [r7, #10]
		break;
 800e456:	e030      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_QUICK_STOP:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_QUICK_STOP | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e458:	897b      	ldrh	r3, [r7, #10]
 800e45a:	f023 0384 	bic.w	r3, r3, #132	; 0x84
 800e45e:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE;
 800e460:	897b      	ldrh	r3, [r7, #10]
 800e462:	f043 0302 	orr.w	r3, r3, #2
 800e466:	817b      	strh	r3, [r7, #10]
		break;
 800e468:	e027      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_DISABLE_OPERATION:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION | CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e46a:	897b      	ldrh	r3, [r7, #10]
 800e46c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e470:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800e472:	897b      	ldrh	r3, [r7, #10]
 800e474:	f043 0307 	orr.w	r3, r3, #7
 800e478:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP);
		break;
 800e47a:	e01e      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_ENABLE_OPERATION:
		u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_FAULT_RESET);
 800e47c:	897b      	ldrh	r3, [r7, #10]
 800e47e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e482:	817b      	strh	r3, [r7, #10]
		u16ActualControlWord |= (CONTROL_WORD_REGISTER_BITS_SWITCH_ON | CONTROL_WORD_REGISTER_BITS_ENABLE_VOLTAGE
 800e484:	897b      	ldrh	r3, [r7, #10]
 800e486:	f043 030f 	orr.w	r3, r3, #15
 800e48a:	817b      	strh	r3, [r7, #10]
				| CONTROL_WORD_REGISTER_BITS_QUICK_STOP | CONTROL_WORD_REGISTER_BITS_ENABLE_OPERATION);
		break;
 800e48c:	e015      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	case COMMAND_FAULT_RESET:
		if (u16ActualControlWord & CONTROL_WORD_REGISTER_BITS_FAULT_RESET) {
 800e48e:	897b      	ldrh	r3, [r7, #10]
 800e490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e494:	2b00      	cmp	r3, #0
 800e496:	d008      	beq.n	800e4aa <Ingenia_sendStateMachineCommand+0xea>
			u16ActualControlWord &= ~CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
 800e498:	897b      	ldrh	r3, [r7, #10]
 800e49a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e49e:	817b      	strh	r3, [r7, #10]
			needsTransition = 1;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	73bb      	strb	r3, [r7, #14]
			u16TransitionAuxValue = CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
 800e4a4:	2380      	movs	r3, #128	; 0x80
 800e4a6:	81bb      	strh	r3, [r7, #12]
		}
		else {
			u16ActualControlWord |= CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
		}
		break;
 800e4a8:	e007      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>
			u16ActualControlWord |= CONTROL_WORD_REGISTER_BITS_FAULT_RESET;
 800e4aa:	897b      	ldrh	r3, [r7, #10]
 800e4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4b0:	817b      	strh	r3, [r7, #10]
		break;
 800e4b2:	e002      	b.n	800e4ba <Ingenia_sendStateMachineCommand+0xfa>

	default:
		isValidCommand = 0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	73fb      	strb	r3, [r7, #15]
		break;
 800e4b8:	bf00      	nop
	}

	if (isValidCommand == 1) {
 800e4ba:	7bfb      	ldrb	r3, [r7, #15]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d114      	bne.n	800e4ea <Ingenia_sendStateMachineCommand+0x12a>
		Ingenia_write_sdo_u16(servo, OBJECT_CONTROL_WORD, u16ActualControlWord);
 800e4c0:	897b      	ldrh	r3, [r7, #10]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f246 0140 	movw	r1, #24640	; 0x6040
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff fdfc 	bl	800e0c6 <Ingenia_write_sdo_u16>
		if (needsTransition == 1) {
 800e4ce:	7bbb      	ldrb	r3, [r7, #14]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d10a      	bne.n	800e4ea <Ingenia_sendStateMachineCommand+0x12a>
			u16ActualControlWord |= u16TransitionAuxValue;
 800e4d4:	897a      	ldrh	r2, [r7, #10]
 800e4d6:	89bb      	ldrh	r3, [r7, #12]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	817b      	strh	r3, [r7, #10]
			Ingenia_write_sdo_u16(servo, OBJECT_CONTROL_WORD, u16ActualControlWord);
 800e4dc:	897b      	ldrh	r3, [r7, #10]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f246 0140 	movw	r1, #24640	; 0x6040
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff fdee 	bl	800e0c6 <Ingenia_write_sdo_u16>
		}
	}
}
 800e4ea:	bf00      	nop
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop

0800e4f4 <Ingenia_verifyStatusIsReached>:

static uint8_t Ingenia_verifyStatusIsReached(Servo_t *servo, const StateMachineStatus_e eNextStateMachineStatus)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
	StateMachineStatus_e eActualStateMachineStatus;
	Ingenia_getStateMachineStatus(servo, &eActualStateMachineStatus);
 800e500:	f107 030f 	add.w	r3, r7, #15
 800e504:	4619      	mov	r1, r3
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7ff ff40 	bl	800e38c <Ingenia_getStateMachineStatus>

	uint32_t started_waiting_at = HAL_GetTick();
 800e50c:	f7f3 fe7c 	bl	8002208 <HAL_GetTick>
 800e510:	6178      	str	r0, [r7, #20]
	uint32_t millis = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	613b      	str	r3, [r7, #16]
	while (eNextStateMachineStatus != eActualStateMachineStatus) {
 800e516:	e010      	b.n	800e53a <Ingenia_verifyStatusIsReached+0x46>
		millis = HAL_GetTick();
 800e518:	f7f3 fe76 	bl	8002208 <HAL_GetTick>
 800e51c:	6138      	str	r0, [r7, #16]
		// Check if timeout excedeed
		if (millis - started_waiting_at > 1000)
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e528:	d901      	bls.n	800e52e <Ingenia_verifyStatusIsReached+0x3a>
			return 0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e00a      	b.n	800e544 <Ingenia_verifyStatusIsReached+0x50>
		Ingenia_getStateMachineStatus(servo, &eActualStateMachineStatus);
 800e52e:	f107 030f 	add.w	r3, r7, #15
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ff29 	bl	800e38c <Ingenia_getStateMachineStatus>
	while (eNextStateMachineStatus != eActualStateMachineStatus) {
 800e53a:	7bfb      	ldrb	r3, [r7, #15]
 800e53c:	78fa      	ldrb	r2, [r7, #3]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d1ea      	bne.n	800e518 <Ingenia_verifyStatusIsReached+0x24>
	}
	return 1;
 800e542:	2301      	movs	r3, #1

}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <Ingenia_gotoStatus>:

void Ingenia_gotoStatus(Servo_t *servo, const StateMachineStatus_e eDestinationStateMachineStatus)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	460b      	mov	r3, r1
 800e556:	70fb      	strb	r3, [r7, #3]
	StateMachineStatus_e tCurrentStateMachineStatus = STATUS_NOT_READY_TO_SWITCH_ON;
 800e558:	2300      	movs	r3, #0
 800e55a:	73bb      	strb	r3, [r7, #14]
	Ingenia_getStateMachineStatus(servo, &tCurrentStateMachineStatus);
 800e55c:	f107 030e 	add.w	r3, r7, #14
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff ff12 	bl	800e38c <Ingenia_getStateMachineStatus>

	while (tCurrentStateMachineStatus != eDestinationStateMachineStatus) {
 800e568:	e0c7      	b.n	800e6fa <Ingenia_gotoStatus+0x1ae>
		StateMachineStatus_e nextState = eDestinationStateMachineStatus;
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	73fb      	strb	r3, [r7, #15]
		switch (tCurrentStateMachineStatus)
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	3b01      	subs	r3, #1
 800e572:	2b06      	cmp	r3, #6
 800e574:	f200 80c7 	bhi.w	800e706 <Ingenia_gotoStatus+0x1ba>
 800e578:	a201      	add	r2, pc, #4	; (adr r2, 800e580 <Ingenia_gotoStatus+0x34>)
 800e57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57e:	bf00      	nop
 800e580:	0800e59d 	.word	0x0800e59d
 800e584:	0800e5c5 	.word	0x0800e5c5
 800e588:	0800e609 	.word	0x0800e609
 800e58c:	0800e64b 	.word	0x0800e64b
 800e590:	0800e69b 	.word	0x0800e69b
 800e594:	0800e707 	.word	0x0800e707
 800e598:	0800e6c1 	.word	0x0800e6c1
		{
		case STATUS_SWITCH_ON_DISABLED:
			if ((eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON)
 800e59c:	78fb      	ldrb	r3, [r7, #3]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d009      	beq.n	800e5b6 <Ingenia_gotoStatus+0x6a>
					|| (eDestinationStateMachineStatus == STATUS_SWITCH_ON)
 800e5a2:	78fb      	ldrb	r3, [r7, #3]
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d006      	beq.n	800e5b6 <Ingenia_gotoStatus+0x6a>
					|| (eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e5a8:	78fb      	ldrb	r3, [r7, #3]
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	d003      	beq.n	800e5b6 <Ingenia_gotoStatus+0x6a>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e5ae:	78fb      	ldrb	r3, [r7, #3]
 800e5b0:	2b05      	cmp	r3, #5
 800e5b2:	f040 80aa 	bne.w	800e70a <Ingenia_gotoStatus+0x1be>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SHUTDOWN);
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7ff ff01 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_READY_TO_SWITCH_ON;
 800e5be:	2302      	movs	r3, #2
 800e5c0:	73fb      	strb	r3, [r7, #15]
			}
			else {
				return;
			}
			break;
 800e5c2:	e093      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
		case STATUS_READY_TO_SWITCH_ON:
			if (eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED) {
 800e5c4:	78fb      	ldrb	r3, [r7, #3]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d106      	bne.n	800e5d8 <Ingenia_gotoStatus+0x8c>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e5ca:	2103      	movs	r1, #3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff fef7 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	73fb      	strb	r3, [r7, #15]
				nextState = STATUS_OPERATION_ENABLED;
			}
			else {
				return;
			}
			break;
 800e5d6:	e089      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_SWITCH_ON) {
 800e5d8:	78fb      	ldrb	r3, [r7, #3]
 800e5da:	2b03      	cmp	r3, #3
 800e5dc:	d106      	bne.n	800e5ec <Ingenia_gotoStatus+0xa0>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SWITCH_ON);
 800e5de:	2101      	movs	r1, #1
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff feed 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON;
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	73fb      	strb	r3, [r7, #15]
			break;
 800e5ea:	e07f      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if ((eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e5ec:	78fb      	ldrb	r3, [r7, #3]
 800e5ee:	2b04      	cmp	r3, #4
 800e5f0:	d003      	beq.n	800e5fa <Ingenia_gotoStatus+0xae>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e5f2:	78fb      	ldrb	r3, [r7, #3]
 800e5f4:	2b05      	cmp	r3, #5
 800e5f6:	f040 808a 	bne.w	800e70e <Ingenia_gotoStatus+0x1c2>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SWITCH_ON_AND_ENABLE_OPERATION);
 800e5fa:	2102      	movs	r1, #2
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff fedf 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_OPERATION_ENABLED;
 800e602:	2304      	movs	r3, #4
 800e604:	73fb      	strb	r3, [r7, #15]
			break;
 800e606:	e071      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
		case STATUS_SWITCH_ON:
			if (eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED) {
 800e608:	78fb      	ldrb	r3, [r7, #3]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d106      	bne.n	800e61c <Ingenia_gotoStatus+0xd0>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e60e:	2103      	movs	r1, #3
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff fed5 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e616:	2301      	movs	r3, #1
 800e618:	73fb      	strb	r3, [r7, #15]
				nextState = STATUS_OPERATION_ENABLED;
			}
			else {
				return;
			}
			break;
 800e61a:	e067      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON) {
 800e61c:	78fb      	ldrb	r3, [r7, #3]
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d106      	bne.n	800e630 <Ingenia_gotoStatus+0xe4>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SHUTDOWN);
 800e622:	2100      	movs	r1, #0
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff fecb 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_READY_TO_SWITCH_ON;
 800e62a:	2302      	movs	r3, #2
 800e62c:	73fb      	strb	r3, [r7, #15]
			break;
 800e62e:	e05d      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if ((eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e630:	78fb      	ldrb	r3, [r7, #3]
 800e632:	2b04      	cmp	r3, #4
 800e634:	d002      	beq.n	800e63c <Ingenia_gotoStatus+0xf0>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e636:	78fb      	ldrb	r3, [r7, #3]
 800e638:	2b05      	cmp	r3, #5
 800e63a:	d16a      	bne.n	800e712 <Ingenia_gotoStatus+0x1c6>
				Ingenia_sendStateMachineCommand(servo, COMMAND_ENABLE_OPERATION);
 800e63c:	2106      	movs	r1, #6
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f7ff febe 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_OPERATION_ENABLED;
 800e644:	2304      	movs	r3, #4
 800e646:	73fb      	strb	r3, [r7, #15]
			break;
 800e648:	e050      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
		case STATUS_OPERATION_ENABLED:
			if (eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED) {
 800e64a:	78fb      	ldrb	r3, [r7, #3]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d106      	bne.n	800e65e <Ingenia_gotoStatus+0x112>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e650:	2103      	movs	r1, #3
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff feb4 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e658:	2301      	movs	r3, #1
 800e65a:	73fb      	strb	r3, [r7, #15]
				nextState = STATUS_QUICK_STOP_ACTIVE;
			}
			else {
				return;
			}
			break;
 800e65c:	e046      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON) {
 800e65e:	78fb      	ldrb	r3, [r7, #3]
 800e660:	2b02      	cmp	r3, #2
 800e662:	d106      	bne.n	800e672 <Ingenia_gotoStatus+0x126>
				Ingenia_sendStateMachineCommand(servo, COMMAND_SHUTDOWN);
 800e664:	2100      	movs	r1, #0
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff feaa 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_READY_TO_SWITCH_ON;
 800e66c:	2302      	movs	r3, #2
 800e66e:	73fb      	strb	r3, [r7, #15]
			break;
 800e670:	e03c      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_SWITCH_ON) {
 800e672:	78fb      	ldrb	r3, [r7, #3]
 800e674:	2b03      	cmp	r3, #3
 800e676:	d106      	bne.n	800e686 <Ingenia_gotoStatus+0x13a>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_OPERATION);
 800e678:	2105      	movs	r1, #5
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7ff fea0 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON;
 800e680:	2303      	movs	r3, #3
 800e682:	73fb      	strb	r3, [r7, #15]
			break;
 800e684:	e032      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
			else if (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE) {
 800e686:	78fb      	ldrb	r3, [r7, #3]
 800e688:	2b05      	cmp	r3, #5
 800e68a:	d144      	bne.n	800e716 <Ingenia_gotoStatus+0x1ca>
				Ingenia_sendStateMachineCommand(servo, COMMAND_QUICK_STOP);
 800e68c:	2104      	movs	r1, #4
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff fe96 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_QUICK_STOP_ACTIVE;
 800e694:	2305      	movs	r3, #5
 800e696:	73fb      	strb	r3, [r7, #15]
			break;
 800e698:	e028      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
		case STATUS_QUICK_STOP_ACTIVE:
			if ((eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED)
 800e69a:	78fb      	ldrb	r3, [r7, #3]
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d008      	beq.n	800e6b2 <Ingenia_gotoStatus+0x166>
					|| (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON)
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d005      	beq.n	800e6b2 <Ingenia_gotoStatus+0x166>
					|| (eDestinationStateMachineStatus == STATUS_SWITCH_ON)
 800e6a6:	78fb      	ldrb	r3, [r7, #3]
 800e6a8:	2b03      	cmp	r3, #3
 800e6aa:	d002      	beq.n	800e6b2 <Ingenia_gotoStatus+0x166>
					|| (eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)) {
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d133      	bne.n	800e71a <Ingenia_gotoStatus+0x1ce>
				Ingenia_sendStateMachineCommand(servo, COMMAND_DISABLE_VOLTAGE);
 800e6b2:	2103      	movs	r1, #3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fe83 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	73fb      	strb	r3, [r7, #15]
			}
			else {
				return;
			}
			break;
 800e6be:	e015      	b.n	800e6ec <Ingenia_gotoStatus+0x1a0>
		case STATUS_FAULT:
			if ((eDestinationStateMachineStatus == STATUS_SWITCH_ON_DISABLED)
 800e6c0:	78fb      	ldrb	r3, [r7, #3]
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d00b      	beq.n	800e6de <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_READY_TO_SWITCH_ON)
 800e6c6:	78fb      	ldrb	r3, [r7, #3]
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d008      	beq.n	800e6de <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_SWITCH_ON)
 800e6cc:	78fb      	ldrb	r3, [r7, #3]
 800e6ce:	2b03      	cmp	r3, #3
 800e6d0:	d005      	beq.n	800e6de <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_OPERATION_ENABLED)
 800e6d2:	78fb      	ldrb	r3, [r7, #3]
 800e6d4:	2b04      	cmp	r3, #4
 800e6d6:	d002      	beq.n	800e6de <Ingenia_gotoStatus+0x192>
					|| (eDestinationStateMachineStatus == STATUS_QUICK_STOP_ACTIVE)) {
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	2b05      	cmp	r3, #5
 800e6dc:	d11f      	bne.n	800e71e <Ingenia_gotoStatus+0x1d2>
				Ingenia_sendStateMachineCommand(servo, COMMAND_FAULT_RESET);
 800e6de:	2107      	movs	r1, #7
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f7ff fe6d 	bl	800e3c0 <Ingenia_sendStateMachineCommand>
				nextState = STATUS_SWITCH_ON_DISABLED;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	73fb      	strb	r3, [r7, #15]
			}
			else {
				return;
			}
			break;
 800e6ea:	bf00      	nop
			return;
		}
			break;
		}

		Ingenia_verifyStatusIsReached(servo, nextState);
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff feff 	bl	800e4f4 <Ingenia_verifyStatusIsReached>
		tCurrentStateMachineStatus = nextState;
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	73bb      	strb	r3, [r7, #14]
	while (tCurrentStateMachineStatus != eDestinationStateMachineStatus) {
 800e6fa:	7bbb      	ldrb	r3, [r7, #14]
 800e6fc:	78fa      	ldrb	r2, [r7, #3]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	f47f af33 	bne.w	800e56a <Ingenia_gotoStatus+0x1e>
 800e704:	e00c      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
			return;
 800e706:	bf00      	nop
 800e708:	e00a      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
				return;
 800e70a:	bf00      	nop
 800e70c:	e008      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
				return;
 800e70e:	bf00      	nop
 800e710:	e006      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
				return;
 800e712:	bf00      	nop
 800e714:	e004      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
				return;
 800e716:	bf00      	nop
 800e718:	e002      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
				return;
 800e71a:	bf00      	nop
 800e71c:	e000      	b.n	800e720 <Ingenia_gotoStatus+0x1d4>
				return;
 800e71e:	bf00      	nop
	}
}
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop

0800e728 <Ingenia_enableMotor>:

/* Motor enable/disable functions */
void Ingenia_enableMotor(Servo_t *servo)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
	LOG("servo node=0x%02X\r\n", servo->_u8Node);
	Ingenia_gotoStatus(servo, STATUS_OPERATION_ENABLED);
 800e730:	2104      	movs	r1, #4
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7ff ff0a 	bl	800e54c <Ingenia_gotoStatus>
}
 800e738:	bf00      	nop
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <Ingenia_disableMotor>:

void Ingenia_disableMotor(Servo_t *servo)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	StateMachineStatus_e currentStateMachineStatus;
	Ingenia_getStateMachineStatus(servo, &currentStateMachineStatus);
 800e748:	f107 030f 	add.w	r3, r7, #15
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7ff fe1c 	bl	800e38c <Ingenia_getStateMachineStatus>

	if (currentStateMachineStatus == STATUS_OPERATION_ENABLED) {
 800e754:	7bfb      	ldrb	r3, [r7, #15]
 800e756:	2b04      	cmp	r3, #4
 800e758:	d103      	bne.n	800e762 <Ingenia_disableMotor+0x22>
		Ingenia_gotoStatus(servo, STATUS_SWITCH_ON);
 800e75a:	2103      	movs	r1, #3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff fef5 	bl	800e54c <Ingenia_gotoStatus>
	}

}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <Ingenia_setModeOfOperation>:
#define MODE_SPECIFIC_BITS_CHANGE_SET			0x0020
#define MODE_SPECIFIC_BITS_ABS_REL				0x0040

// Motion funcions
void Ingenia_setModeOfOperation(Servo_t *servo, DriveModes_e driverMode)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	70fb      	strb	r3, [r7, #3]
	Ingenia_write_sdo_u8(servo, MODES_OF_OPERATION_INDEX, MODES_OF_OPERATION_SUBINDEX, (uint8_t) driverMode);
 800e776:	78fb      	ldrb	r3, [r7, #3]
 800e778:	2200      	movs	r2, #0
 800e77a:	f246 0160 	movw	r1, #24672	; 0x6060
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff fcbb 	bl	800e0fa <Ingenia_write_sdo_u8>
}
 800e784:	bf00      	nop
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <Ingenia_setTargetPositionVelocity>:
	uint8_t b[4];
} Ingenia_Union_u;

void Ingenia_setTargetPositionVelocity(Servo_t *servo, int32_t pos, uint32_t velo, uint8_t isImmediate, uint8_t isRelative,
		uint8_t isHaltEnabled)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08a      	sub	sp, #40	; 0x28
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	70fb      	strb	r3, [r7, #3]
	uint16_t u16ActualControlWord = 0xF;
 800e79a:	230f      	movs	r3, #15
 800e79c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t rpdo_value[8];
	Ingenia_Union_u p, v;

	/* set pos & velo */
	memset(rpdo_value, 0, 8);
 800e79e:	f107 0318 	add.w	r3, r7, #24
 800e7a2:	2208      	movs	r2, #8
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 ff2e 	bl	800f608 <memset>
	v.u32 = velo;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	613b      	str	r3, [r7, #16]
	p.i32 = pos;
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	617b      	str	r3, [r7, #20]
	for ( int i = 0; i < 4; i++ ) {
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b8:	e018      	b.n	800e7ec <Ingenia_setTargetPositionVelocity+0x60>
		rpdo_value[i] = v.b[i];
 800e7ba:	f107 0210 	add.w	r2, r7, #16
 800e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c0:	4413      	add	r3, r2
 800e7c2:	7819      	ldrb	r1, [r3, #0]
 800e7c4:	f107 0218 	add.w	r2, r7, #24
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	4413      	add	r3, r2
 800e7cc:	460a      	mov	r2, r1
 800e7ce:	701a      	strb	r2, [r3, #0]
		rpdo_value[i + 4] = p.b[i];
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	f107 0114 	add.w	r1, r7, #20
 800e7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7da:	440a      	add	r2, r1
 800e7dc:	7812      	ldrb	r2, [r2, #0]
 800e7de:	3328      	adds	r3, #40	; 0x28
 800e7e0:	443b      	add	r3, r7
 800e7e2:	f803 2c10 	strb.w	r2, [r3, #-16]
	for ( int i = 0; i < 4; i++ ) {
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	dde3      	ble.n	800e7ba <Ingenia_setTargetPositionVelocity+0x2e>
	}
	Ingenia_write_rpdo(servo, COB_RPDO2, rpdo_value, 8);
 800e7f2:	f107 0218 	add.w	r2, r7, #24
 800e7f6:	2308      	movs	r3, #8
 800e7f8:	f44f 7140 	mov.w	r1, #768	; 0x300
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f7ff fb56 	bl	800deae <Ingenia_write_rpdo>

	/* set low setpoint */
	rpdo_value[0] = u16ActualControlWord;
 800e802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e804:	b2db      	uxtb	r3, r3
 800e806:	763b      	strb	r3, [r7, #24]
	rpdo_value[1] = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	767b      	strb	r3, [r7, #25]
	Ingenia_write_rpdo(servo, COB_RPDO1, rpdo_value, 2);
 800e80c:	f107 0218 	add.w	r2, r7, #24
 800e810:	2302      	movs	r3, #2
 800e812:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f7ff fb49 	bl	800deae <Ingenia_write_rpdo>

	/* Raise New Setpoint Bit */
	u16ActualControlWord |= 1 << 4;
 800e81c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e81e:	f043 0310 	orr.w	r3, r3, #16
 800e822:	847b      	strh	r3, [r7, #34]	; 0x22

	u16ActualControlWord &= ~(MODE_SPECIFIC_BITS_CHANGE_SET);
 800e824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e826:	f023 0320 	bic.w	r3, r3, #32
 800e82a:	847b      	strh	r3, [r7, #34]	; 0x22
	u16ActualControlWord |= (uint16_t) isImmediate << 5;
 800e82c:	78fb      	ldrb	r3, [r7, #3]
 800e82e:	015b      	lsls	r3, r3, #5
 800e830:	b21a      	sxth	r2, r3
 800e832:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e836:	4313      	orrs	r3, r2
 800e838:	b21b      	sxth	r3, r3
 800e83a:	847b      	strh	r3, [r7, #34]	; 0x22

	u16ActualControlWord &= ~(MODE_SPECIFIC_BITS_ABS_REL);
 800e83c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e83e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e842:	847b      	strh	r3, [r7, #34]	; 0x22
	u16ActualControlWord |= (uint16_t) isRelative << 6;
 800e844:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e848:	019b      	lsls	r3, r3, #6
 800e84a:	b21a      	sxth	r2, r3
 800e84c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e850:	4313      	orrs	r3, r2
 800e852:	b21b      	sxth	r3, r3
 800e854:	847b      	strh	r3, [r7, #34]	; 0x22

	u16ActualControlWord &= ~(CONTROL_WORD_REGISTER_BITS_HALT);
 800e856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e85c:	847b      	strh	r3, [r7, #34]	; 0x22
	u16ActualControlWord |= (uint16_t) isHaltEnabled << 8;
 800e85e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e862:	021b      	lsls	r3, r3, #8
 800e864:	b21a      	sxth	r2, r3
 800e866:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e86a:	4313      	orrs	r3, r2
 800e86c:	b21b      	sxth	r3, r3
 800e86e:	847b      	strh	r3, [r7, #34]	; 0x22

	rpdo_value[0] = u16ActualControlWord & 0xFF;
 800e870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e872:	b2db      	uxtb	r3, r3
 800e874:	763b      	strb	r3, [r7, #24]
	rpdo_value[1] = (u16ActualControlWord >> 8) & 0xFF;
 800e876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e878:	0a1b      	lsrs	r3, r3, #8
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	767b      	strb	r3, [r7, #25]

	Ingenia_write_rpdo(servo, COB_RPDO1, rpdo_value, 2);
 800e880:	f107 0218 	add.w	r2, r7, #24
 800e884:	2302      	movs	r3, #2
 800e886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f7ff fb0f 	bl	800deae <Ingenia_write_rpdo>

	/* Low New Setpoint */
	u16ActualControlWord &= ~(MODE_SPECIFIC_BITS_NEW_SETPOINT);
 800e890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e892:	f023 0310 	bic.w	r3, r3, #16
 800e896:	847b      	strh	r3, [r7, #34]	; 0x22
	rpdo_value[0] = u16ActualControlWord & 0xFF;
 800e898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	763b      	strb	r3, [r7, #24]
	rpdo_value[1] = (u16ActualControlWord >> 8) & 0xFF;
 800e89e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8a0:	0a1b      	lsrs	r3, r3, #8
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	767b      	strb	r3, [r7, #25]
	Ingenia_write_rpdo(servo, COB_RPDO1, rpdo_value, 2);
 800e8a8:	f107 0218 	add.w	r2, r7, #24
 800e8ac:	2302      	movs	r3, #2
 800e8ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	f7ff fafb 	bl	800deae <Ingenia_write_rpdo>
}
 800e8b8:	bf00      	nop
 800e8ba:	3728      	adds	r7, #40	; 0x28
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <can_buffer_available>:
#include "ingenia_buffer.h"

#include <string.h>

uint8_t can_buffer_available(CAN_Buffer_t *buffer)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
	if (buffer->head != buffer->tail)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d021      	beq.n	800e920 <can_buffer_available+0x60>
		return (buffer->head >= buffer->tail) ?
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e8ea:	b2db      	uxtb	r3, r3
				(buffer->head - buffer->tail) : (buffer->head + CAN_RX_BUFFER_SIZE - buffer->tail);
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d30a      	bcc.n	800e906 <can_buffer_available+0x46>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	b2db      	uxtb	r3, r3
 800e904:	e00d      	b.n	800e922 <can_buffer_available+0x62>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e914:	b2db      	uxtb	r3, r3
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	330a      	adds	r3, #10
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	e000      	b.n	800e922 <can_buffer_available+0x62>

	return 0;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <can_buffer_write>:

void can_buffer_write(CAN_Buffer_t *buffer, CAN_Data_t *data)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
	uint8_t head = (buffer->head + 1) % CAN_RX_BUFFER_SIZE;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e940:	b2db      	uxtb	r3, r3
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	4b27      	ldr	r3, [pc, #156]	; (800e9e4 <can_buffer_write+0xb4>)
 800e946:	fb83 1302 	smull	r1, r3, r3, r2
 800e94a:	1099      	asrs	r1, r3, #2
 800e94c:	17d3      	asrs	r3, r2, #31
 800e94e:	1ac9      	subs	r1, r1, r3
 800e950:	460b      	mov	r3, r1
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	440b      	add	r3, r1
 800e956:	005b      	lsls	r3, r3, #1
 800e958:	1ad1      	subs	r1, r2, r3
 800e95a:	460b      	mov	r3, r1
 800e95c:	73fb      	strb	r3, [r7, #15]

	if (head != buffer->tail) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e964:	b2db      	uxtb	r3, r3
 800e966:	7bfa      	ldrb	r2, [r7, #15]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d036      	beq.n	800e9da <can_buffer_write+0xaa>
		buffer->buf[buffer->head].id = data->id;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e972:	b2db      	uxtb	r3, r3
 800e974:	4618      	mov	r0, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	6879      	ldr	r1, [r7, #4]
 800e97c:	0103      	lsls	r3, r0, #4
 800e97e:	440b      	add	r3, r1
 800e980:	601a      	str	r2, [r3, #0]
		buffer->buf[buffer->head].len = data->len;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	4618      	mov	r0, r3
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	7919      	ldrb	r1, [r3, #4]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	0103      	lsls	r3, r0, #4
 800e994:	4413      	add	r3, r2
 800e996:	3304      	adds	r3, #4
 800e998:	460a      	mov	r2, r1
 800e99a:	701a      	strb	r2, [r3, #0]
		memset(buffer->buf[buffer->head].rxData, 0, CAN_DATA_MAX);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	011b      	lsls	r3, r3, #4
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	3305      	adds	r3, #5
 800e9ac:	2208      	movs	r2, #8
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f000 fe29 	bl	800f608 <memset>
		memcpy(buffer->buf[buffer->head].rxData, data->rxData, CAN_DATA_MAX);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	011b      	lsls	r3, r3, #4
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	1d58      	adds	r0, r3, #5
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	3305      	adds	r3, #5
 800e9ca:	2208      	movs	r2, #8
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	f000 fe0d 	bl	800f5ec <memcpy>

		buffer->head = head;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7bfa      	ldrb	r2, [r7, #15]
 800e9d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	}
}
 800e9da:	bf00      	nop
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	66666667 	.word	0x66666667

0800e9e8 <can_buffer_peek>:

int8_t can_buffer_peek(CAN_Buffer_t *buffer, CAN_Data_t *data)
{
 800e9e8:	b590      	push	{r4, r7, lr}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
	if (buffer->head != buffer->tail) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d011      	beq.n	800ea2a <can_buffer_peek+0x42>
		*data = buffer->buf[buffer->tail];
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	011b      	lsls	r3, r3, #4
 800ea14:	4413      	add	r3, r2
 800ea16:	460c      	mov	r4, r1
 800ea18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		return can_buffer_available(buffer);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff ff4e 	bl	800e8c0 <can_buffer_available>
 800ea24:	4603      	mov	r3, r0
 800ea26:	b25b      	sxtb	r3, r3
 800ea28:	e001      	b.n	800ea2e <can_buffer_peek+0x46>
	}

	return -1;
 800ea2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd90      	pop	{r4, r7, pc}
	...

0800ea38 <can_buffer_read>:

int8_t can_buffer_read(CAN_Buffer_t *buffer, CAN_Data_t *data)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
	int8_t ret = can_buffer_peek(buffer, data);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff ffcf 	bl	800e9e8 <can_buffer_peek>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	73fb      	strb	r3, [r7, #15]
	if (ret > 0)
 800ea4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	dd13      	ble.n	800ea7e <can_buffer_read+0x46>
		buffer->tail = (buffer->tail + 1) % CAN_RX_BUFFER_SIZE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <can_buffer_read+0x54>)
 800ea62:	fb83 1302 	smull	r1, r3, r3, r2
 800ea66:	1099      	asrs	r1, r3, #2
 800ea68:	17d3      	asrs	r3, r2, #31
 800ea6a:	1ac9      	subs	r1, r1, r3
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	440b      	add	r3, r1
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	1ad1      	subs	r1, r2, r3
 800ea76:	b2ca      	uxtb	r2, r1
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return ret;
 800ea7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	66666667 	.word	0x66666667

0800ea90 <can_buffer_flush>:

void can_buffer_flush(CAN_Buffer_t *buffer)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
	buffer->head = buffer->tail = 0;
 800ea98:	2100      	movs	r1, #0
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	460a      	mov	r2, r1
 800ea9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	460a      	mov	r2, r1
 800eaa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800eaaa:	bf00      	nop
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <Ingenia_begin>:
//{
//	return len2dlc[datalength];
//}

HAL_StatusTypeDef Ingenia_begin(CAN_INTERFACE_HANDLETYPE *hcan)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b08e      	sub	sp, #56	; 0x38
 800eaba:	af02      	add	r7, sp, #8
 800eabc:	6078      	str	r0, [r7, #4]
	/* init node slave buffer */
	Ingenia_node_init();
 800eabe:	f7fe ffab 	bl	800da18 <Ingenia_node_init>
	/*##-2- Configure the CAN Filter ###########################################*/
	FDCAN_FilterTypeDef sFilterConfig;
	uint32_t filterIndex, filterID1, filterID2;

	/* NMT filter */
	filterIndex = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x81;
 800eac6:	2381      	movs	r3, #129	; 0x81
 800eac8:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0xFF;
 800eaca:	23ff      	movs	r3, #255	; 0xff
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800eace:	2300      	movs	r3, #0
 800ead0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800ead6:	2300      	movs	r3, #0
 800ead8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800eada:	2301      	movs	r3, #1
 800eadc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800eae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae4:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800eae6:	f107 030c 	add.w	r3, r7, #12
 800eaea:	4619      	mov	r1, r3
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7f3 fdf3 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <Ingenia_begin+0x46>
		Error_Handler();
 800eaf8:	f7f2 ff44 	bl	8001984 <Error_Handler>
	}

	/* TPDO1 filter */
	filterIndex = 1;
 800eafc:	2301      	movs	r3, #1
 800eafe:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x181;
 800eb00:	f240 1381 	movw	r3, #385	; 0x181
 800eb04:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x1FF;
 800eb06:	f240 13ff 	movw	r3, #511	; 0x1ff
 800eb0a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800eb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb12:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800eb14:	2300      	movs	r3, #0
 800eb16:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800eb24:	f107 030c 	add.w	r3, r7, #12
 800eb28:	4619      	mov	r1, r3
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7f3 fdd4 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <Ingenia_begin+0x84>
		Error_Handler();
 800eb36:	f7f2 ff25 	bl	8001984 <Error_Handler>
	}

	/* TPDO2 filter */
	filterIndex = 2;
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x281;
 800eb3e:	f240 2381 	movw	r3, #641	; 0x281
 800eb42:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x2FF;
 800eb44:	f240 23ff 	movw	r3, #767	; 0x2ff
 800eb48:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800eb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb50:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800eb52:	2300      	movs	r3, #0
 800eb54:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800eb56:	2301      	movs	r3, #1
 800eb58:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800eb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb60:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800eb62:	f107 030c 	add.w	r3, r7, #12
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7f3 fdb5 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <Ingenia_begin+0xc2>
		Error_Handler();
 800eb74:	f7f2 ff06 	bl	8001984 <Error_Handler>
	}

	/* TPDO3 filter */
	filterIndex = 3;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x381;
 800eb7c:	f240 3381 	movw	r3, #897	; 0x381
 800eb80:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x3FF;
 800eb82:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800eb86:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800eb94:	2301      	movs	r3, #1
 800eb96:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800eba0:	f107 030c 	add.w	r3, r7, #12
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7f3 fd96 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <Ingenia_begin+0x100>
		Error_Handler();
 800ebb2:	f7f2 fee7 	bl	8001984 <Error_Handler>
	}

	/* TPDO4 filter */
	filterIndex = 4;
 800ebb6:	2304      	movs	r3, #4
 800ebb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x481;
 800ebba:	f240 4381 	movw	r3, #1153	; 0x481
 800ebbe:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x4FF;
 800ebc0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800ebca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebcc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800ebde:	f107 030c 	add.w	r3, r7, #12
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7f3 fd77 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <Ingenia_begin+0x13e>
		Error_Handler();
 800ebf0:	f7f2 fec8 	bl	8001984 <Error_Handler>
	}

	/* TSDO filter */
	filterIndex = 5;
 800ebf4:	2305      	movs	r3, #5
 800ebf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x581;
 800ebf8:	f240 5381 	movw	r3, #1409	; 0x581
 800ebfc:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x5FF;
 800ebfe:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800ec02:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800ec04:	2300      	movs	r3, #0
 800ec06:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800ec10:	2301      	movs	r3, #1
 800ec12:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800ec1c:	f107 030c 	add.w	r3, r7, #12
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7f3 fd58 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <Ingenia_begin+0x17c>
		Error_Handler();
 800ec2e:	f7f2 fea9 	bl	8001984 <Error_Handler>
	}

	/* NMT Error filter */
	filterIndex = 6;
 800ec32:	2306      	movs	r3, #6
 800ec34:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterID1 = 0x701;
 800ec36:	f240 7301 	movw	r3, #1793	; 0x701
 800ec3a:	62bb      	str	r3, [r7, #40]	; 0x28
	filterID2 = 0x77F;
 800ec3c:	f240 737f 	movw	r3, #1919	; 0x77f
 800ec40:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800ec42:	2300      	movs	r3, #0
 800ec44:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIndex = filterIndex;
 800ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec48:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = filterID1;
 800ec52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec54:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = filterID2;
 800ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec58:	623b      	str	r3, [r7, #32]
	if (HAL_FDCAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800ec5a:	f107 030c 	add.w	r3, r7, #12
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7f3 fd39 	bl	80026d8 <HAL_FDCAN_ConfigFilter>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d001      	beq.n	800ec70 <Ingenia_begin+0x1ba>
		Error_Handler();
 800ec6c:	f7f2 fe8a 	bl	8001984 <Error_Handler>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(hcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE,
 800ec70:	2300      	movs	r3, #0
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	2300      	movs	r3, #0
 800ec76:	2202      	movs	r2, #2
 800ec78:	2102      	movs	r1, #2
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7f3 fd86 	bl	800278c <HAL_FDCAN_ConfigGlobalFilter>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <Ingenia_begin+0x1d4>
	FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
 800ec86:	f7f2 fe7d 	bl	8001984 <Error_Handler>
	}

	/*##-3- Activate CAN RX notification #######################################*/
	if (HAL_FDCAN_ActivateNotification(hcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7f3 ff36 	bl	8002b00 <HAL_FDCAN_ActivateNotification>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <Ingenia_begin+0x1e8>
		Error_Handler();
 800ec9a:	f7f2 fe73 	bl	8001984 <Error_Handler>
	}

	/*##-4- Start the CAN peripheral ###########################################*/
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(hcan) != HAL_OK) {
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7f3 fde8 	bl	8002874 <HAL_FDCAN_Start>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d001      	beq.n	800ecae <Ingenia_begin+0x1f8>
		Error_Handler();
 800ecaa:	f7f2 fe6b 	bl	8001984 <Error_Handler>
	}

	return HAL_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3730      	adds	r7, #48	; 0x30
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <Ingenia_prepare_tx_header>:

void Ingenia_prepare_tx_header(Servo_t *servo)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	servo->txHeader.IdType = FDCAN_STANDARD_ID;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	609a      	str	r2, [r3, #8]
	servo->txHeader.TxFrameType = FDCAN_DATA_FRAME;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	60da      	str	r2, [r3, #12]
	servo->txHeader.DataLength = FDCAN_DLC_BYTES_8;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ecd2:	611a      	str	r2, [r3, #16]
	servo->txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	615a      	str	r2, [r3, #20]
	servo->txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	619a      	str	r2, [r3, #24]
	servo->txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	61da      	str	r2, [r3, #28]
	servo->txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	621a      	str	r2, [r3, #32]
	servo->txHeader.MessageMarker = 0;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ecf2:	bf00      	nop
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
	...

0800ed00 <_INGENIA_write_data>:

HAL_StatusTypeDef _INGENIA_write_data(Servo_t *servo, const uint32_t id, const uint8_t len, const uint8_t *buf)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	603b      	str	r3, [r7, #0]
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	71fb      	strb	r3, [r7, #7]
	servo->txHeader.Identifier = id;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68ba      	ldr	r2, [r7, #8]
 800ed14:	605a      	str	r2, [r3, #4]
	servo->txHeader.DataLength = len2dlc[len];
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	4a08      	ldr	r2, [pc, #32]	; (800ed3c <_INGENIA_write_data+0x3c>)
 800ed1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	611a      	str	r2, [r3, #16]

	return HAL_FDCAN_AddMessageToTxFifoQ(servo->hcan, &servo->txHeader, (uint8_t*) buf);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6818      	ldr	r0, [r3, #0]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	f7f3 fdc9 	bl	80028c4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800ed32:	4603      	mov	r3, r0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	080129b0 	.word	0x080129b0

0800ed40 <toDeg>:
float theta1_d, theta2_d;
float Torq1, Torq2;
const float scale = 0.1;

static float toDeg(float a)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	ed87 0a01 	vstr	s0, [r7, #4]
	return a * 180 / M_PI;
 800ed4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed4e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ed90 <toDeg+0x50>
 800ed52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed56:	ee17 0a90 	vmov	r0, s15
 800ed5a:	f7f1 fc1d 	bl	8000598 <__aeabi_f2d>
 800ed5e:	a30a      	add	r3, pc, #40	; (adr r3, 800ed88 <toDeg+0x48>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	f7f1 fd9a 	bl	800089c <__aeabi_ddiv>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4610      	mov	r0, r2
 800ed6e:	4619      	mov	r1, r3
 800ed70:	f7f1 ff42 	bl	8000bf8 <__aeabi_d2f>
 800ed74:	4603      	mov	r3, r0
 800ed76:	ee07 3a90 	vmov	s15, r3
}
 800ed7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	f3af 8000 	nop.w
 800ed88:	54442d18 	.word	0x54442d18
 800ed8c:	400921fb 	.word	0x400921fb
 800ed90:	43340000 	.word	0x43340000
 800ed94:	00000000 	.word	0x00000000

0800ed98 <toRad>:

static float toRad(float a)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	ed87 0a01 	vstr	s0, [r7, #4]
	return a * M_PI / 180;
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7f1 fbf8 	bl	8000598 <__aeabi_f2d>
 800eda8:	a30e      	add	r3, pc, #56	; (adr r3, 800ede4 <toRad+0x4c>)
 800edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edae:	f7f1 fc4b 	bl	8000648 <__aeabi_dmul>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4610      	mov	r0, r2
 800edb8:	4619      	mov	r1, r3
 800edba:	f04f 0200 	mov.w	r2, #0
 800edbe:	4b08      	ldr	r3, [pc, #32]	; (800ede0 <toRad+0x48>)
 800edc0:	f7f1 fd6c 	bl	800089c <__aeabi_ddiv>
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	4610      	mov	r0, r2
 800edca:	4619      	mov	r1, r3
 800edcc:	f7f1 ff14 	bl	8000bf8 <__aeabi_d2f>
 800edd0:	4603      	mov	r3, r0
 800edd2:	ee07 3a90 	vmov	s15, r3
}
 800edd6:	eeb0 0a67 	vmov.f32	s0, s15
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	40668000 	.word	0x40668000
 800ede4:	54442d18 	.word	0x54442d18
 800ede8:	400921fb 	.word	0x400921fb

0800edec <wrapVal>:

static float wrapVal(float a, float b)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	ed87 0a01 	vstr	s0, [r7, #4]
 800edf6:	edc7 0a00 	vstr	s1, [r7]
	if (a < -b)
 800edfa:	edd7 7a00 	vldr	s15, [r7]
 800edfe:	eef1 7a67 	vneg.f32	s15, s15
 800ee02:	ed97 7a01 	vldr	s14, [r7, #4]
 800ee06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0e:	d504      	bpl.n	800ee1a <wrapVal+0x2e>
		return -b;
 800ee10:	edd7 7a00 	vldr	s15, [r7]
 800ee14:	eef1 7a67 	vneg.f32	s15, s15
 800ee18:	e00d      	b.n	800ee36 <wrapVal+0x4a>
	else if (a > b)
 800ee1a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ee1e:	edd7 7a00 	vldr	s15, [r7]
 800ee22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2a:	dd02      	ble.n	800ee32 <wrapVal+0x46>
		return b;
 800ee2c:	edd7 7a00 	vldr	s15, [r7]
 800ee30:	e001      	b.n	800ee36 <wrapVal+0x4a>
	else
		return a;
 800ee32:	edd7 7a01 	vldr	s15, [r7, #4]
}
 800ee36:	eeb0 0a67 	vmov.f32	s0, s15
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <Kontrol_init>:

void Kontrol_init()
{
 800ee44:	b480      	push	{r7}
 800ee46:	af00      	add	r7, sp, #0
	q_acc0 = 0;
 800ee48:	4b06      	ldr	r3, [pc, #24]	; (800ee64 <Kontrol_init+0x20>)
 800ee4a:	f04f 0200 	mov.w	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]
	q_acc1 = 0;
 800ee50:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <Kontrol_init+0x24>)
 800ee52:	f04f 0200 	mov.w	r2, #0
 800ee56:	601a      	str	r2, [r3, #0]
}
 800ee58:	bf00      	nop
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	20010dcc 	.word	0x20010dcc
 800ee68:	20010dd0 	.word	0x20010dd0

0800ee6c <Kontrol_Konstanta_init>:

void Kontrol_Konstanta_init()
{
 800ee6c:	b4b0      	push	{r4, r5, r7}
 800ee6e:	af00      	add	r7, sp, #0
	kPID[0] = kPID_0;
 800ee70:	4a11      	ldr	r2, [pc, #68]	; (800eeb8 <Kontrol_Konstanta_init+0x4c>)
 800ee72:	4b12      	ldr	r3, [pc, #72]	; (800eebc <Kontrol_Konstanta_init+0x50>)
 800ee74:	4614      	mov	r4, r2
 800ee76:	461d      	mov	r5, r3
 800ee78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ee80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	kPID[1] = kPID_1;
 800ee84:	4b0c      	ldr	r3, [pc, #48]	; (800eeb8 <Kontrol_Konstanta_init+0x4c>)
 800ee86:	4a0e      	ldr	r2, [pc, #56]	; (800eec0 <Kontrol_Konstanta_init+0x54>)
 800ee88:	f103 0420 	add.w	r4, r3, #32
 800ee8c:	4615      	mov	r5, r2
 800ee8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ee96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	kPID[2] = kPID_2;
 800ee9a:	4b07      	ldr	r3, [pc, #28]	; (800eeb8 <Kontrol_Konstanta_init+0x4c>)
 800ee9c:	4a09      	ldr	r2, [pc, #36]	; (800eec4 <Kontrol_Konstanta_init+0x58>)
 800ee9e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800eea2:	4615      	mov	r5, r2
 800eea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eea8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eeac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eeb0:	bf00      	nop
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bcb0      	pop	{r4, r5, r7}
 800eeb6:	4770      	bx	lr
 800eeb8:	20010d6c 	.word	0x20010d6c
 800eebc:	080129f0 	.word	0x080129f0
 800eec0:	08012a10 	.word	0x08012a10
 800eec4:	08012a30 	.word	0x08012a30

0800eec8 <Kontrol_CalcQDot>:

void Kontrol_CalcQDot(int zoomLevel, float qaz, float qev, float qdaz, float qdev, int dx, int dy, float *qd_sp_az,
		float *qd_sp_ev)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b090      	sub	sp, #64	; 0x40
 800eecc:	af00      	add	r7, sp, #0
 800eece:	61f8      	str	r0, [r7, #28]
 800eed0:	ed87 0a06 	vstr	s0, [r7, #24]
 800eed4:	edc7 0a05 	vstr	s1, [r7, #20]
 800eed8:	ed87 1a04 	vstr	s2, [r7, #16]
 800eedc:	edc7 1a03 	vstr	s3, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	603b      	str	r3, [r7, #0]
	theta1 = toRad(qaz);
 800eee6:	ed97 0a06 	vldr	s0, [r7, #24]
 800eeea:	f7ff ff55 	bl	800ed98 <toRad>
 800eeee:	eef0 7a40 	vmov.f32	s15, s0
 800eef2:	4b96      	ldr	r3, [pc, #600]	; (800f14c <Kontrol_CalcQDot+0x284>)
 800eef4:	edc3 7a00 	vstr	s15, [r3]
	theta2 = toRad(qev);
 800eef8:	ed97 0a05 	vldr	s0, [r7, #20]
 800eefc:	f7ff ff4c 	bl	800ed98 <toRad>
 800ef00:	eef0 7a40 	vmov.f32	s15, s0
 800ef04:	4b92      	ldr	r3, [pc, #584]	; (800f150 <Kontrol_CalcQDot+0x288>)
 800ef06:	edc3 7a00 	vstr	s15, [r3]
	theta1_d = toRad(qdaz);
 800ef0a:	ed97 0a04 	vldr	s0, [r7, #16]
 800ef0e:	f7ff ff43 	bl	800ed98 <toRad>
 800ef12:	eef0 7a40 	vmov.f32	s15, s0
 800ef16:	4b8f      	ldr	r3, [pc, #572]	; (800f154 <Kontrol_CalcQDot+0x28c>)
 800ef18:	edc3 7a00 	vstr	s15, [r3]
	theta2_d = toRad(qdev);
 800ef1c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ef20:	f7ff ff3a 	bl	800ed98 <toRad>
 800ef24:	eef0 7a40 	vmov.f32	s15, s0
 800ef28:	4b8b      	ldr	r3, [pc, #556]	; (800f158 <Kontrol_CalcQDot+0x290>)
 800ef2a:	edc3 7a00 	vstr	s15, [r3]

	// Gain Schedule
	if (zoomLevel < 0)
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	da02      	bge.n	800ef3a <Kontrol_CalcQDot+0x72>
		zoomLevel = 0;
 800ef34:	2300      	movs	r3, #0
 800ef36:	61fb      	str	r3, [r7, #28]
 800ef38:	e004      	b.n	800ef44 <Kontrol_CalcQDot+0x7c>
	else if (zoomLevel > 2)
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	2b02      	cmp	r3, #2
 800ef3e:	dd01      	ble.n	800ef44 <Kontrol_CalcQDot+0x7c>
		zoomLevel = 2;
 800ef40:	2302      	movs	r3, #2
 800ef42:	61fb      	str	r3, [r7, #28]

	Konstanta_PID_t *pid = &kPID[zoomLevel];
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	015b      	lsls	r3, r3, #5
 800ef48:	4a84      	ldr	r2, [pc, #528]	; (800f15c <Kontrol_CalcQDot+0x294>)
 800ef4a:	4413      	add	r3, r2
 800ef4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float kp1 = pid->kp1;
 800ef4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	63bb      	str	r3, [r7, #56]	; 0x38
	float kp2 = pid->kp2;
 800ef54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	637b      	str	r3, [r7, #52]	; 0x34
	float kd1 = pid->kd1;
 800ef5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	633b      	str	r3, [r7, #48]	; 0x30
	float kd2 = pid->kd2;
 800ef60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ki1 = pid->ki1;
 800ef66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef68:	695b      	ldr	r3, [r3, #20]
 800ef6a:	62bb      	str	r3, [r7, #40]	; 0x28
	float ki2 = pid->ki2;
 800ef6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
	int THRESHOLD_PX = pid->thresholdPX;
 800ef72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	623b      	str	r3, [r7, #32]

	Torq1 = toRad(kp1 * dx - kd1 * theta1_d + ki1 * q_acc0);
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	ee07 3a90 	vmov	s15, r3
 800ef7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ef82:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ef86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef8a:	4b72      	ldr	r3, [pc, #456]	; (800f154 <Kontrol_CalcQDot+0x28c>)
 800ef8c:	edd3 6a00 	vldr	s13, [r3]
 800ef90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ef94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ef9c:	4b70      	ldr	r3, [pc, #448]	; (800f160 <Kontrol_CalcQDot+0x298>)
 800ef9e:	edd3 6a00 	vldr	s13, [r3]
 800efa2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800efa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efae:	eeb0 0a67 	vmov.f32	s0, s15
 800efb2:	f7ff fef1 	bl	800ed98 <toRad>
 800efb6:	eef0 7a40 	vmov.f32	s15, s0
 800efba:	4b6a      	ldr	r3, [pc, #424]	; (800f164 <Kontrol_CalcQDot+0x29c>)
 800efbc:	edc3 7a00 	vstr	s15, [r3]
	Torq2 = toRad(kp2 * dy - kd2 * theta2_d + ki2 * q_acc1);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	ee07 3a90 	vmov	s15, r3
 800efc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800efce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efd2:	4b61      	ldr	r3, [pc, #388]	; (800f158 <Kontrol_CalcQDot+0x290>)
 800efd4:	edd3 6a00 	vldr	s13, [r3]
 800efd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800efdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efe4:	4b60      	ldr	r3, [pc, #384]	; (800f168 <Kontrol_CalcQDot+0x2a0>)
 800efe6:	edd3 6a00 	vldr	s13, [r3]
 800efea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800efee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eff6:	eeb0 0a67 	vmov.f32	s0, s15
 800effa:	f7ff fecd 	bl	800ed98 <toRad>
 800effe:	eef0 7a40 	vmov.f32	s15, s0
 800f002:	4b5a      	ldr	r3, [pc, #360]	; (800f16c <Kontrol_CalcQDot+0x2a4>)
 800f004:	edc3 7a00 	vstr	s15, [r3]
	if (abs(dx) <= THRESHOLD_PX)
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	bfb8      	it	lt
 800f00e:	425b      	neglt	r3, r3
 800f010:	6a3a      	ldr	r2, [r7, #32]
 800f012:	429a      	cmp	r2, r3
 800f014:	db03      	blt.n	800f01e <Kontrol_CalcQDot+0x156>
		Torq1 = 0;
 800f016:	4b53      	ldr	r3, [pc, #332]	; (800f164 <Kontrol_CalcQDot+0x29c>)
 800f018:	f04f 0200 	mov.w	r2, #0
 800f01c:	601a      	str	r2, [r3, #0]
	if (abs(dy) <= THRESHOLD_PX)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	bfb8      	it	lt
 800f024:	425b      	neglt	r3, r3
 800f026:	6a3a      	ldr	r2, [r7, #32]
 800f028:	429a      	cmp	r2, r3
 800f02a:	db03      	blt.n	800f034 <Kontrol_CalcQDot+0x16c>
		Torq2 = 0;
 800f02c:	4b4f      	ldr	r3, [pc, #316]	; (800f16c <Kontrol_CalcQDot+0x2a4>)
 800f02e:	f04f 0200 	mov.w	r2, #0
 800f032:	601a      	str	r2, [r3, #0]

	Torq1 = Torq1 * scale;
 800f034:	4b4b      	ldr	r3, [pc, #300]	; (800f164 <Kontrol_CalcQDot+0x29c>)
 800f036:	edd3 7a00 	vldr	s15, [r3]
 800f03a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f170 <Kontrol_CalcQDot+0x2a8>
 800f03e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f042:	4b48      	ldr	r3, [pc, #288]	; (800f164 <Kontrol_CalcQDot+0x29c>)
 800f044:	edc3 7a00 	vstr	s15, [r3]
	Torq2 = Torq2 * scale;
 800f048:	4b48      	ldr	r3, [pc, #288]	; (800f16c <Kontrol_CalcQDot+0x2a4>)
 800f04a:	edd3 7a00 	vldr	s15, [r3]
 800f04e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f170 <Kontrol_CalcQDot+0x2a8>
 800f052:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f056:	4b45      	ldr	r3, [pc, #276]	; (800f16c <Kontrol_CalcQDot+0x2a4>)
 800f058:	edc3 7a00 	vstr	s15, [r3]

	q_acc0 += dx;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	ee07 3a90 	vmov	s15, r3
 800f062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f066:	4b3e      	ldr	r3, [pc, #248]	; (800f160 <Kontrol_CalcQDot+0x298>)
 800f068:	edd3 7a00 	vldr	s15, [r3]
 800f06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f070:	4b3b      	ldr	r3, [pc, #236]	; (800f160 <Kontrol_CalcQDot+0x298>)
 800f072:	edc3 7a00 	vstr	s15, [r3]
	q_acc1 += dy;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	ee07 3a90 	vmov	s15, r3
 800f07c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f080:	4b39      	ldr	r3, [pc, #228]	; (800f168 <Kontrol_CalcQDot+0x2a0>)
 800f082:	edd3 7a00 	vldr	s15, [r3]
 800f086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f08a:	4b37      	ldr	r3, [pc, #220]	; (800f168 <Kontrol_CalcQDot+0x2a0>)
 800f08c:	edc3 7a00 	vstr	s15, [r3]
	q_acc0 = wrapVal(q_acc0, 10000);
 800f090:	4b33      	ldr	r3, [pc, #204]	; (800f160 <Kontrol_CalcQDot+0x298>)
 800f092:	edd3 7a00 	vldr	s15, [r3]
 800f096:	eddf 0a37 	vldr	s1, [pc, #220]	; 800f174 <Kontrol_CalcQDot+0x2ac>
 800f09a:	eeb0 0a67 	vmov.f32	s0, s15
 800f09e:	f7ff fea5 	bl	800edec <wrapVal>
 800f0a2:	eef0 7a40 	vmov.f32	s15, s0
 800f0a6:	4b2e      	ldr	r3, [pc, #184]	; (800f160 <Kontrol_CalcQDot+0x298>)
 800f0a8:	edc3 7a00 	vstr	s15, [r3]
	q_acc1 = wrapVal(q_acc1, 10000);
 800f0ac:	4b2e      	ldr	r3, [pc, #184]	; (800f168 <Kontrol_CalcQDot+0x2a0>)
 800f0ae:	edd3 7a00 	vldr	s15, [r3]
 800f0b2:	eddf 0a30 	vldr	s1, [pc, #192]	; 800f174 <Kontrol_CalcQDot+0x2ac>
 800f0b6:	eeb0 0a67 	vmov.f32	s0, s15
 800f0ba:	f7ff fe97 	bl	800edec <wrapVal>
 800f0be:	eef0 7a40 	vmov.f32	s15, s0
 800f0c2:	4b29      	ldr	r3, [pc, #164]	; (800f168 <Kontrol_CalcQDot+0x2a0>)
 800f0c4:	edc3 7a00 	vstr	s15, [r3]

	if (abs(dx) <= THRESHOLD_PX) {
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	bfb8      	it	lt
 800f0ce:	425b      	neglt	r3, r3
 800f0d0:	6a3a      	ldr	r2, [r7, #32]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	db03      	blt.n	800f0de <Kontrol_CalcQDot+0x216>
		q_acc0 = 0;
 800f0d6:	4b22      	ldr	r3, [pc, #136]	; (800f160 <Kontrol_CalcQDot+0x298>)
 800f0d8:	f04f 0200 	mov.w	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
	}
	if (abs(dy) <= THRESHOLD_PX) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	bfb8      	it	lt
 800f0e4:	425b      	neglt	r3, r3
 800f0e6:	6a3a      	ldr	r2, [r7, #32]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	db03      	blt.n	800f0f4 <Kontrol_CalcQDot+0x22c>
		q_acc1 = 0;
 800f0ec:	4b1e      	ldr	r3, [pc, #120]	; (800f168 <Kontrol_CalcQDot+0x2a0>)
 800f0ee:	f04f 0200 	mov.w	r2, #0
 800f0f2:	601a      	str	r2, [r3, #0]
	}

	*qd_sp_az = wrapVal(toDeg(Torq1), 70.0f);
 800f0f4:	4b1b      	ldr	r3, [pc, #108]	; (800f164 <Kontrol_CalcQDot+0x29c>)
 800f0f6:	edd3 7a00 	vldr	s15, [r3]
 800f0fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f0fe:	f7ff fe1f 	bl	800ed40 <toDeg>
 800f102:	eef0 7a40 	vmov.f32	s15, s0
 800f106:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f178 <Kontrol_CalcQDot+0x2b0>
 800f10a:	eeb0 0a67 	vmov.f32	s0, s15
 800f10e:	f7ff fe6d 	bl	800edec <wrapVal>
 800f112:	eef0 7a40 	vmov.f32	s15, s0
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	edc3 7a00 	vstr	s15, [r3]
	*qd_sp_ev = wrapVal(toDeg(Torq2), 90.0f);
 800f11c:	4b13      	ldr	r3, [pc, #76]	; (800f16c <Kontrol_CalcQDot+0x2a4>)
 800f11e:	edd3 7a00 	vldr	s15, [r3]
 800f122:	eeb0 0a67 	vmov.f32	s0, s15
 800f126:	f7ff fe0b 	bl	800ed40 <toDeg>
 800f12a:	eef0 7a40 	vmov.f32	s15, s0
 800f12e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800f17c <Kontrol_CalcQDot+0x2b4>
 800f132:	eeb0 0a67 	vmov.f32	s0, s15
 800f136:	f7ff fe59 	bl	800edec <wrapVal>
 800f13a:	eef0 7a40 	vmov.f32	s15, s0
 800f13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f140:	edc3 7a00 	vstr	s15, [r3]
}
 800f144:	bf00      	nop
 800f146:	3740      	adds	r7, #64	; 0x40
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	20010dd4 	.word	0x20010dd4
 800f150:	20010dd8 	.word	0x20010dd8
 800f154:	20010ddc 	.word	0x20010ddc
 800f158:	20010de0 	.word	0x20010de0
 800f15c:	20010d6c 	.word	0x20010d6c
 800f160:	20010dcc 	.word	0x20010dcc
 800f164:	20010de4 	.word	0x20010de4
 800f168:	20010dd0 	.word	0x20010dd0
 800f16c:	20010de8 	.word	0x20010de8
 800f170:	3dcccccd 	.word	0x3dcccccd
 800f174:	461c4000 	.word	0x461c4000
 800f178:	428c0000 	.word	0x428c0000
 800f17c:	42b40000 	.word	0x42b40000

0800f180 <retarget_init>:

#include "main.h"
#include "uartTerminal.h"

void retarget_init()
{
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
	uartTerminal_init(&huart1);
 800f184:	480c      	ldr	r0, [pc, #48]	; (800f1b8 <retarget_init+0x38>)
 800f186:	f000 f831 	bl	800f1ec <uartTerminal_init>
	setbuf(stdin, NULL);
 800f18a:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <retarget_init+0x3c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	2100      	movs	r1, #0
 800f192:	4618      	mov	r0, r3
 800f194:	f000 ff4e 	bl	8010034 <setbuf>
	setbuf(stdout, NULL);
 800f198:	4b08      	ldr	r3, [pc, #32]	; (800f1bc <retarget_init+0x3c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	2100      	movs	r1, #0
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 ff47 	bl	8010034 <setbuf>
	setbuf(stderr, NULL);
 800f1a6:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <retarget_init+0x3c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 ff40 	bl	8010034 <setbuf>
}
 800f1b4:	bf00      	nop
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	200003fc 	.word	0x200003fc
 800f1bc:	20000014 	.word	0x20000014

0800f1c0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
	uartTerminal_send(ch);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 f81d 	bl	800f20c <uartTerminal_send>

	return 1;
 800f1d2:	2301      	movs	r3, #1
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

GETCHAR_PROTOTYPE
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	af00      	add	r7, sp, #0
	return uartTerminal_recv();
 800f1e0:	f000 f82c 	bl	800f23c <uartTerminal_recv>
 800f1e4:	4603      	mov	r3, r0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <uartTerminal_init>:

/*** Internal Function Declarations ***/

/*** External Function Defines ***/
HAL_StatusTypeDef uartTerminal_init(UART_HandleTypeDef *huart)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
	sp_huart = huart;
 800f1f4:	4a04      	ldr	r2, [pc, #16]	; (800f208 <uartTerminal_init+0x1c>)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6013      	str	r3, [r2, #0]
#if RETARGET_USE_RX_DMA==1
	HAL_UART_Receive_DMA(sp_huart, (uint8_t*) s_bufferRx, BUFFER_SIZE);
	s_bufferRxRp = 0;
#endif	//if RETARGET_USE_RX_DMA==1

	return HAL_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr
 800f208:	20010dec 	.word	0x20010dec

0800f20c <uartTerminal_send>:

HAL_StatusTypeDef uartTerminal_send(uint8_t data)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	4603      	mov	r3, r0
 800f214:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	73fb      	strb	r3, [r7, #15]
	ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 800f21a:	4b07      	ldr	r3, [pc, #28]	; (800f238 <uartTerminal_send+0x2c>)
 800f21c:	6818      	ldr	r0, [r3, #0]
 800f21e:	1df9      	adds	r1, r7, #7
 800f220:	2364      	movs	r3, #100	; 0x64
 800f222:	2201      	movs	r2, #1
 800f224:	f7f7 f884 	bl	8006330 <HAL_UART_Transmit>
 800f228:	4603      	mov	r3, r0
 800f22a:	73fb      	strb	r3, [r7, #15]

	return ret;
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	20010dec 	.word	0x20010dec

0800f23c <uartTerminal_recv>:

uint8_t uartTerminal_recv()
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800f242:	2300      	movs	r3, #0
 800f244:	71fb      	strb	r3, [r7, #7]
		;
	data = s_bufferRx[s_bufferRxRp++];
	s_bufferRxRp &= (BUFFER_SIZE - 1);

#else
	if (HAL_UART_Receive(sp_huart, &data, 1, 100) != HAL_OK)
 800f246:	4b08      	ldr	r3, [pc, #32]	; (800f268 <uartTerminal_recv+0x2c>)
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	1df9      	adds	r1, r7, #7
 800f24c:	2364      	movs	r3, #100	; 0x64
 800f24e:	2201      	movs	r2, #1
 800f250:	f7f7 f904 	bl	800645c <HAL_UART_Receive>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <uartTerminal_recv+0x22>
		data = 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	71fb      	strb	r3, [r7, #7]
#endif	//if RETARGET_USE_RX_DMA==1

	return data;
 800f25e:	79fb      	ldrb	r3, [r7, #7]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	20010dec 	.word	0x20010dec

0800f26c <cock_cmd_on>:

#include "kokang.h"
#include "tim.h"

static void cock_cmd_on()
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800f270:	2100      	movs	r1, #0
 800f272:	480c      	ldr	r0, [pc, #48]	; (800f2a4 <cock_cmd_on+0x38>)
 800f274:	f7f5 fb6c 	bl	8004950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800f278:	2104      	movs	r1, #4
 800f27a:	480a      	ldr	r0, [pc, #40]	; (800f2a4 <cock_cmd_on+0x38>)
 800f27c:	f7f5 fb68 	bl	8004950 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800f280:	4b08      	ldr	r3, [pc, #32]	; (800f2a4 <cock_cmd_on+0x38>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2200      	movs	r2, #0
 800f286:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800f288:	4b06      	ldr	r3, [pc, #24]	; (800f2a4 <cock_cmd_on+0x38>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2200      	movs	r2, #0
 800f28e:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800f290:	213c      	movs	r1, #60	; 0x3c
 800f292:	4805      	ldr	r0, [pc, #20]	; (800f2a8 <cock_cmd_on+0x3c>)
 800f294:	f7f5 fdaa 	bl	8004dec <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2, C_ENC_MIN);
 800f298:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <cock_cmd_on+0x3c>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2200      	movs	r2, #0
 800f29e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f2a0:	bf00      	nop
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	200003b0 	.word	0x200003b0
 800f2a8:	20000364 	.word	0x20000364

0800f2ac <cock_cmd_off>:

static void cock_cmd_off()
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	480a      	ldr	r0, [pc, #40]	; (800f2dc <cock_cmd_off+0x30>)
 800f2b4:	f7f5 fc58 	bl	8004b68 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800f2b8:	2104      	movs	r1, #4
 800f2ba:	4808      	ldr	r0, [pc, #32]	; (800f2dc <cock_cmd_off+0x30>)
 800f2bc:	f7f5 fc54 	bl	8004b68 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800f2c0:	4b06      	ldr	r3, [pc, #24]	; (800f2dc <cock_cmd_off+0x30>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800f2c8:	4b04      	ldr	r3, [pc, #16]	; (800f2dc <cock_cmd_off+0x30>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 800f2d0:	213c      	movs	r1, #60	; 0x3c
 800f2d2:	4803      	ldr	r0, [pc, #12]	; (800f2e0 <cock_cmd_off+0x34>)
 800f2d4:	f7f5 fe18 	bl	8004f08 <HAL_TIM_Encoder_Stop>
}
 800f2d8:	bf00      	nop
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	200003b0 	.word	0x200003b0
 800f2e0:	20000364 	.word	0x20000364

0800f2e4 <cock_init>:

void cock_init(Cock_t *cock)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
	cock->enable = 0;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	701a      	strb	r2, [r3, #0]
	cock->start = 0;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	705a      	strb	r2, [r3, #1]
	cock->state = CST_IDLE;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	709a      	strb	r2, [r3, #2]
	cock->timeout = 0;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	605a      	str	r2, [r3, #4]

	cock_cmd_off();
 800f304:	f7ff ffd2 	bl	800f2ac <cock_cmd_off>

	cock_power(cock, 0);
 800f308:	2100      	movs	r1, #0
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 f87e 	bl	800f40c <cock_power>
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <cock_handler>:

HAL_StatusTypeDef cock_handler(Cock_t *cock)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
	int32_t cock_enc_value = (int32_t) __HAL_TIM_GET_COUNTER(&htim2);
 800f320:	4b2b      	ldr	r3, [pc, #172]	; (800f3d0 <cock_handler+0xb8>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f326:	60fb      	str	r3, [r7, #12]

	switch (cock->state)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	789b      	ldrb	r3, [r3, #2]
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d028      	beq.n	800f382 <cock_handler+0x6a>
 800f330:	2b03      	cmp	r3, #3
 800f332:	dc40      	bgt.n	800f3b6 <cock_handler+0x9e>
 800f334:	2b01      	cmp	r3, #1
 800f336:	d002      	beq.n	800f33e <cock_handler+0x26>
 800f338:	2b02      	cmp	r3, #2
 800f33a:	d017      	beq.n	800f36c <cock_handler+0x54>
				return HAL_OK;
		}

		break;
	default:
		break;
 800f33c:	e03b      	b.n	800f3b6 <cock_handler+0x9e>
		if ((cock_enc_value >= (C_ENC_MAX - C_ENC_HYST)) || (HAL_GetTick() >= cock->timeout)) {
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f344:	4293      	cmp	r3, r2
 800f346:	dc06      	bgt.n	800f356 <cock_handler+0x3e>
 800f348:	f7f2 ff5e 	bl	8002208 <HAL_GetTick>
 800f34c:	4602      	mov	r2, r0
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	429a      	cmp	r2, r3
 800f354:	d331      	bcc.n	800f3ba <cock_handler+0xa2>
			cock->state = CST_MAX_STOP;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2202      	movs	r2, #2
 800f35a:	709a      	strb	r2, [r3, #2]
			cock->timeout = HAL_GetTick() + C_TIM_MAX_STOP;
 800f35c:	f7f2 ff54 	bl	8002208 <HAL_GetTick>
 800f360:	4603      	mov	r3, r0
 800f362:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	605a      	str	r2, [r3, #4]
		break;
 800f36a:	e026      	b.n	800f3ba <cock_handler+0xa2>
		if (HAL_GetTick() >= cock->timeout)
 800f36c:	f7f2 ff4c 	bl	8002208 <HAL_GetTick>
 800f370:	4602      	mov	r2, r0
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	429a      	cmp	r2, r3
 800f378:	d321      	bcc.n	800f3be <cock_handler+0xa6>
			cock->state = CST_RETRACT;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2203      	movs	r2, #3
 800f37e:	709a      	strb	r2, [r3, #2]
		break;
 800f380:	e01d      	b.n	800f3be <cock_handler+0xa6>
		if ((cock_enc_value <= (C_ENC_MIN + C_ENC_HYST)) || (HAL_GetTick() >= cock->timeout)) {
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b32      	cmp	r3, #50	; 0x32
 800f386:	dd06      	ble.n	800f396 <cock_handler+0x7e>
 800f388:	f7f2 ff3e 	bl	8002208 <HAL_GetTick>
 800f38c:	4602      	mov	r2, r0
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	429a      	cmp	r2, r3
 800f394:	d315      	bcc.n	800f3c2 <cock_handler+0xaa>
			cock_cmd_off();
 800f396:	f7ff ff89 	bl	800f2ac <cock_cmd_off>
			cock->state = CST_IDLE;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	709a      	strb	r2, [r3, #2]
			if (HAL_GetTick() >= cock->timeout)
 800f3a0:	f7f2 ff32 	bl	8002208 <HAL_GetTick>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d301      	bcc.n	800f3b2 <cock_handler+0x9a>
				return HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e009      	b.n	800f3c6 <cock_handler+0xae>
				return HAL_OK;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e007      	b.n	800f3c6 <cock_handler+0xae>
		break;
 800f3b6:	bf00      	nop
 800f3b8:	e004      	b.n	800f3c4 <cock_handler+0xac>
		break;
 800f3ba:	bf00      	nop
 800f3bc:	e002      	b.n	800f3c4 <cock_handler+0xac>
		break;
 800f3be:	bf00      	nop
 800f3c0:	e000      	b.n	800f3c4 <cock_handler+0xac>
		break;
 800f3c2:	bf00      	nop
	}

	return HAL_BUSY;
 800f3c4:	2302      	movs	r3, #2
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	20000364 	.word	0x20000364

0800f3d4 <cock_start>:

void cock_start(Cock_t *cock)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
	cock->state = CST_ERECT;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	709a      	strb	r2, [r3, #2]
	cock->timeout = HAL_GetTick() + C_TIM_ERECT;
 800f3e2:	f7f2 ff11 	bl	8002208 <HAL_GetTick>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	6053      	str	r3, [r2, #4]

	cock_cmd_on();
 800f3f2:	f7ff ff3b 	bl	800f26c <cock_cmd_on>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800f3f6:	4b04      	ldr	r3, [pc, #16]	; (800f408 <cock_start+0x34>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f3fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	200003b0 	.word	0x200003b0

0800f40c <cock_power>:

void cock_power(Cock_t *cock, const uint8_t act)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	460b      	mov	r3, r1
 800f416:	70fb      	strb	r3, [r7, #3]
	uint8_t enable = act & 0b1;
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	f003 0301 	and.w	r3, r3, #1
 800f41e:	73fb      	strb	r3, [r7, #15]

	if (enable != 0)
 800f420:	7bfb      	ldrb	r3, [r7, #15]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d006      	beq.n	800f434 <cock_power+0x28>
		HAL_GPIO_WritePin(COCK_PWR_EN_GPIO_Port, COCK_PWR_EN_Pin, GPIO_PIN_SET);
 800f426:	2201      	movs	r2, #1
 800f428:	2120      	movs	r1, #32
 800f42a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f42e:	f7f4 f851 	bl	80034d4 <HAL_GPIO_WritePin>
 800f432:	e005      	b.n	800f440 <cock_power+0x34>
	else
		HAL_GPIO_WritePin(COCK_PWR_EN_GPIO_Port, COCK_PWR_EN_Pin, GPIO_PIN_RESET);
 800f434:	2200      	movs	r2, #0
 800f436:	2120      	movs	r1, #32
 800f438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f43c:	f7f4 f84a 	bl	80034d4 <HAL_GPIO_WritePin>

	cock->state = CST_IDLE;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	709a      	strb	r2, [r3, #2]
	cock->enable = enable;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	7bfa      	ldrb	r2, [r7, #15]
 800f44a:	701a      	strb	r2, [r3, #0]
}
 800f44c:	bf00      	nop
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <munisi_reset>:

volatile uint16_t m_counter = 0;
uint8_t state_active = 0;

void munisi_reset()
{
 800f454:	b480      	push	{r7}
 800f456:	af00      	add	r7, sp, #0
	m_counter = 0;
 800f458:	4b03      	ldr	r3, [pc, #12]	; (800f468 <munisi_reset+0x14>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	801a      	strh	r2, [r3, #0]
}
 800f45e:	bf00      	nop
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	20010df0 	.word	0x20010df0

0800f46c <munisi_set_state>:

void munisi_set_state(const uint8_t power)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	71fb      	strb	r3, [r7, #7]
	state_active = power;
 800f476:	4a04      	ldr	r2, [pc, #16]	; (800f488 <munisi_set_state+0x1c>)
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	7013      	strb	r3, [r2, #0]
}
 800f47c:	bf00      	nop
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	20010df2 	.word	0x20010df2

0800f48c <munisi_get_counter>:
{
	return state_active;
}

uint16_t munisi_get_counter()
{
 800f48c:	b480      	push	{r7}
 800f48e:	af00      	add	r7, sp, #0
	return m_counter;
 800f490:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <munisi_get_counter+0x14>)
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	b29b      	uxth	r3, r3
}
 800f496:	4618      	mov	r0, r3
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	20010df0 	.word	0x20010df0

0800f4a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	af00      	add	r7, sp, #0
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(MUNC_A_Pin) != 0x00u) {
 800f4a8:	4b0c      	ldr	r3, [pc, #48]	; (800f4dc <EXTI15_10_IRQHandler+0x38>)
 800f4aa:	695b      	ldr	r3, [r3, #20]
 800f4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00e      	beq.n	800f4d2 <EXTI15_10_IRQHandler+0x2e>
		__HAL_GPIO_EXTI_CLEAR_IT(MUNC_A_Pin);
 800f4b4:	4b09      	ldr	r3, [pc, #36]	; (800f4dc <EXTI15_10_IRQHandler+0x38>)
 800f4b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4ba:	615a      	str	r2, [r3, #20]

		if (state_active != 0)
 800f4bc:	4b08      	ldr	r3, [pc, #32]	; (800f4e0 <EXTI15_10_IRQHandler+0x3c>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d006      	beq.n	800f4d2 <EXTI15_10_IRQHandler+0x2e>
			m_counter++;
 800f4c4:	4b07      	ldr	r3, [pc, #28]	; (800f4e4 <EXTI15_10_IRQHandler+0x40>)
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <EXTI15_10_IRQHandler+0x40>)
 800f4d0:	801a      	strh	r2, [r3, #0]
	}
}
 800f4d2:	bf00      	nop
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	40010400 	.word	0x40010400
 800f4e0:	20010df2 	.word	0x20010df2
 800f4e4:	20010df0 	.word	0x20010df0

0800f4e8 <trig_set_power>:
#include "tim.h"

volatile uint32_t t_js_counter;

void trig_set_power(const uint8_t act)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TRIGGER_ENABLE_GPIO_Port, TRIGGER_ENABLE_Pin, act);
 800f4f2:	79fb      	ldrb	r3, [r7, #7]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f4fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f4fe:	f7f3 ffe9 	bl	80034d4 <HAL_GPIO_WritePin>
}
 800f502:	bf00      	nop
 800f504:	3708      	adds	r7, #8
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <trig_start>:

void trig_start()
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_START_GPIO_Port, T_START_Pin, GPIO_PIN_SET);
 800f510:	2201      	movs	r2, #1
 800f512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f516:	4805      	ldr	r0, [pc, #20]	; (800f52c <trig_start+0x20>)
 800f518:	f7f3 ffdc 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_SET);
 800f51c:	2201      	movs	r2, #1
 800f51e:	2140      	movs	r1, #64	; 0x40
 800f520:	4803      	ldr	r0, [pc, #12]	; (800f530 <trig_start+0x24>)
 800f522:	f7f3 ffd7 	bl	80034d4 <HAL_GPIO_WritePin>
}
 800f526:	bf00      	nop
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	48000400 	.word	0x48000400
 800f530:	48000800 	.word	0x48000800

0800f534 <trig_s_stop>:

void trig_s_stop()
{
 800f534:	b580      	push	{r7, lr}
 800f536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_START_GPIO_Port, T_START_Pin, GPIO_PIN_RESET);
 800f538:	2200      	movs	r2, #0
 800f53a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f53e:	4802      	ldr	r0, [pc, #8]	; (800f548 <trig_s_stop+0x14>)
 800f540:	f7f3 ffc8 	bl	80034d4 <HAL_GPIO_WritePin>
}
 800f544:	bf00      	nop
 800f546:	bd80      	pop	{r7, pc}
 800f548:	48000400 	.word	0x48000400

0800f54c <trig_h_stop>:

void trig_h_stop()
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_HOLD_GPIO_Port, T_HOLD_Pin, GPIO_PIN_RESET);
 800f550:	2200      	movs	r2, #0
 800f552:	2140      	movs	r1, #64	; 0x40
 800f554:	4802      	ldr	r0, [pc, #8]	; (800f560 <trig_h_stop+0x14>)
 800f556:	f7f3 ffbd 	bl	80034d4 <HAL_GPIO_WritePin>
}
 800f55a:	bf00      	nop
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	48000800 	.word	0x48000800

0800f564 <trig_pulse_state>:

uint8_t trig_pulse_state()
{
 800f564:	b580      	push	{r7, lr}
 800f566:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(T_JS_PULSE_GPIO_Port, T_JS_PULSE_Pin) == GPIO_PIN_RESET)
 800f568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f56c:	4805      	ldr	r0, [pc, #20]	; (800f584 <trig_pulse_state+0x20>)
 800f56e:	f7f3 ff99 	bl	80034a4 <HAL_GPIO_ReadPin>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d101      	bne.n	800f57c <trig_pulse_state+0x18>
		return 1;
 800f578:	2301      	movs	r3, #1
 800f57a:	e000      	b.n	800f57e <trig_pulse_state+0x1a>
	else
		return 0;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	48000400 	.word	0x48000400

0800f588 <trig_all_stop>:

	return 0;
}

void trig_all_stop()
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	af00      	add	r7, sp, #0
	trig_s_stop();
 800f58c:	f7ff ffd2 	bl	800f534 <trig_s_stop>
	trig_h_stop();
 800f590:	f7ff ffdc 	bl	800f54c <trig_h_stop>
}
 800f594:	bf00      	nop
 800f596:	bd80      	pop	{r7, pc}

0800f598 <__errno>:
 800f598:	4b01      	ldr	r3, [pc, #4]	; (800f5a0 <__errno+0x8>)
 800f59a:	6818      	ldr	r0, [r3, #0]
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	20000014 	.word	0x20000014

0800f5a4 <__libc_init_array>:
 800f5a4:	b570      	push	{r4, r5, r6, lr}
 800f5a6:	4d0d      	ldr	r5, [pc, #52]	; (800f5dc <__libc_init_array+0x38>)
 800f5a8:	4c0d      	ldr	r4, [pc, #52]	; (800f5e0 <__libc_init_array+0x3c>)
 800f5aa:	1b64      	subs	r4, r4, r5
 800f5ac:	10a4      	asrs	r4, r4, #2
 800f5ae:	2600      	movs	r6, #0
 800f5b0:	42a6      	cmp	r6, r4
 800f5b2:	d109      	bne.n	800f5c8 <__libc_init_array+0x24>
 800f5b4:	4d0b      	ldr	r5, [pc, #44]	; (800f5e4 <__libc_init_array+0x40>)
 800f5b6:	4c0c      	ldr	r4, [pc, #48]	; (800f5e8 <__libc_init_array+0x44>)
 800f5b8:	f002 feee 	bl	8012398 <_init>
 800f5bc:	1b64      	subs	r4, r4, r5
 800f5be:	10a4      	asrs	r4, r4, #2
 800f5c0:	2600      	movs	r6, #0
 800f5c2:	42a6      	cmp	r6, r4
 800f5c4:	d105      	bne.n	800f5d2 <__libc_init_array+0x2e>
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}
 800f5c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5cc:	4798      	blx	r3
 800f5ce:	3601      	adds	r6, #1
 800f5d0:	e7ee      	b.n	800f5b0 <__libc_init_array+0xc>
 800f5d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5d6:	4798      	blx	r3
 800f5d8:	3601      	adds	r6, #1
 800f5da:	e7f2      	b.n	800f5c2 <__libc_init_array+0x1e>
 800f5dc:	08012e34 	.word	0x08012e34
 800f5e0:	08012e34 	.word	0x08012e34
 800f5e4:	08012e34 	.word	0x08012e34
 800f5e8:	08012e38 	.word	0x08012e38

0800f5ec <memcpy>:
 800f5ec:	440a      	add	r2, r1
 800f5ee:	4291      	cmp	r1, r2
 800f5f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5f4:	d100      	bne.n	800f5f8 <memcpy+0xc>
 800f5f6:	4770      	bx	lr
 800f5f8:	b510      	push	{r4, lr}
 800f5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f602:	4291      	cmp	r1, r2
 800f604:	d1f9      	bne.n	800f5fa <memcpy+0xe>
 800f606:	bd10      	pop	{r4, pc}

0800f608 <memset>:
 800f608:	4402      	add	r2, r0
 800f60a:	4603      	mov	r3, r0
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d100      	bne.n	800f612 <memset+0xa>
 800f610:	4770      	bx	lr
 800f612:	f803 1b01 	strb.w	r1, [r3], #1
 800f616:	e7f9      	b.n	800f60c <memset+0x4>

0800f618 <__cvt>:
 800f618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f61c:	ec55 4b10 	vmov	r4, r5, d0
 800f620:	2d00      	cmp	r5, #0
 800f622:	460e      	mov	r6, r1
 800f624:	4619      	mov	r1, r3
 800f626:	462b      	mov	r3, r5
 800f628:	bfbb      	ittet	lt
 800f62a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f62e:	461d      	movlt	r5, r3
 800f630:	2300      	movge	r3, #0
 800f632:	232d      	movlt	r3, #45	; 0x2d
 800f634:	700b      	strb	r3, [r1, #0]
 800f636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f63c:	4691      	mov	r9, r2
 800f63e:	f023 0820 	bic.w	r8, r3, #32
 800f642:	bfbc      	itt	lt
 800f644:	4622      	movlt	r2, r4
 800f646:	4614      	movlt	r4, r2
 800f648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f64c:	d005      	beq.n	800f65a <__cvt+0x42>
 800f64e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f652:	d100      	bne.n	800f656 <__cvt+0x3e>
 800f654:	3601      	adds	r6, #1
 800f656:	2102      	movs	r1, #2
 800f658:	e000      	b.n	800f65c <__cvt+0x44>
 800f65a:	2103      	movs	r1, #3
 800f65c:	ab03      	add	r3, sp, #12
 800f65e:	9301      	str	r3, [sp, #4]
 800f660:	ab02      	add	r3, sp, #8
 800f662:	9300      	str	r3, [sp, #0]
 800f664:	ec45 4b10 	vmov	d0, r4, r5
 800f668:	4653      	mov	r3, sl
 800f66a:	4632      	mov	r2, r6
 800f66c:	f000 fefc 	bl	8010468 <_dtoa_r>
 800f670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f674:	4607      	mov	r7, r0
 800f676:	d102      	bne.n	800f67e <__cvt+0x66>
 800f678:	f019 0f01 	tst.w	r9, #1
 800f67c:	d022      	beq.n	800f6c4 <__cvt+0xac>
 800f67e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f682:	eb07 0906 	add.w	r9, r7, r6
 800f686:	d110      	bne.n	800f6aa <__cvt+0x92>
 800f688:	783b      	ldrb	r3, [r7, #0]
 800f68a:	2b30      	cmp	r3, #48	; 0x30
 800f68c:	d10a      	bne.n	800f6a4 <__cvt+0x8c>
 800f68e:	2200      	movs	r2, #0
 800f690:	2300      	movs	r3, #0
 800f692:	4620      	mov	r0, r4
 800f694:	4629      	mov	r1, r5
 800f696:	f7f1 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 800f69a:	b918      	cbnz	r0, 800f6a4 <__cvt+0x8c>
 800f69c:	f1c6 0601 	rsb	r6, r6, #1
 800f6a0:	f8ca 6000 	str.w	r6, [sl]
 800f6a4:	f8da 3000 	ldr.w	r3, [sl]
 800f6a8:	4499      	add	r9, r3
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f7f1 fa31 	bl	8000b18 <__aeabi_dcmpeq>
 800f6b6:	b108      	cbz	r0, 800f6bc <__cvt+0xa4>
 800f6b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f6bc:	2230      	movs	r2, #48	; 0x30
 800f6be:	9b03      	ldr	r3, [sp, #12]
 800f6c0:	454b      	cmp	r3, r9
 800f6c2:	d307      	bcc.n	800f6d4 <__cvt+0xbc>
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6c8:	1bdb      	subs	r3, r3, r7
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	b004      	add	sp, #16
 800f6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d4:	1c59      	adds	r1, r3, #1
 800f6d6:	9103      	str	r1, [sp, #12]
 800f6d8:	701a      	strb	r2, [r3, #0]
 800f6da:	e7f0      	b.n	800f6be <__cvt+0xa6>

0800f6dc <__exponent>:
 800f6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2900      	cmp	r1, #0
 800f6e2:	bfb8      	it	lt
 800f6e4:	4249      	neglt	r1, r1
 800f6e6:	f803 2b02 	strb.w	r2, [r3], #2
 800f6ea:	bfb4      	ite	lt
 800f6ec:	222d      	movlt	r2, #45	; 0x2d
 800f6ee:	222b      	movge	r2, #43	; 0x2b
 800f6f0:	2909      	cmp	r1, #9
 800f6f2:	7042      	strb	r2, [r0, #1]
 800f6f4:	dd2a      	ble.n	800f74c <__exponent+0x70>
 800f6f6:	f10d 0407 	add.w	r4, sp, #7
 800f6fa:	46a4      	mov	ip, r4
 800f6fc:	270a      	movs	r7, #10
 800f6fe:	46a6      	mov	lr, r4
 800f700:	460a      	mov	r2, r1
 800f702:	fb91 f6f7 	sdiv	r6, r1, r7
 800f706:	fb07 1516 	mls	r5, r7, r6, r1
 800f70a:	3530      	adds	r5, #48	; 0x30
 800f70c:	2a63      	cmp	r2, #99	; 0x63
 800f70e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f716:	4631      	mov	r1, r6
 800f718:	dcf1      	bgt.n	800f6fe <__exponent+0x22>
 800f71a:	3130      	adds	r1, #48	; 0x30
 800f71c:	f1ae 0502 	sub.w	r5, lr, #2
 800f720:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f724:	1c44      	adds	r4, r0, #1
 800f726:	4629      	mov	r1, r5
 800f728:	4561      	cmp	r1, ip
 800f72a:	d30a      	bcc.n	800f742 <__exponent+0x66>
 800f72c:	f10d 0209 	add.w	r2, sp, #9
 800f730:	eba2 020e 	sub.w	r2, r2, lr
 800f734:	4565      	cmp	r5, ip
 800f736:	bf88      	it	hi
 800f738:	2200      	movhi	r2, #0
 800f73a:	4413      	add	r3, r2
 800f73c:	1a18      	subs	r0, r3, r0
 800f73e:	b003      	add	sp, #12
 800f740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f74a:	e7ed      	b.n	800f728 <__exponent+0x4c>
 800f74c:	2330      	movs	r3, #48	; 0x30
 800f74e:	3130      	adds	r1, #48	; 0x30
 800f750:	7083      	strb	r3, [r0, #2]
 800f752:	70c1      	strb	r1, [r0, #3]
 800f754:	1d03      	adds	r3, r0, #4
 800f756:	e7f1      	b.n	800f73c <__exponent+0x60>

0800f758 <_printf_float>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	ed2d 8b02 	vpush	{d8}
 800f760:	b08d      	sub	sp, #52	; 0x34
 800f762:	460c      	mov	r4, r1
 800f764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f768:	4616      	mov	r6, r2
 800f76a:	461f      	mov	r7, r3
 800f76c:	4605      	mov	r5, r0
 800f76e:	f001 fe21 	bl	80113b4 <_localeconv_r>
 800f772:	f8d0 a000 	ldr.w	sl, [r0]
 800f776:	4650      	mov	r0, sl
 800f778:	f7f0 fd52 	bl	8000220 <strlen>
 800f77c:	2300      	movs	r3, #0
 800f77e:	930a      	str	r3, [sp, #40]	; 0x28
 800f780:	6823      	ldr	r3, [r4, #0]
 800f782:	9305      	str	r3, [sp, #20]
 800f784:	f8d8 3000 	ldr.w	r3, [r8]
 800f788:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f78c:	3307      	adds	r3, #7
 800f78e:	f023 0307 	bic.w	r3, r3, #7
 800f792:	f103 0208 	add.w	r2, r3, #8
 800f796:	f8c8 2000 	str.w	r2, [r8]
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f7a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f7a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f7aa:	9307      	str	r3, [sp, #28]
 800f7ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800f7b0:	ee08 0a10 	vmov	s16, r0
 800f7b4:	4b9f      	ldr	r3, [pc, #636]	; (800fa34 <_printf_float+0x2dc>)
 800f7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f7be:	f7f1 f9dd 	bl	8000b7c <__aeabi_dcmpun>
 800f7c2:	bb88      	cbnz	r0, 800f828 <_printf_float+0xd0>
 800f7c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7c8:	4b9a      	ldr	r3, [pc, #616]	; (800fa34 <_printf_float+0x2dc>)
 800f7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ce:	f7f1 f9b7 	bl	8000b40 <__aeabi_dcmple>
 800f7d2:	bb48      	cbnz	r0, 800f828 <_printf_float+0xd0>
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	4640      	mov	r0, r8
 800f7da:	4649      	mov	r1, r9
 800f7dc:	f7f1 f9a6 	bl	8000b2c <__aeabi_dcmplt>
 800f7e0:	b110      	cbz	r0, 800f7e8 <_printf_float+0x90>
 800f7e2:	232d      	movs	r3, #45	; 0x2d
 800f7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7e8:	4b93      	ldr	r3, [pc, #588]	; (800fa38 <_printf_float+0x2e0>)
 800f7ea:	4894      	ldr	r0, [pc, #592]	; (800fa3c <_printf_float+0x2e4>)
 800f7ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f7f0:	bf94      	ite	ls
 800f7f2:	4698      	movls	r8, r3
 800f7f4:	4680      	movhi	r8, r0
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	6123      	str	r3, [r4, #16]
 800f7fa:	9b05      	ldr	r3, [sp, #20]
 800f7fc:	f023 0204 	bic.w	r2, r3, #4
 800f800:	6022      	str	r2, [r4, #0]
 800f802:	f04f 0900 	mov.w	r9, #0
 800f806:	9700      	str	r7, [sp, #0]
 800f808:	4633      	mov	r3, r6
 800f80a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f80c:	4621      	mov	r1, r4
 800f80e:	4628      	mov	r0, r5
 800f810:	f000 f9d8 	bl	800fbc4 <_printf_common>
 800f814:	3001      	adds	r0, #1
 800f816:	f040 8090 	bne.w	800f93a <_printf_float+0x1e2>
 800f81a:	f04f 30ff 	mov.w	r0, #4294967295
 800f81e:	b00d      	add	sp, #52	; 0x34
 800f820:	ecbd 8b02 	vpop	{d8}
 800f824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f828:	4642      	mov	r2, r8
 800f82a:	464b      	mov	r3, r9
 800f82c:	4640      	mov	r0, r8
 800f82e:	4649      	mov	r1, r9
 800f830:	f7f1 f9a4 	bl	8000b7c <__aeabi_dcmpun>
 800f834:	b140      	cbz	r0, 800f848 <_printf_float+0xf0>
 800f836:	464b      	mov	r3, r9
 800f838:	2b00      	cmp	r3, #0
 800f83a:	bfbc      	itt	lt
 800f83c:	232d      	movlt	r3, #45	; 0x2d
 800f83e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f842:	487f      	ldr	r0, [pc, #508]	; (800fa40 <_printf_float+0x2e8>)
 800f844:	4b7f      	ldr	r3, [pc, #508]	; (800fa44 <_printf_float+0x2ec>)
 800f846:	e7d1      	b.n	800f7ec <_printf_float+0x94>
 800f848:	6863      	ldr	r3, [r4, #4]
 800f84a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f84e:	9206      	str	r2, [sp, #24]
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	d13f      	bne.n	800f8d4 <_printf_float+0x17c>
 800f854:	2306      	movs	r3, #6
 800f856:	6063      	str	r3, [r4, #4]
 800f858:	9b05      	ldr	r3, [sp, #20]
 800f85a:	6861      	ldr	r1, [r4, #4]
 800f85c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f860:	2300      	movs	r3, #0
 800f862:	9303      	str	r3, [sp, #12]
 800f864:	ab0a      	add	r3, sp, #40	; 0x28
 800f866:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f86a:	ab09      	add	r3, sp, #36	; 0x24
 800f86c:	ec49 8b10 	vmov	d0, r8, r9
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	6022      	str	r2, [r4, #0]
 800f874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f878:	4628      	mov	r0, r5
 800f87a:	f7ff fecd 	bl	800f618 <__cvt>
 800f87e:	9b06      	ldr	r3, [sp, #24]
 800f880:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f882:	2b47      	cmp	r3, #71	; 0x47
 800f884:	4680      	mov	r8, r0
 800f886:	d108      	bne.n	800f89a <_printf_float+0x142>
 800f888:	1cc8      	adds	r0, r1, #3
 800f88a:	db02      	blt.n	800f892 <_printf_float+0x13a>
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	4299      	cmp	r1, r3
 800f890:	dd41      	ble.n	800f916 <_printf_float+0x1be>
 800f892:	f1ab 0b02 	sub.w	fp, fp, #2
 800f896:	fa5f fb8b 	uxtb.w	fp, fp
 800f89a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f89e:	d820      	bhi.n	800f8e2 <_printf_float+0x18a>
 800f8a0:	3901      	subs	r1, #1
 800f8a2:	465a      	mov	r2, fp
 800f8a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f8a8:	9109      	str	r1, [sp, #36]	; 0x24
 800f8aa:	f7ff ff17 	bl	800f6dc <__exponent>
 800f8ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8b0:	1813      	adds	r3, r2, r0
 800f8b2:	2a01      	cmp	r2, #1
 800f8b4:	4681      	mov	r9, r0
 800f8b6:	6123      	str	r3, [r4, #16]
 800f8b8:	dc02      	bgt.n	800f8c0 <_printf_float+0x168>
 800f8ba:	6822      	ldr	r2, [r4, #0]
 800f8bc:	07d2      	lsls	r2, r2, #31
 800f8be:	d501      	bpl.n	800f8c4 <_printf_float+0x16c>
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	6123      	str	r3, [r4, #16]
 800f8c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d09c      	beq.n	800f806 <_printf_float+0xae>
 800f8cc:	232d      	movs	r3, #45	; 0x2d
 800f8ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8d2:	e798      	b.n	800f806 <_printf_float+0xae>
 800f8d4:	9a06      	ldr	r2, [sp, #24]
 800f8d6:	2a47      	cmp	r2, #71	; 0x47
 800f8d8:	d1be      	bne.n	800f858 <_printf_float+0x100>
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1bc      	bne.n	800f858 <_printf_float+0x100>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e7b9      	b.n	800f856 <_printf_float+0xfe>
 800f8e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f8e6:	d118      	bne.n	800f91a <_printf_float+0x1c2>
 800f8e8:	2900      	cmp	r1, #0
 800f8ea:	6863      	ldr	r3, [r4, #4]
 800f8ec:	dd0b      	ble.n	800f906 <_printf_float+0x1ae>
 800f8ee:	6121      	str	r1, [r4, #16]
 800f8f0:	b913      	cbnz	r3, 800f8f8 <_printf_float+0x1a0>
 800f8f2:	6822      	ldr	r2, [r4, #0]
 800f8f4:	07d0      	lsls	r0, r2, #31
 800f8f6:	d502      	bpl.n	800f8fe <_printf_float+0x1a6>
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	440b      	add	r3, r1
 800f8fc:	6123      	str	r3, [r4, #16]
 800f8fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800f900:	f04f 0900 	mov.w	r9, #0
 800f904:	e7de      	b.n	800f8c4 <_printf_float+0x16c>
 800f906:	b913      	cbnz	r3, 800f90e <_printf_float+0x1b6>
 800f908:	6822      	ldr	r2, [r4, #0]
 800f90a:	07d2      	lsls	r2, r2, #31
 800f90c:	d501      	bpl.n	800f912 <_printf_float+0x1ba>
 800f90e:	3302      	adds	r3, #2
 800f910:	e7f4      	b.n	800f8fc <_printf_float+0x1a4>
 800f912:	2301      	movs	r3, #1
 800f914:	e7f2      	b.n	800f8fc <_printf_float+0x1a4>
 800f916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f91c:	4299      	cmp	r1, r3
 800f91e:	db05      	blt.n	800f92c <_printf_float+0x1d4>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	6121      	str	r1, [r4, #16]
 800f924:	07d8      	lsls	r0, r3, #31
 800f926:	d5ea      	bpl.n	800f8fe <_printf_float+0x1a6>
 800f928:	1c4b      	adds	r3, r1, #1
 800f92a:	e7e7      	b.n	800f8fc <_printf_float+0x1a4>
 800f92c:	2900      	cmp	r1, #0
 800f92e:	bfd4      	ite	le
 800f930:	f1c1 0202 	rsble	r2, r1, #2
 800f934:	2201      	movgt	r2, #1
 800f936:	4413      	add	r3, r2
 800f938:	e7e0      	b.n	800f8fc <_printf_float+0x1a4>
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	055a      	lsls	r2, r3, #21
 800f93e:	d407      	bmi.n	800f950 <_printf_float+0x1f8>
 800f940:	6923      	ldr	r3, [r4, #16]
 800f942:	4642      	mov	r2, r8
 800f944:	4631      	mov	r1, r6
 800f946:	4628      	mov	r0, r5
 800f948:	47b8      	blx	r7
 800f94a:	3001      	adds	r0, #1
 800f94c:	d12c      	bne.n	800f9a8 <_printf_float+0x250>
 800f94e:	e764      	b.n	800f81a <_printf_float+0xc2>
 800f950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f954:	f240 80e0 	bls.w	800fb18 <_printf_float+0x3c0>
 800f958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f95c:	2200      	movs	r2, #0
 800f95e:	2300      	movs	r3, #0
 800f960:	f7f1 f8da 	bl	8000b18 <__aeabi_dcmpeq>
 800f964:	2800      	cmp	r0, #0
 800f966:	d034      	beq.n	800f9d2 <_printf_float+0x27a>
 800f968:	4a37      	ldr	r2, [pc, #220]	; (800fa48 <_printf_float+0x2f0>)
 800f96a:	2301      	movs	r3, #1
 800f96c:	4631      	mov	r1, r6
 800f96e:	4628      	mov	r0, r5
 800f970:	47b8      	blx	r7
 800f972:	3001      	adds	r0, #1
 800f974:	f43f af51 	beq.w	800f81a <_printf_float+0xc2>
 800f978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f97c:	429a      	cmp	r2, r3
 800f97e:	db02      	blt.n	800f986 <_printf_float+0x22e>
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	07d8      	lsls	r0, r3, #31
 800f984:	d510      	bpl.n	800f9a8 <_printf_float+0x250>
 800f986:	ee18 3a10 	vmov	r3, s16
 800f98a:	4652      	mov	r2, sl
 800f98c:	4631      	mov	r1, r6
 800f98e:	4628      	mov	r0, r5
 800f990:	47b8      	blx	r7
 800f992:	3001      	adds	r0, #1
 800f994:	f43f af41 	beq.w	800f81a <_printf_float+0xc2>
 800f998:	f04f 0800 	mov.w	r8, #0
 800f99c:	f104 091a 	add.w	r9, r4, #26
 800f9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a2:	3b01      	subs	r3, #1
 800f9a4:	4543      	cmp	r3, r8
 800f9a6:	dc09      	bgt.n	800f9bc <_printf_float+0x264>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	079b      	lsls	r3, r3, #30
 800f9ac:	f100 8105 	bmi.w	800fbba <_printf_float+0x462>
 800f9b0:	68e0      	ldr	r0, [r4, #12]
 800f9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9b4:	4298      	cmp	r0, r3
 800f9b6:	bfb8      	it	lt
 800f9b8:	4618      	movlt	r0, r3
 800f9ba:	e730      	b.n	800f81e <_printf_float+0xc6>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	464a      	mov	r2, r9
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	47b8      	blx	r7
 800f9c6:	3001      	adds	r0, #1
 800f9c8:	f43f af27 	beq.w	800f81a <_printf_float+0xc2>
 800f9cc:	f108 0801 	add.w	r8, r8, #1
 800f9d0:	e7e6      	b.n	800f9a0 <_printf_float+0x248>
 800f9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	dc39      	bgt.n	800fa4c <_printf_float+0x2f4>
 800f9d8:	4a1b      	ldr	r2, [pc, #108]	; (800fa48 <_printf_float+0x2f0>)
 800f9da:	2301      	movs	r3, #1
 800f9dc:	4631      	mov	r1, r6
 800f9de:	4628      	mov	r0, r5
 800f9e0:	47b8      	blx	r7
 800f9e2:	3001      	adds	r0, #1
 800f9e4:	f43f af19 	beq.w	800f81a <_printf_float+0xc2>
 800f9e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	d102      	bne.n	800f9f6 <_printf_float+0x29e>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	07d9      	lsls	r1, r3, #31
 800f9f4:	d5d8      	bpl.n	800f9a8 <_printf_float+0x250>
 800f9f6:	ee18 3a10 	vmov	r3, s16
 800f9fa:	4652      	mov	r2, sl
 800f9fc:	4631      	mov	r1, r6
 800f9fe:	4628      	mov	r0, r5
 800fa00:	47b8      	blx	r7
 800fa02:	3001      	adds	r0, #1
 800fa04:	f43f af09 	beq.w	800f81a <_printf_float+0xc2>
 800fa08:	f04f 0900 	mov.w	r9, #0
 800fa0c:	f104 0a1a 	add.w	sl, r4, #26
 800fa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa12:	425b      	negs	r3, r3
 800fa14:	454b      	cmp	r3, r9
 800fa16:	dc01      	bgt.n	800fa1c <_printf_float+0x2c4>
 800fa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa1a:	e792      	b.n	800f942 <_printf_float+0x1ea>
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	4652      	mov	r2, sl
 800fa20:	4631      	mov	r1, r6
 800fa22:	4628      	mov	r0, r5
 800fa24:	47b8      	blx	r7
 800fa26:	3001      	adds	r0, #1
 800fa28:	f43f aef7 	beq.w	800f81a <_printf_float+0xc2>
 800fa2c:	f109 0901 	add.w	r9, r9, #1
 800fa30:	e7ee      	b.n	800fa10 <_printf_float+0x2b8>
 800fa32:	bf00      	nop
 800fa34:	7fefffff 	.word	0x7fefffff
 800fa38:	08012a54 	.word	0x08012a54
 800fa3c:	08012a58 	.word	0x08012a58
 800fa40:	08012a60 	.word	0x08012a60
 800fa44:	08012a5c 	.word	0x08012a5c
 800fa48:	08012a64 	.word	0x08012a64
 800fa4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa50:	429a      	cmp	r2, r3
 800fa52:	bfa8      	it	ge
 800fa54:	461a      	movge	r2, r3
 800fa56:	2a00      	cmp	r2, #0
 800fa58:	4691      	mov	r9, r2
 800fa5a:	dc37      	bgt.n	800facc <_printf_float+0x374>
 800fa5c:	f04f 0b00 	mov.w	fp, #0
 800fa60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa64:	f104 021a 	add.w	r2, r4, #26
 800fa68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa6a:	9305      	str	r3, [sp, #20]
 800fa6c:	eba3 0309 	sub.w	r3, r3, r9
 800fa70:	455b      	cmp	r3, fp
 800fa72:	dc33      	bgt.n	800fadc <_printf_float+0x384>
 800fa74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	db3b      	blt.n	800faf4 <_printf_float+0x39c>
 800fa7c:	6823      	ldr	r3, [r4, #0]
 800fa7e:	07da      	lsls	r2, r3, #31
 800fa80:	d438      	bmi.n	800faf4 <_printf_float+0x39c>
 800fa82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa84:	9a05      	ldr	r2, [sp, #20]
 800fa86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa88:	1a9a      	subs	r2, r3, r2
 800fa8a:	eba3 0901 	sub.w	r9, r3, r1
 800fa8e:	4591      	cmp	r9, r2
 800fa90:	bfa8      	it	ge
 800fa92:	4691      	movge	r9, r2
 800fa94:	f1b9 0f00 	cmp.w	r9, #0
 800fa98:	dc35      	bgt.n	800fb06 <_printf_float+0x3ae>
 800fa9a:	f04f 0800 	mov.w	r8, #0
 800fa9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800faa2:	f104 0a1a 	add.w	sl, r4, #26
 800faa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faaa:	1a9b      	subs	r3, r3, r2
 800faac:	eba3 0309 	sub.w	r3, r3, r9
 800fab0:	4543      	cmp	r3, r8
 800fab2:	f77f af79 	ble.w	800f9a8 <_printf_float+0x250>
 800fab6:	2301      	movs	r3, #1
 800fab8:	4652      	mov	r2, sl
 800faba:	4631      	mov	r1, r6
 800fabc:	4628      	mov	r0, r5
 800fabe:	47b8      	blx	r7
 800fac0:	3001      	adds	r0, #1
 800fac2:	f43f aeaa 	beq.w	800f81a <_printf_float+0xc2>
 800fac6:	f108 0801 	add.w	r8, r8, #1
 800faca:	e7ec      	b.n	800faa6 <_printf_float+0x34e>
 800facc:	4613      	mov	r3, r2
 800face:	4631      	mov	r1, r6
 800fad0:	4642      	mov	r2, r8
 800fad2:	4628      	mov	r0, r5
 800fad4:	47b8      	blx	r7
 800fad6:	3001      	adds	r0, #1
 800fad8:	d1c0      	bne.n	800fa5c <_printf_float+0x304>
 800fada:	e69e      	b.n	800f81a <_printf_float+0xc2>
 800fadc:	2301      	movs	r3, #1
 800fade:	4631      	mov	r1, r6
 800fae0:	4628      	mov	r0, r5
 800fae2:	9205      	str	r2, [sp, #20]
 800fae4:	47b8      	blx	r7
 800fae6:	3001      	adds	r0, #1
 800fae8:	f43f ae97 	beq.w	800f81a <_printf_float+0xc2>
 800faec:	9a05      	ldr	r2, [sp, #20]
 800faee:	f10b 0b01 	add.w	fp, fp, #1
 800faf2:	e7b9      	b.n	800fa68 <_printf_float+0x310>
 800faf4:	ee18 3a10 	vmov	r3, s16
 800faf8:	4652      	mov	r2, sl
 800fafa:	4631      	mov	r1, r6
 800fafc:	4628      	mov	r0, r5
 800fafe:	47b8      	blx	r7
 800fb00:	3001      	adds	r0, #1
 800fb02:	d1be      	bne.n	800fa82 <_printf_float+0x32a>
 800fb04:	e689      	b.n	800f81a <_printf_float+0xc2>
 800fb06:	9a05      	ldr	r2, [sp, #20]
 800fb08:	464b      	mov	r3, r9
 800fb0a:	4442      	add	r2, r8
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4628      	mov	r0, r5
 800fb10:	47b8      	blx	r7
 800fb12:	3001      	adds	r0, #1
 800fb14:	d1c1      	bne.n	800fa9a <_printf_float+0x342>
 800fb16:	e680      	b.n	800f81a <_printf_float+0xc2>
 800fb18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb1a:	2a01      	cmp	r2, #1
 800fb1c:	dc01      	bgt.n	800fb22 <_printf_float+0x3ca>
 800fb1e:	07db      	lsls	r3, r3, #31
 800fb20:	d538      	bpl.n	800fb94 <_printf_float+0x43c>
 800fb22:	2301      	movs	r3, #1
 800fb24:	4642      	mov	r2, r8
 800fb26:	4631      	mov	r1, r6
 800fb28:	4628      	mov	r0, r5
 800fb2a:	47b8      	blx	r7
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	f43f ae74 	beq.w	800f81a <_printf_float+0xc2>
 800fb32:	ee18 3a10 	vmov	r3, s16
 800fb36:	4652      	mov	r2, sl
 800fb38:	4631      	mov	r1, r6
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	47b8      	blx	r7
 800fb3e:	3001      	adds	r0, #1
 800fb40:	f43f ae6b 	beq.w	800f81a <_printf_float+0xc2>
 800fb44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb48:	2200      	movs	r2, #0
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	f7f0 ffe4 	bl	8000b18 <__aeabi_dcmpeq>
 800fb50:	b9d8      	cbnz	r0, 800fb8a <_printf_float+0x432>
 800fb52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb54:	f108 0201 	add.w	r2, r8, #1
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	4631      	mov	r1, r6
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	47b8      	blx	r7
 800fb60:	3001      	adds	r0, #1
 800fb62:	d10e      	bne.n	800fb82 <_printf_float+0x42a>
 800fb64:	e659      	b.n	800f81a <_printf_float+0xc2>
 800fb66:	2301      	movs	r3, #1
 800fb68:	4652      	mov	r2, sl
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	47b8      	blx	r7
 800fb70:	3001      	adds	r0, #1
 800fb72:	f43f ae52 	beq.w	800f81a <_printf_float+0xc2>
 800fb76:	f108 0801 	add.w	r8, r8, #1
 800fb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	4543      	cmp	r3, r8
 800fb80:	dcf1      	bgt.n	800fb66 <_printf_float+0x40e>
 800fb82:	464b      	mov	r3, r9
 800fb84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb88:	e6dc      	b.n	800f944 <_printf_float+0x1ec>
 800fb8a:	f04f 0800 	mov.w	r8, #0
 800fb8e:	f104 0a1a 	add.w	sl, r4, #26
 800fb92:	e7f2      	b.n	800fb7a <_printf_float+0x422>
 800fb94:	2301      	movs	r3, #1
 800fb96:	4642      	mov	r2, r8
 800fb98:	e7df      	b.n	800fb5a <_printf_float+0x402>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	464a      	mov	r2, r9
 800fb9e:	4631      	mov	r1, r6
 800fba0:	4628      	mov	r0, r5
 800fba2:	47b8      	blx	r7
 800fba4:	3001      	adds	r0, #1
 800fba6:	f43f ae38 	beq.w	800f81a <_printf_float+0xc2>
 800fbaa:	f108 0801 	add.w	r8, r8, #1
 800fbae:	68e3      	ldr	r3, [r4, #12]
 800fbb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbb2:	1a5b      	subs	r3, r3, r1
 800fbb4:	4543      	cmp	r3, r8
 800fbb6:	dcf0      	bgt.n	800fb9a <_printf_float+0x442>
 800fbb8:	e6fa      	b.n	800f9b0 <_printf_float+0x258>
 800fbba:	f04f 0800 	mov.w	r8, #0
 800fbbe:	f104 0919 	add.w	r9, r4, #25
 800fbc2:	e7f4      	b.n	800fbae <_printf_float+0x456>

0800fbc4 <_printf_common>:
 800fbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc8:	4616      	mov	r6, r2
 800fbca:	4699      	mov	r9, r3
 800fbcc:	688a      	ldr	r2, [r1, #8]
 800fbce:	690b      	ldr	r3, [r1, #16]
 800fbd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	bfb8      	it	lt
 800fbd8:	4613      	movlt	r3, r2
 800fbda:	6033      	str	r3, [r6, #0]
 800fbdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	b10a      	cbz	r2, 800fbea <_printf_common+0x26>
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	6033      	str	r3, [r6, #0]
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	0699      	lsls	r1, r3, #26
 800fbee:	bf42      	ittt	mi
 800fbf0:	6833      	ldrmi	r3, [r6, #0]
 800fbf2:	3302      	addmi	r3, #2
 800fbf4:	6033      	strmi	r3, [r6, #0]
 800fbf6:	6825      	ldr	r5, [r4, #0]
 800fbf8:	f015 0506 	ands.w	r5, r5, #6
 800fbfc:	d106      	bne.n	800fc0c <_printf_common+0x48>
 800fbfe:	f104 0a19 	add.w	sl, r4, #25
 800fc02:	68e3      	ldr	r3, [r4, #12]
 800fc04:	6832      	ldr	r2, [r6, #0]
 800fc06:	1a9b      	subs	r3, r3, r2
 800fc08:	42ab      	cmp	r3, r5
 800fc0a:	dc26      	bgt.n	800fc5a <_printf_common+0x96>
 800fc0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc10:	1e13      	subs	r3, r2, #0
 800fc12:	6822      	ldr	r2, [r4, #0]
 800fc14:	bf18      	it	ne
 800fc16:	2301      	movne	r3, #1
 800fc18:	0692      	lsls	r2, r2, #26
 800fc1a:	d42b      	bmi.n	800fc74 <_printf_common+0xb0>
 800fc1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc20:	4649      	mov	r1, r9
 800fc22:	4638      	mov	r0, r7
 800fc24:	47c0      	blx	r8
 800fc26:	3001      	adds	r0, #1
 800fc28:	d01e      	beq.n	800fc68 <_printf_common+0xa4>
 800fc2a:	6823      	ldr	r3, [r4, #0]
 800fc2c:	68e5      	ldr	r5, [r4, #12]
 800fc2e:	6832      	ldr	r2, [r6, #0]
 800fc30:	f003 0306 	and.w	r3, r3, #6
 800fc34:	2b04      	cmp	r3, #4
 800fc36:	bf08      	it	eq
 800fc38:	1aad      	subeq	r5, r5, r2
 800fc3a:	68a3      	ldr	r3, [r4, #8]
 800fc3c:	6922      	ldr	r2, [r4, #16]
 800fc3e:	bf0c      	ite	eq
 800fc40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc44:	2500      	movne	r5, #0
 800fc46:	4293      	cmp	r3, r2
 800fc48:	bfc4      	itt	gt
 800fc4a:	1a9b      	subgt	r3, r3, r2
 800fc4c:	18ed      	addgt	r5, r5, r3
 800fc4e:	2600      	movs	r6, #0
 800fc50:	341a      	adds	r4, #26
 800fc52:	42b5      	cmp	r5, r6
 800fc54:	d11a      	bne.n	800fc8c <_printf_common+0xc8>
 800fc56:	2000      	movs	r0, #0
 800fc58:	e008      	b.n	800fc6c <_printf_common+0xa8>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	4652      	mov	r2, sl
 800fc5e:	4649      	mov	r1, r9
 800fc60:	4638      	mov	r0, r7
 800fc62:	47c0      	blx	r8
 800fc64:	3001      	adds	r0, #1
 800fc66:	d103      	bne.n	800fc70 <_printf_common+0xac>
 800fc68:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc70:	3501      	adds	r5, #1
 800fc72:	e7c6      	b.n	800fc02 <_printf_common+0x3e>
 800fc74:	18e1      	adds	r1, r4, r3
 800fc76:	1c5a      	adds	r2, r3, #1
 800fc78:	2030      	movs	r0, #48	; 0x30
 800fc7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc7e:	4422      	add	r2, r4
 800fc80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc88:	3302      	adds	r3, #2
 800fc8a:	e7c7      	b.n	800fc1c <_printf_common+0x58>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	4622      	mov	r2, r4
 800fc90:	4649      	mov	r1, r9
 800fc92:	4638      	mov	r0, r7
 800fc94:	47c0      	blx	r8
 800fc96:	3001      	adds	r0, #1
 800fc98:	d0e6      	beq.n	800fc68 <_printf_common+0xa4>
 800fc9a:	3601      	adds	r6, #1
 800fc9c:	e7d9      	b.n	800fc52 <_printf_common+0x8e>
	...

0800fca0 <_printf_i>:
 800fca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fca4:	7e0f      	ldrb	r7, [r1, #24]
 800fca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fca8:	2f78      	cmp	r7, #120	; 0x78
 800fcaa:	4691      	mov	r9, r2
 800fcac:	4680      	mov	r8, r0
 800fcae:	460c      	mov	r4, r1
 800fcb0:	469a      	mov	sl, r3
 800fcb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fcb6:	d807      	bhi.n	800fcc8 <_printf_i+0x28>
 800fcb8:	2f62      	cmp	r7, #98	; 0x62
 800fcba:	d80a      	bhi.n	800fcd2 <_printf_i+0x32>
 800fcbc:	2f00      	cmp	r7, #0
 800fcbe:	f000 80d8 	beq.w	800fe72 <_printf_i+0x1d2>
 800fcc2:	2f58      	cmp	r7, #88	; 0x58
 800fcc4:	f000 80a3 	beq.w	800fe0e <_printf_i+0x16e>
 800fcc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcd0:	e03a      	b.n	800fd48 <_printf_i+0xa8>
 800fcd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcd6:	2b15      	cmp	r3, #21
 800fcd8:	d8f6      	bhi.n	800fcc8 <_printf_i+0x28>
 800fcda:	a101      	add	r1, pc, #4	; (adr r1, 800fce0 <_printf_i+0x40>)
 800fcdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fce0:	0800fd39 	.word	0x0800fd39
 800fce4:	0800fd4d 	.word	0x0800fd4d
 800fce8:	0800fcc9 	.word	0x0800fcc9
 800fcec:	0800fcc9 	.word	0x0800fcc9
 800fcf0:	0800fcc9 	.word	0x0800fcc9
 800fcf4:	0800fcc9 	.word	0x0800fcc9
 800fcf8:	0800fd4d 	.word	0x0800fd4d
 800fcfc:	0800fcc9 	.word	0x0800fcc9
 800fd00:	0800fcc9 	.word	0x0800fcc9
 800fd04:	0800fcc9 	.word	0x0800fcc9
 800fd08:	0800fcc9 	.word	0x0800fcc9
 800fd0c:	0800fe59 	.word	0x0800fe59
 800fd10:	0800fd7d 	.word	0x0800fd7d
 800fd14:	0800fe3b 	.word	0x0800fe3b
 800fd18:	0800fcc9 	.word	0x0800fcc9
 800fd1c:	0800fcc9 	.word	0x0800fcc9
 800fd20:	0800fe7b 	.word	0x0800fe7b
 800fd24:	0800fcc9 	.word	0x0800fcc9
 800fd28:	0800fd7d 	.word	0x0800fd7d
 800fd2c:	0800fcc9 	.word	0x0800fcc9
 800fd30:	0800fcc9 	.word	0x0800fcc9
 800fd34:	0800fe43 	.word	0x0800fe43
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	1d1a      	adds	r2, r3, #4
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	602a      	str	r2, [r5, #0]
 800fd40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e0a3      	b.n	800fe94 <_printf_i+0x1f4>
 800fd4c:	6820      	ldr	r0, [r4, #0]
 800fd4e:	6829      	ldr	r1, [r5, #0]
 800fd50:	0606      	lsls	r6, r0, #24
 800fd52:	f101 0304 	add.w	r3, r1, #4
 800fd56:	d50a      	bpl.n	800fd6e <_printf_i+0xce>
 800fd58:	680e      	ldr	r6, [r1, #0]
 800fd5a:	602b      	str	r3, [r5, #0]
 800fd5c:	2e00      	cmp	r6, #0
 800fd5e:	da03      	bge.n	800fd68 <_printf_i+0xc8>
 800fd60:	232d      	movs	r3, #45	; 0x2d
 800fd62:	4276      	negs	r6, r6
 800fd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd68:	485e      	ldr	r0, [pc, #376]	; (800fee4 <_printf_i+0x244>)
 800fd6a:	230a      	movs	r3, #10
 800fd6c:	e019      	b.n	800fda2 <_printf_i+0x102>
 800fd6e:	680e      	ldr	r6, [r1, #0]
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd76:	bf18      	it	ne
 800fd78:	b236      	sxthne	r6, r6
 800fd7a:	e7ef      	b.n	800fd5c <_printf_i+0xbc>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	6820      	ldr	r0, [r4, #0]
 800fd80:	1d19      	adds	r1, r3, #4
 800fd82:	6029      	str	r1, [r5, #0]
 800fd84:	0601      	lsls	r1, r0, #24
 800fd86:	d501      	bpl.n	800fd8c <_printf_i+0xec>
 800fd88:	681e      	ldr	r6, [r3, #0]
 800fd8a:	e002      	b.n	800fd92 <_printf_i+0xf2>
 800fd8c:	0646      	lsls	r6, r0, #25
 800fd8e:	d5fb      	bpl.n	800fd88 <_printf_i+0xe8>
 800fd90:	881e      	ldrh	r6, [r3, #0]
 800fd92:	4854      	ldr	r0, [pc, #336]	; (800fee4 <_printf_i+0x244>)
 800fd94:	2f6f      	cmp	r7, #111	; 0x6f
 800fd96:	bf0c      	ite	eq
 800fd98:	2308      	moveq	r3, #8
 800fd9a:	230a      	movne	r3, #10
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fda2:	6865      	ldr	r5, [r4, #4]
 800fda4:	60a5      	str	r5, [r4, #8]
 800fda6:	2d00      	cmp	r5, #0
 800fda8:	bfa2      	ittt	ge
 800fdaa:	6821      	ldrge	r1, [r4, #0]
 800fdac:	f021 0104 	bicge.w	r1, r1, #4
 800fdb0:	6021      	strge	r1, [r4, #0]
 800fdb2:	b90e      	cbnz	r6, 800fdb8 <_printf_i+0x118>
 800fdb4:	2d00      	cmp	r5, #0
 800fdb6:	d04d      	beq.n	800fe54 <_printf_i+0x1b4>
 800fdb8:	4615      	mov	r5, r2
 800fdba:	fbb6 f1f3 	udiv	r1, r6, r3
 800fdbe:	fb03 6711 	mls	r7, r3, r1, r6
 800fdc2:	5dc7      	ldrb	r7, [r0, r7]
 800fdc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdc8:	4637      	mov	r7, r6
 800fdca:	42bb      	cmp	r3, r7
 800fdcc:	460e      	mov	r6, r1
 800fdce:	d9f4      	bls.n	800fdba <_printf_i+0x11a>
 800fdd0:	2b08      	cmp	r3, #8
 800fdd2:	d10b      	bne.n	800fdec <_printf_i+0x14c>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	07de      	lsls	r6, r3, #31
 800fdd8:	d508      	bpl.n	800fdec <_printf_i+0x14c>
 800fdda:	6923      	ldr	r3, [r4, #16]
 800fddc:	6861      	ldr	r1, [r4, #4]
 800fdde:	4299      	cmp	r1, r3
 800fde0:	bfde      	ittt	le
 800fde2:	2330      	movle	r3, #48	; 0x30
 800fde4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fde8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fdec:	1b52      	subs	r2, r2, r5
 800fdee:	6122      	str	r2, [r4, #16]
 800fdf0:	f8cd a000 	str.w	sl, [sp]
 800fdf4:	464b      	mov	r3, r9
 800fdf6:	aa03      	add	r2, sp, #12
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	f7ff fee2 	bl	800fbc4 <_printf_common>
 800fe00:	3001      	adds	r0, #1
 800fe02:	d14c      	bne.n	800fe9e <_printf_i+0x1fe>
 800fe04:	f04f 30ff 	mov.w	r0, #4294967295
 800fe08:	b004      	add	sp, #16
 800fe0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe0e:	4835      	ldr	r0, [pc, #212]	; (800fee4 <_printf_i+0x244>)
 800fe10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fe14:	6829      	ldr	r1, [r5, #0]
 800fe16:	6823      	ldr	r3, [r4, #0]
 800fe18:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe1c:	6029      	str	r1, [r5, #0]
 800fe1e:	061d      	lsls	r5, r3, #24
 800fe20:	d514      	bpl.n	800fe4c <_printf_i+0x1ac>
 800fe22:	07df      	lsls	r7, r3, #31
 800fe24:	bf44      	itt	mi
 800fe26:	f043 0320 	orrmi.w	r3, r3, #32
 800fe2a:	6023      	strmi	r3, [r4, #0]
 800fe2c:	b91e      	cbnz	r6, 800fe36 <_printf_i+0x196>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	f023 0320 	bic.w	r3, r3, #32
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	2310      	movs	r3, #16
 800fe38:	e7b0      	b.n	800fd9c <_printf_i+0xfc>
 800fe3a:	6823      	ldr	r3, [r4, #0]
 800fe3c:	f043 0320 	orr.w	r3, r3, #32
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	2378      	movs	r3, #120	; 0x78
 800fe44:	4828      	ldr	r0, [pc, #160]	; (800fee8 <_printf_i+0x248>)
 800fe46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe4a:	e7e3      	b.n	800fe14 <_printf_i+0x174>
 800fe4c:	0659      	lsls	r1, r3, #25
 800fe4e:	bf48      	it	mi
 800fe50:	b2b6      	uxthmi	r6, r6
 800fe52:	e7e6      	b.n	800fe22 <_printf_i+0x182>
 800fe54:	4615      	mov	r5, r2
 800fe56:	e7bb      	b.n	800fdd0 <_printf_i+0x130>
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	6826      	ldr	r6, [r4, #0]
 800fe5c:	6961      	ldr	r1, [r4, #20]
 800fe5e:	1d18      	adds	r0, r3, #4
 800fe60:	6028      	str	r0, [r5, #0]
 800fe62:	0635      	lsls	r5, r6, #24
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	d501      	bpl.n	800fe6c <_printf_i+0x1cc>
 800fe68:	6019      	str	r1, [r3, #0]
 800fe6a:	e002      	b.n	800fe72 <_printf_i+0x1d2>
 800fe6c:	0670      	lsls	r0, r6, #25
 800fe6e:	d5fb      	bpl.n	800fe68 <_printf_i+0x1c8>
 800fe70:	8019      	strh	r1, [r3, #0]
 800fe72:	2300      	movs	r3, #0
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	4615      	mov	r5, r2
 800fe78:	e7ba      	b.n	800fdf0 <_printf_i+0x150>
 800fe7a:	682b      	ldr	r3, [r5, #0]
 800fe7c:	1d1a      	adds	r2, r3, #4
 800fe7e:	602a      	str	r2, [r5, #0]
 800fe80:	681d      	ldr	r5, [r3, #0]
 800fe82:	6862      	ldr	r2, [r4, #4]
 800fe84:	2100      	movs	r1, #0
 800fe86:	4628      	mov	r0, r5
 800fe88:	f7f0 f9d2 	bl	8000230 <memchr>
 800fe8c:	b108      	cbz	r0, 800fe92 <_printf_i+0x1f2>
 800fe8e:	1b40      	subs	r0, r0, r5
 800fe90:	6060      	str	r0, [r4, #4]
 800fe92:	6863      	ldr	r3, [r4, #4]
 800fe94:	6123      	str	r3, [r4, #16]
 800fe96:	2300      	movs	r3, #0
 800fe98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe9c:	e7a8      	b.n	800fdf0 <_printf_i+0x150>
 800fe9e:	6923      	ldr	r3, [r4, #16]
 800fea0:	462a      	mov	r2, r5
 800fea2:	4649      	mov	r1, r9
 800fea4:	4640      	mov	r0, r8
 800fea6:	47d0      	blx	sl
 800fea8:	3001      	adds	r0, #1
 800feaa:	d0ab      	beq.n	800fe04 <_printf_i+0x164>
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	079b      	lsls	r3, r3, #30
 800feb0:	d413      	bmi.n	800feda <_printf_i+0x23a>
 800feb2:	68e0      	ldr	r0, [r4, #12]
 800feb4:	9b03      	ldr	r3, [sp, #12]
 800feb6:	4298      	cmp	r0, r3
 800feb8:	bfb8      	it	lt
 800feba:	4618      	movlt	r0, r3
 800febc:	e7a4      	b.n	800fe08 <_printf_i+0x168>
 800febe:	2301      	movs	r3, #1
 800fec0:	4632      	mov	r2, r6
 800fec2:	4649      	mov	r1, r9
 800fec4:	4640      	mov	r0, r8
 800fec6:	47d0      	blx	sl
 800fec8:	3001      	adds	r0, #1
 800feca:	d09b      	beq.n	800fe04 <_printf_i+0x164>
 800fecc:	3501      	adds	r5, #1
 800fece:	68e3      	ldr	r3, [r4, #12]
 800fed0:	9903      	ldr	r1, [sp, #12]
 800fed2:	1a5b      	subs	r3, r3, r1
 800fed4:	42ab      	cmp	r3, r5
 800fed6:	dcf2      	bgt.n	800febe <_printf_i+0x21e>
 800fed8:	e7eb      	b.n	800feb2 <_printf_i+0x212>
 800feda:	2500      	movs	r5, #0
 800fedc:	f104 0619 	add.w	r6, r4, #25
 800fee0:	e7f5      	b.n	800fece <_printf_i+0x22e>
 800fee2:	bf00      	nop
 800fee4:	08012a66 	.word	0x08012a66
 800fee8:	08012a77 	.word	0x08012a77

0800feec <iprintf>:
 800feec:	b40f      	push	{r0, r1, r2, r3}
 800feee:	4b0a      	ldr	r3, [pc, #40]	; (800ff18 <iprintf+0x2c>)
 800fef0:	b513      	push	{r0, r1, r4, lr}
 800fef2:	681c      	ldr	r4, [r3, #0]
 800fef4:	b124      	cbz	r4, 800ff00 <iprintf+0x14>
 800fef6:	69a3      	ldr	r3, [r4, #24]
 800fef8:	b913      	cbnz	r3, 800ff00 <iprintf+0x14>
 800fefa:	4620      	mov	r0, r4
 800fefc:	f001 f9bc 	bl	8011278 <__sinit>
 800ff00:	ab05      	add	r3, sp, #20
 800ff02:	9a04      	ldr	r2, [sp, #16]
 800ff04:	68a1      	ldr	r1, [r4, #8]
 800ff06:	9301      	str	r3, [sp, #4]
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f001 ff6b 	bl	8011de4 <_vfiprintf_r>
 800ff0e:	b002      	add	sp, #8
 800ff10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff14:	b004      	add	sp, #16
 800ff16:	4770      	bx	lr
 800ff18:	20000014 	.word	0x20000014

0800ff1c <putchar>:
 800ff1c:	4b09      	ldr	r3, [pc, #36]	; (800ff44 <putchar+0x28>)
 800ff1e:	b513      	push	{r0, r1, r4, lr}
 800ff20:	681c      	ldr	r4, [r3, #0]
 800ff22:	4601      	mov	r1, r0
 800ff24:	b134      	cbz	r4, 800ff34 <putchar+0x18>
 800ff26:	69a3      	ldr	r3, [r4, #24]
 800ff28:	b923      	cbnz	r3, 800ff34 <putchar+0x18>
 800ff2a:	9001      	str	r0, [sp, #4]
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f001 f9a3 	bl	8011278 <__sinit>
 800ff32:	9901      	ldr	r1, [sp, #4]
 800ff34:	68a2      	ldr	r2, [r4, #8]
 800ff36:	4620      	mov	r0, r4
 800ff38:	b002      	add	sp, #8
 800ff3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3e:	f002 b881 	b.w	8012044 <_putc_r>
 800ff42:	bf00      	nop
 800ff44:	20000014 	.word	0x20000014

0800ff48 <_puts_r>:
 800ff48:	b570      	push	{r4, r5, r6, lr}
 800ff4a:	460e      	mov	r6, r1
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	b118      	cbz	r0, 800ff58 <_puts_r+0x10>
 800ff50:	6983      	ldr	r3, [r0, #24]
 800ff52:	b90b      	cbnz	r3, 800ff58 <_puts_r+0x10>
 800ff54:	f001 f990 	bl	8011278 <__sinit>
 800ff58:	69ab      	ldr	r3, [r5, #24]
 800ff5a:	68ac      	ldr	r4, [r5, #8]
 800ff5c:	b913      	cbnz	r3, 800ff64 <_puts_r+0x1c>
 800ff5e:	4628      	mov	r0, r5
 800ff60:	f001 f98a 	bl	8011278 <__sinit>
 800ff64:	4b2c      	ldr	r3, [pc, #176]	; (8010018 <_puts_r+0xd0>)
 800ff66:	429c      	cmp	r4, r3
 800ff68:	d120      	bne.n	800ffac <_puts_r+0x64>
 800ff6a:	686c      	ldr	r4, [r5, #4]
 800ff6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff6e:	07db      	lsls	r3, r3, #31
 800ff70:	d405      	bmi.n	800ff7e <_puts_r+0x36>
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	0598      	lsls	r0, r3, #22
 800ff76:	d402      	bmi.n	800ff7e <_puts_r+0x36>
 800ff78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff7a:	f001 fa20 	bl	80113be <__retarget_lock_acquire_recursive>
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	0719      	lsls	r1, r3, #28
 800ff82:	d51d      	bpl.n	800ffc0 <_puts_r+0x78>
 800ff84:	6923      	ldr	r3, [r4, #16]
 800ff86:	b1db      	cbz	r3, 800ffc0 <_puts_r+0x78>
 800ff88:	3e01      	subs	r6, #1
 800ff8a:	68a3      	ldr	r3, [r4, #8]
 800ff8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ff90:	3b01      	subs	r3, #1
 800ff92:	60a3      	str	r3, [r4, #8]
 800ff94:	bb39      	cbnz	r1, 800ffe6 <_puts_r+0x9e>
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	da38      	bge.n	801000c <_puts_r+0xc4>
 800ff9a:	4622      	mov	r2, r4
 800ff9c:	210a      	movs	r1, #10
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f000 f916 	bl	80101d0 <__swbuf_r>
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	d011      	beq.n	800ffcc <_puts_r+0x84>
 800ffa8:	250a      	movs	r5, #10
 800ffaa:	e011      	b.n	800ffd0 <_puts_r+0x88>
 800ffac:	4b1b      	ldr	r3, [pc, #108]	; (801001c <_puts_r+0xd4>)
 800ffae:	429c      	cmp	r4, r3
 800ffb0:	d101      	bne.n	800ffb6 <_puts_r+0x6e>
 800ffb2:	68ac      	ldr	r4, [r5, #8]
 800ffb4:	e7da      	b.n	800ff6c <_puts_r+0x24>
 800ffb6:	4b1a      	ldr	r3, [pc, #104]	; (8010020 <_puts_r+0xd8>)
 800ffb8:	429c      	cmp	r4, r3
 800ffba:	bf08      	it	eq
 800ffbc:	68ec      	ldreq	r4, [r5, #12]
 800ffbe:	e7d5      	b.n	800ff6c <_puts_r+0x24>
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	f000 f956 	bl	8010274 <__swsetup_r>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d0dd      	beq.n	800ff88 <_puts_r+0x40>
 800ffcc:	f04f 35ff 	mov.w	r5, #4294967295
 800ffd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffd2:	07da      	lsls	r2, r3, #31
 800ffd4:	d405      	bmi.n	800ffe2 <_puts_r+0x9a>
 800ffd6:	89a3      	ldrh	r3, [r4, #12]
 800ffd8:	059b      	lsls	r3, r3, #22
 800ffda:	d402      	bmi.n	800ffe2 <_puts_r+0x9a>
 800ffdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffde:	f001 f9ef 	bl	80113c0 <__retarget_lock_release_recursive>
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	bd70      	pop	{r4, r5, r6, pc}
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	da04      	bge.n	800fff4 <_puts_r+0xac>
 800ffea:	69a2      	ldr	r2, [r4, #24]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	dc06      	bgt.n	800fffe <_puts_r+0xb6>
 800fff0:	290a      	cmp	r1, #10
 800fff2:	d004      	beq.n	800fffe <_puts_r+0xb6>
 800fff4:	6823      	ldr	r3, [r4, #0]
 800fff6:	1c5a      	adds	r2, r3, #1
 800fff8:	6022      	str	r2, [r4, #0]
 800fffa:	7019      	strb	r1, [r3, #0]
 800fffc:	e7c5      	b.n	800ff8a <_puts_r+0x42>
 800fffe:	4622      	mov	r2, r4
 8010000:	4628      	mov	r0, r5
 8010002:	f000 f8e5 	bl	80101d0 <__swbuf_r>
 8010006:	3001      	adds	r0, #1
 8010008:	d1bf      	bne.n	800ff8a <_puts_r+0x42>
 801000a:	e7df      	b.n	800ffcc <_puts_r+0x84>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	250a      	movs	r5, #10
 8010010:	1c5a      	adds	r2, r3, #1
 8010012:	6022      	str	r2, [r4, #0]
 8010014:	701d      	strb	r5, [r3, #0]
 8010016:	e7db      	b.n	800ffd0 <_puts_r+0x88>
 8010018:	08012b38 	.word	0x08012b38
 801001c:	08012b58 	.word	0x08012b58
 8010020:	08012b18 	.word	0x08012b18

08010024 <puts>:
 8010024:	4b02      	ldr	r3, [pc, #8]	; (8010030 <puts+0xc>)
 8010026:	4601      	mov	r1, r0
 8010028:	6818      	ldr	r0, [r3, #0]
 801002a:	f7ff bf8d 	b.w	800ff48 <_puts_r>
 801002e:	bf00      	nop
 8010030:	20000014 	.word	0x20000014

08010034 <setbuf>:
 8010034:	2900      	cmp	r1, #0
 8010036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801003a:	bf0c      	ite	eq
 801003c:	2202      	moveq	r2, #2
 801003e:	2200      	movne	r2, #0
 8010040:	f000 b800 	b.w	8010044 <setvbuf>

08010044 <setvbuf>:
 8010044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010048:	461d      	mov	r5, r3
 801004a:	4b5d      	ldr	r3, [pc, #372]	; (80101c0 <setvbuf+0x17c>)
 801004c:	681f      	ldr	r7, [r3, #0]
 801004e:	4604      	mov	r4, r0
 8010050:	460e      	mov	r6, r1
 8010052:	4690      	mov	r8, r2
 8010054:	b127      	cbz	r7, 8010060 <setvbuf+0x1c>
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	b913      	cbnz	r3, 8010060 <setvbuf+0x1c>
 801005a:	4638      	mov	r0, r7
 801005c:	f001 f90c 	bl	8011278 <__sinit>
 8010060:	4b58      	ldr	r3, [pc, #352]	; (80101c4 <setvbuf+0x180>)
 8010062:	429c      	cmp	r4, r3
 8010064:	d167      	bne.n	8010136 <setvbuf+0xf2>
 8010066:	687c      	ldr	r4, [r7, #4]
 8010068:	f1b8 0f02 	cmp.w	r8, #2
 801006c:	d006      	beq.n	801007c <setvbuf+0x38>
 801006e:	f1b8 0f01 	cmp.w	r8, #1
 8010072:	f200 809f 	bhi.w	80101b4 <setvbuf+0x170>
 8010076:	2d00      	cmp	r5, #0
 8010078:	f2c0 809c 	blt.w	80101b4 <setvbuf+0x170>
 801007c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801007e:	07db      	lsls	r3, r3, #31
 8010080:	d405      	bmi.n	801008e <setvbuf+0x4a>
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	0598      	lsls	r0, r3, #22
 8010086:	d402      	bmi.n	801008e <setvbuf+0x4a>
 8010088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801008a:	f001 f998 	bl	80113be <__retarget_lock_acquire_recursive>
 801008e:	4621      	mov	r1, r4
 8010090:	4638      	mov	r0, r7
 8010092:	f001 f85d 	bl	8011150 <_fflush_r>
 8010096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010098:	b141      	cbz	r1, 80100ac <setvbuf+0x68>
 801009a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801009e:	4299      	cmp	r1, r3
 80100a0:	d002      	beq.n	80100a8 <setvbuf+0x64>
 80100a2:	4638      	mov	r0, r7
 80100a4:	f001 fd94 	bl	8011bd0 <_free_r>
 80100a8:	2300      	movs	r3, #0
 80100aa:	6363      	str	r3, [r4, #52]	; 0x34
 80100ac:	2300      	movs	r3, #0
 80100ae:	61a3      	str	r3, [r4, #24]
 80100b0:	6063      	str	r3, [r4, #4]
 80100b2:	89a3      	ldrh	r3, [r4, #12]
 80100b4:	0619      	lsls	r1, r3, #24
 80100b6:	d503      	bpl.n	80100c0 <setvbuf+0x7c>
 80100b8:	6921      	ldr	r1, [r4, #16]
 80100ba:	4638      	mov	r0, r7
 80100bc:	f001 fd88 	bl	8011bd0 <_free_r>
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80100c6:	f023 0303 	bic.w	r3, r3, #3
 80100ca:	f1b8 0f02 	cmp.w	r8, #2
 80100ce:	81a3      	strh	r3, [r4, #12]
 80100d0:	d06c      	beq.n	80101ac <setvbuf+0x168>
 80100d2:	ab01      	add	r3, sp, #4
 80100d4:	466a      	mov	r2, sp
 80100d6:	4621      	mov	r1, r4
 80100d8:	4638      	mov	r0, r7
 80100da:	f001 f972 	bl	80113c2 <__swhatbuf_r>
 80100de:	89a3      	ldrh	r3, [r4, #12]
 80100e0:	4318      	orrs	r0, r3
 80100e2:	81a0      	strh	r0, [r4, #12]
 80100e4:	2d00      	cmp	r5, #0
 80100e6:	d130      	bne.n	801014a <setvbuf+0x106>
 80100e8:	9d00      	ldr	r5, [sp, #0]
 80100ea:	4628      	mov	r0, r5
 80100ec:	f001 f9ce 	bl	801148c <malloc>
 80100f0:	4606      	mov	r6, r0
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d155      	bne.n	80101a2 <setvbuf+0x15e>
 80100f6:	f8dd 9000 	ldr.w	r9, [sp]
 80100fa:	45a9      	cmp	r9, r5
 80100fc:	d14a      	bne.n	8010194 <setvbuf+0x150>
 80100fe:	f04f 35ff 	mov.w	r5, #4294967295
 8010102:	2200      	movs	r2, #0
 8010104:	60a2      	str	r2, [r4, #8]
 8010106:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801010a:	6022      	str	r2, [r4, #0]
 801010c:	6122      	str	r2, [r4, #16]
 801010e:	2201      	movs	r2, #1
 8010110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010114:	6162      	str	r2, [r4, #20]
 8010116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010118:	f043 0302 	orr.w	r3, r3, #2
 801011c:	07d2      	lsls	r2, r2, #31
 801011e:	81a3      	strh	r3, [r4, #12]
 8010120:	d405      	bmi.n	801012e <setvbuf+0xea>
 8010122:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010126:	d102      	bne.n	801012e <setvbuf+0xea>
 8010128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801012a:	f001 f949 	bl	80113c0 <__retarget_lock_release_recursive>
 801012e:	4628      	mov	r0, r5
 8010130:	b003      	add	sp, #12
 8010132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010136:	4b24      	ldr	r3, [pc, #144]	; (80101c8 <setvbuf+0x184>)
 8010138:	429c      	cmp	r4, r3
 801013a:	d101      	bne.n	8010140 <setvbuf+0xfc>
 801013c:	68bc      	ldr	r4, [r7, #8]
 801013e:	e793      	b.n	8010068 <setvbuf+0x24>
 8010140:	4b22      	ldr	r3, [pc, #136]	; (80101cc <setvbuf+0x188>)
 8010142:	429c      	cmp	r4, r3
 8010144:	bf08      	it	eq
 8010146:	68fc      	ldreq	r4, [r7, #12]
 8010148:	e78e      	b.n	8010068 <setvbuf+0x24>
 801014a:	2e00      	cmp	r6, #0
 801014c:	d0cd      	beq.n	80100ea <setvbuf+0xa6>
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	b913      	cbnz	r3, 8010158 <setvbuf+0x114>
 8010152:	4638      	mov	r0, r7
 8010154:	f001 f890 	bl	8011278 <__sinit>
 8010158:	f1b8 0f01 	cmp.w	r8, #1
 801015c:	bf08      	it	eq
 801015e:	89a3      	ldrheq	r3, [r4, #12]
 8010160:	6026      	str	r6, [r4, #0]
 8010162:	bf04      	itt	eq
 8010164:	f043 0301 	orreq.w	r3, r3, #1
 8010168:	81a3      	strheq	r3, [r4, #12]
 801016a:	89a2      	ldrh	r2, [r4, #12]
 801016c:	f012 0308 	ands.w	r3, r2, #8
 8010170:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010174:	d01c      	beq.n	80101b0 <setvbuf+0x16c>
 8010176:	07d3      	lsls	r3, r2, #31
 8010178:	bf41      	itttt	mi
 801017a:	2300      	movmi	r3, #0
 801017c:	426d      	negmi	r5, r5
 801017e:	60a3      	strmi	r3, [r4, #8]
 8010180:	61a5      	strmi	r5, [r4, #24]
 8010182:	bf58      	it	pl
 8010184:	60a5      	strpl	r5, [r4, #8]
 8010186:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010188:	f015 0501 	ands.w	r5, r5, #1
 801018c:	d115      	bne.n	80101ba <setvbuf+0x176>
 801018e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010192:	e7c8      	b.n	8010126 <setvbuf+0xe2>
 8010194:	4648      	mov	r0, r9
 8010196:	f001 f979 	bl	801148c <malloc>
 801019a:	4606      	mov	r6, r0
 801019c:	2800      	cmp	r0, #0
 801019e:	d0ae      	beq.n	80100fe <setvbuf+0xba>
 80101a0:	464d      	mov	r5, r9
 80101a2:	89a3      	ldrh	r3, [r4, #12]
 80101a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a8:	81a3      	strh	r3, [r4, #12]
 80101aa:	e7d0      	b.n	801014e <setvbuf+0x10a>
 80101ac:	2500      	movs	r5, #0
 80101ae:	e7a8      	b.n	8010102 <setvbuf+0xbe>
 80101b0:	60a3      	str	r3, [r4, #8]
 80101b2:	e7e8      	b.n	8010186 <setvbuf+0x142>
 80101b4:	f04f 35ff 	mov.w	r5, #4294967295
 80101b8:	e7b9      	b.n	801012e <setvbuf+0xea>
 80101ba:	2500      	movs	r5, #0
 80101bc:	e7b7      	b.n	801012e <setvbuf+0xea>
 80101be:	bf00      	nop
 80101c0:	20000014 	.word	0x20000014
 80101c4:	08012b38 	.word	0x08012b38
 80101c8:	08012b58 	.word	0x08012b58
 80101cc:	08012b18 	.word	0x08012b18

080101d0 <__swbuf_r>:
 80101d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d2:	460e      	mov	r6, r1
 80101d4:	4614      	mov	r4, r2
 80101d6:	4605      	mov	r5, r0
 80101d8:	b118      	cbz	r0, 80101e2 <__swbuf_r+0x12>
 80101da:	6983      	ldr	r3, [r0, #24]
 80101dc:	b90b      	cbnz	r3, 80101e2 <__swbuf_r+0x12>
 80101de:	f001 f84b 	bl	8011278 <__sinit>
 80101e2:	4b21      	ldr	r3, [pc, #132]	; (8010268 <__swbuf_r+0x98>)
 80101e4:	429c      	cmp	r4, r3
 80101e6:	d12b      	bne.n	8010240 <__swbuf_r+0x70>
 80101e8:	686c      	ldr	r4, [r5, #4]
 80101ea:	69a3      	ldr	r3, [r4, #24]
 80101ec:	60a3      	str	r3, [r4, #8]
 80101ee:	89a3      	ldrh	r3, [r4, #12]
 80101f0:	071a      	lsls	r2, r3, #28
 80101f2:	d52f      	bpl.n	8010254 <__swbuf_r+0x84>
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	b36b      	cbz	r3, 8010254 <__swbuf_r+0x84>
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	6820      	ldr	r0, [r4, #0]
 80101fc:	1ac0      	subs	r0, r0, r3
 80101fe:	6963      	ldr	r3, [r4, #20]
 8010200:	b2f6      	uxtb	r6, r6
 8010202:	4283      	cmp	r3, r0
 8010204:	4637      	mov	r7, r6
 8010206:	dc04      	bgt.n	8010212 <__swbuf_r+0x42>
 8010208:	4621      	mov	r1, r4
 801020a:	4628      	mov	r0, r5
 801020c:	f000 ffa0 	bl	8011150 <_fflush_r>
 8010210:	bb30      	cbnz	r0, 8010260 <__swbuf_r+0x90>
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	3b01      	subs	r3, #1
 8010216:	60a3      	str	r3, [r4, #8]
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	1c5a      	adds	r2, r3, #1
 801021c:	6022      	str	r2, [r4, #0]
 801021e:	701e      	strb	r6, [r3, #0]
 8010220:	6963      	ldr	r3, [r4, #20]
 8010222:	3001      	adds	r0, #1
 8010224:	4283      	cmp	r3, r0
 8010226:	d004      	beq.n	8010232 <__swbuf_r+0x62>
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	07db      	lsls	r3, r3, #31
 801022c:	d506      	bpl.n	801023c <__swbuf_r+0x6c>
 801022e:	2e0a      	cmp	r6, #10
 8010230:	d104      	bne.n	801023c <__swbuf_r+0x6c>
 8010232:	4621      	mov	r1, r4
 8010234:	4628      	mov	r0, r5
 8010236:	f000 ff8b 	bl	8011150 <_fflush_r>
 801023a:	b988      	cbnz	r0, 8010260 <__swbuf_r+0x90>
 801023c:	4638      	mov	r0, r7
 801023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010240:	4b0a      	ldr	r3, [pc, #40]	; (801026c <__swbuf_r+0x9c>)
 8010242:	429c      	cmp	r4, r3
 8010244:	d101      	bne.n	801024a <__swbuf_r+0x7a>
 8010246:	68ac      	ldr	r4, [r5, #8]
 8010248:	e7cf      	b.n	80101ea <__swbuf_r+0x1a>
 801024a:	4b09      	ldr	r3, [pc, #36]	; (8010270 <__swbuf_r+0xa0>)
 801024c:	429c      	cmp	r4, r3
 801024e:	bf08      	it	eq
 8010250:	68ec      	ldreq	r4, [r5, #12]
 8010252:	e7ca      	b.n	80101ea <__swbuf_r+0x1a>
 8010254:	4621      	mov	r1, r4
 8010256:	4628      	mov	r0, r5
 8010258:	f000 f80c 	bl	8010274 <__swsetup_r>
 801025c:	2800      	cmp	r0, #0
 801025e:	d0cb      	beq.n	80101f8 <__swbuf_r+0x28>
 8010260:	f04f 37ff 	mov.w	r7, #4294967295
 8010264:	e7ea      	b.n	801023c <__swbuf_r+0x6c>
 8010266:	bf00      	nop
 8010268:	08012b38 	.word	0x08012b38
 801026c:	08012b58 	.word	0x08012b58
 8010270:	08012b18 	.word	0x08012b18

08010274 <__swsetup_r>:
 8010274:	4b32      	ldr	r3, [pc, #200]	; (8010340 <__swsetup_r+0xcc>)
 8010276:	b570      	push	{r4, r5, r6, lr}
 8010278:	681d      	ldr	r5, [r3, #0]
 801027a:	4606      	mov	r6, r0
 801027c:	460c      	mov	r4, r1
 801027e:	b125      	cbz	r5, 801028a <__swsetup_r+0x16>
 8010280:	69ab      	ldr	r3, [r5, #24]
 8010282:	b913      	cbnz	r3, 801028a <__swsetup_r+0x16>
 8010284:	4628      	mov	r0, r5
 8010286:	f000 fff7 	bl	8011278 <__sinit>
 801028a:	4b2e      	ldr	r3, [pc, #184]	; (8010344 <__swsetup_r+0xd0>)
 801028c:	429c      	cmp	r4, r3
 801028e:	d10f      	bne.n	80102b0 <__swsetup_r+0x3c>
 8010290:	686c      	ldr	r4, [r5, #4]
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010298:	0719      	lsls	r1, r3, #28
 801029a:	d42c      	bmi.n	80102f6 <__swsetup_r+0x82>
 801029c:	06dd      	lsls	r5, r3, #27
 801029e:	d411      	bmi.n	80102c4 <__swsetup_r+0x50>
 80102a0:	2309      	movs	r3, #9
 80102a2:	6033      	str	r3, [r6, #0]
 80102a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102a8:	81a3      	strh	r3, [r4, #12]
 80102aa:	f04f 30ff 	mov.w	r0, #4294967295
 80102ae:	e03e      	b.n	801032e <__swsetup_r+0xba>
 80102b0:	4b25      	ldr	r3, [pc, #148]	; (8010348 <__swsetup_r+0xd4>)
 80102b2:	429c      	cmp	r4, r3
 80102b4:	d101      	bne.n	80102ba <__swsetup_r+0x46>
 80102b6:	68ac      	ldr	r4, [r5, #8]
 80102b8:	e7eb      	b.n	8010292 <__swsetup_r+0x1e>
 80102ba:	4b24      	ldr	r3, [pc, #144]	; (801034c <__swsetup_r+0xd8>)
 80102bc:	429c      	cmp	r4, r3
 80102be:	bf08      	it	eq
 80102c0:	68ec      	ldreq	r4, [r5, #12]
 80102c2:	e7e6      	b.n	8010292 <__swsetup_r+0x1e>
 80102c4:	0758      	lsls	r0, r3, #29
 80102c6:	d512      	bpl.n	80102ee <__swsetup_r+0x7a>
 80102c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ca:	b141      	cbz	r1, 80102de <__swsetup_r+0x6a>
 80102cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102d0:	4299      	cmp	r1, r3
 80102d2:	d002      	beq.n	80102da <__swsetup_r+0x66>
 80102d4:	4630      	mov	r0, r6
 80102d6:	f001 fc7b 	bl	8011bd0 <_free_r>
 80102da:	2300      	movs	r3, #0
 80102dc:	6363      	str	r3, [r4, #52]	; 0x34
 80102de:	89a3      	ldrh	r3, [r4, #12]
 80102e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102e4:	81a3      	strh	r3, [r4, #12]
 80102e6:	2300      	movs	r3, #0
 80102e8:	6063      	str	r3, [r4, #4]
 80102ea:	6923      	ldr	r3, [r4, #16]
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	f043 0308 	orr.w	r3, r3, #8
 80102f4:	81a3      	strh	r3, [r4, #12]
 80102f6:	6923      	ldr	r3, [r4, #16]
 80102f8:	b94b      	cbnz	r3, 801030e <__swsetup_r+0x9a>
 80102fa:	89a3      	ldrh	r3, [r4, #12]
 80102fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010304:	d003      	beq.n	801030e <__swsetup_r+0x9a>
 8010306:	4621      	mov	r1, r4
 8010308:	4630      	mov	r0, r6
 801030a:	f001 f87f 	bl	801140c <__smakebuf_r>
 801030e:	89a0      	ldrh	r0, [r4, #12]
 8010310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010314:	f010 0301 	ands.w	r3, r0, #1
 8010318:	d00a      	beq.n	8010330 <__swsetup_r+0xbc>
 801031a:	2300      	movs	r3, #0
 801031c:	60a3      	str	r3, [r4, #8]
 801031e:	6963      	ldr	r3, [r4, #20]
 8010320:	425b      	negs	r3, r3
 8010322:	61a3      	str	r3, [r4, #24]
 8010324:	6923      	ldr	r3, [r4, #16]
 8010326:	b943      	cbnz	r3, 801033a <__swsetup_r+0xc6>
 8010328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801032c:	d1ba      	bne.n	80102a4 <__swsetup_r+0x30>
 801032e:	bd70      	pop	{r4, r5, r6, pc}
 8010330:	0781      	lsls	r1, r0, #30
 8010332:	bf58      	it	pl
 8010334:	6963      	ldrpl	r3, [r4, #20]
 8010336:	60a3      	str	r3, [r4, #8]
 8010338:	e7f4      	b.n	8010324 <__swsetup_r+0xb0>
 801033a:	2000      	movs	r0, #0
 801033c:	e7f7      	b.n	801032e <__swsetup_r+0xba>
 801033e:	bf00      	nop
 8010340:	20000014 	.word	0x20000014
 8010344:	08012b38 	.word	0x08012b38
 8010348:	08012b58 	.word	0x08012b58
 801034c:	08012b18 	.word	0x08012b18

08010350 <quorem>:
 8010350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010354:	6903      	ldr	r3, [r0, #16]
 8010356:	690c      	ldr	r4, [r1, #16]
 8010358:	42a3      	cmp	r3, r4
 801035a:	4607      	mov	r7, r0
 801035c:	f2c0 8081 	blt.w	8010462 <quorem+0x112>
 8010360:	3c01      	subs	r4, #1
 8010362:	f101 0814 	add.w	r8, r1, #20
 8010366:	f100 0514 	add.w	r5, r0, #20
 801036a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801036e:	9301      	str	r3, [sp, #4]
 8010370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010378:	3301      	adds	r3, #1
 801037a:	429a      	cmp	r2, r3
 801037c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010384:	fbb2 f6f3 	udiv	r6, r2, r3
 8010388:	d331      	bcc.n	80103ee <quorem+0x9e>
 801038a:	f04f 0e00 	mov.w	lr, #0
 801038e:	4640      	mov	r0, r8
 8010390:	46ac      	mov	ip, r5
 8010392:	46f2      	mov	sl, lr
 8010394:	f850 2b04 	ldr.w	r2, [r0], #4
 8010398:	b293      	uxth	r3, r2
 801039a:	fb06 e303 	mla	r3, r6, r3, lr
 801039e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	ebaa 0303 	sub.w	r3, sl, r3
 80103a8:	f8dc a000 	ldr.w	sl, [ip]
 80103ac:	0c12      	lsrs	r2, r2, #16
 80103ae:	fa13 f38a 	uxtah	r3, r3, sl
 80103b2:	fb06 e202 	mla	r2, r6, r2, lr
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	9b00      	ldr	r3, [sp, #0]
 80103ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80103be:	b292      	uxth	r2, r2
 80103c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80103c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80103c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80103cc:	4581      	cmp	r9, r0
 80103ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103d2:	f84c 3b04 	str.w	r3, [ip], #4
 80103d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80103da:	d2db      	bcs.n	8010394 <quorem+0x44>
 80103dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80103e0:	b92b      	cbnz	r3, 80103ee <quorem+0x9e>
 80103e2:	9b01      	ldr	r3, [sp, #4]
 80103e4:	3b04      	subs	r3, #4
 80103e6:	429d      	cmp	r5, r3
 80103e8:	461a      	mov	r2, r3
 80103ea:	d32e      	bcc.n	801044a <quorem+0xfa>
 80103ec:	613c      	str	r4, [r7, #16]
 80103ee:	4638      	mov	r0, r7
 80103f0:	f001 fad6 	bl	80119a0 <__mcmp>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	db24      	blt.n	8010442 <quorem+0xf2>
 80103f8:	3601      	adds	r6, #1
 80103fa:	4628      	mov	r0, r5
 80103fc:	f04f 0c00 	mov.w	ip, #0
 8010400:	f858 2b04 	ldr.w	r2, [r8], #4
 8010404:	f8d0 e000 	ldr.w	lr, [r0]
 8010408:	b293      	uxth	r3, r2
 801040a:	ebac 0303 	sub.w	r3, ip, r3
 801040e:	0c12      	lsrs	r2, r2, #16
 8010410:	fa13 f38e 	uxtah	r3, r3, lr
 8010414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801041c:	b29b      	uxth	r3, r3
 801041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010422:	45c1      	cmp	r9, r8
 8010424:	f840 3b04 	str.w	r3, [r0], #4
 8010428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801042c:	d2e8      	bcs.n	8010400 <quorem+0xb0>
 801042e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010436:	b922      	cbnz	r2, 8010442 <quorem+0xf2>
 8010438:	3b04      	subs	r3, #4
 801043a:	429d      	cmp	r5, r3
 801043c:	461a      	mov	r2, r3
 801043e:	d30a      	bcc.n	8010456 <quorem+0x106>
 8010440:	613c      	str	r4, [r7, #16]
 8010442:	4630      	mov	r0, r6
 8010444:	b003      	add	sp, #12
 8010446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044a:	6812      	ldr	r2, [r2, #0]
 801044c:	3b04      	subs	r3, #4
 801044e:	2a00      	cmp	r2, #0
 8010450:	d1cc      	bne.n	80103ec <quorem+0x9c>
 8010452:	3c01      	subs	r4, #1
 8010454:	e7c7      	b.n	80103e6 <quorem+0x96>
 8010456:	6812      	ldr	r2, [r2, #0]
 8010458:	3b04      	subs	r3, #4
 801045a:	2a00      	cmp	r2, #0
 801045c:	d1f0      	bne.n	8010440 <quorem+0xf0>
 801045e:	3c01      	subs	r4, #1
 8010460:	e7eb      	b.n	801043a <quorem+0xea>
 8010462:	2000      	movs	r0, #0
 8010464:	e7ee      	b.n	8010444 <quorem+0xf4>
	...

08010468 <_dtoa_r>:
 8010468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801046c:	ed2d 8b04 	vpush	{d8-d9}
 8010470:	ec57 6b10 	vmov	r6, r7, d0
 8010474:	b093      	sub	sp, #76	; 0x4c
 8010476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801047c:	9106      	str	r1, [sp, #24]
 801047e:	ee10 aa10 	vmov	sl, s0
 8010482:	4604      	mov	r4, r0
 8010484:	9209      	str	r2, [sp, #36]	; 0x24
 8010486:	930c      	str	r3, [sp, #48]	; 0x30
 8010488:	46bb      	mov	fp, r7
 801048a:	b975      	cbnz	r5, 80104aa <_dtoa_r+0x42>
 801048c:	2010      	movs	r0, #16
 801048e:	f000 fffd 	bl	801148c <malloc>
 8010492:	4602      	mov	r2, r0
 8010494:	6260      	str	r0, [r4, #36]	; 0x24
 8010496:	b920      	cbnz	r0, 80104a2 <_dtoa_r+0x3a>
 8010498:	4ba7      	ldr	r3, [pc, #668]	; (8010738 <_dtoa_r+0x2d0>)
 801049a:	21ea      	movs	r1, #234	; 0xea
 801049c:	48a7      	ldr	r0, [pc, #668]	; (801073c <_dtoa_r+0x2d4>)
 801049e:	f001 fe7f 	bl	80121a0 <__assert_func>
 80104a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80104a6:	6005      	str	r5, [r0, #0]
 80104a8:	60c5      	str	r5, [r0, #12]
 80104aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104ac:	6819      	ldr	r1, [r3, #0]
 80104ae:	b151      	cbz	r1, 80104c6 <_dtoa_r+0x5e>
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	604a      	str	r2, [r1, #4]
 80104b4:	2301      	movs	r3, #1
 80104b6:	4093      	lsls	r3, r2
 80104b8:	608b      	str	r3, [r1, #8]
 80104ba:	4620      	mov	r0, r4
 80104bc:	f001 f82e 	bl	801151c <_Bfree>
 80104c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104c2:	2200      	movs	r2, #0
 80104c4:	601a      	str	r2, [r3, #0]
 80104c6:	1e3b      	subs	r3, r7, #0
 80104c8:	bfaa      	itet	ge
 80104ca:	2300      	movge	r3, #0
 80104cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80104d0:	f8c8 3000 	strge.w	r3, [r8]
 80104d4:	4b9a      	ldr	r3, [pc, #616]	; (8010740 <_dtoa_r+0x2d8>)
 80104d6:	bfbc      	itt	lt
 80104d8:	2201      	movlt	r2, #1
 80104da:	f8c8 2000 	strlt.w	r2, [r8]
 80104de:	ea33 030b 	bics.w	r3, r3, fp
 80104e2:	d11b      	bne.n	801051c <_dtoa_r+0xb4>
 80104e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104f0:	4333      	orrs	r3, r6
 80104f2:	f000 8592 	beq.w	801101a <_dtoa_r+0xbb2>
 80104f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104f8:	b963      	cbnz	r3, 8010514 <_dtoa_r+0xac>
 80104fa:	4b92      	ldr	r3, [pc, #584]	; (8010744 <_dtoa_r+0x2dc>)
 80104fc:	e022      	b.n	8010544 <_dtoa_r+0xdc>
 80104fe:	4b92      	ldr	r3, [pc, #584]	; (8010748 <_dtoa_r+0x2e0>)
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	3308      	adds	r3, #8
 8010504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010506:	6013      	str	r3, [r2, #0]
 8010508:	9801      	ldr	r0, [sp, #4]
 801050a:	b013      	add	sp, #76	; 0x4c
 801050c:	ecbd 8b04 	vpop	{d8-d9}
 8010510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010514:	4b8b      	ldr	r3, [pc, #556]	; (8010744 <_dtoa_r+0x2dc>)
 8010516:	9301      	str	r3, [sp, #4]
 8010518:	3303      	adds	r3, #3
 801051a:	e7f3      	b.n	8010504 <_dtoa_r+0x9c>
 801051c:	2200      	movs	r2, #0
 801051e:	2300      	movs	r3, #0
 8010520:	4650      	mov	r0, sl
 8010522:	4659      	mov	r1, fp
 8010524:	f7f0 faf8 	bl	8000b18 <__aeabi_dcmpeq>
 8010528:	ec4b ab19 	vmov	d9, sl, fp
 801052c:	4680      	mov	r8, r0
 801052e:	b158      	cbz	r0, 8010548 <_dtoa_r+0xe0>
 8010530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010532:	2301      	movs	r3, #1
 8010534:	6013      	str	r3, [r2, #0]
 8010536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010538:	2b00      	cmp	r3, #0
 801053a:	f000 856b 	beq.w	8011014 <_dtoa_r+0xbac>
 801053e:	4883      	ldr	r0, [pc, #524]	; (801074c <_dtoa_r+0x2e4>)
 8010540:	6018      	str	r0, [r3, #0]
 8010542:	1e43      	subs	r3, r0, #1
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	e7df      	b.n	8010508 <_dtoa_r+0xa0>
 8010548:	ec4b ab10 	vmov	d0, sl, fp
 801054c:	aa10      	add	r2, sp, #64	; 0x40
 801054e:	a911      	add	r1, sp, #68	; 0x44
 8010550:	4620      	mov	r0, r4
 8010552:	f001 facb 	bl	8011aec <__d2b>
 8010556:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801055a:	ee08 0a10 	vmov	s16, r0
 801055e:	2d00      	cmp	r5, #0
 8010560:	f000 8084 	beq.w	801066c <_dtoa_r+0x204>
 8010564:	ee19 3a90 	vmov	r3, s19
 8010568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801056c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010570:	4656      	mov	r6, sl
 8010572:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010576:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801057a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801057e:	4b74      	ldr	r3, [pc, #464]	; (8010750 <_dtoa_r+0x2e8>)
 8010580:	2200      	movs	r2, #0
 8010582:	4630      	mov	r0, r6
 8010584:	4639      	mov	r1, r7
 8010586:	f7ef fea7 	bl	80002d8 <__aeabi_dsub>
 801058a:	a365      	add	r3, pc, #404	; (adr r3, 8010720 <_dtoa_r+0x2b8>)
 801058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010590:	f7f0 f85a 	bl	8000648 <__aeabi_dmul>
 8010594:	a364      	add	r3, pc, #400	; (adr r3, 8010728 <_dtoa_r+0x2c0>)
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	f7ef fe9f 	bl	80002dc <__adddf3>
 801059e:	4606      	mov	r6, r0
 80105a0:	4628      	mov	r0, r5
 80105a2:	460f      	mov	r7, r1
 80105a4:	f7ef ffe6 	bl	8000574 <__aeabi_i2d>
 80105a8:	a361      	add	r3, pc, #388	; (adr r3, 8010730 <_dtoa_r+0x2c8>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	f7f0 f84b 	bl	8000648 <__aeabi_dmul>
 80105b2:	4602      	mov	r2, r0
 80105b4:	460b      	mov	r3, r1
 80105b6:	4630      	mov	r0, r6
 80105b8:	4639      	mov	r1, r7
 80105ba:	f7ef fe8f 	bl	80002dc <__adddf3>
 80105be:	4606      	mov	r6, r0
 80105c0:	460f      	mov	r7, r1
 80105c2:	f7f0 faf1 	bl	8000ba8 <__aeabi_d2iz>
 80105c6:	2200      	movs	r2, #0
 80105c8:	9000      	str	r0, [sp, #0]
 80105ca:	2300      	movs	r3, #0
 80105cc:	4630      	mov	r0, r6
 80105ce:	4639      	mov	r1, r7
 80105d0:	f7f0 faac 	bl	8000b2c <__aeabi_dcmplt>
 80105d4:	b150      	cbz	r0, 80105ec <_dtoa_r+0x184>
 80105d6:	9800      	ldr	r0, [sp, #0]
 80105d8:	f7ef ffcc 	bl	8000574 <__aeabi_i2d>
 80105dc:	4632      	mov	r2, r6
 80105de:	463b      	mov	r3, r7
 80105e0:	f7f0 fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 80105e4:	b910      	cbnz	r0, 80105ec <_dtoa_r+0x184>
 80105e6:	9b00      	ldr	r3, [sp, #0]
 80105e8:	3b01      	subs	r3, #1
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	9b00      	ldr	r3, [sp, #0]
 80105ee:	2b16      	cmp	r3, #22
 80105f0:	d85a      	bhi.n	80106a8 <_dtoa_r+0x240>
 80105f2:	9a00      	ldr	r2, [sp, #0]
 80105f4:	4b57      	ldr	r3, [pc, #348]	; (8010754 <_dtoa_r+0x2ec>)
 80105f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fe:	ec51 0b19 	vmov	r0, r1, d9
 8010602:	f7f0 fa93 	bl	8000b2c <__aeabi_dcmplt>
 8010606:	2800      	cmp	r0, #0
 8010608:	d050      	beq.n	80106ac <_dtoa_r+0x244>
 801060a:	9b00      	ldr	r3, [sp, #0]
 801060c:	3b01      	subs	r3, #1
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	2300      	movs	r3, #0
 8010612:	930b      	str	r3, [sp, #44]	; 0x2c
 8010614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010616:	1b5d      	subs	r5, r3, r5
 8010618:	1e6b      	subs	r3, r5, #1
 801061a:	9305      	str	r3, [sp, #20]
 801061c:	bf45      	ittet	mi
 801061e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010622:	9304      	strmi	r3, [sp, #16]
 8010624:	2300      	movpl	r3, #0
 8010626:	2300      	movmi	r3, #0
 8010628:	bf4c      	ite	mi
 801062a:	9305      	strmi	r3, [sp, #20]
 801062c:	9304      	strpl	r3, [sp, #16]
 801062e:	9b00      	ldr	r3, [sp, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	db3d      	blt.n	80106b0 <_dtoa_r+0x248>
 8010634:	9b05      	ldr	r3, [sp, #20]
 8010636:	9a00      	ldr	r2, [sp, #0]
 8010638:	920a      	str	r2, [sp, #40]	; 0x28
 801063a:	4413      	add	r3, r2
 801063c:	9305      	str	r3, [sp, #20]
 801063e:	2300      	movs	r3, #0
 8010640:	9307      	str	r3, [sp, #28]
 8010642:	9b06      	ldr	r3, [sp, #24]
 8010644:	2b09      	cmp	r3, #9
 8010646:	f200 8089 	bhi.w	801075c <_dtoa_r+0x2f4>
 801064a:	2b05      	cmp	r3, #5
 801064c:	bfc4      	itt	gt
 801064e:	3b04      	subgt	r3, #4
 8010650:	9306      	strgt	r3, [sp, #24]
 8010652:	9b06      	ldr	r3, [sp, #24]
 8010654:	f1a3 0302 	sub.w	r3, r3, #2
 8010658:	bfcc      	ite	gt
 801065a:	2500      	movgt	r5, #0
 801065c:	2501      	movle	r5, #1
 801065e:	2b03      	cmp	r3, #3
 8010660:	f200 8087 	bhi.w	8010772 <_dtoa_r+0x30a>
 8010664:	e8df f003 	tbb	[pc, r3]
 8010668:	59383a2d 	.word	0x59383a2d
 801066c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010670:	441d      	add	r5, r3
 8010672:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010676:	2b20      	cmp	r3, #32
 8010678:	bfc1      	itttt	gt
 801067a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801067e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010682:	fa0b f303 	lslgt.w	r3, fp, r3
 8010686:	fa26 f000 	lsrgt.w	r0, r6, r0
 801068a:	bfda      	itte	le
 801068c:	f1c3 0320 	rsble	r3, r3, #32
 8010690:	fa06 f003 	lslle.w	r0, r6, r3
 8010694:	4318      	orrgt	r0, r3
 8010696:	f7ef ff5d 	bl	8000554 <__aeabi_ui2d>
 801069a:	2301      	movs	r3, #1
 801069c:	4606      	mov	r6, r0
 801069e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80106a2:	3d01      	subs	r5, #1
 80106a4:	930e      	str	r3, [sp, #56]	; 0x38
 80106a6:	e76a      	b.n	801057e <_dtoa_r+0x116>
 80106a8:	2301      	movs	r3, #1
 80106aa:	e7b2      	b.n	8010612 <_dtoa_r+0x1aa>
 80106ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80106ae:	e7b1      	b.n	8010614 <_dtoa_r+0x1ac>
 80106b0:	9b04      	ldr	r3, [sp, #16]
 80106b2:	9a00      	ldr	r2, [sp, #0]
 80106b4:	1a9b      	subs	r3, r3, r2
 80106b6:	9304      	str	r3, [sp, #16]
 80106b8:	4253      	negs	r3, r2
 80106ba:	9307      	str	r3, [sp, #28]
 80106bc:	2300      	movs	r3, #0
 80106be:	930a      	str	r3, [sp, #40]	; 0x28
 80106c0:	e7bf      	b.n	8010642 <_dtoa_r+0x1da>
 80106c2:	2300      	movs	r3, #0
 80106c4:	9308      	str	r3, [sp, #32]
 80106c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	dc55      	bgt.n	8010778 <_dtoa_r+0x310>
 80106cc:	2301      	movs	r3, #1
 80106ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80106d2:	461a      	mov	r2, r3
 80106d4:	9209      	str	r2, [sp, #36]	; 0x24
 80106d6:	e00c      	b.n	80106f2 <_dtoa_r+0x28a>
 80106d8:	2301      	movs	r3, #1
 80106da:	e7f3      	b.n	80106c4 <_dtoa_r+0x25c>
 80106dc:	2300      	movs	r3, #0
 80106de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106e0:	9308      	str	r3, [sp, #32]
 80106e2:	9b00      	ldr	r3, [sp, #0]
 80106e4:	4413      	add	r3, r2
 80106e6:	9302      	str	r3, [sp, #8]
 80106e8:	3301      	adds	r3, #1
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	9303      	str	r3, [sp, #12]
 80106ee:	bfb8      	it	lt
 80106f0:	2301      	movlt	r3, #1
 80106f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80106f4:	2200      	movs	r2, #0
 80106f6:	6042      	str	r2, [r0, #4]
 80106f8:	2204      	movs	r2, #4
 80106fa:	f102 0614 	add.w	r6, r2, #20
 80106fe:	429e      	cmp	r6, r3
 8010700:	6841      	ldr	r1, [r0, #4]
 8010702:	d93d      	bls.n	8010780 <_dtoa_r+0x318>
 8010704:	4620      	mov	r0, r4
 8010706:	f000 fec9 	bl	801149c <_Balloc>
 801070a:	9001      	str	r0, [sp, #4]
 801070c:	2800      	cmp	r0, #0
 801070e:	d13b      	bne.n	8010788 <_dtoa_r+0x320>
 8010710:	4b11      	ldr	r3, [pc, #68]	; (8010758 <_dtoa_r+0x2f0>)
 8010712:	4602      	mov	r2, r0
 8010714:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010718:	e6c0      	b.n	801049c <_dtoa_r+0x34>
 801071a:	2301      	movs	r3, #1
 801071c:	e7df      	b.n	80106de <_dtoa_r+0x276>
 801071e:	bf00      	nop
 8010720:	636f4361 	.word	0x636f4361
 8010724:	3fd287a7 	.word	0x3fd287a7
 8010728:	8b60c8b3 	.word	0x8b60c8b3
 801072c:	3fc68a28 	.word	0x3fc68a28
 8010730:	509f79fb 	.word	0x509f79fb
 8010734:	3fd34413 	.word	0x3fd34413
 8010738:	08012a95 	.word	0x08012a95
 801073c:	08012aac 	.word	0x08012aac
 8010740:	7ff00000 	.word	0x7ff00000
 8010744:	08012a91 	.word	0x08012a91
 8010748:	08012a88 	.word	0x08012a88
 801074c:	08012a65 	.word	0x08012a65
 8010750:	3ff80000 	.word	0x3ff80000
 8010754:	08012c00 	.word	0x08012c00
 8010758:	08012b07 	.word	0x08012b07
 801075c:	2501      	movs	r5, #1
 801075e:	2300      	movs	r3, #0
 8010760:	9306      	str	r3, [sp, #24]
 8010762:	9508      	str	r5, [sp, #32]
 8010764:	f04f 33ff 	mov.w	r3, #4294967295
 8010768:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801076c:	2200      	movs	r2, #0
 801076e:	2312      	movs	r3, #18
 8010770:	e7b0      	b.n	80106d4 <_dtoa_r+0x26c>
 8010772:	2301      	movs	r3, #1
 8010774:	9308      	str	r3, [sp, #32]
 8010776:	e7f5      	b.n	8010764 <_dtoa_r+0x2fc>
 8010778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801077a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801077e:	e7b8      	b.n	80106f2 <_dtoa_r+0x28a>
 8010780:	3101      	adds	r1, #1
 8010782:	6041      	str	r1, [r0, #4]
 8010784:	0052      	lsls	r2, r2, #1
 8010786:	e7b8      	b.n	80106fa <_dtoa_r+0x292>
 8010788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801078a:	9a01      	ldr	r2, [sp, #4]
 801078c:	601a      	str	r2, [r3, #0]
 801078e:	9b03      	ldr	r3, [sp, #12]
 8010790:	2b0e      	cmp	r3, #14
 8010792:	f200 809d 	bhi.w	80108d0 <_dtoa_r+0x468>
 8010796:	2d00      	cmp	r5, #0
 8010798:	f000 809a 	beq.w	80108d0 <_dtoa_r+0x468>
 801079c:	9b00      	ldr	r3, [sp, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	dd32      	ble.n	8010808 <_dtoa_r+0x3a0>
 80107a2:	4ab7      	ldr	r2, [pc, #732]	; (8010a80 <_dtoa_r+0x618>)
 80107a4:	f003 030f 	and.w	r3, r3, #15
 80107a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80107ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107b0:	9b00      	ldr	r3, [sp, #0]
 80107b2:	05d8      	lsls	r0, r3, #23
 80107b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80107b8:	d516      	bpl.n	80107e8 <_dtoa_r+0x380>
 80107ba:	4bb2      	ldr	r3, [pc, #712]	; (8010a84 <_dtoa_r+0x61c>)
 80107bc:	ec51 0b19 	vmov	r0, r1, d9
 80107c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80107c4:	f7f0 f86a 	bl	800089c <__aeabi_ddiv>
 80107c8:	f007 070f 	and.w	r7, r7, #15
 80107cc:	4682      	mov	sl, r0
 80107ce:	468b      	mov	fp, r1
 80107d0:	2503      	movs	r5, #3
 80107d2:	4eac      	ldr	r6, [pc, #688]	; (8010a84 <_dtoa_r+0x61c>)
 80107d4:	b957      	cbnz	r7, 80107ec <_dtoa_r+0x384>
 80107d6:	4642      	mov	r2, r8
 80107d8:	464b      	mov	r3, r9
 80107da:	4650      	mov	r0, sl
 80107dc:	4659      	mov	r1, fp
 80107de:	f7f0 f85d 	bl	800089c <__aeabi_ddiv>
 80107e2:	4682      	mov	sl, r0
 80107e4:	468b      	mov	fp, r1
 80107e6:	e028      	b.n	801083a <_dtoa_r+0x3d2>
 80107e8:	2502      	movs	r5, #2
 80107ea:	e7f2      	b.n	80107d2 <_dtoa_r+0x36a>
 80107ec:	07f9      	lsls	r1, r7, #31
 80107ee:	d508      	bpl.n	8010802 <_dtoa_r+0x39a>
 80107f0:	4640      	mov	r0, r8
 80107f2:	4649      	mov	r1, r9
 80107f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80107f8:	f7ef ff26 	bl	8000648 <__aeabi_dmul>
 80107fc:	3501      	adds	r5, #1
 80107fe:	4680      	mov	r8, r0
 8010800:	4689      	mov	r9, r1
 8010802:	107f      	asrs	r7, r7, #1
 8010804:	3608      	adds	r6, #8
 8010806:	e7e5      	b.n	80107d4 <_dtoa_r+0x36c>
 8010808:	f000 809b 	beq.w	8010942 <_dtoa_r+0x4da>
 801080c:	9b00      	ldr	r3, [sp, #0]
 801080e:	4f9d      	ldr	r7, [pc, #628]	; (8010a84 <_dtoa_r+0x61c>)
 8010810:	425e      	negs	r6, r3
 8010812:	4b9b      	ldr	r3, [pc, #620]	; (8010a80 <_dtoa_r+0x618>)
 8010814:	f006 020f 	and.w	r2, r6, #15
 8010818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010820:	ec51 0b19 	vmov	r0, r1, d9
 8010824:	f7ef ff10 	bl	8000648 <__aeabi_dmul>
 8010828:	1136      	asrs	r6, r6, #4
 801082a:	4682      	mov	sl, r0
 801082c:	468b      	mov	fp, r1
 801082e:	2300      	movs	r3, #0
 8010830:	2502      	movs	r5, #2
 8010832:	2e00      	cmp	r6, #0
 8010834:	d17a      	bne.n	801092c <_dtoa_r+0x4c4>
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1d3      	bne.n	80107e2 <_dtoa_r+0x37a>
 801083a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801083c:	2b00      	cmp	r3, #0
 801083e:	f000 8082 	beq.w	8010946 <_dtoa_r+0x4de>
 8010842:	4b91      	ldr	r3, [pc, #580]	; (8010a88 <_dtoa_r+0x620>)
 8010844:	2200      	movs	r2, #0
 8010846:	4650      	mov	r0, sl
 8010848:	4659      	mov	r1, fp
 801084a:	f7f0 f96f 	bl	8000b2c <__aeabi_dcmplt>
 801084e:	2800      	cmp	r0, #0
 8010850:	d079      	beq.n	8010946 <_dtoa_r+0x4de>
 8010852:	9b03      	ldr	r3, [sp, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d076      	beq.n	8010946 <_dtoa_r+0x4de>
 8010858:	9b02      	ldr	r3, [sp, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	dd36      	ble.n	80108cc <_dtoa_r+0x464>
 801085e:	9b00      	ldr	r3, [sp, #0]
 8010860:	4650      	mov	r0, sl
 8010862:	4659      	mov	r1, fp
 8010864:	1e5f      	subs	r7, r3, #1
 8010866:	2200      	movs	r2, #0
 8010868:	4b88      	ldr	r3, [pc, #544]	; (8010a8c <_dtoa_r+0x624>)
 801086a:	f7ef feed 	bl	8000648 <__aeabi_dmul>
 801086e:	9e02      	ldr	r6, [sp, #8]
 8010870:	4682      	mov	sl, r0
 8010872:	468b      	mov	fp, r1
 8010874:	3501      	adds	r5, #1
 8010876:	4628      	mov	r0, r5
 8010878:	f7ef fe7c 	bl	8000574 <__aeabi_i2d>
 801087c:	4652      	mov	r2, sl
 801087e:	465b      	mov	r3, fp
 8010880:	f7ef fee2 	bl	8000648 <__aeabi_dmul>
 8010884:	4b82      	ldr	r3, [pc, #520]	; (8010a90 <_dtoa_r+0x628>)
 8010886:	2200      	movs	r2, #0
 8010888:	f7ef fd28 	bl	80002dc <__adddf3>
 801088c:	46d0      	mov	r8, sl
 801088e:	46d9      	mov	r9, fp
 8010890:	4682      	mov	sl, r0
 8010892:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010896:	2e00      	cmp	r6, #0
 8010898:	d158      	bne.n	801094c <_dtoa_r+0x4e4>
 801089a:	4b7e      	ldr	r3, [pc, #504]	; (8010a94 <_dtoa_r+0x62c>)
 801089c:	2200      	movs	r2, #0
 801089e:	4640      	mov	r0, r8
 80108a0:	4649      	mov	r1, r9
 80108a2:	f7ef fd19 	bl	80002d8 <__aeabi_dsub>
 80108a6:	4652      	mov	r2, sl
 80108a8:	465b      	mov	r3, fp
 80108aa:	4680      	mov	r8, r0
 80108ac:	4689      	mov	r9, r1
 80108ae:	f7f0 f95b 	bl	8000b68 <__aeabi_dcmpgt>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	f040 8295 	bne.w	8010de2 <_dtoa_r+0x97a>
 80108b8:	4652      	mov	r2, sl
 80108ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80108be:	4640      	mov	r0, r8
 80108c0:	4649      	mov	r1, r9
 80108c2:	f7f0 f933 	bl	8000b2c <__aeabi_dcmplt>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f040 8289 	bne.w	8010dde <_dtoa_r+0x976>
 80108cc:	ec5b ab19 	vmov	sl, fp, d9
 80108d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f2c0 8148 	blt.w	8010b68 <_dtoa_r+0x700>
 80108d8:	9a00      	ldr	r2, [sp, #0]
 80108da:	2a0e      	cmp	r2, #14
 80108dc:	f300 8144 	bgt.w	8010b68 <_dtoa_r+0x700>
 80108e0:	4b67      	ldr	r3, [pc, #412]	; (8010a80 <_dtoa_r+0x618>)
 80108e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f280 80d5 	bge.w	8010a9c <_dtoa_r+0x634>
 80108f2:	9b03      	ldr	r3, [sp, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f300 80d1 	bgt.w	8010a9c <_dtoa_r+0x634>
 80108fa:	f040 826f 	bne.w	8010ddc <_dtoa_r+0x974>
 80108fe:	4b65      	ldr	r3, [pc, #404]	; (8010a94 <_dtoa_r+0x62c>)
 8010900:	2200      	movs	r2, #0
 8010902:	4640      	mov	r0, r8
 8010904:	4649      	mov	r1, r9
 8010906:	f7ef fe9f 	bl	8000648 <__aeabi_dmul>
 801090a:	4652      	mov	r2, sl
 801090c:	465b      	mov	r3, fp
 801090e:	f7f0 f921 	bl	8000b54 <__aeabi_dcmpge>
 8010912:	9e03      	ldr	r6, [sp, #12]
 8010914:	4637      	mov	r7, r6
 8010916:	2800      	cmp	r0, #0
 8010918:	f040 8245 	bne.w	8010da6 <_dtoa_r+0x93e>
 801091c:	9d01      	ldr	r5, [sp, #4]
 801091e:	2331      	movs	r3, #49	; 0x31
 8010920:	f805 3b01 	strb.w	r3, [r5], #1
 8010924:	9b00      	ldr	r3, [sp, #0]
 8010926:	3301      	adds	r3, #1
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	e240      	b.n	8010dae <_dtoa_r+0x946>
 801092c:	07f2      	lsls	r2, r6, #31
 801092e:	d505      	bpl.n	801093c <_dtoa_r+0x4d4>
 8010930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010934:	f7ef fe88 	bl	8000648 <__aeabi_dmul>
 8010938:	3501      	adds	r5, #1
 801093a:	2301      	movs	r3, #1
 801093c:	1076      	asrs	r6, r6, #1
 801093e:	3708      	adds	r7, #8
 8010940:	e777      	b.n	8010832 <_dtoa_r+0x3ca>
 8010942:	2502      	movs	r5, #2
 8010944:	e779      	b.n	801083a <_dtoa_r+0x3d2>
 8010946:	9f00      	ldr	r7, [sp, #0]
 8010948:	9e03      	ldr	r6, [sp, #12]
 801094a:	e794      	b.n	8010876 <_dtoa_r+0x40e>
 801094c:	9901      	ldr	r1, [sp, #4]
 801094e:	4b4c      	ldr	r3, [pc, #304]	; (8010a80 <_dtoa_r+0x618>)
 8010950:	4431      	add	r1, r6
 8010952:	910d      	str	r1, [sp, #52]	; 0x34
 8010954:	9908      	ldr	r1, [sp, #32]
 8010956:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801095a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801095e:	2900      	cmp	r1, #0
 8010960:	d043      	beq.n	80109ea <_dtoa_r+0x582>
 8010962:	494d      	ldr	r1, [pc, #308]	; (8010a98 <_dtoa_r+0x630>)
 8010964:	2000      	movs	r0, #0
 8010966:	f7ef ff99 	bl	800089c <__aeabi_ddiv>
 801096a:	4652      	mov	r2, sl
 801096c:	465b      	mov	r3, fp
 801096e:	f7ef fcb3 	bl	80002d8 <__aeabi_dsub>
 8010972:	9d01      	ldr	r5, [sp, #4]
 8010974:	4682      	mov	sl, r0
 8010976:	468b      	mov	fp, r1
 8010978:	4649      	mov	r1, r9
 801097a:	4640      	mov	r0, r8
 801097c:	f7f0 f914 	bl	8000ba8 <__aeabi_d2iz>
 8010980:	4606      	mov	r6, r0
 8010982:	f7ef fdf7 	bl	8000574 <__aeabi_i2d>
 8010986:	4602      	mov	r2, r0
 8010988:	460b      	mov	r3, r1
 801098a:	4640      	mov	r0, r8
 801098c:	4649      	mov	r1, r9
 801098e:	f7ef fca3 	bl	80002d8 <__aeabi_dsub>
 8010992:	3630      	adds	r6, #48	; 0x30
 8010994:	f805 6b01 	strb.w	r6, [r5], #1
 8010998:	4652      	mov	r2, sl
 801099a:	465b      	mov	r3, fp
 801099c:	4680      	mov	r8, r0
 801099e:	4689      	mov	r9, r1
 80109a0:	f7f0 f8c4 	bl	8000b2c <__aeabi_dcmplt>
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d163      	bne.n	8010a70 <_dtoa_r+0x608>
 80109a8:	4642      	mov	r2, r8
 80109aa:	464b      	mov	r3, r9
 80109ac:	4936      	ldr	r1, [pc, #216]	; (8010a88 <_dtoa_r+0x620>)
 80109ae:	2000      	movs	r0, #0
 80109b0:	f7ef fc92 	bl	80002d8 <__aeabi_dsub>
 80109b4:	4652      	mov	r2, sl
 80109b6:	465b      	mov	r3, fp
 80109b8:	f7f0 f8b8 	bl	8000b2c <__aeabi_dcmplt>
 80109bc:	2800      	cmp	r0, #0
 80109be:	f040 80b5 	bne.w	8010b2c <_dtoa_r+0x6c4>
 80109c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109c4:	429d      	cmp	r5, r3
 80109c6:	d081      	beq.n	80108cc <_dtoa_r+0x464>
 80109c8:	4b30      	ldr	r3, [pc, #192]	; (8010a8c <_dtoa_r+0x624>)
 80109ca:	2200      	movs	r2, #0
 80109cc:	4650      	mov	r0, sl
 80109ce:	4659      	mov	r1, fp
 80109d0:	f7ef fe3a 	bl	8000648 <__aeabi_dmul>
 80109d4:	4b2d      	ldr	r3, [pc, #180]	; (8010a8c <_dtoa_r+0x624>)
 80109d6:	4682      	mov	sl, r0
 80109d8:	468b      	mov	fp, r1
 80109da:	4640      	mov	r0, r8
 80109dc:	4649      	mov	r1, r9
 80109de:	2200      	movs	r2, #0
 80109e0:	f7ef fe32 	bl	8000648 <__aeabi_dmul>
 80109e4:	4680      	mov	r8, r0
 80109e6:	4689      	mov	r9, r1
 80109e8:	e7c6      	b.n	8010978 <_dtoa_r+0x510>
 80109ea:	4650      	mov	r0, sl
 80109ec:	4659      	mov	r1, fp
 80109ee:	f7ef fe2b 	bl	8000648 <__aeabi_dmul>
 80109f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109f4:	9d01      	ldr	r5, [sp, #4]
 80109f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80109f8:	4682      	mov	sl, r0
 80109fa:	468b      	mov	fp, r1
 80109fc:	4649      	mov	r1, r9
 80109fe:	4640      	mov	r0, r8
 8010a00:	f7f0 f8d2 	bl	8000ba8 <__aeabi_d2iz>
 8010a04:	4606      	mov	r6, r0
 8010a06:	f7ef fdb5 	bl	8000574 <__aeabi_i2d>
 8010a0a:	3630      	adds	r6, #48	; 0x30
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	460b      	mov	r3, r1
 8010a10:	4640      	mov	r0, r8
 8010a12:	4649      	mov	r1, r9
 8010a14:	f7ef fc60 	bl	80002d8 <__aeabi_dsub>
 8010a18:	f805 6b01 	strb.w	r6, [r5], #1
 8010a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a1e:	429d      	cmp	r5, r3
 8010a20:	4680      	mov	r8, r0
 8010a22:	4689      	mov	r9, r1
 8010a24:	f04f 0200 	mov.w	r2, #0
 8010a28:	d124      	bne.n	8010a74 <_dtoa_r+0x60c>
 8010a2a:	4b1b      	ldr	r3, [pc, #108]	; (8010a98 <_dtoa_r+0x630>)
 8010a2c:	4650      	mov	r0, sl
 8010a2e:	4659      	mov	r1, fp
 8010a30:	f7ef fc54 	bl	80002dc <__adddf3>
 8010a34:	4602      	mov	r2, r0
 8010a36:	460b      	mov	r3, r1
 8010a38:	4640      	mov	r0, r8
 8010a3a:	4649      	mov	r1, r9
 8010a3c:	f7f0 f894 	bl	8000b68 <__aeabi_dcmpgt>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d173      	bne.n	8010b2c <_dtoa_r+0x6c4>
 8010a44:	4652      	mov	r2, sl
 8010a46:	465b      	mov	r3, fp
 8010a48:	4913      	ldr	r1, [pc, #76]	; (8010a98 <_dtoa_r+0x630>)
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7ef fc44 	bl	80002d8 <__aeabi_dsub>
 8010a50:	4602      	mov	r2, r0
 8010a52:	460b      	mov	r3, r1
 8010a54:	4640      	mov	r0, r8
 8010a56:	4649      	mov	r1, r9
 8010a58:	f7f0 f868 	bl	8000b2c <__aeabi_dcmplt>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	f43f af35 	beq.w	80108cc <_dtoa_r+0x464>
 8010a62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010a64:	1e6b      	subs	r3, r5, #1
 8010a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010a6c:	2b30      	cmp	r3, #48	; 0x30
 8010a6e:	d0f8      	beq.n	8010a62 <_dtoa_r+0x5fa>
 8010a70:	9700      	str	r7, [sp, #0]
 8010a72:	e049      	b.n	8010b08 <_dtoa_r+0x6a0>
 8010a74:	4b05      	ldr	r3, [pc, #20]	; (8010a8c <_dtoa_r+0x624>)
 8010a76:	f7ef fde7 	bl	8000648 <__aeabi_dmul>
 8010a7a:	4680      	mov	r8, r0
 8010a7c:	4689      	mov	r9, r1
 8010a7e:	e7bd      	b.n	80109fc <_dtoa_r+0x594>
 8010a80:	08012c00 	.word	0x08012c00
 8010a84:	08012bd8 	.word	0x08012bd8
 8010a88:	3ff00000 	.word	0x3ff00000
 8010a8c:	40240000 	.word	0x40240000
 8010a90:	401c0000 	.word	0x401c0000
 8010a94:	40140000 	.word	0x40140000
 8010a98:	3fe00000 	.word	0x3fe00000
 8010a9c:	9d01      	ldr	r5, [sp, #4]
 8010a9e:	4656      	mov	r6, sl
 8010aa0:	465f      	mov	r7, fp
 8010aa2:	4642      	mov	r2, r8
 8010aa4:	464b      	mov	r3, r9
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	4639      	mov	r1, r7
 8010aaa:	f7ef fef7 	bl	800089c <__aeabi_ddiv>
 8010aae:	f7f0 f87b 	bl	8000ba8 <__aeabi_d2iz>
 8010ab2:	4682      	mov	sl, r0
 8010ab4:	f7ef fd5e 	bl	8000574 <__aeabi_i2d>
 8010ab8:	4642      	mov	r2, r8
 8010aba:	464b      	mov	r3, r9
 8010abc:	f7ef fdc4 	bl	8000648 <__aeabi_dmul>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	4639      	mov	r1, r7
 8010ac8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010acc:	f7ef fc04 	bl	80002d8 <__aeabi_dsub>
 8010ad0:	f805 6b01 	strb.w	r6, [r5], #1
 8010ad4:	9e01      	ldr	r6, [sp, #4]
 8010ad6:	9f03      	ldr	r7, [sp, #12]
 8010ad8:	1bae      	subs	r6, r5, r6
 8010ada:	42b7      	cmp	r7, r6
 8010adc:	4602      	mov	r2, r0
 8010ade:	460b      	mov	r3, r1
 8010ae0:	d135      	bne.n	8010b4e <_dtoa_r+0x6e6>
 8010ae2:	f7ef fbfb 	bl	80002dc <__adddf3>
 8010ae6:	4642      	mov	r2, r8
 8010ae8:	464b      	mov	r3, r9
 8010aea:	4606      	mov	r6, r0
 8010aec:	460f      	mov	r7, r1
 8010aee:	f7f0 f83b 	bl	8000b68 <__aeabi_dcmpgt>
 8010af2:	b9d0      	cbnz	r0, 8010b2a <_dtoa_r+0x6c2>
 8010af4:	4642      	mov	r2, r8
 8010af6:	464b      	mov	r3, r9
 8010af8:	4630      	mov	r0, r6
 8010afa:	4639      	mov	r1, r7
 8010afc:	f7f0 f80c 	bl	8000b18 <__aeabi_dcmpeq>
 8010b00:	b110      	cbz	r0, 8010b08 <_dtoa_r+0x6a0>
 8010b02:	f01a 0f01 	tst.w	sl, #1
 8010b06:	d110      	bne.n	8010b2a <_dtoa_r+0x6c2>
 8010b08:	4620      	mov	r0, r4
 8010b0a:	ee18 1a10 	vmov	r1, s16
 8010b0e:	f000 fd05 	bl	801151c <_Bfree>
 8010b12:	2300      	movs	r3, #0
 8010b14:	9800      	ldr	r0, [sp, #0]
 8010b16:	702b      	strb	r3, [r5, #0]
 8010b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b1a:	3001      	adds	r0, #1
 8010b1c:	6018      	str	r0, [r3, #0]
 8010b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f43f acf1 	beq.w	8010508 <_dtoa_r+0xa0>
 8010b26:	601d      	str	r5, [r3, #0]
 8010b28:	e4ee      	b.n	8010508 <_dtoa_r+0xa0>
 8010b2a:	9f00      	ldr	r7, [sp, #0]
 8010b2c:	462b      	mov	r3, r5
 8010b2e:	461d      	mov	r5, r3
 8010b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b34:	2a39      	cmp	r2, #57	; 0x39
 8010b36:	d106      	bne.n	8010b46 <_dtoa_r+0x6de>
 8010b38:	9a01      	ldr	r2, [sp, #4]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d1f7      	bne.n	8010b2e <_dtoa_r+0x6c6>
 8010b3e:	9901      	ldr	r1, [sp, #4]
 8010b40:	2230      	movs	r2, #48	; 0x30
 8010b42:	3701      	adds	r7, #1
 8010b44:	700a      	strb	r2, [r1, #0]
 8010b46:	781a      	ldrb	r2, [r3, #0]
 8010b48:	3201      	adds	r2, #1
 8010b4a:	701a      	strb	r2, [r3, #0]
 8010b4c:	e790      	b.n	8010a70 <_dtoa_r+0x608>
 8010b4e:	4ba6      	ldr	r3, [pc, #664]	; (8010de8 <_dtoa_r+0x980>)
 8010b50:	2200      	movs	r2, #0
 8010b52:	f7ef fd79 	bl	8000648 <__aeabi_dmul>
 8010b56:	2200      	movs	r2, #0
 8010b58:	2300      	movs	r3, #0
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	460f      	mov	r7, r1
 8010b5e:	f7ef ffdb 	bl	8000b18 <__aeabi_dcmpeq>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d09d      	beq.n	8010aa2 <_dtoa_r+0x63a>
 8010b66:	e7cf      	b.n	8010b08 <_dtoa_r+0x6a0>
 8010b68:	9a08      	ldr	r2, [sp, #32]
 8010b6a:	2a00      	cmp	r2, #0
 8010b6c:	f000 80d7 	beq.w	8010d1e <_dtoa_r+0x8b6>
 8010b70:	9a06      	ldr	r2, [sp, #24]
 8010b72:	2a01      	cmp	r2, #1
 8010b74:	f300 80ba 	bgt.w	8010cec <_dtoa_r+0x884>
 8010b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b7a:	2a00      	cmp	r2, #0
 8010b7c:	f000 80b2 	beq.w	8010ce4 <_dtoa_r+0x87c>
 8010b80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010b84:	9e07      	ldr	r6, [sp, #28]
 8010b86:	9d04      	ldr	r5, [sp, #16]
 8010b88:	9a04      	ldr	r2, [sp, #16]
 8010b8a:	441a      	add	r2, r3
 8010b8c:	9204      	str	r2, [sp, #16]
 8010b8e:	9a05      	ldr	r2, [sp, #20]
 8010b90:	2101      	movs	r1, #1
 8010b92:	441a      	add	r2, r3
 8010b94:	4620      	mov	r0, r4
 8010b96:	9205      	str	r2, [sp, #20]
 8010b98:	f000 fd78 	bl	801168c <__i2b>
 8010b9c:	4607      	mov	r7, r0
 8010b9e:	2d00      	cmp	r5, #0
 8010ba0:	dd0c      	ble.n	8010bbc <_dtoa_r+0x754>
 8010ba2:	9b05      	ldr	r3, [sp, #20]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	dd09      	ble.n	8010bbc <_dtoa_r+0x754>
 8010ba8:	42ab      	cmp	r3, r5
 8010baa:	9a04      	ldr	r2, [sp, #16]
 8010bac:	bfa8      	it	ge
 8010bae:	462b      	movge	r3, r5
 8010bb0:	1ad2      	subs	r2, r2, r3
 8010bb2:	9204      	str	r2, [sp, #16]
 8010bb4:	9a05      	ldr	r2, [sp, #20]
 8010bb6:	1aed      	subs	r5, r5, r3
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	9305      	str	r3, [sp, #20]
 8010bbc:	9b07      	ldr	r3, [sp, #28]
 8010bbe:	b31b      	cbz	r3, 8010c08 <_dtoa_r+0x7a0>
 8010bc0:	9b08      	ldr	r3, [sp, #32]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 80af 	beq.w	8010d26 <_dtoa_r+0x8be>
 8010bc8:	2e00      	cmp	r6, #0
 8010bca:	dd13      	ble.n	8010bf4 <_dtoa_r+0x78c>
 8010bcc:	4639      	mov	r1, r7
 8010bce:	4632      	mov	r2, r6
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f000 fe1b 	bl	801180c <__pow5mult>
 8010bd6:	ee18 2a10 	vmov	r2, s16
 8010bda:	4601      	mov	r1, r0
 8010bdc:	4607      	mov	r7, r0
 8010bde:	4620      	mov	r0, r4
 8010be0:	f000 fd6a 	bl	80116b8 <__multiply>
 8010be4:	ee18 1a10 	vmov	r1, s16
 8010be8:	4680      	mov	r8, r0
 8010bea:	4620      	mov	r0, r4
 8010bec:	f000 fc96 	bl	801151c <_Bfree>
 8010bf0:	ee08 8a10 	vmov	s16, r8
 8010bf4:	9b07      	ldr	r3, [sp, #28]
 8010bf6:	1b9a      	subs	r2, r3, r6
 8010bf8:	d006      	beq.n	8010c08 <_dtoa_r+0x7a0>
 8010bfa:	ee18 1a10 	vmov	r1, s16
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f000 fe04 	bl	801180c <__pow5mult>
 8010c04:	ee08 0a10 	vmov	s16, r0
 8010c08:	2101      	movs	r1, #1
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f000 fd3e 	bl	801168c <__i2b>
 8010c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	4606      	mov	r6, r0
 8010c16:	f340 8088 	ble.w	8010d2a <_dtoa_r+0x8c2>
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	4601      	mov	r1, r0
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f000 fdf4 	bl	801180c <__pow5mult>
 8010c24:	9b06      	ldr	r3, [sp, #24]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	4606      	mov	r6, r0
 8010c2a:	f340 8081 	ble.w	8010d30 <_dtoa_r+0x8c8>
 8010c2e:	f04f 0800 	mov.w	r8, #0
 8010c32:	6933      	ldr	r3, [r6, #16]
 8010c34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010c38:	6918      	ldr	r0, [r3, #16]
 8010c3a:	f000 fcd7 	bl	80115ec <__hi0bits>
 8010c3e:	f1c0 0020 	rsb	r0, r0, #32
 8010c42:	9b05      	ldr	r3, [sp, #20]
 8010c44:	4418      	add	r0, r3
 8010c46:	f010 001f 	ands.w	r0, r0, #31
 8010c4a:	f000 8092 	beq.w	8010d72 <_dtoa_r+0x90a>
 8010c4e:	f1c0 0320 	rsb	r3, r0, #32
 8010c52:	2b04      	cmp	r3, #4
 8010c54:	f340 808a 	ble.w	8010d6c <_dtoa_r+0x904>
 8010c58:	f1c0 001c 	rsb	r0, r0, #28
 8010c5c:	9b04      	ldr	r3, [sp, #16]
 8010c5e:	4403      	add	r3, r0
 8010c60:	9304      	str	r3, [sp, #16]
 8010c62:	9b05      	ldr	r3, [sp, #20]
 8010c64:	4403      	add	r3, r0
 8010c66:	4405      	add	r5, r0
 8010c68:	9305      	str	r3, [sp, #20]
 8010c6a:	9b04      	ldr	r3, [sp, #16]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	dd07      	ble.n	8010c80 <_dtoa_r+0x818>
 8010c70:	ee18 1a10 	vmov	r1, s16
 8010c74:	461a      	mov	r2, r3
 8010c76:	4620      	mov	r0, r4
 8010c78:	f000 fe22 	bl	80118c0 <__lshift>
 8010c7c:	ee08 0a10 	vmov	s16, r0
 8010c80:	9b05      	ldr	r3, [sp, #20]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	dd05      	ble.n	8010c92 <_dtoa_r+0x82a>
 8010c86:	4631      	mov	r1, r6
 8010c88:	461a      	mov	r2, r3
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 fe18 	bl	80118c0 <__lshift>
 8010c90:	4606      	mov	r6, r0
 8010c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d06e      	beq.n	8010d76 <_dtoa_r+0x90e>
 8010c98:	ee18 0a10 	vmov	r0, s16
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	f000 fe7f 	bl	80119a0 <__mcmp>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	da67      	bge.n	8010d76 <_dtoa_r+0x90e>
 8010ca6:	9b00      	ldr	r3, [sp, #0]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	ee18 1a10 	vmov	r1, s16
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	220a      	movs	r2, #10
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f000 fc53 	bl	8011560 <__multadd>
 8010cba:	9b08      	ldr	r3, [sp, #32]
 8010cbc:	ee08 0a10 	vmov	s16, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f000 81b1 	beq.w	8011028 <_dtoa_r+0xbc0>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	4639      	mov	r1, r7
 8010cca:	220a      	movs	r2, #10
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f000 fc47 	bl	8011560 <__multadd>
 8010cd2:	9b02      	ldr	r3, [sp, #8]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	4607      	mov	r7, r0
 8010cd8:	f300 808e 	bgt.w	8010df8 <_dtoa_r+0x990>
 8010cdc:	9b06      	ldr	r3, [sp, #24]
 8010cde:	2b02      	cmp	r3, #2
 8010ce0:	dc51      	bgt.n	8010d86 <_dtoa_r+0x91e>
 8010ce2:	e089      	b.n	8010df8 <_dtoa_r+0x990>
 8010ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010cea:	e74b      	b.n	8010b84 <_dtoa_r+0x71c>
 8010cec:	9b03      	ldr	r3, [sp, #12]
 8010cee:	1e5e      	subs	r6, r3, #1
 8010cf0:	9b07      	ldr	r3, [sp, #28]
 8010cf2:	42b3      	cmp	r3, r6
 8010cf4:	bfbf      	itttt	lt
 8010cf6:	9b07      	ldrlt	r3, [sp, #28]
 8010cf8:	9607      	strlt	r6, [sp, #28]
 8010cfa:	1af2      	sublt	r2, r6, r3
 8010cfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010cfe:	bfb6      	itet	lt
 8010d00:	189b      	addlt	r3, r3, r2
 8010d02:	1b9e      	subge	r6, r3, r6
 8010d04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010d06:	9b03      	ldr	r3, [sp, #12]
 8010d08:	bfb8      	it	lt
 8010d0a:	2600      	movlt	r6, #0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	bfb7      	itett	lt
 8010d10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010d14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010d18:	1a9d      	sublt	r5, r3, r2
 8010d1a:	2300      	movlt	r3, #0
 8010d1c:	e734      	b.n	8010b88 <_dtoa_r+0x720>
 8010d1e:	9e07      	ldr	r6, [sp, #28]
 8010d20:	9d04      	ldr	r5, [sp, #16]
 8010d22:	9f08      	ldr	r7, [sp, #32]
 8010d24:	e73b      	b.n	8010b9e <_dtoa_r+0x736>
 8010d26:	9a07      	ldr	r2, [sp, #28]
 8010d28:	e767      	b.n	8010bfa <_dtoa_r+0x792>
 8010d2a:	9b06      	ldr	r3, [sp, #24]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	dc18      	bgt.n	8010d62 <_dtoa_r+0x8fa>
 8010d30:	f1ba 0f00 	cmp.w	sl, #0
 8010d34:	d115      	bne.n	8010d62 <_dtoa_r+0x8fa>
 8010d36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d3a:	b993      	cbnz	r3, 8010d62 <_dtoa_r+0x8fa>
 8010d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d40:	0d1b      	lsrs	r3, r3, #20
 8010d42:	051b      	lsls	r3, r3, #20
 8010d44:	b183      	cbz	r3, 8010d68 <_dtoa_r+0x900>
 8010d46:	9b04      	ldr	r3, [sp, #16]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	9304      	str	r3, [sp, #16]
 8010d4c:	9b05      	ldr	r3, [sp, #20]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	9305      	str	r3, [sp, #20]
 8010d52:	f04f 0801 	mov.w	r8, #1
 8010d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f47f af6a 	bne.w	8010c32 <_dtoa_r+0x7ca>
 8010d5e:	2001      	movs	r0, #1
 8010d60:	e76f      	b.n	8010c42 <_dtoa_r+0x7da>
 8010d62:	f04f 0800 	mov.w	r8, #0
 8010d66:	e7f6      	b.n	8010d56 <_dtoa_r+0x8ee>
 8010d68:	4698      	mov	r8, r3
 8010d6a:	e7f4      	b.n	8010d56 <_dtoa_r+0x8ee>
 8010d6c:	f43f af7d 	beq.w	8010c6a <_dtoa_r+0x802>
 8010d70:	4618      	mov	r0, r3
 8010d72:	301c      	adds	r0, #28
 8010d74:	e772      	b.n	8010c5c <_dtoa_r+0x7f4>
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	dc37      	bgt.n	8010dec <_dtoa_r+0x984>
 8010d7c:	9b06      	ldr	r3, [sp, #24]
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	dd34      	ble.n	8010dec <_dtoa_r+0x984>
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	9302      	str	r3, [sp, #8]
 8010d86:	9b02      	ldr	r3, [sp, #8]
 8010d88:	b96b      	cbnz	r3, 8010da6 <_dtoa_r+0x93e>
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	2205      	movs	r2, #5
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 fbe6 	bl	8011560 <__multadd>
 8010d94:	4601      	mov	r1, r0
 8010d96:	4606      	mov	r6, r0
 8010d98:	ee18 0a10 	vmov	r0, s16
 8010d9c:	f000 fe00 	bl	80119a0 <__mcmp>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	f73f adbb 	bgt.w	801091c <_dtoa_r+0x4b4>
 8010da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da8:	9d01      	ldr	r5, [sp, #4]
 8010daa:	43db      	mvns	r3, r3
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	f04f 0800 	mov.w	r8, #0
 8010db2:	4631      	mov	r1, r6
 8010db4:	4620      	mov	r0, r4
 8010db6:	f000 fbb1 	bl	801151c <_Bfree>
 8010dba:	2f00      	cmp	r7, #0
 8010dbc:	f43f aea4 	beq.w	8010b08 <_dtoa_r+0x6a0>
 8010dc0:	f1b8 0f00 	cmp.w	r8, #0
 8010dc4:	d005      	beq.n	8010dd2 <_dtoa_r+0x96a>
 8010dc6:	45b8      	cmp	r8, r7
 8010dc8:	d003      	beq.n	8010dd2 <_dtoa_r+0x96a>
 8010dca:	4641      	mov	r1, r8
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f000 fba5 	bl	801151c <_Bfree>
 8010dd2:	4639      	mov	r1, r7
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f000 fba1 	bl	801151c <_Bfree>
 8010dda:	e695      	b.n	8010b08 <_dtoa_r+0x6a0>
 8010ddc:	2600      	movs	r6, #0
 8010dde:	4637      	mov	r7, r6
 8010de0:	e7e1      	b.n	8010da6 <_dtoa_r+0x93e>
 8010de2:	9700      	str	r7, [sp, #0]
 8010de4:	4637      	mov	r7, r6
 8010de6:	e599      	b.n	801091c <_dtoa_r+0x4b4>
 8010de8:	40240000 	.word	0x40240000
 8010dec:	9b08      	ldr	r3, [sp, #32]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f000 80ca 	beq.w	8010f88 <_dtoa_r+0xb20>
 8010df4:	9b03      	ldr	r3, [sp, #12]
 8010df6:	9302      	str	r3, [sp, #8]
 8010df8:	2d00      	cmp	r5, #0
 8010dfa:	dd05      	ble.n	8010e08 <_dtoa_r+0x9a0>
 8010dfc:	4639      	mov	r1, r7
 8010dfe:	462a      	mov	r2, r5
 8010e00:	4620      	mov	r0, r4
 8010e02:	f000 fd5d 	bl	80118c0 <__lshift>
 8010e06:	4607      	mov	r7, r0
 8010e08:	f1b8 0f00 	cmp.w	r8, #0
 8010e0c:	d05b      	beq.n	8010ec6 <_dtoa_r+0xa5e>
 8010e0e:	6879      	ldr	r1, [r7, #4]
 8010e10:	4620      	mov	r0, r4
 8010e12:	f000 fb43 	bl	801149c <_Balloc>
 8010e16:	4605      	mov	r5, r0
 8010e18:	b928      	cbnz	r0, 8010e26 <_dtoa_r+0x9be>
 8010e1a:	4b87      	ldr	r3, [pc, #540]	; (8011038 <_dtoa_r+0xbd0>)
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010e22:	f7ff bb3b 	b.w	801049c <_dtoa_r+0x34>
 8010e26:	693a      	ldr	r2, [r7, #16]
 8010e28:	3202      	adds	r2, #2
 8010e2a:	0092      	lsls	r2, r2, #2
 8010e2c:	f107 010c 	add.w	r1, r7, #12
 8010e30:	300c      	adds	r0, #12
 8010e32:	f7fe fbdb 	bl	800f5ec <memcpy>
 8010e36:	2201      	movs	r2, #1
 8010e38:	4629      	mov	r1, r5
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f000 fd40 	bl	80118c0 <__lshift>
 8010e40:	9b01      	ldr	r3, [sp, #4]
 8010e42:	f103 0901 	add.w	r9, r3, #1
 8010e46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010e4a:	4413      	add	r3, r2
 8010e4c:	9305      	str	r3, [sp, #20]
 8010e4e:	f00a 0301 	and.w	r3, sl, #1
 8010e52:	46b8      	mov	r8, r7
 8010e54:	9304      	str	r3, [sp, #16]
 8010e56:	4607      	mov	r7, r0
 8010e58:	4631      	mov	r1, r6
 8010e5a:	ee18 0a10 	vmov	r0, s16
 8010e5e:	f7ff fa77 	bl	8010350 <quorem>
 8010e62:	4641      	mov	r1, r8
 8010e64:	9002      	str	r0, [sp, #8]
 8010e66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010e6a:	ee18 0a10 	vmov	r0, s16
 8010e6e:	f000 fd97 	bl	80119a0 <__mcmp>
 8010e72:	463a      	mov	r2, r7
 8010e74:	9003      	str	r0, [sp, #12]
 8010e76:	4631      	mov	r1, r6
 8010e78:	4620      	mov	r0, r4
 8010e7a:	f000 fdad 	bl	80119d8 <__mdiff>
 8010e7e:	68c2      	ldr	r2, [r0, #12]
 8010e80:	f109 3bff 	add.w	fp, r9, #4294967295
 8010e84:	4605      	mov	r5, r0
 8010e86:	bb02      	cbnz	r2, 8010eca <_dtoa_r+0xa62>
 8010e88:	4601      	mov	r1, r0
 8010e8a:	ee18 0a10 	vmov	r0, s16
 8010e8e:	f000 fd87 	bl	80119a0 <__mcmp>
 8010e92:	4602      	mov	r2, r0
 8010e94:	4629      	mov	r1, r5
 8010e96:	4620      	mov	r0, r4
 8010e98:	9207      	str	r2, [sp, #28]
 8010e9a:	f000 fb3f 	bl	801151c <_Bfree>
 8010e9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010ea2:	ea43 0102 	orr.w	r1, r3, r2
 8010ea6:	9b04      	ldr	r3, [sp, #16]
 8010ea8:	430b      	orrs	r3, r1
 8010eaa:	464d      	mov	r5, r9
 8010eac:	d10f      	bne.n	8010ece <_dtoa_r+0xa66>
 8010eae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010eb2:	d02a      	beq.n	8010f0a <_dtoa_r+0xaa2>
 8010eb4:	9b03      	ldr	r3, [sp, #12]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	dd02      	ble.n	8010ec0 <_dtoa_r+0xa58>
 8010eba:	9b02      	ldr	r3, [sp, #8]
 8010ebc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010ec0:	f88b a000 	strb.w	sl, [fp]
 8010ec4:	e775      	b.n	8010db2 <_dtoa_r+0x94a>
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	e7ba      	b.n	8010e40 <_dtoa_r+0x9d8>
 8010eca:	2201      	movs	r2, #1
 8010ecc:	e7e2      	b.n	8010e94 <_dtoa_r+0xa2c>
 8010ece:	9b03      	ldr	r3, [sp, #12]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	db04      	blt.n	8010ede <_dtoa_r+0xa76>
 8010ed4:	9906      	ldr	r1, [sp, #24]
 8010ed6:	430b      	orrs	r3, r1
 8010ed8:	9904      	ldr	r1, [sp, #16]
 8010eda:	430b      	orrs	r3, r1
 8010edc:	d122      	bne.n	8010f24 <_dtoa_r+0xabc>
 8010ede:	2a00      	cmp	r2, #0
 8010ee0:	ddee      	ble.n	8010ec0 <_dtoa_r+0xa58>
 8010ee2:	ee18 1a10 	vmov	r1, s16
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 fce9 	bl	80118c0 <__lshift>
 8010eee:	4631      	mov	r1, r6
 8010ef0:	ee08 0a10 	vmov	s16, r0
 8010ef4:	f000 fd54 	bl	80119a0 <__mcmp>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	dc03      	bgt.n	8010f04 <_dtoa_r+0xa9c>
 8010efc:	d1e0      	bne.n	8010ec0 <_dtoa_r+0xa58>
 8010efe:	f01a 0f01 	tst.w	sl, #1
 8010f02:	d0dd      	beq.n	8010ec0 <_dtoa_r+0xa58>
 8010f04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f08:	d1d7      	bne.n	8010eba <_dtoa_r+0xa52>
 8010f0a:	2339      	movs	r3, #57	; 0x39
 8010f0c:	f88b 3000 	strb.w	r3, [fp]
 8010f10:	462b      	mov	r3, r5
 8010f12:	461d      	mov	r5, r3
 8010f14:	3b01      	subs	r3, #1
 8010f16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f1a:	2a39      	cmp	r2, #57	; 0x39
 8010f1c:	d071      	beq.n	8011002 <_dtoa_r+0xb9a>
 8010f1e:	3201      	adds	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]
 8010f22:	e746      	b.n	8010db2 <_dtoa_r+0x94a>
 8010f24:	2a00      	cmp	r2, #0
 8010f26:	dd07      	ble.n	8010f38 <_dtoa_r+0xad0>
 8010f28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f2c:	d0ed      	beq.n	8010f0a <_dtoa_r+0xaa2>
 8010f2e:	f10a 0301 	add.w	r3, sl, #1
 8010f32:	f88b 3000 	strb.w	r3, [fp]
 8010f36:	e73c      	b.n	8010db2 <_dtoa_r+0x94a>
 8010f38:	9b05      	ldr	r3, [sp, #20]
 8010f3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010f3e:	4599      	cmp	r9, r3
 8010f40:	d047      	beq.n	8010fd2 <_dtoa_r+0xb6a>
 8010f42:	ee18 1a10 	vmov	r1, s16
 8010f46:	2300      	movs	r3, #0
 8010f48:	220a      	movs	r2, #10
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f000 fb08 	bl	8011560 <__multadd>
 8010f50:	45b8      	cmp	r8, r7
 8010f52:	ee08 0a10 	vmov	s16, r0
 8010f56:	f04f 0300 	mov.w	r3, #0
 8010f5a:	f04f 020a 	mov.w	r2, #10
 8010f5e:	4641      	mov	r1, r8
 8010f60:	4620      	mov	r0, r4
 8010f62:	d106      	bne.n	8010f72 <_dtoa_r+0xb0a>
 8010f64:	f000 fafc 	bl	8011560 <__multadd>
 8010f68:	4680      	mov	r8, r0
 8010f6a:	4607      	mov	r7, r0
 8010f6c:	f109 0901 	add.w	r9, r9, #1
 8010f70:	e772      	b.n	8010e58 <_dtoa_r+0x9f0>
 8010f72:	f000 faf5 	bl	8011560 <__multadd>
 8010f76:	4639      	mov	r1, r7
 8010f78:	4680      	mov	r8, r0
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	220a      	movs	r2, #10
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f000 faee 	bl	8011560 <__multadd>
 8010f84:	4607      	mov	r7, r0
 8010f86:	e7f1      	b.n	8010f6c <_dtoa_r+0xb04>
 8010f88:	9b03      	ldr	r3, [sp, #12]
 8010f8a:	9302      	str	r3, [sp, #8]
 8010f8c:	9d01      	ldr	r5, [sp, #4]
 8010f8e:	ee18 0a10 	vmov	r0, s16
 8010f92:	4631      	mov	r1, r6
 8010f94:	f7ff f9dc 	bl	8010350 <quorem>
 8010f98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010f9c:	9b01      	ldr	r3, [sp, #4]
 8010f9e:	f805 ab01 	strb.w	sl, [r5], #1
 8010fa2:	1aea      	subs	r2, r5, r3
 8010fa4:	9b02      	ldr	r3, [sp, #8]
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	dd09      	ble.n	8010fbe <_dtoa_r+0xb56>
 8010faa:	ee18 1a10 	vmov	r1, s16
 8010fae:	2300      	movs	r3, #0
 8010fb0:	220a      	movs	r2, #10
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f000 fad4 	bl	8011560 <__multadd>
 8010fb8:	ee08 0a10 	vmov	s16, r0
 8010fbc:	e7e7      	b.n	8010f8e <_dtoa_r+0xb26>
 8010fbe:	9b02      	ldr	r3, [sp, #8]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	bfc8      	it	gt
 8010fc4:	461d      	movgt	r5, r3
 8010fc6:	9b01      	ldr	r3, [sp, #4]
 8010fc8:	bfd8      	it	le
 8010fca:	2501      	movle	r5, #1
 8010fcc:	441d      	add	r5, r3
 8010fce:	f04f 0800 	mov.w	r8, #0
 8010fd2:	ee18 1a10 	vmov	r1, s16
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	4620      	mov	r0, r4
 8010fda:	f000 fc71 	bl	80118c0 <__lshift>
 8010fde:	4631      	mov	r1, r6
 8010fe0:	ee08 0a10 	vmov	s16, r0
 8010fe4:	f000 fcdc 	bl	80119a0 <__mcmp>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	dc91      	bgt.n	8010f10 <_dtoa_r+0xaa8>
 8010fec:	d102      	bne.n	8010ff4 <_dtoa_r+0xb8c>
 8010fee:	f01a 0f01 	tst.w	sl, #1
 8010ff2:	d18d      	bne.n	8010f10 <_dtoa_r+0xaa8>
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	461d      	mov	r5, r3
 8010ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ffc:	2a30      	cmp	r2, #48	; 0x30
 8010ffe:	d0fa      	beq.n	8010ff6 <_dtoa_r+0xb8e>
 8011000:	e6d7      	b.n	8010db2 <_dtoa_r+0x94a>
 8011002:	9a01      	ldr	r2, [sp, #4]
 8011004:	429a      	cmp	r2, r3
 8011006:	d184      	bne.n	8010f12 <_dtoa_r+0xaaa>
 8011008:	9b00      	ldr	r3, [sp, #0]
 801100a:	3301      	adds	r3, #1
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	2331      	movs	r3, #49	; 0x31
 8011010:	7013      	strb	r3, [r2, #0]
 8011012:	e6ce      	b.n	8010db2 <_dtoa_r+0x94a>
 8011014:	4b09      	ldr	r3, [pc, #36]	; (801103c <_dtoa_r+0xbd4>)
 8011016:	f7ff ba95 	b.w	8010544 <_dtoa_r+0xdc>
 801101a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801101c:	2b00      	cmp	r3, #0
 801101e:	f47f aa6e 	bne.w	80104fe <_dtoa_r+0x96>
 8011022:	4b07      	ldr	r3, [pc, #28]	; (8011040 <_dtoa_r+0xbd8>)
 8011024:	f7ff ba8e 	b.w	8010544 <_dtoa_r+0xdc>
 8011028:	9b02      	ldr	r3, [sp, #8]
 801102a:	2b00      	cmp	r3, #0
 801102c:	dcae      	bgt.n	8010f8c <_dtoa_r+0xb24>
 801102e:	9b06      	ldr	r3, [sp, #24]
 8011030:	2b02      	cmp	r3, #2
 8011032:	f73f aea8 	bgt.w	8010d86 <_dtoa_r+0x91e>
 8011036:	e7a9      	b.n	8010f8c <_dtoa_r+0xb24>
 8011038:	08012b07 	.word	0x08012b07
 801103c:	08012a64 	.word	0x08012a64
 8011040:	08012a88 	.word	0x08012a88

08011044 <__sflush_r>:
 8011044:	898a      	ldrh	r2, [r1, #12]
 8011046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104a:	4605      	mov	r5, r0
 801104c:	0710      	lsls	r0, r2, #28
 801104e:	460c      	mov	r4, r1
 8011050:	d458      	bmi.n	8011104 <__sflush_r+0xc0>
 8011052:	684b      	ldr	r3, [r1, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	dc05      	bgt.n	8011064 <__sflush_r+0x20>
 8011058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801105a:	2b00      	cmp	r3, #0
 801105c:	dc02      	bgt.n	8011064 <__sflush_r+0x20>
 801105e:	2000      	movs	r0, #0
 8011060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011066:	2e00      	cmp	r6, #0
 8011068:	d0f9      	beq.n	801105e <__sflush_r+0x1a>
 801106a:	2300      	movs	r3, #0
 801106c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011070:	682f      	ldr	r7, [r5, #0]
 8011072:	602b      	str	r3, [r5, #0]
 8011074:	d032      	beq.n	80110dc <__sflush_r+0x98>
 8011076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	075a      	lsls	r2, r3, #29
 801107c:	d505      	bpl.n	801108a <__sflush_r+0x46>
 801107e:	6863      	ldr	r3, [r4, #4]
 8011080:	1ac0      	subs	r0, r0, r3
 8011082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011084:	b10b      	cbz	r3, 801108a <__sflush_r+0x46>
 8011086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011088:	1ac0      	subs	r0, r0, r3
 801108a:	2300      	movs	r3, #0
 801108c:	4602      	mov	r2, r0
 801108e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011090:	6a21      	ldr	r1, [r4, #32]
 8011092:	4628      	mov	r0, r5
 8011094:	47b0      	blx	r6
 8011096:	1c43      	adds	r3, r0, #1
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	d106      	bne.n	80110aa <__sflush_r+0x66>
 801109c:	6829      	ldr	r1, [r5, #0]
 801109e:	291d      	cmp	r1, #29
 80110a0:	d82c      	bhi.n	80110fc <__sflush_r+0xb8>
 80110a2:	4a2a      	ldr	r2, [pc, #168]	; (801114c <__sflush_r+0x108>)
 80110a4:	40ca      	lsrs	r2, r1
 80110a6:	07d6      	lsls	r6, r2, #31
 80110a8:	d528      	bpl.n	80110fc <__sflush_r+0xb8>
 80110aa:	2200      	movs	r2, #0
 80110ac:	6062      	str	r2, [r4, #4]
 80110ae:	04d9      	lsls	r1, r3, #19
 80110b0:	6922      	ldr	r2, [r4, #16]
 80110b2:	6022      	str	r2, [r4, #0]
 80110b4:	d504      	bpl.n	80110c0 <__sflush_r+0x7c>
 80110b6:	1c42      	adds	r2, r0, #1
 80110b8:	d101      	bne.n	80110be <__sflush_r+0x7a>
 80110ba:	682b      	ldr	r3, [r5, #0]
 80110bc:	b903      	cbnz	r3, 80110c0 <__sflush_r+0x7c>
 80110be:	6560      	str	r0, [r4, #84]	; 0x54
 80110c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110c2:	602f      	str	r7, [r5, #0]
 80110c4:	2900      	cmp	r1, #0
 80110c6:	d0ca      	beq.n	801105e <__sflush_r+0x1a>
 80110c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110cc:	4299      	cmp	r1, r3
 80110ce:	d002      	beq.n	80110d6 <__sflush_r+0x92>
 80110d0:	4628      	mov	r0, r5
 80110d2:	f000 fd7d 	bl	8011bd0 <_free_r>
 80110d6:	2000      	movs	r0, #0
 80110d8:	6360      	str	r0, [r4, #52]	; 0x34
 80110da:	e7c1      	b.n	8011060 <__sflush_r+0x1c>
 80110dc:	6a21      	ldr	r1, [r4, #32]
 80110de:	2301      	movs	r3, #1
 80110e0:	4628      	mov	r0, r5
 80110e2:	47b0      	blx	r6
 80110e4:	1c41      	adds	r1, r0, #1
 80110e6:	d1c7      	bne.n	8011078 <__sflush_r+0x34>
 80110e8:	682b      	ldr	r3, [r5, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d0c4      	beq.n	8011078 <__sflush_r+0x34>
 80110ee:	2b1d      	cmp	r3, #29
 80110f0:	d001      	beq.n	80110f6 <__sflush_r+0xb2>
 80110f2:	2b16      	cmp	r3, #22
 80110f4:	d101      	bne.n	80110fa <__sflush_r+0xb6>
 80110f6:	602f      	str	r7, [r5, #0]
 80110f8:	e7b1      	b.n	801105e <__sflush_r+0x1a>
 80110fa:	89a3      	ldrh	r3, [r4, #12]
 80110fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011100:	81a3      	strh	r3, [r4, #12]
 8011102:	e7ad      	b.n	8011060 <__sflush_r+0x1c>
 8011104:	690f      	ldr	r7, [r1, #16]
 8011106:	2f00      	cmp	r7, #0
 8011108:	d0a9      	beq.n	801105e <__sflush_r+0x1a>
 801110a:	0793      	lsls	r3, r2, #30
 801110c:	680e      	ldr	r6, [r1, #0]
 801110e:	bf08      	it	eq
 8011110:	694b      	ldreq	r3, [r1, #20]
 8011112:	600f      	str	r7, [r1, #0]
 8011114:	bf18      	it	ne
 8011116:	2300      	movne	r3, #0
 8011118:	eba6 0807 	sub.w	r8, r6, r7
 801111c:	608b      	str	r3, [r1, #8]
 801111e:	f1b8 0f00 	cmp.w	r8, #0
 8011122:	dd9c      	ble.n	801105e <__sflush_r+0x1a>
 8011124:	6a21      	ldr	r1, [r4, #32]
 8011126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011128:	4643      	mov	r3, r8
 801112a:	463a      	mov	r2, r7
 801112c:	4628      	mov	r0, r5
 801112e:	47b0      	blx	r6
 8011130:	2800      	cmp	r0, #0
 8011132:	dc06      	bgt.n	8011142 <__sflush_r+0xfe>
 8011134:	89a3      	ldrh	r3, [r4, #12]
 8011136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801113a:	81a3      	strh	r3, [r4, #12]
 801113c:	f04f 30ff 	mov.w	r0, #4294967295
 8011140:	e78e      	b.n	8011060 <__sflush_r+0x1c>
 8011142:	4407      	add	r7, r0
 8011144:	eba8 0800 	sub.w	r8, r8, r0
 8011148:	e7e9      	b.n	801111e <__sflush_r+0xda>
 801114a:	bf00      	nop
 801114c:	20400001 	.word	0x20400001

08011150 <_fflush_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	690b      	ldr	r3, [r1, #16]
 8011154:	4605      	mov	r5, r0
 8011156:	460c      	mov	r4, r1
 8011158:	b913      	cbnz	r3, 8011160 <_fflush_r+0x10>
 801115a:	2500      	movs	r5, #0
 801115c:	4628      	mov	r0, r5
 801115e:	bd38      	pop	{r3, r4, r5, pc}
 8011160:	b118      	cbz	r0, 801116a <_fflush_r+0x1a>
 8011162:	6983      	ldr	r3, [r0, #24]
 8011164:	b90b      	cbnz	r3, 801116a <_fflush_r+0x1a>
 8011166:	f000 f887 	bl	8011278 <__sinit>
 801116a:	4b14      	ldr	r3, [pc, #80]	; (80111bc <_fflush_r+0x6c>)
 801116c:	429c      	cmp	r4, r3
 801116e:	d11b      	bne.n	80111a8 <_fflush_r+0x58>
 8011170:	686c      	ldr	r4, [r5, #4]
 8011172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d0ef      	beq.n	801115a <_fflush_r+0xa>
 801117a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801117c:	07d0      	lsls	r0, r2, #31
 801117e:	d404      	bmi.n	801118a <_fflush_r+0x3a>
 8011180:	0599      	lsls	r1, r3, #22
 8011182:	d402      	bmi.n	801118a <_fflush_r+0x3a>
 8011184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011186:	f000 f91a 	bl	80113be <__retarget_lock_acquire_recursive>
 801118a:	4628      	mov	r0, r5
 801118c:	4621      	mov	r1, r4
 801118e:	f7ff ff59 	bl	8011044 <__sflush_r>
 8011192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011194:	07da      	lsls	r2, r3, #31
 8011196:	4605      	mov	r5, r0
 8011198:	d4e0      	bmi.n	801115c <_fflush_r+0xc>
 801119a:	89a3      	ldrh	r3, [r4, #12]
 801119c:	059b      	lsls	r3, r3, #22
 801119e:	d4dd      	bmi.n	801115c <_fflush_r+0xc>
 80111a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111a2:	f000 f90d 	bl	80113c0 <__retarget_lock_release_recursive>
 80111a6:	e7d9      	b.n	801115c <_fflush_r+0xc>
 80111a8:	4b05      	ldr	r3, [pc, #20]	; (80111c0 <_fflush_r+0x70>)
 80111aa:	429c      	cmp	r4, r3
 80111ac:	d101      	bne.n	80111b2 <_fflush_r+0x62>
 80111ae:	68ac      	ldr	r4, [r5, #8]
 80111b0:	e7df      	b.n	8011172 <_fflush_r+0x22>
 80111b2:	4b04      	ldr	r3, [pc, #16]	; (80111c4 <_fflush_r+0x74>)
 80111b4:	429c      	cmp	r4, r3
 80111b6:	bf08      	it	eq
 80111b8:	68ec      	ldreq	r4, [r5, #12]
 80111ba:	e7da      	b.n	8011172 <_fflush_r+0x22>
 80111bc:	08012b38 	.word	0x08012b38
 80111c0:	08012b58 	.word	0x08012b58
 80111c4:	08012b18 	.word	0x08012b18

080111c8 <std>:
 80111c8:	2300      	movs	r3, #0
 80111ca:	b510      	push	{r4, lr}
 80111cc:	4604      	mov	r4, r0
 80111ce:	e9c0 3300 	strd	r3, r3, [r0]
 80111d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111d6:	6083      	str	r3, [r0, #8]
 80111d8:	8181      	strh	r1, [r0, #12]
 80111da:	6643      	str	r3, [r0, #100]	; 0x64
 80111dc:	81c2      	strh	r2, [r0, #14]
 80111de:	6183      	str	r3, [r0, #24]
 80111e0:	4619      	mov	r1, r3
 80111e2:	2208      	movs	r2, #8
 80111e4:	305c      	adds	r0, #92	; 0x5c
 80111e6:	f7fe fa0f 	bl	800f608 <memset>
 80111ea:	4b05      	ldr	r3, [pc, #20]	; (8011200 <std+0x38>)
 80111ec:	6263      	str	r3, [r4, #36]	; 0x24
 80111ee:	4b05      	ldr	r3, [pc, #20]	; (8011204 <std+0x3c>)
 80111f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80111f2:	4b05      	ldr	r3, [pc, #20]	; (8011208 <std+0x40>)
 80111f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111f6:	4b05      	ldr	r3, [pc, #20]	; (801120c <std+0x44>)
 80111f8:	6224      	str	r4, [r4, #32]
 80111fa:	6323      	str	r3, [r4, #48]	; 0x30
 80111fc:	bd10      	pop	{r4, pc}
 80111fe:	bf00      	nop
 8011200:	080120f5 	.word	0x080120f5
 8011204:	08012117 	.word	0x08012117
 8011208:	0801214f 	.word	0x0801214f
 801120c:	08012173 	.word	0x08012173

08011210 <_cleanup_r>:
 8011210:	4901      	ldr	r1, [pc, #4]	; (8011218 <_cleanup_r+0x8>)
 8011212:	f000 b8af 	b.w	8011374 <_fwalk_reent>
 8011216:	bf00      	nop
 8011218:	08011151 	.word	0x08011151

0801121c <__sfmoreglue>:
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	2268      	movs	r2, #104	; 0x68
 8011220:	1e4d      	subs	r5, r1, #1
 8011222:	4355      	muls	r5, r2
 8011224:	460e      	mov	r6, r1
 8011226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801122a:	f000 fd3d 	bl	8011ca8 <_malloc_r>
 801122e:	4604      	mov	r4, r0
 8011230:	b140      	cbz	r0, 8011244 <__sfmoreglue+0x28>
 8011232:	2100      	movs	r1, #0
 8011234:	e9c0 1600 	strd	r1, r6, [r0]
 8011238:	300c      	adds	r0, #12
 801123a:	60a0      	str	r0, [r4, #8]
 801123c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011240:	f7fe f9e2 	bl	800f608 <memset>
 8011244:	4620      	mov	r0, r4
 8011246:	bd70      	pop	{r4, r5, r6, pc}

08011248 <__sfp_lock_acquire>:
 8011248:	4801      	ldr	r0, [pc, #4]	; (8011250 <__sfp_lock_acquire+0x8>)
 801124a:	f000 b8b8 	b.w	80113be <__retarget_lock_acquire_recursive>
 801124e:	bf00      	nop
 8011250:	20010df9 	.word	0x20010df9

08011254 <__sfp_lock_release>:
 8011254:	4801      	ldr	r0, [pc, #4]	; (801125c <__sfp_lock_release+0x8>)
 8011256:	f000 b8b3 	b.w	80113c0 <__retarget_lock_release_recursive>
 801125a:	bf00      	nop
 801125c:	20010df9 	.word	0x20010df9

08011260 <__sinit_lock_acquire>:
 8011260:	4801      	ldr	r0, [pc, #4]	; (8011268 <__sinit_lock_acquire+0x8>)
 8011262:	f000 b8ac 	b.w	80113be <__retarget_lock_acquire_recursive>
 8011266:	bf00      	nop
 8011268:	20010dfa 	.word	0x20010dfa

0801126c <__sinit_lock_release>:
 801126c:	4801      	ldr	r0, [pc, #4]	; (8011274 <__sinit_lock_release+0x8>)
 801126e:	f000 b8a7 	b.w	80113c0 <__retarget_lock_release_recursive>
 8011272:	bf00      	nop
 8011274:	20010dfa 	.word	0x20010dfa

08011278 <__sinit>:
 8011278:	b510      	push	{r4, lr}
 801127a:	4604      	mov	r4, r0
 801127c:	f7ff fff0 	bl	8011260 <__sinit_lock_acquire>
 8011280:	69a3      	ldr	r3, [r4, #24]
 8011282:	b11b      	cbz	r3, 801128c <__sinit+0x14>
 8011284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011288:	f7ff bff0 	b.w	801126c <__sinit_lock_release>
 801128c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011290:	6523      	str	r3, [r4, #80]	; 0x50
 8011292:	4b13      	ldr	r3, [pc, #76]	; (80112e0 <__sinit+0x68>)
 8011294:	4a13      	ldr	r2, [pc, #76]	; (80112e4 <__sinit+0x6c>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	62a2      	str	r2, [r4, #40]	; 0x28
 801129a:	42a3      	cmp	r3, r4
 801129c:	bf04      	itt	eq
 801129e:	2301      	moveq	r3, #1
 80112a0:	61a3      	streq	r3, [r4, #24]
 80112a2:	4620      	mov	r0, r4
 80112a4:	f000 f820 	bl	80112e8 <__sfp>
 80112a8:	6060      	str	r0, [r4, #4]
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 f81c 	bl	80112e8 <__sfp>
 80112b0:	60a0      	str	r0, [r4, #8]
 80112b2:	4620      	mov	r0, r4
 80112b4:	f000 f818 	bl	80112e8 <__sfp>
 80112b8:	2200      	movs	r2, #0
 80112ba:	60e0      	str	r0, [r4, #12]
 80112bc:	2104      	movs	r1, #4
 80112be:	6860      	ldr	r0, [r4, #4]
 80112c0:	f7ff ff82 	bl	80111c8 <std>
 80112c4:	68a0      	ldr	r0, [r4, #8]
 80112c6:	2201      	movs	r2, #1
 80112c8:	2109      	movs	r1, #9
 80112ca:	f7ff ff7d 	bl	80111c8 <std>
 80112ce:	68e0      	ldr	r0, [r4, #12]
 80112d0:	2202      	movs	r2, #2
 80112d2:	2112      	movs	r1, #18
 80112d4:	f7ff ff78 	bl	80111c8 <std>
 80112d8:	2301      	movs	r3, #1
 80112da:	61a3      	str	r3, [r4, #24]
 80112dc:	e7d2      	b.n	8011284 <__sinit+0xc>
 80112de:	bf00      	nop
 80112e0:	08012a50 	.word	0x08012a50
 80112e4:	08011211 	.word	0x08011211

080112e8 <__sfp>:
 80112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ea:	4607      	mov	r7, r0
 80112ec:	f7ff ffac 	bl	8011248 <__sfp_lock_acquire>
 80112f0:	4b1e      	ldr	r3, [pc, #120]	; (801136c <__sfp+0x84>)
 80112f2:	681e      	ldr	r6, [r3, #0]
 80112f4:	69b3      	ldr	r3, [r6, #24]
 80112f6:	b913      	cbnz	r3, 80112fe <__sfp+0x16>
 80112f8:	4630      	mov	r0, r6
 80112fa:	f7ff ffbd 	bl	8011278 <__sinit>
 80112fe:	3648      	adds	r6, #72	; 0x48
 8011300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011304:	3b01      	subs	r3, #1
 8011306:	d503      	bpl.n	8011310 <__sfp+0x28>
 8011308:	6833      	ldr	r3, [r6, #0]
 801130a:	b30b      	cbz	r3, 8011350 <__sfp+0x68>
 801130c:	6836      	ldr	r6, [r6, #0]
 801130e:	e7f7      	b.n	8011300 <__sfp+0x18>
 8011310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011314:	b9d5      	cbnz	r5, 801134c <__sfp+0x64>
 8011316:	4b16      	ldr	r3, [pc, #88]	; (8011370 <__sfp+0x88>)
 8011318:	60e3      	str	r3, [r4, #12]
 801131a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801131e:	6665      	str	r5, [r4, #100]	; 0x64
 8011320:	f000 f84c 	bl	80113bc <__retarget_lock_init_recursive>
 8011324:	f7ff ff96 	bl	8011254 <__sfp_lock_release>
 8011328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801132c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011330:	6025      	str	r5, [r4, #0]
 8011332:	61a5      	str	r5, [r4, #24]
 8011334:	2208      	movs	r2, #8
 8011336:	4629      	mov	r1, r5
 8011338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801133c:	f7fe f964 	bl	800f608 <memset>
 8011340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011348:	4620      	mov	r0, r4
 801134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801134c:	3468      	adds	r4, #104	; 0x68
 801134e:	e7d9      	b.n	8011304 <__sfp+0x1c>
 8011350:	2104      	movs	r1, #4
 8011352:	4638      	mov	r0, r7
 8011354:	f7ff ff62 	bl	801121c <__sfmoreglue>
 8011358:	4604      	mov	r4, r0
 801135a:	6030      	str	r0, [r6, #0]
 801135c:	2800      	cmp	r0, #0
 801135e:	d1d5      	bne.n	801130c <__sfp+0x24>
 8011360:	f7ff ff78 	bl	8011254 <__sfp_lock_release>
 8011364:	230c      	movs	r3, #12
 8011366:	603b      	str	r3, [r7, #0]
 8011368:	e7ee      	b.n	8011348 <__sfp+0x60>
 801136a:	bf00      	nop
 801136c:	08012a50 	.word	0x08012a50
 8011370:	ffff0001 	.word	0xffff0001

08011374 <_fwalk_reent>:
 8011374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011378:	4606      	mov	r6, r0
 801137a:	4688      	mov	r8, r1
 801137c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011380:	2700      	movs	r7, #0
 8011382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011386:	f1b9 0901 	subs.w	r9, r9, #1
 801138a:	d505      	bpl.n	8011398 <_fwalk_reent+0x24>
 801138c:	6824      	ldr	r4, [r4, #0]
 801138e:	2c00      	cmp	r4, #0
 8011390:	d1f7      	bne.n	8011382 <_fwalk_reent+0xe>
 8011392:	4638      	mov	r0, r7
 8011394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011398:	89ab      	ldrh	r3, [r5, #12]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d907      	bls.n	80113ae <_fwalk_reent+0x3a>
 801139e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113a2:	3301      	adds	r3, #1
 80113a4:	d003      	beq.n	80113ae <_fwalk_reent+0x3a>
 80113a6:	4629      	mov	r1, r5
 80113a8:	4630      	mov	r0, r6
 80113aa:	47c0      	blx	r8
 80113ac:	4307      	orrs	r7, r0
 80113ae:	3568      	adds	r5, #104	; 0x68
 80113b0:	e7e9      	b.n	8011386 <_fwalk_reent+0x12>
	...

080113b4 <_localeconv_r>:
 80113b4:	4800      	ldr	r0, [pc, #0]	; (80113b8 <_localeconv_r+0x4>)
 80113b6:	4770      	bx	lr
 80113b8:	20000168 	.word	0x20000168

080113bc <__retarget_lock_init_recursive>:
 80113bc:	4770      	bx	lr

080113be <__retarget_lock_acquire_recursive>:
 80113be:	4770      	bx	lr

080113c0 <__retarget_lock_release_recursive>:
 80113c0:	4770      	bx	lr

080113c2 <__swhatbuf_r>:
 80113c2:	b570      	push	{r4, r5, r6, lr}
 80113c4:	460e      	mov	r6, r1
 80113c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ca:	2900      	cmp	r1, #0
 80113cc:	b096      	sub	sp, #88	; 0x58
 80113ce:	4614      	mov	r4, r2
 80113d0:	461d      	mov	r5, r3
 80113d2:	da08      	bge.n	80113e6 <__swhatbuf_r+0x24>
 80113d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	602a      	str	r2, [r5, #0]
 80113dc:	061a      	lsls	r2, r3, #24
 80113de:	d410      	bmi.n	8011402 <__swhatbuf_r+0x40>
 80113e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113e4:	e00e      	b.n	8011404 <__swhatbuf_r+0x42>
 80113e6:	466a      	mov	r2, sp
 80113e8:	f000 ff1a 	bl	8012220 <_fstat_r>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	dbf1      	blt.n	80113d4 <__swhatbuf_r+0x12>
 80113f0:	9a01      	ldr	r2, [sp, #4]
 80113f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113fa:	425a      	negs	r2, r3
 80113fc:	415a      	adcs	r2, r3
 80113fe:	602a      	str	r2, [r5, #0]
 8011400:	e7ee      	b.n	80113e0 <__swhatbuf_r+0x1e>
 8011402:	2340      	movs	r3, #64	; 0x40
 8011404:	2000      	movs	r0, #0
 8011406:	6023      	str	r3, [r4, #0]
 8011408:	b016      	add	sp, #88	; 0x58
 801140a:	bd70      	pop	{r4, r5, r6, pc}

0801140c <__smakebuf_r>:
 801140c:	898b      	ldrh	r3, [r1, #12]
 801140e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011410:	079d      	lsls	r5, r3, #30
 8011412:	4606      	mov	r6, r0
 8011414:	460c      	mov	r4, r1
 8011416:	d507      	bpl.n	8011428 <__smakebuf_r+0x1c>
 8011418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801141c:	6023      	str	r3, [r4, #0]
 801141e:	6123      	str	r3, [r4, #16]
 8011420:	2301      	movs	r3, #1
 8011422:	6163      	str	r3, [r4, #20]
 8011424:	b002      	add	sp, #8
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	ab01      	add	r3, sp, #4
 801142a:	466a      	mov	r2, sp
 801142c:	f7ff ffc9 	bl	80113c2 <__swhatbuf_r>
 8011430:	9900      	ldr	r1, [sp, #0]
 8011432:	4605      	mov	r5, r0
 8011434:	4630      	mov	r0, r6
 8011436:	f000 fc37 	bl	8011ca8 <_malloc_r>
 801143a:	b948      	cbnz	r0, 8011450 <__smakebuf_r+0x44>
 801143c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011440:	059a      	lsls	r2, r3, #22
 8011442:	d4ef      	bmi.n	8011424 <__smakebuf_r+0x18>
 8011444:	f023 0303 	bic.w	r3, r3, #3
 8011448:	f043 0302 	orr.w	r3, r3, #2
 801144c:	81a3      	strh	r3, [r4, #12]
 801144e:	e7e3      	b.n	8011418 <__smakebuf_r+0xc>
 8011450:	4b0d      	ldr	r3, [pc, #52]	; (8011488 <__smakebuf_r+0x7c>)
 8011452:	62b3      	str	r3, [r6, #40]	; 0x28
 8011454:	89a3      	ldrh	r3, [r4, #12]
 8011456:	6020      	str	r0, [r4, #0]
 8011458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801145c:	81a3      	strh	r3, [r4, #12]
 801145e:	9b00      	ldr	r3, [sp, #0]
 8011460:	6163      	str	r3, [r4, #20]
 8011462:	9b01      	ldr	r3, [sp, #4]
 8011464:	6120      	str	r0, [r4, #16]
 8011466:	b15b      	cbz	r3, 8011480 <__smakebuf_r+0x74>
 8011468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801146c:	4630      	mov	r0, r6
 801146e:	f000 fee9 	bl	8012244 <_isatty_r>
 8011472:	b128      	cbz	r0, 8011480 <__smakebuf_r+0x74>
 8011474:	89a3      	ldrh	r3, [r4, #12]
 8011476:	f023 0303 	bic.w	r3, r3, #3
 801147a:	f043 0301 	orr.w	r3, r3, #1
 801147e:	81a3      	strh	r3, [r4, #12]
 8011480:	89a0      	ldrh	r0, [r4, #12]
 8011482:	4305      	orrs	r5, r0
 8011484:	81a5      	strh	r5, [r4, #12]
 8011486:	e7cd      	b.n	8011424 <__smakebuf_r+0x18>
 8011488:	08011211 	.word	0x08011211

0801148c <malloc>:
 801148c:	4b02      	ldr	r3, [pc, #8]	; (8011498 <malloc+0xc>)
 801148e:	4601      	mov	r1, r0
 8011490:	6818      	ldr	r0, [r3, #0]
 8011492:	f000 bc09 	b.w	8011ca8 <_malloc_r>
 8011496:	bf00      	nop
 8011498:	20000014 	.word	0x20000014

0801149c <_Balloc>:
 801149c:	b570      	push	{r4, r5, r6, lr}
 801149e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114a0:	4604      	mov	r4, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	b976      	cbnz	r6, 80114c4 <_Balloc+0x28>
 80114a6:	2010      	movs	r0, #16
 80114a8:	f7ff fff0 	bl	801148c <malloc>
 80114ac:	4602      	mov	r2, r0
 80114ae:	6260      	str	r0, [r4, #36]	; 0x24
 80114b0:	b920      	cbnz	r0, 80114bc <_Balloc+0x20>
 80114b2:	4b18      	ldr	r3, [pc, #96]	; (8011514 <_Balloc+0x78>)
 80114b4:	4818      	ldr	r0, [pc, #96]	; (8011518 <_Balloc+0x7c>)
 80114b6:	2166      	movs	r1, #102	; 0x66
 80114b8:	f000 fe72 	bl	80121a0 <__assert_func>
 80114bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c0:	6006      	str	r6, [r0, #0]
 80114c2:	60c6      	str	r6, [r0, #12]
 80114c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114c6:	68f3      	ldr	r3, [r6, #12]
 80114c8:	b183      	cbz	r3, 80114ec <_Balloc+0x50>
 80114ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114d2:	b9b8      	cbnz	r0, 8011504 <_Balloc+0x68>
 80114d4:	2101      	movs	r1, #1
 80114d6:	fa01 f605 	lsl.w	r6, r1, r5
 80114da:	1d72      	adds	r2, r6, #5
 80114dc:	0092      	lsls	r2, r2, #2
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 fb60 	bl	8011ba4 <_calloc_r>
 80114e4:	b160      	cbz	r0, 8011500 <_Balloc+0x64>
 80114e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ea:	e00e      	b.n	801150a <_Balloc+0x6e>
 80114ec:	2221      	movs	r2, #33	; 0x21
 80114ee:	2104      	movs	r1, #4
 80114f0:	4620      	mov	r0, r4
 80114f2:	f000 fb57 	bl	8011ba4 <_calloc_r>
 80114f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114f8:	60f0      	str	r0, [r6, #12]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1e4      	bne.n	80114ca <_Balloc+0x2e>
 8011500:	2000      	movs	r0, #0
 8011502:	bd70      	pop	{r4, r5, r6, pc}
 8011504:	6802      	ldr	r2, [r0, #0]
 8011506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801150a:	2300      	movs	r3, #0
 801150c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011510:	e7f7      	b.n	8011502 <_Balloc+0x66>
 8011512:	bf00      	nop
 8011514:	08012a95 	.word	0x08012a95
 8011518:	08012b78 	.word	0x08012b78

0801151c <_Bfree>:
 801151c:	b570      	push	{r4, r5, r6, lr}
 801151e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	b976      	cbnz	r6, 8011544 <_Bfree+0x28>
 8011526:	2010      	movs	r0, #16
 8011528:	f7ff ffb0 	bl	801148c <malloc>
 801152c:	4602      	mov	r2, r0
 801152e:	6268      	str	r0, [r5, #36]	; 0x24
 8011530:	b920      	cbnz	r0, 801153c <_Bfree+0x20>
 8011532:	4b09      	ldr	r3, [pc, #36]	; (8011558 <_Bfree+0x3c>)
 8011534:	4809      	ldr	r0, [pc, #36]	; (801155c <_Bfree+0x40>)
 8011536:	218a      	movs	r1, #138	; 0x8a
 8011538:	f000 fe32 	bl	80121a0 <__assert_func>
 801153c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011540:	6006      	str	r6, [r0, #0]
 8011542:	60c6      	str	r6, [r0, #12]
 8011544:	b13c      	cbz	r4, 8011556 <_Bfree+0x3a>
 8011546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011548:	6862      	ldr	r2, [r4, #4]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011550:	6021      	str	r1, [r4, #0]
 8011552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	08012a95 	.word	0x08012a95
 801155c:	08012b78 	.word	0x08012b78

08011560 <__multadd>:
 8011560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011564:	690d      	ldr	r5, [r1, #16]
 8011566:	4607      	mov	r7, r0
 8011568:	460c      	mov	r4, r1
 801156a:	461e      	mov	r6, r3
 801156c:	f101 0c14 	add.w	ip, r1, #20
 8011570:	2000      	movs	r0, #0
 8011572:	f8dc 3000 	ldr.w	r3, [ip]
 8011576:	b299      	uxth	r1, r3
 8011578:	fb02 6101 	mla	r1, r2, r1, r6
 801157c:	0c1e      	lsrs	r6, r3, #16
 801157e:	0c0b      	lsrs	r3, r1, #16
 8011580:	fb02 3306 	mla	r3, r2, r6, r3
 8011584:	b289      	uxth	r1, r1
 8011586:	3001      	adds	r0, #1
 8011588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801158c:	4285      	cmp	r5, r0
 801158e:	f84c 1b04 	str.w	r1, [ip], #4
 8011592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011596:	dcec      	bgt.n	8011572 <__multadd+0x12>
 8011598:	b30e      	cbz	r6, 80115de <__multadd+0x7e>
 801159a:	68a3      	ldr	r3, [r4, #8]
 801159c:	42ab      	cmp	r3, r5
 801159e:	dc19      	bgt.n	80115d4 <__multadd+0x74>
 80115a0:	6861      	ldr	r1, [r4, #4]
 80115a2:	4638      	mov	r0, r7
 80115a4:	3101      	adds	r1, #1
 80115a6:	f7ff ff79 	bl	801149c <_Balloc>
 80115aa:	4680      	mov	r8, r0
 80115ac:	b928      	cbnz	r0, 80115ba <__multadd+0x5a>
 80115ae:	4602      	mov	r2, r0
 80115b0:	4b0c      	ldr	r3, [pc, #48]	; (80115e4 <__multadd+0x84>)
 80115b2:	480d      	ldr	r0, [pc, #52]	; (80115e8 <__multadd+0x88>)
 80115b4:	21b5      	movs	r1, #181	; 0xb5
 80115b6:	f000 fdf3 	bl	80121a0 <__assert_func>
 80115ba:	6922      	ldr	r2, [r4, #16]
 80115bc:	3202      	adds	r2, #2
 80115be:	f104 010c 	add.w	r1, r4, #12
 80115c2:	0092      	lsls	r2, r2, #2
 80115c4:	300c      	adds	r0, #12
 80115c6:	f7fe f811 	bl	800f5ec <memcpy>
 80115ca:	4621      	mov	r1, r4
 80115cc:	4638      	mov	r0, r7
 80115ce:	f7ff ffa5 	bl	801151c <_Bfree>
 80115d2:	4644      	mov	r4, r8
 80115d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115d8:	3501      	adds	r5, #1
 80115da:	615e      	str	r6, [r3, #20]
 80115dc:	6125      	str	r5, [r4, #16]
 80115de:	4620      	mov	r0, r4
 80115e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e4:	08012b07 	.word	0x08012b07
 80115e8:	08012b78 	.word	0x08012b78

080115ec <__hi0bits>:
 80115ec:	0c03      	lsrs	r3, r0, #16
 80115ee:	041b      	lsls	r3, r3, #16
 80115f0:	b9d3      	cbnz	r3, 8011628 <__hi0bits+0x3c>
 80115f2:	0400      	lsls	r0, r0, #16
 80115f4:	2310      	movs	r3, #16
 80115f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80115fa:	bf04      	itt	eq
 80115fc:	0200      	lsleq	r0, r0, #8
 80115fe:	3308      	addeq	r3, #8
 8011600:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011604:	bf04      	itt	eq
 8011606:	0100      	lsleq	r0, r0, #4
 8011608:	3304      	addeq	r3, #4
 801160a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801160e:	bf04      	itt	eq
 8011610:	0080      	lsleq	r0, r0, #2
 8011612:	3302      	addeq	r3, #2
 8011614:	2800      	cmp	r0, #0
 8011616:	db05      	blt.n	8011624 <__hi0bits+0x38>
 8011618:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801161c:	f103 0301 	add.w	r3, r3, #1
 8011620:	bf08      	it	eq
 8011622:	2320      	moveq	r3, #32
 8011624:	4618      	mov	r0, r3
 8011626:	4770      	bx	lr
 8011628:	2300      	movs	r3, #0
 801162a:	e7e4      	b.n	80115f6 <__hi0bits+0xa>

0801162c <__lo0bits>:
 801162c:	6803      	ldr	r3, [r0, #0]
 801162e:	f013 0207 	ands.w	r2, r3, #7
 8011632:	4601      	mov	r1, r0
 8011634:	d00b      	beq.n	801164e <__lo0bits+0x22>
 8011636:	07da      	lsls	r2, r3, #31
 8011638:	d423      	bmi.n	8011682 <__lo0bits+0x56>
 801163a:	0798      	lsls	r0, r3, #30
 801163c:	bf49      	itett	mi
 801163e:	085b      	lsrmi	r3, r3, #1
 8011640:	089b      	lsrpl	r3, r3, #2
 8011642:	2001      	movmi	r0, #1
 8011644:	600b      	strmi	r3, [r1, #0]
 8011646:	bf5c      	itt	pl
 8011648:	600b      	strpl	r3, [r1, #0]
 801164a:	2002      	movpl	r0, #2
 801164c:	4770      	bx	lr
 801164e:	b298      	uxth	r0, r3
 8011650:	b9a8      	cbnz	r0, 801167e <__lo0bits+0x52>
 8011652:	0c1b      	lsrs	r3, r3, #16
 8011654:	2010      	movs	r0, #16
 8011656:	b2da      	uxtb	r2, r3
 8011658:	b90a      	cbnz	r2, 801165e <__lo0bits+0x32>
 801165a:	3008      	adds	r0, #8
 801165c:	0a1b      	lsrs	r3, r3, #8
 801165e:	071a      	lsls	r2, r3, #28
 8011660:	bf04      	itt	eq
 8011662:	091b      	lsreq	r3, r3, #4
 8011664:	3004      	addeq	r0, #4
 8011666:	079a      	lsls	r2, r3, #30
 8011668:	bf04      	itt	eq
 801166a:	089b      	lsreq	r3, r3, #2
 801166c:	3002      	addeq	r0, #2
 801166e:	07da      	lsls	r2, r3, #31
 8011670:	d403      	bmi.n	801167a <__lo0bits+0x4e>
 8011672:	085b      	lsrs	r3, r3, #1
 8011674:	f100 0001 	add.w	r0, r0, #1
 8011678:	d005      	beq.n	8011686 <__lo0bits+0x5a>
 801167a:	600b      	str	r3, [r1, #0]
 801167c:	4770      	bx	lr
 801167e:	4610      	mov	r0, r2
 8011680:	e7e9      	b.n	8011656 <__lo0bits+0x2a>
 8011682:	2000      	movs	r0, #0
 8011684:	4770      	bx	lr
 8011686:	2020      	movs	r0, #32
 8011688:	4770      	bx	lr
	...

0801168c <__i2b>:
 801168c:	b510      	push	{r4, lr}
 801168e:	460c      	mov	r4, r1
 8011690:	2101      	movs	r1, #1
 8011692:	f7ff ff03 	bl	801149c <_Balloc>
 8011696:	4602      	mov	r2, r0
 8011698:	b928      	cbnz	r0, 80116a6 <__i2b+0x1a>
 801169a:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <__i2b+0x24>)
 801169c:	4805      	ldr	r0, [pc, #20]	; (80116b4 <__i2b+0x28>)
 801169e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116a2:	f000 fd7d 	bl	80121a0 <__assert_func>
 80116a6:	2301      	movs	r3, #1
 80116a8:	6144      	str	r4, [r0, #20]
 80116aa:	6103      	str	r3, [r0, #16]
 80116ac:	bd10      	pop	{r4, pc}
 80116ae:	bf00      	nop
 80116b0:	08012b07 	.word	0x08012b07
 80116b4:	08012b78 	.word	0x08012b78

080116b8 <__multiply>:
 80116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116bc:	4691      	mov	r9, r2
 80116be:	690a      	ldr	r2, [r1, #16]
 80116c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	bfb8      	it	lt
 80116c8:	460b      	movlt	r3, r1
 80116ca:	460c      	mov	r4, r1
 80116cc:	bfbc      	itt	lt
 80116ce:	464c      	movlt	r4, r9
 80116d0:	4699      	movlt	r9, r3
 80116d2:	6927      	ldr	r7, [r4, #16]
 80116d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80116d8:	68a3      	ldr	r3, [r4, #8]
 80116da:	6861      	ldr	r1, [r4, #4]
 80116dc:	eb07 060a 	add.w	r6, r7, sl
 80116e0:	42b3      	cmp	r3, r6
 80116e2:	b085      	sub	sp, #20
 80116e4:	bfb8      	it	lt
 80116e6:	3101      	addlt	r1, #1
 80116e8:	f7ff fed8 	bl	801149c <_Balloc>
 80116ec:	b930      	cbnz	r0, 80116fc <__multiply+0x44>
 80116ee:	4602      	mov	r2, r0
 80116f0:	4b44      	ldr	r3, [pc, #272]	; (8011804 <__multiply+0x14c>)
 80116f2:	4845      	ldr	r0, [pc, #276]	; (8011808 <__multiply+0x150>)
 80116f4:	f240 115d 	movw	r1, #349	; 0x15d
 80116f8:	f000 fd52 	bl	80121a0 <__assert_func>
 80116fc:	f100 0514 	add.w	r5, r0, #20
 8011700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011704:	462b      	mov	r3, r5
 8011706:	2200      	movs	r2, #0
 8011708:	4543      	cmp	r3, r8
 801170a:	d321      	bcc.n	8011750 <__multiply+0x98>
 801170c:	f104 0314 	add.w	r3, r4, #20
 8011710:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011714:	f109 0314 	add.w	r3, r9, #20
 8011718:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801171c:	9202      	str	r2, [sp, #8]
 801171e:	1b3a      	subs	r2, r7, r4
 8011720:	3a15      	subs	r2, #21
 8011722:	f022 0203 	bic.w	r2, r2, #3
 8011726:	3204      	adds	r2, #4
 8011728:	f104 0115 	add.w	r1, r4, #21
 801172c:	428f      	cmp	r7, r1
 801172e:	bf38      	it	cc
 8011730:	2204      	movcc	r2, #4
 8011732:	9201      	str	r2, [sp, #4]
 8011734:	9a02      	ldr	r2, [sp, #8]
 8011736:	9303      	str	r3, [sp, #12]
 8011738:	429a      	cmp	r2, r3
 801173a:	d80c      	bhi.n	8011756 <__multiply+0x9e>
 801173c:	2e00      	cmp	r6, #0
 801173e:	dd03      	ble.n	8011748 <__multiply+0x90>
 8011740:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011744:	2b00      	cmp	r3, #0
 8011746:	d05a      	beq.n	80117fe <__multiply+0x146>
 8011748:	6106      	str	r6, [r0, #16]
 801174a:	b005      	add	sp, #20
 801174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011750:	f843 2b04 	str.w	r2, [r3], #4
 8011754:	e7d8      	b.n	8011708 <__multiply+0x50>
 8011756:	f8b3 a000 	ldrh.w	sl, [r3]
 801175a:	f1ba 0f00 	cmp.w	sl, #0
 801175e:	d024      	beq.n	80117aa <__multiply+0xf2>
 8011760:	f104 0e14 	add.w	lr, r4, #20
 8011764:	46a9      	mov	r9, r5
 8011766:	f04f 0c00 	mov.w	ip, #0
 801176a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801176e:	f8d9 1000 	ldr.w	r1, [r9]
 8011772:	fa1f fb82 	uxth.w	fp, r2
 8011776:	b289      	uxth	r1, r1
 8011778:	fb0a 110b 	mla	r1, sl, fp, r1
 801177c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011780:	f8d9 2000 	ldr.w	r2, [r9]
 8011784:	4461      	add	r1, ip
 8011786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801178a:	fb0a c20b 	mla	r2, sl, fp, ip
 801178e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011792:	b289      	uxth	r1, r1
 8011794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011798:	4577      	cmp	r7, lr
 801179a:	f849 1b04 	str.w	r1, [r9], #4
 801179e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117a2:	d8e2      	bhi.n	801176a <__multiply+0xb2>
 80117a4:	9a01      	ldr	r2, [sp, #4]
 80117a6:	f845 c002 	str.w	ip, [r5, r2]
 80117aa:	9a03      	ldr	r2, [sp, #12]
 80117ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80117b0:	3304      	adds	r3, #4
 80117b2:	f1b9 0f00 	cmp.w	r9, #0
 80117b6:	d020      	beq.n	80117fa <__multiply+0x142>
 80117b8:	6829      	ldr	r1, [r5, #0]
 80117ba:	f104 0c14 	add.w	ip, r4, #20
 80117be:	46ae      	mov	lr, r5
 80117c0:	f04f 0a00 	mov.w	sl, #0
 80117c4:	f8bc b000 	ldrh.w	fp, [ip]
 80117c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80117cc:	fb09 220b 	mla	r2, r9, fp, r2
 80117d0:	4492      	add	sl, r2
 80117d2:	b289      	uxth	r1, r1
 80117d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80117d8:	f84e 1b04 	str.w	r1, [lr], #4
 80117dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80117e0:	f8be 1000 	ldrh.w	r1, [lr]
 80117e4:	0c12      	lsrs	r2, r2, #16
 80117e6:	fb09 1102 	mla	r1, r9, r2, r1
 80117ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80117ee:	4567      	cmp	r7, ip
 80117f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80117f4:	d8e6      	bhi.n	80117c4 <__multiply+0x10c>
 80117f6:	9a01      	ldr	r2, [sp, #4]
 80117f8:	50a9      	str	r1, [r5, r2]
 80117fa:	3504      	adds	r5, #4
 80117fc:	e79a      	b.n	8011734 <__multiply+0x7c>
 80117fe:	3e01      	subs	r6, #1
 8011800:	e79c      	b.n	801173c <__multiply+0x84>
 8011802:	bf00      	nop
 8011804:	08012b07 	.word	0x08012b07
 8011808:	08012b78 	.word	0x08012b78

0801180c <__pow5mult>:
 801180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011810:	4615      	mov	r5, r2
 8011812:	f012 0203 	ands.w	r2, r2, #3
 8011816:	4606      	mov	r6, r0
 8011818:	460f      	mov	r7, r1
 801181a:	d007      	beq.n	801182c <__pow5mult+0x20>
 801181c:	4c25      	ldr	r4, [pc, #148]	; (80118b4 <__pow5mult+0xa8>)
 801181e:	3a01      	subs	r2, #1
 8011820:	2300      	movs	r3, #0
 8011822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011826:	f7ff fe9b 	bl	8011560 <__multadd>
 801182a:	4607      	mov	r7, r0
 801182c:	10ad      	asrs	r5, r5, #2
 801182e:	d03d      	beq.n	80118ac <__pow5mult+0xa0>
 8011830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011832:	b97c      	cbnz	r4, 8011854 <__pow5mult+0x48>
 8011834:	2010      	movs	r0, #16
 8011836:	f7ff fe29 	bl	801148c <malloc>
 801183a:	4602      	mov	r2, r0
 801183c:	6270      	str	r0, [r6, #36]	; 0x24
 801183e:	b928      	cbnz	r0, 801184c <__pow5mult+0x40>
 8011840:	4b1d      	ldr	r3, [pc, #116]	; (80118b8 <__pow5mult+0xac>)
 8011842:	481e      	ldr	r0, [pc, #120]	; (80118bc <__pow5mult+0xb0>)
 8011844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011848:	f000 fcaa 	bl	80121a0 <__assert_func>
 801184c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011850:	6004      	str	r4, [r0, #0]
 8011852:	60c4      	str	r4, [r0, #12]
 8011854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801185c:	b94c      	cbnz	r4, 8011872 <__pow5mult+0x66>
 801185e:	f240 2171 	movw	r1, #625	; 0x271
 8011862:	4630      	mov	r0, r6
 8011864:	f7ff ff12 	bl	801168c <__i2b>
 8011868:	2300      	movs	r3, #0
 801186a:	f8c8 0008 	str.w	r0, [r8, #8]
 801186e:	4604      	mov	r4, r0
 8011870:	6003      	str	r3, [r0, #0]
 8011872:	f04f 0900 	mov.w	r9, #0
 8011876:	07eb      	lsls	r3, r5, #31
 8011878:	d50a      	bpl.n	8011890 <__pow5mult+0x84>
 801187a:	4639      	mov	r1, r7
 801187c:	4622      	mov	r2, r4
 801187e:	4630      	mov	r0, r6
 8011880:	f7ff ff1a 	bl	80116b8 <__multiply>
 8011884:	4639      	mov	r1, r7
 8011886:	4680      	mov	r8, r0
 8011888:	4630      	mov	r0, r6
 801188a:	f7ff fe47 	bl	801151c <_Bfree>
 801188e:	4647      	mov	r7, r8
 8011890:	106d      	asrs	r5, r5, #1
 8011892:	d00b      	beq.n	80118ac <__pow5mult+0xa0>
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	b938      	cbnz	r0, 80118a8 <__pow5mult+0x9c>
 8011898:	4622      	mov	r2, r4
 801189a:	4621      	mov	r1, r4
 801189c:	4630      	mov	r0, r6
 801189e:	f7ff ff0b 	bl	80116b8 <__multiply>
 80118a2:	6020      	str	r0, [r4, #0]
 80118a4:	f8c0 9000 	str.w	r9, [r0]
 80118a8:	4604      	mov	r4, r0
 80118aa:	e7e4      	b.n	8011876 <__pow5mult+0x6a>
 80118ac:	4638      	mov	r0, r7
 80118ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b2:	bf00      	nop
 80118b4:	08012cc8 	.word	0x08012cc8
 80118b8:	08012a95 	.word	0x08012a95
 80118bc:	08012b78 	.word	0x08012b78

080118c0 <__lshift>:
 80118c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c4:	460c      	mov	r4, r1
 80118c6:	6849      	ldr	r1, [r1, #4]
 80118c8:	6923      	ldr	r3, [r4, #16]
 80118ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	4607      	mov	r7, r0
 80118d2:	4691      	mov	r9, r2
 80118d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118d8:	f108 0601 	add.w	r6, r8, #1
 80118dc:	42b3      	cmp	r3, r6
 80118de:	db0b      	blt.n	80118f8 <__lshift+0x38>
 80118e0:	4638      	mov	r0, r7
 80118e2:	f7ff fddb 	bl	801149c <_Balloc>
 80118e6:	4605      	mov	r5, r0
 80118e8:	b948      	cbnz	r0, 80118fe <__lshift+0x3e>
 80118ea:	4602      	mov	r2, r0
 80118ec:	4b2a      	ldr	r3, [pc, #168]	; (8011998 <__lshift+0xd8>)
 80118ee:	482b      	ldr	r0, [pc, #172]	; (801199c <__lshift+0xdc>)
 80118f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80118f4:	f000 fc54 	bl	80121a0 <__assert_func>
 80118f8:	3101      	adds	r1, #1
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	e7ee      	b.n	80118dc <__lshift+0x1c>
 80118fe:	2300      	movs	r3, #0
 8011900:	f100 0114 	add.w	r1, r0, #20
 8011904:	f100 0210 	add.w	r2, r0, #16
 8011908:	4618      	mov	r0, r3
 801190a:	4553      	cmp	r3, sl
 801190c:	db37      	blt.n	801197e <__lshift+0xbe>
 801190e:	6920      	ldr	r0, [r4, #16]
 8011910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011914:	f104 0314 	add.w	r3, r4, #20
 8011918:	f019 091f 	ands.w	r9, r9, #31
 801191c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011924:	d02f      	beq.n	8011986 <__lshift+0xc6>
 8011926:	f1c9 0e20 	rsb	lr, r9, #32
 801192a:	468a      	mov	sl, r1
 801192c:	f04f 0c00 	mov.w	ip, #0
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	fa02 f209 	lsl.w	r2, r2, r9
 8011936:	ea42 020c 	orr.w	r2, r2, ip
 801193a:	f84a 2b04 	str.w	r2, [sl], #4
 801193e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011942:	4298      	cmp	r0, r3
 8011944:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011948:	d8f2      	bhi.n	8011930 <__lshift+0x70>
 801194a:	1b03      	subs	r3, r0, r4
 801194c:	3b15      	subs	r3, #21
 801194e:	f023 0303 	bic.w	r3, r3, #3
 8011952:	3304      	adds	r3, #4
 8011954:	f104 0215 	add.w	r2, r4, #21
 8011958:	4290      	cmp	r0, r2
 801195a:	bf38      	it	cc
 801195c:	2304      	movcc	r3, #4
 801195e:	f841 c003 	str.w	ip, [r1, r3]
 8011962:	f1bc 0f00 	cmp.w	ip, #0
 8011966:	d001      	beq.n	801196c <__lshift+0xac>
 8011968:	f108 0602 	add.w	r6, r8, #2
 801196c:	3e01      	subs	r6, #1
 801196e:	4638      	mov	r0, r7
 8011970:	612e      	str	r6, [r5, #16]
 8011972:	4621      	mov	r1, r4
 8011974:	f7ff fdd2 	bl	801151c <_Bfree>
 8011978:	4628      	mov	r0, r5
 801197a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801197e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011982:	3301      	adds	r3, #1
 8011984:	e7c1      	b.n	801190a <__lshift+0x4a>
 8011986:	3904      	subs	r1, #4
 8011988:	f853 2b04 	ldr.w	r2, [r3], #4
 801198c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011990:	4298      	cmp	r0, r3
 8011992:	d8f9      	bhi.n	8011988 <__lshift+0xc8>
 8011994:	e7ea      	b.n	801196c <__lshift+0xac>
 8011996:	bf00      	nop
 8011998:	08012b07 	.word	0x08012b07
 801199c:	08012b78 	.word	0x08012b78

080119a0 <__mcmp>:
 80119a0:	b530      	push	{r4, r5, lr}
 80119a2:	6902      	ldr	r2, [r0, #16]
 80119a4:	690c      	ldr	r4, [r1, #16]
 80119a6:	1b12      	subs	r2, r2, r4
 80119a8:	d10e      	bne.n	80119c8 <__mcmp+0x28>
 80119aa:	f100 0314 	add.w	r3, r0, #20
 80119ae:	3114      	adds	r1, #20
 80119b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80119b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80119b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80119bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80119c0:	42a5      	cmp	r5, r4
 80119c2:	d003      	beq.n	80119cc <__mcmp+0x2c>
 80119c4:	d305      	bcc.n	80119d2 <__mcmp+0x32>
 80119c6:	2201      	movs	r2, #1
 80119c8:	4610      	mov	r0, r2
 80119ca:	bd30      	pop	{r4, r5, pc}
 80119cc:	4283      	cmp	r3, r0
 80119ce:	d3f3      	bcc.n	80119b8 <__mcmp+0x18>
 80119d0:	e7fa      	b.n	80119c8 <__mcmp+0x28>
 80119d2:	f04f 32ff 	mov.w	r2, #4294967295
 80119d6:	e7f7      	b.n	80119c8 <__mcmp+0x28>

080119d8 <__mdiff>:
 80119d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119dc:	460c      	mov	r4, r1
 80119de:	4606      	mov	r6, r0
 80119e0:	4611      	mov	r1, r2
 80119e2:	4620      	mov	r0, r4
 80119e4:	4690      	mov	r8, r2
 80119e6:	f7ff ffdb 	bl	80119a0 <__mcmp>
 80119ea:	1e05      	subs	r5, r0, #0
 80119ec:	d110      	bne.n	8011a10 <__mdiff+0x38>
 80119ee:	4629      	mov	r1, r5
 80119f0:	4630      	mov	r0, r6
 80119f2:	f7ff fd53 	bl	801149c <_Balloc>
 80119f6:	b930      	cbnz	r0, 8011a06 <__mdiff+0x2e>
 80119f8:	4b3a      	ldr	r3, [pc, #232]	; (8011ae4 <__mdiff+0x10c>)
 80119fa:	4602      	mov	r2, r0
 80119fc:	f240 2132 	movw	r1, #562	; 0x232
 8011a00:	4839      	ldr	r0, [pc, #228]	; (8011ae8 <__mdiff+0x110>)
 8011a02:	f000 fbcd 	bl	80121a0 <__assert_func>
 8011a06:	2301      	movs	r3, #1
 8011a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a10:	bfa4      	itt	ge
 8011a12:	4643      	movge	r3, r8
 8011a14:	46a0      	movge	r8, r4
 8011a16:	4630      	mov	r0, r6
 8011a18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a1c:	bfa6      	itte	ge
 8011a1e:	461c      	movge	r4, r3
 8011a20:	2500      	movge	r5, #0
 8011a22:	2501      	movlt	r5, #1
 8011a24:	f7ff fd3a 	bl	801149c <_Balloc>
 8011a28:	b920      	cbnz	r0, 8011a34 <__mdiff+0x5c>
 8011a2a:	4b2e      	ldr	r3, [pc, #184]	; (8011ae4 <__mdiff+0x10c>)
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a32:	e7e5      	b.n	8011a00 <__mdiff+0x28>
 8011a34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a38:	6926      	ldr	r6, [r4, #16]
 8011a3a:	60c5      	str	r5, [r0, #12]
 8011a3c:	f104 0914 	add.w	r9, r4, #20
 8011a40:	f108 0514 	add.w	r5, r8, #20
 8011a44:	f100 0e14 	add.w	lr, r0, #20
 8011a48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011a4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a50:	f108 0210 	add.w	r2, r8, #16
 8011a54:	46f2      	mov	sl, lr
 8011a56:	2100      	movs	r1, #0
 8011a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011a60:	fa1f f883 	uxth.w	r8, r3
 8011a64:	fa11 f18b 	uxtah	r1, r1, fp
 8011a68:	0c1b      	lsrs	r3, r3, #16
 8011a6a:	eba1 0808 	sub.w	r8, r1, r8
 8011a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011a76:	fa1f f888 	uxth.w	r8, r8
 8011a7a:	1419      	asrs	r1, r3, #16
 8011a7c:	454e      	cmp	r6, r9
 8011a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011a82:	f84a 3b04 	str.w	r3, [sl], #4
 8011a86:	d8e7      	bhi.n	8011a58 <__mdiff+0x80>
 8011a88:	1b33      	subs	r3, r6, r4
 8011a8a:	3b15      	subs	r3, #21
 8011a8c:	f023 0303 	bic.w	r3, r3, #3
 8011a90:	3304      	adds	r3, #4
 8011a92:	3415      	adds	r4, #21
 8011a94:	42a6      	cmp	r6, r4
 8011a96:	bf38      	it	cc
 8011a98:	2304      	movcc	r3, #4
 8011a9a:	441d      	add	r5, r3
 8011a9c:	4473      	add	r3, lr
 8011a9e:	469e      	mov	lr, r3
 8011aa0:	462e      	mov	r6, r5
 8011aa2:	4566      	cmp	r6, ip
 8011aa4:	d30e      	bcc.n	8011ac4 <__mdiff+0xec>
 8011aa6:	f10c 0203 	add.w	r2, ip, #3
 8011aaa:	1b52      	subs	r2, r2, r5
 8011aac:	f022 0203 	bic.w	r2, r2, #3
 8011ab0:	3d03      	subs	r5, #3
 8011ab2:	45ac      	cmp	ip, r5
 8011ab4:	bf38      	it	cc
 8011ab6:	2200      	movcc	r2, #0
 8011ab8:	441a      	add	r2, r3
 8011aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011abe:	b17b      	cbz	r3, 8011ae0 <__mdiff+0x108>
 8011ac0:	6107      	str	r7, [r0, #16]
 8011ac2:	e7a3      	b.n	8011a0c <__mdiff+0x34>
 8011ac4:	f856 8b04 	ldr.w	r8, [r6], #4
 8011ac8:	fa11 f288 	uxtah	r2, r1, r8
 8011acc:	1414      	asrs	r4, r2, #16
 8011ace:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011ad2:	b292      	uxth	r2, r2
 8011ad4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ad8:	f84e 2b04 	str.w	r2, [lr], #4
 8011adc:	1421      	asrs	r1, r4, #16
 8011ade:	e7e0      	b.n	8011aa2 <__mdiff+0xca>
 8011ae0:	3f01      	subs	r7, #1
 8011ae2:	e7ea      	b.n	8011aba <__mdiff+0xe2>
 8011ae4:	08012b07 	.word	0x08012b07
 8011ae8:	08012b78 	.word	0x08012b78

08011aec <__d2b>:
 8011aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011af0:	4689      	mov	r9, r1
 8011af2:	2101      	movs	r1, #1
 8011af4:	ec57 6b10 	vmov	r6, r7, d0
 8011af8:	4690      	mov	r8, r2
 8011afa:	f7ff fccf 	bl	801149c <_Balloc>
 8011afe:	4604      	mov	r4, r0
 8011b00:	b930      	cbnz	r0, 8011b10 <__d2b+0x24>
 8011b02:	4602      	mov	r2, r0
 8011b04:	4b25      	ldr	r3, [pc, #148]	; (8011b9c <__d2b+0xb0>)
 8011b06:	4826      	ldr	r0, [pc, #152]	; (8011ba0 <__d2b+0xb4>)
 8011b08:	f240 310a 	movw	r1, #778	; 0x30a
 8011b0c:	f000 fb48 	bl	80121a0 <__assert_func>
 8011b10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b18:	bb35      	cbnz	r5, 8011b68 <__d2b+0x7c>
 8011b1a:	2e00      	cmp	r6, #0
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	d028      	beq.n	8011b72 <__d2b+0x86>
 8011b20:	4668      	mov	r0, sp
 8011b22:	9600      	str	r6, [sp, #0]
 8011b24:	f7ff fd82 	bl	801162c <__lo0bits>
 8011b28:	9900      	ldr	r1, [sp, #0]
 8011b2a:	b300      	cbz	r0, 8011b6e <__d2b+0x82>
 8011b2c:	9a01      	ldr	r2, [sp, #4]
 8011b2e:	f1c0 0320 	rsb	r3, r0, #32
 8011b32:	fa02 f303 	lsl.w	r3, r2, r3
 8011b36:	430b      	orrs	r3, r1
 8011b38:	40c2      	lsrs	r2, r0
 8011b3a:	6163      	str	r3, [r4, #20]
 8011b3c:	9201      	str	r2, [sp, #4]
 8011b3e:	9b01      	ldr	r3, [sp, #4]
 8011b40:	61a3      	str	r3, [r4, #24]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	bf14      	ite	ne
 8011b46:	2202      	movne	r2, #2
 8011b48:	2201      	moveq	r2, #1
 8011b4a:	6122      	str	r2, [r4, #16]
 8011b4c:	b1d5      	cbz	r5, 8011b84 <__d2b+0x98>
 8011b4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b52:	4405      	add	r5, r0
 8011b54:	f8c9 5000 	str.w	r5, [r9]
 8011b58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b5c:	f8c8 0000 	str.w	r0, [r8]
 8011b60:	4620      	mov	r0, r4
 8011b62:	b003      	add	sp, #12
 8011b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b6c:	e7d5      	b.n	8011b1a <__d2b+0x2e>
 8011b6e:	6161      	str	r1, [r4, #20]
 8011b70:	e7e5      	b.n	8011b3e <__d2b+0x52>
 8011b72:	a801      	add	r0, sp, #4
 8011b74:	f7ff fd5a 	bl	801162c <__lo0bits>
 8011b78:	9b01      	ldr	r3, [sp, #4]
 8011b7a:	6163      	str	r3, [r4, #20]
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	6122      	str	r2, [r4, #16]
 8011b80:	3020      	adds	r0, #32
 8011b82:	e7e3      	b.n	8011b4c <__d2b+0x60>
 8011b84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b8c:	f8c9 0000 	str.w	r0, [r9]
 8011b90:	6918      	ldr	r0, [r3, #16]
 8011b92:	f7ff fd2b 	bl	80115ec <__hi0bits>
 8011b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b9a:	e7df      	b.n	8011b5c <__d2b+0x70>
 8011b9c:	08012b07 	.word	0x08012b07
 8011ba0:	08012b78 	.word	0x08012b78

08011ba4 <_calloc_r>:
 8011ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ba6:	fba1 2402 	umull	r2, r4, r1, r2
 8011baa:	b94c      	cbnz	r4, 8011bc0 <_calloc_r+0x1c>
 8011bac:	4611      	mov	r1, r2
 8011bae:	9201      	str	r2, [sp, #4]
 8011bb0:	f000 f87a 	bl	8011ca8 <_malloc_r>
 8011bb4:	9a01      	ldr	r2, [sp, #4]
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	b930      	cbnz	r0, 8011bc8 <_calloc_r+0x24>
 8011bba:	4628      	mov	r0, r5
 8011bbc:	b003      	add	sp, #12
 8011bbe:	bd30      	pop	{r4, r5, pc}
 8011bc0:	220c      	movs	r2, #12
 8011bc2:	6002      	str	r2, [r0, #0]
 8011bc4:	2500      	movs	r5, #0
 8011bc6:	e7f8      	b.n	8011bba <_calloc_r+0x16>
 8011bc8:	4621      	mov	r1, r4
 8011bca:	f7fd fd1d 	bl	800f608 <memset>
 8011bce:	e7f4      	b.n	8011bba <_calloc_r+0x16>

08011bd0 <_free_r>:
 8011bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bd2:	2900      	cmp	r1, #0
 8011bd4:	d044      	beq.n	8011c60 <_free_r+0x90>
 8011bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bda:	9001      	str	r0, [sp, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f1a1 0404 	sub.w	r4, r1, #4
 8011be2:	bfb8      	it	lt
 8011be4:	18e4      	addlt	r4, r4, r3
 8011be6:	f000 fb61 	bl	80122ac <__malloc_lock>
 8011bea:	4a1e      	ldr	r2, [pc, #120]	; (8011c64 <_free_r+0x94>)
 8011bec:	9801      	ldr	r0, [sp, #4]
 8011bee:	6813      	ldr	r3, [r2, #0]
 8011bf0:	b933      	cbnz	r3, 8011c00 <_free_r+0x30>
 8011bf2:	6063      	str	r3, [r4, #4]
 8011bf4:	6014      	str	r4, [r2, #0]
 8011bf6:	b003      	add	sp, #12
 8011bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bfc:	f000 bb5c 	b.w	80122b8 <__malloc_unlock>
 8011c00:	42a3      	cmp	r3, r4
 8011c02:	d908      	bls.n	8011c16 <_free_r+0x46>
 8011c04:	6825      	ldr	r5, [r4, #0]
 8011c06:	1961      	adds	r1, r4, r5
 8011c08:	428b      	cmp	r3, r1
 8011c0a:	bf01      	itttt	eq
 8011c0c:	6819      	ldreq	r1, [r3, #0]
 8011c0e:	685b      	ldreq	r3, [r3, #4]
 8011c10:	1949      	addeq	r1, r1, r5
 8011c12:	6021      	streq	r1, [r4, #0]
 8011c14:	e7ed      	b.n	8011bf2 <_free_r+0x22>
 8011c16:	461a      	mov	r2, r3
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	b10b      	cbz	r3, 8011c20 <_free_r+0x50>
 8011c1c:	42a3      	cmp	r3, r4
 8011c1e:	d9fa      	bls.n	8011c16 <_free_r+0x46>
 8011c20:	6811      	ldr	r1, [r2, #0]
 8011c22:	1855      	adds	r5, r2, r1
 8011c24:	42a5      	cmp	r5, r4
 8011c26:	d10b      	bne.n	8011c40 <_free_r+0x70>
 8011c28:	6824      	ldr	r4, [r4, #0]
 8011c2a:	4421      	add	r1, r4
 8011c2c:	1854      	adds	r4, r2, r1
 8011c2e:	42a3      	cmp	r3, r4
 8011c30:	6011      	str	r1, [r2, #0]
 8011c32:	d1e0      	bne.n	8011bf6 <_free_r+0x26>
 8011c34:	681c      	ldr	r4, [r3, #0]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	6053      	str	r3, [r2, #4]
 8011c3a:	4421      	add	r1, r4
 8011c3c:	6011      	str	r1, [r2, #0]
 8011c3e:	e7da      	b.n	8011bf6 <_free_r+0x26>
 8011c40:	d902      	bls.n	8011c48 <_free_r+0x78>
 8011c42:	230c      	movs	r3, #12
 8011c44:	6003      	str	r3, [r0, #0]
 8011c46:	e7d6      	b.n	8011bf6 <_free_r+0x26>
 8011c48:	6825      	ldr	r5, [r4, #0]
 8011c4a:	1961      	adds	r1, r4, r5
 8011c4c:	428b      	cmp	r3, r1
 8011c4e:	bf04      	itt	eq
 8011c50:	6819      	ldreq	r1, [r3, #0]
 8011c52:	685b      	ldreq	r3, [r3, #4]
 8011c54:	6063      	str	r3, [r4, #4]
 8011c56:	bf04      	itt	eq
 8011c58:	1949      	addeq	r1, r1, r5
 8011c5a:	6021      	streq	r1, [r4, #0]
 8011c5c:	6054      	str	r4, [r2, #4]
 8011c5e:	e7ca      	b.n	8011bf6 <_free_r+0x26>
 8011c60:	b003      	add	sp, #12
 8011c62:	bd30      	pop	{r4, r5, pc}
 8011c64:	20010dfc 	.word	0x20010dfc

08011c68 <sbrk_aligned>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	4e0e      	ldr	r6, [pc, #56]	; (8011ca4 <sbrk_aligned+0x3c>)
 8011c6c:	460c      	mov	r4, r1
 8011c6e:	6831      	ldr	r1, [r6, #0]
 8011c70:	4605      	mov	r5, r0
 8011c72:	b911      	cbnz	r1, 8011c7a <sbrk_aligned+0x12>
 8011c74:	f000 fa2e 	bl	80120d4 <_sbrk_r>
 8011c78:	6030      	str	r0, [r6, #0]
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	f000 fa29 	bl	80120d4 <_sbrk_r>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	d00a      	beq.n	8011c9c <sbrk_aligned+0x34>
 8011c86:	1cc4      	adds	r4, r0, #3
 8011c88:	f024 0403 	bic.w	r4, r4, #3
 8011c8c:	42a0      	cmp	r0, r4
 8011c8e:	d007      	beq.n	8011ca0 <sbrk_aligned+0x38>
 8011c90:	1a21      	subs	r1, r4, r0
 8011c92:	4628      	mov	r0, r5
 8011c94:	f000 fa1e 	bl	80120d4 <_sbrk_r>
 8011c98:	3001      	adds	r0, #1
 8011c9a:	d101      	bne.n	8011ca0 <sbrk_aligned+0x38>
 8011c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	20010e00 	.word	0x20010e00

08011ca8 <_malloc_r>:
 8011ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cac:	1ccd      	adds	r5, r1, #3
 8011cae:	f025 0503 	bic.w	r5, r5, #3
 8011cb2:	3508      	adds	r5, #8
 8011cb4:	2d0c      	cmp	r5, #12
 8011cb6:	bf38      	it	cc
 8011cb8:	250c      	movcc	r5, #12
 8011cba:	2d00      	cmp	r5, #0
 8011cbc:	4607      	mov	r7, r0
 8011cbe:	db01      	blt.n	8011cc4 <_malloc_r+0x1c>
 8011cc0:	42a9      	cmp	r1, r5
 8011cc2:	d905      	bls.n	8011cd0 <_malloc_r+0x28>
 8011cc4:	230c      	movs	r3, #12
 8011cc6:	603b      	str	r3, [r7, #0]
 8011cc8:	2600      	movs	r6, #0
 8011cca:	4630      	mov	r0, r6
 8011ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd0:	4e2e      	ldr	r6, [pc, #184]	; (8011d8c <_malloc_r+0xe4>)
 8011cd2:	f000 faeb 	bl	80122ac <__malloc_lock>
 8011cd6:	6833      	ldr	r3, [r6, #0]
 8011cd8:	461c      	mov	r4, r3
 8011cda:	bb34      	cbnz	r4, 8011d2a <_malloc_r+0x82>
 8011cdc:	4629      	mov	r1, r5
 8011cde:	4638      	mov	r0, r7
 8011ce0:	f7ff ffc2 	bl	8011c68 <sbrk_aligned>
 8011ce4:	1c43      	adds	r3, r0, #1
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	d14d      	bne.n	8011d86 <_malloc_r+0xde>
 8011cea:	6834      	ldr	r4, [r6, #0]
 8011cec:	4626      	mov	r6, r4
 8011cee:	2e00      	cmp	r6, #0
 8011cf0:	d140      	bne.n	8011d74 <_malloc_r+0xcc>
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	4631      	mov	r1, r6
 8011cf6:	4638      	mov	r0, r7
 8011cf8:	eb04 0803 	add.w	r8, r4, r3
 8011cfc:	f000 f9ea 	bl	80120d4 <_sbrk_r>
 8011d00:	4580      	cmp	r8, r0
 8011d02:	d13a      	bne.n	8011d7a <_malloc_r+0xd2>
 8011d04:	6821      	ldr	r1, [r4, #0]
 8011d06:	3503      	adds	r5, #3
 8011d08:	1a6d      	subs	r5, r5, r1
 8011d0a:	f025 0503 	bic.w	r5, r5, #3
 8011d0e:	3508      	adds	r5, #8
 8011d10:	2d0c      	cmp	r5, #12
 8011d12:	bf38      	it	cc
 8011d14:	250c      	movcc	r5, #12
 8011d16:	4629      	mov	r1, r5
 8011d18:	4638      	mov	r0, r7
 8011d1a:	f7ff ffa5 	bl	8011c68 <sbrk_aligned>
 8011d1e:	3001      	adds	r0, #1
 8011d20:	d02b      	beq.n	8011d7a <_malloc_r+0xd2>
 8011d22:	6823      	ldr	r3, [r4, #0]
 8011d24:	442b      	add	r3, r5
 8011d26:	6023      	str	r3, [r4, #0]
 8011d28:	e00e      	b.n	8011d48 <_malloc_r+0xa0>
 8011d2a:	6822      	ldr	r2, [r4, #0]
 8011d2c:	1b52      	subs	r2, r2, r5
 8011d2e:	d41e      	bmi.n	8011d6e <_malloc_r+0xc6>
 8011d30:	2a0b      	cmp	r2, #11
 8011d32:	d916      	bls.n	8011d62 <_malloc_r+0xba>
 8011d34:	1961      	adds	r1, r4, r5
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	6025      	str	r5, [r4, #0]
 8011d3a:	bf18      	it	ne
 8011d3c:	6059      	strne	r1, [r3, #4]
 8011d3e:	6863      	ldr	r3, [r4, #4]
 8011d40:	bf08      	it	eq
 8011d42:	6031      	streq	r1, [r6, #0]
 8011d44:	5162      	str	r2, [r4, r5]
 8011d46:	604b      	str	r3, [r1, #4]
 8011d48:	4638      	mov	r0, r7
 8011d4a:	f104 060b 	add.w	r6, r4, #11
 8011d4e:	f000 fab3 	bl	80122b8 <__malloc_unlock>
 8011d52:	f026 0607 	bic.w	r6, r6, #7
 8011d56:	1d23      	adds	r3, r4, #4
 8011d58:	1af2      	subs	r2, r6, r3
 8011d5a:	d0b6      	beq.n	8011cca <_malloc_r+0x22>
 8011d5c:	1b9b      	subs	r3, r3, r6
 8011d5e:	50a3      	str	r3, [r4, r2]
 8011d60:	e7b3      	b.n	8011cca <_malloc_r+0x22>
 8011d62:	6862      	ldr	r2, [r4, #4]
 8011d64:	42a3      	cmp	r3, r4
 8011d66:	bf0c      	ite	eq
 8011d68:	6032      	streq	r2, [r6, #0]
 8011d6a:	605a      	strne	r2, [r3, #4]
 8011d6c:	e7ec      	b.n	8011d48 <_malloc_r+0xa0>
 8011d6e:	4623      	mov	r3, r4
 8011d70:	6864      	ldr	r4, [r4, #4]
 8011d72:	e7b2      	b.n	8011cda <_malloc_r+0x32>
 8011d74:	4634      	mov	r4, r6
 8011d76:	6876      	ldr	r6, [r6, #4]
 8011d78:	e7b9      	b.n	8011cee <_malloc_r+0x46>
 8011d7a:	230c      	movs	r3, #12
 8011d7c:	603b      	str	r3, [r7, #0]
 8011d7e:	4638      	mov	r0, r7
 8011d80:	f000 fa9a 	bl	80122b8 <__malloc_unlock>
 8011d84:	e7a1      	b.n	8011cca <_malloc_r+0x22>
 8011d86:	6025      	str	r5, [r4, #0]
 8011d88:	e7de      	b.n	8011d48 <_malloc_r+0xa0>
 8011d8a:	bf00      	nop
 8011d8c:	20010dfc 	.word	0x20010dfc

08011d90 <__sfputc_r>:
 8011d90:	6893      	ldr	r3, [r2, #8]
 8011d92:	3b01      	subs	r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	b410      	push	{r4}
 8011d98:	6093      	str	r3, [r2, #8]
 8011d9a:	da08      	bge.n	8011dae <__sfputc_r+0x1e>
 8011d9c:	6994      	ldr	r4, [r2, #24]
 8011d9e:	42a3      	cmp	r3, r4
 8011da0:	db01      	blt.n	8011da6 <__sfputc_r+0x16>
 8011da2:	290a      	cmp	r1, #10
 8011da4:	d103      	bne.n	8011dae <__sfputc_r+0x1e>
 8011da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011daa:	f7fe ba11 	b.w	80101d0 <__swbuf_r>
 8011dae:	6813      	ldr	r3, [r2, #0]
 8011db0:	1c58      	adds	r0, r3, #1
 8011db2:	6010      	str	r0, [r2, #0]
 8011db4:	7019      	strb	r1, [r3, #0]
 8011db6:	4608      	mov	r0, r1
 8011db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dbc:	4770      	bx	lr

08011dbe <__sfputs_r>:
 8011dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc0:	4606      	mov	r6, r0
 8011dc2:	460f      	mov	r7, r1
 8011dc4:	4614      	mov	r4, r2
 8011dc6:	18d5      	adds	r5, r2, r3
 8011dc8:	42ac      	cmp	r4, r5
 8011dca:	d101      	bne.n	8011dd0 <__sfputs_r+0x12>
 8011dcc:	2000      	movs	r0, #0
 8011dce:	e007      	b.n	8011de0 <__sfputs_r+0x22>
 8011dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd4:	463a      	mov	r2, r7
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f7ff ffda 	bl	8011d90 <__sfputc_r>
 8011ddc:	1c43      	adds	r3, r0, #1
 8011dde:	d1f3      	bne.n	8011dc8 <__sfputs_r+0xa>
 8011de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011de4 <_vfiprintf_r>:
 8011de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de8:	460d      	mov	r5, r1
 8011dea:	b09d      	sub	sp, #116	; 0x74
 8011dec:	4614      	mov	r4, r2
 8011dee:	4698      	mov	r8, r3
 8011df0:	4606      	mov	r6, r0
 8011df2:	b118      	cbz	r0, 8011dfc <_vfiprintf_r+0x18>
 8011df4:	6983      	ldr	r3, [r0, #24]
 8011df6:	b90b      	cbnz	r3, 8011dfc <_vfiprintf_r+0x18>
 8011df8:	f7ff fa3e 	bl	8011278 <__sinit>
 8011dfc:	4b89      	ldr	r3, [pc, #548]	; (8012024 <_vfiprintf_r+0x240>)
 8011dfe:	429d      	cmp	r5, r3
 8011e00:	d11b      	bne.n	8011e3a <_vfiprintf_r+0x56>
 8011e02:	6875      	ldr	r5, [r6, #4]
 8011e04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e06:	07d9      	lsls	r1, r3, #31
 8011e08:	d405      	bmi.n	8011e16 <_vfiprintf_r+0x32>
 8011e0a:	89ab      	ldrh	r3, [r5, #12]
 8011e0c:	059a      	lsls	r2, r3, #22
 8011e0e:	d402      	bmi.n	8011e16 <_vfiprintf_r+0x32>
 8011e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e12:	f7ff fad4 	bl	80113be <__retarget_lock_acquire_recursive>
 8011e16:	89ab      	ldrh	r3, [r5, #12]
 8011e18:	071b      	lsls	r3, r3, #28
 8011e1a:	d501      	bpl.n	8011e20 <_vfiprintf_r+0x3c>
 8011e1c:	692b      	ldr	r3, [r5, #16]
 8011e1e:	b9eb      	cbnz	r3, 8011e5c <_vfiprintf_r+0x78>
 8011e20:	4629      	mov	r1, r5
 8011e22:	4630      	mov	r0, r6
 8011e24:	f7fe fa26 	bl	8010274 <__swsetup_r>
 8011e28:	b1c0      	cbz	r0, 8011e5c <_vfiprintf_r+0x78>
 8011e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e2c:	07dc      	lsls	r4, r3, #31
 8011e2e:	d50e      	bpl.n	8011e4e <_vfiprintf_r+0x6a>
 8011e30:	f04f 30ff 	mov.w	r0, #4294967295
 8011e34:	b01d      	add	sp, #116	; 0x74
 8011e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e3a:	4b7b      	ldr	r3, [pc, #492]	; (8012028 <_vfiprintf_r+0x244>)
 8011e3c:	429d      	cmp	r5, r3
 8011e3e:	d101      	bne.n	8011e44 <_vfiprintf_r+0x60>
 8011e40:	68b5      	ldr	r5, [r6, #8]
 8011e42:	e7df      	b.n	8011e04 <_vfiprintf_r+0x20>
 8011e44:	4b79      	ldr	r3, [pc, #484]	; (801202c <_vfiprintf_r+0x248>)
 8011e46:	429d      	cmp	r5, r3
 8011e48:	bf08      	it	eq
 8011e4a:	68f5      	ldreq	r5, [r6, #12]
 8011e4c:	e7da      	b.n	8011e04 <_vfiprintf_r+0x20>
 8011e4e:	89ab      	ldrh	r3, [r5, #12]
 8011e50:	0598      	lsls	r0, r3, #22
 8011e52:	d4ed      	bmi.n	8011e30 <_vfiprintf_r+0x4c>
 8011e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e56:	f7ff fab3 	bl	80113c0 <__retarget_lock_release_recursive>
 8011e5a:	e7e9      	b.n	8011e30 <_vfiprintf_r+0x4c>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e60:	2320      	movs	r3, #32
 8011e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e6a:	2330      	movs	r3, #48	; 0x30
 8011e6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012030 <_vfiprintf_r+0x24c>
 8011e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e74:	f04f 0901 	mov.w	r9, #1
 8011e78:	4623      	mov	r3, r4
 8011e7a:	469a      	mov	sl, r3
 8011e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e80:	b10a      	cbz	r2, 8011e86 <_vfiprintf_r+0xa2>
 8011e82:	2a25      	cmp	r2, #37	; 0x25
 8011e84:	d1f9      	bne.n	8011e7a <_vfiprintf_r+0x96>
 8011e86:	ebba 0b04 	subs.w	fp, sl, r4
 8011e8a:	d00b      	beq.n	8011ea4 <_vfiprintf_r+0xc0>
 8011e8c:	465b      	mov	r3, fp
 8011e8e:	4622      	mov	r2, r4
 8011e90:	4629      	mov	r1, r5
 8011e92:	4630      	mov	r0, r6
 8011e94:	f7ff ff93 	bl	8011dbe <__sfputs_r>
 8011e98:	3001      	adds	r0, #1
 8011e9a:	f000 80aa 	beq.w	8011ff2 <_vfiprintf_r+0x20e>
 8011e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ea0:	445a      	add	r2, fp
 8011ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f000 80a2 	beq.w	8011ff2 <_vfiprintf_r+0x20e>
 8011eae:	2300      	movs	r3, #0
 8011eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eb8:	f10a 0a01 	add.w	sl, sl, #1
 8011ebc:	9304      	str	r3, [sp, #16]
 8011ebe:	9307      	str	r3, [sp, #28]
 8011ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8011ec6:	4654      	mov	r4, sl
 8011ec8:	2205      	movs	r2, #5
 8011eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ece:	4858      	ldr	r0, [pc, #352]	; (8012030 <_vfiprintf_r+0x24c>)
 8011ed0:	f7ee f9ae 	bl	8000230 <memchr>
 8011ed4:	9a04      	ldr	r2, [sp, #16]
 8011ed6:	b9d8      	cbnz	r0, 8011f10 <_vfiprintf_r+0x12c>
 8011ed8:	06d1      	lsls	r1, r2, #27
 8011eda:	bf44      	itt	mi
 8011edc:	2320      	movmi	r3, #32
 8011ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ee2:	0713      	lsls	r3, r2, #28
 8011ee4:	bf44      	itt	mi
 8011ee6:	232b      	movmi	r3, #43	; 0x2b
 8011ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011eec:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ef2:	d015      	beq.n	8011f20 <_vfiprintf_r+0x13c>
 8011ef4:	9a07      	ldr	r2, [sp, #28]
 8011ef6:	4654      	mov	r4, sl
 8011ef8:	2000      	movs	r0, #0
 8011efa:	f04f 0c0a 	mov.w	ip, #10
 8011efe:	4621      	mov	r1, r4
 8011f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f04:	3b30      	subs	r3, #48	; 0x30
 8011f06:	2b09      	cmp	r3, #9
 8011f08:	d94e      	bls.n	8011fa8 <_vfiprintf_r+0x1c4>
 8011f0a:	b1b0      	cbz	r0, 8011f3a <_vfiprintf_r+0x156>
 8011f0c:	9207      	str	r2, [sp, #28]
 8011f0e:	e014      	b.n	8011f3a <_vfiprintf_r+0x156>
 8011f10:	eba0 0308 	sub.w	r3, r0, r8
 8011f14:	fa09 f303 	lsl.w	r3, r9, r3
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	9304      	str	r3, [sp, #16]
 8011f1c:	46a2      	mov	sl, r4
 8011f1e:	e7d2      	b.n	8011ec6 <_vfiprintf_r+0xe2>
 8011f20:	9b03      	ldr	r3, [sp, #12]
 8011f22:	1d19      	adds	r1, r3, #4
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	9103      	str	r1, [sp, #12]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	bfbb      	ittet	lt
 8011f2c:	425b      	neglt	r3, r3
 8011f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8011f32:	9307      	strge	r3, [sp, #28]
 8011f34:	9307      	strlt	r3, [sp, #28]
 8011f36:	bfb8      	it	lt
 8011f38:	9204      	strlt	r2, [sp, #16]
 8011f3a:	7823      	ldrb	r3, [r4, #0]
 8011f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8011f3e:	d10c      	bne.n	8011f5a <_vfiprintf_r+0x176>
 8011f40:	7863      	ldrb	r3, [r4, #1]
 8011f42:	2b2a      	cmp	r3, #42	; 0x2a
 8011f44:	d135      	bne.n	8011fb2 <_vfiprintf_r+0x1ce>
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	1d1a      	adds	r2, r3, #4
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	9203      	str	r2, [sp, #12]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	bfb8      	it	lt
 8011f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f56:	3402      	adds	r4, #2
 8011f58:	9305      	str	r3, [sp, #20]
 8011f5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012040 <_vfiprintf_r+0x25c>
 8011f5e:	7821      	ldrb	r1, [r4, #0]
 8011f60:	2203      	movs	r2, #3
 8011f62:	4650      	mov	r0, sl
 8011f64:	f7ee f964 	bl	8000230 <memchr>
 8011f68:	b140      	cbz	r0, 8011f7c <_vfiprintf_r+0x198>
 8011f6a:	2340      	movs	r3, #64	; 0x40
 8011f6c:	eba0 000a 	sub.w	r0, r0, sl
 8011f70:	fa03 f000 	lsl.w	r0, r3, r0
 8011f74:	9b04      	ldr	r3, [sp, #16]
 8011f76:	4303      	orrs	r3, r0
 8011f78:	3401      	adds	r4, #1
 8011f7a:	9304      	str	r3, [sp, #16]
 8011f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f80:	482c      	ldr	r0, [pc, #176]	; (8012034 <_vfiprintf_r+0x250>)
 8011f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f86:	2206      	movs	r2, #6
 8011f88:	f7ee f952 	bl	8000230 <memchr>
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	d03f      	beq.n	8012010 <_vfiprintf_r+0x22c>
 8011f90:	4b29      	ldr	r3, [pc, #164]	; (8012038 <_vfiprintf_r+0x254>)
 8011f92:	bb1b      	cbnz	r3, 8011fdc <_vfiprintf_r+0x1f8>
 8011f94:	9b03      	ldr	r3, [sp, #12]
 8011f96:	3307      	adds	r3, #7
 8011f98:	f023 0307 	bic.w	r3, r3, #7
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	9303      	str	r3, [sp, #12]
 8011fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa2:	443b      	add	r3, r7
 8011fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8011fa6:	e767      	b.n	8011e78 <_vfiprintf_r+0x94>
 8011fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fac:	460c      	mov	r4, r1
 8011fae:	2001      	movs	r0, #1
 8011fb0:	e7a5      	b.n	8011efe <_vfiprintf_r+0x11a>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	3401      	adds	r4, #1
 8011fb6:	9305      	str	r3, [sp, #20]
 8011fb8:	4619      	mov	r1, r3
 8011fba:	f04f 0c0a 	mov.w	ip, #10
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fc4:	3a30      	subs	r2, #48	; 0x30
 8011fc6:	2a09      	cmp	r2, #9
 8011fc8:	d903      	bls.n	8011fd2 <_vfiprintf_r+0x1ee>
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d0c5      	beq.n	8011f5a <_vfiprintf_r+0x176>
 8011fce:	9105      	str	r1, [sp, #20]
 8011fd0:	e7c3      	b.n	8011f5a <_vfiprintf_r+0x176>
 8011fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fd6:	4604      	mov	r4, r0
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e7f0      	b.n	8011fbe <_vfiprintf_r+0x1da>
 8011fdc:	ab03      	add	r3, sp, #12
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	462a      	mov	r2, r5
 8011fe2:	4b16      	ldr	r3, [pc, #88]	; (801203c <_vfiprintf_r+0x258>)
 8011fe4:	a904      	add	r1, sp, #16
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7fd fbb6 	bl	800f758 <_printf_float>
 8011fec:	4607      	mov	r7, r0
 8011fee:	1c78      	adds	r0, r7, #1
 8011ff0:	d1d6      	bne.n	8011fa0 <_vfiprintf_r+0x1bc>
 8011ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ff4:	07d9      	lsls	r1, r3, #31
 8011ff6:	d405      	bmi.n	8012004 <_vfiprintf_r+0x220>
 8011ff8:	89ab      	ldrh	r3, [r5, #12]
 8011ffa:	059a      	lsls	r2, r3, #22
 8011ffc:	d402      	bmi.n	8012004 <_vfiprintf_r+0x220>
 8011ffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012000:	f7ff f9de 	bl	80113c0 <__retarget_lock_release_recursive>
 8012004:	89ab      	ldrh	r3, [r5, #12]
 8012006:	065b      	lsls	r3, r3, #25
 8012008:	f53f af12 	bmi.w	8011e30 <_vfiprintf_r+0x4c>
 801200c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801200e:	e711      	b.n	8011e34 <_vfiprintf_r+0x50>
 8012010:	ab03      	add	r3, sp, #12
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	462a      	mov	r2, r5
 8012016:	4b09      	ldr	r3, [pc, #36]	; (801203c <_vfiprintf_r+0x258>)
 8012018:	a904      	add	r1, sp, #16
 801201a:	4630      	mov	r0, r6
 801201c:	f7fd fe40 	bl	800fca0 <_printf_i>
 8012020:	e7e4      	b.n	8011fec <_vfiprintf_r+0x208>
 8012022:	bf00      	nop
 8012024:	08012b38 	.word	0x08012b38
 8012028:	08012b58 	.word	0x08012b58
 801202c:	08012b18 	.word	0x08012b18
 8012030:	08012cd4 	.word	0x08012cd4
 8012034:	08012cde 	.word	0x08012cde
 8012038:	0800f759 	.word	0x0800f759
 801203c:	08011dbf 	.word	0x08011dbf
 8012040:	08012cda 	.word	0x08012cda

08012044 <_putc_r>:
 8012044:	b570      	push	{r4, r5, r6, lr}
 8012046:	460d      	mov	r5, r1
 8012048:	4614      	mov	r4, r2
 801204a:	4606      	mov	r6, r0
 801204c:	b118      	cbz	r0, 8012056 <_putc_r+0x12>
 801204e:	6983      	ldr	r3, [r0, #24]
 8012050:	b90b      	cbnz	r3, 8012056 <_putc_r+0x12>
 8012052:	f7ff f911 	bl	8011278 <__sinit>
 8012056:	4b1c      	ldr	r3, [pc, #112]	; (80120c8 <_putc_r+0x84>)
 8012058:	429c      	cmp	r4, r3
 801205a:	d124      	bne.n	80120a6 <_putc_r+0x62>
 801205c:	6874      	ldr	r4, [r6, #4]
 801205e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012060:	07d8      	lsls	r0, r3, #31
 8012062:	d405      	bmi.n	8012070 <_putc_r+0x2c>
 8012064:	89a3      	ldrh	r3, [r4, #12]
 8012066:	0599      	lsls	r1, r3, #22
 8012068:	d402      	bmi.n	8012070 <_putc_r+0x2c>
 801206a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801206c:	f7ff f9a7 	bl	80113be <__retarget_lock_acquire_recursive>
 8012070:	68a3      	ldr	r3, [r4, #8]
 8012072:	3b01      	subs	r3, #1
 8012074:	2b00      	cmp	r3, #0
 8012076:	60a3      	str	r3, [r4, #8]
 8012078:	da05      	bge.n	8012086 <_putc_r+0x42>
 801207a:	69a2      	ldr	r2, [r4, #24]
 801207c:	4293      	cmp	r3, r2
 801207e:	db1c      	blt.n	80120ba <_putc_r+0x76>
 8012080:	b2eb      	uxtb	r3, r5
 8012082:	2b0a      	cmp	r3, #10
 8012084:	d019      	beq.n	80120ba <_putc_r+0x76>
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	1c5a      	adds	r2, r3, #1
 801208a:	6022      	str	r2, [r4, #0]
 801208c:	701d      	strb	r5, [r3, #0]
 801208e:	b2ed      	uxtb	r5, r5
 8012090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012092:	07da      	lsls	r2, r3, #31
 8012094:	d405      	bmi.n	80120a2 <_putc_r+0x5e>
 8012096:	89a3      	ldrh	r3, [r4, #12]
 8012098:	059b      	lsls	r3, r3, #22
 801209a:	d402      	bmi.n	80120a2 <_putc_r+0x5e>
 801209c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801209e:	f7ff f98f 	bl	80113c0 <__retarget_lock_release_recursive>
 80120a2:	4628      	mov	r0, r5
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	4b09      	ldr	r3, [pc, #36]	; (80120cc <_putc_r+0x88>)
 80120a8:	429c      	cmp	r4, r3
 80120aa:	d101      	bne.n	80120b0 <_putc_r+0x6c>
 80120ac:	68b4      	ldr	r4, [r6, #8]
 80120ae:	e7d6      	b.n	801205e <_putc_r+0x1a>
 80120b0:	4b07      	ldr	r3, [pc, #28]	; (80120d0 <_putc_r+0x8c>)
 80120b2:	429c      	cmp	r4, r3
 80120b4:	bf08      	it	eq
 80120b6:	68f4      	ldreq	r4, [r6, #12]
 80120b8:	e7d1      	b.n	801205e <_putc_r+0x1a>
 80120ba:	4629      	mov	r1, r5
 80120bc:	4622      	mov	r2, r4
 80120be:	4630      	mov	r0, r6
 80120c0:	f7fe f886 	bl	80101d0 <__swbuf_r>
 80120c4:	4605      	mov	r5, r0
 80120c6:	e7e3      	b.n	8012090 <_putc_r+0x4c>
 80120c8:	08012b38 	.word	0x08012b38
 80120cc:	08012b58 	.word	0x08012b58
 80120d0:	08012b18 	.word	0x08012b18

080120d4 <_sbrk_r>:
 80120d4:	b538      	push	{r3, r4, r5, lr}
 80120d6:	4d06      	ldr	r5, [pc, #24]	; (80120f0 <_sbrk_r+0x1c>)
 80120d8:	2300      	movs	r3, #0
 80120da:	4604      	mov	r4, r0
 80120dc:	4608      	mov	r0, r1
 80120de:	602b      	str	r3, [r5, #0]
 80120e0:	f7ef fdb6 	bl	8001c50 <_sbrk>
 80120e4:	1c43      	adds	r3, r0, #1
 80120e6:	d102      	bne.n	80120ee <_sbrk_r+0x1a>
 80120e8:	682b      	ldr	r3, [r5, #0]
 80120ea:	b103      	cbz	r3, 80120ee <_sbrk_r+0x1a>
 80120ec:	6023      	str	r3, [r4, #0]
 80120ee:	bd38      	pop	{r3, r4, r5, pc}
 80120f0:	20010e04 	.word	0x20010e04

080120f4 <__sread>:
 80120f4:	b510      	push	{r4, lr}
 80120f6:	460c      	mov	r4, r1
 80120f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120fc:	f000 f8e2 	bl	80122c4 <_read_r>
 8012100:	2800      	cmp	r0, #0
 8012102:	bfab      	itete	ge
 8012104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012106:	89a3      	ldrhlt	r3, [r4, #12]
 8012108:	181b      	addge	r3, r3, r0
 801210a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801210e:	bfac      	ite	ge
 8012110:	6563      	strge	r3, [r4, #84]	; 0x54
 8012112:	81a3      	strhlt	r3, [r4, #12]
 8012114:	bd10      	pop	{r4, pc}

08012116 <__swrite>:
 8012116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211a:	461f      	mov	r7, r3
 801211c:	898b      	ldrh	r3, [r1, #12]
 801211e:	05db      	lsls	r3, r3, #23
 8012120:	4605      	mov	r5, r0
 8012122:	460c      	mov	r4, r1
 8012124:	4616      	mov	r6, r2
 8012126:	d505      	bpl.n	8012134 <__swrite+0x1e>
 8012128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801212c:	2302      	movs	r3, #2
 801212e:	2200      	movs	r2, #0
 8012130:	f000 f898 	bl	8012264 <_lseek_r>
 8012134:	89a3      	ldrh	r3, [r4, #12]
 8012136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801213a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801213e:	81a3      	strh	r3, [r4, #12]
 8012140:	4632      	mov	r2, r6
 8012142:	463b      	mov	r3, r7
 8012144:	4628      	mov	r0, r5
 8012146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801214a:	f000 b817 	b.w	801217c <_write_r>

0801214e <__sseek>:
 801214e:	b510      	push	{r4, lr}
 8012150:	460c      	mov	r4, r1
 8012152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012156:	f000 f885 	bl	8012264 <_lseek_r>
 801215a:	1c43      	adds	r3, r0, #1
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	bf15      	itete	ne
 8012160:	6560      	strne	r0, [r4, #84]	; 0x54
 8012162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801216a:	81a3      	strheq	r3, [r4, #12]
 801216c:	bf18      	it	ne
 801216e:	81a3      	strhne	r3, [r4, #12]
 8012170:	bd10      	pop	{r4, pc}

08012172 <__sclose>:
 8012172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012176:	f000 b831 	b.w	80121dc <_close_r>
	...

0801217c <_write_r>:
 801217c:	b538      	push	{r3, r4, r5, lr}
 801217e:	4d07      	ldr	r5, [pc, #28]	; (801219c <_write_r+0x20>)
 8012180:	4604      	mov	r4, r0
 8012182:	4608      	mov	r0, r1
 8012184:	4611      	mov	r1, r2
 8012186:	2200      	movs	r2, #0
 8012188:	602a      	str	r2, [r5, #0]
 801218a:	461a      	mov	r2, r3
 801218c:	f7ef fd0f 	bl	8001bae <_write>
 8012190:	1c43      	adds	r3, r0, #1
 8012192:	d102      	bne.n	801219a <_write_r+0x1e>
 8012194:	682b      	ldr	r3, [r5, #0]
 8012196:	b103      	cbz	r3, 801219a <_write_r+0x1e>
 8012198:	6023      	str	r3, [r4, #0]
 801219a:	bd38      	pop	{r3, r4, r5, pc}
 801219c:	20010e04 	.word	0x20010e04

080121a0 <__assert_func>:
 80121a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121a2:	4614      	mov	r4, r2
 80121a4:	461a      	mov	r2, r3
 80121a6:	4b09      	ldr	r3, [pc, #36]	; (80121cc <__assert_func+0x2c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4605      	mov	r5, r0
 80121ac:	68d8      	ldr	r0, [r3, #12]
 80121ae:	b14c      	cbz	r4, 80121c4 <__assert_func+0x24>
 80121b0:	4b07      	ldr	r3, [pc, #28]	; (80121d0 <__assert_func+0x30>)
 80121b2:	9100      	str	r1, [sp, #0]
 80121b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121b8:	4906      	ldr	r1, [pc, #24]	; (80121d4 <__assert_func+0x34>)
 80121ba:	462b      	mov	r3, r5
 80121bc:	f000 f81e 	bl	80121fc <fiprintf>
 80121c0:	f000 f89f 	bl	8012302 <abort>
 80121c4:	4b04      	ldr	r3, [pc, #16]	; (80121d8 <__assert_func+0x38>)
 80121c6:	461c      	mov	r4, r3
 80121c8:	e7f3      	b.n	80121b2 <__assert_func+0x12>
 80121ca:	bf00      	nop
 80121cc:	20000014 	.word	0x20000014
 80121d0:	08012ce5 	.word	0x08012ce5
 80121d4:	08012cf2 	.word	0x08012cf2
 80121d8:	08012d20 	.word	0x08012d20

080121dc <_close_r>:
 80121dc:	b538      	push	{r3, r4, r5, lr}
 80121de:	4d06      	ldr	r5, [pc, #24]	; (80121f8 <_close_r+0x1c>)
 80121e0:	2300      	movs	r3, #0
 80121e2:	4604      	mov	r4, r0
 80121e4:	4608      	mov	r0, r1
 80121e6:	602b      	str	r3, [r5, #0]
 80121e8:	f7ef fcfd 	bl	8001be6 <_close>
 80121ec:	1c43      	adds	r3, r0, #1
 80121ee:	d102      	bne.n	80121f6 <_close_r+0x1a>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	b103      	cbz	r3, 80121f6 <_close_r+0x1a>
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	bd38      	pop	{r3, r4, r5, pc}
 80121f8:	20010e04 	.word	0x20010e04

080121fc <fiprintf>:
 80121fc:	b40e      	push	{r1, r2, r3}
 80121fe:	b503      	push	{r0, r1, lr}
 8012200:	4601      	mov	r1, r0
 8012202:	ab03      	add	r3, sp, #12
 8012204:	4805      	ldr	r0, [pc, #20]	; (801221c <fiprintf+0x20>)
 8012206:	f853 2b04 	ldr.w	r2, [r3], #4
 801220a:	6800      	ldr	r0, [r0, #0]
 801220c:	9301      	str	r3, [sp, #4]
 801220e:	f7ff fde9 	bl	8011de4 <_vfiprintf_r>
 8012212:	b002      	add	sp, #8
 8012214:	f85d eb04 	ldr.w	lr, [sp], #4
 8012218:	b003      	add	sp, #12
 801221a:	4770      	bx	lr
 801221c:	20000014 	.word	0x20000014

08012220 <_fstat_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4d07      	ldr	r5, [pc, #28]	; (8012240 <_fstat_r+0x20>)
 8012224:	2300      	movs	r3, #0
 8012226:	4604      	mov	r4, r0
 8012228:	4608      	mov	r0, r1
 801222a:	4611      	mov	r1, r2
 801222c:	602b      	str	r3, [r5, #0]
 801222e:	f7ef fce6 	bl	8001bfe <_fstat>
 8012232:	1c43      	adds	r3, r0, #1
 8012234:	d102      	bne.n	801223c <_fstat_r+0x1c>
 8012236:	682b      	ldr	r3, [r5, #0]
 8012238:	b103      	cbz	r3, 801223c <_fstat_r+0x1c>
 801223a:	6023      	str	r3, [r4, #0]
 801223c:	bd38      	pop	{r3, r4, r5, pc}
 801223e:	bf00      	nop
 8012240:	20010e04 	.word	0x20010e04

08012244 <_isatty_r>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	4d06      	ldr	r5, [pc, #24]	; (8012260 <_isatty_r+0x1c>)
 8012248:	2300      	movs	r3, #0
 801224a:	4604      	mov	r4, r0
 801224c:	4608      	mov	r0, r1
 801224e:	602b      	str	r3, [r5, #0]
 8012250:	f7ef fce5 	bl	8001c1e <_isatty>
 8012254:	1c43      	adds	r3, r0, #1
 8012256:	d102      	bne.n	801225e <_isatty_r+0x1a>
 8012258:	682b      	ldr	r3, [r5, #0]
 801225a:	b103      	cbz	r3, 801225e <_isatty_r+0x1a>
 801225c:	6023      	str	r3, [r4, #0]
 801225e:	bd38      	pop	{r3, r4, r5, pc}
 8012260:	20010e04 	.word	0x20010e04

08012264 <_lseek_r>:
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	4d07      	ldr	r5, [pc, #28]	; (8012284 <_lseek_r+0x20>)
 8012268:	4604      	mov	r4, r0
 801226a:	4608      	mov	r0, r1
 801226c:	4611      	mov	r1, r2
 801226e:	2200      	movs	r2, #0
 8012270:	602a      	str	r2, [r5, #0]
 8012272:	461a      	mov	r2, r3
 8012274:	f7ef fcde 	bl	8001c34 <_lseek>
 8012278:	1c43      	adds	r3, r0, #1
 801227a:	d102      	bne.n	8012282 <_lseek_r+0x1e>
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	b103      	cbz	r3, 8012282 <_lseek_r+0x1e>
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	bd38      	pop	{r3, r4, r5, pc}
 8012284:	20010e04 	.word	0x20010e04

08012288 <__ascii_mbtowc>:
 8012288:	b082      	sub	sp, #8
 801228a:	b901      	cbnz	r1, 801228e <__ascii_mbtowc+0x6>
 801228c:	a901      	add	r1, sp, #4
 801228e:	b142      	cbz	r2, 80122a2 <__ascii_mbtowc+0x1a>
 8012290:	b14b      	cbz	r3, 80122a6 <__ascii_mbtowc+0x1e>
 8012292:	7813      	ldrb	r3, [r2, #0]
 8012294:	600b      	str	r3, [r1, #0]
 8012296:	7812      	ldrb	r2, [r2, #0]
 8012298:	1e10      	subs	r0, r2, #0
 801229a:	bf18      	it	ne
 801229c:	2001      	movne	r0, #1
 801229e:	b002      	add	sp, #8
 80122a0:	4770      	bx	lr
 80122a2:	4610      	mov	r0, r2
 80122a4:	e7fb      	b.n	801229e <__ascii_mbtowc+0x16>
 80122a6:	f06f 0001 	mvn.w	r0, #1
 80122aa:	e7f8      	b.n	801229e <__ascii_mbtowc+0x16>

080122ac <__malloc_lock>:
 80122ac:	4801      	ldr	r0, [pc, #4]	; (80122b4 <__malloc_lock+0x8>)
 80122ae:	f7ff b886 	b.w	80113be <__retarget_lock_acquire_recursive>
 80122b2:	bf00      	nop
 80122b4:	20010df8 	.word	0x20010df8

080122b8 <__malloc_unlock>:
 80122b8:	4801      	ldr	r0, [pc, #4]	; (80122c0 <__malloc_unlock+0x8>)
 80122ba:	f7ff b881 	b.w	80113c0 <__retarget_lock_release_recursive>
 80122be:	bf00      	nop
 80122c0:	20010df8 	.word	0x20010df8

080122c4 <_read_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d07      	ldr	r5, [pc, #28]	; (80122e4 <_read_r+0x20>)
 80122c8:	4604      	mov	r4, r0
 80122ca:	4608      	mov	r0, r1
 80122cc:	4611      	mov	r1, r2
 80122ce:	2200      	movs	r2, #0
 80122d0:	602a      	str	r2, [r5, #0]
 80122d2:	461a      	mov	r2, r3
 80122d4:	f7ef fc4e 	bl	8001b74 <_read>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d102      	bne.n	80122e2 <_read_r+0x1e>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	b103      	cbz	r3, 80122e2 <_read_r+0x1e>
 80122e0:	6023      	str	r3, [r4, #0]
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	20010e04 	.word	0x20010e04

080122e8 <__ascii_wctomb>:
 80122e8:	b149      	cbz	r1, 80122fe <__ascii_wctomb+0x16>
 80122ea:	2aff      	cmp	r2, #255	; 0xff
 80122ec:	bf85      	ittet	hi
 80122ee:	238a      	movhi	r3, #138	; 0x8a
 80122f0:	6003      	strhi	r3, [r0, #0]
 80122f2:	700a      	strbls	r2, [r1, #0]
 80122f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80122f8:	bf98      	it	ls
 80122fa:	2001      	movls	r0, #1
 80122fc:	4770      	bx	lr
 80122fe:	4608      	mov	r0, r1
 8012300:	4770      	bx	lr

08012302 <abort>:
 8012302:	b508      	push	{r3, lr}
 8012304:	2006      	movs	r0, #6
 8012306:	f000 f82b 	bl	8012360 <raise>
 801230a:	2001      	movs	r0, #1
 801230c:	f7ef fc28 	bl	8001b60 <_exit>

08012310 <_raise_r>:
 8012310:	291f      	cmp	r1, #31
 8012312:	b538      	push	{r3, r4, r5, lr}
 8012314:	4604      	mov	r4, r0
 8012316:	460d      	mov	r5, r1
 8012318:	d904      	bls.n	8012324 <_raise_r+0x14>
 801231a:	2316      	movs	r3, #22
 801231c:	6003      	str	r3, [r0, #0]
 801231e:	f04f 30ff 	mov.w	r0, #4294967295
 8012322:	bd38      	pop	{r3, r4, r5, pc}
 8012324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012326:	b112      	cbz	r2, 801232e <_raise_r+0x1e>
 8012328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801232c:	b94b      	cbnz	r3, 8012342 <_raise_r+0x32>
 801232e:	4620      	mov	r0, r4
 8012330:	f000 f830 	bl	8012394 <_getpid_r>
 8012334:	462a      	mov	r2, r5
 8012336:	4601      	mov	r1, r0
 8012338:	4620      	mov	r0, r4
 801233a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801233e:	f000 b817 	b.w	8012370 <_kill_r>
 8012342:	2b01      	cmp	r3, #1
 8012344:	d00a      	beq.n	801235c <_raise_r+0x4c>
 8012346:	1c59      	adds	r1, r3, #1
 8012348:	d103      	bne.n	8012352 <_raise_r+0x42>
 801234a:	2316      	movs	r3, #22
 801234c:	6003      	str	r3, [r0, #0]
 801234e:	2001      	movs	r0, #1
 8012350:	e7e7      	b.n	8012322 <_raise_r+0x12>
 8012352:	2400      	movs	r4, #0
 8012354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012358:	4628      	mov	r0, r5
 801235a:	4798      	blx	r3
 801235c:	2000      	movs	r0, #0
 801235e:	e7e0      	b.n	8012322 <_raise_r+0x12>

08012360 <raise>:
 8012360:	4b02      	ldr	r3, [pc, #8]	; (801236c <raise+0xc>)
 8012362:	4601      	mov	r1, r0
 8012364:	6818      	ldr	r0, [r3, #0]
 8012366:	f7ff bfd3 	b.w	8012310 <_raise_r>
 801236a:	bf00      	nop
 801236c:	20000014 	.word	0x20000014

08012370 <_kill_r>:
 8012370:	b538      	push	{r3, r4, r5, lr}
 8012372:	4d07      	ldr	r5, [pc, #28]	; (8012390 <_kill_r+0x20>)
 8012374:	2300      	movs	r3, #0
 8012376:	4604      	mov	r4, r0
 8012378:	4608      	mov	r0, r1
 801237a:	4611      	mov	r1, r2
 801237c:	602b      	str	r3, [r5, #0]
 801237e:	f7ef fbdf 	bl	8001b40 <_kill>
 8012382:	1c43      	adds	r3, r0, #1
 8012384:	d102      	bne.n	801238c <_kill_r+0x1c>
 8012386:	682b      	ldr	r3, [r5, #0]
 8012388:	b103      	cbz	r3, 801238c <_kill_r+0x1c>
 801238a:	6023      	str	r3, [r4, #0]
 801238c:	bd38      	pop	{r3, r4, r5, pc}
 801238e:	bf00      	nop
 8012390:	20010e04 	.word	0x20010e04

08012394 <_getpid_r>:
 8012394:	f7ef bbcc 	b.w	8001b30 <_getpid>

08012398 <_init>:
 8012398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239a:	bf00      	nop
 801239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801239e:	bc08      	pop	{r3}
 80123a0:	469e      	mov	lr, r3
 80123a2:	4770      	bx	lr

080123a4 <_fini>:
 80123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a6:	bf00      	nop
 80123a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123aa:	bc08      	pop	{r3}
 80123ac:	469e      	mov	lr, r3
 80123ae:	4770      	bx	lr
