
F723ZET_Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800b8b0  0800b8b0  0001b8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2c0  0800c2c0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2c0  0800c2c0  0001c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2c8  0800c2c8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2c8  0800c2c8  0001c2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c2d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b1c  200001e8  0800c4b8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00001e04  20000d04  0800c4b8  00020d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000509c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001725  00000000  00000000  000252b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000269e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002180  00000000  00000000  00027a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f938  00000000  00000000  00029bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000341b  00000000  00000000  000394e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0003c903  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005034  00000000  00000000  0003c954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b894 	.word	0x0800b894

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800b894 	.word	0x0800b894

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001048:	4835      	ldr	r0, [pc, #212]	; (8001120 <MX_ADC1_Init+0xd8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001050:	2201      	movs	r2, #1
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8001052:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8001110 <MX_ADC1_Init+0xc8>
{
 8001056:	b510      	push	{r4, lr}
  hadc1.Instance = ADC1;
 8001058:	4c32      	ldr	r4, [pc, #200]	; (8001124 <MX_ADC1_Init+0xdc>)
{
 800105a:	b084      	sub	sp, #16
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800105c:	6102      	str	r2, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	9300      	str	r3, [sp, #0]
  hadc1.Instance = ADC1;
 8001060:	6004      	str	r4, [r0, #0]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001062:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001064:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 5;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800106e:	6143      	str	r3, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001070:	9303      	str	r3, [sp, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001072:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001076:	2105      	movs	r1, #5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8001078:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 5;
 800107c:	61c1      	str	r1, [r0, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	f001 fe73 	bl	8002d6c <HAL_ADC_Init>
 8001086:	bb80      	cbnz	r0, 80010ea <MX_ADC1_Init+0xa2>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001088:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	4669      	mov	r1, sp
 800108c:	4824      	ldr	r0, [pc, #144]	; (8001120 <MX_ADC1_Init+0xd8>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800108e:	9302      	str	r3, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_11;
 8001090:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8001118 <MX_ADC1_Init+0xd0>
 8001094:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	f002 f8c0 	bl	800321c <HAL_ADC_ConfigChannel>
 800109c:	bba8      	cbnz	r0, 800110a <MX_ADC1_Init+0xc2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800109e:	220c      	movs	r2, #12
 80010a0:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	4669      	mov	r1, sp
 80010a4:	481e      	ldr	r0, [pc, #120]	; (8001120 <MX_ADC1_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_12;
 80010a6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	f002 f8b7 	bl	800321c <HAL_ADC_ConfigChannel>
 80010ae:	bb48      	cbnz	r0, 8001104 <MX_ADC1_Init+0xbc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010b0:	2205      	movs	r2, #5
 80010b2:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	4669      	mov	r1, sp
 80010b6:	481a      	ldr	r0, [pc, #104]	; (8001120 <MX_ADC1_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_5;
 80010b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	f002 f8ae 	bl	800321c <HAL_ADC_ConfigChannel>
 80010c0:	b9e8      	cbnz	r0, 80010fe <MX_ADC1_Init+0xb6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010c2:	2206      	movs	r2, #6
 80010c4:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	4669      	mov	r1, sp
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <MX_ADC1_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_6;
 80010ca:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	f002 f8a5 	bl	800321c <HAL_ADC_ConfigChannel>
 80010d2:	b988      	cbnz	r0, 80010f8 <MX_ADC1_Init+0xb0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <MX_ADC1_Init+0xe0>)
 80010d6:	2305      	movs	r3, #5
  sConfig.Rank = ADC_REGULAR_RANK_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d8:	4669      	mov	r1, sp
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_ADC1_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010dc:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	f002 f89c 	bl	800321c <HAL_ADC_ConfigChannel>
 80010e4:	b920      	cbnz	r0, 80010f0 <MX_ADC1_Init+0xa8>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	b004      	add	sp, #16
 80010e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010ea:	f001 fb43 	bl	8002774 <Error_Handler>
 80010ee:	e7cb      	b.n	8001088 <MX_ADC1_Init+0x40>
    Error_Handler();
 80010f0:	f001 fb40 	bl	8002774 <Error_Handler>
}
 80010f4:	b004      	add	sp, #16
 80010f6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010f8:	f001 fb3c 	bl	8002774 <Error_Handler>
 80010fc:	e7ea      	b.n	80010d4 <MX_ADC1_Init+0x8c>
    Error_Handler();
 80010fe:	f001 fb39 	bl	8002774 <Error_Handler>
 8001102:	e7de      	b.n	80010c2 <MX_ADC1_Init+0x7a>
    Error_Handler();
 8001104:	f001 fb36 	bl	8002774 <Error_Handler>
 8001108:	e7d2      	b.n	80010b0 <MX_ADC1_Init+0x68>
    Error_Handler();
 800110a:	f001 fb33 	bl	8002774 <Error_Handler>
 800110e:	e7c6      	b.n	800109e <MX_ADC1_Init+0x56>
 8001110:	04000000 	.word	0x04000000
 8001114:	10000000 	.word	0x10000000
 8001118:	0000000b 	.word	0x0000000b
 800111c:	00000001 	.word	0x00000001
 8001120:	20000208 	.word	0x20000208
 8001124:	40012000 	.word	0x40012000
 8001128:	10000012 	.word	0x10000012

0800112c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800112c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_ADC_MspInit+0xc8>)
{
 8001130:	b08a      	sub	sp, #40	; 0x28
  if(adcHandle->Instance==ADC1)
 8001132:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8001136:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	9406      	str	r4, [sp, #24]
 800113a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800113e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8001142:	d001      	beq.n	8001148 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001144:	b00a      	add	sp, #40	; 0x28
 8001146:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001148:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800114c:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	482a      	ldr	r0, [pc, #168]	; (80011f8 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8001152:	4e2a      	ldr	r6, [pc, #168]	; (80011fc <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
 800115a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800115c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001166:	f042 0204 	orr.w	r2, r2, #4
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
 800116c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116e:	f002 0204 	and.w	r2, r2, #4
 8001172:	9202      	str	r2, [sp, #8]
 8001174:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = JSR_AZIMUTH_Pin|JSR_ELEVATION_Pin;
 800117e:	2206      	movs	r2, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = JSR_AZIMUTH_Pin|JSR_ELEVATION_Pin;
 8001188:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JSR_AZIMUTH_Pin|JSR_ELEVATION_Pin;
 800118e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f002 ffaf 	bl	80040f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JSL_AZIMUTH_Pin|JSL_ELEVATION_Pin;
 8001196:	2260      	movs	r2, #96	; 0x60
 8001198:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	4819      	ldr	r0, [pc, #100]	; (8001200 <HAL_ADC_MspInit+0xd4>)
 800119c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = JSL_AZIMUTH_Pin|JSL_ELEVATION_Pin;
 80011a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f002 ffa6 	bl	80040f4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ae:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream0;
 80011b0:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b4:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011be:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ca:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ce:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d0:	f002 fd8c 	bl	8003cec <HAL_DMA_Init>
 80011d4:	b958      	cbnz	r0, 80011ee <HAL_ADC_MspInit+0xc2>
    HAL_NVIC_SetPriority(ADC_IRQn, 9, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2109      	movs	r1, #9
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011da:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 9, 0);
 80011dc:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011de:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 9, 0);
 80011e0:	f002 fcd4 	bl	8003b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011e4:	2012      	movs	r0, #18
 80011e6:	f002 fd0f 	bl	8003c08 <HAL_NVIC_EnableIRQ>
}
 80011ea:	b00a      	add	sp, #40	; 0x28
 80011ec:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80011ee:	f001 fac1 	bl	8002774 <Error_Handler>
 80011f2:	e7f0      	b.n	80011d6 <HAL_ADC_MspInit+0xaa>
 80011f4:	40012000 	.word	0x40012000
 80011f8:	40020800 	.word	0x40020800
 80011fc:	20000250 	.word	0x20000250
 8001200:	40020000 	.word	0x40020000
 8001204:	40026410 	.word	0x40026410

08001208 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001208:	b510      	push	{r4, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_CAN1_Init+0x34>)
  hcan1.Init.Prescaler = 6;
 800120c:	2206      	movs	r2, #6
  hcan1.Instance = CAN1;
 800120e:	4c0c      	ldr	r4, [pc, #48]	; (8001240 <MX_CAN1_Init+0x38>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001210:	2300      	movs	r3, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001212:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001216:	8383      	strh	r3, [r0, #28]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001218:	6083      	str	r3, [r0, #8]
  hcan1.Init.Prescaler = 6;
 800121a:	e9c0 4200 	strd	r4, r2, [r0]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800121e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001222:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001226:	e9c0 3103 	strd	r3, r1, [r0, #12]
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800122a:	f002 f8f3 	bl	8003414 <HAL_CAN_Init>
 800122e:	b900      	cbnz	r0, 8001232 <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001230:	bd10      	pop	{r4, pc}
 8001232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001236:	f001 ba9d 	b.w	8002774 <Error_Handler>
 800123a:	bf00      	nop
 800123c:	200002b0 	.word	0x200002b0
 8001240:	40006400 	.word	0x40006400
 8001244:	00000000 	.word	0x00000000

08001248 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001248:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_CAN_MspInit+0x78>)
{
 800124c:	b088      	sub	sp, #32
  if(canHandle->Instance==CAN1)
 800124e:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 8001252:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	9406      	str	r4, [sp, #24]
 8001256:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800125a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(canHandle->Instance==CAN1)
 800125e:	d001      	beq.n	8001264 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001260:	b008      	add	sp, #32
 8001262:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001264:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	a902      	add	r1, sp, #8
 800126a:	4816      	ldr	r0, [pc, #88]	; (80012c4 <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800126c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
 8001274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001276:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800127a:	9200      	str	r2, [sp, #0]
 800127c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	f042 0202 	orr.w	r2, r2, #2
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800128e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80012b8 <HAL_CAN_MspInit+0x70>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001296:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001298:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800129c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f002 ff28 	bl	80040f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80012a4:	4622      	mov	r2, r4
 80012a6:	2105      	movs	r1, #5
 80012a8:	2014      	movs	r0, #20
 80012aa:	f002 fc6f 	bl	8003b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012ae:	2014      	movs	r0, #20
 80012b0:	f002 fcaa 	bl	8003c08 <HAL_NVIC_EnableIRQ>
}
 80012b4:	b008      	add	sp, #32
 80012b6:	bd10      	pop	{r4, pc}
 80012b8:	00000300 	.word	0x00000300
 80012bc:	00000002 	.word	0x00000002
 80012c0:	40006400 	.word	0x40006400
 80012c4:	40020400 	.word	0x40020400

080012c8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_DMA_Init+0x30>)

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 8, 0);
 80012ca:	2038      	movs	r0, #56	; 0x38
 80012cc:	2200      	movs	r2, #0
 80012ce:	2108      	movs	r1, #8
{
 80012d0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 80012d4:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d6:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 80012da:	631c      	str	r4, [r3, #48]	; 0x30
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 8, 0);
 80012e6:	f002 fc51 	bl	8003b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012ea:	2038      	movs	r0, #56	; 0x38

}
 80012ec:	b002      	add	sp, #8
 80012ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f2:	f002 bc89 	b.w	8003c08 <HAL_NVIC_EnableIRQ>
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	00000000 	.word	0x00000000

08001300 <MX_GPIO_Init>:
     PC10   ------> UART4_TX
     PC11   ------> UART4_RX
     PB6   ------> QUADSPI_BK1_NCS
*/
void MX_GPIO_Init(void)
{
 8001300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001304:	4bd0      	ldr	r3, [pc, #832]	; (8001648 <MX_GPIO_Init+0x348>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TRIGGER_Pin|OUT_POWER_Pin|OUT_CAMERA_SELECT_Pin|OUT_LRF_ENABLE_Pin, GPIO_PIN_RESET);
 8001308:	4fd0      	ldr	r7, [pc, #832]	; (800164c <MX_GPIO_Init+0x34c>)
 800130a:	f44f 7170 	mov.w	r1, #960	; 0x3c0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 800130e:	f8df 8348 	ldr.w	r8, [pc, #840]	; 8001658 <MX_GPIO_Init+0x358>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = JSR_DEADMAN_Pin|JSR_A_Pin|JSL_B_Pin|JSL_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001312:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(SLA_POWER_ENABLE_GPIO_Port, SLA_POWER_ENABLE_Pin, GPIO_PIN_SET);
 8001314:	4dce      	ldr	r5, [pc, #824]	; (8001650 <MX_GPIO_Init+0x350>)
  HAL_GPIO_WritePin(GPIOC, OUT_TRIGGER_Pin|OUT_POWER_Pin|OUT_CAMERA_SELECT_Pin|OUT_LRF_ENABLE_Pin, GPIO_PIN_RESET);
 8001316:	4638      	mov	r0, r7
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	f8df 9340 	ldr.w	r9, [pc, #832]	; 800165c <MX_GPIO_Init+0x35c>
                           PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131c:	f8df b340 	ldr.w	fp, [pc, #832]	; 8001660 <MX_GPIO_Init+0x360>
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	f8df a340 	ldr.w	sl, [pc, #832]	; 8001664 <MX_GPIO_Init+0x364>
{
 8001324:	ed2d 8b04 	vpush	{d8-d9}
 8001328:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800132e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001332:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001336:	f042 0210 	orr.w	r2, r2, #16
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
 800133c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133e:	f002 0210 	and.w	r2, r2, #16
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001348:	f042 0204 	orr.w	r2, r2, #4
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	f002 0204 	and.w	r2, r2, #4
 8001354:	9201      	str	r2, [sp, #4]
 8001356:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135a:	f042 0220 	orr.w	r2, r2, #32
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001362:	f002 0220 	and.w	r2, r2, #32
 8001366:	9202      	str	r2, [sp, #8]
 8001368:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
 8001372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001374:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001378:	9203      	str	r2, [sp, #12]
 800137a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001386:	f002 0201 	and.w	r2, r2, #1
 800138a:	9204      	str	r2, [sp, #16]
 800138c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	f042 0202 	orr.w	r2, r2, #2
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
 8001396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001398:	f002 0202 	and.w	r2, r2, #2
 800139c:	9205      	str	r2, [sp, #20]
 800139e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80013ae:	9206      	str	r2, [sp, #24]
 80013b0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	f042 0208 	orr.w	r2, r2, #8
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, OUT_TRIGGER_Pin|OUT_POWER_Pin|OUT_CAMERA_SELECT_Pin|OUT_LRF_ENABLE_Pin, GPIO_PIN_RESET);
 80013ba:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	9307      	str	r3, [sp, #28]
 80013c4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, OUT_TRIGGER_Pin|OUT_POWER_Pin|OUT_CAMERA_SELECT_Pin|OUT_LRF_ENABLE_Pin, GPIO_PIN_RESET);
 80013c6:	f002 ffb3 	bl	8004330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80013ca:	4622      	mov	r2, r4
 80013cc:	4640      	mov	r0, r8
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	f002 ffad 	bl	8004330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SLA_POWER_ENABLE_GPIO_Port, SLA_POWER_ENABLE_Pin, GPIO_PIN_SET);
 80013d6:	4628      	mov	r0, r5
 80013d8:	2108      	movs	r1, #8
 80013da:	2201      	movs	r2, #1
 80013dc:	f002 ffa8 	bl	8004330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG_PULSE_OUT_GPIO_Port, TRIG_PULSE_OUT_Pin, GPIO_PIN_RESET);
 80013e0:	4622      	mov	r2, r4
 80013e2:	4628      	mov	r0, r5
 80013e4:	2120      	movs	r1, #32
 80013e6:	f002 ffa3 	bl	8004330 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	a908      	add	r1, sp, #32
 80013ec:	4899      	ldr	r0, [pc, #612]	; (8001654 <MX_GPIO_Init+0x354>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013f0:	ed9f 7b73 	vldr	d7, [pc, #460]	; 80015c0 <MX_GPIO_Init+0x2c0>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f4:	ed9f 8b74 	vldr	d8, [pc, #464]	; 80015c8 <MX_GPIO_Init+0x2c8>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_TRIGGER_Pin|OUT_POWER_Pin|OUT_CAMERA_SELECT_Pin|OUT_LRF_ENABLE_Pin;
 80013f8:	ed9f 9b75 	vldr	d9, [pc, #468]	; 80015d0 <MX_GPIO_Init+0x2d0>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013fc:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001400:	f002 fe78 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	a908      	add	r1, sp, #32
 8001406:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 800140a:	ed9f 7b73 	vldr	d7, [pc, #460]	; 80015d8 <MX_GPIO_Init+0x2d8>
 800140e:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f002 fe6f 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001416:	a908      	add	r1, sp, #32
 8001418:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800141c:	ed9f 7b70 	vldr	d7, [pc, #448]	; 80015e0 <MX_GPIO_Init+0x2e0>
 8001420:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001424:	f002 fe66 	bl	80040f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001428:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142a:	a908      	add	r1, sp, #32
 800142c:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800142e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001430:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 80015e8 <MX_GPIO_Init+0x2e8>
 8001434:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8001438:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800143c:	f002 fe5a 	bl	80040f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001440:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001442:	4648      	mov	r0, r9
 8001444:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001446:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = V_BATT_FREQ_Pin;
 8001448:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800144c:	ed9f 7b68 	vldr	d7, [pc, #416]	; 80015f0 <MX_GPIO_Init+0x2f0>
 8001450:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8001454:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001458:	f002 fe4c 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	a908      	add	r1, sp, #32
 800145e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = JSR_DEADMAN_Pin|JSR_A_Pin|JSL_B_Pin|JSL_TRIG_Pin;
 8001462:	ed9f 7b65 	vldr	d7, [pc, #404]	; 80015f8 <MX_GPIO_Init+0x2f8>
 8001466:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f002 fe43 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	a908      	add	r1, sp, #32
 8001470:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001472:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = JSR_B_Pin|JSR_TRIG_Pin|JSL_DEADMAN_Pin|JSL_A_Pin;
 8001474:	ed9f 7b62 	vldr	d7, [pc, #392]	; 8001600 <MX_GPIO_Init+0x300>
 8001478:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f002 fe3a 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	a908      	add	r1, sp, #32
 8001482:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8001486:	ed9f 7b60 	vldr	d7, [pc, #384]	; 8001608 <MX_GPIO_Init+0x308>
 800148a:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f002 fe31 	bl	80040f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001492:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	a908      	add	r1, sp, #32
 8001496:	4628      	mov	r0, r5
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149a:	ed9f 7b5d 	vldr	d7, [pc, #372]	; 8001610 <MX_GPIO_Init+0x310>
 800149e:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 80014a2:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f002 fe25 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014aa:	a908      	add	r1, sp, #32
 80014ac:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014b0:	ed9f 7b59 	vldr	d7, [pc, #356]	; 8001618 <MX_GPIO_Init+0x318>
 80014b4:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b8:	f002 fe1c 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014bc:	a908      	add	r1, sp, #32
 80014be:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014c2:	ed9f 7b57 	vldr	d7, [pc, #348]	; 8001620 <MX_GPIO_Init+0x320>
 80014c6:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f002 fe13 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ce:	4658      	mov	r0, fp
 80014d0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = OUT_RESV_Pin|IN_FIRE_MODE0_Pin|IN_TARGET_PREV_Pin|IN_FOCUS_NEAR_Pin
 80014d4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8001628 <MX_GPIO_Init+0x328>
 80014d8:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014dc:	f002 fe0a 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	a908      	add	r1, sp, #32
 80014e2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = OUT_TRIGGER_Pin|OUT_POWER_Pin|OUT_CAMERA_SELECT_Pin|OUT_LRF_ENABLE_Pin;
 80014e4:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8001630 <MX_GPIO_Init+0x330>
 80014e8:	ed8d 9b0a 	vstr	d9, [sp, #40]	; 0x28
 80014ec:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f002 fe00 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80014f4:	a908      	add	r1, sp, #32
 80014f6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80014f8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8001638 <MX_GPIO_Init+0x338>
 80014fc:	ed8d 9b0a 	vstr	d9, [sp, #40]	; 0x28
 8001500:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001504:	f002 fdf6 	bl	80040f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	a908      	add	r1, sp, #32
 800150a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800150e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8001640 <MX_GPIO_Init+0x340>
 8001512:	ed8d 7b08 	vstr	d7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f002 fded 	bl	80040f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(V_BATT_FREQ_GPIO_Port, &GPIO_InitStruct);
 800151a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = V_BATT_FREQ_Pin;
 800151c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
  HAL_GPIO_Init(V_BATT_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001520:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001522:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = V_BATT_FREQ_Pin;
 8001524:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001528:	ed8d 9b0a 	vstr	d9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BMS_RXD_Pin|BMS_TXD_Pin;
 800152c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
  HAL_GPIO_Init(V_BATT_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001530:	f002 fde0 	bl	80040f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BMS_RXD_Pin|BMS_TXD_Pin;
 8001534:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001538:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	4638      	mov	r0, r7
 800153c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800153e:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = BMS_RXD_Pin|BMS_TXD_Pin;
 8001540:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8001544:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f002 fdd4 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN_LRF_START_Pin|IN_LRF_MAN_UP_Pin|IN_TRIGGER_ENABLE_Pin|IN_FOCUS_FAR_Pin
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	2300      	movs	r3, #0
                          |IN_TARGET_NEXT_Pin|IN_FIRE_MODE1_Pin|IN_SPD1_Pin|IN_SPD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	4650      	mov	r0, sl
 8001552:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = IN_LRF_START_Pin|IN_LRF_MAN_UP_Pin|IN_TRIGGER_ENABLE_Pin|IN_FOCUS_FAR_Pin
 8001556:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155a:	f002 fdcb 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SLA_POWER_ENABLE_Pin;
 800155e:	2208      	movs	r2, #8
 8001560:	2311      	movs	r3, #17
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SLA_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001562:	a908      	add	r1, sp, #32
 8001564:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = SLA_POWER_ENABLE_Pin;
 8001566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800156a:	ed8d 9b0a 	vstr	d9, [sp, #40]	; 0x28
  HAL_GPIO_Init(SLA_POWER_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800156e:	f002 fdc1 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DUAL_TRIG_IN_Pin;
 8001572:	2210      	movs	r2, #16
 8001574:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DUAL_TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 8001576:	a908      	add	r1, sp, #32
 8001578:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = DUAL_TRIG_IN_Pin;
 800157c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(DUAL_TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 8001580:	f002 fdb8 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_PULSE_OUT_Pin;
 8001584:	2220      	movs	r2, #32
 8001586:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TRIG_PULSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001588:	a908      	add	r1, sp, #32
 800158a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TRIG_PULSE_OUT_Pin;
 800158c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001590:	ed8d 9b0a 	vstr	d9, [sp, #40]	; 0x28
  HAL_GPIO_Init(TRIG_PULSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001594:	f002 fdae 	bl	80040f4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001598:	230a      	movs	r3, #10
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800159a:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800159e:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a2:	2302      	movs	r3, #2
 80015a4:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 80015a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f002 fda2 	bl	80040f4 <HAL_GPIO_Init>

}
 80015b0:	b00f      	add	sp, #60	; 0x3c
 80015b2:	ecbd 8b04 	vpop	{d8-d9}
 80015b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	0000ffff 	.word	0x0000ffff
 80015c4:	00000003 	.word	0x00000003
 80015c8:	00000000 	.word	0x00000000
 80015cc:	00000003 	.word	0x00000003
	...
 80015d8:	0000d000 	.word	0x0000d000
 80015dc:	00000003 	.word	0x00000003
 80015e0:	0000fc3f 	.word	0x0000fc3f
 80015e4:	00000003 	.word	0x00000003
 80015e8:	000000c0 	.word	0x000000c0
 80015ec:	00000002 	.word	0x00000002
 80015f0:	00000300 	.word	0x00000300
 80015f4:	00000002 	.word	0x00000002
 80015f8:	00000039 	.word	0x00000039
 80015fc:	00000000 	.word	0x00000000
 8001600:	00000093 	.word	0x00000093
 8001604:	00000000 	.word	0x00000000
 8001608:	0000f083 	.word	0x0000f083
 800160c:	00000003 	.word	0x00000003
 8001610:	00000004 	.word	0x00000004
 8001614:	00000002 	.word	0x00000002
 8001618:	0000003f 	.word	0x0000003f
 800161c:	00000003 	.word	0x00000003
 8001620:	0000ff00 	.word	0x0000ff00
 8001624:	00000003 	.word	0x00000003
 8001628:	0000ff00 	.word	0x0000ff00
 800162c:	00000000 	.word	0x00000000
 8001630:	000003c0 	.word	0x000003c0
 8001634:	00000001 	.word	0x00000001
 8001638:	00000100 	.word	0x00000100
 800163c:	00000001 	.word	0x00000001
 8001640:	00001800 	.word	0x00001800
 8001644:	00000003 	.word	0x00000003
 8001648:	40023800 	.word	0x40023800
 800164c:	40020800 	.word	0x40020800
 8001650:	40020400 	.word	0x40020400
 8001654:	40021000 	.word	0x40021000
 8001658:	40020000 	.word	0x40020000
 800165c:	40021400 	.word	0x40021400
 8001660:	40021800 	.word	0x40021800
 8001664:	40020c00 	.word	0x40020c00

08001668 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001668:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <MX_IWDG_Init+0x24>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
  hiwdg.Init.Window = 1000;
 800166c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  hiwdg.Instance = IWDG;
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <MX_IWDG_Init+0x28>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001672:	2204      	movs	r2, #4
  hiwdg.Init.Window = 1000;
 8001674:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 1000;
 8001676:	6083      	str	r3, [r0, #8]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001678:	e9c0 1200 	strd	r1, r2, [r0]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800167c:	f002 fe5c 	bl	8004338 <HAL_IWDG_Init>
 8001680:	b900      	cbnz	r0, 8001684 <MX_IWDG_Init+0x1c>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001682:	bd08      	pop	{r3, pc}
 8001684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001688:	f001 b874 	b.w	8002774 <Error_Handler>
 800168c:	200002d8 	.word	0x200002d8
 8001690:	40003000 	.word	0x40003000
 8001694:	00000000 	.word	0x00000000

08001698 <adc_joystick_azel_conversion>:
	const int32_t out_max = 900; /* 90.0 degrees */
	long _l;
	int32_t ret = 0;
	uint32_t u32;

	_l = adcVal - mid;
 8001698:	1a5b      	subs	r3, r3, r1
{
 800169a:	b5d0      	push	{r4, r6, r7, lr}
	if (labs(_l) < JS_ADC_HYST)
 800169c:	f103 0609 	add.w	r6, r3, #9
 80016a0:	2e12      	cmp	r6, #18
{
 80016a2:	ed2d 8b02 	vpush	{d8}
 80016a6:	9c06      	ldr	r4, [sp, #24]
	if (labs(_l) < JS_ADC_HYST)
 80016a8:	d959      	bls.n	800175e <adc_joystick_azel_conversion+0xc6>
		_l = 0;
//	_i = (int) constrain(map(_l, in_min, in_max, out_min, out_max), out_min, out_max);

	if (_l < 0)
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db5b      	blt.n	8001766 <adc_joystick_azel_conversion+0xce>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80016ae:	f44f 7061 	mov.w	r0, #900	; 0x384
	long in_max = max - mid;
 80016b2:	1a52      	subs	r2, r2, r1
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80016b4:	fb00 f303 	mul.w	r3, r0, r3
 80016b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80016bc:	4283      	cmp	r3, r0
 80016be:	bfa8      	it	ge
 80016c0:	4603      	movge	r3, r0
 80016c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_i = (int) constrain(map(_l, in_min, 0, out_min, 0), out_min, 0);
	else
		_i = (int) constrain(map(_l, 0, in_max, 0, out_max), 0, out_max);

	u32 = abs(_i);
 80016c6:	4619      	mov	r1, r3
 80016c8:	461a      	mov	r2, r3
	if (u32 > 100) {
 80016ca:	2a64      	cmp	r2, #100	; 0x64
 80016cc:	dd47      	ble.n	800175e <adc_joystick_azel_conversion+0xc6>
		/* if below 30 degrees */
		if (u32 < 300)
 80016ce:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 80016d2:	d205      	bcs.n	80016e0 <adc_joystick_azel_conversion+0x48>
			_i /= 5;
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <adc_joystick_azel_conversion+0x100>)
 80016d6:	17da      	asrs	r2, r3, #31
 80016d8:	fb81 1303 	smull	r1, r3, r1, r3
 80016dc:	ebc2 0363 	rsb	r3, r2, r3, asr #1
		_f = (float) _i / 10.0f;
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ec:	ee87 8a87 	vdiv.f32	s16, s15, s14
		ret = (int32_t) (((1.0 - cos(_f * M_PI / 180.0)) * maxValue));
 80016f0:	ee18 0a10 	vmov	r0, s16
 80016f4:	f7fe ff50 	bl	8000598 <__aeabi_f2d>
 80016f8:	a325      	add	r3, pc, #148	; (adr r3, 8001790 <adc_joystick_azel_conversion+0xf8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ffa3 	bl	8000648 <__aeabi_dmul>
 8001702:	2200      	movs	r2, #0
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <adc_joystick_azel_conversion+0x104>)
 8001706:	f7ff f8c9 	bl	800089c <__aeabi_ddiv>
 800170a:	ec41 0b10 	vmov	d0, r0, r1
 800170e:	f009 f87b 	bl	800a808 <cos>
 8001712:	2000      	movs	r0, #0
 8001714:	4922      	ldr	r1, [pc, #136]	; (80017a0 <adc_joystick_azel_conversion+0x108>)
 8001716:	ec53 2b10 	vmov	r2, r3, d0
 800171a:	f7fe fddd 	bl	80002d8 <__aeabi_dsub>
 800171e:	4606      	mov	r6, r0
 8001720:	460f      	mov	r7, r1
 8001722:	4620      	mov	r0, r4
 8001724:	f7fe ff16 	bl	8000554 <__aeabi_ui2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4630      	mov	r0, r6
 800172e:	4639      	mov	r1, r7
 8001730:	f7fe ff8a 	bl	8000648 <__aeabi_dmul>
 8001734:	f7ff fa38 	bl	8000ba8 <__aeabi_d2iz>
		if (ret >= (maxValue * 90 / 100))
 8001738:	235a      	movs	r3, #90	; 0x5a
 800173a:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <adc_joystick_azel_conversion+0x10c>)
			ret = maxValue;
	}

	if (_f < 0)
 800173c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		if (ret >= (maxValue * 90 / 100))
 8001740:	fb04 f303 	mul.w	r3, r4, r3
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
			ret = maxValue;
 8001748:	ebb0 1f53 	cmp.w	r0, r3, lsr #5
 800174c:	bf28      	it	cs
 800174e:	4620      	movcs	r0, r4
	if (_f < 0)
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d504      	bpl.n	8001760 <adc_joystick_azel_conversion+0xc8>
		ret = 0 - ret;
 8001756:	4240      	negs	r0, r0

	return ret;
}
 8001758:	ecbd 8b02 	vpop	{d8}
 800175c:	bdd0      	pop	{r4, r6, r7, pc}
	int32_t ret = 0;
 800175e:	2000      	movs	r0, #0
}
 8001760:	ecbd 8b02 	vpop	{d8}
 8001764:	bdd0      	pop	{r4, r6, r7, pc}
	long in_min = min - mid;
 8001766:	1a46      	subs	r6, r0, r1
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001768:	1a09      	subs	r1, r1, r0
 800176a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <adc_joystick_azel_conversion+0x110>)
 8001770:	1b9b      	subs	r3, r3, r6
 8001772:	fb00 f303 	mul.w	r3, r0, r3
 8001776:	fb93 f3f1 	sdiv	r3, r3, r1
 800177a:	4413      	add	r3, r2
 800177c:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8001780:	4293      	cmp	r3, r2
 8001782:	bfb8      	it	lt
 8001784:	4613      	movlt	r3, r2
	u32 = abs(_i);
 8001786:	425a      	negs	r2, r3
 8001788:	4611      	mov	r1, r2
 800178a:	e79e      	b.n	80016ca <adc_joystick_azel_conversion+0x32>
 800178c:	f3af 8000 	nop.w
 8001790:	54442d18 	.word	0x54442d18
 8001794:	400921fb 	.word	0x400921fb
 8001798:	66666667 	.word	0x66666667
 800179c:	40668000 	.word	0x40668000
 80017a0:	3ff00000 	.word	0x3ff00000
 80017a4:	51eb851f 	.word	0x51eb851f
 80017a8:	fffffc7c 	.word	0xfffffc7c
 80017ac:	00000000 	.word	0x00000000

080017b0 <SystemClock_Config>:
{
 80017b0:	b500      	push	{lr}
 80017b2:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017b4:	2230      	movs	r2, #48	; 0x30
 80017b6:	2100      	movs	r1, #0
 80017b8:	a808      	add	r0, sp, #32
 80017ba:	f004 fc05 	bl	8005fc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017be:	2300      	movs	r3, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <SystemClock_Config+0xc0>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017c2:	a808      	add	r0, sp, #32
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017c4:	9306      	str	r3, [sp, #24]
 80017c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80017ca:	e9cd 3304 	strd	r3, r3, [sp, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	6c11      	ldr	r1, [r2, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <SystemClock_Config+0xc4>)
	__HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80017d6:	6411      	str	r1, [r2, #64]	; 0x40
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017d8:	2101      	movs	r1, #1
	__HAL_RCC_PWR_CLK_ENABLE();
 80017da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017ee:	910d      	str	r1, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f4:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001800:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001802:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001804:	23d8      	movs	r3, #216	; 0xd8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001806:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001808:	2204      	movs	r2, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800180a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001860 <SystemClock_Config+0xb0>
	RCC_OscInitStruct.PLL.PLLN = 216;
 800180e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001812:	ed8d 7b08 	vstr	d7, [sp, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001816:	f002 fe03 	bl	8004420 <HAL_RCC_OscConfig>
 800181a:	b108      	cbz	r0, 8001820 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
 800181e:	e7fe      	b.n	800181e <SystemClock_Config+0x6e>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001820:	f002 fdc4 	bl	80043ac <HAL_PWREx_EnableOverDrive>
 8001824:	b108      	cbz	r0, 800182a <SystemClock_Config+0x7a>
 8001826:	b672      	cpsid	i
 8001828:	e7fe      	b.n	8001828 <SystemClock_Config+0x78>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800182a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800182e:	2200      	movs	r2, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8001830:	a802      	add	r0, sp, #8
 8001832:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001834:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001868 <SystemClock_Config+0xb8>
 8001838:	e9cd 2304 	strd	r2, r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001840:	ed8d 7b02 	vstr	d7, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001844:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8001846:	f002 ffdb 	bl	8004800 <HAL_RCC_ClockConfig>
 800184a:	b108      	cbz	r0, 8001850 <SystemClock_Config+0xa0>
 800184c:	b672      	cpsid	i
 800184e:	e7fe      	b.n	800184e <SystemClock_Config+0x9e>
	HAL_RCC_EnableCSS();
 8001850:	f003 f8ac 	bl	80049ac <HAL_RCC_EnableCSS>
}
 8001854:	b015      	add	sp, #84	; 0x54
 8001856:	f85d fb04 	ldr.w	pc, [sp], #4
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	00000009 	.word	0x00000009
 8001864:	00010000 	.word	0x00010000
 8001868:	0000000f 	.word	0x0000000f
 800186c:	00000002 	.word	0x00000002
 8001870:	40023800 	.word	0x40023800
 8001874:	40007000 	.word	0x40007000

08001878 <main>:
{
 8001878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800187c:	f04f 0800 	mov.w	r8, #0
	/* Disables the MPU */
	HAL_MPU_Disable();

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001880:	f04f 0901 	mov.w	r9, #1
	*(uint16_t*) &led_state = 0;
 8001884:	4dba      	ldr	r5, [pc, #744]	; (8001b70 <main+0x2f8>)
	JRight.raw_min = 740;
 8001886:	4ebb      	ldr	r6, [pc, #748]	; (8001b74 <main+0x2fc>)
 8001888:	f8df b374 	ldr.w	fp, [pc, #884]	; 8001c00 <main+0x388>
{
 800188c:	ed2d 8b04 	vpush	{d8-d9}
 8001890:	b0e3      	sub	sp, #396	; 0x18c
			body_rws_pos[0] = (float) ru1.i32 * 360.0f / RWS_MOTOR_PAN_FULL_REV_IN_C;
 8001892:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 8001b78 <main+0x300>
 8001896:	eddf 8ab9 	vldr	s17, [pc, #740]	; 8001b7c <main+0x304>
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800189a:	e9cd 8822 	strd	r8, r8, [sp, #136]	; 0x88
 800189e:	e9cd 8824 	strd	r8, r8, [sp, #144]	; 0x90
	HAL_MPU_Disable();
 80018a2:	f002 f9d5 	bl	8003c50 <HAL_MPU_Disable>
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
	MPU_InitStruct.BaseAddress = 0x0;
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018a6:	f248 731f 	movw	r3, #34591	; 0x871f
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018aa:	a822      	add	r0, sp, #136	; 0x88
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018ac:	f8ad 9088 	strh.w	r9, [sp, #136]	; 0x88
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018b0:	e9cd 8323 	strd	r8, r3, [sp, #140]	; 0x8c
 80018b4:	f240 1301 	movw	r3, #257	; 0x101
 80018b8:	9325      	str	r3, [sp, #148]	; 0x94
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018ba:	f002 f9e7 	bl	8003c8c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018be:	2004      	movs	r0, #4
 80018c0:	f002 f9d4 	bl	8003c6c <HAL_MPU_Enable>
	HAL_Init();
 80018c4:	f001 fa22 	bl	8002d0c <HAL_Init>
	SystemClock_Config();
 80018c8:	f7ff ff72 	bl	80017b0 <SystemClock_Config>
	MX_GPIO_Init();
 80018cc:	f7ff fd18 	bl	8001300 <MX_GPIO_Init>
	MX_CAN1_Init();
 80018d0:	f7ff fc9a 	bl	8001208 <MX_CAN1_Init>
	MX_DMA_Init();
 80018d4:	f7ff fcf8 	bl	80012c8 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80018d8:	f001 f846 	bl	8002968 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80018dc:	f001 f880 	bl	80029e0 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 80018e0:	f7ff fbb2 	bl	8001048 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80018e4:	f001 f85e 	bl	80029a4 <MX_USART2_UART_Init>
	MX_TIM5_Init();
 80018e8:	f000 ffee 	bl	80028c8 <MX_TIM5_Init>
	MX_IWDG_Init();
 80018ec:	f7ff febc 	bl	8001668 <MX_IWDG_Init>
	*(uint16_t*) &led_state = 0;
 80018f0:	f8a5 8000 	strh.w	r8, [r5]
	uart_init_all();
 80018f4:	f001 f984 	bl	8002c00 <uart_init_all>
	LOG("Panel Firmware!\r\n");
 80018f8:	f001 fa20 	bl	8002d3c <HAL_GetTick>
 80018fc:	4aa0      	ldr	r2, [pc, #640]	; (8001b80 <main+0x308>)
 80018fe:	f242 7110 	movw	r1, #10000	; 0x2710
 8001902:	f240 1305 	movw	r3, #261	; 0x105
 8001906:	fba2 4200 	umull	r4, r2, r2, r0
	bus.hcan = &hcan1;
 800190a:	4c9e      	ldr	r4, [pc, #632]	; (8001b84 <main+0x30c>)
	LOG("Panel Firmware!\r\n");
 800190c:	0b52      	lsrs	r2, r2, #13
 800190e:	fb01 0112 	mls	r1, r1, r2, r0
 8001912:	4a9d      	ldr	r2, [pc, #628]	; (8001b88 <main+0x310>)
 8001914:	489d      	ldr	r0, [pc, #628]	; (8001b8c <main+0x314>)
 8001916:	f005 fa03 	bl	8006d20 <iprintf>
	bus.tx_manual.datalength = bus.tx_track.datalength = bus.tx_balistik.datalength = bus.tx_homing.datalength = 8;
 800191a:	2308      	movs	r3, #8
	bus.tx_command.id = RWS_PANEL_CMD_ID;
 800191c:	f240 1211 	movw	r2, #273	; 0x111
	bus.hcan = &hcan1;
 8001920:	489b      	ldr	r0, [pc, #620]	; (8001b90 <main+0x318>)
	bus.tx_manual.datalength = bus.tx_track.datalength = bus.tx_balistik.datalength = bus.tx_homing.datalength = 8;
 8001922:	6623      	str	r3, [r4, #96]	; 0x60
	CAN_RX_Filter_Motor(bus.hcan, 0);
 8001924:	4641      	mov	r1, r8
	bus.tx_manual.datalength = bus.tx_track.datalength = bus.tx_balistik.datalength = bus.tx_homing.datalength = 8;
 8001926:	63a3      	str	r3, [r4, #56]	; 0x38
	bus.tx_manual.id = RWS_PANEL_MAN_ID;
 8001928:	f44f 7389 	mov.w	r3, #274	; 0x112
	bus.hcan = &hcan1;
 800192c:	6020      	str	r0, [r4, #0]
	bus.tx_manual.id = RWS_PANEL_MAN_ID;
 800192e:	6363      	str	r3, [r4, #52]	; 0x34
	bus.tx_balistik.id = RWS_PANEL_BAL_ID;
 8001930:	f44f 738a 	mov.w	r3, #276	; 0x114
	uint8_t opt_cam_counter = 0;
 8001934:	f8cd 801c 	str.w	r8, [sp, #28]
	bus.tx_balistik.id = RWS_PANEL_BAL_ID;
 8001938:	65e3      	str	r3, [r4, #92]	; 0x5c
	bus.rx_motor_state.id = RWS_MOTOR_STATUS_ID;
 800193a:	f240 1321 	movw	r3, #289	; 0x121
	uint32_t trig_out_timer = 1;
 800193e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	bus.rx_motor_state.id = RWS_MOTOR_STATUS_ID;
 8001942:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	bus.rx_motor_position.id = RWS_MOTOR_POS_ID;
 8001946:	f44f 7391 	mov.w	r3, #290	; 0x122
	uint32_t adc_timer = 0;
 800194a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bus.rx_motor_position.id = RWS_MOTOR_POS_ID;
 800194e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	bus.rx_motor_imu.id = RWS_MOTOR_IMU_ID;
 8001952:	f240 1323 	movw	r3, #291	; 0x123
 8001956:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	bus.rx_opt_lrf.id = RWS_OPTRONIK_LRF_ID;
 800195a:	f240 1331 	movw	r3, #305	; 0x131
 800195e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	bus.rx_opt_cam.id = RWS_OPTRONIK_CAM_ID;
 8001962:	f44f 7399 	mov.w	r3, #306	; 0x132
 8001966:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 800196a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800196e:	ee09 3a10 	vmov	s18, r3
	bus.tx_command.id = RWS_PANEL_CMD_ID;
 8001972:	2306      	movs	r3, #6
 8001974:	e9c4 2308 	strd	r2, r3, [r4, #32]
	bus.tx_homing.id = RWS_PANEL_HOM_ID;
 8001978:	f240 1215 	movw	r2, #277	; 0x115
 800197c:	2308      	movs	r3, #8
 800197e:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	bus.tx_track.id = RWS_PANEL_TRK_ID;
 8001982:	f240 1213 	movw	r2, #275	; 0x113
 8001986:	2308      	movs	r3, #8
	uint8_t motor_state_counter = 0;
 8001988:	e9cd 8808 	strd	r8, r8, [sp, #32]
	bus.tx_track.id = RWS_PANEL_TRK_ID;
 800198c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
	CAN_RX_Filter_Motor(bus.hcan, 0);
 8001990:	f003 ff8e 	bl	80058b0 <CAN_RX_Filter_Motor>
	CAN_RX_Filter_Optronik(bus.hcan, 1);
 8001994:	4649      	mov	r1, r9
 8001996:	6820      	ldr	r0, [r4, #0]
 8001998:	f003 ffa8 	bl	80058ec <CAN_RX_Filter_Optronik>
	CAN_Config(bus.hcan);
 800199c:	6820      	ldr	r0, [r4, #0]
 800199e:	f003 ffc3 	bl	8005928 <CAN_Config>
	CAN_Tx_Config(&bus.txHeader);
 80019a2:	1d20      	adds	r0, r4, #4
 80019a4:	f003 ffd8 	bl	8005958 <CAN_Tx_Config>
	*(uint8_t*) &p0 = 0;
 80019a8:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <main+0x31c>)
	*(uint8_t*) &JLeft.button = 0;
 80019aa:	4a7b      	ldr	r2, [pc, #492]	; (8001b98 <main+0x320>)
	*(uint8_t*) &p0 = 0;
 80019ac:	f883 8000 	strb.w	r8, [r3]
	*(uint8_t*) &p1 = 0;
 80019b0:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <main+0x324>)
	JLeft.betha = 1.0f - JLeft.alpha;
 80019b2:	4611      	mov	r1, r2
	*(uint8_t*) &JLeft.button = 0;
 80019b4:	f882 8028 	strb.w	r8, [r2, #40]	; 0x28
	*(uint8_t*) &p1 = 0;
 80019b8:	f883 8000 	strb.w	r8, [r3]
	*(uint8_t*) &p4 = 0;
 80019bc:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <main+0x328>)
	JLeft.az = 0;
 80019be:	f8c2 8008 	str.w	r8, [r2, #8]
	*(uint8_t*) &p4 = 0;
 80019c2:	f883 8000 	strb.w	r8, [r3]
	*(uint8_t*) &p5 = 0;
 80019c6:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <main+0x32c>)
	JLeft.el_tem = 0;
 80019c8:	f8c2 801c 	str.w	r8, [r2, #28]
	*(uint8_t*) &p5 = 0;
 80019cc:	f883 8000 	strb.w	r8, [r3]
	JLeft.alpha = 1.0f;
 80019d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	HAL_TIM_Base_Start(&htim5);
 80019d4:	4874      	ldr	r0, [pc, #464]	; (8001ba8 <main+0x330>)
	JLeft.alpha = 1.0f;
 80019d6:	6213      	str	r3, [r2, #32]
	JRight.az_max = MTR_MID_SPEED;
 80019d8:	4b74      	ldr	r3, [pc, #464]	; (8001bac <main+0x334>)
	*(uint8_t*) &JRight.button = 0;
 80019da:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
	JRight.az_max = MTR_MID_SPEED;
 80019de:	60f3      	str	r3, [r6, #12]
	JRight.el_max = MTR_MID_SPEED;
 80019e0:	61b3      	str	r3, [r6, #24]
	JLeft.az_max = 1000UL;
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	JRight.az = 0;
 80019e6:	f8c6 8008 	str.w	r8, [r6, #8]
	JLeft.az_max = 1000UL;
 80019ea:	60d3      	str	r3, [r2, #12]
	JLeft.el_max = 1000UL;
 80019ec:	6193      	str	r3, [r2, #24]
	JRight.raw_min = 740;
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <main+0x338>)
	JRight.el_tem = 0;
 80019f0:	f8c6 801c 	str.w	r8, [r6, #28]
	JRight.raw_min = 740;
 80019f4:	6033      	str	r3, [r6, #0]
	JRight.raw_max = 1150;
 80019f6:	f240 437e 	movw	r3, #1150	; 0x47e
 80019fa:	80b3      	strh	r3, [r6, #4]
	JLeft.raw_min = 1000;
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <main+0x33c>)
 80019fe:	6013      	str	r3, [r2, #0]
	JLeft.raw_max = 1600;
 8001a00:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001a04:	8093      	strh	r3, [r2, #4]
	JRight.alpha = 0.2f;
 8001a06:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <main+0x340>)
 8001a08:	6233      	str	r3, [r6, #32]
	JRight.betha = 1.0f - JRight.alpha;
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <main+0x344>)
 8001a0c:	6273      	str	r3, [r6, #36]	; 0x24
	JLeft.betha = 1.0f - JLeft.alpha;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6253      	str	r3, [r2, #36]	; 0x24
	JRight.az_tem = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	2200      	movs	r2, #0
	JLeft.az_tem = 0;
 8001a16:	e9c1 2304 	strd	r2, r3, [r1, #16]
	JRight.az_tem = 0;
 8001a1a:	e9c6 2304 	strd	r2, r3, [r6, #16]
	HAL_TIM_Base_Start(&htim5);
 8001a1e:	f003 fb3b 	bl	8005098 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, adcVal, 5);
 8001a22:	2205      	movs	r2, #5
 8001a24:	4659      	mov	r1, fp
 8001a26:	4866      	ldr	r0, [pc, #408]	; (8001bc0 <main+0x348>)
 8001a28:	f001 fa60 	bl	8002eec <HAL_ADC_Start_DMA>
	sla_init();
 8001a2c:	f004 f8ea 	bl	8005c04 <sla_init>
	sla_set_distance(lrf_val);
 8001a30:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <main+0x34c>)
 8001a32:	8818      	ldrh	r0, [r3, #0]
 8001a34:	f004 f8e0 	bl	8005bf8 <sla_set_distance>
		HAL_IWDG_Refresh(&hiwdg);
 8001a38:	4863      	ldr	r0, [pc, #396]	; (8001bc8 <main+0x350>)
 8001a3a:	f002 fcaf 	bl	800439c <HAL_IWDG_Refresh>
		if (trig_timer != 0) {
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <main+0x354>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 8524 	bne.w	8002490 <main+0xc18>
		if (p1.triggerEnable == 1 && (JRight.button.deadman || JLeft.button.deadman))
 8001a48:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <main+0x324>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	07df      	lsls	r7, r3, #31
 8001a4e:	d510      	bpl.n	8001a72 <main+0x1fa>
 8001a50:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <main+0x320>)
 8001a52:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001a56:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	07d8      	lsls	r0, r3, #31
 8001a5e:	d508      	bpl.n	8001a72 <main+0x1fa>
			HAL_GPIO_WritePin(TRIG_PULSE_OUT_GPIO_Port, TRIG_PULSE_OUT_Pin,
 8001a60:	2102      	movs	r1, #2
 8001a62:	485b      	ldr	r0, [pc, #364]	; (8001bd0 <main+0x358>)
 8001a64:	f002 fc5e 	bl	8004324 <HAL_GPIO_ReadPin>
 8001a68:	2120      	movs	r1, #32
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4859      	ldr	r0, [pc, #356]	; (8001bd4 <main+0x35c>)
 8001a6e:	f002 fc5f 	bl	8004330 <HAL_GPIO_WritePin>
		if (serial_available(&debug) > 0) {
 8001a72:	4859      	ldr	r0, [pc, #356]	; (8001bd8 <main+0x360>)
 8001a74:	f004 f884 	bl	8005b80 <serial_available>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	f040 84e0 	bne.w	800243e <main+0xbc6>
		if (adcConvCompleted != 0) {
 8001a7e:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <main+0x364>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8288 	bne.w	8001f98 <main+0x720>
		if (bus.rx_motor_state.counter != motor_state_counter) {
 8001a88:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
 8001a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f040 849d 	bne.w	80023d0 <main+0xb58>
		if (bus.rx_motor_position.counter != motor_position_counter) {
 8001a96:	f894 8116 	ldrb.w	r8, [r4, #278]	; 0x116
 8001a9a:	9b08      	ldr	r3, [sp, #32]
 8001a9c:	4598      	cmp	r8, r3
 8001a9e:	d045      	beq.n	8001b2c <main+0x2b4>
			tem = bus.rx_motor_position;
 8001aa0:	224c      	movs	r2, #76	; 0x4c
 8001aa2:	494f      	ldr	r1, [pc, #316]	; (8001be0 <main+0x368>)
 8001aa4:	a80f      	add	r0, sp, #60	; 0x3c
 8001aa6:	f004 fa81 	bl	8005fac <memcpy>
				ru1.u8[i] = tem.data[i];
 8001aaa:	f8dd 9042 	ldr.w	r9, [sp, #66]	; 0x42
				ru2.u8[i] = tem.data[i + 4];
 8001aae:	f8dd a046 	ldr.w	sl, [sp, #70]	; 0x46
			LOGBUS("pan= %ld,tilt= %ld\r\n", ru1.i32, ru2.i32);
 8001ab2:	f001 f943 	bl	8002d3c <HAL_GetTick>
 8001ab6:	4932      	ldr	r1, [pc, #200]	; (8001b80 <main+0x308>)
 8001ab8:	f242 7c10 	movw	ip, #10000	; 0x2710
 8001abc:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8001ac0:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <main+0x310>)
 8001ac2:	fba1 7100 	umull	r7, r1, r1, r0
 8001ac6:	0b49      	lsrs	r1, r1, #13
 8001ac8:	e9cd 9a00 	strd	r9, sl, [sp]
 8001acc:	fb0c 0111 	mls	r1, ip, r1, r0
 8001ad0:	4844      	ldr	r0, [pc, #272]	; (8001be4 <main+0x36c>)
 8001ad2:	f005 f925 	bl	8006d20 <iprintf>
			ru1.i32 %= RWS_MOTOR_PAN_FULL_REV_IN_C;
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <main+0x370>)
			sla_set_attitude(body_rws_pos[0], body_rws_pos[1]);
 8001ad8:	f8cd 8020 	str.w	r8, [sp, #32]
			ru1.i32 %= RWS_MOTOR_PAN_FULL_REV_IN_C;
 8001adc:	fb83 3209 	smull	r3, r2, r3, r9
 8001ae0:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8001ae4:	ebc3 33e2 	rsb	r3, r3, r2, asr #15
 8001ae8:	4a40      	ldr	r2, [pc, #256]	; (8001bec <main+0x374>)
 8001aea:	fb02 9313 	mls	r3, r2, r3, r9
 8001aee:	ee07 3a90 	vmov	s15, r3
				body_rws_pos[0] += 360.0f;
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <main+0x378>)
			body_rws_pos[0] = (float) ru1.i32 * 360.0f / RWS_MOTOR_PAN_FULL_REV_IN_C;
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001afc:	ee87 0aa8 	vdiv.f32	s0, s15, s17
			body_rws_pos[1] = (float) RWS_MOTOR_TILT_C_TO_DEG(ru2.i32);
 8001b00:	ee07 aa90 	vmov	s15, sl
 8001b04:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8001b08:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001bf4 <main+0x37c>
 8001b0c:	ee60 0aa7 	vmul.f32	s1, s1, s15
			if (body_rws_pos[0] < 0)
 8001b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				body_rws_pos[0] += 360.0f;
 8001b18:	bf48      	it	mi
 8001b1a:	ee30 0a08 	vaddmi.f32	s0, s0, s16
 8001b1e:	ed83 0a00 	vstr	s0, [r3]
			body_rws_pos[1] = (float) RWS_MOTOR_TILT_C_TO_DEG(ru2.i32);
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <main+0x378>)
 8001b24:	edc3 0a01 	vstr	s1, [r3, #4]
			sla_set_attitude(body_rws_pos[0], body_rws_pos[1]);
 8001b28:	f004 f85e 	bl	8005be8 <sla_set_attitude>
		if (bus.rx_opt_cam.counter != opt_cam_counter) {
 8001b2c:	f894 a1fa 	ldrb.w	sl, [r4, #506]	; 0x1fa
 8001b30:	9b07      	ldr	r3, [sp, #28]
 8001b32:	459a      	cmp	sl, r3
 8001b34:	d066      	beq.n	8001c04 <main+0x38c>
			tem = bus.rx_opt_cam;
 8001b36:	224c      	movs	r2, #76	; 0x4c
 8001b38:	492f      	ldr	r1, [pc, #188]	; (8001bf8 <main+0x380>)
 8001b3a:	a80f      	add	r0, sp, #60	; 0x3c
 8001b3c:	f004 fa36 	bl	8005fac <memcpy>
			LOGBUS("opt_cam: %02X\r\n", tem.data[0]);
 8001b40:	f001 f8fc 	bl	8002d3c <HAL_GetTick>
 8001b44:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001b48:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <main+0x308>)
 8001b50:	fba3 2300 	umull	r2, r3, r3, r0
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <main+0x310>)
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	fb01 0113 	mls	r1, r1, r3, r0
 8001b5c:	f240 1381 	movw	r3, #385	; 0x181
 8001b60:	4826      	ldr	r0, [pc, #152]	; (8001bfc <main+0x384>)
 8001b62:	f005 f8dd 	bl	8006d20 <iprintf>
			led_state.opt_cam_state = 1;
 8001b66:	782b      	ldrb	r3, [r5, #0]
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	702b      	strb	r3, [r5, #0]
 8001b6e:	e049      	b.n	8001c04 <main+0x38c>
 8001b70:	20000588 	.word	0x20000588
 8001b74:	20000318 	.word	0x20000318
 8001b78:	43b40000 	.word	0x43b40000
 8001b7c:	48cbfa60 	.word	0x48cbfa60
 8001b80:	d1b71759 	.word	0xd1b71759
 8001b84:	20000370 	.word	0x20000370
 8001b88:	0800b8b0 	.word	0x0800b8b0
 8001b8c:	0800b8b8 	.word	0x0800b8b8
 8001b90:	200002b0 	.word	0x200002b0
 8001b94:	2000058c 	.word	0x2000058c
 8001b98:	200002e8 	.word	0x200002e8
 8001b9c:	20000590 	.word	0x20000590
 8001ba0:	20000594 	.word	0x20000594
 8001ba4:	20000598 	.word	0x20000598
 8001ba8:	200005a4 	.word	0x200005a4
 8001bac:	000186a0 	.word	0x000186a0
 8001bb0:	03b602e4 	.word	0x03b602e4
 8001bb4:	051403e8 	.word	0x051403e8
 8001bb8:	3e4ccccd 	.word	0x3e4ccccd
 8001bbc:	3f4ccccd 	.word	0x3f4ccccd
 8001bc0:	20000208 	.word	0x20000208
 8001bc4:	20000006 	.word	0x20000006
 8001bc8:	200002d8 	.word	0x200002d8
 8001bcc:	2000059c 	.word	0x2000059c
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	200005f0 	.word	0x200005f0
 8001bdc:	20000350 	.word	0x20000350
 8001be0:	20000440 	.word	0x20000440
 8001be4:	0800ba0c 	.word	0x0800ba0c
 8001be8:	1414a1d3 	.word	0x1414a1d3
 8001bec:	00065fd3 	.word	0x00065fd3
 8001bf0:	20000368 	.word	0x20000368
 8001bf4:	3a09b0bb 	.word	0x3a09b0bb
 8001bf8:	20000524 	.word	0x20000524
 8001bfc:	0800ba30 	.word	0x0800ba30
 8001c00:	20000354 	.word	0x20000354
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c04:	f001 f89a 	bl	8002d3c <HAL_GetTick>
 8001c08:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8001c0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c10:	4298      	cmp	r0, r3
	led_state.motor_state = led_check_connection(&bus.rx_motor_state.lastTimestamp);
 8001c12:	782b      	ldrb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c14:	bf2c      	ite	cs
 8001c16:	2000      	movcs	r0, #0
 8001c18:	2001      	movcc	r0, #1
	led_state.motor_state = led_check_connection(&bus.rx_motor_state.lastTimestamp);
 8001c1a:	f360 0300 	bfi	r3, r0, #0, #1
 8001c1e:	702b      	strb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c20:	f001 f88c 	bl	8002d3c <HAL_GetTick>
 8001c24:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8001c28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c2c:	4298      	cmp	r0, r3
	led_state.motor_pos = led_check_connection(&bus.rx_motor_position.lastTimestamp);
 8001c2e:	782b      	ldrb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c30:	bf2c      	ite	cs
 8001c32:	2000      	movcs	r0, #0
 8001c34:	2001      	movcc	r0, #1
	led_state.motor_pos = led_check_connection(&bus.rx_motor_position.lastTimestamp);
 8001c36:	f360 0341 	bfi	r3, r0, #1, #1
 8001c3a:	702b      	strb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c3c:	f001 f87e 	bl	8002d3c <HAL_GetTick>
 8001c40:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 8001c44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c48:	4298      	cmp	r0, r3
	led_state.motor_imu = led_check_connection(&bus.rx_motor_imu.lastTimestamp);
 8001c4a:	782b      	ldrb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c4c:	bf2c      	ite	cs
 8001c4e:	2000      	movcs	r0, #0
 8001c50:	2001      	movcc	r0, #1
	led_state.motor_imu = led_check_connection(&bus.rx_motor_imu.lastTimestamp);
 8001c52:	f360 0382 	bfi	r3, r0, #2, #1
 8001c56:	702b      	strb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c58:	f001 f870 	bl	8002d3c <HAL_GetTick>
 8001c5c:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
 8001c60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c64:	4298      	cmp	r0, r3
	led_state.opt_cam_state = led_check_connection(&bus.rx_opt_cam.lastTimestamp);
 8001c66:	782b      	ldrb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c68:	bf2c      	ite	cs
 8001c6a:	2000      	movcs	r0, #0
 8001c6c:	2001      	movcc	r0, #1
	led_state.opt_cam_state = led_check_connection(&bus.rx_opt_cam.lastTimestamp);
 8001c6e:	f360 03c3 	bfi	r3, r0, #3, #1
 8001c72:	702b      	strb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c74:	f001 f862 	bl	8002d3c <HAL_GetTick>
 8001c78:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8001c7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c80:	4298      	cmp	r0, r3
	led_state.opt_lrf = led_check_connection(&bus.rx_opt_lrf.lastTimestamp);
 8001c82:	782b      	ldrb	r3, [r5, #0]
	if (HAL_GetTick() >= *timestamp + BUS_MAX_TIMEOUT)
 8001c84:	bf2c      	ite	cs
 8001c86:	2000      	movcs	r0, #0
 8001c88:	2001      	movcc	r0, #1
	led_state.opt_lrf = led_check_connection(&bus.rx_opt_lrf.lastTimestamp);
 8001c8a:	f360 1304 	bfi	r3, r0, #4, #1
 8001c8e:	702b      	strb	r3, [r5, #0]
	if (HAL_GetTick() >= _led_timer) {
 8001c90:	f001 f854 	bl	8002d3c <HAL_GetTick>
 8001c94:	4ba9      	ldr	r3, [pc, #676]	; (8001f3c <main+0x6c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4298      	cmp	r0, r3
 8001c9a:	f080 8127 	bcs.w	8001eec <main+0x674>
		sla_handler();
 8001c9e:	f003 ffe7 	bl	8005c70 <sla_handler>
	if (HAL_GetTick() >= _send_timer) {
 8001ca2:	f001 f84b 	bl	8002d3c <HAL_GetTick>
 8001ca6:	4ba6      	ldr	r3, [pc, #664]	; (8001f40 <main+0x6c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4298      	cmp	r0, r3
 8001cac:	f080 80f7 	bcs.w	8001e9e <main+0x626>
	if ((JRight.button.deadman | JLeft.button.deadman) && JLeft.button.bButton)
 8001cb0:	4ba4      	ldr	r3, [pc, #656]	; (8001f44 <main+0x6cc>)
 8001cb2:	f896 8028 	ldrb.w	r8, [r6, #40]	; 0x28
 8001cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cba:	ea43 0808 	orr.w	r8, r3, r8
 8001cbe:	f018 0801 	ands.w	r8, r8, #1
	uint8_t _button = 0;
 8001cc2:	bf18      	it	ne
 8001cc4:	f3c3 08c0 	ubfxne	r8, r3, #3, #1
	if (sla_gsl_available() > 0) {
 8001cc8:	f003 ff9e 	bl	8005c08 <sla_gsl_available>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	f040 80dd 	bne.w	8001e8c <main+0x614>
	if (homing_button != _button) {
 8001cd2:	4b9d      	ldr	r3, [pc, #628]	; (8001f48 <main+0x6d0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4543      	cmp	r3, r8
			if (rws_mode == MOVE_MODE_MAN) {
 8001cd8:	4b9c      	ldr	r3, [pc, #624]	; (8001f4c <main+0x6d4>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
	if (homing_button != _button) {
 8001cdc:	d005      	beq.n	8001cea <main+0x472>
		if (_button == 1) {
 8001cde:	f1b8 0f00 	cmp.w	r8, #0
 8001ce2:	d111      	bne.n	8001d08 <main+0x490>
		homing_button = _button;
 8001ce4:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <main+0x6d0>)
 8001ce6:	f882 8000 	strb.w	r8, [r2]
	if (rws_mode == MOVE_MODE_MAN)
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d16f      	bne.n	8001dce <main+0x556>
		homing_send_timer = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	4a97      	ldr	r2, [pc, #604]	; (8001f50 <main+0x6d8>)
 8001cf2:	6013      	str	r3, [r2, #0]
	if (HAL_GetTick() >= _update_sla_timer) {
 8001cf4:	f001 f822 	bl	8002d3c <HAL_GetTick>
 8001cf8:	4b96      	ldr	r3, [pc, #600]	; (8001f54 <main+0x6dc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4298      	cmp	r0, r3
 8001cfe:	f080 80a3 	bcs.w	8001e48 <main+0x5d0>
		if (bus.rx_opt_cam.counter != opt_cam_counter) {
 8001d02:	f8cd a01c 	str.w	sl, [sp, #28]
	while (1) {
 8001d06:	e697      	b.n	8001a38 <main+0x1c0>
			if (rws_mode == MOVE_MODE_MAN) {
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 83ff 	bne.w	800250c <main+0xc94>
				if (gsl_counter != homing_command.counter) {
 8001d0e:	4892      	ldr	r0, [pc, #584]	; (8001f58 <main+0x6e0>)
 8001d10:	4f92      	ldr	r7, [pc, #584]	; (8001f5c <main+0x6e4>)
 8001d12:	7802      	ldrb	r2, [r0, #0]
 8001d14:	7839      	ldrb	r1, [r7, #0]
 8001d16:	4291      	cmp	r1, r2
 8001d18:	f000 843d 	beq.w	8002596 <main+0xd1e>
					lrf_val = homing_command.distance;
 8001d1c:	4603      	mov	r3, r0
					gsl_counter = homing_command.counter;
 8001d1e:	703a      	strb	r2, [r7, #0]
					lrf_val = homing_command.distance;
 8001d20:	8980      	ldrh	r0, [r0, #12]
 8001d22:	4a8f      	ldr	r2, [pc, #572]	; (8001f60 <main+0x6e8>)
					e.i32 = homing_command.el;
 8001d24:	e9d3 9801 	ldrd	r9, r8, [r3, #4]
					lrf_val = homing_command.distance;
 8001d28:	8010      	strh	r0, [r2, #0]
					sla_set_distance(lrf_val);
 8001d2a:	f003 ff65 	bl	8005bf8 <sla_set_distance>
					sla_gsl_start();
 8001d2e:	f003 ff85 	bl	8005c3c <sla_gsl_start>
 8001d32:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8001d36:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8001d3a:	f3c9 4c07 	ubfx	ip, r9, #16, #8
 8001d3e:	f3c8 2107 	ubfx	r1, r8, #8, #8
 8001d42:	fa5f fe89 	uxtb.w	lr, r9
 8001d46:	fa5f f088 	uxtb.w	r0, r8
 8001d4a:	4617      	mov	r7, r2
 8001d4c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001d50:	ea4f 6919 	mov.w	r9, r9, lsr #24
					bus.tx_homing.data[i] = a.u8[i];
 8001d54:	2200      	movs	r2, #0
 8001d56:	f36e 0207 	bfi	r2, lr, #0, #8
 8001d5a:	f367 220f 	bfi	r2, r7, #8, #8
 8001d5e:	f36c 4217 	bfi	r2, ip, #16, #8
 8001d62:	f369 621f 	bfi	r2, r9, #24, #8
 8001d66:	67a2      	str	r2, [r4, #120]	; 0x78
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f360 0207 	bfi	r2, r0, #0, #8
 8001d6e:	f361 220f 	bfi	r2, r1, #8, #8
 8001d72:	f363 4217 	bfi	r2, r3, #16, #8
 8001d76:	f368 621f 	bfi	r2, r8, #24, #8
 8001d7a:	67e2      	str	r2, [r4, #124]	; 0x7c
				LOGSLA("HOMING STARTED!\r\nHoming=%ld,%ld,%d\r\n", homing_command.az, homing_command.el,
 8001d7c:	f000 ffde 	bl	8002d3c <HAL_GetTick>
 8001d80:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <main+0x6e0>)
 8001d82:	8993      	ldrh	r3, [r2, #12]
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	4b77      	ldr	r3, [pc, #476]	; (8001f64 <main+0x6ec>)
 8001d88:	fba3 1300 	umull	r1, r3, r3, r0
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	6892      	ldr	r2, [r2, #8]
 8001d90:	0b5b      	lsrs	r3, r3, #13
 8001d92:	9201      	str	r2, [sp, #4]
 8001d94:	684a      	ldr	r2, [r1, #4]
 8001d96:	f242 7110 	movw	r1, #10000	; 0x2710
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	fb01 0113 	mls	r1, r1, r3, r0
 8001da0:	4a71      	ldr	r2, [pc, #452]	; (8001f68 <main+0x6f0>)
 8001da2:	f240 230d 	movw	r3, #525	; 0x20d
 8001da6:	4871      	ldr	r0, [pc, #452]	; (8001f6c <main+0x6f4>)
 8001da8:	f004 ffba 	bl	8006d20 <iprintf>
				p0.motorEnable = 1;
 8001dac:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <main+0x6f8>)
 8001dae:	7813      	ldrb	r3, [r2, #0]
 8001db0:	f023 031f 	bic.w	r3, r3, #31
 8001db4:	f043 030b 	orr.w	r3, r3, #11
 8001db8:	7013      	strb	r3, [r2, #0]
				homing_send_timer = HAL_GetTick();
 8001dba:	f000 ffbf 	bl	8002d3c <HAL_GetTick>
 8001dbe:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <main+0x6d8>)
				rws_mode = MOVE_MODE_HOMING;
 8001dc0:	4a62      	ldr	r2, [pc, #392]	; (8001f4c <main+0x6d4>)
				homing_send_timer = HAL_GetTick();
 8001dc2:	6018      	str	r0, [r3, #0]
				rws_mode = MOVE_MODE_HOMING;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	7013      	strb	r3, [r2, #0]
		homing_button = _button;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4a5f      	ldr	r2, [pc, #380]	; (8001f48 <main+0x6d0>)
 8001dcc:	7013      	strb	r3, [r2, #0]
	if (homing_send_timer > 0) {
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <main+0x6d8>)
 8001dd0:	461f      	mov	r7, r3
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d08d      	beq.n	8001cf4 <main+0x47c>
		if (HAL_GetTick() >= homing_send_timer) {
 8001dd8:	f000 ffb0 	bl	8002d3c <HAL_GetTick>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4298      	cmp	r0, r3
 8001de0:	d388      	bcc.n	8001cf4 <main+0x47c>
			homing_send_timer = HAL_GetTick() + 100;
 8001de2:	f000 ffab 	bl	8002d3c <HAL_GetTick>
	bus.txHeader.StdId = buffer->id;
 8001de6:	6f23      	ldr	r3, [r4, #112]	; 0x70
			homing_send_timer = HAL_GetTick() + 100;
 8001de8:	3064      	adds	r0, #100	; 0x64
	bus.txHeader.StdId = buffer->id;
 8001dea:	6063      	str	r3, [r4, #4]
	bus.txHeader.DLC = buffer->datalength;
 8001dec:	6f63      	ldr	r3, [r4, #116]	; 0x74
			homing_send_timer = HAL_GetTick() + 100;
 8001dee:	6038      	str	r0, [r7, #0]
	if (HAL_CAN_GetTxMailboxesFreeLevel(bus.hcan) > 0)
 8001df0:	6820      	ldr	r0, [r4, #0]
	bus.txHeader.DLC = buffer->datalength;
 8001df2:	6163      	str	r3, [r4, #20]
	if (HAL_CAN_GetTxMailboxesFreeLevel(bus.hcan) > 0)
 8001df4:	f001 fcb2 	bl	800375c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	f040 83d5 	bne.w	80025a8 <main+0xd30>
			LOGSLA("body pos=%.1f,%.3f\r\n", body_rws_pos[0], body_rws_pos[1]);
 8001dfe:	f000 ff9d 	bl	8002d3c <HAL_GetTick>
 8001e02:	4958      	ldr	r1, [pc, #352]	; (8001f64 <main+0x6ec>)
 8001e04:	4603      	mov	r3, r0
 8001e06:	4f5b      	ldr	r7, [pc, #364]	; (8001f74 <main+0x6fc>)
 8001e08:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e0c:	fba1 1803 	umull	r1, r8, r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	ea4f 3858 	mov.w	r8, r8, lsr #13
 8001e16:	fb02 3818 	mls	r8, r2, r8, r3
 8001e1a:	f7fe fbbd 	bl	8000598 <__aeabi_f2d>
 8001e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	f7fe fbb8 	bl	8000598 <__aeabi_f2d>
 8001e28:	f240 2326 	movw	r3, #550	; 0x226
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <main+0x6f0>)
 8001e2e:	e9cd 0100 	strd	r0, r1, [sp]
 8001e32:	4641      	mov	r1, r8
 8001e34:	4850      	ldr	r0, [pc, #320]	; (8001f78 <main+0x700>)
 8001e36:	f004 ff73 	bl	8006d20 <iprintf>
	if (HAL_GetTick() >= _update_sla_timer) {
 8001e3a:	f000 ff7f 	bl	8002d3c <HAL_GetTick>
 8001e3e:	4b45      	ldr	r3, [pc, #276]	; (8001f54 <main+0x6dc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4298      	cmp	r0, r3
 8001e44:	f4ff af5d 	bcc.w	8001d02 <main+0x48a>
		_update_sla_timer = HAL_GetTick() + 1000;
 8001e48:	f000 ff78 	bl	8002d3c <HAL_GetTick>
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <main+0x6dc>)
 8001e4e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8001e52:	6018      	str	r0, [r3, #0]
		if (rws_mode == MOVE_MODE_MAN) {
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <main+0x6d4>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8372 	beq.w	8002542 <main+0xcca>
		else if (rws_mode == MOVE_MODE_HOMING) {
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	f47f af4f 	bne.w	8001d02 <main+0x48a>
			bufLen = sprintf(buf, "$DISPSTR,1,5,30,HOMING MODE*");
 8001e64:	f8df e12c 	ldr.w	lr, [pc, #300]	; 8001f94 <main+0x71c>
 8001e68:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
 8001e6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e74:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e78:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
			serial_write_str(&pcE, buf, bufLen);
 8001e7c:	221c      	movs	r2, #28
 8001e7e:	a922      	add	r1, sp, #136	; 0x88
 8001e80:	483e      	ldr	r0, [pc, #248]	; (8001f7c <main+0x704>)
			bufLen = sprintf(buf, "$DISPSTR,1,5,30,HOMING MODE*");
 8001e82:	f88c 3000 	strb.w	r3, [ip]
			serial_write_str(&pcE, buf, bufLen);
 8001e86:	f003 fea3 	bl	8005bd0 <serial_write_str>
 8001e8a:	e73a      	b.n	8001d02 <main+0x48a>
		sla_gsl_get_command(&homing_command.counter, &homing_command.az, &homing_command.el, &homing_command.distance);
 8001e8c:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <main+0x708>)
 8001e8e:	1f1a      	subs	r2, r3, #4
 8001e90:	f1a3 0108 	sub.w	r1, r3, #8
 8001e94:	f1a3 000c 	sub.w	r0, r3, #12
 8001e98:	f003 febc 	bl	8005c14 <sla_gsl_get_command>
 8001e9c:	e719      	b.n	8001cd2 <main+0x45a>
		_send_timer = HAL_GetTick() + 50;
 8001e9e:	f000 ff4d 	bl	8002d3c <HAL_GetTick>
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <main+0x6c8>)
 8001ea4:	3032      	adds	r0, #50	; 0x32
 8001ea6:	6018      	str	r0, [r3, #0]
		if (rws_mode == MOVE_MODE_MAN) {
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <main+0x6d4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aeff 	bne.w	8001cb0 <main+0x438>
			if (p0.motorEnable == 1) {
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <main+0x6f8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f013 0301 	ands.w	r3, r3, #1
 8001eba:	f000 834e 	beq.w	800255a <main+0xce2>
				p.i32 = JRight.az;
 8001ebe:	68b2      	ldr	r2, [r6, #8]
				t.i32 = JRight.el;
 8001ec0:	6973      	ldr	r3, [r6, #20]
	if (HAL_CAN_GetTxMailboxesFreeLevel(bus.hcan) > 0)
 8001ec2:	6820      	ldr	r0, [r4, #0]
				bus.tx_manual.data[i + 4] = t.u8[i];
 8001ec4:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
	bus.txHeader.StdId = buffer->id;
 8001ec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eca:	6063      	str	r3, [r4, #4]
	bus.txHeader.DLC = buffer->datalength;
 8001ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ece:	6163      	str	r3, [r4, #20]
	if (HAL_CAN_GetTxMailboxesFreeLevel(bus.hcan) > 0)
 8001ed0:	f001 fc44 	bl	800375c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	f43f aeeb 	beq.w	8001cb0 <main+0x438>
		return HAL_CAN_AddTxMessage(bus.hcan, &bus.txHeader, buffer->data, &bus.txMailBox);
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <main+0x70c>)
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	f103 0220 	add.w	r2, r3, #32
 8001ee2:	f1a2 0138 	sub.w	r1, r2, #56	; 0x38
 8001ee6:	f001 fbcb 	bl	8003680 <HAL_CAN_AddTxMessage>
 8001eea:	e6e1      	b.n	8001cb0 <main+0x438>
		_led_timer = HAL_GetTick() + 100;
 8001eec:	f000 ff26 	bl	8002d3c <HAL_GetTick>
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <main+0x6c4>)
 8001ef2:	3064      	adds	r0, #100	; 0x64
 8001ef4:	6018      	str	r0, [r3, #0]
		if (_led_counter % 10 < 1) {
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <main+0x710>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <main+0x714>)
 8001efc:	fba3 1302 	umull	r1, r3, r3, r2
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f06:	ebb2 0343 	subs.w	r3, r2, r3, lsl #1
 8001f0a:	f000 82d9 	beq.w	80024c0 <main+0xc48>
		else if (_led_counter % 10 < 5) {
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	f200 82cf 	bhi.w	80024b2 <main+0xc3a>
			if (led_state.motor_state == 1)
 8001f14:	782b      	ldrb	r3, [r5, #0]
 8001f16:	07da      	lsls	r2, r3, #31
 8001f18:	f100 82d2 	bmi.w	80024c0 <main+0xc48>
				HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f22:	481b      	ldr	r0, [pc, #108]	; (8001f90 <main+0x718>)
 8001f24:	f002 fa04 	bl	8004330 <HAL_GPIO_WritePin>
		if (++_led_counter > 10)
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <main+0x710>)
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	2b0a      	cmp	r3, #10
			_led_counter = 0;
 8001f30:	bf84      	itt	hi
 8001f32:	2300      	movhi	r3, #0
 8001f34:	4a14      	ldrhi	r2, [pc, #80]	; (8001f88 <main+0x710>)
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e6b1      	b.n	8001c9e <main+0x426>
 8001f3a:	bf00      	nop
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000348 	.word	0x20000348
 8001f44:	200002e8 	.word	0x200002e8
 8001f48:	20000570 	.word	0x20000570
 8001f4c:	20000599 	.word	0x20000599
 8001f50:	20000584 	.word	0x20000584
 8001f54:	2000034c 	.word	0x2000034c
 8001f58:	20000574 	.word	0x20000574
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	20000006 	.word	0x20000006
 8001f64:	d1b71759 	.word	0xd1b71759
 8001f68:	0800b8b0 	.word	0x0800b8b0
 8001f6c:	0800ba4c 	.word	0x0800ba4c
 8001f70:	2000058c 	.word	0x2000058c
 8001f74:	20000368 	.word	0x20000368
 8001f78:	0800baac 	.word	0x0800baac
 8001f7c:	200007a4 	.word	0x200007a4
 8001f80:	20000580 	.word	0x20000580
 8001f84:	2000038c 	.word	0x2000038c
 8001f88:	20000344 	.word	0x20000344
 8001f8c:	cccccccd 	.word	0xcccccccd
 8001f90:	40020000 	.word	0x40020000
 8001f94:	0800baf0 	.word	0x0800baf0
			adcConvCompleted = 0;
 8001f98:	4bcd      	ldr	r3, [pc, #820]	; (80022d0 <main+0xa58>)
 8001f9a:	f04f 0a00 	mov.w	sl, #0
			LOGBTN("adc dT= %ld\r\n", HAL_GetTick() - adc_timer);
 8001f9e:	f242 7810 	movw	r8, #10000	; 0x2710
			adcConvCompleted = 0;
 8001fa2:	f883 a000 	strb.w	sl, [r3]
			LOGBTN("adc dT= %ld\r\n", HAL_GetTick() - adc_timer);
 8001fa6:	f000 fec9 	bl	8002d3c <HAL_GetTick>
 8001faa:	4681      	mov	r9, r0
 8001fac:	f000 fec6 	bl	8002d3c <HAL_GetTick>
 8001fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fb2:	1ac0      	subs	r0, r0, r3
 8001fb4:	4bc7      	ldr	r3, [pc, #796]	; (80022d4 <main+0xa5c>)
 8001fb6:	fba3 2109 	umull	r2, r1, r3, r9
 8001fba:	461f      	mov	r7, r3
 8001fbc:	4ac6      	ldr	r2, [pc, #792]	; (80022d8 <main+0xa60>)
 8001fbe:	f240 133f 	movw	r3, #319	; 0x13f
 8001fc2:	0b49      	lsrs	r1, r1, #13
 8001fc4:	9000      	str	r0, [sp, #0]
 8001fc6:	48c5      	ldr	r0, [pc, #788]	; (80022dc <main+0xa64>)
 8001fc8:	fb08 9111 	mls	r1, r8, r1, r9
 8001fcc:	f004 fea8 	bl	8006d20 <iprintf>
			adc_timer = HAL_GetTick();
 8001fd0:	f000 feb4 	bl	8002d3c <HAL_GetTick>
	JRight.button.deadman = HAL_GPIO_ReadPin(JSR_DEADMAN_GPIO_Port, JSR_DEADMAN_Pin);
 8001fd4:	2101      	movs	r1, #1
			adc_timer = HAL_GetTick();
 8001fd6:	900b      	str	r0, [sp, #44]	; 0x2c
	JRight.button.deadman = HAL_GPIO_ReadPin(JSR_DEADMAN_GPIO_Port, JSR_DEADMAN_Pin);
 8001fd8:	48c1      	ldr	r0, [pc, #772]	; (80022e0 <main+0xa68>)
 8001fda:	f002 f9a3 	bl	8004324 <HAL_GPIO_ReadPin>
 8001fde:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
	JRight.button.trigger = HAL_GPIO_ReadPin(JSR_TRIG_GPIO_Port, JSR_TRIG_Pin);
 8001fe2:	2102      	movs	r1, #2
	JRight.button.deadman = HAL_GPIO_ReadPin(JSR_DEADMAN_GPIO_Port, JSR_DEADMAN_Pin);
 8001fe4:	f360 0300 	bfi	r3, r0, #0, #1
	JRight.button.trigger = HAL_GPIO_ReadPin(JSR_TRIG_GPIO_Port, JSR_TRIG_Pin);
 8001fe8:	48be      	ldr	r0, [pc, #760]	; (80022e4 <main+0xa6c>)
	JRight.button.deadman = HAL_GPIO_ReadPin(JSR_DEADMAN_GPIO_Port, JSR_DEADMAN_Pin);
 8001fea:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	JRight.button.trigger = HAL_GPIO_ReadPin(JSR_TRIG_GPIO_Port, JSR_TRIG_Pin);
 8001fee:	f002 f999 	bl	8004324 <HAL_GPIO_ReadPin>
 8001ff2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
	JRight.button.aButton = HAL_GPIO_ReadPin(JSR_A_GPIO_Port, JSR_A_Pin);
 8001ff6:	2108      	movs	r1, #8
	JRight.button.trigger = HAL_GPIO_ReadPin(JSR_TRIG_GPIO_Port, JSR_TRIG_Pin);
 8001ff8:	f360 0341 	bfi	r3, r0, #1, #1
	JRight.button.aButton = HAL_GPIO_ReadPin(JSR_A_GPIO_Port, JSR_A_Pin);
 8001ffc:	48b8      	ldr	r0, [pc, #736]	; (80022e0 <main+0xa68>)
	JRight.button.trigger = HAL_GPIO_ReadPin(JSR_TRIG_GPIO_Port, JSR_TRIG_Pin);
 8001ffe:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	JRight.button.aButton = HAL_GPIO_ReadPin(JSR_A_GPIO_Port, JSR_A_Pin);
 8002002:	f002 f98f 	bl	8004324 <HAL_GPIO_ReadPin>
 8002006:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
	JRight.button.bButton = HAL_GPIO_ReadPin(JSR_B_GPIO_Port, JSR_B_Pin);
 800200a:	2101      	movs	r1, #1
	JRight.button.aButton = HAL_GPIO_ReadPin(JSR_A_GPIO_Port, JSR_A_Pin);
 800200c:	f360 0382 	bfi	r3, r0, #2, #1
	JRight.button.bButton = HAL_GPIO_ReadPin(JSR_B_GPIO_Port, JSR_B_Pin);
 8002010:	48b4      	ldr	r0, [pc, #720]	; (80022e4 <main+0xa6c>)
	JRight.button.aButton = HAL_GPIO_ReadPin(JSR_A_GPIO_Port, JSR_A_Pin);
 8002012:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	JRight.button.bButton = HAL_GPIO_ReadPin(JSR_B_GPIO_Port, JSR_B_Pin);
 8002016:	f002 f985 	bl	8004324 <HAL_GPIO_ReadPin>
 800201a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
	JLeft.button.deadman = HAL_GPIO_ReadPin(JSL_DEADMAN_GPIO_Port, JSL_DEADMAN_Pin);
 800201e:	2110      	movs	r1, #16
	JRight.button.bButton = HAL_GPIO_ReadPin(JSR_B_GPIO_Port, JSR_B_Pin);
 8002020:	f360 03c3 	bfi	r3, r0, #3, #1
	JLeft.button.deadman = HAL_GPIO_ReadPin(JSL_DEADMAN_GPIO_Port, JSL_DEADMAN_Pin);
 8002024:	48af      	ldr	r0, [pc, #700]	; (80022e4 <main+0xa6c>)
	JRight.button.bButton = HAL_GPIO_ReadPin(JSR_B_GPIO_Port, JSR_B_Pin);
 8002026:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	JLeft.button.deadman = HAL_GPIO_ReadPin(JSL_DEADMAN_GPIO_Port, JSL_DEADMAN_Pin);
 800202a:	f002 f97b 	bl	8004324 <HAL_GPIO_ReadPin>
 800202e:	4aae      	ldr	r2, [pc, #696]	; (80022e8 <main+0xa70>)
	JLeft.button.trigger = HAL_GPIO_ReadPin(JSL_TRIG_GPIO_Port, JSL_TRIG_Pin);
 8002030:	2120      	movs	r1, #32
	JLeft.button.deadman = HAL_GPIO_ReadPin(JSL_DEADMAN_GPIO_Port, JSL_DEADMAN_Pin);
 8002032:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002036:	f360 0300 	bfi	r3, r0, #0, #1
	JLeft.button.trigger = HAL_GPIO_ReadPin(JSL_TRIG_GPIO_Port, JSL_TRIG_Pin);
 800203a:	48a9      	ldr	r0, [pc, #676]	; (80022e0 <main+0xa68>)
	JLeft.button.deadman = HAL_GPIO_ReadPin(JSL_DEADMAN_GPIO_Port, JSL_DEADMAN_Pin);
 800203c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	JLeft.button.trigger = HAL_GPIO_ReadPin(JSL_TRIG_GPIO_Port, JSL_TRIG_Pin);
 8002040:	f002 f970 	bl	8004324 <HAL_GPIO_ReadPin>
 8002044:	4aa8      	ldr	r2, [pc, #672]	; (80022e8 <main+0xa70>)
	JLeft.button.aButton = HAL_GPIO_ReadPin(JSL_A_GPIO_Port, JSL_A_Pin);
 8002046:	2180      	movs	r1, #128	; 0x80
	JLeft.button.trigger = HAL_GPIO_ReadPin(JSL_TRIG_GPIO_Port, JSL_TRIG_Pin);
 8002048:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800204c:	f360 0341 	bfi	r3, r0, #1, #1
	JLeft.button.aButton = HAL_GPIO_ReadPin(JSL_A_GPIO_Port, JSL_A_Pin);
 8002050:	48a4      	ldr	r0, [pc, #656]	; (80022e4 <main+0xa6c>)
	JLeft.button.trigger = HAL_GPIO_ReadPin(JSL_TRIG_GPIO_Port, JSL_TRIG_Pin);
 8002052:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	JLeft.button.aButton = HAL_GPIO_ReadPin(JSL_A_GPIO_Port, JSL_A_Pin);
 8002056:	f002 f965 	bl	8004324 <HAL_GPIO_ReadPin>
 800205a:	4aa3      	ldr	r2, [pc, #652]	; (80022e8 <main+0xa70>)
	JLeft.button.bButton = HAL_GPIO_ReadPin(JSL_B_GPIO_Port, JSL_B_Pin);
 800205c:	2110      	movs	r1, #16
	JLeft.button.aButton = HAL_GPIO_ReadPin(JSL_A_GPIO_Port, JSL_A_Pin);
 800205e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002062:	f360 0382 	bfi	r3, r0, #2, #1
	JLeft.button.bButton = HAL_GPIO_ReadPin(JSL_B_GPIO_Port, JSL_B_Pin);
 8002066:	489e      	ldr	r0, [pc, #632]	; (80022e0 <main+0xa68>)
	JLeft.button.aButton = HAL_GPIO_ReadPin(JSL_A_GPIO_Port, JSL_A_Pin);
 8002068:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	JLeft.button.bButton = HAL_GPIO_ReadPin(JSL_B_GPIO_Port, JSL_B_Pin);
 800206c:	f002 f95a 	bl	8004324 <HAL_GPIO_ReadPin>
 8002070:	4a9d      	ldr	r2, [pc, #628]	; (80022e8 <main+0xa70>)
	p0.motorEnable = _deadman;
 8002072:	499e      	ldr	r1, [pc, #632]	; (80022ec <main+0xa74>)
	JLeft.button.bButton = HAL_GPIO_ReadPin(JSL_B_GPIO_Port, JSL_B_Pin);
 8002074:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002078:	f360 03c3 	bfi	r3, r0, #3, #1
 800207c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	uint8_t _deadman = JRight.button.deadman | JLeft.button.deadman;
 8002080:	f003 0201 	and.w	r2, r3, #1
 8002084:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8002088:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800208c:	4313      	orrs	r3, r2
	p0.motorEnable = _deadman;
 800208e:	780a      	ldrb	r2, [r1, #0]
 8002090:	f363 0200 	bfi	r2, r3, #0, #1
 8002094:	700a      	strb	r2, [r1, #0]
	LOGBTN("adcVal=%ld,%ld,%ld,%ld\r\n", adcVal[0], adcVal[1], adcVal[2], adcVal[3]);
 8002096:	f000 fe51 	bl	8002d3c <HAL_GetTick>
 800209a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800209e:	fba7 2100 	umull	r2, r1, r7, r0
 80020a2:	4a8d      	ldr	r2, [pc, #564]	; (80022d8 <main+0xa60>)
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	0b49      	lsrs	r1, r1, #13
 80020a8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80020ac:	fb08 0111 	mls	r1, r8, r1, r0
 80020b0:	488f      	ldr	r0, [pc, #572]	; (80022f0 <main+0xa78>)
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	f8db 3000 	ldr.w	r3, [fp]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f44f 7352 	mov.w	r3, #840	; 0x348
 80020c4:	f004 fe2c 	bl	8006d20 <iprintf>
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 80020c8:	f8b6 9000 	ldrh.w	r9, [r6]
 80020cc:	68f3      	ldr	r3, [r6, #12]
 80020ce:	8871      	ldrh	r1, [r6, #2]
 80020d0:	4648      	mov	r0, r9
 80020d2:	88b2      	ldrh	r2, [r6, #4]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f8db 3000 	ldr.w	r3, [fp]
 80020da:	920c      	str	r2, [sp, #48]	; 0x30
 80020dc:	910a      	str	r1, [sp, #40]	; 0x28
 80020de:	f7ff fadb 	bl	8001698 <adc_joystick_azel_conversion>
 80020e2:	4607      	mov	r7, r0
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 80020e4:	4648      	mov	r0, r9
 80020e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 80020e8:	46b9      	mov	r9, r7
 80020ea:	6137      	str	r7, [r6, #16]
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 80020ec:	69b7      	ldr	r7, [r6, #24]
 80020ee:	990a      	ldr	r1, [sp, #40]	; 0x28
	adc_joystick_conversion(&JRight, adcVal[0], adcVal[1]);
 80020f0:	f8db 3004 	ldr.w	r3, [fp, #4]
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 80020f4:	9700      	str	r7, [sp, #0]
 80020f6:	f7ff facf 	bl	8001698 <adc_joystick_azel_conversion>
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 80020fa:	ee07 9a90 	vmov	s15, r9
 80020fe:	edd6 5a09 	vldr	s11, [r6, #36]	; 0x24
 8002102:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002106:	ee07 0a90 	vmov	s15, r0
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 800210a:	ed96 6a08 	vldr	s12, [r6, #32]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 800210e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 8002112:	edd6 7a02 	vldr	s15, [r6, #8]
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <main+0xa70>)
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 800211c:	edd6 7a05 	vldr	s15, [r6, #20]
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 8002120:	f8b3 9000 	ldrh.w	r9, [r3]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 8002128:	8859      	ldrh	r1, [r3, #2]
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 800212a:	ee27 7a25 	vmul.f32	s14, s14, s11
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 800212e:	889a      	ldrh	r2, [r3, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002132:	ee67 7aa5 	vmul.f32	s15, s15, s11
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 8002136:	61f0      	str	r0, [r6, #28]
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 8002138:	eea6 7a86 	vfma.f32	s14, s13, s12
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 800213c:	4648      	mov	r0, r9
 800213e:	9300      	str	r3, [sp, #0]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002140:	eee6 7a05 	vfma.f32	s15, s12, s10
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 8002144:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002148:	920c      	str	r2, [sp, #48]	; 0x30
 800214a:	910a      	str	r1, [sp, #40]	; 0x28
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 800214c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 8002154:	ed86 7a02 	vstr	s14, [r6, #8]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002158:	edc6 7a05 	vstr	s15, [r6, #20]
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 800215c:	f7ff fa9c 	bl	8001698 <adc_joystick_azel_conversion>
 8002160:	4607      	mov	r7, r0
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 8002162:	4648      	mov	r0, r9
 8002164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 8002166:	46b9      	mov	r9, r7
 8002168:	4f5f      	ldr	r7, [pc, #380]	; (80022e8 <main+0xa70>)
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 800216a:	990a      	ldr	r1, [sp, #40]	; 0x28
	js->az_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_x, js->az_max);
 800216c:	f8c7 9010 	str.w	r9, [r7, #16]
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 8002170:	69bf      	ldr	r7, [r7, #24]
	adc_joystick_conversion(&JLeft, adcVal[2], adcVal[3]);
 8002172:	f8db 300c 	ldr.w	r3, [fp, #12]
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 8002176:	9700      	str	r7, [sp, #0]
 8002178:	f7ff fa8e 	bl	8001698 <adc_joystick_azel_conversion>
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 800217c:	ee07 9a90 	vmov	s15, r9
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <main+0xa70>)
 8002182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002186:	ee07 0a90 	vmov	s15, r0
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 800218a:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800218e:	461f      	mov	r7, r3
 8002190:	ed93 6a08 	vldr	s12, [r3, #32]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 8002194:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	js->el_tem = adc_joystick_azel_conversion(js->raw_min, js->raw_mid, js->raw_max, adc_y, js->el_max);
 8002198:	61d8      	str	r0, [r3, #28]
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 800219a:	edd3 7a02 	vldr	s15, [r3, #8]
 800219e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 80021a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80021a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 80021aa:	ee27 7a25 	vmul.f32	s14, s14, s11
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 80021ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 80021b2:	eea6 7a86 	vfma.f32	s14, s13, s12
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 80021b6:	eee6 7a05 	vfma.f32	s15, s12, s10
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 80021ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 80021be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	js->az = js->az_tem * js->alpha + js->az * js->betha;
 80021c2:	ed83 7a02 	vstr	s14, [r3, #8]
	js->el = js->el_tem * js->alpha + js->el * js->betha;
 80021c6:	edc3 7a05 	vstr	s15, [r3, #20]
	LOGBTN("JSR=%02X,%ld,%ld JSL=%02X,%ld,%ld\r\n", *(uint8_t* ) &JRight.button, JRight.az, JRight.el,
 80021ca:	f000 fdb7 	bl	8002d3c <HAL_GetTick>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <main+0xa60>)
 80021d2:	9305      	str	r3, [sp, #20]
 80021d4:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <main+0xa5c>)
 80021d6:	fba3 3100 	umull	r3, r1, r3, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	9304      	str	r3, [sp, #16]
 80021de:	0b49      	lsrs	r1, r1, #13
 80021e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021e4:	fb08 0111 	mls	r1, r8, r1, r0
 80021e8:	4842      	ldr	r0, [pc, #264]	; (80022f4 <main+0xa7c>)
 80021ea:	9303      	str	r3, [sp, #12]
 80021ec:	6973      	ldr	r3, [r6, #20]
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	68b3      	ldr	r3, [r6, #8]
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f240 334f 	movw	r3, #847	; 0x34f
 80021fe:	f004 fd8f 	bl	8006d20 <iprintf>
	if (p4.zoom == ZF_STOP) {
 8002202:	483d      	ldr	r0, [pc, #244]	; (80022f8 <main+0xa80>)
	_i32 = abs(JLeft.el);
 8002204:	697a      	ldr	r2, [r7, #20]
	if (p4.zoom == ZF_STOP) {
 8002206:	7803      	ldrb	r3, [r0, #0]
	_i32 = abs(JLeft.el);
 8002208:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
	if (p4.zoom == ZF_STOP) {
 800220c:	f013 0f06 	tst.w	r3, #6
	_i32 = abs(JLeft.el);
 8002210:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	if (p4.zoom == ZF_STOP) {
 8002214:	f040 815f 	bne.w	80024d6 <main+0xc5e>
		if (_i32 >= JLEFT_HIGH_VAL) {
 8002218:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
 800221c:	db06      	blt.n	800222c <main+0x9b4>
			if (JLeft.el > 0)
 800221e:	4552      	cmp	r2, sl
 8002220:	f340 81cb 	ble.w	80025ba <main+0xd42>
				p4.zoom = ZF_IN;
 8002224:	2201      	movs	r2, #1
 8002226:	f362 0342 	bfi	r3, r2, #1, #2
 800222a:	7003      	strb	r3, [r0, #0]
	uint32_t portD = GPIOD->IDR;
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <main+0xa84>)
 800222e:	f8d3 9010 	ldr.w	r9, [r3, #16]
	uint32_t portG = GPIOG->IDR;
 8002232:	f8d3 8c10 	ldr.w	r8, [r3, #3088]	; 0xc10
	LOGBTN("portD= %02lX; portG=%02lX\r\n", (portD & 0xFF), (portG >> 8));
 8002236:	f000 fd81 	bl	8002d3c <HAL_GetTick>
 800223a:	f242 7110 	movw	r1, #10000	; 0x2710
 800223e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <main+0xa5c>)
 8002246:	fba3 2300 	umull	r2, r3, r3, r0
 800224a:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <main+0xa60>)
 800224c:	0b5b      	lsrs	r3, r3, #13
 800224e:	fb01 0113 	mls	r1, r1, r3, r0
 8002252:	fa5f f389 	uxtb.w	r3, r9
 8002256:	482a      	ldr	r0, [pc, #168]	; (8002300 <main+0xa88>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f240 23aa 	movw	r3, #682	; 0x2aa
 800225e:	f004 fd5f 	bl	8006d20 <iprintf>
	p1.triggerEnable = !button_read(portD, IN_TRIGGER_ENABLE_Pin);
 8002262:	4928      	ldr	r1, [pc, #160]	; (8002304 <main+0xa8c>)
 8002264:	f089 0304 	eor.w	r3, r9, #4
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 8002268:	f418 7f00 	tst.w	r8, #512	; 0x200
	p1.triggerEnable = !button_read(portD, IN_TRIGGER_ENABLE_Pin);
 800226c:	780a      	ldrb	r2, [r1, #0]
 800226e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002272:	f363 0200 	bfi	r2, r3, #0, #1
 8002276:	700a      	strb	r2, [r1, #0]
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 8002278:	f000 8129 	beq.w	80024ce <main+0xc56>
 800227c:	f019 0320 	ands.w	r3, r9, #32
 8002280:	d000      	beq.n	8002284 <main+0xa0c>
		shoot_limit = FIRING_MODE_3;
 8002282:	2301      	movs	r3, #1
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <main+0xa90>)
 8002286:	8013      	strh	r3, [r2, #0]
 8002288:	491b      	ldr	r1, [pc, #108]	; (80022f8 <main+0xa80>)
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 800228a:	f488 5380 	eor.w	r3, r8, #4096	; 0x1000
 800228e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002292:	780a      	ldrb	r2, [r1, #0]
 8002294:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8002298:	f363 0200 	bfi	r2, r3, #0, #1
 800229c:	700a      	strb	r2, [r1, #0]
 800229e:	f040 812d 	bne.w	80024fc <main+0xc84>
		JRight.az_max = JRight.el_max = MTR_LOW_SPEED;
 80022a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80022a6:	61b3      	str	r3, [r6, #24]
 80022a8:	60f3      	str	r3, [r6, #12]
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 80022aa:	f019 0f08 	tst.w	r9, #8
 80022ae:	f040 811b 	bne.w	80024e8 <main+0xc70>
		p4.focus = ZF_IN;
 80022b2:	4911      	ldr	r1, [pc, #68]	; (80022f8 <main+0xa80>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	780b      	ldrb	r3, [r1, #0]
 80022b8:	f362 03c4 	bfi	r3, r2, #3, #2
 80022bc:	700b      	strb	r3, [r1, #0]
	p5.lrfEnable = !button_read(portG, IN_LRF_ENABLE_Pin);
 80022be:	4913      	ldr	r1, [pc, #76]	; (800230c <main+0xa94>)
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 80022c0:	f009 0901 	and.w	r9, r9, #1
	p5.lrfEnable = !button_read(portG, IN_LRF_ENABLE_Pin);
 80022c4:	f488 4380 	eor.w	r3, r8, #16384	; 0x4000
	HAL_GPIO_WritePin(SLA_POWER_ENABLE_GPIO_Port, SLA_POWER_ENABLE_Pin, HAL_GPIO_ReadPin(IN_RESV_GPIO_Port, IN_RESV_Pin));
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <main+0xa98>)
	p5.lrfEnable = !button_read(portG, IN_LRF_ENABLE_Pin);
 80022ca:	780a      	ldrb	r2, [r1, #0]
 80022cc:	e022      	b.n	8002314 <main+0xa9c>
 80022ce:	bf00      	nop
 80022d0:	20000350 	.word	0x20000350
 80022d4:	d1b71759 	.word	0xd1b71759
 80022d8:	0800b8b0 	.word	0x0800b8b0
 80022dc:	0800b928 	.word	0x0800b928
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	200002e8 	.word	0x200002e8
 80022ec:	2000058c 	.word	0x2000058c
 80022f0:	0800b944 	.word	0x0800b944
 80022f4:	0800b96c 	.word	0x0800b96c
 80022f8:	20000594 	.word	0x20000594
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	0800b99c 	.word	0x0800b99c
 8002304:	20000590 	.word	0x20000590
 8002308:	2000059a 	.word	0x2000059a
 800230c:	20000598 	.word	0x20000598
 8002310:	40021800 	.word	0x40021800
 8002314:	f089 0901 	eor.w	r9, r9, #1
 8002318:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800231c:	460f      	mov	r7, r1
 800231e:	f022 0203 	bic.w	r2, r2, #3
 8002322:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
 8002326:	4313      	orrs	r3, r2
 8002328:	700b      	strb	r3, [r1, #0]
	HAL_GPIO_WritePin(SLA_POWER_ENABLE_GPIO_Port, SLA_POWER_ENABLE_Pin, HAL_GPIO_ReadPin(IN_RESV_GPIO_Port, IN_RESV_Pin));
 800232a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800232e:	f001 fff9 	bl	8004324 <HAL_GPIO_ReadPin>
 8002332:	2108      	movs	r1, #8
 8002334:	4602      	mov	r2, r0
 8002336:	48a7      	ldr	r0, [pc, #668]	; (80025d4 <main+0xd5c>)
 8002338:	f001 fffa 	bl	8004330 <HAL_GPIO_WritePin>
			p0.moveMode = rws_mode;
 800233c:	48a6      	ldr	r0, [pc, #664]	; (80025d8 <main+0xd60>)
 800233e:	4aa7      	ldr	r2, [pc, #668]	; (80025dc <main+0xd64>)
 8002340:	7803      	ldrb	r3, [r0, #0]
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	f362 0344 	bfi	r3, r2, #1, #4
 8002348:	7003      	strb	r3, [r0, #0]
			bus.tx_command.data[0] = *(uint8_t*) &p0;
 800234a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			bus.tx_command.data[2] = shoot_limit >> 8;
 800234e:	4ba4      	ldr	r3, [pc, #656]	; (80025e0 <main+0xd68>)
	if (HAL_CAN_GetTxMailboxesFreeLevel(bus.hcan) > 0)
 8002350:	6820      	ldr	r0, [r4, #0]
			bus.tx_command.data[2] = shoot_limit >> 8;
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	ba5b      	rev16	r3, r3
 8002356:	8563      	strh	r3, [r4, #42]	; 0x2a
			bus.tx_command.data[1] = *(uint8_t*) &p1;
 8002358:	4ba2      	ldr	r3, [pc, #648]	; (80025e4 <main+0xd6c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
			bus.tx_command.data[4] = *(uint8_t*) &p4;
 8002360:	4ba1      	ldr	r3, [pc, #644]	; (80025e8 <main+0xd70>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			bus.tx_command.data[5] = *(uint8_t*) &p5;
 8002368:	783b      	ldrb	r3, [r7, #0]
 800236a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	bus.txHeader.StdId = buffer->id;
 800236e:	6a23      	ldr	r3, [r4, #32]
 8002370:	6063      	str	r3, [r4, #4]
	bus.txHeader.DLC = buffer->datalength;
 8002372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002374:	6163      	str	r3, [r4, #20]
	if (HAL_CAN_GetTxMailboxesFreeLevel(bus.hcan) > 0)
 8002376:	f001 f9f1 	bl	800375c <HAL_CAN_GetTxMailboxesFreeLevel>
 800237a:	2800      	cmp	r0, #0
 800237c:	f43f ab84 	beq.w	8001a88 <main+0x210>
		return HAL_CAN_AddTxMessage(bus.hcan, &bus.txHeader, buffer->data, &bus.txMailBox);
 8002380:	4b9a      	ldr	r3, [pc, #616]	; (80025ec <main+0xd74>)
 8002382:	ee19 2a10 	vmov	r2, s18
 8002386:	6820      	ldr	r0, [r4, #0]
 8002388:	f1a3 0118 	sub.w	r1, r3, #24
 800238c:	f001 f978 	bl	8003680 <HAL_CAN_AddTxMessage>
			if (bus_send(&bus.tx_command) == HAL_OK) {
 8002390:	2800      	cmp	r0, #0
 8002392:	f47f ab79 	bne.w	8001a88 <main+0x210>
				LOGBUS("cmd:[M%02X][C%02X]\r\n", bus.tx_command.data[0], bus.tx_command.data[4]);
 8002396:	f000 fcd1 	bl	8002d3c <HAL_GetTick>
 800239a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800239e:	f242 7110 	movw	r1, #10000	; 0x2710
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <main+0xd78>)
 80023a6:	fba3 2300 	umull	r2, r3, r3, r0
 80023aa:	4a92      	ldr	r2, [pc, #584]	; (80025f4 <main+0xd7c>)
 80023ac:	0b5b      	lsrs	r3, r3, #13
 80023ae:	fb01 0113 	mls	r1, r1, r3, r0
 80023b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80023b6:	4890      	ldr	r0, [pc, #576]	; (80025f8 <main+0xd80>)
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80023be:	f004 fcaf 	bl	8006d20 <iprintf>
		if (bus.rx_motor_state.counter != motor_state_counter) {
 80023c2:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
 80023c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023c8:	930a      	str	r3, [sp, #40]	; 0x28
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f43f ab63 	beq.w	8001a96 <main+0x21e>
			tem = bus.rx_motor_state;
 80023d0:	224c      	movs	r2, #76	; 0x4c
 80023d2:	498a      	ldr	r1, [pc, #552]	; (80025fc <main+0xd84>)
 80023d4:	a80f      	add	r0, sp, #60	; 0x3c
 80023d6:	f003 fde9 	bl	8005fac <memcpy>
 80023da:	f894 8089 	ldrb.w	r8, [r4, #137]	; 0x89
			LOGBUS("m_state: ");
 80023de:	f000 fcad 	bl	8002d3c <HAL_GetTick>
 80023e2:	4983      	ldr	r1, [pc, #524]	; (80025f0 <main+0xd78>)
 80023e4:	f242 7c10 	movw	ip, #10000	; 0x2710
 80023e8:	f240 1357 	movw	r3, #343	; 0x157
 80023ec:	fba1 7100 	umull	r7, r1, r1, r0
 80023f0:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <main+0xd7c>)
 80023f2:	0b49      	lsrs	r1, r1, #13
 80023f4:	fb0c 0111 	mls	r1, ip, r1, r0
 80023f8:	4881      	ldr	r0, [pc, #516]	; (8002600 <main+0xd88>)
 80023fa:	f004 fc91 	bl	8006d20 <iprintf>
			for ( int i = 0; i < tem.len; i++ ) {
 80023fe:	f1b8 0f00 	cmp.w	r8, #0
 8002402:	d00c      	beq.n	800241e <main+0xba6>
 8002404:	f10d 0341 	add.w	r3, sp, #65	; 0x41
				printf("%02X ", tem.data[i]);
 8002408:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800262c <main+0xdb4>
 800240c:	4498      	add	r8, r3
 800240e:	469a      	mov	sl, r3
 8002410:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8002414:	4648      	mov	r0, r9
 8002416:	f004 fc83 	bl	8006d20 <iprintf>
			for ( int i = 0; i < tem.len; i++ ) {
 800241a:	45c2      	cmp	sl, r8
 800241c:	d1f8      	bne.n	8002410 <main+0xb98>
			printf("\r\n");
 800241e:	4879      	ldr	r0, [pc, #484]	; (8002604 <main+0xd8c>)
 8002420:	f004 fd04 	bl	8006e2c <puts>
			if (rws_mode == MOVE_MODE_HOMING) {
 8002424:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <main+0xd64>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b05      	cmp	r3, #5
 800242a:	f000 808d 	beq.w	8002548 <main+0xcd0>
			led_state.motor_state = 1;
 800242e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002430:	9309      	str	r3, [sp, #36]	; 0x24
 8002432:	782b      	ldrb	r3, [r5, #0]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	702b      	strb	r3, [r5, #0]
 800243a:	f7ff bb2c 	b.w	8001a96 <main+0x21e>
			c = serial_read(&debug);
 800243e:	4872      	ldr	r0, [pc, #456]	; (8002608 <main+0xd90>)
 8002440:	f003 fba0 	bl	8005b84 <serial_read>
			if (c == 't') {
 8002444:	2874      	cmp	r0, #116	; 0x74
 8002446:	f000 8090 	beq.w	800256a <main+0xcf2>
			else if (c == 'm') {
 800244a:	286d      	cmp	r0, #109	; 0x6d
 800244c:	f47f ab17 	bne.w	8001a7e <main+0x206>
				p1.munitionCounterReset = !p1.munitionCounterReset;
 8002450:	4964      	ldr	r1, [pc, #400]	; (80025e4 <main+0xd6c>)
 8002452:	780b      	ldrb	r3, [r1, #0]
 8002454:	460f      	mov	r7, r1
 8002456:	f083 0208 	eor.w	r2, r3, #8
 800245a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800245e:	f362 03c3 	bfi	r3, r2, #3, #1
 8002462:	700b      	strb	r3, [r1, #0]
				LOG("munisi counter reset=%d\r\n", p1.munitionCounterReset);
 8002464:	f000 fc6a 	bl	8002d3c <HAL_GetTick>
 8002468:	783b      	ldrb	r3, [r7, #0]
 800246a:	f242 7110 	movw	r1, #10000	; 0x2710
 800246e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <main+0xd78>)
 8002476:	fba3 2300 	umull	r2, r3, r3, r0
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <main+0xd7c>)
 800247c:	0b5b      	lsrs	r3, r3, #13
 800247e:	fb01 0113 	mls	r1, r1, r3, r0
 8002482:	f44f 739c 	mov.w	r3, #312	; 0x138
 8002486:	4861      	ldr	r0, [pc, #388]	; (800260c <main+0xd94>)
 8002488:	f004 fc4a 	bl	8006d20 <iprintf>
 800248c:	f7ff baf7 	b.w	8001a7e <main+0x206>
			if (HAL_GetTick() >= trig_timer) {
 8002490:	f000 fc54 	bl	8002d3c <HAL_GetTick>
 8002494:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <main+0xd98>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4298      	cmp	r0, r3
 800249a:	f4ff aad5 	bcc.w	8001a48 <main+0x1d0>
				HAL_GPIO_WritePin(TRIG_PULSE_OUT_GPIO_Port, TRIG_PULSE_OUT_Pin, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	2120      	movs	r1, #32
 80024a2:	484c      	ldr	r0, [pc, #304]	; (80025d4 <main+0xd5c>)
 80024a4:	f001 ff44 	bl	8004330 <HAL_GPIO_WritePin>
				trig_timer = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	4a59      	ldr	r2, [pc, #356]	; (8002610 <main+0xd98>)
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	f7ff bacb 	b.w	8001a48 <main+0x1d0>
		else if (_led_counter % 10 < 9) {
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	f43f ad32 	beq.w	8001f1c <main+0x6a4>
			if (led_state.opt_cam_state == 1)
 80024b8:	782b      	ldrb	r3, [r5, #0]
 80024ba:	071b      	lsls	r3, r3, #28
 80024bc:	f57f ad2e 	bpl.w	8001f1c <main+0x6a4>
			HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c6:	4853      	ldr	r0, [pc, #332]	; (8002614 <main+0xd9c>)
 80024c8:	f001 ff32 	bl	8004330 <HAL_GPIO_WritePin>
 80024cc:	e52c      	b.n	8001f28 <main+0x6b0>
		shoot_limit = FIRING_MODE_1;
 80024ce:	2302      	movs	r3, #2
 80024d0:	4a43      	ldr	r2, [pc, #268]	; (80025e0 <main+0xd68>)
 80024d2:	8013      	strh	r3, [r2, #0]
 80024d4:	e6d8      	b.n	8002288 <main+0xa10>
		if (_i32 <= JLEFT_LOW_VAL)
 80024d6:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
 80024da:	f73f aea7 	bgt.w	800222c <main+0x9b4>
			p4.zoom = ZF_STOP;
 80024de:	f36a 0342 	bfi	r3, sl, #1, #2
 80024e2:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <main+0xd70>)
 80024e4:	7013      	strb	r3, [r2, #0]
 80024e6:	e6a1      	b.n	800222c <main+0x9b4>
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 80024e8:	f418 6f00 	tst.w	r8, #2048	; 0x800
 80024ec:	d137      	bne.n	800255e <main+0xce6>
		p4.focus = ZF_OUT;
 80024ee:	493e      	ldr	r1, [pc, #248]	; (80025e8 <main+0xd70>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	780b      	ldrb	r3, [r1, #0]
 80024f4:	f362 03c4 	bfi	r3, r2, #3, #2
 80024f8:	700b      	strb	r3, [r1, #0]
 80024fa:	e6e0      	b.n	80022be <main+0xa46>
	if ((port & pin) != (uint32_t) GPIO_PIN_RESET)
 80024fc:	f019 0f40 	tst.w	r9, #64	; 0x40
		JRight.az_max = JRight.el_max = MTR_MAX_SPEED;
 8002500:	bf0c      	ite	eq
 8002502:	4b45      	ldreq	r3, [pc, #276]	; (8002618 <main+0xda0>)
		JRight.az_max = JRight.el_max = MTR_MID_SPEED;
 8002504:	4b45      	ldrne	r3, [pc, #276]	; (800261c <main+0xda4>)
 8002506:	61b3      	str	r3, [r6, #24]
 8002508:	60f3      	str	r3, [r6, #12]
 800250a:	e6ce      	b.n	80022aa <main+0xa32>
			else if (rws_mode == MOVE_MODE_HOMING) {
 800250c:	2b05      	cmp	r3, #5
 800250e:	f47f abe9 	bne.w	8001ce4 <main+0x46c>
				LOGSLA("rws_mode=MANUAL (aborted!)\r\n");
 8002512:	f000 fc13 	bl	8002d3c <HAL_GetTick>
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <main+0xd78>)
 8002518:	f242 7c10 	movw	ip, #10000	; 0x2710
 800251c:	f240 2317 	movw	r3, #535	; 0x217
 8002520:	fba1 7100 	umull	r7, r1, r1, r0
 8002524:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <main+0xd7c>)
 8002526:	0b49      	lsrs	r1, r1, #13
 8002528:	fb0c 0111 	mls	r1, ip, r1, r0
 800252c:	483c      	ldr	r0, [pc, #240]	; (8002620 <main+0xda8>)
 800252e:	f004 fbf7 	bl	8006d20 <iprintf>
		homing_button = _button;
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <main+0xdac>)
				rws_mode = MOVE_MODE_MAN;
 8002534:	4a29      	ldr	r2, [pc, #164]	; (80025dc <main+0xd64>)
		homing_button = _button;
 8002536:	f883 8000 	strb.w	r8, [r3]
				rws_mode = MOVE_MODE_MAN;
 800253a:	2300      	movs	r3, #0
 800253c:	7013      	strb	r3, [r2, #0]
 800253e:	f7ff bbd6 	b.w	8001cee <main+0x476>
			bufLen = sprintf(buf, "$DISPSTR,1,5,30,MANUAL MODE*");
 8002542:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8002630 <main+0xdb8>
 8002546:	e48f      	b.n	8001e68 <main+0x5f0>
				if (i0.moveModeEnded == 1)
 8002548:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800254c:	06d9      	lsls	r1, r3, #27
 800254e:	f57f af6e 	bpl.w	800242e <main+0xbb6>
					rws_mode = MOVE_MODE_MAN;
 8002552:	2300      	movs	r3, #0
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <main+0xd64>)
 8002556:	7013      	strb	r3, [r2, #0]
 8002558:	e769      	b.n	800242e <main+0xbb6>
				p.i32 = 0;
 800255a:	461a      	mov	r2, r3
 800255c:	e4b1      	b.n	8001ec2 <main+0x64a>
		p4.focus = ZF_STOP;
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <main+0xd70>)
 8002560:	7813      	ldrb	r3, [r2, #0]
 8002562:	f36f 03c4 	bfc	r3, #3, #2
 8002566:	7013      	strb	r3, [r2, #0]
 8002568:	e6a9      	b.n	80022be <main+0xa46>
				LOG("start continous trigering\r\n");
 800256a:	f000 fbe7 	bl	8002d3c <HAL_GetTick>
 800256e:	4920      	ldr	r1, [pc, #128]	; (80025f0 <main+0xd78>)
 8002570:	f242 7c10 	movw	ip, #10000	; 0x2710
 8002574:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002578:	fba1 7100 	umull	r7, r1, r1, r0
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <main+0xd7c>)
 800257e:	0b49      	lsrs	r1, r1, #13
 8002580:	fb0c 0111 	mls	r1, ip, r1, r0
 8002584:	4828      	ldr	r0, [pc, #160]	; (8002628 <main+0xdb0>)
 8002586:	f004 fbcb 	bl	8006d20 <iprintf>
				if (trig_out_timer != 0)
 800258a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800258c:	b1db      	cbz	r3, 80025c6 <main+0xd4e>
					trig_out_timer = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	930d      	str	r3, [sp, #52]	; 0x34
 8002592:	f7ff ba74 	b.w	8001a7e <main+0x206>
 8002596:	4698      	mov	r8, r3
 8002598:	4699      	mov	r9, r3
 800259a:	461f      	mov	r7, r3
 800259c:	4618      	mov	r0, r3
 800259e:	469e      	mov	lr, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	469c      	mov	ip, r3
 80025a4:	f7ff bbd6 	b.w	8001d54 <main+0x4dc>
		return HAL_CAN_AddTxMessage(bus.hcan, &bus.txHeader, buffer->data, &bus.txMailBox);
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <main+0xd74>)
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	f1a3 0118 	sub.w	r1, r3, #24
 80025b0:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80025b4:	f001 f864 	bl	8003680 <HAL_CAN_AddTxMessage>
 80025b8:	e421      	b.n	8001dfe <main+0x586>
				p4.zoom = ZF_OUT;
 80025ba:	2202      	movs	r2, #2
 80025bc:	f362 0342 	bfi	r3, r2, #1, #2
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <main+0xd70>)
 80025c2:	7013      	strb	r3, [r2, #0]
 80025c4:	e632      	b.n	800222c <main+0x9b4>
					trig_out_timer = HAL_GetTick() + 500;
 80025c6:	f000 fbb9 	bl	8002d3c <HAL_GetTick>
 80025ca:	f500 73fa 	add.w	r3, r0, #500	; 0x1f4
 80025ce:	930d      	str	r3, [sp, #52]	; 0x34
 80025d0:	f7ff ba55 	b.w	8001a7e <main+0x206>
 80025d4:	40020400 	.word	0x40020400
 80025d8:	2000058c 	.word	0x2000058c
 80025dc:	20000599 	.word	0x20000599
 80025e0:	2000059a 	.word	0x2000059a
 80025e4:	20000590 	.word	0x20000590
 80025e8:	20000594 	.word	0x20000594
 80025ec:	2000038c 	.word	0x2000038c
 80025f0:	d1b71759 	.word	0xd1b71759
 80025f4:	0800b8b0 	.word	0x0800b8b0
 80025f8:	0800b9c4 	.word	0x0800b9c4
 80025fc:	200003f4 	.word	0x200003f4
 8002600:	0800b9e8 	.word	0x0800b9e8
 8002604:	0800ba00 	.word	0x0800ba00
 8002608:	200005f0 	.word	0x200005f0
 800260c:	0800b900 	.word	0x0800b900
 8002610:	2000059c 	.word	0x2000059c
 8002614:	40020000 	.word	0x40020000
 8002618:	000f4240 	.word	0x000f4240
 800261c:	000186a0 	.word	0x000186a0
 8002620:	0800ba80 	.word	0x0800ba80
 8002624:	20000570 	.word	0x20000570
 8002628:	0800b8d8 	.word	0x0800b8d8
 800262c:	0800ba04 	.word	0x0800ba04
 8002630:	0800bad0 	.word	0x0800bad0

08002634 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8002638:	2100      	movs	r1, #0
 800263a:	aa03      	add	r2, sp, #12
 800263c:	ab01      	add	r3, sp, #4
 800263e:	f001 f8a1 	bl	8003784 <HAL_CAN_GetRxMessage>
 8002642:	b9a0      	cbnz	r0, 800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		if (RxHeader.IDE == CAN_ID_STD) {
 8002644:	9c05      	ldr	r4, [sp, #20]
 8002646:	b994      	cbnz	r4, 800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
			uint32_t _id = RxHeader.StdId;
 8002648:	9b03      	ldr	r3, [sp, #12]
			if (_id == RWS_MOTOR_STATUS_ID) {
 800264a:	f240 1221 	movw	r2, #289	; 0x121
 800264e:	4293      	cmp	r3, r2
 8002650:	d00f      	beq.n	8002672 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
			else if (_id == RWS_MOTOR_POS_ID) {
 8002652:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002656:	d038      	beq.n	80026ca <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
			else if (_id == RWS_MOTOR_IMU_ID) {
 8002658:	f240 1223 	movw	r2, #291	; 0x123
 800265c:	4293      	cmp	r3, r2
 800265e:	d04a      	beq.n	80026f6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			else if (_id == RWS_OPTRONIK_LRF_ID) {
 8002660:	f240 1231 	movw	r2, #305	; 0x131
 8002664:	4293      	cmp	r3, r2
 8002666:	d05c      	beq.n	8002722 <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
			else if (_id == RWS_OPTRONIK_CAM_ID) {
 8002668:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800266c:	d017      	beq.n	800269e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
}
 800266e:	b00a      	add	sp, #40	; 0x28
 8002670:	bd70      	pop	{r4, r5, r6, pc}
				bus.rx_motor_state.lastTimestamp = HAL_GetTick();
 8002672:	f000 fb63 	bl	8002d3c <HAL_GetTick>
 8002676:	4d36      	ldr	r5, [pc, #216]	; (8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
				memcpy(bus.rx_motor_state.data, RxData, RxHeader.DLC);
 8002678:	9e07      	ldr	r6, [sp, #28]
 800267a:	a901      	add	r1, sp, #4
				bus.rx_motor_state.lastTimestamp = HAL_GetTick();
 800267c:	f8c5 00cc 	str.w	r0, [r5, #204]	; 0xcc
				memcpy(bus.rx_motor_state.data, RxData, RxHeader.DLC);
 8002680:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8002684:	4632      	mov	r2, r6
 8002686:	f003 fc91 	bl	8005fac <memcpy>
				bus.rx_motor_state.counter++;
 800268a:	f895 30ca 	ldrb.w	r3, [r5, #202]	; 0xca
				bus.rx_motor_state.idType = CAN_ID_STD;
 800268e:	f885 4088 	strb.w	r4, [r5, #136]	; 0x88
				bus.rx_motor_state.counter++;
 8002692:	3301      	adds	r3, #1
				bus.rx_motor_state.len = RxHeader.DLC;
 8002694:	f885 6089 	strb.w	r6, [r5, #137]	; 0x89
				bus.rx_motor_state.counter++;
 8002698:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
 800269c:	e7e7      	b.n	800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
				bus.rx_opt_cam.lastTimestamp = HAL_GetTick();
 800269e:	f000 fb4d 	bl	8002d3c <HAL_GetTick>
 80026a2:	4d2b      	ldr	r5, [pc, #172]	; (8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
				memcpy(bus.rx_opt_cam.data, RxData, RxHeader.DLC);
 80026a4:	9e07      	ldr	r6, [sp, #28]
 80026a6:	a901      	add	r1, sp, #4
				bus.rx_opt_cam.lastTimestamp = HAL_GetTick();
 80026a8:	f8c5 01fc 	str.w	r0, [r5, #508]	; 0x1fc
				memcpy(bus.rx_opt_cam.data, RxData, RxHeader.DLC);
 80026ac:	f505 70dd 	add.w	r0, r5, #442	; 0x1ba
 80026b0:	4632      	mov	r2, r6
 80026b2:	f003 fc7b 	bl	8005fac <memcpy>
				bus.rx_opt_cam.counter++;
 80026b6:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
				bus.rx_opt_cam.idType = CAN_ID_STD;
 80026ba:	f885 41b8 	strb.w	r4, [r5, #440]	; 0x1b8
				bus.rx_opt_cam.counter++;
 80026be:	3301      	adds	r3, #1
				bus.rx_opt_cam.len = RxHeader.DLC;
 80026c0:	f885 61b9 	strb.w	r6, [r5, #441]	; 0x1b9
				bus.rx_opt_cam.counter++;
 80026c4:	f885 31fa 	strb.w	r3, [r5, #506]	; 0x1fa
}
 80026c8:	e7d1      	b.n	800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
				bus.rx_motor_position.lastTimestamp = HAL_GetTick();
 80026ca:	f000 fb37 	bl	8002d3c <HAL_GetTick>
 80026ce:	4d20      	ldr	r5, [pc, #128]	; (8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
				memcpy(bus.rx_motor_position.data, RxData, RxHeader.DLC);
 80026d0:	9e07      	ldr	r6, [sp, #28]
 80026d2:	a901      	add	r1, sp, #4
				bus.rx_motor_position.lastTimestamp = HAL_GetTick();
 80026d4:	f8c5 0118 	str.w	r0, [r5, #280]	; 0x118
				memcpy(bus.rx_motor_position.data, RxData, RxHeader.DLC);
 80026d8:	f105 00d6 	add.w	r0, r5, #214	; 0xd6
 80026dc:	4632      	mov	r2, r6
 80026de:	f003 fc65 	bl	8005fac <memcpy>
				bus.rx_motor_position.counter++;
 80026e2:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
				bus.rx_motor_position.idType = CAN_ID_STD;
 80026e6:	f885 40d4 	strb.w	r4, [r5, #212]	; 0xd4
				bus.rx_motor_position.counter++;
 80026ea:	3301      	adds	r3, #1
				bus.rx_motor_position.len = RxHeader.DLC;
 80026ec:	f885 60d5 	strb.w	r6, [r5, #213]	; 0xd5
				bus.rx_motor_position.counter++;
 80026f0:	f885 3116 	strb.w	r3, [r5, #278]	; 0x116
 80026f4:	e7bb      	b.n	800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
				bus.rx_motor_imu.lastTimestamp = HAL_GetTick();
 80026f6:	f000 fb21 	bl	8002d3c <HAL_GetTick>
 80026fa:	4d15      	ldr	r5, [pc, #84]	; (8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
				memcpy(bus.rx_motor_imu.data, RxData, RxHeader.DLC);
 80026fc:	9e07      	ldr	r6, [sp, #28]
 80026fe:	a901      	add	r1, sp, #4
				bus.rx_motor_imu.lastTimestamp = HAL_GetTick();
 8002700:	f8c5 0164 	str.w	r0, [r5, #356]	; 0x164
				memcpy(bus.rx_motor_imu.data, RxData, RxHeader.DLC);
 8002704:	f505 7091 	add.w	r0, r5, #290	; 0x122
 8002708:	4632      	mov	r2, r6
 800270a:	f003 fc4f 	bl	8005fac <memcpy>
				bus.rx_motor_imu.counter++;
 800270e:	f895 3162 	ldrb.w	r3, [r5, #354]	; 0x162
				bus.rx_motor_imu.idType = CAN_ID_STD;
 8002712:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
				bus.rx_motor_imu.counter++;
 8002716:	3301      	adds	r3, #1
				bus.rx_motor_imu.len = RxHeader.DLC;
 8002718:	f885 6121 	strb.w	r6, [r5, #289]	; 0x121
				bus.rx_motor_imu.counter++;
 800271c:	f885 3162 	strb.w	r3, [r5, #354]	; 0x162
 8002720:	e7a5      	b.n	800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
				bus.rx_opt_lrf.lastTimestamp = HAL_GetTick();
 8002722:	f000 fb0b 	bl	8002d3c <HAL_GetTick>
 8002726:	4d0a      	ldr	r5, [pc, #40]	; (8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
				memcpy(bus.rx_opt_lrf.data, RxData, RxHeader.DLC);
 8002728:	9e07      	ldr	r6, [sp, #28]
 800272a:	a901      	add	r1, sp, #4
				bus.rx_opt_lrf.lastTimestamp = HAL_GetTick();
 800272c:	f8c5 01b0 	str.w	r0, [r5, #432]	; 0x1b0
				memcpy(bus.rx_opt_lrf.data, RxData, RxHeader.DLC);
 8002730:	f505 70b7 	add.w	r0, r5, #366	; 0x16e
 8002734:	4632      	mov	r2, r6
 8002736:	f003 fc39 	bl	8005fac <memcpy>
				bus.rx_opt_lrf.counter++;
 800273a:	f895 31ae 	ldrb.w	r3, [r5, #430]	; 0x1ae
				bus.rx_opt_lrf.idType = CAN_ID_STD;
 800273e:	f885 416c 	strb.w	r4, [r5, #364]	; 0x16c
				bus.rx_opt_lrf.counter++;
 8002742:	3301      	adds	r3, #1
				bus.rx_opt_lrf.len = RxHeader.DLC;
 8002744:	f885 616d 	strb.w	r6, [r5, #365]	; 0x16d
				bus.rx_opt_lrf.counter++;
 8002748:	f885 31ae 	strb.w	r3, [r5, #430]	; 0x1ae
 800274c:	e78f      	b.n	800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
 800274e:	bf00      	nop
 8002750:	20000370 	.word	0x20000370

08002754 <HAL_CAN_ErrorCallback>:
	if ((hcan->ErrorCode & HAL_CAN_ERROR_BOF) != 0) {
 8002754:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002756:	075b      	lsls	r3, r3, #29
 8002758:	d400      	bmi.n	800275c <HAL_CAN_ErrorCallback+0x8>
}
 800275a:	4770      	bx	lr
		printf("\t\t\tbus error!\r\n");
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <HAL_CAN_ErrorCallback+0x10>)
 800275e:	f004 bb65 	b.w	8006e2c <puts>
 8002762:	bf00      	nop
 8002764:	0800bb10 	.word	0x0800bb10

08002768 <HAL_ADC_ConvCpltCallback>:
	adcConvCompleted = 1;
 8002768:	4b01      	ldr	r3, [pc, #4]	; (8002770 <HAL_ADC_ConvCpltCallback+0x8>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	4770      	bx	lr
 8002770:	20000350 	.word	0x20000350

08002774 <Error_Handler>:
 8002774:	b672      	cpsid	i
 8002776:	e7fe      	b.n	8002776 <Error_Handler+0x2>

08002778 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_MspInit+0x2c>)
{
 800277a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800278a:	9200      	str	r2, [sp, #0]
 800278c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a0:	b002      	add	sp, #8
 80027a2:	4770      	bx	lr
 80027a4:	40023800 	.word	0x40023800

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80027aa:	f002 f95d 	bl	8004a68 <HAL_RCC_NMI_IRQHandler>
 80027ae:	e7fe      	b.n	80027ae <NMI_Handler+0x6>

080027b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b0:	e7fe      	b.n	80027b0 <HardFault_Handler>
 80027b2:	bf00      	nop

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	e7fe      	b.n	80027b4 <MemManage_Handler>
 80027b6:	bf00      	nop

080027b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b8:	e7fe      	b.n	80027b8 <BusFault_Handler>
 80027ba:	bf00      	nop

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	e7fe      	b.n	80027bc <UsageFault_Handler>
 80027be:	bf00      	nop

080027c0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <DebugMon_Handler>:
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <PendSV_Handler>:
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027cc:	f000 baaa 	b.w	8002d24 <HAL_IncTick>

080027d0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027d0:	4801      	ldr	r0, [pc, #4]	; (80027d8 <ADC_IRQHandler+0x8>)
 80027d2:	f000 bc4f 	b.w	8003074 <HAL_ADC_IRQHandler>
 80027d6:	bf00      	nop
 80027d8:	20000208 	.word	0x20000208

080027dc <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027dc:	4801      	ldr	r0, [pc, #4]	; (80027e4 <CAN1_RX0_IRQHandler+0x8>)
 80027de:	f001 b89b 	b.w	8003918 <HAL_CAN_IRQHandler>
 80027e2:	bf00      	nop
 80027e4:	200002b0 	.word	0x200002b0

080027e8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027e8:	4801      	ldr	r0, [pc, #4]	; (80027f0 <DMA2_Stream0_IRQHandler+0x8>)
 80027ea:	f001 bb7d 	b.w	8003ee8 <HAL_DMA_IRQHandler>
 80027ee:	bf00      	nop
 80027f0:	20000250 	.word	0x20000250

080027f4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80027f4:	2001      	movs	r0, #1
 80027f6:	4770      	bx	lr

080027f8 <_kill>:

int _kill(int pid, int sig)
{
 80027f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80027fa:	f003 fb93 	bl	8005f24 <__errno>
 80027fe:	2216      	movs	r2, #22
 8002800:	4603      	mov	r3, r0
	return -1;
}
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002806:	601a      	str	r2, [r3, #0]
}
 8002808:	bd08      	pop	{r3, pc}
 800280a:	bf00      	nop

0800280c <_exit>:

void _exit (int status)
{
 800280c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800280e:	f003 fb89 	bl	8005f24 <__errno>
 8002812:	2316      	movs	r3, #22
 8002814:	6003      	str	r3, [r0, #0]
 8002816:	e7fe      	b.n	8002816 <_exit+0xa>

08002818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002818:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	1e16      	subs	r6, r2, #0
 800281c:	dd07      	ble.n	800282e <_read+0x16>
 800281e:	460c      	mov	r4, r1
 8002820:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002822:	f003 f8cd 	bl	80059c0 <__io_getchar>
 8002826:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	42a5      	cmp	r5, r4
 800282c:	d1f9      	bne.n	8002822 <_read+0xa>
	}

return len;
}
 800282e:	4630      	mov	r0, r6
 8002830:	bd70      	pop	{r4, r5, r6, pc}
 8002832:	bf00      	nop

08002834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002834:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	1e16      	subs	r6, r2, #0
 8002838:	dd07      	ble.n	800284a <_write+0x16>
 800283a:	460c      	mov	r4, r1
 800283c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800283e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002842:	f003 f8b3 	bl	80059ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	42ac      	cmp	r4, r5
 8002848:	d1f9      	bne.n	800283e <_write+0xa>
	}
	return len;
}
 800284a:	4630      	mov	r0, r6
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	bf00      	nop

08002850 <_close>:

int _close(int file)
{
	return -1;
}
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800285c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800285e:	604b      	str	r3, [r1, #4]
}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop

08002864 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002864:	2001      	movs	r0, #1
 8002866:	4770      	bx	lr

08002868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002868:	2000      	movs	r0, #0
 800286a:	4770      	bx	lr

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800286e:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <_sbrk+0x38>)
{
 8002870:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002872:	490d      	ldr	r1, [pc, #52]	; (80028a8 <_sbrk+0x3c>)
 8002874:	4d0d      	ldr	r5, [pc, #52]	; (80028ac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002876:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002878:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 800287a:	b12a      	cbz	r2, 8002888 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287c:	4413      	add	r3, r2
 800287e:	428b      	cmp	r3, r1
 8002880:	d808      	bhi.n	8002894 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002882:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8002884:	6023      	str	r3, [r4, #0]
}
 8002886:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <_sbrk+0x44>)
 800288a:	4602      	mov	r2, r0
 800288c:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4413      	add	r3, r2
 8002890:	428b      	cmp	r3, r1
 8002892:	d9f6      	bls.n	8002882 <_sbrk+0x16>
    errno = ENOMEM;
 8002894:	f003 fb46 	bl	8005f24 <__errno>
 8002898:	230c      	movs	r3, #12
    return (void *)-1;
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800289e:	6003      	str	r3, [r0, #0]
}
 80028a0:	4610      	mov	r0, r2
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	200005a0 	.word	0x200005a0
 80028a8:	20040000 	.word	0x20040000
 80028ac:	00001600 	.word	0x00001600
 80028b0:	20000d08 	.word	0x20000d08

080028b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <SystemInit+0x10>)
 80028b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80028c8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ca:	2300      	movs	r3, #0
{
 80028cc:	b088      	sub	sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028ce:	4819      	ldr	r0, [pc, #100]	; (8002934 <MX_TIM5_Init+0x6c>)
  htim5.Init.Prescaler = 107;
 80028d0:	216b      	movs	r1, #107	; 0x6b
  htim5.Instance = TIM5;
 80028d2:	4c19      	ldr	r4, [pc, #100]	; (8002938 <MX_TIM5_Init+0x70>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 49999;
 80028d4:	f24c 324f 	movw	r2, #49999	; 0xc34f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d8:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028da:	9301      	str	r3, [sp, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028de:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e0:	9307      	str	r3, [sp, #28]
  htim5.Init.Prescaler = 107;
 80028e2:	e9c0 4100 	strd	r4, r1, [r0]
  htim5.Init.Period = 49999;
 80028e6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028f2:	f002 fb1b 	bl	8004f2c <HAL_TIM_Base_Init>
 80028f6:	b990      	cbnz	r0, 800291e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028fc:	a904      	add	r1, sp, #16
 80028fe:	480d      	ldr	r0, [pc, #52]	; (8002934 <MX_TIM5_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002900:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002902:	f002 fc21 	bl	8005148 <HAL_TIM_ConfigClockSource>
 8002906:	b988      	cbnz	r0, 800292c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002908:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800290c:	a901      	add	r1, sp, #4
 800290e:	4809      	ldr	r0, [pc, #36]	; (8002934 <MX_TIM5_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002910:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002912:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002914:	f002 fcd4 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	b920      	cbnz	r0, 8002924 <MX_TIM5_Init+0x5c>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800291a:	b008      	add	sp, #32
 800291c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800291e:	f7ff ff29 	bl	8002774 <Error_Handler>
 8002922:	e7e9      	b.n	80028f8 <MX_TIM5_Init+0x30>
    Error_Handler();
 8002924:	f7ff ff26 	bl	8002774 <Error_Handler>
}
 8002928:	b008      	add	sp, #32
 800292a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800292c:	f7ff ff22 	bl	8002774 <Error_Handler>
 8002930:	e7ea      	b.n	8002908 <MX_TIM5_Init+0x40>
 8002932:	bf00      	nop
 8002934:	200005a4 	.word	0x200005a4
 8002938:	40000c00 	.word	0x40000c00

0800293c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM5)
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_TIM_Base_MspInit+0x28>)
 800293e:	6802      	ldr	r2, [r0, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d000      	beq.n	8002946 <HAL_TIM_Base_MspInit+0xa>
 8002944:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002946:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
{
 800294a:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 800294c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800295e:	b002      	add	sp, #8
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40000c00 	.word	0x40000c00

08002968 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002968:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 460800;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800296c:	2300      	movs	r3, #0
  huart1.Instance = USART1;
 800296e:	4c0c      	ldr	r4, [pc, #48]	; (80029a0 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 460800;
 8002970:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002974:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	6083      	str	r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002978:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 460800;
 800297a:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 800297e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002986:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800298a:	f002 ff39 	bl	8005800 <HAL_UART_Init>
 800298e:	b900      	cbnz	r0, 8002992 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002990:	bd10      	pop	{r4, pc}
 8002992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002996:	f7ff beed 	b.w	8002774 <Error_Handler>
 800299a:	bf00      	nop
 800299c:	2000060c 	.word	0x2000060c
 80029a0:	40011000 	.word	0x40011000

080029a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029a4:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a6:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029a8:	2300      	movs	r3, #0
  huart2.Instance = USART2;
 80029aa:	4c0c      	ldr	r4, [pc, #48]	; (80029dc <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 80029ac:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b0:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	6083      	str	r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029b4:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.BaudRate = 115200;
 80029b6:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029c6:	f002 ff1b 	bl	8005800 <HAL_UART_Init>
 80029ca:	b900      	cbnz	r0, 80029ce <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80029d2:	f7ff becf 	b.w	8002774 <Error_Handler>
 80029d6:	bf00      	nop
 80029d8:	20000694 	.word	0x20000694
 80029dc:	40004400 	.word	0x40004400

080029e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029e0:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029e4:	2300      	movs	r3, #0
  huart3.Instance = USART3;
 80029e6:	4c0c      	ldr	r4, [pc, #48]	; (8002a18 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
 80029e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029ec:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	6083      	str	r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 80029f2:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a02:	f002 fefd 	bl	8005800 <HAL_UART_Init>
 8002a06:	b900      	cbnz	r0, 8002a0a <MX_USART3_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002a0e:	f7ff beb1 	b.w	8002774 <Error_Handler>
 8002a12:	bf00      	nop
 8002a14:	2000071c 	.word	0x2000071c
 8002a18:	40004800 	.word	0x40004800
 8002a1c:	00000000 	.word	0x00000000

08002a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a20:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a22:	2580      	movs	r5, #128	; 0x80
{
 8002a24:	b0ad      	sub	sp, #180	; 0xb4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a26:	2100      	movs	r1, #0
{
 8002a28:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a2a:	462a      	mov	r2, r5
 8002a2c:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2e:	9106      	str	r1, [sp, #24]
 8002a30:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8002a34:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f003 fac6 	bl	8005fc8 <memset>
  if(uartHandle->Instance==USART1)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_UART_MspInit+0x1c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d007      	beq.n	8002a54 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002a44:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d037      	beq.n	8002aba <HAL_UART_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002a4a:	4a69      	ldr	r2, [pc, #420]	; (8002bf0 <HAL_UART_MspInit+0x1d0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d072      	beq.n	8002b36 <HAL_UART_MspInit+0x116>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a50:	b02d      	add	sp, #180	; 0xb4
 8002a52:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a54:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a56:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a58:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5a:	f002 f813 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	f040 80ae 	bne.w	8002bc0 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_UART_MspInit+0x1d4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a66:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	a906      	add	r1, sp, #24
 8002a6a:	4863      	ldr	r0, [pc, #396]	; (8002bf8 <HAL_UART_MspInit+0x1d8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6e:	f042 0210 	orr.w	r2, r2, #16
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	f002 0210 	and.w	r2, r2, #16
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a80:	f042 0201 	orr.w	r2, r2, #1
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002a84:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8002bd8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a8c:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002a92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a96:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8002be0 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002a9e:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f001 fb27 	bl	80040f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	210e      	movs	r1, #14
 8002aaa:	2025      	movs	r0, #37	; 0x25
 8002aac:	f001 f86e 	bl	8003b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ab0:	2025      	movs	r0, #37	; 0x25
 8002ab2:	f001 f8a9 	bl	8003c08 <HAL_NVIC_EnableIRQ>
}
 8002ab6:	b02d      	add	sp, #180	; 0xb4
 8002ab8:	bd30      	pop	{r4, r5, pc}
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aba:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002abc:	950c      	str	r5, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002abe:	f001 ffe1 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d17f      	bne.n	8002bc6 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_UART_MspInit+0x1d4>)
    GPIO_InitStruct.Pin = PC_S_RXD_Pin;
 8002ac8:	2004      	movs	r0, #4
 8002aca:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002acc:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002adc:	9202      	str	r2, [sp, #8]
 8002ade:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aea:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = PC_S_RXD_Pin;
 8002af0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002af4:	2000      	movs	r0, #0
 8002af6:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af8:	9303      	str	r3, [sp, #12]
 8002afa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PC_S_RXD_Pin;
 8002afc:	e9cd 0108 	strd	r0, r1, [sp, #32]
    HAL_GPIO_Init(PC_S_RXD_GPIO_Port, &GPIO_InitStruct);
 8002b00:	a906      	add	r1, sp, #24
 8002b02:	483d      	ldr	r0, [pc, #244]	; (8002bf8 <HAL_UART_MspInit+0x1d8>)
 8002b04:	f001 faf6 	bl	80040f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PC_S_TXD_Pin;
 8002b08:	2208      	movs	r2, #8
 8002b0a:	2302      	movs	r3, #2
    HAL_GPIO_Init(PC_S_TXD_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	a906      	add	r1, sp, #24
 8002b0e:	483a      	ldr	r0, [pc, #232]	; (8002bf8 <HAL_UART_MspInit+0x1d8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b10:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = PC_S_TXD_Pin;
 8002b12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b16:	2303      	movs	r3, #3
 8002b18:	2201      	movs	r2, #1
 8002b1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(PC_S_TXD_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f001 fae9 	bl	80040f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 11, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	210b      	movs	r1, #11
 8002b26:	2026      	movs	r0, #38	; 0x26
 8002b28:	f001 f830 	bl	8003b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b2c:	2026      	movs	r0, #38	; 0x26
 8002b2e:	f001 f86b 	bl	8003c08 <HAL_NVIC_EnableIRQ>
}
 8002b32:	b02d      	add	sp, #180	; 0xb4
 8002b34:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b36:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b3c:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3e:	f001 ffa1 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d142      	bne.n	8002bcc <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_UART_MspInit+0x1d4>)
    GPIO_InitStruct.Pin = PC_E_RXD_Pin;
 8002b48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b4c:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b4e:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
 8002b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002b5e:	9204      	str	r2, [sp, #16]
 8002b60:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b64:	f042 0202 	orr.w	r2, r2, #2
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b6c:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = PC_E_RXD_Pin;
 8002b72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002b76:	2000      	movs	r0, #0
 8002b78:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	9305      	str	r3, [sp, #20]
 8002b7c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = PC_E_RXD_Pin;
 8002b7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    HAL_GPIO_Init(PC_E_RXD_GPIO_Port, &GPIO_InitStruct);
 8002b82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002b86:	a906      	add	r1, sp, #24
 8002b88:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8002b8c:	f001 fab2 	bl	80040f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PC_E_TXD_Pin;
 8002b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b94:	2302      	movs	r3, #2
    HAL_GPIO_Init(PC_E_TXD_GPIO_Port, &GPIO_InitStruct);
 8002b96:	a906      	add	r1, sp, #24
 8002b98:	4818      	ldr	r0, [pc, #96]	; (8002bfc <HAL_UART_MspInit+0x1dc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b9a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = PC_E_TXD_Pin;
 8002b9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(PC_E_TXD_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f001 faa4 	bl	80040f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	210a      	movs	r1, #10
 8002bb0:	2027      	movs	r0, #39	; 0x27
 8002bb2:	f000 ffeb 	bl	8003b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bb6:	2027      	movs	r0, #39	; 0x27
 8002bb8:	f001 f826 	bl	8003c08 <HAL_NVIC_EnableIRQ>
}
 8002bbc:	b02d      	add	sp, #180	; 0xb4
 8002bbe:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8002bc0:	f7ff fdd8 	bl	8002774 <Error_Handler>
 8002bc4:	e74e      	b.n	8002a64 <HAL_UART_MspInit+0x44>
      Error_Handler();
 8002bc6:	f7ff fdd5 	bl	8002774 <Error_Handler>
 8002bca:	e77c      	b.n	8002ac6 <HAL_UART_MspInit+0xa6>
      Error_Handler();
 8002bcc:	f7ff fdd2 	bl	8002774 <Error_Handler>
 8002bd0:	e7b9      	b.n	8002b46 <HAL_UART_MspInit+0x126>
 8002bd2:	bf00      	nop
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	00000600 	.word	0x00000600
 8002bdc:	00000002 	.word	0x00000002
 8002be0:	00000000 	.word	0x00000000
 8002be4:	00000003 	.word	0x00000003
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40004400 	.word	0x40004400
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400

08002c00 <uart_init_all>:
  }
}

/* USER CODE BEGIN 1 */
void uart_init_all()
{
 8002c00:	b510      	push	{r4, lr}
	serial_init(&debug, (char*) &rxDBuffer, sizeof(rxDBuffer), (char*) &txDBuffer, sizeof(txDBuffer), &huart1);
 8002c02:	490d      	ldr	r1, [pc, #52]	; (8002c38 <uart_init_all+0x38>)
{
 8002c04:	b082      	sub	sp, #8
	serial_init(&debug, (char*) &rxDBuffer, sizeof(rxDBuffer), (char*) &txDBuffer, sizeof(txDBuffer), &huart1);
 8002c06:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <uart_init_all+0x3c>)
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <uart_init_all+0x40>)
 8002c0e:	4622      	mov	r2, r4
 8002c10:	e9cd 4100 	strd	r4, r1, [sp]
 8002c14:	490b      	ldr	r1, [pc, #44]	; (8002c44 <uart_init_all+0x44>)
 8002c16:	f002 ff57 	bl	8005ac8 <serial_init>
	retarget_init(&debug);
 8002c1a:	4809      	ldr	r0, [pc, #36]	; (8002c40 <uart_init_all+0x40>)
 8002c1c:	f002 feac 	bl	8005978 <retarget_init>

	serial_init(&pcE, (char*) &rxPEBuffer, sizeof(rxPEBuffer), (char*) &txPEBuffer, sizeof(txPEBuffer), &huart3);
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <uart_init_all+0x48>)
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <uart_init_all+0x4c>)
 8002c24:	4622      	mov	r2, r4
 8002c26:	490a      	ldr	r1, [pc, #40]	; (8002c50 <uart_init_all+0x50>)
 8002c28:	e9cd 4000 	strd	r4, r0, [sp]
 8002c2c:	4809      	ldr	r0, [pc, #36]	; (8002c54 <uart_init_all+0x54>)
 8002c2e:	f002 ff4b 	bl	8005ac8 <serial_init>
//	serial_init(&pcS, (char*) &rxPSBuffer, sizeof(rxPSBuffer), (char*) &txPSBuffer, sizeof(txPSBuffer), &huart2);
}
 8002c32:	b002      	add	sp, #8
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	bf00      	nop
 8002c38:	2000060c 	.word	0x2000060c
 8002c3c:	200009c0 	.word	0x200009c0
 8002c40:	200005f0 	.word	0x200005f0
 8002c44:	200007c0 	.word	0x200007c0
 8002c48:	2000071c 	.word	0x2000071c
 8002c4c:	20000ac0 	.word	0x20000ac0
 8002c50:	200008c0 	.word	0x200008c0
 8002c54:	200007a4 	.word	0x200007a4

08002c58 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
	USARTx_IRQHandler(&debug);
 8002c58:	4801      	ldr	r0, [pc, #4]	; (8002c60 <USART1_IRQHandler+0x8>)
 8002c5a:	f002 bf4b 	b.w	8005af4 <USARTx_IRQHandler>
 8002c5e:	bf00      	nop
 8002c60:	200005f0 	.word	0x200005f0

08002c64 <USART3_IRQHandler>:
}

void USART3_IRQHandler(void)
{
	USARTx_IRQHandler(&pcE);
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <USART3_IRQHandler+0x8>)
 8002c66:	f002 bf45 	b.w	8005af4 <USARTx_IRQHandler>
 8002c6a:	bf00      	nop
 8002c6c:	200007a4 	.word	0x200007a4

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c9a:	f7ff fe0b 	bl	80028b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f003 f959 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fe fde9 	bl	8001878 <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002cb4:	0800c2d0 	.word	0x0800c2d0
  ldr r2, =_sbss
 8002cb8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cbc:	20000d04 	.word	0x20000d04

08002cc0 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <CAN1_RX1_IRQHandler>
	...

08002cc4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_InitTick+0x3c>)
 8002cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cca:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_InitTick+0x40>)
{
 8002ccc:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cce:	7809      	ldrb	r1, [r1, #0]
{
 8002cd0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd8:	fbb2 f0f3 	udiv	r0, r2, r3
 8002cdc:	f000 ffa2 	bl	8003c24 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce0:	b908      	cbnz	r0, 8002ce6 <HAL_InitTick+0x22>
 8002ce2:	2c0f      	cmp	r4, #15
 8002ce4:	d901      	bls.n	8002cea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8002ce8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cea:	2200      	movs	r2, #0
 8002cec:	4621      	mov	r1, r4
 8002cee:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf2:	f000 ff4b 	bl	8003b8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_InitTick+0x44>)
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	601c      	str	r4, [r3, #0]
}
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	20000008 	.word	0x20000008
 8002d08:	20000010 	.word	0x20000010

08002d0c <HAL_Init>:
{
 8002d0c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0e:	2003      	movs	r0, #3
 8002d10:	f000 ff2a 	bl	8003b68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d14:	200f      	movs	r0, #15
 8002d16:	f7ff ffd5 	bl	8002cc4 <HAL_InitTick>
  HAL_MspInit();
 8002d1a:	f7ff fd2d 	bl	8002778 <HAL_MspInit>
}
 8002d1e:	2000      	movs	r0, #0
 8002d20:	bd08      	pop	{r3, pc}
 8002d22:	bf00      	nop

08002d24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_IncTick+0x10>)
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_IncTick+0x14>)
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	440b      	add	r3, r1
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000bc0 	.word	0x20000bc0
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_GetTick+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000bc0 	.word	0x20000bc0

08002d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff fff6 	bl	8002d3c <HAL_GetTick>
 8002d50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d52:	1c63      	adds	r3, r4, #1
 8002d54:	d002      	beq.n	8002d5c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_Delay+0x20>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d5c:	f7ff ffee 	bl	8002d3c <HAL_GetTick>
 8002d60:	1b43      	subs	r3, r0, r5
 8002d62:	42a3      	cmp	r3, r4
 8002d64:	d3fa      	bcc.n	8002d5c <HAL_Delay+0x14>
  {
  }
}
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	2000000c 	.word	0x2000000c

08002d6c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	f000 80af 	beq.w	8002ed0 <HAL_ADC_Init+0x164>
{
 8002d72:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d74:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002d76:	4604      	mov	r4, r0
 8002d78:	b13d      	cbz	r5, 8002d8a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d7c:	06db      	lsls	r3, r3, #27
 8002d7e:	d50c      	bpl.n	8002d9a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d80:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002d84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8002d88:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002d8a:	f7fe f9cf 	bl	800112c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002d92:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d96:	06db      	lsls	r3, r3, #27
 8002d98:	d4f2      	bmi.n	8002d80 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002d9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_ADC_Init+0x174>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002d9e:	4a51      	ldr	r2, [pc, #324]	; (8002ee4 <HAL_ADC_Init+0x178>)
    ADC_STATE_CLR_SET(hadc->State,
 8002da0:	400b      	ands	r3, r1
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002da8:	6853      	ldr	r3, [r2, #4]
 8002daa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002dae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002db0:	6853      	ldr	r3, [r2, #4]
 8002db2:	6861      	ldr	r1, [r4, #4]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	6853      	ldr	r3, [r2, #4]
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	6921      	ldr	r1, [r4, #16]
 8002dc6:	6853      	ldr	r3, [r2, #4]
 8002dc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002dcc:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	6853      	ldr	r3, [r2, #4]
 8002dd2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002dd6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dd8:	6822      	ldr	r2, [r4, #0]
 8002dda:	68a1      	ldr	r1, [r4, #8]
 8002ddc:	6853      	ldr	r3, [r2, #4]
 8002dde:	430b      	orrs	r3, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002de0:	4941      	ldr	r1, [pc, #260]	; (8002ee8 <HAL_ADC_Init+0x17c>)
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002de2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	6893      	ldr	r3, [r2, #8]
 8002de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	68e0      	ldr	r0, [r4, #12]
 8002df2:	6893      	ldr	r3, [r2, #8]
 8002df4:	4303      	orrs	r3, r0
 8002df6:	6093      	str	r3, [r2, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dfa:	6822      	ldr	r2, [r4, #0]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dfc:	428b      	cmp	r3, r1
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dfe:	6893      	ldr	r3, [r2, #8]
 8002e00:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002e04:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e06:	6822      	ldr	r2, [r4, #0]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e08:	d05d      	beq.n	8002ec6 <HAL_ADC_Init+0x15a>
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e0a:	6893      	ldr	r3, [r2, #8]
 8002e0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e12:	6822      	ldr	r2, [r4, #0]
 8002e14:	6893      	ldr	r3, [r2, #8]
 8002e16:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002e1a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e1c:	6822      	ldr	r2, [r4, #0]
 8002e1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e20:	6893      	ldr	r3, [r2, #8]
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	6893      	ldr	r3, [r2, #8]
 8002e2a:	f023 0302 	bic.w	r3, r3, #2
 8002e2e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	69a1      	ldr	r1, [r4, #24]
 8002e34:	6893      	ldr	r3, [r2, #8]
 8002e36:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002e3a:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e3c:	f894 3020 	ldrb.w	r3, [r4, #32]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e40:	6822      	ldr	r2, [r4, #0]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d046      	beq.n	8002ed4 <HAL_ADC_Init+0x168>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e46:	6853      	ldr	r3, [r2, #4]
 8002e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e4c:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	6853      	ldr	r3, [r2, #4]
 8002e52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e56:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e5c:	684b      	ldr	r3, [r1, #4]
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002e64:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e70:	6821      	ldr	r1, [r4, #0]
 8002e72:	69e2      	ldr	r2, [r4, #28]
 8002e74:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002e76:	3a01      	subs	r2, #1
 8002e78:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002e7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	6893      	ldr	r3, [r2, #8]
 8002e82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e86:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002e8e:	6893      	ldr	r3, [r2, #8]
 8002e90:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002e94:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	6893      	ldr	r3, [r2, #8]
 8002e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e9e:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea0:	2200      	movs	r2, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ea2:	6821      	ldr	r1, [r4, #0]
 8002ea4:	6960      	ldr	r0, [r4, #20]
 8002ea6:	688b      	ldr	r3, [r1, #8]
 8002ea8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eac:	4610      	mov	r0, r2
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eae:	608b      	str	r3, [r1, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb0:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002ec4:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec6:	6893      	ldr	r3, [r2, #8]
 8002ec8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	e7aa      	b.n	8002e26 <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 8002ed0:	2001      	movs	r0, #1
}
 8002ed2:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ed4:	6853      	ldr	r3, [r2, #4]
 8002ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eda:	6053      	str	r3, [r2, #4]
 8002edc:	e7c3      	b.n	8002e66 <HAL_ADC_Init+0xfa>
 8002ede:	bf00      	nop
 8002ee0:	ffffeefd 	.word	0xffffeefd
 8002ee4:	40012300 	.word	0x40012300
 8002ee8:	0f000001 	.word	0x0f000001

08002eec <HAL_ADC_Start_DMA>:
{
 8002eec:	b530      	push	{r4, r5, lr}
  __IO uint32_t counter = 0;
 8002eee:	2300      	movs	r3, #0
{
 8002ef0:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8002ef2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002ef4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f000 808d 	beq.w	8003018 <HAL_ADC_Start_DMA+0x12c>
 8002efe:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f00:	6805      	ldr	r5, [r0, #0]
 8002f02:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002f04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f08:	68ab      	ldr	r3, [r5, #8]
 8002f0a:	07db      	lsls	r3, r3, #31
 8002f0c:	d415      	bmi.n	8002f3a <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8002f0e:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f10:	4849      	ldr	r0, [pc, #292]	; (8003038 <HAL_ADC_Start_DMA+0x14c>)
    __HAL_ADC_ENABLE(hadc);
 8002f12:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f16:	6800      	ldr	r0, [r0, #0]
    __HAL_ADC_ENABLE(hadc);
 8002f18:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f1a:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_ADC_Start_DMA+0x150>)
 8002f1c:	fba3 3000 	umull	r3, r0, r3, r0
 8002f20:	0c80      	lsrs	r0, r0, #18
 8002f22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f26:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8002f28:	9b01      	ldr	r3, [sp, #4]
 8002f2a:	b12b      	cbz	r3, 8002f38 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8002f2c:	9801      	ldr	r0, [sp, #4]
 8002f2e:	3801      	subs	r0, #1
 8002f30:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8002f32:	9801      	ldr	r0, [sp, #4]
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f38:	6825      	ldr	r5, [r4, #0]
 8002f3a:	68a8      	ldr	r0, [r5, #8]
 8002f3c:	f010 0001 	ands.w	r0, r0, #1
 8002f40:	d046      	beq.n	8002fd0 <HAL_ADC_Start_DMA+0xe4>
    ADC_STATE_CLR_SET(hadc->State,
 8002f42:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_ADC_Start_DMA+0x154>)
 8002f46:	4003      	ands	r3, r0
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4e:	686b      	ldr	r3, [r5, #4]
 8002f50:	0558      	lsls	r0, r3, #21
 8002f52:	d505      	bpl.n	8002f60 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5e:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f62:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8002f66:	d04c      	beq.n	8003002 <HAL_ADC_Start_DMA+0x116>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f6a:	f023 0306 	bic.w	r3, r3, #6
 8002f6e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f72:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 8002f74:	2500      	movs	r5, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f76:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f78:	4932      	ldr	r1, [pc, #200]	; (8003044 <HAL_ADC_Start_DMA+0x158>)
    __HAL_UNLOCK(hadc);   
 8002f7a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f7e:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f80:	4831      	ldr	r0, [pc, #196]	; (8003048 <HAL_ADC_Start_DMA+0x15c>)
 8002f82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f84:	6408      	str	r0, [r1, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f86:	4831      	ldr	r0, [pc, #196]	; (800304c <HAL_ADC_Start_DMA+0x160>)
 8002f88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f8a:	64c8      	str	r0, [r1, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002f90:	6821      	ldr	r1, [r4, #0]
 8002f92:	6008      	str	r0, [r1, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	6841      	ldr	r1, [r0, #4]
 8002f98:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002f9c:	6041      	str	r1, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	6881      	ldr	r1, [r0, #8]
 8002fa2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002fa6:	6081      	str	r1, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fa8:	6821      	ldr	r1, [r4, #0]
 8002faa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002fac:	314c      	adds	r1, #76	; 0x4c
 8002fae:	f000 ff43 	bl	8003e38 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002fb2:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_ADC_Start_DMA+0x164>)
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	06d2      	lsls	r2, r2, #27
 8002fb8:	d114      	bne.n	8002fe4 <HAL_ADC_Start_DMA+0xf8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	6898      	ldr	r0, [r3, #8]
 8002fbe:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002fc2:	d11b      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x110>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002fe0:	b003      	add	sp, #12
 8002fe2:	bd30      	pop	{r4, r5, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fe4:	491b      	ldr	r1, [pc, #108]	; (8003054 <HAL_ADC_Start_DMA+0x168>)
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	428a      	cmp	r2, r1
 8002fea:	d00c      	beq.n	8003006 <HAL_ADC_Start_DMA+0x11a>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <HAL_ADC_Start_DMA+0x164>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	06db      	lsls	r3, r3, #27
 8002ff2:	d403      	bmi.n	8002ffc <HAL_ADC_Start_DMA+0x110>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_ADC_Start_DMA+0x16c>)
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d013      	beq.n	8003024 <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 8002ffc:	2000      	movs	r0, #0
}
 8002ffe:	b003      	add	sp, #12
 8003000:	bd30      	pop	{r4, r5, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8003002:	6463      	str	r3, [r4, #68]	; 0x44
 8003004:	e7b4      	b.n	8002f70 <HAL_ADC_Start_DMA+0x84>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003006:	6891      	ldr	r1, [r2, #8]
 8003008:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800300c:	d107      	bne.n	800301e <HAL_ADC_Start_DMA+0x132>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800300e:	6893      	ldr	r3, [r2, #8]
 8003010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003014:	6093      	str	r3, [r2, #8]
 8003016:	e7e9      	b.n	8002fec <HAL_ADC_Start_DMA+0x100>
  __HAL_LOCK(hadc);
 8003018:	2002      	movs	r0, #2
}
 800301a:	b003      	add	sp, #12
 800301c:	bd30      	pop	{r4, r5, pc}
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800301e:	685b      	ldr	r3, [r3, #4]
  return HAL_OK;
 8003020:	4628      	mov	r0, r5
 8003022:	e7dd      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xf4>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003024:	6890      	ldr	r0, [r2, #8]
 8003026:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800302a:	d1e7      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x110>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800302c:	6893      	ldr	r3, [r2, #8]
 800302e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003032:	6093      	str	r3, [r2, #8]
 8003034:	e7d4      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xf4>
 8003036:	bf00      	nop
 8003038:	20000008 	.word	0x20000008
 800303c:	431bde83 	.word	0x431bde83
 8003040:	fffff8fe 	.word	0xfffff8fe
 8003044:	080031b1 	.word	0x080031b1
 8003048:	08003061 	.word	0x08003061
 800304c:	08003199 	.word	0x08003199
 8003050:	40012300 	.word	0x40012300
 8003054:	40012000 	.word	0x40012000
 8003058:	40012200 	.word	0x40012200

0800305c <HAL_ADC_ConvHalfCpltCallback>:
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003060:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003062:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003064:	f7ff fffa 	bl	800305c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003068:	bd08      	pop	{r3, pc}
 800306a:	bf00      	nop

0800306c <HAL_ADC_LevelOutOfWindowCallback>:
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <HAL_ADC_ErrorCallback>:
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <HAL_ADC_IRQHandler>:
{
 8003074:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8003076:	6803      	ldr	r3, [r0, #0]
{
 8003078:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 800307a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800307c:	685e      	ldr	r6, [r3, #4]
  if(tmp1 && tmp2)
 800307e:	07aa      	lsls	r2, r5, #30
 8003080:	d52b      	bpl.n	80030da <HAL_ADC_IRQHandler+0x66>
 8003082:	06b0      	lsls	r0, r6, #26
 8003084:	d529      	bpl.n	80030da <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003086:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003088:	06d1      	lsls	r1, r2, #27
 800308a:	d403      	bmi.n	8003094 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800308c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800308e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003092:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800309a:	d117      	bne.n	80030cc <HAL_ADC_IRQHandler+0x58>
 800309c:	69a2      	ldr	r2, [r4, #24]
 800309e:	b9aa      	cbnz	r2, 80030cc <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030a2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80030a6:	d002      	beq.n	80030ae <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030a8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030aa:	0552      	lsls	r2, r2, #21
 80030ac:	d40e      	bmi.n	80030cc <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	f022 0220 	bic.w	r2, r2, #32
 80030b4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030bc:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030c0:	04d8      	lsls	r0, r3, #19
 80030c2:	d403      	bmi.n	80030cc <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff fb4b 	bl	8002768 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	f06f 0212 	mvn.w	r2, #18
 80030d8:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80030da:	0769      	lsls	r1, r5, #29
 80030dc:	d530      	bpl.n	8003140 <HAL_ADC_IRQHandler+0xcc>
 80030de:	0632      	lsls	r2, r6, #24
 80030e0:	d52e      	bpl.n	8003140 <HAL_ADC_IRQHandler+0xcc>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030e4:	06db      	lsls	r3, r3, #27
 80030e6:	d403      	bmi.n	80030f0 <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030ee:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80030f8:	d11b      	bne.n	8003132 <HAL_ADC_IRQHandler+0xbe>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80030fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030fc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8003100:	d145      	bne.n	800318e <HAL_ADC_IRQHandler+0x11a>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003102:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003104:	0551      	lsls	r1, r2, #21
 8003106:	d414      	bmi.n	8003132 <HAL_ADC_IRQHandler+0xbe>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003108:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800310a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800310e:	d110      	bne.n	8003132 <HAL_ADC_IRQHandler+0xbe>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003110:	69a2      	ldr	r2, [r4, #24]
 8003112:	b972      	cbnz	r2, 8003132 <HAL_ADC_IRQHandler+0xbe>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800311c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800311e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003122:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003126:	05da      	lsls	r2, r3, #23
 8003128:	d403      	bmi.n	8003132 <HAL_ADC_IRQHandler+0xbe>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003132:	4620      	mov	r0, r4
 8003134:	f000 f96c 	bl	8003410 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f06f 020c 	mvn.w	r2, #12
 800313e:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8003140:	0673      	lsls	r3, r6, #25
 8003142:	d505      	bpl.n	8003150 <HAL_ADC_IRQHandler+0xdc>
 8003144:	07e8      	lsls	r0, r5, #31
 8003146:	d503      	bpl.n	8003150 <HAL_ADC_IRQHandler+0xdc>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	07d9      	lsls	r1, r3, #31
 800314e:	d412      	bmi.n	8003176 <HAL_ADC_IRQHandler+0x102>
  if(tmp1 && tmp2)
 8003150:	06aa      	lsls	r2, r5, #26
 8003152:	d501      	bpl.n	8003158 <HAL_ADC_IRQHandler+0xe4>
 8003154:	0173      	lsls	r3, r6, #5
 8003156:	d400      	bmi.n	800315a <HAL_ADC_IRQHandler+0xe6>
}
 8003158:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800315a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800315c:	f06f 0520 	mvn.w	r5, #32
 8003160:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8003162:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800316a:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 800316c:	f7ff ff80 	bl	8003070 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	601d      	str	r5, [r3, #0]
}
 8003174:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003176:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003178:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003180:	f7ff ff74 	bl	800306c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	f06f 0201 	mvn.w	r2, #1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e7e0      	b.n	8003150 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800318e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003190:	0550      	lsls	r0, r2, #21
 8003192:	d4ce      	bmi.n	8003132 <HAL_ADC_IRQHandler+0xbe>
 8003194:	e7b5      	b.n	8003102 <HAL_ADC_IRQHandler+0x8e>
 8003196:	bf00      	nop

08003198 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003198:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800319a:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800319c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800319e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031a8:	f7ff ff62 	bl	8003070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ac:	bd08      	pop	{r3, pc}
 80031ae:	bf00      	nop

080031b0 <ADC_DMAConvCplt>:
{
 80031b0:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031bc:	d123      	bne.n	8003206 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c6:	688a      	ldr	r2, [r1, #8]
 80031c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80031cc:	d117      	bne.n	80031fe <ADC_DMAConvCplt+0x4e>
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	b9aa      	cbnz	r2, 80031fe <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80031d8:	d002      	beq.n	80031e0 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031da:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031dc:	0550      	lsls	r0, r2, #21
 80031de:	d40e      	bmi.n	80031fe <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031e0:	684a      	ldr	r2, [r1, #4]
 80031e2:	f022 0220 	bic.w	r2, r2, #32
 80031e6:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	04d1      	lsls	r1, r2, #19
 80031f4:	d403      	bmi.n	80031fe <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fab2 	bl	8002768 <HAL_ADC_ConvCpltCallback>
}
 8003204:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003206:	06d2      	lsls	r2, r2, #27
 8003208:	d404      	bmi.n	8003214 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800320c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff2b 	bl	8003070 <HAL_ADC_ErrorCallback>
}
 800321a:	bd10      	pop	{r4, pc}

0800321c <HAL_ADC_ConfigChannel>:
{
 800321c:	b430      	push	{r4, r5}
  __IO uint32_t counter = 0;
 800321e:	2200      	movs	r2, #0
{
 8003220:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8003222:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003224:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003228:	2a01      	cmp	r2, #1
 800322a:	f000 80e2 	beq.w	80033f2 <HAL_ADC_ConfigChannel+0x1d6>
 800322e:	2201      	movs	r2, #1
 8003230:	4603      	mov	r3, r0
 8003232:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003236:	680a      	ldr	r2, [r1, #0]
 8003238:	2a09      	cmp	r2, #9
 800323a:	d944      	bls.n	80032c6 <HAL_ADC_ConfigChannel+0xaa>
 800323c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003240:	d041      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003242:	b292      	uxth	r2, r2
 8003244:	6804      	ldr	r4, [r0, #0]
 8003246:	f04f 0c07 	mov.w	ip, #7
 800324a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800324e:	68e0      	ldr	r0, [r4, #12]
 8003250:	3a1e      	subs	r2, #30
 8003252:	fa0c f202 	lsl.w	r2, ip, r2
 8003256:	ea20 0202 	bic.w	r2, r0, r2
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800325a:	4868      	ldr	r0, [pc, #416]	; (80033fc <HAL_ADC_ConfigChannel+0x1e0>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800325c:	60e2      	str	r2, [r4, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800325e:	680a      	ldr	r2, [r1, #0]
 8003260:	4282      	cmp	r2, r0
 8003262:	f000 80bf 	beq.w	80033e4 <HAL_ADC_ConfigChannel+0x1c8>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003266:	b292      	uxth	r2, r2
 8003268:	681c      	ldr	r4, [r3, #0]
 800326a:	6888      	ldr	r0, [r1, #8]
 800326c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003270:	68e5      	ldr	r5, [r4, #12]
 8003272:	3a1e      	subs	r2, #30
 8003274:	fa00 f202 	lsl.w	r2, r0, r2
 8003278:	432a      	orrs	r2, r5
 800327a:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7)
 800327c:	684a      	ldr	r2, [r1, #4]
 800327e:	2a06      	cmp	r2, #6
 8003280:	d839      	bhi.n	80032f6 <HAL_ADC_ConfigChannel+0xda>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003282:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	f04f 0c1f 	mov.w	ip, #31
 800328c:	3a05      	subs	r2, #5
 800328e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003290:	fa0c f202 	lsl.w	r2, ip, r2
 8003294:	ea20 0202 	bic.w	r2, r0, r2
 8003298:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800329a:	684a      	ldr	r2, [r1, #4]
 800329c:	681c      	ldr	r4, [r3, #0]
 800329e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032a2:	8808      	ldrh	r0, [r1, #0]
 80032a4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80032a6:	3a05      	subs	r2, #5
 80032a8:	fa00 f202 	lsl.w	r2, r0, r2
 80032ac:	432a      	orrs	r2, r5
 80032ae:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80032b0:	4853      	ldr	r0, [pc, #332]	; (8003400 <HAL_ADC_ConfigChannel+0x1e4>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4282      	cmp	r2, r0
 80032b6:	d03a      	beq.n	800332e <HAL_ADC_ConfigChannel+0x112>
  __HAL_UNLOCK(hadc);
 80032b8:	2200      	movs	r2, #0
  return HAL_OK;
 80032ba:	4610      	mov	r0, r2
  __HAL_UNLOCK(hadc);
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80032c0:	b002      	add	sp, #8
 80032c2:	bc30      	pop	{r4, r5}
 80032c4:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c6:	b292      	uxth	r2, r2
 80032c8:	681c      	ldr	r4, [r3, #0]
 80032ca:	f04f 0c07 	mov.w	ip, #7
 80032ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032d2:	6920      	ldr	r0, [r4, #16]
 80032d4:	fa0c f202 	lsl.w	r2, ip, r2
 80032d8:	ea20 0202 	bic.w	r2, r0, r2
 80032dc:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032de:	880a      	ldrh	r2, [r1, #0]
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80032e6:	688a      	ldr	r2, [r1, #8]
 80032e8:	6925      	ldr	r5, [r4, #16]
 80032ea:	4082      	lsls	r2, r0
 80032ec:	432a      	orrs	r2, r5
 80032ee:	6122      	str	r2, [r4, #16]
  if (sConfig->Rank < 7)
 80032f0:	684a      	ldr	r2, [r1, #4]
 80032f2:	2a06      	cmp	r2, #6
 80032f4:	d9c5      	bls.n	8003282 <HAL_ADC_ConfigChannel+0x66>
  else if (sConfig->Rank < 13)
 80032f6:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f8:	681d      	ldr	r5, [r3, #0]
 80032fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 80032fe:	d842      	bhi.n	8003386 <HAL_ADC_ConfigChannel+0x16a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003300:	241f      	movs	r4, #31
 8003302:	3a23      	subs	r2, #35	; 0x23
 8003304:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003306:	fa04 f202 	lsl.w	r2, r4, r2
 800330a:	ea20 0202 	bic.w	r2, r0, r2
 800330e:	632a      	str	r2, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003310:	684a      	ldr	r2, [r1, #4]
 8003312:	8808      	ldrh	r0, [r1, #0]
 8003314:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003318:	681c      	ldr	r4, [r3, #0]
 800331a:	3a23      	subs	r2, #35	; 0x23
 800331c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800331e:	fa00 f202 	lsl.w	r2, r0, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003322:	4837      	ldr	r0, [pc, #220]	; (8003400 <HAL_ADC_ConfigChannel+0x1e4>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003324:	432a      	orrs	r2, r5
 8003326:	6322      	str	r2, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4282      	cmp	r2, r0
 800332c:	d1c4      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x9c>
 800332e:	6808      	ldr	r0, [r1, #0]
 8003330:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003334:	d04b      	beq.n	80033ce <HAL_ADC_ConfigChannel+0x1b2>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003336:	2812      	cmp	r0, #18
 8003338:	d039      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x192>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800333a:	4a30      	ldr	r2, [pc, #192]	; (80033fc <HAL_ADC_ConfigChannel+0x1e0>)
 800333c:	4290      	cmp	r0, r2
 800333e:	d001      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x128>
 8003340:	2811      	cmp	r0, #17
 8003342:	d1b9      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x9c>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003344:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <HAL_ADC_ConfigChannel+0x1e8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003346:	4c2d      	ldr	r4, [pc, #180]	; (80033fc <HAL_ADC_ConfigChannel+0x1e0>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003348:	6850      	ldr	r0, [r2, #4]
 800334a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
 800334e:	6050      	str	r0, [r2, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003350:	6850      	ldr	r0, [r2, #4]
 8003352:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003356:	6050      	str	r0, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003358:	680a      	ldr	r2, [r1, #0]
 800335a:	42a2      	cmp	r2, r4
 800335c:	d1ac      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <HAL_ADC_ConfigChannel+0x1ec>)
 8003360:	492a      	ldr	r1, [pc, #168]	; (800340c <HAL_ADC_ConfigChannel+0x1f0>)
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	fba1 1202 	umull	r1, r2, r1, r2
 8003368:	0c92      	lsrs	r2, r2, #18
 800336a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800336e:	0052      	lsls	r2, r2, #1
 8003370:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8003372:	9a01      	ldr	r2, [sp, #4]
 8003374:	2a00      	cmp	r2, #0
 8003376:	d09f      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 8003378:	9a01      	ldr	r2, [sp, #4]
 800337a:	3a01      	subs	r2, #1
 800337c:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800337e:	9a01      	ldr	r2, [sp, #4]
 8003380:	2a00      	cmp	r2, #0
 8003382:	d1f9      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x15c>
 8003384:	e798      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003386:	241f      	movs	r4, #31
 8003388:	3a41      	subs	r2, #65	; 0x41
 800338a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800338c:	fa04 f202 	lsl.w	r2, r4, r2
 8003390:	ea20 0202 	bic.w	r2, r0, r2
 8003394:	62ea      	str	r2, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003396:	684a      	ldr	r2, [r1, #4]
 8003398:	681c      	ldr	r4, [r3, #0]
 800339a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800339e:	8808      	ldrh	r0, [r1, #0]
 80033a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80033a2:	3a41      	subs	r2, #65	; 0x41
 80033a4:	fa00 f202 	lsl.w	r2, r0, r2
 80033a8:	432a      	orrs	r2, r5
 80033aa:	62e2      	str	r2, [r4, #44]	; 0x2c
 80033ac:	e780      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x94>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_ADC_ConfigChannel+0x1e8>)
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b0:	4c13      	ldr	r4, [pc, #76]	; (8003400 <HAL_ADC_ConfigChannel+0x1e4>)
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80033b2:	6850      	ldr	r0, [r2, #4]
 80033b4:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 80033b8:	6050      	str	r0, [r2, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80033ba:	6850      	ldr	r0, [r2, #4]
 80033bc:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80033c0:	6050      	str	r0, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	42a2      	cmp	r2, r4
 80033c6:	f47f af77 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x9c>
 80033ca:	6808      	ldr	r0, [r1, #0]
 80033cc:	e7b5      	b.n	800333a <HAL_ADC_ConfigChannel+0x11e>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80033ce:	4c0d      	ldr	r4, [pc, #52]	; (8003404 <HAL_ADC_ConfigChannel+0x1e8>)
 80033d0:	6860      	ldr	r0, [r4, #4]
 80033d2:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 80033d6:	6060      	str	r0, [r4, #4]
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	4290      	cmp	r0, r2
 80033dc:	f47f af6c 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x9c>
 80033e0:	6808      	ldr	r0, [r1, #0]
 80033e2:	e7a8      	b.n	8003336 <HAL_ADC_ConfigChannel+0x11a>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	68c2      	ldr	r2, [r0, #12]
 80033ea:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80033ee:	60c2      	str	r2, [r0, #12]
 80033f0:	e744      	b.n	800327c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80033f2:	2002      	movs	r0, #2
}
 80033f4:	b002      	add	sp, #8
 80033f6:	bc30      	pop	{r4, r5}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	10000012 	.word	0x10000012
 8003400:	40012000 	.word	0x40012000
 8003404:	40012300 	.word	0x40012300
 8003408:	20000008 	.word	0x20000008
 800340c:	431bde83 	.word	0x431bde83

08003410 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003414:	2800      	cmp	r0, #0
 8003416:	f000 8082 	beq.w	800351e <HAL_CAN_Init+0x10a>
{
 800341a:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800341c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003420:	4604      	mov	r4, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d078      	beq.n	8003518 <HAL_CAN_Init+0x104>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003430:	f7ff fc84 	bl	8002d3c <HAL_GetTick>
 8003434:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003436:	e004      	b.n	8003442 <HAL_CAN_Init+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003438:	f7ff fc80 	bl	8002d3c <HAL_GetTick>
 800343c:	1b43      	subs	r3, r0, r5
 800343e:	2b0a      	cmp	r3, #10
 8003440:	d861      	bhi.n	8003506 <HAL_CAN_Init+0xf2>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	07d1      	lsls	r1, r2, #31
 8003448:	d5f6      	bpl.n	8003438 <HAL_CAN_Init+0x24>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f022 0202 	bic.w	r2, r2, #2
 8003450:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003452:	f7ff fc73 	bl	8002d3c <HAL_GetTick>
 8003456:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003458:	e004      	b.n	8003464 <HAL_CAN_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800345a:	f7ff fc6f 	bl	8002d3c <HAL_GetTick>
 800345e:	1b40      	subs	r0, r0, r5
 8003460:	280a      	cmp	r0, #10
 8003462:	d850      	bhi.n	8003506 <HAL_CAN_Init+0xf2>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	0792      	lsls	r2, r2, #30
 800346a:	d4f6      	bmi.n	800345a <HAL_CAN_Init+0x46>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800346c:	7e22      	ldrb	r2, [r4, #24]
 800346e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	bf0c      	ite	eq
 8003474:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003478:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800347e:	7e63      	ldrb	r3, [r4, #25]
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003480:	6822      	ldr	r2, [r4, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003482:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	bf0c      	ite	eq
 8003488:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800348c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8003490:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003492:	7ea3      	ldrb	r3, [r4, #26]
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003494:	6822      	ldr	r2, [r4, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003496:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	bf0c      	ite	eq
 800349c:	f043 0320 	orreq.w	r3, r3, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a0:	f023 0320 	bicne.w	r3, r3, #32
 80034a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034a6:	7ee3      	ldrb	r3, [r4, #27]
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034a8:	6822      	ldr	r2, [r4, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034aa:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	bf0c      	ite	eq
 80034b0:	f023 0310 	biceq.w	r3, r3, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034b4:	f043 0310 	orrne.w	r3, r3, #16
 80034b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034ba:	7f23      	ldrb	r3, [r4, #28]
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034bc:	6822      	ldr	r2, [r4, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034be:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	bf0c      	ite	eq
 80034c4:	f043 0308 	orreq.w	r3, r3, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034c8:	f023 0308 	bicne.w	r3, r3, #8
 80034cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034ce:	7f63      	ldrb	r3, [r4, #29]
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034d0:	6822      	ldr	r2, [r4, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034d2:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034d4:	6813      	ldr	r3, [r2, #0]
 80034d6:	bf0c      	ite	eq
 80034d8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034dc:	f023 0304 	bicne.w	r3, r3, #4
 80034e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034e2:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 80034e6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 80034ea:	430b      	orrs	r3, r1
 80034ec:	6821      	ldr	r1, [r4, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	6862      	ldr	r2, [r4, #4]
 80034f2:	4303      	orrs	r3, r0
 80034f4:	3a01      	subs	r2, #1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034f6:	2000      	movs	r0, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034f8:	4313      	orrs	r3, r2

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034fa:	2201      	movs	r2, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034fc:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034fe:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003500:	f884 2020 	strb.w	r2, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8003504:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003506:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003508:	2205      	movs	r2, #5
      return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800350c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003510:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003512:	f884 2020 	strb.w	r2, [r4, #32]
}
 8003516:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8003518:	f7fd fe96 	bl	8001248 <HAL_CAN_MspInit>
 800351c:	e783      	b.n	8003426 <HAL_CAN_Init+0x12>
    return HAL_ERROR;
 800351e:	2001      	movs	r0, #1
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003524:	f890 2020 	ldrb.w	r2, [r0, #32]
{
 8003528:	4603      	mov	r3, r0

  if ((state == HAL_CAN_STATE_READY) ||
 800352a:	3a01      	subs	r2, #1
 800352c:	2a01      	cmp	r2, #1
 800352e:	d905      	bls.n	800353c <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003530:	6a42      	ldr	r2, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003532:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003534:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800353a:	4770      	bx	lr
{
 800353c:	b470      	push	{r4, r5, r6}
  CAN_TypeDef *can_ip = hcan->Instance;
 800353e:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003540:	2401      	movs	r4, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003542:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8003546:	4320      	orrs	r0, r4
 8003548:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800354c:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800354e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800355a:	ea20 0002 	bic.w	r0, r0, r2
 800355e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
 8003562:	43d0      	mvns	r0, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003564:	69cc      	ldr	r4, [r1, #28]
 8003566:	b9b4      	cbnz	r4, 8003596 <HAL_CAN_ConfigFilter+0x72>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003568:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800356c:	4004      	ands	r4, r0
 800356e:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003572:	68ce      	ldr	r6, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003574:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003576:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003578:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800357a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800357e:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003582:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003584:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003586:	688e      	ldr	r6, [r1, #8]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003588:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800358a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800358e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003592:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003594:	69cc      	ldr	r4, [r1, #28]
 8003596:	2c01      	cmp	r4, #1
 8003598:	d115      	bne.n	80035c6 <HAL_CAN_ConfigFilter+0xa2>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800359a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800359e:	4314      	orrs	r4, r2
 80035a0:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80035a4:	680e      	ldr	r6, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035a6:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80035a8:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035aa:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80035ac:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035b0:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035b4:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80035b6:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035b8:	688e      	ldr	r6, [r1, #8]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035ba:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035bc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035c0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80035c4:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80035c6:	698c      	ldr	r4, [r1, #24]
 80035c8:	bb14      	cbnz	r4, 8003610 <HAL_CAN_ConfigFilter+0xec>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80035ca:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80035ce:	4004      	ands	r4, r0
 80035d0:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035d4:	690c      	ldr	r4, [r1, #16]
 80035d6:	b9ac      	cbnz	r4, 8003604 <HAL_CAN_ConfigFilter+0xe0>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035d8:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80035dc:	4020      	ands	r0, r4
 80035de:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035e2:	6a09      	ldr	r1, [r1, #32]
 80035e4:	2901      	cmp	r1, #1
 80035e6:	d104      	bne.n	80035f2 <HAL_CAN_ConfigFilter+0xce>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035e8:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80035ec:	430a      	orrs	r2, r1
 80035ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 80035f6:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003600:	bc70      	pop	{r4, r5, r6}
 8003602:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003604:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003608:	4310      	orrs	r0, r2
 800360a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 800360e:	e7e8      	b.n	80035e2 <HAL_CAN_ConfigFilter+0xbe>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003610:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003614:	4314      	orrs	r4, r2
 8003616:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 800361a:	e7db      	b.n	80035d4 <HAL_CAN_ConfigFilter+0xb0>

0800361c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800361c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800361e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003622:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8003624:	2b01      	cmp	r3, #1
 8003626:	d006      	beq.n	8003636 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003628:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800362a:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800362c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003630:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8003632:	4630      	mov	r0, r6
 8003634:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003636:	6802      	ldr	r2, [r0, #0]
 8003638:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800363a:	2302      	movs	r3, #2
 800363c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003640:	6813      	ldr	r3, [r2, #0]
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003648:	f7ff fb78 	bl	8002d3c <HAL_GetTick>
 800364c:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800364e:	e004      	b.n	800365a <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003650:	f7ff fb74 	bl	8002d3c <HAL_GetTick>
 8003654:	1b43      	subs	r3, r0, r5
 8003656:	2b0a      	cmp	r3, #10
 8003658:	d808      	bhi.n	800366c <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f013 0301 	ands.w	r3, r3, #1
 8003662:	d1f5      	bne.n	8003650 <HAL_CAN_Start+0x34>
    return HAL_OK;
 8003664:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003666:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003668:	4630      	mov	r0, r6
 800366a:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800366c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800366e:	2205      	movs	r2, #5
}
 8003670:	4630      	mov	r0, r6
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003676:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003678:	f884 2020 	strb.w	r2, [r4, #32]
}
 800367c:	bd70      	pop	{r4, r5, r6, pc}
 800367e:	bf00      	nop

08003680 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003680:	b530      	push	{r4, r5, lr}
 8003682:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003684:	f890 0020 	ldrb.w	r0, [r0, #32]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003688:	3801      	subs	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800368a:	f8dc 4000 	ldr.w	r4, [ip]
  if ((state == HAL_CAN_STATE_READY) ||
 800368e:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003690:	68a4      	ldr	r4, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003692:	d841      	bhi.n	8003718 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003694:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003698:	d036      	beq.n	8003708 <HAL_CAN_AddTxMessage+0x88>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800369a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800369e:	2001      	movs	r0, #1
 80036a0:	40a0      	lsls	r0, r4
 80036a2:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036a4:	688b      	ldr	r3, [r1, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03e      	beq.n	8003728 <HAL_CAN_AddTxMessage+0xa8>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 80036aa:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036ac:	f8dc 5000 	ldr.w	r5, [ip]
                                                           pHeader->IDE |
 80036b0:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036b2:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80036b4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036b8:	f104 0018 	add.w	r0, r4, #24
 80036bc:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 80036c0:	f845 300e 	str.w	r3, [r5, lr]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80036c4:	f8dc 3000 	ldr.w	r3, [ip]
 80036c8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80036cc:	6908      	ldr	r0, [r1, #16]
 80036ce:	6058      	str	r0, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80036d0:	7d0b      	ldrb	r3, [r1, #20]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d035      	beq.n	8003742 <HAL_CAN_AddTxMessage+0xc2>
 80036d6:	ea4f 1e04 	mov.w	lr, r4, lsl #4
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036da:	f8dc 1000 	ldr.w	r1, [ip]

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 80036de:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036e0:	6853      	ldr	r3, [r2, #4]
 80036e2:	4471      	add	r1, lr
 80036e4:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036e8:	f8dc 1000 	ldr.w	r1, [ip]
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	4471      	add	r1, lr
 80036f0:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
 80036f4:	f8dc 3000 	ldr.w	r3, [ip]
 80036f8:	4473      	add	r3, lr
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036fa:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003706:	bd30      	pop	{r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003708:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
      return HAL_ERROR;
 800370c:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800370e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003712:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003716:	bd30      	pop	{r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003718:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
    return HAL_ERROR;
 800371c:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800371e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003722:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003726:	bd30      	pop	{r4, r5, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003728:	6808      	ldr	r0, [r1, #0]
 800372a:	68cb      	ldr	r3, [r1, #12]
 800372c:	f8dc 5000 	ldr.w	r5, [ip]
 8003730:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003734:	f104 0018 	add.w	r0, r4, #24
 8003738:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 800373c:	f845 300e 	str.w	r3, [r5, lr]
 8003740:	e7c0      	b.n	80036c4 <HAL_CAN_AddTxMessage+0x44>
 8003742:	f8dc 3000 	ldr.w	r3, [ip]
 8003746:	ea4f 1e04 	mov.w	lr, r4, lsl #4
 800374a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800374e:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
 8003752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003756:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 800375a:	e7be      	b.n	80036da <HAL_CAN_AddTxMessage+0x5a>

0800375c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 800375c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003760:	3b01      	subs	r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d901      	bls.n	800376a <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
  uint32_t freelevel = 0U;
 8003766:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8003768:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800376a:	6803      	ldr	r3, [r0, #0]
 800376c:	6898      	ldr	r0, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800376e:	689a      	ldr	r2, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003770:	f3c0 6080 	ubfx	r0, r0, #26, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003774:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003776:	0112      	lsls	r2, r2, #4
      freelevel++;
 8003778:	bf48      	it	mi
 800377a:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	d5f3      	bpl.n	8003768 <HAL_CAN_GetTxMailboxesFreeLevel+0xc>
      freelevel++;
 8003780:	3001      	adds	r0, #1
 8003782:	4770      	bx	lr

08003784 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003784:	4684      	mov	ip, r0
  HAL_CAN_StateTypeDef state = hcan->State;
 8003786:	f890 0020 	ldrb.w	r0, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800378a:	3801      	subs	r0, #1
 800378c:	2801      	cmp	r0, #1
 800378e:	f200 8085 	bhi.w	800389c <HAL_CAN_GetRxMessage+0x118>
{
 8003792:	b510      	push	{r4, lr}
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003794:	f8dc 4000 	ldr.w	r4, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003798:	b951      	cbnz	r1, 80037b0 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800379a:	68e0      	ldr	r0, [r4, #12]
 800379c:	0780      	lsls	r0, r0, #30
 800379e:	d10a      	bne.n	80037b6 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037a0:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24

        return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037aa:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80037ae:	bd10      	pop	{r4, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80037b0:	6920      	ldr	r0, [r4, #16]
 80037b2:	0780      	lsls	r0, r0, #30
 80037b4:	d0f4      	beq.n	80037a0 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037b6:	f101 001b 	add.w	r0, r1, #27
 80037ba:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 80037be:	f854 400e 	ldr.w	r4, [r4, lr]
 80037c2:	f004 0404 	and.w	r4, r4, #4
 80037c6:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	d06f      	beq.n	80038ac <HAL_CAN_GetRxMessage+0x128>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037cc:	f8dc 4000 	ldr.w	r4, [ip]
 80037d0:	f854 400e 	ldr.w	r4, [r4, lr]
 80037d4:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037d6:	6054      	str	r4, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037d8:	f8dc 4000 	ldr.w	r4, [ip]
 80037dc:	0100      	lsls	r0, r0, #4
 80037de:	5824      	ldr	r4, [r4, r0]
 80037e0:	f004 0402 	and.w	r4, r4, #2
 80037e4:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037e6:	f8dc 4000 	ldr.w	r4, [ip]
 80037ea:	4404      	add	r4, r0
 80037ec:	6864      	ldr	r4, [r4, #4]
 80037ee:	f004 040f 	and.w	r4, r4, #15
 80037f2:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037f4:	f8dc 4000 	ldr.w	r4, [ip]
 80037f8:	4404      	add	r4, r0
 80037fa:	6864      	ldr	r4, [r4, #4]
 80037fc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003800:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003802:	f8dc 4000 	ldr.w	r4, [ip]
 8003806:	4420      	add	r0, r4
 8003808:	6840      	ldr	r0, [r0, #4]
 800380a:	0c00      	lsrs	r0, r0, #16
 800380c:	6150      	str	r0, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800380e:	f8dc 2000 	ldr.w	r2, [ip]
 8003812:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003816:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800381a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800381c:	f8dc 2000 	ldr.w	r2, [ip]
 8003820:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003824:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003828:	0a12      	lsrs	r2, r2, #8
 800382a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800382c:	f8dc 2000 	ldr.w	r2, [ip]
 8003830:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003834:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003838:	0c12      	lsrs	r2, r2, #16
 800383a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800383c:	f8dc 2000 	ldr.w	r2, [ip]
 8003840:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003844:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003848:	0e12      	lsrs	r2, r2, #24
 800384a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800384c:	f8dc 2000 	ldr.w	r2, [ip]
 8003850:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003854:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003858:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800385a:	f8dc 2000 	ldr.w	r2, [ip]
 800385e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003862:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003866:	0a12      	lsrs	r2, r2, #8
 8003868:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800386a:	f8dc 2000 	ldr.w	r2, [ip]
 800386e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003872:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003876:	0c12      	lsrs	r2, r2, #16
 8003878:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800387a:	f8dc 2000 	ldr.w	r2, [ip]
 800387e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003882:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003886:	0e12      	lsrs	r2, r2, #24
 8003888:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800388a:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800388e:	b9a1      	cbnz	r1, 80038ba <HAL_CAN_GetRxMessage+0x136>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003890:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8003892:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	60d3      	str	r3, [r2, #12]
}
 800389a:	bd10      	pop	{r4, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800389c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
    return HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80038aa:	4770      	bx	lr
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038ac:	f8dc 4000 	ldr.w	r4, [ip]
 80038b0:	f854 400e 	ldr.w	r4, [r4, lr]
 80038b4:	0d64      	lsrs	r4, r4, #21
 80038b6:	6014      	str	r4, [r2, #0]
 80038b8:	e78e      	b.n	80037d8 <HAL_CAN_GetRxMessage+0x54>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038ba:	6913      	ldr	r3, [r2, #16]
    return HAL_OK;
 80038bc:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	6113      	str	r3, [r2, #16]
}
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	bf00      	nop

080038c8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80038c8:	f890 2020 	ldrb.w	r2, [r0, #32]
{
 80038cc:	4603      	mov	r3, r0

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038ce:	3a01      	subs	r2, #1
 80038d0:	2a01      	cmp	r2, #1
 80038d2:	d905      	bls.n	80038e0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038d4:	6a42      	ldr	r2, [r0, #36]	; 0x24

    return HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80038de:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038e0:	6802      	ldr	r2, [r0, #0]
    return HAL_OK;
 80038e2:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038e4:	6953      	ldr	r3, [r2, #20]
 80038e6:	4319      	orrs	r1, r3
 80038e8:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80038ea:	4770      	bx	lr

080038ec <HAL_CAN_TxMailbox0CompleteCallback>:
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop

080038f0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop

080038f4 <HAL_CAN_TxMailbox2CompleteCallback>:
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <HAL_CAN_TxMailbox0AbortCallback>:
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop

080038fc <HAL_CAN_TxMailbox1AbortCallback>:
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <HAL_CAN_TxMailbox2AbortCallback>:
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop

08003904 <HAL_CAN_RxFifo0FullCallback>:
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop

0800390c <HAL_CAN_RxFifo1FullCallback>:
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <HAL_CAN_SleepCallback>:
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop

08003914 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop

08003918 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800391c:	6803      	ldr	r3, [r0, #0]
{
 800391e:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003920:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003922:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003926:	f014 0601 	ands.w	r6, r4, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800392a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800392c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003930:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003934:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003938:	d025      	beq.n	8003986 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800393a:	f017 0601 	ands.w	r6, r7, #1
 800393e:	f040 8092 	bne.w	8003a66 <HAL_CAN_IRQHandler+0x14e>
 8003942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800394a:	05f8      	lsls	r0, r7, #23
 800394c:	d50d      	bpl.n	800396a <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800394e:	682b      	ldr	r3, [r5, #0]
 8003950:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003954:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003956:	05bb      	lsls	r3, r7, #22
 8003958:	f100 80c1 	bmi.w	8003ade <HAL_CAN_IRQHandler+0x1c6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800395c:	0578      	lsls	r0, r7, #21
 800395e:	f100 80e2 	bmi.w	8003b26 <HAL_CAN_IRQHandler+0x20e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003962:	053b      	lsls	r3, r7, #20
 8003964:	f140 80ee 	bpl.w	8003b44 <HAL_CAN_IRQHandler+0x22c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003968:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800396a:	03f8      	lsls	r0, r7, #15
 800396c:	d50b      	bpl.n	8003986 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003974:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003976:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003978:	f100 80bd 	bmi.w	8003af6 <HAL_CAN_IRQHandler+0x1de>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800397c:	037a      	lsls	r2, r7, #13
 800397e:	f140 80cd 	bpl.w	8003b1c <HAL_CAN_IRQHandler+0x204>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003982:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003986:	0727      	lsls	r7, r4, #28
 8003988:	d502      	bpl.n	8003990 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800398a:	f01b 0f10 	tst.w	fp, #16
 800398e:	d164      	bne.n	8003a5a <HAL_CAN_IRQHandler+0x142>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003990:	0760      	lsls	r0, r4, #29
 8003992:	d503      	bpl.n	800399c <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003994:	f01b 0f08 	tst.w	fp, #8
 8003998:	f040 808f 	bne.w	8003aba <HAL_CAN_IRQHandler+0x1a2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800399c:	07a1      	lsls	r1, r4, #30
 800399e:	d504      	bpl.n	80039aa <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	079a      	lsls	r2, r3, #30
 80039a6:	f040 808f 	bne.w	8003ac8 <HAL_CAN_IRQHandler+0x1b0>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039aa:	0663      	lsls	r3, r4, #25
 80039ac:	d502      	bpl.n	80039b4 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039ae:	f01a 0f10 	tst.w	sl, #16
 80039b2:	d14c      	bne.n	8003a4e <HAL_CAN_IRQHandler+0x136>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039b4:	06a7      	lsls	r7, r4, #26
 80039b6:	d502      	bpl.n	80039be <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039b8:	f01a 0f08 	tst.w	sl, #8
 80039bc:	d176      	bne.n	8003aac <HAL_CAN_IRQHandler+0x194>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039be:	06e0      	lsls	r0, r4, #27
 80039c0:	d503      	bpl.n	80039ca <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039c2:	682b      	ldr	r3, [r5, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	0799      	lsls	r1, r3, #30
 80039c8:	d165      	bne.n	8003a96 <HAL_CAN_IRQHandler+0x17e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039ca:	03a2      	lsls	r2, r4, #14
 80039cc:	d502      	bpl.n	80039d4 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039ce:	f018 0f10 	tst.w	r8, #16
 80039d2:	d164      	bne.n	8003a9e <HAL_CAN_IRQHandler+0x186>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039d4:	03e3      	lsls	r3, r4, #15
 80039d6:	d502      	bpl.n	80039de <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039d8:	f018 0f08 	tst.w	r8, #8
 80039dc:	d178      	bne.n	8003ad0 <HAL_CAN_IRQHandler+0x1b8>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039de:	0427      	lsls	r7, r4, #16
 80039e0:	d532      	bpl.n	8003a48 <HAL_CAN_IRQHandler+0x130>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039e2:	f018 0f04 	tst.w	r8, #4
 80039e6:	d02c      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x12a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039e8:	05e0      	lsls	r0, r4, #23
 80039ea:	d504      	bpl.n	80039f6 <HAL_CAN_IRQHandler+0xde>
 80039ec:	f019 0f01 	tst.w	r9, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039f0:	bf18      	it	ne
 80039f2:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039f6:	05a1      	lsls	r1, r4, #22
 80039f8:	d504      	bpl.n	8003a04 <HAL_CAN_IRQHandler+0xec>
 80039fa:	f019 0f02 	tst.w	r9, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039fe:	bf18      	it	ne
 8003a00:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a04:	0562      	lsls	r2, r4, #21
 8003a06:	d504      	bpl.n	8003a12 <HAL_CAN_IRQHandler+0xfa>
 8003a08:	f019 0f04 	tst.w	r9, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a0c:	bf18      	it	ne
 8003a0e:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a12:	0523      	lsls	r3, r4, #20
 8003a14:	d515      	bpl.n	8003a42 <HAL_CAN_IRQHandler+0x12a>
 8003a16:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8003a1a:	d012      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x12a>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a1c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003a20:	f000 809f 	beq.w	8003b62 <HAL_CAN_IRQHandler+0x24a>
 8003a24:	d86b      	bhi.n	8003afe <HAL_CAN_IRQHandler+0x1e6>
 8003a26:	f1b9 0f20 	cmp.w	r9, #32
 8003a2a:	f000 8088 	beq.w	8003b3e <HAL_CAN_IRQHandler+0x226>
 8003a2e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8003a32:	d16d      	bne.n	8003b10 <HAL_CAN_IRQHandler+0x1f8>
            /* Set CAN error code to Form error */
            errorcode |= HAL_CAN_ERROR_FOR;
            break;
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a34:	f046 0620 	orr.w	r6, r6, #32
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a38:	682a      	ldr	r2, [r5, #0]
 8003a3a:	6993      	ldr	r3, [r2, #24]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a42:	682b      	ldr	r3, [r5, #0]
 8003a44:	2204      	movs	r2, #4
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a48:	b9ee      	cbnz	r6, 8003a86 <HAL_CAN_IRQHandler+0x16e>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a52:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a56:	611a      	str	r2, [r3, #16]
 8003a58:	e7ac      	b.n	80039b4 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a5e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	e794      	b.n	8003990 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a66:	2201      	movs	r2, #1
 8003a68:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a6a:	07bb      	lsls	r3, r7, #30
 8003a6c:	d43b      	bmi.n	8003ae6 <HAL_CAN_IRQHandler+0x1ce>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a6e:	077e      	lsls	r6, r7, #29
 8003a70:	d45b      	bmi.n	8003b2a <HAL_CAN_IRQHandler+0x212>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a72:	f017 0608 	ands.w	r6, r7, #8
 8003a76:	d069      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x234>
 8003a78:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003a7c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a80:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003a84:	e761      	b.n	800394a <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8003a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003a88:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003a8a:	431e      	orrs	r6, r3
 8003a8c:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003a8e:	f7fe fe61 	bl	8002754 <HAL_CAN_ErrorCallback>
}
 8003a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7ff ff36 	bl	8003908 <HAL_CAN_RxFifo1MsgPendingCallback>
 8003a9c:	e795      	b.n	80039ca <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a9e:	682b      	ldr	r3, [r5, #0]
 8003aa0:	2210      	movs	r2, #16
      HAL_CAN_SleepCallback(hcan);
 8003aa2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003aa4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003aa6:	f7ff ff33 	bl	8003910 <HAL_CAN_SleepCallback>
 8003aaa:	e793      	b.n	80039d4 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	2208      	movs	r2, #8
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ab0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ab2:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ab4:	f7ff ff2a 	bl	800390c <HAL_CAN_RxFifo1FullCallback>
 8003ab8:	e781      	b.n	80039be <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	2208      	movs	r2, #8
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003abe:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ac0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ac2:	f7ff ff1f 	bl	8003904 <HAL_CAN_RxFifo0FullCallback>
 8003ac6:	e769      	b.n	800399c <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7fe fdb3 	bl	8002634 <HAL_CAN_RxFifo0MsgPendingCallback>
 8003ace:	e76c      	b.n	80039aa <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	2208      	movs	r2, #8
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ad4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ad6:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ad8:	f7ff ff1c 	bl	8003914 <HAL_CAN_WakeUpFromRxMsgCallback>
 8003adc:	e77f      	b.n	80039de <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f7ff ff06 	bl	80038f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003ae4:	e741      	b.n	800396a <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ae6:	f7ff ff01 	bl	80038ec <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003aea:	2600      	movs	r6, #0
 8003aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003af4:	e729      	b.n	800394a <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7ff fefc 	bl	80038f4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003afc:	e743      	b.n	8003986 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8003afe:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8003b02:	d019      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x220>
 8003b04:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8003b08:	d196      	bne.n	8003a38 <HAL_CAN_IRQHandler+0x120>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b0a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8003b0e:	e793      	b.n	8003a38 <HAL_CAN_IRQHandler+0x120>
        switch (esrflags & CAN_ESR_LEC)
 8003b10:	f1b9 0f10 	cmp.w	r9, #16
 8003b14:	d190      	bne.n	8003a38 <HAL_CAN_IRQHandler+0x120>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b16:	f046 0608 	orr.w	r6, r6, #8
            break;
 8003b1a:	e78d      	b.n	8003a38 <HAL_CAN_IRQHandler+0x120>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b1c:	033b      	lsls	r3, r7, #12
 8003b1e:	d51c      	bpl.n	8003b5a <HAL_CAN_IRQHandler+0x242>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b20:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8003b24:	e72f      	b.n	8003986 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b26:	4616      	mov	r6, r2
 8003b28:	e71f      	b.n	800396a <HAL_CAN_IRQHandler+0x52>
 8003b2a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003b2e:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b32:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003b36:	e708      	b.n	800394a <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b38:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8003b3c:	e77c      	b.n	8003a38 <HAL_CAN_IRQHandler+0x120>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b3e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8003b42:	e779      	b.n	8003a38 <HAL_CAN_IRQHandler+0x120>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b44:	4628      	mov	r0, r5
 8003b46:	f7ff fed9 	bl	80038fc <HAL_CAN_TxMailbox1AbortCallback>
 8003b4a:	e70e      	b.n	800396a <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b4c:	f7ff fed4 	bl	80038f8 <HAL_CAN_TxMailbox0AbortCallback>
 8003b50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b58:	e6f7      	b.n	800394a <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f7ff fed0 	bl	8003900 <HAL_CAN_TxMailbox2AbortCallback>
 8003b60:	e711      	b.n	8003986 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b62:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8003b66:	e767      	b.n	8003a38 <HAL_CAN_IRQHandler+0x120>

08003b68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4906      	ldr	r1, [pc, #24]	; (8003b84 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b6e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b72:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b74:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b78:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003b7e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003b80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00
 8003b88:	05fa0000 	.word	0x05fa0000

08003b8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b8c:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8e:	b500      	push	{lr}
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b96:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9e:	f1be 0f04 	cmp.w	lr, #4
 8003ba2:	bf28      	it	cs
 8003ba4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba8:	f1bc 0f06 	cmp.w	ip, #6
 8003bac:	d91a      	bls.n	8003be4 <HAL_NVIC_SetPriority+0x58>
 8003bae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb0:	f04f 3cff 	mov.w	ip, #4294967295
 8003bb4:	fa0c fc03 	lsl.w	ip, ip, r3
 8003bb8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003bc0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003bc6:	ea21 010c 	bic.w	r1, r1, ip
 8003bca:	fa01 f103 	lsl.w	r1, r1, r3
 8003bce:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003bd2:	db0a      	blt.n	8003bea <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	0109      	lsls	r1, r1, #4
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_NVIC_SetPriority+0x74>)
 8003bd8:	b2c9      	uxtb	r1, r1
 8003bda:	4403      	add	r3, r0
 8003bdc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	4613      	mov	r3, r2
 8003be8:	e7e8      	b.n	8003bbc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	f000 000f 	and.w	r0, r0, #15
 8003bee:	0109      	lsls	r1, r1, #4
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <HAL_NVIC_SetPriority+0x78>)
 8003bf2:	b2c9      	uxtb	r1, r1
 8003bf4:	4403      	add	r3, r0
 8003bf6:	7619      	strb	r1, [r3, #24]
 8003bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bfc:	e000ed00 	.word	0xe000ed00
 8003c00:	e000e100 	.word	0xe000e100
 8003c04:	e000ecfc 	.word	0xe000ecfc

08003c08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	db07      	blt.n	8003c1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0c:	f000 011f 	and.w	r1, r0, #31
 8003c10:	2301      	movs	r3, #1
 8003c12:	0940      	lsrs	r0, r0, #5
 8003c14:	4a02      	ldr	r2, [pc, #8]	; (8003c20 <HAL_NVIC_EnableIRQ+0x18>)
 8003c16:	408b      	lsls	r3, r1
 8003c18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c24:	1e43      	subs	r3, r0, #1
 8003c26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2a:	d20c      	bcs.n	8003c46 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c30:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c32:	4906      	ldr	r1, [pc, #24]	; (8003c4c <HAL_SYSTICK_Config+0x28>)
 8003c34:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c38:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c3a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003c50:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003c56:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8003c60:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_MPU_Enable+0x1c>)
 8003c6e:	f040 0001 	orr.w	r0, r0, #1
 8003c72:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c82:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003c8c:	7843      	ldrb	r3, [r0, #1]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_MPU_ConfigRegion+0x5c>)
 8003c90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8003c94:	7803      	ldrb	r3, [r0, #0]
 8003c96:	b313      	cbz	r3, 8003cde <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003c98:	6843      	ldr	r3, [r0, #4]
 8003c9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c9e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ca0:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ca4:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003ca6:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ca8:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003cac:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cb0:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003cb2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cb4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003cb8:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cbc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003cc0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cc2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003cc6:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003cce:	7a01      	ldrb	r1, [r0, #8]
 8003cd0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003cd4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003cd8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003cdc:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003cde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003ce2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff f824 	bl	8002d3c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cf4:	2c00      	cmp	r4, #0
 8003cf6:	d066      	beq.n	8003dc6 <HAL_DMA_Init+0xda>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cf8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003cfa:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8003d00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003d08:	6813      	ldr	r3, [r2, #0]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d10:	e004      	b.n	8003d1c <HAL_DMA_Init+0x30>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d12:	f7ff f813 	bl	8002d3c <HAL_GetTick>
 8003d16:	1b43      	subs	r3, r0, r5
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d84d      	bhi.n	8003db8 <HAL_DMA_Init+0xcc>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	07d1      	lsls	r1, r2, #31
 8003d22:	d4f6      	bmi.n	8003d12 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d24:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003d28:	68e1      	ldr	r1, [r4, #12]
 8003d2a:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8003d2c:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d30:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d32:	6921      	ldr	r1, [r4, #16]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d34:	2804      	cmp	r0, #4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	ea42 0201 	orr.w	r2, r2, r1
 8003d3a:	6961      	ldr	r1, [r4, #20]
 8003d3c:	ea42 0201 	orr.w	r2, r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d40:	69a1      	ldr	r1, [r4, #24]
 8003d42:	ea42 0201 	orr.w	r2, r2, r1
 8003d46:	69e1      	ldr	r1, [r4, #28]
 8003d48:	ea42 0201 	orr.w	r2, r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4c:	6a21      	ldr	r1, [r4, #32]
 8003d4e:	ea42 0201 	orr.w	r2, r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d52:	4935      	ldr	r1, [pc, #212]	; (8003e28 <HAL_DMA_Init+0x13c>)
 8003d54:	ea01 0105 	and.w	r1, r1, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d58:	ea42 0201 	orr.w	r2, r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5c:	d103      	bne.n	8003d66 <HAL_DMA_Init+0x7a>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d5e:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8003d62:	4301      	orrs	r1, r0
 8003d64:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d68:	6821      	ldr	r1, [r4, #0]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  tmp = hdma->Instance->FCR;
 8003d6c:	694b      	ldr	r3, [r1, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d6e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d70:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003d74:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_Init+0xde>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d7a:	614b      	str	r3, [r1, #20]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_DMA_Init+0x140>)
 8003d80:	b2c2      	uxtb	r2, r0
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d82:	492b      	ldr	r1, [pc, #172]	; (8003e30 <HAL_DMA_Init+0x144>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d84:	3a10      	subs	r2, #16
 8003d86:	fba3 5302 	umull	r5, r3, r3, r2
  
  if (stream_number > 3U)
 8003d8a:	2a5f      	cmp	r2, #95	; 0x5f
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d8c:	f04f 023f 	mov.w	r2, #63	; 0x3f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d90:	ea4f 1313 	mov.w	r3, r3, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d94:	5cc9      	ldrb	r1, [r1, r3]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_DMA_Init+0x148>)
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	fa02 f201 	lsl.w	r2, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d9c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d9e:	ea03 0300 	and.w	r3, r3, r0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da2:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003da6:	bf88      	it	hi
 8003da8:	3304      	addhi	r3, #4
 8003daa:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8003dae:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003db2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dba:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003dbc:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dbe:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003dc4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003dc6:	2001      	movs	r0, #1
}
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dca:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
    tmp |= hdma->Init.FIFOThreshold;
 8003dce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0d2      	beq.n	8003d7a <HAL_DMA_Init+0x8e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dd4:	69a5      	ldr	r5, [r4, #24]
 8003dd6:	b17d      	cbz	r5, 8003df8 <HAL_DMA_Init+0x10c>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dd8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8003ddc:	d016      	beq.n	8003e0c <HAL_DMA_Init+0x120>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dde:	2a02      	cmp	r2, #2
 8003de0:	d903      	bls.n	8003dea <HAL_DMA_Init+0xfe>
 8003de2:	2a03      	cmp	r2, #3
 8003de4:	d1c9      	bne.n	8003d7a <HAL_DMA_Init+0x8e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de6:	01c2      	lsls	r2, r0, #7
 8003de8:	d5c7      	bpl.n	8003d7a <HAL_DMA_Init+0x8e>
        hdma->State = HAL_DMA_STATE_READY;
 8003dea:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dec:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8003dee:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df0:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8003df8:	2a01      	cmp	r2, #1
 8003dfa:	d003      	beq.n	8003e04 <HAL_DMA_Init+0x118>
 8003dfc:	f032 0202 	bics.w	r2, r2, #2
 8003e00:	d1bb      	bne.n	8003d7a <HAL_DMA_Init+0x8e>
 8003e02:	e7f0      	b.n	8003de6 <HAL_DMA_Init+0xfa>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e04:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8003e08:	d1b7      	bne.n	8003d7a <HAL_DMA_Init+0x8e>
 8003e0a:	e7ee      	b.n	8003dea <HAL_DMA_Init+0xfe>
    switch (tmp)
 8003e0c:	2a03      	cmp	r2, #3
 8003e0e:	d8b4      	bhi.n	8003d7a <HAL_DMA_Init+0x8e>
 8003e10:	a501      	add	r5, pc, #4	; (adr r5, 8003e18 <HAL_DMA_Init+0x12c>)
 8003e12:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003deb 	.word	0x08003deb
 8003e1c:	08003de7 	.word	0x08003de7
 8003e20:	08003deb 	.word	0x08003deb
 8003e24:	08003e05 	.word	0x08003e05
 8003e28:	e010803f 	.word	0xe010803f
 8003e2c:	aaaaaaab 	.word	0xaaaaaaab
 8003e30:	0800bb38 	.word	0x0800bb38
 8003e34:	fffffc00 	.word	0xfffffc00

08003e38 <HAL_DMA_Start_IT>:
{
 8003e38:	b430      	push	{r4, r5}
 8003e3a:	4684      	mov	ip, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3c:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003e3e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003e42:	2801      	cmp	r0, #1
 8003e44:	d04d      	beq.n	8003ee2 <HAL_DMA_Start_IT+0xaa>
 8003e46:	2001      	movs	r0, #1
 8003e48:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e4c:	f89c 0035 	ldrb.w	r0, [ip, #53]	; 0x35
 8003e50:	2801      	cmp	r0, #1
 8003e52:	d005      	beq.n	8003e60 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8003e54:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8003e56:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8003e58:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8003e5c:	bc30      	pop	{r4, r5}
 8003e5e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	2002      	movs	r0, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e62:	f8dc 5000 	ldr.w	r5, [ip]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e66:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e70:	6828      	ldr	r0, [r5, #0]
 8003e72:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003e76:	6028      	str	r0, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 8003e78:	f8dc 0000 	ldr.w	r0, [ip]
 8003e7c:	6043      	str	r3, [r0, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e7e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003e82:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8003e84:	f8dc 3000 	ldr.w	r3, [ip]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e88:	d026      	beq.n	8003ed8 <HAL_DMA_Start_IT+0xa0>
    hdma->Instance->PAR = SrcAddress;
 8003e8a:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e8c:	f8dc 3000 	ldr.w	r3, [ip]
 8003e90:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e92:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 8003e96:	233f      	movs	r3, #63	; 0x3f
 8003e98:	4093      	lsls	r3, r2
 8003e9a:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e9c:	f8dc 2000 	ldr.w	r2, [ip]
 8003ea0:	6813      	ldr	r3, [r2, #0]
 8003ea2:	f043 0316 	orr.w	r3, r3, #22
 8003ea6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ea8:	f8dc 2000 	ldr.w	r2, [ip]
 8003eac:	6953      	ldr	r3, [r2, #20]
 8003eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb2:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb4:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003eb8:	b12b      	cbz	r3, 8003ec6 <HAL_DMA_Start_IT+0x8e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003eba:	f8dc 2000 	ldr.w	r2, [ip]
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	f043 0308 	orr.w	r3, r3, #8
 8003ec4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003ec6:	f8dc 2000 	ldr.w	r2, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bc30      	pop	{r4, r5}
 8003ed6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003ed8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003eda:	f8dc 3000 	ldr.w	r3, [ip]
 8003ede:	60d9      	str	r1, [r3, #12]
 8003ee0:	e7d7      	b.n	8003e92 <HAL_DMA_Start_IT+0x5a>
  __HAL_LOCK(hdma);
 8003ee2:	2002      	movs	r0, #2
}
 8003ee4:	bc30      	pop	{r4, r5}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_DMA_IRQHandler>:
{
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 8003eec:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8003eee:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <HAL_DMA_IRQHandler+0x204>)
{
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8003ef4:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 8003ef6:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef8:	2208      	movs	r2, #8
 8003efa:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8003efe:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f00:	fa02 f103 	lsl.w	r1, r2, r3
 8003f04:	4221      	tst	r1, r4
 8003f06:	d004      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x2a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f08:	6801      	ldr	r1, [r0, #0]
 8003f0a:	680f      	ldr	r7, [r1, #0]
 8003f0c:	0778      	lsls	r0, r7, #29
 8003f0e:	f100 80ba 	bmi.w	8004086 <HAL_DMA_IRQHandler+0x19e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f12:	2201      	movs	r2, #1
 8003f14:	409a      	lsls	r2, r3
 8003f16:	4222      	tst	r2, r4
 8003f18:	d005      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f1a:	f8d8 1000 	ldr.w	r1, [r8]
 8003f1e:	6949      	ldr	r1, [r1, #20]
 8003f20:	060f      	lsls	r7, r1, #24
 8003f22:	f100 80a6 	bmi.w	8004072 <HAL_DMA_IRQHandler+0x18a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f26:	2204      	movs	r2, #4
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	4222      	tst	r2, r4
 8003f2c:	d005      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x52>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f2e:	f8d8 1000 	ldr.w	r1, [r8]
 8003f32:	6809      	ldr	r1, [r1, #0]
 8003f34:	0788      	lsls	r0, r1, #30
 8003f36:	f100 8092 	bmi.w	800405e <HAL_DMA_IRQHandler+0x176>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	4222      	tst	r2, r4
 8003f40:	d004      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f42:	f8d8 1000 	ldr.w	r1, [r8]
 8003f46:	6809      	ldr	r1, [r1, #0]
 8003f48:	0709      	lsls	r1, r1, #28
 8003f4a:	d473      	bmi.n	8004034 <HAL_DMA_IRQHandler+0x14c>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	4223      	tst	r3, r4
 8003f54:	d018      	beq.n	8003f88 <HAL_DMA_IRQHandler+0xa0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f56:	f8d8 2000 	ldr.w	r2, [r8]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	06d4      	lsls	r4, r2, #27
 8003f5e:	d513      	bpl.n	8003f88 <HAL_DMA_IRQHandler+0xa0>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f60:	60b3      	str	r3, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f62:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d03c      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0xfc>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	0350      	lsls	r0, r2, #13
 8003f72:	f140 80a1 	bpl.w	80040b8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0319      	lsls	r1, r3, #12
 8003f7a:	f140 80ac 	bpl.w	80040d6 <HAL_DMA_IRQHandler+0x1ee>
        if(hdma->XferCpltCallback != NULL)
 8003f7e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8003f82:	b10b      	cbz	r3, 8003f88 <HAL_DMA_IRQHandler+0xa0>
          hdma->XferCpltCallback(hdma);
 8003f84:	4640      	mov	r0, r8
 8003f86:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f88:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d04e      	beq.n	800402e <HAL_DMA_IRQHandler+0x146>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f90:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003f94:	07da      	lsls	r2, r3, #31
 8003f96:	d51d      	bpl.n	8003fd4 <HAL_DMA_IRQHandler+0xec>
      __HAL_DMA_DISABLE(hdma);
 8003f98:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f9c:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8003f9e:	4954      	ldr	r1, [pc, #336]	; (80040f0 <HAL_DMA_IRQHandler+0x208>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fa0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003fa4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8003fa6:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8003faa:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8003fae:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e004      	b.n	8003fbe <HAL_DMA_IRQHandler+0xd6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	07db      	lsls	r3, r3, #31
 8003fbc:	d504      	bpl.n	8003fc8 <HAL_DMA_IRQHandler+0xe0>
        if (++count > timeout)
 8003fbe:	9b01      	ldr	r3, [sp, #4]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	42ab      	cmp	r3, r5
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	d9f5      	bls.n	8003fb4 <HAL_DMA_IRQHandler+0xcc>
      hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8003fca:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003fd0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8003fd4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8003fd8:	b34b      	cbz	r3, 800402e <HAL_DMA_IRQHandler+0x146>
      hdma->XferErrorCallback(hdma);
 8003fda:	4640      	mov	r0, r8
}
 8003fdc:	b002      	add	sp, #8
 8003fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8003fe2:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe4:	f8d8 2000 	ldr.w	r2, [r8]
 8003fe8:	6813      	ldr	r3, [r2, #0]
 8003fea:	f023 0316 	bic.w	r3, r3, #22
 8003fee:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8003ff4:	6953      	ldr	r3, [r2, #20]
 8003ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ffc:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d06e      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x1fa>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004004:	f8d8 2000 	ldr.w	r2, [r8]
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	f023 0308 	bic.w	r3, r3, #8
 800400e:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004010:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8004014:	233f      	movs	r3, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8004016:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004018:	4093      	lsls	r3, r2
        __HAL_UNLOCK(hdma);
 800401a:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401c:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800401e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8004022:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004026:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d5      	bne.n	8003fda <HAL_DMA_IRQHandler+0xf2>
}
 800402e:	b002      	add	sp, #8
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004034:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004036:	f8d8 3000 	ldr.w	r3, [r8]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	0352      	lsls	r2, r2, #13
 800403e:	d433      	bmi.n	80040a8 <HAL_DMA_IRQHandler+0x1c0>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	05d7      	lsls	r7, r2, #23
 8004044:	d403      	bmi.n	800404e <HAL_DMA_IRQHandler+0x166>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	f022 0208 	bic.w	r2, r2, #8
 800404c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800404e:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8004052:	b10b      	cbz	r3, 8004058 <HAL_DMA_IRQHandler+0x170>
          hdma->XferHalfCpltCallback(hdma);
 8004054:	4640      	mov	r0, r8
 8004056:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004058:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800405c:	e776      	b.n	8003f4c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800405e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004060:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800406c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8004070:	e763      	b.n	8003f3a <HAL_DMA_IRQHandler+0x52>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004072:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004074:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004080:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8004084:	e74f      	b.n	8003f26 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004086:	680b      	ldr	r3, [r1, #0]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	600b      	str	r3, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800408e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8004092:	409a      	lsls	r2, r3
 8004094:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004096:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040a2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80040a6:	e734      	b.n	8003f12 <HAL_DMA_IRQHandler+0x2a>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	031b      	lsls	r3, r3, #12
 80040ac:	d5cf      	bpl.n	800404e <HAL_DMA_IRQHandler+0x166>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ae:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ce      	bne.n	8004054 <HAL_DMA_IRQHandler+0x16c>
 80040b6:	e7cf      	b.n	8004058 <HAL_DMA_IRQHandler+0x170>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80040be:	f47f af5e 	bne.w	8003f7e <HAL_DMA_IRQHandler+0x96>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	f021 0110 	bic.w	r1, r1, #16
 80040c8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80040ca:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80040cc:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80040d0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
 80040d4:	e753      	b.n	8003f7e <HAL_DMA_IRQHandler+0x96>
          if(hdma->XferM1CpltCallback != NULL)
 80040d6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f47f af52 	bne.w	8003f84 <HAL_DMA_IRQHandler+0x9c>
 80040e0:	e752      	b.n	8003f88 <HAL_DMA_IRQHandler+0xa0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e2:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d18c      	bne.n	8004004 <HAL_DMA_IRQHandler+0x11c>
 80040ea:	e791      	b.n	8004010 <HAL_DMA_IRQHandler+0x128>
 80040ec:	20000008 	.word	0x20000008
 80040f0:	1b4e81b5 	.word	0x1b4e81b5

080040f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f4:	f04f 0c00 	mov.w	ip, #0
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80040fc:	4662      	mov	r2, ip
{
 80040fe:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004100:	4e7e      	ldr	r6, [pc, #504]	; (80042fc <HAL_GPIO_Init+0x208>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004102:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8004318 <HAL_GPIO_Init+0x224>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004106:	4d7e      	ldr	r5, [pc, #504]	; (8004300 <HAL_GPIO_Init+0x20c>)
 8004108:	e005      	b.n	8004116 <HAL_GPIO_Init+0x22>
  for(position = 0; position < GPIO_NUMBER; position++)
 800410a:	3201      	adds	r2, #1
 800410c:	f10c 0c02 	add.w	ip, ip, #2
 8004110:	2a10      	cmp	r2, #16
 8004112:	f000 80ad 	beq.w	8004270 <HAL_GPIO_Init+0x17c>
    ioposition = ((uint32_t)0x01) << position;
 8004116:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004118:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800411a:	4093      	lsls	r3, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411c:	ea03 0e04 	and.w	lr, r3, r4
    if(iocurrent == ioposition)
 8004120:	43a3      	bics	r3, r4
 8004122:	d1f2      	bne.n	800410a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004124:	684b      	ldr	r3, [r1, #4]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	1e5c      	subs	r4, r3, #1
 800412c:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800412e:	f04f 0403 	mov.w	r4, #3
 8004132:	fa04 f40c 	lsl.w	r4, r4, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004136:	f240 809e 	bls.w	8004276 <HAL_GPIO_Init+0x182>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800413a:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800413c:	2b03      	cmp	r3, #3
 800413e:	d026      	beq.n	800418e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->PUPDR;
 8004140:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004142:	ea03 0904 	and.w	r9, r3, r4
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004146:	688b      	ldr	r3, [r1, #8]
 8004148:	fa03 f30c 	lsl.w	r3, r3, ip
 800414c:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->PUPDR = temp;
 8004150:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004152:	684b      	ldr	r3, [r1, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d118      	bne.n	800418e <HAL_GPIO_Init+0x9a>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800415c:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3];
 8004160:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004164:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8004168:	230f      	movs	r3, #15
 800416a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800416e:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3];
 8004172:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004176:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	fa03 f30b 	lsl.w	r3, r3, fp
 8004180:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8004184:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004188:	684b      	ldr	r3, [r1, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 800418e:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004192:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004196:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800419a:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 800419c:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800419e:	684b      	ldr	r3, [r1, #4]
 80041a0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80041a4:	d0b1      	beq.n	800410a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80041a8:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041ac:	f002 0903 	and.w	r9, r2, #3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041b0:	4540      	cmp	r0, r8
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041ba:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	6473      	str	r3, [r6, #68]	; 0x44
 80041c0:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 80041c4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80041c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041ce:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 80041d2:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041d6:	fa03 f309 	lsl.w	r3, r3, r9
 80041da:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041de:	d01e      	beq.n	800421e <HAL_GPIO_Init+0x12a>
 80041e0:	4f48      	ldr	r7, [pc, #288]	; (8004304 <HAL_GPIO_Init+0x210>)
 80041e2:	42b8      	cmp	r0, r7
 80041e4:	d060      	beq.n	80042a8 <HAL_GPIO_Init+0x1b4>
 80041e6:	4f48      	ldr	r7, [pc, #288]	; (8004308 <HAL_GPIO_Init+0x214>)
 80041e8:	42b8      	cmp	r0, r7
 80041ea:	d064      	beq.n	80042b6 <HAL_GPIO_Init+0x1c2>
 80041ec:	4f47      	ldr	r7, [pc, #284]	; (800430c <HAL_GPIO_Init+0x218>)
 80041ee:	42b8      	cmp	r0, r7
 80041f0:	d068      	beq.n	80042c4 <HAL_GPIO_Init+0x1d0>
 80041f2:	4f47      	ldr	r7, [pc, #284]	; (8004310 <HAL_GPIO_Init+0x21c>)
 80041f4:	42b8      	cmp	r0, r7
 80041f6:	d06c      	beq.n	80042d2 <HAL_GPIO_Init+0x1de>
 80041f8:	4f46      	ldr	r7, [pc, #280]	; (8004314 <HAL_GPIO_Init+0x220>)
 80041fa:	42b8      	cmp	r0, r7
 80041fc:	d070      	beq.n	80042e0 <HAL_GPIO_Init+0x1ec>
 80041fe:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800431c <HAL_GPIO_Init+0x228>
 8004202:	4550      	cmp	r0, sl
 8004204:	d073      	beq.n	80042ee <HAL_GPIO_Init+0x1fa>
 8004206:	f8df a118 	ldr.w	sl, [pc, #280]	; 8004320 <HAL_GPIO_Init+0x22c>
 800420a:	4550      	cmp	r0, sl
 800420c:	bf0c      	ite	eq
 800420e:	f04f 0a07 	moveq.w	sl, #7
 8004212:	f04f 0a08 	movne.w	sl, #8
 8004216:	fa0a f909 	lsl.w	r9, sl, r9
 800421a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 800421e:	60a3      	str	r3, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004220:	ea6f 040e 	mvn.w	r4, lr
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004224:	684f      	ldr	r7, [r1, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004226:	3201      	adds	r2, #1
        temp = EXTI->RTSR;
 8004228:	68ab      	ldr	r3, [r5, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800422a:	f10c 0c02 	add.w	ip, ip, #2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422e:	02ff      	lsls	r7, r7, #11
        temp &= ~((uint32_t)iocurrent);
 8004230:	bf54      	ite	pl
 8004232:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8004234:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI->RTSR = temp;
 8004238:	60ab      	str	r3, [r5, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800423a:	684f      	ldr	r7, [r1, #4]
        temp = EXTI->FTSR;
 800423c:	68eb      	ldr	r3, [r5, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800423e:	02bf      	lsls	r7, r7, #10
        temp &= ~((uint32_t)iocurrent);
 8004240:	bf54      	ite	pl
 8004242:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8004244:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI->FTSR = temp;
 8004248:	60eb      	str	r3, [r5, #12]

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800424a:	684f      	ldr	r7, [r1, #4]
        temp = EXTI->EMR;
 800424c:	686b      	ldr	r3, [r5, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800424e:	03bf      	lsls	r7, r7, #14
        temp &= ~((uint32_t)iocurrent);
 8004250:	bf54      	ite	pl
 8004252:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8004254:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI->EMR = temp;
 8004258:	606b      	str	r3, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800425a:	684f      	ldr	r7, [r1, #4]
        temp = EXTI->IMR;
 800425c:	682b      	ldr	r3, [r5, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800425e:	03ff      	lsls	r7, r7, #15
        temp &= ~((uint32_t)iocurrent);
 8004260:	bf54      	ite	pl
 8004262:	401c      	andpl	r4, r3
        {
          temp |= iocurrent;
 8004264:	ea4e 0403 	orrmi.w	r4, lr, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 8004268:	2a10      	cmp	r2, #16
        }
        EXTI->IMR = temp;
 800426a:	602c      	str	r4, [r5, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800426c:	f47f af53 	bne.w	8004116 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8004270:	b003      	add	sp, #12
 8004272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004276:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004278:	ea23 0904 	bic.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800427c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800427e:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8004280:	fa03 f30c 	lsl.w	r3, r3, ip
 8004284:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 8004288:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428a:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 800428c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004290:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004294:	ea29 090e 	bic.w	r9, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004298:	4093      	lsls	r3, r2
 800429a:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 800429e:	6043      	str	r3, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a0:	684b      	ldr	r3, [r1, #4]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	e749      	b.n	800413c <HAL_GPIO_Init+0x48>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042a8:	f04f 0a01 	mov.w	sl, #1
 80042ac:	fa0a f909 	lsl.w	r9, sl, r9
 80042b0:	ea43 0309 	orr.w	r3, r3, r9
 80042b4:	e7b3      	b.n	800421e <HAL_GPIO_Init+0x12a>
 80042b6:	f04f 0a02 	mov.w	sl, #2
 80042ba:	fa0a f909 	lsl.w	r9, sl, r9
 80042be:	ea43 0309 	orr.w	r3, r3, r9
 80042c2:	e7ac      	b.n	800421e <HAL_GPIO_Init+0x12a>
 80042c4:	f04f 0a03 	mov.w	sl, #3
 80042c8:	fa0a f909 	lsl.w	r9, sl, r9
 80042cc:	ea43 0309 	orr.w	r3, r3, r9
 80042d0:	e7a5      	b.n	800421e <HAL_GPIO_Init+0x12a>
 80042d2:	f04f 0a04 	mov.w	sl, #4
 80042d6:	fa0a f909 	lsl.w	r9, sl, r9
 80042da:	ea43 0309 	orr.w	r3, r3, r9
 80042de:	e79e      	b.n	800421e <HAL_GPIO_Init+0x12a>
 80042e0:	f04f 0a05 	mov.w	sl, #5
 80042e4:	fa0a f909 	lsl.w	r9, sl, r9
 80042e8:	ea43 0309 	orr.w	r3, r3, r9
 80042ec:	e797      	b.n	800421e <HAL_GPIO_Init+0x12a>
 80042ee:	f04f 0a06 	mov.w	sl, #6
 80042f2:	fa0a f909 	lsl.w	r9, sl, r9
 80042f6:	ea43 0309 	orr.w	r3, r3, r9
 80042fa:	e790      	b.n	800421e <HAL_GPIO_Init+0x12a>
 80042fc:	40023800 	.word	0x40023800
 8004300:	40013c00 	.word	0x40013c00
 8004304:	40020400 	.word	0x40020400
 8004308:	40020800 	.word	0x40020800
 800430c:	40020c00 	.word	0x40020c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40021400 	.word	0x40021400
 8004318:	40020000 	.word	0x40020000
 800431c:	40021800 	.word	0x40021800
 8004320:	40021c00 	.word	0x40021c00

08004324 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004324:	6903      	ldr	r3, [r0, #16]
 8004326:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004328:	bf14      	ite	ne
 800432a:	2001      	movne	r0, #1
 800432c:	2000      	moveq	r0, #0
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004330:	b902      	cbnz	r2, 8004334 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004332:	0409      	lsls	r1, r1, #16
 8004334:	6181      	str	r1, [r0, #24]
  }
}
 8004336:	4770      	bx	lr

08004338 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004338:	b340      	cbz	r0, 800438c <HAL_IWDG_Init+0x54>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800433a:	f64c 41cc 	movw	r1, #52428	; 0xcccc

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800433e:	f245 5255 	movw	r2, #21845	; 0x5555
{
 8004342:	b538      	push	{r3, r4, r5, lr}
  __HAL_IWDG_START(hiwdg);
 8004344:	6803      	ldr	r3, [r0, #0]
 8004346:	4604      	mov	r4, r0
 8004348:	6019      	str	r1, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800434a:	6803      	ldr	r3, [r0, #0]
 800434c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800434e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004352:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004354:	6803      	ldr	r3, [r0, #0]
 8004356:	6882      	ldr	r2, [r0, #8]
 8004358:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800435a:	f7fe fcef 	bl	8002d3c <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800435e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004360:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	0751      	lsls	r1, r2, #29
 8004366:	d00a      	beq.n	800437e <HAL_IWDG_Init+0x46>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004368:	f7fe fce8 	bl	8002d3c <HAL_GetTick>
 800436c:	1b43      	subs	r3, r0, r5
 800436e:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004370:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004372:	d9f6      	bls.n	8004362 <HAL_IWDG_Init+0x2a>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	0752      	lsls	r2, r2, #29
 8004378:	d0f3      	beq.n	8004362 <HAL_IWDG_Init+0x2a>
      {
        return HAL_TIMEOUT;
 800437a:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800437c:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800437e:	6919      	ldr	r1, [r3, #16]
 8004380:	68e2      	ldr	r2, [r4, #12]
 8004382:	4291      	cmp	r1, r2
 8004384:	d004      	beq.n	8004390 <HAL_IWDG_Init+0x58>
  return HAL_OK;
 8004386:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004388:	611a      	str	r2, [r3, #16]
}
 800438a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800438c:	2001      	movs	r0, #1
}
 800438e:	4770      	bx	lr
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004390:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 8004394:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004396:	601a      	str	r2, [r3, #0]
}
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop

0800439c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800439c:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800439e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 80043a2:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop

080043ac <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_PWREx_EnableOverDrive+0x6c>)
{
 80043ae:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80043b2:	b083      	sub	sp, #12
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043b4:	4c19      	ldr	r4, [pc, #100]	; (800441c <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80043b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ce:	f7fe fcb5 	bl	8002d3c <HAL_GetTick>
 80043d2:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043d4:	e005      	b.n	80043e2 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d6:	f7fe fcb1 	bl	8002d3c <HAL_GetTick>
 80043da:	1b40      	subs	r0, r0, r5
 80043dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043e0:	d817      	bhi.n	8004412 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	03da      	lsls	r2, r3, #15
 80043e6:	d5f6      	bpl.n	80043d6 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043e8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ea:	4d0c      	ldr	r5, [pc, #48]	; (800441c <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80043f2:	f7fe fca3 	bl	8002d3c <HAL_GetTick>
 80043f6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043f8:	e005      	b.n	8004406 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043fa:	f7fe fc9f 	bl	8002d3c <HAL_GetTick>
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004404:	d805      	bhi.n	8004412 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004406:	686b      	ldr	r3, [r5, #4]
 8004408:	039b      	lsls	r3, r3, #14
 800440a:	d5f6      	bpl.n	80043fa <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800440c:	2000      	movs	r0, #0
}
 800440e:	b003      	add	sp, #12
 8004410:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004412:	2003      	movs	r0, #3
}
 8004414:	b003      	add	sp, #12
 8004416:	bd30      	pop	{r4, r5, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000

08004420 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004420:	2800      	cmp	r0, #0
 8004422:	f000 81b8 	beq.w	8004796 <HAL_RCC_OscConfig+0x376>
{
 8004426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	6803      	ldr	r3, [r0, #0]
{
 800442c:	b082      	sub	sp, #8
 800442e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004430:	07dd      	lsls	r5, r3, #31
 8004432:	d530      	bpl.n	8004496 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004434:	499e      	ldr	r1, [pc, #632]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 8004436:	688a      	ldr	r2, [r1, #8]
 8004438:	f002 020c 	and.w	r2, r2, #12
 800443c:	2a04      	cmp	r2, #4
 800443e:	f000 80f0 	beq.w	8004622 <HAL_RCC_OscConfig+0x202>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	688a      	ldr	r2, [r1, #8]
 8004444:	f002 020c 	and.w	r2, r2, #12
 8004448:	2a08      	cmp	r2, #8
 800444a:	f000 80e6 	beq.w	800461a <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	f000 80ef 	beq.w	8004636 <HAL_RCC_OscConfig+0x216>
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 8139 	bne.w	80046d0 <HAL_RCC_OscConfig+0x2b0>
 800445e:	4b94      	ldr	r3, [pc, #592]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800446e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8106 	beq.w	8004684 <HAL_RCC_OscConfig+0x264>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe fc60 	bl	8002d3c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447c:	4e8c      	ldr	r6, [pc, #560]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800447e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004480:	e005      	b.n	800448e <HAL_RCC_OscConfig+0x6e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004482:	f7fe fc5b 	bl	8002d3c <HAL_GetTick>
 8004486:	1b40      	subs	r0, r0, r5
 8004488:	2864      	cmp	r0, #100	; 0x64
 800448a:	f200 80f7 	bhi.w	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	6833      	ldr	r3, [r6, #0]
 8004490:	039a      	lsls	r2, r3, #14
 8004492:	d5f6      	bpl.n	8004482 <HAL_RCC_OscConfig+0x62>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	079f      	lsls	r7, r3, #30
 8004498:	d529      	bpl.n	80044ee <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800449a:	4b85      	ldr	r3, [pc, #532]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	f012 0f0c 	tst.w	r2, #12
 80044a2:	f000 8093 	beq.w	80045cc <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	f002 020c 	and.w	r2, r2, #12
 80044ac:	2a08      	cmp	r2, #8
 80044ae:	f000 8089 	beq.w	80045c4 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044b2:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b4:	4d7e      	ldr	r5, [pc, #504]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8118 	beq.w	80046ec <HAL_RCC_OscConfig+0x2cc>
        __HAL_RCC_HSI_ENABLE();
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fe fc3a 	bl	8002d3c <HAL_GetTick>
 80044c8:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_OscConfig+0xb8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044cc:	f7fe fc36 	bl	8002d3c <HAL_GetTick>
 80044d0:	1b80      	subs	r0, r0, r6
 80044d2:	2802      	cmp	r0, #2
 80044d4:	f200 80d2 	bhi.w	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	0798      	lsls	r0, r3, #30
 80044dc:	d5f6      	bpl.n	80044cc <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	6922      	ldr	r2, [r4, #16]
 80044e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80044e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044ea:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	071a      	lsls	r2, r3, #28
 80044f0:	d453      	bmi.n	800459a <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f2:	075d      	lsls	r5, r3, #29
 80044f4:	d531      	bpl.n	800455a <HAL_RCC_OscConfig+0x13a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b6e      	ldr	r3, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 80044f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fa:	00d0      	lsls	r0, r2, #3
 80044fc:	f140 8082 	bpl.w	8004604 <HAL_RCC_OscConfig+0x1e4>
  FlagStatus pwrclkchanged = RESET;
 8004500:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	4e6c      	ldr	r6, [pc, #432]	; (80046b4 <HAL_RCC_OscConfig+0x294>)
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	05d9      	lsls	r1, r3, #23
 8004508:	f140 80a8 	bpl.w	800465c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	f000 80fe 	beq.w	8004710 <HAL_RCC_OscConfig+0x2f0>
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 8101 	bne.w	800471c <HAL_RCC_OscConfig+0x2fc>
 800451a:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 800451c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	671a      	str	r2, [r3, #112]	; 0x70
 8004524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004526:	f022 0204 	bic.w	r2, r2, #4
 800452a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80b6 	beq.w	80046a0 <HAL_RCC_OscConfig+0x280>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe fc02 	bl	8002d3c <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	4f5d      	ldr	r7, [pc, #372]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800453e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	e005      	b.n	800454e <HAL_RCC_OscConfig+0x12e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fe fbfb 	bl	8002d3c <HAL_GetTick>
 8004546:	1b80      	subs	r0, r0, r6
 8004548:	4540      	cmp	r0, r8
 800454a:	f200 8097 	bhi.w	800467c <HAL_RCC_OscConfig+0x25c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004550:	079b      	lsls	r3, r3, #30
 8004552:	d5f6      	bpl.n	8004542 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004554:	2d00      	cmp	r5, #0
 8004556:	f040 8118 	bne.w	800478a <HAL_RCC_OscConfig+0x36a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455a:	69a0      	ldr	r0, [r4, #24]
 800455c:	b1c8      	cbz	r0, 8004592 <HAL_RCC_OscConfig+0x172>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455e:	4d54      	ldr	r5, [pc, #336]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 8004560:	68ab      	ldr	r3, [r5, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	f000 80e5 	beq.w	8004736 <HAL_RCC_OscConfig+0x316>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004574:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	f000 8110 	beq.w	800479a <HAL_RCC_OscConfig+0x37a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe fbdf 	bl	8002d3c <HAL_GetTick>
 800457e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004580:	e004      	b.n	800458c <HAL_RCC_OscConfig+0x16c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004582:	f7fe fbdb 	bl	8002d3c <HAL_GetTick>
 8004586:	1b00      	subs	r0, r0, r4
 8004588:	2802      	cmp	r0, #2
 800458a:	d877      	bhi.n	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	019b      	lsls	r3, r3, #6
 8004590:	d4f7      	bmi.n	8004582 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004592:	2000      	movs	r0, #0
}
 8004594:	b002      	add	sp, #8
 8004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800459a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800459c:	4d44      	ldr	r5, [pc, #272]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800459e:	b303      	cbz	r3, 80045e2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80045a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80045a8:	f7fe fbc8 	bl	8002d3c <HAL_GetTick>
 80045ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e004      	b.n	80045ba <HAL_RCC_OscConfig+0x19a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fe fbc4 	bl	8002d3c <HAL_GetTick>
 80045b4:	1b80      	subs	r0, r0, r6
 80045b6:	2802      	cmp	r0, #2
 80045b8:	d860      	bhi.n	800467c <HAL_RCC_OscConfig+0x25c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80045bc:	079b      	lsls	r3, r3, #30
 80045be:	d5f7      	bpl.n	80045b0 <HAL_RCC_OscConfig+0x190>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	e796      	b.n	80044f2 <HAL_RCC_OscConfig+0xd2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	025e      	lsls	r6, r3, #9
 80045c8:	f53f af73 	bmi.w	80044b2 <HAL_RCC_OscConfig+0x92>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	079d      	lsls	r5, r3, #30
 80045d2:	d536      	bpl.n	8004642 <HAL_RCC_OscConfig+0x222>
 80045d4:	68e3      	ldr	r3, [r4, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d033      	beq.n	8004642 <HAL_RCC_OscConfig+0x222>
        return HAL_ERROR;
 80045da:	2001      	movs	r0, #1
}
 80045dc:	b002      	add	sp, #8
 80045de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80045e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80045ea:	f7fe fba7 	bl	8002d3c <HAL_GetTick>
 80045ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	e004      	b.n	80045fc <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fe fba3 	bl	8002d3c <HAL_GetTick>
 80045f6:	1b80      	subs	r0, r0, r6
 80045f8:	2802      	cmp	r0, #2
 80045fa:	d83f      	bhi.n	800467c <HAL_RCC_OscConfig+0x25c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80045fe:	079f      	lsls	r7, r3, #30
 8004600:	d4f7      	bmi.n	80045f2 <HAL_RCC_OscConfig+0x1d2>
 8004602:	e7dd      	b.n	80045c0 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8004606:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	e773      	b.n	8004502 <HAL_RCC_OscConfig+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	684a      	ldr	r2, [r1, #4]
 800461c:	0250      	lsls	r0, r2, #9
 800461e:	f57f af16 	bpl.w	800444e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004622:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	0391      	lsls	r1, r2, #14
 8004628:	f57f af35 	bpl.w	8004496 <HAL_RCC_OscConfig+0x76>
 800462c:	6862      	ldr	r2, [r4, #4]
 800462e:	2a00      	cmp	r2, #0
 8004630:	f47f af31 	bne.w	8004496 <HAL_RCC_OscConfig+0x76>
 8004634:	e7d1      	b.n	80045da <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e716      	b.n	8004470 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
 8004644:	6921      	ldr	r1, [r4, #16]
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800464c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004650:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	071a      	lsls	r2, r3, #28
 8004656:	f57f af4c 	bpl.w	80044f2 <HAL_RCC_OscConfig+0xd2>
 800465a:	e79e      	b.n	800459a <HAL_RCC_OscConfig+0x17a>
      PWR->CR1 |= PWR_CR1_DBP;
 800465c:	6833      	ldr	r3, [r6, #0]
 800465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004662:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004664:	f7fe fb6a 	bl	8002d3c <HAL_GetTick>
 8004668:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466a:	6833      	ldr	r3, [r6, #0]
 800466c:	05da      	lsls	r2, r3, #23
 800466e:	f53f af4d 	bmi.w	800450c <HAL_RCC_OscConfig+0xec>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004672:	f7fe fb63 	bl	8002d3c <HAL_GetTick>
 8004676:	1bc0      	subs	r0, r0, r7
 8004678:	2864      	cmp	r0, #100	; 0x64
 800467a:	d9f6      	bls.n	800466a <HAL_RCC_OscConfig+0x24a>
            return HAL_TIMEOUT;
 800467c:	2003      	movs	r0, #3
}
 800467e:	b002      	add	sp, #8
 8004680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004684:	f7fe fb5a 	bl	8002d3c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004688:	4e09      	ldr	r6, [pc, #36]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800468a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468c:	e004      	b.n	8004698 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468e:	f7fe fb55 	bl	8002d3c <HAL_GetTick>
 8004692:	1b40      	subs	r0, r0, r5
 8004694:	2864      	cmp	r0, #100	; 0x64
 8004696:	d8f1      	bhi.n	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004698:	6833      	ldr	r3, [r6, #0]
 800469a:	039b      	lsls	r3, r3, #14
 800469c:	d4f7      	bmi.n	800468e <HAL_RCC_OscConfig+0x26e>
 800469e:	e6f9      	b.n	8004494 <HAL_RCC_OscConfig+0x74>
      tickstart = HAL_GetTick();
 80046a0:	f7fe fb4c 	bl	8002d3c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	4f02      	ldr	r7, [pc, #8]	; (80046b0 <HAL_RCC_OscConfig+0x290>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80046aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	e009      	b.n	80046c2 <HAL_RCC_OscConfig+0x2a2>
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fe fb40 	bl	8002d3c <HAL_GetTick>
 80046bc:	1b80      	subs	r0, r0, r6
 80046be:	4540      	cmp	r0, r8
 80046c0:	d8dc      	bhi.n	800467c <HAL_RCC_OscConfig+0x25c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c4:	0798      	lsls	r0, r3, #30
 80046c6:	d4f7      	bmi.n	80046b8 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 80046c8:	2d00      	cmp	r5, #0
 80046ca:	f43f af46 	beq.w	800455a <HAL_RCC_OscConfig+0x13a>
 80046ce:	e05c      	b.n	800478a <HAL_RCC_OscConfig+0x36a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d4:	4b49      	ldr	r3, [pc, #292]	; (80047fc <HAL_RCC_OscConfig+0x3dc>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	f47f aec3 	bne.w	8004462 <HAL_RCC_OscConfig+0x42>
 80046dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e6c1      	b.n	8004470 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_DISABLE();
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046f4:	f7fe fb22 	bl	8002d3c <HAL_GetTick>
 80046f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	e004      	b.n	8004706 <HAL_RCC_OscConfig+0x2e6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fc:	f7fe fb1e 	bl	8002d3c <HAL_GetTick>
 8004700:	1b80      	subs	r0, r0, r6
 8004702:	2802      	cmp	r0, #2
 8004704:	d8ba      	bhi.n	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	682b      	ldr	r3, [r5, #0]
 8004708:	0799      	lsls	r1, r3, #30
 800470a:	d4f7      	bmi.n	80046fc <HAL_RCC_OscConfig+0x2dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	e6ee      	b.n	80044ee <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004710:	4a3a      	ldr	r2, [pc, #232]	; (80047fc <HAL_RCC_OscConfig+0x3dc>)
 8004712:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e707      	b.n	800452c <HAL_RCC_OscConfig+0x10c>
 800471c:	2b05      	cmp	r3, #5
 800471e:	4b37      	ldr	r3, [pc, #220]	; (80047fc <HAL_RCC_OscConfig+0x3dc>)
 8004720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004722:	f47f aefc 	bne.w	800451e <HAL_RCC_OscConfig+0xfe>
 8004726:	f042 0204 	orr.w	r2, r2, #4
 800472a:	671a      	str	r2, [r3, #112]	; 0x70
 800472c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	671a      	str	r2, [r3, #112]	; 0x70
 8004734:	e6fa      	b.n	800452c <HAL_RCC_OscConfig+0x10c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004736:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8004738:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473a:	f43f af2b 	beq.w	8004594 <HAL_RCC_OscConfig+0x174>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	69e1      	ldr	r1, [r4, #28]
 8004744:	428b      	cmp	r3, r1
 8004746:	f47f af48 	bne.w	80045da <HAL_RCC_OscConfig+0x1ba>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800474a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	6a21      	ldr	r1, [r4, #32]
 8004750:	428b      	cmp	r3, r1
 8004752:	f47f af42 	bne.w	80045da <HAL_RCC_OscConfig+0x1ba>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800475a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800475c:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800475e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8004762:	f47f af3a 	bne.w	80045da <HAL_RCC_OscConfig+0x1ba>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004768:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004770:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8004774:	f47f af31 	bne.w	80045da <HAL_RCC_OscConfig+0x1ba>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800477a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800477e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8004782:	bf14      	ite	ne
 8004784:	2001      	movne	r0, #1
 8004786:	2000      	moveq	r0, #0
 8004788:	e704      	b.n	8004594 <HAL_RCC_OscConfig+0x174>
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_RCC_OscConfig+0x3dc>)
 800478c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800478e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004792:	6413      	str	r3, [r2, #64]	; 0x40
 8004794:	e6e1      	b.n	800455a <HAL_RCC_OscConfig+0x13a>
    return HAL_ERROR;
 8004796:	2001      	movs	r0, #1
}
 8004798:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800479a:	f7fe facf 	bl	8002d3c <HAL_GetTick>
 800479e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a0:	e005      	b.n	80047ae <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a2:	f7fe facb 	bl	8002d3c <HAL_GetTick>
 80047a6:	1b80      	subs	r0, r0, r6
 80047a8:	2802      	cmp	r0, #2
 80047aa:	f63f af67 	bhi.w	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	0199      	lsls	r1, r3, #6
 80047b2:	d4f6      	bmi.n	80047a2 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047b8:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4e10      	ldr	r6, [pc, #64]	; (80047fc <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047bc:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80047c0:	3a01      	subs	r2, #1
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80047ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80047d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047d6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047e0:	f7fe faac 	bl	8002d3c <HAL_GetTick>
 80047e4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_OscConfig+0x3d4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fe faa8 	bl	8002d3c <HAL_GetTick>
 80047ec:	1b00      	subs	r0, r0, r4
 80047ee:	2802      	cmp	r0, #2
 80047f0:	f63f af44 	bhi.w	800467c <HAL_RCC_OscConfig+0x25c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f4:	6833      	ldr	r3, [r6, #0]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	d5f6      	bpl.n	80047e8 <HAL_RCC_OscConfig+0x3c8>
 80047fa:	e6ca      	b.n	8004592 <HAL_RCC_OscConfig+0x172>
 80047fc:	40023800 	.word	0x40023800

08004800 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004800:	2800      	cmp	r0, #0
 8004802:	f000 80b6 	beq.w	8004972 <HAL_RCC_ClockConfig+0x172>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004806:	4a62      	ldr	r2, [pc, #392]	; (8004990 <HAL_RCC_ClockConfig+0x190>)
{
 8004808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	428b      	cmp	r3, r1
 8004818:	d20c      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	f023 030f 	bic.w	r3, r3, #15
 8004820:	430b      	orrs	r3, r1
 8004822:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	428b      	cmp	r3, r1
 800482c:	d002      	beq.n	8004834 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800482e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8004830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	0799      	lsls	r1, r3, #30
 8004838:	d516      	bpl.n	8004868 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483a:	075a      	lsls	r2, r3, #29
 800483c:	d505      	bpl.n	800484a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800483e:	4a55      	ldr	r2, [pc, #340]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 8004840:	6893      	ldr	r3, [r2, #8]
 8004842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004846:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	071b      	lsls	r3, r3, #28
 800484c:	d504      	bpl.n	8004858 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800484e:	4a51      	ldr	r2, [pc, #324]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 8004850:	6893      	ldr	r3, [r2, #8]
 8004852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004856:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004858:	4a4e      	ldr	r2, [pc, #312]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 800485a:	68a1      	ldr	r1, [r4, #8]
 800485c:	6893      	ldr	r3, [r2, #8]
 800485e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004862:	430b      	orrs	r3, r1
 8004864:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	07df      	lsls	r7, r3, #31
 800486a:	d520      	bpl.n	80048ae <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b49      	ldr	r3, [pc, #292]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004870:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004874:	d07f      	beq.n	8004976 <HAL_RCC_ClockConfig+0x176>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004876:	2a02      	cmp	r2, #2
 8004878:	d078      	beq.n	800496c <HAL_RCC_ClockConfig+0x16c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	0799      	lsls	r1, r3, #30
 800487c:	d5d7      	bpl.n	800482e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4e45      	ldr	r6, [pc, #276]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004884:	68b3      	ldr	r3, [r6, #8]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	4313      	orrs	r3, r2
 800488c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800488e:	f7fe fa55 	bl	8002d3c <HAL_GetTick>
 8004892:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004894:	e004      	b.n	80048a0 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004896:	f7fe fa51 	bl	8002d3c <HAL_GetTick>
 800489a:	1bc0      	subs	r0, r0, r7
 800489c:	4540      	cmp	r0, r8
 800489e:	d86d      	bhi.n	800497c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a0:	68b3      	ldr	r3, [r6, #8]
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80048ac:	d1f3      	bne.n	8004896 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048ae:	4a38      	ldr	r2, [pc, #224]	; (8004990 <HAL_RCC_ClockConfig+0x190>)
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	42ab      	cmp	r3, r5
 80048b8:	d909      	bls.n	80048ce <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f023 030f 	bic.w	r3, r3, #15
 80048c0:	432b      	orrs	r3, r5
 80048c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	d1af      	bne.n	800482e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	075a      	lsls	r2, r3, #29
 80048d2:	d507      	bpl.n	80048e4 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d4:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 80048d6:	68e1      	ldr	r1, [r4, #12]
 80048d8:	6893      	ldr	r3, [r2, #8]
 80048da:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80048de:	430b      	orrs	r3, r1
 80048e0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	d431      	bmi.n	800494c <HAL_RCC_ClockConfig+0x14c>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e8:	492a      	ldr	r1, [pc, #168]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 80048ea:	688b      	ldr	r3, [r1, #8]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d039      	beq.n	8004968 <HAL_RCC_ClockConfig+0x168>
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d118      	bne.n	800492a <HAL_RCC_ClockConfig+0x12a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048fa:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004900:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004902:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8004906:	d03b      	beq.n	8004980 <HAL_RCC_ClockConfig+0x180>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004908:	4823      	ldr	r0, [pc, #140]	; (8004998 <HAL_RCC_ClockConfig+0x198>)
 800490a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800490e:	2300      	movs	r3, #0
 8004910:	fba1 0100 	umull	r0, r1, r1, r0
 8004914:	f7fc f9e0 	bl	8000cd8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004920:	3301      	adds	r3, #1
 8004922:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004924:	fbb0 f3f3 	udiv	r3, r0, r3
 8004928:	e000      	b.n	800492c <HAL_RCC_ClockConfig+0x12c>
      sysclockfreq = HSI_VALUE;
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <HAL_RCC_ClockConfig+0x19c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 800492e:	4c1c      	ldr	r4, [pc, #112]	; (80049a0 <HAL_RCC_ClockConfig+0x1a0>)
 8004930:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8004932:	481c      	ldr	r0, [pc, #112]	; (80049a4 <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004934:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004938:	491b      	ldr	r1, [pc, #108]	; (80049a8 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick(uwTickPrio);
 800493a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800493c:	5ca2      	ldrb	r2, [r4, r2]
 800493e:	40d3      	lsrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8004942:	f7fe f9bf 	bl	8002cc4 <HAL_InitTick>
  return HAL_OK;
 8004946:	2000      	movs	r0, #0
}
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800494c:	4a11      	ldr	r2, [pc, #68]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
 800494e:	6921      	ldr	r1, [r4, #16]
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004956:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495a:	490e      	ldr	r1, [pc, #56]	; (8004994 <HAL_RCC_ClockConfig+0x194>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800495c:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495e:	688b      	ldr	r3, [r1, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b04      	cmp	r3, #4
 8004966:	d1c5      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xf4>
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_ClockConfig+0x198>)
 800496a:	e7df      	b.n	800492c <HAL_RCC_ClockConfig+0x12c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	0198      	lsls	r0, r3, #6
 800496e:	d486      	bmi.n	800487e <HAL_RCC_ClockConfig+0x7e>
 8004970:	e75d      	b.n	800482e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004972:	2001      	movs	r0, #1
}
 8004974:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	039e      	lsls	r6, r3, #14
 8004978:	d481      	bmi.n	800487e <HAL_RCC_ClockConfig+0x7e>
 800497a:	e758      	b.n	800482e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800497c:	2003      	movs	r0, #3
 800497e:	e757      	b.n	8004830 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4806      	ldr	r0, [pc, #24]	; (800499c <HAL_RCC_ClockConfig+0x19c>)
 8004982:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004986:	fba1 0100 	umull	r0, r1, r1, r0
 800498a:	f7fc f9a5 	bl	8000cd8 <__aeabi_uldivmod>
 800498e:	e7c3      	b.n	8004918 <HAL_RCC_ClockConfig+0x118>
 8004990:	40023c00 	.word	0x40023c00
 8004994:	40023800 	.word	0x40023800
 8004998:	007a1200 	.word	0x007a1200
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	0800bb20 	.word	0x0800bb20
 80049a4:	20000010 	.word	0x20000010
 80049a8:	20000008 	.word	0x20000008

080049ac <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80049ac:	4a02      	ldr	r2, [pc, #8]	; (80049b8 <HAL_RCC_EnableCSS+0xc>)
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b4:	6013      	str	r3, [r2, #0]
}
 80049b6:	4770      	bx	lr
 80049b8:	40023800 	.word	0x40023800

080049bc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049bc:	4916      	ldr	r1, [pc, #88]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80049be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c0:	688b      	ldr	r3, [r1, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d01b      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x46>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d117      	bne.n	80049fe <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ce:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049d0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80049dc:	d113      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049de:	480f      	ldr	r0, [pc, #60]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x60>)
 80049e0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80049e4:	fba1 0100 	umull	r0, r1, r1, r0
 80049e8:	f7fc f976 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x5c>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80049f4:	3301      	adds	r3, #1
 80049f6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80049f8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80049fc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80049fe:	4807      	ldr	r0, [pc, #28]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004a00:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a02:	4807      	ldr	r0, [pc, #28]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004a04:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a06:	4806      	ldr	r0, [pc, #24]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x64>)
 8004a08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	fba1 0100 	umull	r0, r1, r1, r0
 8004a12:	f7fc f961 	bl	8000cd8 <__aeabi_uldivmod>
 8004a16:	e7e9      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x30>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	00f42400 	.word	0x00f42400
 8004a20:	007a1200 	.word	0x007a1200

08004a24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004a26:	4905      	ldr	r1, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a2c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a34:	40d8      	lsrs	r0, r3
 8004a36:	4770      	bx	lr
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	20000008 	.word	0x20000008
 8004a40:	0800bb30 	.word	0x0800bb30

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004a46:	4905      	ldr	r1, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004a4c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004a50:	6808      	ldr	r0, [r1, #0]
 8004a52:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a54:	40d8      	lsrs	r0, r3
 8004a56:	4770      	bx	lr
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	20000008 	.word	0x20000008
 8004a60:	0800bb30 	.word	0x0800bb30

08004a64 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop

08004a68 <HAL_RCC_NMI_IRQHandler>:
{
 8004a68:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004a6a:	4c05      	ldr	r4, [pc, #20]	; (8004a80 <HAL_RCC_NMI_IRQHandler+0x18>)
 8004a6c:	68e3      	ldr	r3, [r4, #12]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	d400      	bmi.n	8004a74 <HAL_RCC_NMI_IRQHandler+0xc>
}
 8004a72:	bd10      	pop	{r4, pc}
    HAL_RCC_CSSCallback();
 8004a74:	f7ff fff6 	bl	8004a64 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	73a3      	strb	r3, [r4, #14]
}
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a88:	6803      	ldr	r3, [r0, #0]
{
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a8e:	f013 0601 	ands.w	r6, r3, #1
 8004a92:	d00d      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a94:	4ba4      	ldr	r3, [pc, #656]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aa6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004aa8:	6803      	ldr	r3, [r0, #0]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aaa:	fab6 f686 	clz	r6, r6
 8004aae:	0976      	lsrs	r6, r6, #5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ab0:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8004ab4:	d011      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab6:	4a9c      	ldr	r2, [pc, #624]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004abe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ac8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004aca:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004ace:	f000 81d8 	beq.w	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ad2:	fab5 f585 	clz	r5, r5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ad6:	6823      	ldr	r3, [r4, #0]
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ad8:	096d      	lsrs	r5, r5, #5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ada:	02d9      	lsls	r1, r3, #11
 8004adc:	d512      	bpl.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ade:	4a92      	ldr	r2, [pc, #584]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ae0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ae2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004ae6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004aea:	430b      	orrs	r3, r1
 8004aec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af6:	f000 81c8 	beq.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 81eb 	bne.w	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      pllsaiused = 1;
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b00:	6823      	ldr	r3, [r4, #0]
      pllsaiused = 1;
 8004b02:	2501      	movs	r5, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b04:	069a      	lsls	r2, r3, #26
 8004b06:	f100 8173 	bmi.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b0a:	06da      	lsls	r2, r3, #27
 8004b0c:	d50d      	bpl.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b0e:	4b86      	ldr	r3, [pc, #536]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b14:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004b1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b22:	430a      	orrs	r2, r1
 8004b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	045f      	lsls	r7, r3, #17
 8004b2c:	d509      	bpl.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b2e:	4a7e      	ldr	r2, [pc, #504]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	0418      	lsls	r0, r3, #16
 8004b44:	d509      	bpl.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b46:	4a78      	ldr	r2, [pc, #480]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b48:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004b4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b4e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004b52:	430b      	orrs	r3, r1
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	03d9      	lsls	r1, r3, #15
 8004b5c:	d509      	bpl.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b5e:	4a72      	ldr	r2, [pc, #456]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b60:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004b62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b66:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	065a      	lsls	r2, r3, #25
 8004b74:	d509      	bpl.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b76:	4a6c      	ldr	r2, [pc, #432]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	430b      	orrs	r3, r1
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	061f      	lsls	r7, r3, #24
 8004b8c:	d509      	bpl.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b8e:	4a66      	ldr	r2, [pc, #408]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b96:	f023 030c 	bic.w	r3, r3, #12
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	05d8      	lsls	r0, r3, #23
 8004ba4:	d509      	bpl.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ba6:	4a60      	ldr	r2, [pc, #384]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ba8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004baa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	0599      	lsls	r1, r3, #22
 8004bbc:	d509      	bpl.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bbe:	4a5a      	ldr	r2, [pc, #360]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004bc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004bc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	055a      	lsls	r2, r3, #21
 8004bd4:	d509      	bpl.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd6:	4a54      	ldr	r2, [pc, #336]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004bd8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004bda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be2:	430b      	orrs	r3, r1
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	051f      	lsls	r7, r3, #20
 8004bec:	d509      	bpl.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bee:	4a4e      	ldr	r2, [pc, #312]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004bf0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004bf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bf6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	04d8      	lsls	r0, r3, #19
 8004c04:	d509      	bpl.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c06:	4a48      	ldr	r2, [pc, #288]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c08:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004c0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c12:	430b      	orrs	r3, r1
 8004c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	0499      	lsls	r1, r3, #18
 8004c1c:	d509      	bpl.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c1e:	4a42      	ldr	r2, [pc, #264]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c20:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004c22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	029a      	lsls	r2, r3, #10
 8004c34:	d50e      	bpl.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c36:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c38:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004c3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c3e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004c42:	430b      	orrs	r3, r1
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c48:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
      pllsaiused = 1;
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c4e:	6823      	ldr	r3, [r4, #0]
      pllsaiused = 1;
 8004c50:	bf08      	it	eq
 8004c52:	2501      	moveq	r5, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c54:	035f      	lsls	r7, r3, #13
 8004c56:	d509      	bpl.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c58:	4a33      	ldr	r2, [pc, #204]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c5a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004c5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c60:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004c64:	430b      	orrs	r3, r1
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	0218      	lsls	r0, r3, #8
 8004c6e:	d509      	bpl.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c70:	4a2d      	ldr	r2, [pc, #180]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c72:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004c74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0159      	lsls	r1, r3, #5
 8004c86:	d451      	bmi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c88:	b916      	cbnz	r6, 8004c90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	019a      	lsls	r2, r3, #6
 8004c8e:	d545      	bpl.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c90:	4e25      	ldr	r6, [pc, #148]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c98:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9a:	f7fe f84f 	bl	8002d3c <HAL_GetTick>
 8004c9e:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca0:	e005      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ca2:	f7fe f84b 	bl	8002d3c <HAL_GetTick>
 8004ca6:	1bc0      	subs	r0, r0, r7
 8004ca8:	2864      	cmp	r0, #100	; 0x64
 8004caa:	f200 809d 	bhi.w	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cae:	6833      	ldr	r3, [r6, #0]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	d4f6      	bmi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x21e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	07df      	lsls	r7, r3, #31
 8004cb8:	d50e      	bpl.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cbc:	b962      	cbnz	r2, 8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cbe:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cc0:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc4:	6861      	ldr	r1, [r4, #4]
 8004cc6:	071b      	lsls	r3, r3, #28
 8004cc8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004ccc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	0318      	lsls	r0, r3, #12
 8004cda:	d504      	bpl.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004cdc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004cde:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004ce2:	f000 80e0 	beq.w	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004ce6:	02d9      	lsls	r1, r3, #11
 8004ce8:	d504      	bpl.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x270>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004cf0:	f000 80d9 	beq.w	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	f100 80cb 	bmi.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cfa:	4e0b      	ldr	r6, [pc, #44]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d02:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d04:	f7fe f81a 	bl	8002d3c <HAL_GetTick>
 8004d08:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d0a:	e004      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x292>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d0c:	f7fe f816 	bl	8002d3c <HAL_GetTick>
 8004d10:	1bc0      	subs	r0, r0, r7
 8004d12:	2864      	cmp	r0, #100	; 0x64
 8004d14:	d868      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d16:	6833      	ldr	r3, [r6, #0]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	d5f7      	bpl.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x288>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d1c:	2d01      	cmp	r5, #1
 8004d1e:	d00f      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004d20:	2000      	movs	r0, #0
}
 8004d22:	b003      	add	sp, #12
 8004d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d28:	40023800 	.word	0x40023800
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d2c:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004d2e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004d30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d3e:	e7a3      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_PLLSAI_DISABLE();
 8004d40:	4d77      	ldr	r5, [pc, #476]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d48:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d4a:	f7fd fff7 	bl	8002d3c <HAL_GetTick>
 8004d4e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d50:	e004      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d52:	f7fd fff3 	bl	8002d3c <HAL_GetTick>
 8004d56:	1b80      	subs	r0, r0, r6
 8004d58:	2864      	cmp	r0, #100	; 0x64
 8004d5a:	d845      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	009f      	lsls	r7, r3, #2
 8004d60:	d4f7      	bmi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0318      	lsls	r0, r3, #12
 8004d66:	f140 80d2 	bpl.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004d6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	f040 80ce 	bne.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d72:	4a6b      	ldr	r2, [pc, #428]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004d74:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d78:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8004d82:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004d86:	430b      	orrs	r3, r1
 8004d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d8c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004d90:	6a21      	ldr	r1, [r4, #32]
 8004d92:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004d96:	3901      	subs	r1, #1
 8004d98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	029a      	lsls	r2, r3, #10
 8004da4:	d510      	bpl.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004da6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dae:	495c      	ldr	r1, [pc, #368]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004db0:	69a3      	ldr	r3, [r4, #24]
 8004db2:	6920      	ldr	r0, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004db4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004dbe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8004dc8:	4c55      	ldr	r4, [pc, #340]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004dd2:	f7fd ffb3 	bl	8002d3c <HAL_GetTick>
 8004dd6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	d4a0      	bmi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dde:	f7fd ffad 	bl	8002d3c <HAL_GetTick>
 8004de2:	1b40      	subs	r0, r0, r5
 8004de4:	2864      	cmp	r0, #100	; 0x64
 8004de6:	d9f7      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
        return HAL_TIMEOUT;
 8004de8:	2003      	movs	r0, #3
}
 8004dea:	b003      	add	sp, #12
 8004dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df0:	4b4b      	ldr	r3, [pc, #300]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
    PWR->CR1 |= PWR_CR1_DBP;
 8004df2:	4f4c      	ldr	r7, [pc, #304]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004e0e:	f7fd ff95 	bl	8002d3c <HAL_GetTick>
 8004e12:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e16:	f7fd ff91 	bl	8002d3c <HAL_GetTick>
 8004e1a:	eba0 0008 	sub.w	r0, r0, r8
 8004e1e:	2864      	cmp	r0, #100	; 0x64
 8004e20:	d8e2      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	05db      	lsls	r3, r3, #23
 8004e26:	d5f6      	bpl.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x392>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e28:	4f3d      	ldr	r7, [pc, #244]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e2e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004e32:	d013      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004e34:	f402 7140 	and.w	r1, r2, #768	; 0x300
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d011      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e48:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e50:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004e52:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e56:	07d8      	lsls	r0, r3, #31
 8004e58:	d448      	bmi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x468>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e5c:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8004e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e64:	d039      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x456>
 8004e66:	4a2e      	ldr	r2, [pc, #184]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004e68:	6893      	ldr	r3, [r2, #8]
 8004e6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e6e:	6093      	str	r3, [r2, #8]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004e72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e74:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	e643      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x86>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e82:	6823      	ldr	r3, [r4, #0]
  uint32_t pllsaiused = 0;
 8004e84:	2500      	movs	r5, #0
      plli2sused = 1;
 8004e86:	2601      	movs	r6, #1
 8004e88:	e627      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x56>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e8a:	6823      	ldr	r3, [r4, #0]
      plli2sused = 1;
 8004e8c:	2601      	movs	r6, #1
 8004e8e:	e639      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e90:	1d21      	adds	r1, r4, #4
 8004e92:	c90e      	ldmia	r1, {r1, r2, r3}
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004e9a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004e9e:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004ea0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004ea4:	e729      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004ea8:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eaa:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004eae:	6860      	ldr	r0, [r4, #4]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004eb6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ec0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004ec4:	69e3      	ldr	r3, [r4, #28]
 8004ec6:	f021 011f 	bic.w	r1, r1, #31
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	e70e      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	e614      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eda:	4811      	ldr	r0, [pc, #68]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8004edc:	4912      	ldr	r1, [pc, #72]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ede:	6883      	ldr	r3, [r0, #8]
 8004ee0:	4011      	ands	r1, r2
 8004ee2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6083      	str	r3, [r0, #8]
 8004eea:	e7c1      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
        tickstart = HAL_GetTick();
 8004eec:	f7fd ff26 	bl	8002d3c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004ef4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e006      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x482>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fd ff20 	bl	8002d3c <HAL_GetTick>
 8004efc:	eba0 0008 	sub.w	r0, r0, r8
 8004f00:	4548      	cmp	r0, r9
 8004f02:	f63f af71 	bhi.w	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f08:	0799      	lsls	r1, r3, #30
 8004f0a:	d5f5      	bpl.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8004f0c:	e7a5      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f0e:	02d9      	lsls	r1, r3, #11
 8004f10:	f57f af47 	bpl.w	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	f47f af43 	bne.w	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8004f1c:	e729      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40007000 	.word	0x40007000
 8004f28:	0ffffcff 	.word	0x0ffffcff

08004f2c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f000 809e 	beq.w	800506e <HAL_TIM_Base_Init+0x142>
{
 8004f32:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f38:	4604      	mov	r4, r0
 8004f3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d07c      	beq.n	800503c <HAL_TIM_Base_Init+0x110>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f42:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f46:	494c      	ldr	r1, [pc, #304]	; (8005078 <HAL_TIM_Base_Init+0x14c>)
 8004f48:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f50:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004f54:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f56:	fab1 f181 	clz	r1, r1
 8004f5a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8004f5e:	d036      	beq.n	8004fce <HAL_TIM_Base_Init+0xa2>
 8004f60:	2900      	cmp	r1, #0
 8004f62:	d134      	bne.n	8004fce <HAL_TIM_Base_Init+0xa2>
 8004f64:	4d45      	ldr	r5, [pc, #276]	; (800507c <HAL_TIM_Base_Init+0x150>)
 8004f66:	4846      	ldr	r0, [pc, #280]	; (8005080 <HAL_TIM_Base_Init+0x154>)
 8004f68:	4282      	cmp	r2, r0
 8004f6a:	bf18      	it	ne
 8004f6c:	42aa      	cmpne	r2, r5
 8004f6e:	d06a      	beq.n	8005046 <HAL_TIM_Base_Init+0x11a>
 8004f70:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8004f74:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004f78:	1b55      	subs	r5, r2, r5
 8004f7a:	4282      	cmp	r2, r0
 8004f7c:	fab5 f585 	clz	r5, r5
 8004f80:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8004f84:	d069      	beq.n	800505a <HAL_TIM_Base_Init+0x12e>
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	d167      	bne.n	800505a <HAL_TIM_Base_Init+0x12e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8a:	4d3e      	ldr	r5, [pc, #248]	; (8005084 <HAL_TIM_Base_Init+0x158>)
 8004f8c:	483e      	ldr	r0, [pc, #248]	; (8005088 <HAL_TIM_Base_Init+0x15c>)
 8004f8e:	4282      	cmp	r2, r0
 8004f90:	bf18      	it	ne
 8004f92:	42aa      	cmpne	r2, r5
 8004f94:	bf0c      	ite	eq
 8004f96:	2501      	moveq	r5, #1
 8004f98:	2500      	movne	r5, #0
 8004f9a:	d06a      	beq.n	8005072 <HAL_TIM_Base_Init+0x146>
 8004f9c:	4e3b      	ldr	r6, [pc, #236]	; (800508c <HAL_TIM_Base_Init+0x160>)
 8004f9e:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8004fa2:	4282      	cmp	r2, r0
 8004fa4:	bf18      	it	ne
 8004fa6:	42b2      	cmpne	r2, r6
 8004fa8:	d01a      	beq.n	8004fe0 <HAL_TIM_Base_Init+0xb4>
 8004faa:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004fae:	4282      	cmp	r2, r0
 8004fb0:	d05f      	beq.n	8005072 <HAL_TIM_Base_Init+0x146>
 8004fb2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004fb6:	4282      	cmp	r2, r0
 8004fb8:	d05b      	beq.n	8005072 <HAL_TIM_Base_Init+0x146>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fba:	69a1      	ldr	r1, [r4, #24]
 8004fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc0:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8004fc2:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc4:	68e3      	ldr	r3, [r4, #12]
 8004fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	6293      	str	r3, [r2, #40]	; 0x28
 8004fcc:	e017      	b.n	8004ffe <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fce:	4d30      	ldr	r5, [pc, #192]	; (8005090 <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd6:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fda:	fab5 f585 	clz	r5, r5
 8004fde:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	69a0      	ldr	r0, [r4, #24]
 8004fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fee:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004ff0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff2:	68e3      	ldr	r3, [r4, #12]
 8004ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ffa:	b9e1      	cbnz	r1, 8005036 <HAL_TIM_Base_Init+0x10a>
 8004ffc:	b9dd      	cbnz	r5, 8005036 <HAL_TIM_Base_Init+0x10a>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ffe:	2301      	movs	r3, #1
  return HAL_OK;
 8005000:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8005002:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005004:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800500c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005010:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005014:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800501c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005028:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800502c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005030:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005034:	bd70      	pop	{r4, r5, r6, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8005036:	6963      	ldr	r3, [r4, #20]
 8005038:	6313      	str	r3, [r2, #48]	; 0x30
 800503a:	e7e0      	b.n	8004ffe <HAL_TIM_Base_Init+0xd2>
    htim->Lock = HAL_UNLOCKED;
 800503c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005040:	f7fd fc7c 	bl	800293c <HAL_TIM_Base_MspInit>
 8005044:	e77d      	b.n	8004f42 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005046:	4d12      	ldr	r5, [pc, #72]	; (8005090 <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800504c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800504e:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8005050:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005052:	fab5 f585 	clz	r5, r5
 8005056:	096d      	lsrs	r5, r5, #5
 8005058:	e7c2      	b.n	8004fe0 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 800505a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005060:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005062:	480c      	ldr	r0, [pc, #48]	; (8005094 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005064:	4282      	cmp	r2, r0
 8005066:	d0bb      	beq.n	8004fe0 <HAL_TIM_Base_Init+0xb4>
 8005068:	2d00      	cmp	r5, #0
 800506a:	d1b9      	bne.n	8004fe0 <HAL_TIM_Base_Init+0xb4>
 800506c:	e78d      	b.n	8004f8a <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 800506e:	2001      	movs	r0, #1
}
 8005070:	4770      	bx	lr
 8005072:	2500      	movs	r5, #0
 8005074:	e7b4      	b.n	8004fe0 <HAL_TIM_Base_Init+0xb4>
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800
 8005090:	40010400 	.word	0x40010400
 8005094:	40000c00 	.word	0x40000c00

08005098 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800509c:	2b01      	cmp	r3, #1
 800509e:	d13d      	bne.n	800511c <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a0:	4b23      	ldr	r3, [pc, #140]	; (8005130 <HAL_TIM_Base_Start+0x98>)
 80050a2:	4924      	ldr	r1, [pc, #144]	; (8005134 <HAL_TIM_Base_Start+0x9c>)
{
 80050a4:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050aa:	4d23      	ldr	r5, [pc, #140]	; (8005138 <HAL_TIM_Base_Start+0xa0>)
 80050ac:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80050b0:	bf18      	it	ne
 80050b2:	429a      	cmpne	r2, r3
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	4c20      	ldr	r4, [pc, #128]	; (800513c <HAL_TIM_Base_Start+0xa4>)
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	481f      	ldr	r0, [pc, #124]	; (8005140 <HAL_TIM_Base_Start+0xa8>)
 80050c2:	42aa      	cmp	r2, r5
 80050c4:	bf08      	it	eq
 80050c6:	f043 0301 	orreq.w	r3, r3, #1
 80050ca:	428a      	cmp	r2, r1
 80050cc:	bf08      	it	eq
 80050ce:	f043 0301 	orreq.w	r3, r3, #1
 80050d2:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80050d6:	42a2      	cmp	r2, r4
 80050d8:	bf08      	it	eq
 80050da:	f043 0301 	orreq.w	r3, r3, #1
 80050de:	4282      	cmp	r2, r0
 80050e0:	bf08      	it	eq
 80050e2:	f043 0301 	orreq.w	r3, r3, #1
 80050e6:	428a      	cmp	r2, r1
 80050e8:	bf08      	it	eq
 80050ea:	f043 0301 	orreq.w	r3, r3, #1
 80050ee:	b933      	cbnz	r3, 80050fe <HAL_TIM_Base_Start+0x66>
 80050f0:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 80050f4:	1a10      	subs	r0, r2, r0
 80050f6:	fab0 f080 	clz	r0, r0
 80050fa:	0940      	lsrs	r0, r0, #5
 80050fc:	b198      	cbz	r0, 8005126 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fe:	6891      	ldr	r1, [r2, #8]
 8005100:	4b10      	ldr	r3, [pc, #64]	; (8005144 <HAL_TIM_Base_Start+0xac>)
 8005102:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005104:	2b06      	cmp	r3, #6
 8005106:	d00b      	beq.n	8005120 <HAL_TIM_Base_Start+0x88>
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d008      	beq.n	8005120 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800510e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8005110:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6013      	str	r3, [r2, #0]
}
 8005118:	bc30      	pop	{r4, r5}
 800511a:	4770      	bx	lr
    return HAL_ERROR;
 800511c:	2001      	movs	r0, #1
}
 800511e:	4770      	bx	lr
  return HAL_OK;
 8005120:	2000      	movs	r0, #0
}
 8005122:	bc30      	pop	{r4, r5}
 8005124:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8005126:	6813      	ldr	r3, [r2, #0]
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e7f3      	b.n	8005118 <HAL_TIM_Base_Start+0x80>
 8005130:	40010000 	.word	0x40010000
 8005134:	40000800 	.word	0x40000800
 8005138:	40000400 	.word	0x40000400
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	00010007 	.word	0x00010007

08005148 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005148:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800514c:	2a01      	cmp	r2, #1
 800514e:	d07b      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0x100>
 8005150:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005152:	2202      	movs	r2, #2
{
 8005154:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8005156:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8005158:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 800515e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005162:	4a56      	ldr	r2, [pc, #344]	; (80052bc <HAL_TIM_ConfigClockSource+0x174>)
  tmpsmcr = htim->Instance->SMCR;
 8005164:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005166:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8005168:	60a2      	str	r2, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800516a:	680a      	ldr	r2, [r1, #0]
 800516c:	2a60      	cmp	r2, #96	; 0x60
 800516e:	d06d      	beq.n	800524c <HAL_TIM_ConfigClockSource+0x104>
 8005170:	d827      	bhi.n	80051c2 <HAL_TIM_ConfigClockSource+0x7a>
 8005172:	2a40      	cmp	r2, #64	; 0x40
 8005174:	f000 8086 	beq.w	8005284 <HAL_TIM_ConfigClockSource+0x13c>
 8005178:	d951      	bls.n	800521e <HAL_TIM_ConfigClockSource+0xd6>
 800517a:	2a50      	cmp	r2, #80	; 0x50
 800517c:	d119      	bne.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005182:	684c      	ldr	r4, [r1, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005184:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	68ce      	ldr	r6, [r1, #12]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005188:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= TIM_ICPolarity;
 800518c:	432c      	orrs	r4, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518e:	6a15      	ldr	r5, [r2, #32]
 8005190:	f025 0501 	bic.w	r5, r5, #1
 8005194:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005196:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005198:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800519c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051a0:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80051a2:	6214      	str	r4, [r2, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051a4:	6819      	ldr	r1, [r3, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a6:	688a      	ldr	r2, [r1, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ac:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b0:	608a      	str	r2, [r1, #8]
  htim->State = HAL_TIM_STATE_READY;
 80051b2:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80051b4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051be:	bc70      	pop	{r4, r5, r6}
 80051c0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80051c2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80051c6:	d03d      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0xfc>
 80051c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80051cc:	d112      	bne.n	80051f4 <HAL_TIM_ConfigClockSource+0xac>
      TIM_ETR_SetConfig(htim->Instance,
 80051ce:	681c      	ldr	r4, [r3, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	68c8      	ldr	r0, [r1, #12]
 80051d2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80051d6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051da:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051de:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e4:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	60a2      	str	r2, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e8:	6819      	ldr	r1, [r3, #0]
 80051ea:	688a      	ldr	r2, [r1, #8]
 80051ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f0:	608a      	str	r2, [r1, #8]
      break;
 80051f2:	e7de      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80051f4:	2a70      	cmp	r2, #112	; 0x70
 80051f6:	d1dc      	bne.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
      TIM_ETR_SetConfig(htim->Instance,
 80051f8:	681c      	ldr	r4, [r3, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051fa:	68c8      	ldr	r0, [r1, #12]
 80051fc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005200:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005202:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005204:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005208:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800520c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800520e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8005210:	60a2      	str	r2, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	688a      	ldr	r2, [r1, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005216:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800521a:	608a      	str	r2, [r1, #8]
      break;
 800521c:	e7c9      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800521e:	2a20      	cmp	r2, #32
 8005220:	d002      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0xe0>
 8005222:	d90b      	bls.n	800523c <HAL_TIM_ConfigClockSource+0xf4>
 8005224:	2a30      	cmp	r2, #48	; 0x30
 8005226:	d1c4      	bne.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005228:	681c      	ldr	r4, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800522c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800522e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005232:	430a      	orrs	r2, r1
 8005234:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8005238:	60a2      	str	r2, [r4, #8]
}
 800523a:	e7ba      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800523c:	f032 0110 	bics.w	r1, r2, #16
 8005240:	d1b7      	bne.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
 8005242:	e7f1      	b.n	8005228 <HAL_TIM_ConfigClockSource+0xe0>
  HAL_StatusTypeDef status = HAL_OK;
 8005244:	2000      	movs	r0, #0
 8005246:	e7b4      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 8005248:	2002      	movs	r0, #2
}
 800524a:	4770      	bx	lr
      TIM_TI2_ConfigInputStage(htim->Instance,
 800524c:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005250:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005252:	6a15      	ldr	r5, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005254:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005256:	f025 0510 	bic.w	r5, r5, #16
 800525a:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525c:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005262:	ea44 3401 	orr.w	r4, r4, r1, lsl #12
  tmpccer = TIMx->CCER;
 8005266:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005268:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800526c:	6194      	str	r4, [r2, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 800526e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCER = tmpccer;
 8005272:	6211      	str	r1, [r2, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005274:	6819      	ldr	r1, [r3, #0]
  tmpsmcr = TIMx->SMCR;
 8005276:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005278:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800527c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005280:	608a      	str	r2, [r1, #8]
}
 8005282:	e796      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005284:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005286:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005288:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 800528a:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528c:	68ce      	ldr	r6, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528e:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= TIM_ICPolarity;
 8005292:	432c      	orrs	r4, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005294:	6a15      	ldr	r5, [r2, #32]
 8005296:	f025 0501 	bic.w	r5, r5, #1
 800529a:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800529e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a2:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80052a6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80052a8:	6214      	str	r4, [r2, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052aa:	6819      	ldr	r1, [r3, #0]
  tmpsmcr = TIMx->SMCR;
 80052ac:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80052b6:	608a      	str	r2, [r1, #8]
}
 80052b8:	e77b      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x6a>
 80052ba:	bf00      	nop
 80052bc:	fffe0088 	.word	0xfffe0088

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d053      	beq.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80052c8:	4602      	mov	r2, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ca:	2302      	movs	r3, #2
{
 80052cc:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052ce:	4d29      	ldr	r5, [pc, #164]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
  __HAL_LOCK(htim);
 80052d0:	2401      	movs	r4, #1
  tmpcr2 = htim->Instance->CR2;
 80052d2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80052d4:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052d8:	42a8      	cmp	r0, r5
  htim->State = HAL_TIM_STATE_BUSY;
 80052da:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80052de:	6843      	ldr	r3, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052e2:	d040      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052e8:	42a8      	cmp	r0, r5
 80052ea:	d03c      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052f2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f4:	4d20      	ldr	r5, [pc, #128]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
  htim->Instance->CR2 = tmpcr2;
 80052f6:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052fa:	6810      	ldr	r0, [r2, #0]
 80052fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005300:	bf18      	it	ne
 8005302:	4298      	cmpne	r0, r3
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	42a8      	cmp	r0, r5
 800530c:	bf08      	it	eq
 800530e:	f043 0301 	orreq.w	r3, r3, #1
 8005312:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005316:	42a8      	cmp	r0, r5
 8005318:	bf08      	it	eq
 800531a:	f043 0301 	orreq.w	r3, r3, #1
 800531e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005322:	42a8      	cmp	r0, r5
 8005324:	bf08      	it	eq
 8005326:	f043 0301 	orreq.w	r3, r3, #1
 800532a:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800532e:	42a8      	cmp	r0, r5
 8005330:	bf08      	it	eq
 8005332:	f043 0301 	orreq.w	r3, r3, #1
 8005336:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800533a:	42a8      	cmp	r0, r5
 800533c:	bf08      	it	eq
 800533e:	f043 0301 	orreq.w	r3, r3, #1
 8005342:	b913      	cbnz	r3, 800534a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005346:	4298      	cmp	r0, r3
 8005348:	d104      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800534a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005350:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005352:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005354:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005356:	2101      	movs	r1, #1

  return HAL_OK;
 8005358:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800535a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800535e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005362:	bc30      	pop	{r4, r5}
 8005364:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800536a:	684d      	ldr	r5, [r1, #4]
 800536c:	432b      	orrs	r3, r5
 800536e:	e7bd      	b.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8005370:	2002      	movs	r0, #2
}
 8005372:	4770      	bx	lr
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40001800 	.word	0x40001800

08005380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005384:	6902      	ldr	r2, [r0, #16]
 8005386:	6883      	ldr	r3, [r0, #8]
 8005388:	6965      	ldr	r5, [r4, #20]
 800538a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800538c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800538e:	69e2      	ldr	r2, [r4, #28]
 8005390:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005392:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005394:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005396:	4aa6      	ldr	r2, [pc, #664]	; (8005630 <UART_SetConfig+0x2b0>)
 8005398:	4002      	ands	r2, r0
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	68e1      	ldr	r1, [r4, #12]
 80053a2:	6853      	ldr	r3, [r2, #4]
 80053a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6053      	str	r3, [r2, #4]
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ac:	6821      	ldr	r1, [r4, #0]
  tmpreg |= huart->Init.OneBitSampling;
 80053ae:	6a20      	ldr	r0, [r4, #32]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b2:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80053b4:	4303      	orrs	r3, r0


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b6:	489f      	ldr	r0, [pc, #636]	; (8005634 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80053bc:	4313      	orrs	r3, r2
 80053be:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	4283      	cmp	r3, r0
 80053c4:	d040      	beq.n	8005448 <UART_SetConfig+0xc8>
 80053c6:	4a9c      	ldr	r2, [pc, #624]	; (8005638 <UART_SetConfig+0x2b8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d01b      	beq.n	8005404 <UART_SetConfig+0x84>
 80053cc:	4a9b      	ldr	r2, [pc, #620]	; (800563c <UART_SetConfig+0x2bc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f000 80d0 	beq.w	8005574 <UART_SetConfig+0x1f4>
 80053d4:	4a9a      	ldr	r2, [pc, #616]	; (8005640 <UART_SetConfig+0x2c0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f000 80dc 	beq.w	8005594 <UART_SetConfig+0x214>
 80053dc:	4a99      	ldr	r2, [pc, #612]	; (8005644 <UART_SetConfig+0x2c4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d062      	beq.n	80054a8 <UART_SetConfig+0x128>
 80053e2:	4a99      	ldr	r2, [pc, #612]	; (8005648 <UART_SetConfig+0x2c8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	f000 8096 	beq.w	8005516 <UART_SetConfig+0x196>
 80053ea:	4a98      	ldr	r2, [pc, #608]	; (800564c <UART_SetConfig+0x2cc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	f000 80f3 	beq.w	80055d8 <UART_SetConfig+0x258>
 80053f2:	4a97      	ldr	r2, [pc, #604]	; (8005650 <UART_SetConfig+0x2d0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	f000 8105 	beq.w	8005604 <UART_SetConfig+0x284>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053fa:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053fc:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80053fe:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8005402:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005404:	4b93      	ldr	r3, [pc, #588]	; (8005654 <UART_SetConfig+0x2d4>)
 8005406:	4a94      	ldr	r2, [pc, #592]	; (8005658 <UART_SetConfig+0x2d8>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005412:	69e2      	ldr	r2, [r4, #28]
 8005414:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005418:	d02e      	beq.n	8005478 <UART_SetConfig+0xf8>
    switch (clocksource)
 800541a:	2b08      	cmp	r3, #8
 800541c:	d8ed      	bhi.n	80053fa <UART_SetConfig+0x7a>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0xa4>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	080054d9 	.word	0x080054d9
 8005428:	08005461 	.word	0x08005461
 800542c:	0800552f 	.word	0x0800552f
 8005430:	080053fb 	.word	0x080053fb
 8005434:	080054cb 	.word	0x080054cb
 8005438:	080053fb 	.word	0x080053fb
 800543c:	080053fb 	.word	0x080053fb
 8005440:	080053fb 	.word	0x080053fb
 8005444:	080054ed 	.word	0x080054ed
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005448:	4b82      	ldr	r3, [pc, #520]	; (8005654 <UART_SetConfig+0x2d4>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3b01      	subs	r3, #1
 8005454:	2b02      	cmp	r3, #2
 8005456:	d90c      	bls.n	8005472 <UART_SetConfig+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005458:	69e3      	ldr	r3, [r4, #28]
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	d068      	beq.n	8005532 <UART_SetConfig+0x1b2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005460:	f7ff faf0 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005464:	2800      	cmp	r0, #0
 8005466:	d143      	bne.n	80054f0 <UART_SetConfig+0x170>
  huart->RxISR = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 800546c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	4a7a      	ldr	r2, [pc, #488]	; (800565c <UART_SetConfig+0x2dc>)
 8005474:	5cd3      	ldrb	r3, [r2, r3]
 8005476:	e7cc      	b.n	8005412 <UART_SetConfig+0x92>
    switch (clocksource)
 8005478:	2b08      	cmp	r3, #8
 800547a:	d8be      	bhi.n	80053fa <UART_SetConfig+0x7a>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x104>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	0800556f 	.word	0x0800556f
 8005488:	08005533 	.word	0x08005533
 800548c:	080055cf 	.word	0x080055cf
 8005490:	080053fb 	.word	0x080053fb
 8005494:	08005569 	.word	0x08005569
 8005498:	080053fb 	.word	0x080053fb
 800549c:	080053fb 	.word	0x080053fb
 80054a0:	080053fb 	.word	0x080053fb
 80054a4:	080055d3 	.word	0x080055d3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054a8:	4b6a      	ldr	r3, [pc, #424]	; (8005654 <UART_SetConfig+0x2d4>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b6:	d036      	beq.n	8005526 <UART_SetConfig+0x1a6>
 80054b8:	d811      	bhi.n	80054de <UART_SetConfig+0x15e>
 80054ba:	b14b      	cbz	r3, 80054d0 <UART_SetConfig+0x150>
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d19b      	bne.n	80053fa <UART_SetConfig+0x7a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c2:	69e3      	ldr	r3, [r4, #28]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c8:	d04e      	beq.n	8005568 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7ff fa77 	bl	80049bc <HAL_RCC_GetSysClockFreq>
        break;
 80054ce:	e7c9      	b.n	8005464 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d0:	69e3      	ldr	r3, [r4, #28]
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d6:	d04a      	beq.n	800556e <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7ff faa4 	bl	8004a24 <HAL_RCC_GetPCLK1Freq>
        break;
 80054dc:	e7c2      	b.n	8005464 <UART_SetConfig+0xe4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e2:	d18a      	bne.n	80053fa <UART_SetConfig+0x7a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e4:	69e3      	ldr	r3, [r4, #28]
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d072      	beq.n	80055d2 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 80054ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054f0:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054f6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fe:	f1a3 0110 	sub.w	r1, r3, #16
 8005502:	4291      	cmp	r1, r2
 8005504:	f63f af79 	bhi.w	80053fa <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	2000      	movs	r0, #0
 800550c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800550e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005510:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8005514:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005516:	4b4f      	ldr	r3, [pc, #316]	; (8005654 <UART_SetConfig+0x2d4>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005524:	d146      	bne.n	80055b4 <UART_SetConfig+0x234>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005526:	69e3      	ldr	r3, [r4, #28]
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552c:	d04f      	beq.n	80055ce <UART_SetConfig+0x24e>
    switch (clocksource)
 800552e:	484c      	ldr	r0, [pc, #304]	; (8005660 <UART_SetConfig+0x2e0>)
 8005530:	e7de      	b.n	80054f0 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005532:	f7ff fa87 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005536:	2800      	cmp	r0, #0
 8005538:	d096      	beq.n	8005468 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800553a:	0043      	lsls	r3, r0, #1
 800553c:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800553e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005542:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005546:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554a:	f1a3 0210 	sub.w	r2, r3, #16
 800554e:	428a      	cmp	r2, r1
 8005550:	f63f af53 	bhi.w	80053fa <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005554:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005558:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800555c:	6821      	ldr	r1, [r4, #0]
 800555e:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005560:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005562:	4313      	orrs	r3, r2
 8005564:	60cb      	str	r3, [r1, #12]
 8005566:	e749      	b.n	80053fc <UART_SetConfig+0x7c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005568:	f7ff fa28 	bl	80049bc <HAL_RCC_GetSysClockFreq>
        break;
 800556c:	e7e3      	b.n	8005536 <UART_SetConfig+0x1b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800556e:	f7ff fa59 	bl	8004a24 <HAL_RCC_GetPCLK1Freq>
        break;
 8005572:	e7e0      	b.n	8005536 <UART_SetConfig+0x1b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005574:	4b37      	ldr	r3, [pc, #220]	; (8005654 <UART_SetConfig+0x2d4>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800557e:	2b20      	cmp	r3, #32
 8005580:	d0d1      	beq.n	8005526 <UART_SetConfig+0x1a6>
 8005582:	d804      	bhi.n	800558e <UART_SetConfig+0x20e>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0a3      	beq.n	80054d0 <UART_SetConfig+0x150>
 8005588:	2b10      	cmp	r3, #16
 800558a:	d09a      	beq.n	80054c2 <UART_SetConfig+0x142>
 800558c:	e735      	b.n	80053fa <UART_SetConfig+0x7a>
 800558e:	2b30      	cmp	r3, #48	; 0x30
 8005590:	d0a8      	beq.n	80054e4 <UART_SetConfig+0x164>
 8005592:	e732      	b.n	80053fa <UART_SetConfig+0x7a>
 8005594:	4b2f      	ldr	r3, [pc, #188]	; (8005654 <UART_SetConfig+0x2d4>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d0c1      	beq.n	8005526 <UART_SetConfig+0x1a6>
 80055a2:	d804      	bhi.n	80055ae <UART_SetConfig+0x22e>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d093      	beq.n	80054d0 <UART_SetConfig+0x150>
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d08a      	beq.n	80054c2 <UART_SetConfig+0x142>
 80055ac:	e725      	b.n	80053fa <UART_SetConfig+0x7a>
 80055ae:	2bc0      	cmp	r3, #192	; 0xc0
 80055b0:	d098      	beq.n	80054e4 <UART_SetConfig+0x164>
 80055b2:	e722      	b.n	80053fa <UART_SetConfig+0x7a>
 80055b4:	d807      	bhi.n	80055c6 <UART_SetConfig+0x246>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f43f af4e 	beq.w	8005458 <UART_SetConfig+0xd8>
 80055bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c0:	f43f af7f 	beq.w	80054c2 <UART_SetConfig+0x142>
 80055c4:	e719      	b.n	80053fa <UART_SetConfig+0x7a>
 80055c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ca:	d08b      	beq.n	80054e4 <UART_SetConfig+0x164>
 80055cc:	e715      	b.n	80053fa <UART_SetConfig+0x7a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ce:	4b25      	ldr	r3, [pc, #148]	; (8005664 <UART_SetConfig+0x2e4>)
 80055d0:	e7b4      	b.n	800553c <UART_SetConfig+0x1bc>
    switch (clocksource)
 80055d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d6:	e7b1      	b.n	800553c <UART_SetConfig+0x1bc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d8:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <UART_SetConfig+0x2d4>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e6:	d09e      	beq.n	8005526 <UART_SetConfig+0x1a6>
 80055e8:	d807      	bhi.n	80055fa <UART_SetConfig+0x27a>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f43f af70 	beq.w	80054d0 <UART_SetConfig+0x150>
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	f43f af65 	beq.w	80054c2 <UART_SetConfig+0x142>
 80055f8:	e6ff      	b.n	80053fa <UART_SetConfig+0x7a>
 80055fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055fe:	f43f af71 	beq.w	80054e4 <UART_SetConfig+0x164>
 8005602:	e6fa      	b.n	80053fa <UART_SetConfig+0x7a>
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <UART_SetConfig+0x2d4>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d088      	beq.n	8005526 <UART_SetConfig+0x1a6>
 8005614:	d807      	bhi.n	8005626 <UART_SetConfig+0x2a6>
 8005616:	2b00      	cmp	r3, #0
 8005618:	f43f af5a 	beq.w	80054d0 <UART_SetConfig+0x150>
 800561c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005620:	f43f af4f 	beq.w	80054c2 <UART_SetConfig+0x142>
 8005624:	e6e9      	b.n	80053fa <UART_SetConfig+0x7a>
 8005626:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800562a:	f43f af5b 	beq.w	80054e4 <UART_SetConfig+0x164>
 800562e:	e6e4      	b.n	80053fa <UART_SetConfig+0x7a>
 8005630:	efff69f3 	.word	0xefff69f3
 8005634:	40011000 	.word	0x40011000
 8005638:	40004400 	.word	0x40004400
 800563c:	40004800 	.word	0x40004800
 8005640:	40004c00 	.word	0x40004c00
 8005644:	40005000 	.word	0x40005000
 8005648:	40011400 	.word	0x40011400
 800564c:	40007800 	.word	0x40007800
 8005650:	40007c00 	.word	0x40007c00
 8005654:	40023800 	.word	0x40023800
 8005658:	0800bb44 	.word	0x0800bb44
 800565c:	0800bb40 	.word	0x0800bb40
 8005660:	00f42400 	.word	0x00f42400
 8005664:	01e84800 	.word	0x01e84800

08005668 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005668:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800566a:	07da      	lsls	r2, r3, #31
 800566c:	d507      	bpl.n	800567e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800566e:	6802      	ldr	r2, [r0, #0]
 8005670:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005672:	6853      	ldr	r3, [r2, #4]
 8005674:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005678:	430b      	orrs	r3, r1
 800567a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800567c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800567e:	0799      	lsls	r1, r3, #30
 8005680:	d507      	bpl.n	8005692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005682:	6802      	ldr	r2, [r0, #0]
 8005684:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005686:	6853      	ldr	r3, [r2, #4]
 8005688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568c:	430b      	orrs	r3, r1
 800568e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005690:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005692:	075a      	lsls	r2, r3, #29
 8005694:	d507      	bpl.n	80056a6 <UART_AdvFeatureConfig+0x3e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005696:	6802      	ldr	r2, [r0, #0]
 8005698:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800569a:	6853      	ldr	r3, [r2, #4]
 800569c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056a6:	0719      	lsls	r1, r3, #28
 80056a8:	d507      	bpl.n	80056ba <UART_AdvFeatureConfig+0x52>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056aa:	6802      	ldr	r2, [r0, #0]
 80056ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80056ae:	6853      	ldr	r3, [r2, #4]
 80056b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056ba:	06da      	lsls	r2, r3, #27
 80056bc:	d507      	bpl.n	80056ce <UART_AdvFeatureConfig+0x66>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056be:	6802      	ldr	r2, [r0, #0]
 80056c0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80056c2:	6893      	ldr	r3, [r2, #8]
 80056c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056ce:	0699      	lsls	r1, r3, #26
 80056d0:	d507      	bpl.n	80056e2 <UART_AdvFeatureConfig+0x7a>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d2:	6802      	ldr	r2, [r0, #0]
 80056d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80056d6:	6893      	ldr	r3, [r2, #8]
 80056d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056dc:	430b      	orrs	r3, r1
 80056de:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056e2:	065a      	lsls	r2, r3, #25
 80056e4:	d50b      	bpl.n	80056fe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e6:	6802      	ldr	r2, [r0, #0]
 80056e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80056ea:	6853      	ldr	r3, [r2, #4]
 80056ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0xaa>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056fe:	061b      	lsls	r3, r3, #24
 8005700:	d506      	bpl.n	8005710 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005702:	6802      	ldr	r2, [r0, #0]
 8005704:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005706:	6853      	ldr	r3, [r2, #4]
 8005708:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800570c:	430b      	orrs	r3, r1
 800570e:	6053      	str	r3, [r2, #4]
  }
}
 8005710:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005712:	6802      	ldr	r2, [r0, #0]
 8005714:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005716:	6853      	ldr	r3, [r2, #4]
 8005718:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800571c:	430b      	orrs	r3, r1
 800571e:	6053      	str	r3, [r2, #4]
 8005720:	e7ec      	b.n	80056fc <UART_AdvFeatureConfig+0x94>
 8005722:	bf00      	nop

08005724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800572c:	4607      	mov	r7, r0
 800572e:	460e      	mov	r6, r1
 8005730:	4615      	mov	r5, r2
 8005732:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005734:	6804      	ldr	r4, [r0, #0]
 8005736:	f1b8 3fff 	cmp.w	r8, #4294967295
 800573a:	d10a      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0x2e>
 800573c:	69e3      	ldr	r3, [r4, #28]
 800573e:	ea36 0303 	bics.w	r3, r6, r3
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	42ab      	cmp	r3, r5
 800574a:	d0f7      	beq.n	800573c <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800574c:	2000      	movs	r0, #0
}
 800574e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	69e3      	ldr	r3, [r4, #28]
 8005754:	ea36 0303 	bics.w	r3, r6, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	42ab      	cmp	r3, r5
 8005760:	d1f4      	bne.n	800574c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fd faeb 	bl	8002d3c <HAL_GetTick>
 8005766:	eba0 0009 	sub.w	r0, r0, r9
 800576a:	4540      	cmp	r0, r8
 800576c:	d82b      	bhi.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xa2>
 800576e:	f1b8 0f00 	cmp.w	r8, #0
 8005772:	d028      	beq.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005774:	683c      	ldr	r4, [r7, #0]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	075a      	lsls	r2, r3, #29
 800577a:	d5dc      	bpl.n	8005736 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800577c:	69e3      	ldr	r3, [r4, #28]
 800577e:	051b      	lsls	r3, r3, #20
 8005780:	d5d9      	bpl.n	8005736 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005786:	6223      	str	r3, [r4, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005788:	683a      	ldr	r2, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	e852 3f00 	ldrex	r3, [r2]
 800578e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	e842 3100 	strex	r1, r3, [r2]
 8005796:	2900      	cmp	r1, #0
 8005798:	d1f6      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x64>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	f102 0308 	add.w	r3, r2, #8
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	3208      	adds	r2, #8
 80057aa:	e842 3100 	strex	r1, r3, [r2]
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d1f3      	bne.n	800579a <UART_WaitOnFlagUntilTimeout+0x76>
          huart->gState = HAL_UART_STATE_READY;
 80057b2:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80057b4:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80057b6:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 80057ba:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80057bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          return HAL_TIMEOUT;
 80057c4:	e7c3      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0x2a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057c6:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	e852 3f00 	ldrex	r3, [r2]
 80057cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	e842 3100 	strex	r1, r3, [r2]
 80057d4:	2900      	cmp	r1, #0
 80057d6:	d1f6      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xa2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	f102 0308 	add.w	r3, r2, #8
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	3208      	adds	r2, #8
 80057e8:	e842 3100 	strex	r1, r3, [r2]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d1f3      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 80057f0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80057f2:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 80057f4:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 80057f8:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80057fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        return HAL_TIMEOUT;
 80057fe:	e7a6      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0x2a>

08005800 <HAL_UART_Init>:
  if (huart == NULL)
 8005800:	2800      	cmp	r0, #0
 8005802:	d052      	beq.n	80058aa <HAL_UART_Init+0xaa>
{
 8005804:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005806:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8005808:	b082      	sub	sp, #8
 800580a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800580c:	2b00      	cmp	r3, #0
 800580e:	d047      	beq.n	80058a0 <HAL_UART_Init+0xa0>
  __HAL_UART_DISABLE(huart);
 8005810:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005812:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005814:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005816:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005818:	6813      	ldr	r3, [r2, #0]
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005820:	f7ff fdae 	bl	8005380 <UART_SetConfig>
 8005824:	2801      	cmp	r0, #1
 8005826:	d038      	beq.n	800589a <HAL_UART_Init+0x9a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d131      	bne.n	8005892 <HAL_UART_Init+0x92>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	6822      	ldr	r2, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005832:	6853      	ldr	r3, [r2, #4]
 8005834:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005838:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583a:	6821      	ldr	r1, [r4, #0]
 800583c:	688b      	ldr	r3, [r1, #8]
 800583e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005842:	608b      	str	r3, [r1, #8]
  __HAL_UART_ENABLE(huart);
 8005844:	6821      	ldr	r1, [r4, #0]
 8005846:	680b      	ldr	r3, [r1, #0]
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	600b      	str	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tickstart = HAL_GetTick();
 8005852:	f7fd fa73 	bl	8002d3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	071b      	lsls	r3, r3, #28
 800585c:	d40b      	bmi.n	8005876 <HAL_UART_Init+0x76>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005860:	2220      	movs	r2, #32
  return HAL_OK;
 8005862:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005864:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8005866:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005870:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005872:	b002      	add	sp, #8
 8005874:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005876:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800587a:	4603      	mov	r3, r0
 800587c:	462a      	mov	r2, r5
 800587e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005882:	4620      	mov	r0, r4
 8005884:	9600      	str	r6, [sp, #0]
 8005886:	f7ff ff4d 	bl	8005724 <UART_WaitOnFlagUntilTimeout>
 800588a:	2800      	cmp	r0, #0
 800588c:	d0e7      	beq.n	800585e <HAL_UART_Init+0x5e>
      return HAL_TIMEOUT;
 800588e:	2003      	movs	r0, #3
 8005890:	e7ef      	b.n	8005872 <HAL_UART_Init+0x72>
    UART_AdvFeatureConfig(huart);
 8005892:	4620      	mov	r0, r4
 8005894:	f7ff fee8 	bl	8005668 <UART_AdvFeatureConfig>
 8005898:	e7c9      	b.n	800582e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800589a:	2001      	movs	r0, #1
}
 800589c:	b002      	add	sp, #8
 800589e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80058a0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80058a4:	f7fd f8bc 	bl	8002a20 <HAL_UART_MspInit>
 80058a8:	e7b2      	b.n	8005810 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80058aa:	2001      	movs	r0, #1
}
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop

080058b0 <CAN_RX_Filter_Motor>:
{
	CAN_RX_Filter(hcan, filterIndex, RWS_PANEL_ID, 0x7F0);
}

void CAN_RX_Filter_Motor(CAN_HandleTypeDef *hcan, const uint32_t filterIndex)
{
 80058b0:	b510      	push	{r4, lr}
	sFilterConfig.FilterIdLow = (filterId >> (11 - 3)) & 0xFFF8;  // EXID[12:5] & 3 Reserved bits
 80058b2:	2300      	movs	r3, #0
{
 80058b4:	b08a      	sub	sp, #40	; 0x28
	sFilterConfig.FilterIdHigh = ((filterId << 5) | (filterId >> (32 - 5))) & 0xFFFF;  // STID[10:0] & EXTID[17:13]
 80058b6:	f44f 5410 	mov.w	r4, #9216	; 0x2400
	sFilterConfig.FilterMaskIdHigh = ((filterMask << 5) | (filterMask >> (32 - 5))) & 0xFFFF;
 80058ba:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
	sFilterConfig.FilterIdLow = (filterId >> (11 - 3)) & 0xFFF8;  // EXID[12:5] & 3 Reserved bits
 80058be:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdLow = (filterMask >> (11 - 3)) & 0xFFF8;
 80058c0:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterIdHigh = ((filterId << 5) | (filterId >> (32 - 5))) & 0xFFFF;  // STID[10:0] & EXTID[17:13]
 80058c2:	9400      	str	r4, [sp, #0]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80058c4:	2401      	movs	r4, #1
	sFilterConfig.FilterMaskIdHigh = ((filterMask << 5) | (filterMask >> (32 - 5))) & 0xFFFF;
 80058c6:	9202      	str	r2, [sp, #8]
	sFilterConfig.FilterActivation = ENABLE;
 80058c8:	2201      	movs	r2, #1
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80058ca:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80058cc:	9407      	str	r4, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80058ce:	e9cd 1305 	strd	r1, r3, [sp, #20]
	sFilterConfig.FilterActivation = ENABLE;
 80058d2:	230e      	movs	r3, #14
	ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80058d4:	4669      	mov	r1, sp
	sFilterConfig.FilterActivation = ENABLE;
 80058d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80058da:	f7fd fe23 	bl	8003524 <HAL_CAN_ConfigFilter>
	if (ret != HAL_OK) {
 80058de:	b908      	cbnz	r0, 80058e4 <CAN_RX_Filter_Motor+0x34>
	CAN_RX_Filter(hcan, filterIndex, RWS_MOTOR_ID, 0x7F0);
}
 80058e0:	b00a      	add	sp, #40	; 0x28
 80058e2:	bd10      	pop	{r4, pc}
		Error_Handler();
 80058e4:	f7fc ff46 	bl	8002774 <Error_Handler>
}
 80058e8:	b00a      	add	sp, #40	; 0x28
 80058ea:	bd10      	pop	{r4, pc}

080058ec <CAN_RX_Filter_Optronik>:

void CAN_RX_Filter_Optronik(CAN_HandleTypeDef *hcan, const uint32_t filterIndex)
{
 80058ec:	b510      	push	{r4, lr}
	sFilterConfig.FilterIdLow = (filterId >> (11 - 3)) & 0xFFF8;  // EXID[12:5] & 3 Reserved bits
 80058ee:	2300      	movs	r3, #0
{
 80058f0:	b08a      	sub	sp, #40	; 0x28
	sFilterConfig.FilterIdHigh = ((filterId << 5) | (filterId >> (32 - 5))) & 0xFFFF;  // STID[10:0] & EXTID[17:13]
 80058f2:	f44f 5418 	mov.w	r4, #9728	; 0x2600
	sFilterConfig.FilterMaskIdHigh = ((filterMask << 5) | (filterMask >> (32 - 5))) & 0xFFFF;
 80058f6:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
	sFilterConfig.FilterIdLow = (filterId >> (11 - 3)) & 0xFFF8;  // EXID[12:5] & 3 Reserved bits
 80058fa:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdLow = (filterMask >> (11 - 3)) & 0xFFF8;
 80058fc:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterIdHigh = ((filterId << 5) | (filterId >> (32 - 5))) & 0xFFFF;  // STID[10:0] & EXTID[17:13]
 80058fe:	9400      	str	r4, [sp, #0]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005900:	2401      	movs	r4, #1
	sFilterConfig.FilterMaskIdHigh = ((filterMask << 5) | (filterMask >> (32 - 5))) & 0xFFFF;
 8005902:	9202      	str	r2, [sp, #8]
	sFilterConfig.FilterActivation = ENABLE;
 8005904:	2201      	movs	r2, #1
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005906:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005908:	9407      	str	r4, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800590a:	e9cd 1305 	strd	r1, r3, [sp, #20]
	sFilterConfig.FilterActivation = ENABLE;
 800590e:	230e      	movs	r3, #14
	ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8005910:	4669      	mov	r1, sp
	sFilterConfig.FilterActivation = ENABLE;
 8005912:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8005916:	f7fd fe05 	bl	8003524 <HAL_CAN_ConfigFilter>
	if (ret != HAL_OK) {
 800591a:	b908      	cbnz	r0, 8005920 <CAN_RX_Filter_Optronik+0x34>
	CAN_RX_Filter(hcan, filterIndex, RWS_OPTRONIK_ID, 0x7F0);
}
 800591c:	b00a      	add	sp, #40	; 0x28
 800591e:	bd10      	pop	{r4, pc}
		Error_Handler();
 8005920:	f7fc ff28 	bl	8002774 <Error_Handler>
}
 8005924:	b00a      	add	sp, #40	; 0x28
 8005926:	bd10      	pop	{r4, pc}

08005928 <CAN_Config>:

void CAN_Config(CAN_HandleTypeDef *hcan)
{
 8005928:	b510      	push	{r4, lr}
 800592a:	4604      	mov	r4, r0
	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 800592c:	f7fd fe76 	bl	800361c <HAL_CAN_Start>
 8005930:	b928      	cbnz	r0, 800593e <CAN_Config+0x16>
		/* Start Error */
		Error_Handler();
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8005932:	2102      	movs	r1, #2
 8005934:	4620      	mov	r0, r4
 8005936:	f7fd ffc7 	bl	80038c8 <HAL_CAN_ActivateNotification>
 800593a:	b940      	cbnz	r0, 800594e <CAN_Config+0x26>
		/* Notification Error */
		Error_Handler();
	}
}
 800593c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800593e:	f7fc ff19 	bl	8002774 <Error_Handler>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8005942:	2102      	movs	r1, #2
 8005944:	4620      	mov	r0, r4
 8005946:	f7fd ffbf 	bl	80038c8 <HAL_CAN_ActivateNotification>
 800594a:	2800      	cmp	r0, #0
 800594c:	d0f6      	beq.n	800593c <CAN_Config+0x14>
}
 800594e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 8005952:	f7fc bf0f 	b.w	8002774 <Error_Handler>
 8005956:	bf00      	nop

08005958 <CAN_Tx_Config>:
void CAN_Tx_Config(CAN_TxHeaderTypeDef *txHeader)
{
	/*##-5- Configure Transmission process #####################################*/
	txHeader->StdId = 0x111;
	txHeader->ExtId = 0x01;
	txHeader->RTR = CAN_RTR_DATA;
 8005958:	2300      	movs	r3, #0
	txHeader->ExtId = 0x01;
 800595a:	2101      	movs	r1, #1
	txHeader->IDE = CAN_ID_STD;
	txHeader->DLC = 8;
 800595c:	2208      	movs	r2, #8
	txHeader->TransmitGlobalTime = DISABLE;
 800595e:	7503      	strb	r3, [r0, #20]
	txHeader->DLC = 8;
 8005960:	6102      	str	r2, [r0, #16]
{
 8005962:	b410      	push	{r4}
	txHeader->StdId = 0x111;
 8005964:	f240 1411 	movw	r4, #273	; 0x111
	txHeader->IDE = CAN_ID_STD;
 8005968:	e9c0 3302 	strd	r3, r3, [r0, #8]
	txHeader->ExtId = 0x01;
 800596c:	e9c0 4100 	strd	r4, r1, [r0]
}
 8005970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <retarget_init>:
//#define LOG_E(str, ...) printf("[%s Err:%d] " str,  __FILE_NAME__,__LINE__, ##__VA_ARGS__)

TSerial *terminal;

void retarget_init(TSerial *serial)
{
 8005978:	b538      	push	{r3, r4, r5, lr}
	setbuf(stdin, NULL);
 800597a:	4d0a      	ldr	r5, [pc, #40]	; (80059a4 <retarget_init+0x2c>)
 800597c:	2100      	movs	r1, #0
{
 800597e:	4604      	mov	r4, r0
	setbuf(stdin, NULL);
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	6858      	ldr	r0, [r3, #4]
 8005984:	f001 fa6a 	bl	8006e5c <setbuf>
	setbuf(stdout, NULL);
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	2100      	movs	r1, #0
 800598c:	6898      	ldr	r0, [r3, #8]
 800598e:	f001 fa65 	bl	8006e5c <setbuf>
	setbuf(stderr, NULL);
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	2100      	movs	r1, #0
 8005996:	68d8      	ldr	r0, [r3, #12]
 8005998:	f001 fa60 	bl	8006e5c <setbuf>

	terminal = serial;
 800599c:	4b02      	ldr	r3, [pc, #8]	; (80059a8 <retarget_init+0x30>)
 800599e:	601c      	str	r4, [r3, #0]
}
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
 80059a2:	bf00      	nop
 80059a4:	20000014 	.word	0x20000014
 80059a8:	20000bc4 	.word	0x20000bc4

080059ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int c, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80059ac:	b508      	push	{r3, lr}
	serial_write(terminal, c);
 80059ae:	4b03      	ldr	r3, [pc, #12]	; (80059bc <__io_putchar+0x10>)
 80059b0:	b2c1      	uxtb	r1, r0
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	f000 f8f8 	bl	8005ba8 <serial_write>

	return 1;
}
 80059b8:	2001      	movs	r0, #1
 80059ba:	bd08      	pop	{r3, pc}
 80059bc:	20000bc4 	.word	0x20000bc4

080059c0 <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

GETCHAR_PROTOTYPE
{
 80059c0:	b510      	push	{r4, lr}
 80059c2:	4c07      	ldr	r4, [pc, #28]	; (80059e0 <__io_getchar+0x20>)
 80059c4:	e001      	b.n	80059ca <__io_getchar+0xa>
		HAL_Delay(10);
 80059c6:	f7fd f9bf 	bl	8002d48 <HAL_Delay>
	while (serial_available(terminal) == 0)
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	f000 f8d8 	bl	8005b80 <serial_available>
 80059d0:	4603      	mov	r3, r0
		HAL_Delay(10);
 80059d2:	200a      	movs	r0, #10
	while (serial_available(terminal) == 0)
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f6      	beq.n	80059c6 <__io_getchar+0x6>
	return serial_read(terminal);
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	f000 f8d3 	bl	8005b84 <serial_read>
	return retarget_recv();
}
 80059de:	bd10      	pop	{r4, pc}
 80059e0:	20000bc4 	.word	0x20000bc4

080059e4 <ring_buffer_init>:
}

/* initialize buffer */
void ring_buffer_init(Ring_Buffer_t *buffer, uint8_t *storage, const uint16_t size)
{
	buffer->Lock = HAL_UNLOCKED;
 80059e4:	2300      	movs	r3, #0
	buffer->storage = storage;
 80059e6:	6001      	str	r1, [r0, #0]
	buffer->size = size;
 80059e8:	8082      	strh	r2, [r0, #4]
}

/* flush buffer */
void ring_buffer_flush(Ring_Buffer_t *buffer)
{
	buffer->head = buffer->tail = 0;
 80059ea:	8143      	strh	r3, [r0, #10]
	buffer->Lock = HAL_UNLOCKED;
 80059ec:	7183      	strb	r3, [r0, #6]
	buffer->head = buffer->tail = 0;
 80059ee:	8103      	strh	r3, [r0, #8]
}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop

080059f4 <ring_buffer_available>:
	uint16_t _head = buffer->head;
 80059f4:	8903      	ldrh	r3, [r0, #8]
	uint16_t _tail = buffer->tail;
 80059f6:	8942      	ldrh	r2, [r0, #10]
	uint16_t _head = buffer->head;
 80059f8:	b29b      	uxth	r3, r3
	uint16_t _tail = buffer->tail;
 80059fa:	b292      	uxth	r2, r2
	if (_head > _tail)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d902      	bls.n	8005a06 <ring_buffer_available+0x12>
		ret = _head - _tail;
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	b298      	uxth	r0, r3
 8005a04:	4770      	bx	lr
	else if (_head < _tail)
 8005a06:	d204      	bcs.n	8005a12 <ring_buffer_available+0x1e>
		ret = _head + (buffer->size - _tail);
 8005a08:	8880      	ldrh	r0, [r0, #4]
 8005a0a:	4418      	add	r0, r3
 8005a0c:	1a80      	subs	r0, r0, r2
 8005a0e:	b280      	uxth	r0, r0
 8005a10:	4770      	bx	lr
	uint16_t ret = 0;
 8005a12:	2000      	movs	r0, #0
}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop

08005a18 <ring_buffer_read>:
	return HAL_ERROR;
}

/* read bytes & free space */
HAL_StatusTypeDef ring_buffer_read(Ring_Buffer_t *buffer, uint8_t *str, const uint16_t size)
{
 8005a18:	b500      	push	{lr}
	uint16_t _head = buffer->head;
 8005a1a:	8903      	ldrh	r3, [r0, #8]
	uint16_t _tail = buffer->tail;
 8005a1c:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
	uint16_t _head = buffer->head;
 8005a20:	b29b      	uxth	r3, r3
	uint16_t _tail = buffer->tail;
 8005a22:	fa1f fc8c 	uxth.w	ip, ip
	if (_head > _tail)
 8005a26:	4563      	cmp	r3, ip
 8005a28:	d91e      	bls.n	8005a68 <ring_buffer_read+0x50>
		ret = _head - _tail;
 8005a2a:	eba3 030c 	sub.w	r3, r3, ip
	return (a <= b) ? a : b;
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	429a      	cmp	r2, r3
 8005a32:	bf28      	it	cs
 8005a34:	461a      	movcs	r2, r3
	uint16_t _bufAvailable = ring_buffer_available(buffer);
	uint16_t minSize = min(_bufAvailable, size);

	if (_bufAvailable > 0) {
		for ( int i = 0; i < minSize; i++ ) {
 8005a36:	b1a2      	cbz	r2, 8005a62 <ring_buffer_read+0x4a>
 8005a38:	eb01 0c02 	add.w	ip, r1, r2
			*(str + i) = buffer->storage[buffer->tail];
 8005a3c:	8942      	ldrh	r2, [r0, #10]
 8005a3e:	6803      	ldr	r3, [r0, #0]
 8005a40:	b292      	uxth	r2, r2
 8005a42:	5c9b      	ldrb	r3, [r3, r2]
 8005a44:	f801 3b01 	strb.w	r3, [r1], #1
		for ( int i = 0; i < minSize; i++ ) {
 8005a48:	4561      	cmp	r1, ip
			buffer->tail = (buffer->tail + 1) % buffer->size;
 8005a4a:	8943      	ldrh	r3, [r0, #10]
 8005a4c:	8882      	ldrh	r2, [r0, #4]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f103 0301 	add.w	r3, r3, #1
 8005a54:	fbb3 fef2 	udiv	lr, r3, r2
 8005a58:	fb02 331e 	mls	r3, r2, lr, r3
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8143      	strh	r3, [r0, #10]
		for ( int i = 0; i < minSize; i++ ) {
 8005a60:	d1ec      	bne.n	8005a3c <ring_buffer_read+0x24>
		}

		return HAL_OK;
 8005a62:	2000      	movs	r0, #0
	}

	return HAL_ERROR;
}
 8005a64:	f85d fb04 	ldr.w	pc, [sp], #4
	else if (_head < _tail)
 8005a68:	d206      	bcs.n	8005a78 <ring_buffer_read+0x60>
		ret = _head + (buffer->size - _tail);
 8005a6a:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 8005a6e:	4473      	add	r3, lr
 8005a70:	eba3 030c 	sub.w	r3, r3, ip
 8005a74:	b29b      	uxth	r3, r3
	if (_bufAvailable > 0) {
 8005a76:	b913      	cbnz	r3, 8005a7e <ring_buffer_read+0x66>
	return HAL_ERROR;
 8005a78:	2001      	movs	r0, #1
}
 8005a7a:	f85d fb04 	ldr.w	pc, [sp], #4
	return (a <= b) ? a : b;
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	bf28      	it	cs
 8005a82:	461a      	movcs	r2, r3
 8005a84:	e7d7      	b.n	8005a36 <ring_buffer_read+0x1e>
 8005a86:	bf00      	nop

08005a88 <ring_buffer_write>:
	return HAL_ERROR;
}

/* write to buffer */
void ring_buffer_write(Ring_Buffer_t *buffer, uint8_t *str, const uint16_t size)
{
 8005a88:	b530      	push	{r4, r5, lr}
	uint16_t minSize = min(size, buffer->size);
 8005a8a:	8884      	ldrh	r4, [r0, #4]
	return (a <= b) ? a : b;
 8005a8c:	42a2      	cmp	r2, r4
 8005a8e:	bf28      	it	cs
 8005a90:	4622      	movcs	r2, r4
	for ( int i = 0; i < minSize; i++ ) {
 8005a92:	b1c2      	cbz	r2, 8005ac6 <ring_buffer_write+0x3e>
 8005a94:	eb01 0e02 	add.w	lr, r1, r2
	uint16_t _head = buffer->head;
 8005a98:	8902      	ldrh	r2, [r0, #8]
	uint16_t _tail = buffer->tail;
 8005a9a:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
	uint16_t _head = buffer->head;
 8005a9e:	b292      	uxth	r2, r2
	uint16_t _tail = buffer->tail;
 8005aa0:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t nextHead = (_head + 1) % buffer->size;
 8005aa4:	1c53      	adds	r3, r2, #1
 8005aa6:	fbb3 f5f4 	udiv	r5, r3, r4
 8005aaa:	fb04 3315 	mls	r3, r4, r5, r3
 8005aae:	b29b      	uxth	r3, r3
	if (nextHead != _tail) {
 8005ab0:	459c      	cmp	ip, r3
 8005ab2:	d008      	beq.n	8005ac6 <ring_buffer_write+0x3e>
		if (ring_buffer_write_byte(buffer, str[i]) == HAL_ERROR)
 8005ab4:	f811 5b01 	ldrb.w	r5, [r1], #1
		buffer->storage[_head] = val;
 8005ab8:	6804      	ldr	r4, [r0, #0]
	for ( int i = 0; i < minSize; i++ ) {
 8005aba:	4571      	cmp	r1, lr
		buffer->storage[_head] = val;
 8005abc:	54a5      	strb	r5, [r4, r2]
		buffer->head = nextHead;
 8005abe:	8103      	strh	r3, [r0, #8]
	for ( int i = 0; i < minSize; i++ ) {
 8005ac0:	d001      	beq.n	8005ac6 <ring_buffer_write+0x3e>
	uint16_t nextHead = (_head + 1) % buffer->size;
 8005ac2:	8884      	ldrh	r4, [r0, #4]
 8005ac4:	e7e8      	b.n	8005a98 <ring_buffer_write+0x10>
			break;
	}
}
 8005ac6:	bd30      	pop	{r4, r5, pc}

08005ac8 <serial_init>:
	ring_buffer_init(&serial->TBufferTx, (uint8_t*) txBuffer, txBufsize);
}

void serial_init(TSerial *serial, char *rxBuffer, const uint16_t rxBufsize, char *txBuffer,
		const uint16_t txBufsize, UART_HandleTypeDef *huart)
{
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	461d      	mov	r5, r3
 8005acc:	4604      	mov	r4, r0
 8005ace:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8005ad2:	9e07      	ldr	r6, [sp, #28]
	ring_buffer_init(&serial->TBufferRx, (uint8_t*) rxBuffer, rxBufsize);
 8005ad4:	f7ff ff86 	bl	80059e4 <ring_buffer_init>
	ring_buffer_init(&serial->TBufferTx, (uint8_t*) txBuffer, txBufsize);
 8005ad8:	463a      	mov	r2, r7
 8005ada:	4629      	mov	r1, r5
 8005adc:	f104 000c 	add.w	r0, r4, #12
 8005ae0:	f7ff ff80 	bl	80059e4 <ring_buffer_init>
	buffer_init(serial, rxBuffer, rxBufsize, txBuffer, txBufsize);
	serial->huart = huart;
 8005ae4:	61a6      	str	r6, [r4, #24]

	__HAL_UART_ENABLE_IT(serial->huart, UART_IT_RXNE);
 8005ae6:	6832      	ldr	r2, [r6, #0]
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	f043 0320 	orr.w	r3, r3, #32
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af2:	bf00      	nop

08005af4 <USARTx_IRQHandler>:
	while (__HAL_UART_GET_IT_SOURCE(serial->huart, UART_IT_TXE))
		;
}

uint8_t USARTx_IRQHandler(TSerial *serial)
{
 8005af4:	b570      	push	{r4, r5, r6, lr}
#if defined(USART_ISR_RXNE) && defined(USART_ISR_TXE) && defined(USART_ISR_TC)
	uint32_t isrflags = READ_REG(serial->huart->Instance->ISR);
 8005af6:	6983      	ldr	r3, [r0, #24]
{
 8005af8:	b082      	sub	sp, #8
	uint32_t isrflags = READ_REG(serial->huart->Instance->ISR);
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69dc      	ldr	r4, [r3, #28]
	char c;
	uint8_t ret = 0;

	/* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_ISR_RXNE)
	if ((isrflags & USART_ISR_RXNE) != 0U) {
 8005afe:	06a2      	lsls	r2, r4, #26
 8005b00:	d426      	bmi.n	8005b50 <USARTx_IRQHandler+0x5c>
		return HAL_UART_RETURN_RX;
	}

	/* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_ISR_TXE)
	if ((isrflags & USART_ISR_TXE) != 0U) {
 8005b02:	0623      	lsls	r3, r4, #24
 8005b04:	4605      	mov	r5, r0
 8005b06:	d405      	bmi.n	8005b14 <USARTx_IRQHandler+0x20>
		}
	}

	/* UART in mode Transmitter end --------------------------------------------*/
#if defined(USART_ISR_TC)
	if ((isrflags & USART_ISR_TC) != 0U) {
 8005b08:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8005b0c:	d117      	bne.n	8005b3e <USARTx_IRQHandler+0x4a>
		__HAL_UART_DISABLE_IT(serial->huart, UART_IT_TC);

		return HAL_UART_RETURN_TX_DONE;
	}

	return ret;
 8005b0e:	4620      	mov	r0, r4
}
 8005b10:	b002      	add	sp, #8
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
		if (ring_buffer_available(&serial->TBufferTx) == 0) {
 8005b14:	f100 060c 	add.w	r6, r0, #12
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff ff6b 	bl	80059f4 <ring_buffer_available>
 8005b1e:	bb10      	cbnz	r0, 8005b66 <USARTx_IRQHandler+0x72>
			__HAL_UART_DISABLE_IT(serial->huart, UART_IT_TXE);
 8005b20:	69ab      	ldr	r3, [r5, #24]
	if ((isrflags & USART_ISR_TC) != 0U) {
 8005b22:	f014 0440 	ands.w	r4, r4, #64	; 0x40
			__HAL_UART_DISABLE_IT(serial->huart, UART_IT_TXE);
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	6813      	ldr	r3, [r2, #0]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	6013      	str	r3, [r2, #0]
			__HAL_UART_ENABLE_IT(serial->huart, UART_IT_TC);
 8005b30:	69ab      	ldr	r3, [r5, #24]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3a:	6013      	str	r3, [r2, #0]
	if ((isrflags & USART_ISR_TC) != 0U) {
 8005b3c:	d0e7      	beq.n	8005b0e <USARTx_IRQHandler+0x1a>
		__HAL_UART_DISABLE_IT(serial->huart, UART_IT_TC);
 8005b3e:	69ab      	ldr	r3, [r5, #24]
		return HAL_UART_RETURN_TX_DONE;
 8005b40:	2005      	movs	r0, #5
		__HAL_UART_DISABLE_IT(serial->huart, UART_IT_TC);
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	6813      	ldr	r3, [r2, #0]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
		c = (char) (serial->huart->Instance->RDR & 0xFF);
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		ring_buffer_write(&serial->TBufferRx, (uint8_t*) &c, 1);
 8005b52:	2201      	movs	r2, #1
 8005b54:	f10d 0107 	add.w	r1, sp, #7
		c = (char) (serial->huart->Instance->RDR & 0xFF);
 8005b58:	f88d 3007 	strb.w	r3, [sp, #7]
		ring_buffer_write(&serial->TBufferRx, (uint8_t*) &c, 1);
 8005b5c:	f7ff ff94 	bl	8005a88 <ring_buffer_write>
		return HAL_UART_RETURN_RX;
 8005b60:	2001      	movs	r0, #1
}
 8005b62:	b002      	add	sp, #8
 8005b64:	bd70      	pop	{r4, r5, r6, pc}
			ring_buffer_read(&serial->TBufferTx, (uint8_t*) &c, 1);
 8005b66:	2201      	movs	r2, #1
 8005b68:	f10d 0107 	add.w	r1, sp, #7
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f7ff ff53 	bl	8005a18 <ring_buffer_read>
			serial->huart->Instance->TDR = (uint8_t) c;
 8005b72:	69ab      	ldr	r3, [r5, #24]
 8005b74:	f89d 2007 	ldrb.w	r2, [sp, #7]
			return HAL_UART_RETURN_TX_INGOING;
 8005b78:	2003      	movs	r0, #3
			serial->huart->Instance->TDR = (uint8_t) c;
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	629a      	str	r2, [r3, #40]	; 0x28
			return HAL_UART_RETURN_TX_INGOING;
 8005b7e:	e7c7      	b.n	8005b10 <USARTx_IRQHandler+0x1c>

08005b80 <serial_available>:

uint16_t serial_available(TSerial *serial)
{
	return ring_buffer_available(&serial->TBufferRx);
 8005b80:	f7ff bf38 	b.w	80059f4 <ring_buffer_available>

08005b84 <serial_read>:

	return 0;
}

char serial_read(TSerial *serial)
{
 8005b84:	b500      	push	{lr}
 8005b86:	b083      	sub	sp, #12
	char ch;

	if (ring_buffer_read(&serial->TBufferRx, (uint8_t*) &ch, 1) != HAL_OK)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f10d 0107 	add.w	r1, sp, #7
 8005b8e:	f7ff ff43 	bl	8005a18 <ring_buffer_read>
 8005b92:	b920      	cbnz	r0, 8005b9e <serial_read+0x1a>
		return 0;

	return ch;
 8005b94:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005b98:	b003      	add	sp, #12
 8005b9a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8005b9e:	2000      	movs	r0, #0
}
 8005ba0:	b003      	add	sp, #12
 8005ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ba6:	bf00      	nop

08005ba8 <serial_write>:
{
	ring_buffer_flush(&serial->TBufferRx);
}

void serial_write(TSerial *serial, const char c)
{
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	460b      	mov	r3, r1
 8005bae:	4604      	mov	r4, r0
	ring_buffer_write(&serial->TBufferTx, (uint8_t*) &c, 1);
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f10d 0107 	add.w	r1, sp, #7
 8005bb6:	300c      	adds	r0, #12
{
 8005bb8:	f88d 3007 	strb.w	r3, [sp, #7]
	ring_buffer_write(&serial->TBufferTx, (uint8_t*) &c, 1);
 8005bbc:	f7ff ff64 	bl	8005a88 <ring_buffer_write>
	__HAL_UART_ENABLE_IT(serial->huart, UART_IT_TXE);
 8005bc0:	69a3      	ldr	r3, [r4, #24]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	6813      	ldr	r3, [r2, #0]
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bca:	6013      	str	r3, [r2, #0]
	serial_start_transmitting(serial);
}
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd10      	pop	{r4, pc}

08005bd0 <serial_write_str>:

void serial_write_str(TSerial *serial, const char *str, const uint16_t len)
{
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	4604      	mov	r4, r0
	ring_buffer_write(&serial->TBufferTx, (uint8_t*) str, len);
 8005bd4:	300c      	adds	r0, #12
 8005bd6:	f7ff ff57 	bl	8005a88 <ring_buffer_write>
	__HAL_UART_ENABLE_IT(serial->huart, UART_IT_TXE);
 8005bda:	69a3      	ldr	r3, [r4, #24]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be4:	6013      	str	r3, [r2, #0]

	serial_start_transmitting(serial);
}
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <sla_set_attitude>:
static sla_t sla;
static gsl_command_t gsl = { 0, 0, 0, 0, 0 };

void sla_set_attitude(const float az, const float el)
{
	sla.rws_body[0] = az;
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <sla_set_attitude+0xc>)
 8005bea:	ed83 0a02 	vstr	s0, [r3, #8]
	sla.rws_body[1] = el;
 8005bee:	edc3 0a03 	vstr	s1, [r3, #12]
}
 8005bf2:	4770      	bx	lr
 8005bf4:	20000ce0 	.word	0x20000ce0

08005bf8 <sla_set_distance>:

void sla_set_distance(const uint16_t d)
{
	sla.lrf_val = d;
 8005bf8:	4b01      	ldr	r3, [pc, #4]	; (8005c00 <sla_set_distance+0x8>)
 8005bfa:	8218      	strh	r0, [r3, #16]
}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000ce0 	.word	0x20000ce0

08005c04 <sla_init>:

void sla_init()
{

}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <sla_gsl_available>:

uint8_t sla_gsl_available()
{
	return gsl.available;
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <sla_gsl_available+0x8>)
}
 8005c0a:	7818      	ldrb	r0, [r3, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000bc8 	.word	0x20000bc8

08005c14 <sla_gsl_get_command>:

void sla_gsl_get_command(uint8_t *counter, int32_t *az, int32_t *el, uint16_t *distance)
{
 8005c14:	b410      	push	{r4}
	*counter = gsl.counter;
 8005c16:	4c08      	ldr	r4, [pc, #32]	; (8005c38 <sla_gsl_get_command+0x24>)
 8005c18:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005c1c:	f880 c000 	strb.w	ip, [r0]
	*az = gsl.az;
 8005c20:	6860      	ldr	r0, [r4, #4]
 8005c22:	6008      	str	r0, [r1, #0]
	*el = gsl.el;
 8005c24:	68a0      	ldr	r0, [r4, #8]
	*distance = gsl.distance;
 8005c26:	89a1      	ldrh	r1, [r4, #12]
	*el = gsl.el;
 8005c28:	6010      	str	r0, [r2, #0]

	gsl.available = 0;
 8005c2a:	2200      	movs	r2, #0
	*distance = gsl.distance;
 8005c2c:	8019      	strh	r1, [r3, #0]
	gsl.available = 0;
 8005c2e:	7022      	strb	r2, [r4, #0]
}
 8005c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000bc8 	.word	0x20000bc8

08005c3c <sla_gsl_start>:
void sla_gsl_start()
{
	uint16_t bufLen;
	char buf[RING_BUFFER_TX_SIZE];

	bufLen = sprintf(buf, "$GSLACK,1*");
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <sla_gsl_start+0x2c>)
{
 8005c3e:	b500      	push	{lr}
 8005c40:	b0c1      	sub	sp, #260	; 0x104
	bufLen = sprintf(buf, "$GSLACK,1*");
 8005c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c46:	466b      	mov	r3, sp
 8005c48:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c4c:	c303      	stmia	r3!, {r0, r1}
	serial_write_str(&pcE, buf, bufLen);
 8005c4e:	4669      	mov	r1, sp
	bufLen = sprintf(buf, "$GSLACK,1*");
 8005c50:	f823 2b02 	strh.w	r2, [r3], #2
	serial_write_str(&pcE, buf, bufLen);
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <sla_gsl_start+0x30>)
 8005c56:	220a      	movs	r2, #10
	bufLen = sprintf(buf, "$GSLACK,1*");
 8005c58:	f883 c000 	strb.w	ip, [r3]
	serial_write_str(&pcE, buf, bufLen);
 8005c5c:	f7ff ffb8 	bl	8005bd0 <serial_write_str>
}
 8005c60:	b041      	add	sp, #260	; 0x104
 8005c62:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c66:	bf00      	nop
 8005c68:	0800bb54 	.word	0x0800bb54
 8005c6c:	200007a4 	.word	0x200007a4

08005c70 <sla_handler>:
		}
	}
}

void sla_handler()
{
 8005c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static uint32_t send_timer = 0;
	char c[2] = { 0, 0 };
 8005c74:	2400      	movs	r4, #0
	uint8_t pce_completed = 0;

	uint16_t bufLen = 0;
	char buf[RING_BUFFER_TX_SIZE];

	if (serial_available(&pcE) > 0) {
 8005c76:	4889      	ldr	r0, [pc, #548]	; (8005e9c <sla_handler+0x22c>)
{
 8005c78:	ed2d 8b02 	vpush	{d8}
 8005c7c:	b0c9      	sub	sp, #292	; 0x124
	char c[2] = { 0, 0 };
 8005c7e:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (serial_available(&pcE) > 0) {
 8005c82:	f7ff ff7d 	bl	8005b80 <serial_available>
 8005c86:	b9b8      	cbnz	r0, 8005cb8 <sla_handler+0x48>
 8005c88:	4c85      	ldr	r4, [pc, #532]	; (8005ea0 <sla_handler+0x230>)
	}

	if (pce_completed == 1)
		sla_parsing(pce_buf);

	if (HAL_GetTick() >= send_timer) {
 8005c8a:	4d86      	ldr	r5, [pc, #536]	; (8005ea4 <sla_handler+0x234>)
 8005c8c:	f7fd f856 	bl	8002d3c <HAL_GetTick>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	4298      	cmp	r0, r3
 8005c94:	d225      	bcs.n	8005ce2 <sla_handler+0x72>

		bufLen = sprintf(buf, "$LRVAL,%d*$AZVAL,%.2f*$ELVAL,%.3f*", sla.lrf_val, sla.rws_body[0], sla.rws_body[1]);
		serial_write_str(&pcE, buf, bufLen);
	}

	if (HAL_GetTick() >= gsl.timestamp + 3000) {
 8005c96:	f7fd f851 	bl	8002d3c <HAL_GetTick>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8005ca0:	4298      	cmp	r0, r3
 8005ca2:	d304      	bcc.n	8005cae <sla_handler+0x3e>
		gsl.available = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	7023      	strb	r3, [r4, #0]
		gsl.az = gsl.el = gsl.distance = 0;
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	e9c4 3301 	strd	r3, r3, [r4, #4]
	}

}
 8005cae:	b049      	add	sp, #292	; 0x124
 8005cb0:	ecbd 8b02 	vpop	{d8}
 8005cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		c[0] = serial_read(&pcE);
 8005cb8:	4878      	ldr	r0, [pc, #480]	; (8005e9c <sla_handler+0x22c>)
 8005cba:	f7ff ff63 	bl	8005b84 <serial_read>
		if (c[0] == '$')
 8005cbe:	2824      	cmp	r0, #36	; 0x24
		c[0] = serial_read(&pcE);
 8005cc0:	f88d 001c 	strb.w	r0, [sp, #28]
		if (c[0] == '$')
 8005cc4:	f000 809a 	beq.w	8005dfc <sla_handler+0x18c>
		else if (c[0] == '*')
 8005cc8:	282a      	cmp	r0, #42	; 0x2a
 8005cca:	d02b      	beq.n	8005d24 <sla_handler+0xb4>
	if (HAL_GetTick() >= send_timer) {
 8005ccc:	4d75      	ldr	r5, [pc, #468]	; (8005ea4 <sla_handler+0x234>)
		strcat(pce_buf, c);
 8005cce:	a907      	add	r1, sp, #28
 8005cd0:	4875      	ldr	r0, [pc, #468]	; (8005ea8 <sla_handler+0x238>)
 8005cd2:	f001 f9b1 	bl	8007038 <strcat>
 8005cd6:	4c72      	ldr	r4, [pc, #456]	; (8005ea0 <sla_handler+0x230>)
	if (HAL_GetTick() >= send_timer) {
 8005cd8:	f7fd f830 	bl	8002d3c <HAL_GetTick>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	4298      	cmp	r0, r3
 8005ce0:	d3d9      	bcc.n	8005c96 <sla_handler+0x26>
		bufLen = sprintf(buf, "$LRVAL,%d*$AZVAL,%.2f*$ELVAL,%.3f*", sla.lrf_val, sla.rws_body[0], sla.rws_body[1]);
 8005ce2:	4e72      	ldr	r6, [pc, #456]	; (8005eac <sla_handler+0x23c>)
		send_timer = HAL_GetTick() + 250;
 8005ce4:	f7fd f82a 	bl	8002d3c <HAL_GetTick>
 8005ce8:	30fa      	adds	r0, #250	; 0xfa
		bufLen = sprintf(buf, "$LRVAL,%d*$AZVAL,%.2f*$ELVAL,%.3f*", sla.lrf_val, sla.rws_body[0], sla.rws_body[1]);
 8005cea:	8a32      	ldrh	r2, [r6, #16]
		send_timer = HAL_GetTick() + 250;
 8005cec:	6028      	str	r0, [r5, #0]
		bufLen = sprintf(buf, "$LRVAL,%d*$AZVAL,%.2f*$ELVAL,%.3f*", sla.lrf_val, sla.rws_body[0], sla.rws_body[1]);
 8005cee:	68f0      	ldr	r0, [r6, #12]
 8005cf0:	9205      	str	r2, [sp, #20]
 8005cf2:	f7fa fc51 	bl	8000598 <__aeabi_f2d>
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	4689      	mov	r9, r1
 8005cfa:	68b0      	ldr	r0, [r6, #8]
 8005cfc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005d00:	f7fa fc4a 	bl	8000598 <__aeabi_f2d>
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	9a05      	ldr	r2, [sp, #20]
 8005d0a:	4969      	ldr	r1, [pc, #420]	; (8005eb0 <sla_handler+0x240>)
 8005d0c:	a808      	add	r0, sp, #32
 8005d0e:	e9cd 6700 	strd	r6, r7, [sp]
 8005d12:	f001 f971 	bl	8006ff8 <siprintf>
 8005d16:	4602      	mov	r2, r0
		serial_write_str(&pcE, buf, bufLen);
 8005d18:	a908      	add	r1, sp, #32
 8005d1a:	4860      	ldr	r0, [pc, #384]	; (8005e9c <sla_handler+0x22c>)
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	f7ff ff57 	bl	8005bd0 <serial_write_str>
 8005d22:	e7b8      	b.n	8005c96 <sla_handler+0x26>
		strcat(pce_buf, c);
 8005d24:	4d60      	ldr	r5, [pc, #384]	; (8005ea8 <sla_handler+0x238>)
 8005d26:	a907      	add	r1, sp, #28
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f001 f985 	bl	8007038 <strcat>
	LOG("pcE: %s\r\n", cmd);
 8005d2e:	f7fd f805 	bl	8002d3c <HAL_GetTick>
 8005d32:	4b60      	ldr	r3, [pc, #384]	; (8005eb4 <sla_handler+0x244>)
 8005d34:	f242 7110 	movw	r1, #10000	; 0x2710
 8005d38:	9500      	str	r5, [sp, #0]
 8005d3a:	fba3 2300 	umull	r2, r3, r3, r0
 8005d3e:	4a5e      	ldr	r2, [pc, #376]	; (8005eb8 <sla_handler+0x248>)
 8005d40:	0b5b      	lsrs	r3, r3, #13
 8005d42:	fb01 0113 	mls	r1, r1, r3, r0
 8005d46:	485d      	ldr	r0, [pc, #372]	; (8005ebc <sla_handler+0x24c>)
 8005d48:	2385      	movs	r3, #133	; 0x85
 8005d4a:	f000 ffe9 	bl	8006d20 <iprintf>
	s = strstr(cmd, "$GSL,");
 8005d4e:	495c      	ldr	r1, [pc, #368]	; (8005ec0 <sla_handler+0x250>)
 8005d50:	4628      	mov	r0, r5
 8005d52:	f001 f99e 	bl	8007092 <strstr>
	if (s) {
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d096      	beq.n	8005c88 <sla_handler+0x18>
	delim[0] = a_delim;
 8005d5a:	222c      	movs	r2, #44	; 0x2c
	while (*tmp) {
 8005d5c:	782b      	ldrb	r3, [r5, #0]
	delim[0] = a_delim;
 8005d5e:	f8ad 2020 	strh.w	r2, [sp, #32]
	while (*tmp) {
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8088 	beq.w	8005e78 <sla_handler+0x208>
	char *tmp = a_str;
 8005d68:	462a      	mov	r2, r5
	size_t count = 0;
 8005d6a:	4626      	mov	r6, r4
		if (a_delim == *tmp) {
 8005d6c:	2b2c      	cmp	r3, #44	; 0x2c
 8005d6e:	d101      	bne.n	8005d74 <sla_handler+0x104>
			count++;
 8005d70:	3601      	adds	r6, #1
 8005d72:	4614      	mov	r4, r2
	while (*tmp) {
 8005d74:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f7      	bne.n	8005d6c <sla_handler+0xfc>
	count += last_comma < (a_str + strlen(a_str) - 1);
 8005d7c:	484a      	ldr	r0, [pc, #296]	; (8005ea8 <sla_handler+0x238>)
 8005d7e:	f7fa fa4f 	bl	8000220 <strlen>
 8005d82:	3801      	subs	r0, #1
 8005d84:	4405      	add	r5, r0
 8005d86:	42ac      	cmp	r4, r5
 8005d88:	bf38      	it	cc
 8005d8a:	3601      	addcc	r6, #1
	count++;
 8005d8c:	1c74      	adds	r4, r6, #1
	result = malloc(sizeof(char*) * count);
 8005d8e:	00a0      	lsls	r0, r4, #2
 8005d90:	f000 f904 	bl	8005f9c <malloc>
	if (result) {
 8005d94:	4607      	mov	r7, r0
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f af76 	beq.w	8005c88 <sla_handler+0x18>
		char *token = strtok(a_str, delim);
 8005d9c:	a908      	add	r1, sp, #32
 8005d9e:	4842      	ldr	r0, [pc, #264]	; (8005ea8 <sla_handler+0x238>)
 8005da0:	f001 ffbc 	bl	8007d1c <strtok>
		while (token) {
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d06a      	beq.n	8005e7e <sla_handler+0x20e>
			assert(idx < count);
 8005da8:	2c00      	cmp	r4, #0
 8005daa:	d06a      	beq.n	8005e82 <sla_handler+0x212>
 8005dac:	1f3d      	subs	r5, r7, #4
		size_t idx = 0;
 8005dae:	2400      	movs	r4, #0
 8005db0:	e001      	b.n	8005db6 <sla_handler+0x146>
			assert(idx < count);
 8005db2:	429e      	cmp	r6, r3
 8005db4:	d065      	beq.n	8005e82 <sla_handler+0x212>
			*(result + idx++) = strdup(token);
 8005db6:	f001 f94f 	bl	8007058 <strdup>
			token = strtok(0, delim);
 8005dba:	a908      	add	r1, sp, #32
			*(result + idx++) = strdup(token);
 8005dbc:	f845 0f04 	str.w	r0, [r5, #4]!
			token = strtok(0, delim);
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f001 ffab 	bl	8007d1c <strtok>
 8005dc6:	4623      	mov	r3, r4
			*(result + idx++) = strdup(token);
 8005dc8:	3401      	adds	r4, #1
		while (token) {
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d1f1      	bne.n	8005db2 <sla_handler+0x142>
		assert(idx == count - 1);
 8005dce:	42a6      	cmp	r6, r4
 8005dd0:	d15d      	bne.n	8005e8e <sla_handler+0x21e>
		*(result + idx) = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
			for ( int i = 0; *(tokens + i); i++ ) {
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04a      	beq.n	8005e74 <sla_handler+0x204>
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	3704      	adds	r7, #4
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d046      	beq.n	8005e74 <sla_handler+0x204>
 8005de6:	2501      	movs	r5, #1
 8005de8:	4c2d      	ldr	r4, [pc, #180]	; (8005ea0 <sla_handler+0x230>)
					gsl.el = (int32_t) (f * 1000);
 8005dea:	ed9f 8a36 	vldr	s16, [pc, #216]	; 8005ec4 <sla_handler+0x254>
				switch (i)
 8005dee:	1e6b      	subs	r3, r5, #1
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d812      	bhi.n	8005e1a <sla_handler+0x1aa>
 8005df4:	e8df f003 	tbb	[pc, r3]
 8005df8:	0e1c2b3a 	.word	0x0e1c2b3a
			memset(pce_buf, 0, RING_BUFFER_RX_SIZE);
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e02:	4829      	ldr	r0, [pc, #164]	; (8005ea8 <sla_handler+0x238>)
 8005e04:	f000 f8e0 	bl	8005fc8 <memset>
		strcat(pce_buf, c);
 8005e08:	a907      	add	r1, sp, #28
 8005e0a:	4827      	ldr	r0, [pc, #156]	; (8005ea8 <sla_handler+0x238>)
 8005e0c:	4c24      	ldr	r4, [pc, #144]	; (8005ea0 <sla_handler+0x230>)
 8005e0e:	f001 f913 	bl	8007038 <strcat>
 8005e12:	e73a      	b.n	8005c8a <sla_handler+0x1a>
					gsl.distance = (uint16_t) atoi(s);
 8005e14:	f000 f881 	bl	8005f1a <atoi>
 8005e18:	81a0      	strh	r0, [r4, #12]
			for ( int i = 0; *(tokens + i); i++ ) {
 8005e1a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8005e1e:	3501      	adds	r5, #1
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d1e4      	bne.n	8005dee <sla_handler+0x17e>
			gsl.available = 1;
 8005e24:	2301      	movs	r3, #1
 8005e26:	7023      	strb	r3, [r4, #0]
			gsl.timestamp = HAL_GetTick();
 8005e28:	f7fc ff88 	bl	8002d3c <HAL_GetTick>
 8005e2c:	6120      	str	r0, [r4, #16]
 8005e2e:	e72c      	b.n	8005c8a <sla_handler+0x1a>
					f = atof(s);
 8005e30:	f000 f870 	bl	8005f14 <atof>
 8005e34:	ec51 0b10 	vmov	r0, r1, d0
 8005e38:	f7fa fefe 	bl	8000c38 <__aeabi_d2f>
					gsl.el = (int32_t) (f * 1000);
 8005e3c:	ee07 0a90 	vmov	s15, r0
 8005e40:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e48:	edc4 7a02 	vstr	s15, [r4, #8]
					break;
 8005e4c:	e7e5      	b.n	8005e1a <sla_handler+0x1aa>
					f = atof(s);
 8005e4e:	f000 f861 	bl	8005f14 <atof>
 8005e52:	ec51 0b10 	vmov	r0, r1, d0
 8005e56:	f7fa feef 	bl	8000c38 <__aeabi_d2f>
					gsl.az = (int32_t) (f * 1000);
 8005e5a:	ee07 0a90 	vmov	s15, r0
 8005e5e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e66:	edc4 7a01 	vstr	s15, [r4, #4]
					break;
 8005e6a:	e7d6      	b.n	8005e1a <sla_handler+0x1aa>
					gsl.counter = atoi(s);
 8005e6c:	f000 f855 	bl	8005f1a <atoi>
 8005e70:	7060      	strb	r0, [r4, #1]
					break;
 8005e72:	e7d2      	b.n	8005e1a <sla_handler+0x1aa>
 8005e74:	4c0a      	ldr	r4, [pc, #40]	; (8005ea0 <sla_handler+0x230>)
 8005e76:	e7d5      	b.n	8005e24 <sla_handler+0x1b4>
	char *last_comma = 0;
 8005e78:	461c      	mov	r4, r3
	size_t count = 0;
 8005e7a:	461e      	mov	r6, r3
 8005e7c:	e77e      	b.n	8005d7c <sla_handler+0x10c>
		size_t idx = 0;
 8005e7e:	4604      	mov	r4, r0
 8005e80:	e7a5      	b.n	8005dce <sla_handler+0x15e>
			assert(idx < count);
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <sla_handler+0x258>)
 8005e84:	2174      	movs	r1, #116	; 0x74
 8005e86:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <sla_handler+0x25c>)
 8005e88:	4811      	ldr	r0, [pc, #68]	; (8005ed0 <sla_handler+0x260>)
 8005e8a:	f000 f825 	bl	8005ed8 <__assert_func>
		assert(idx == count - 1);
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <sla_handler+0x264>)
 8005e90:	2178      	movs	r1, #120	; 0x78
 8005e92:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <sla_handler+0x25c>)
 8005e94:	480e      	ldr	r0, [pc, #56]	; (8005ed0 <sla_handler+0x260>)
 8005e96:	f000 f81f 	bl	8005ed8 <__assert_func>
 8005e9a:	bf00      	nop
 8005e9c:	200007a4 	.word	0x200007a4
 8005ea0:	20000bc8 	.word	0x20000bc8
 8005ea4:	20000cdc 	.word	0x20000cdc
 8005ea8:	20000bdc 	.word	0x20000bdc
 8005eac:	20000ce0 	.word	0x20000ce0
 8005eb0:	0800bbb8 	.word	0x0800bbb8
 8005eb4:	d1b71759 	.word	0xd1b71759
 8005eb8:	0800bb60 	.word	0x0800bb60
 8005ebc:	0800bb68 	.word	0x0800bb68
 8005ec0:	0800bb80 	.word	0x0800bb80
 8005ec4:	447a0000 	.word	0x447a0000
 8005ec8:	0800bb88 	.word	0x0800bb88
 8005ecc:	0800bbdc 	.word	0x0800bbdc
 8005ed0:	0800bb94 	.word	0x0800bb94
 8005ed4:	0800bba4 	.word	0x0800bba4

08005ed8 <__assert_func>:
 8005ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eda:	4614      	mov	r4, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <__assert_func+0x2c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	68d8      	ldr	r0, [r3, #12]
 8005ee6:	b14c      	cbz	r4, 8005efc <__assert_func+0x24>
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <__assert_func+0x30>)
 8005eea:	9100      	str	r1, [sp, #0]
 8005eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ef0:	4906      	ldr	r1, [pc, #24]	; (8005f0c <__assert_func+0x34>)
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	f000 f81c 	bl	8005f30 <fiprintf>
 8005ef8:	f002 f8b8 	bl	800806c <abort>
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <__assert_func+0x38>)
 8005efe:	461c      	mov	r4, r3
 8005f00:	e7f3      	b.n	8005eea <__assert_func+0x12>
 8005f02:	bf00      	nop
 8005f04:	20000014 	.word	0x20000014
 8005f08:	0800bbe6 	.word	0x0800bbe6
 8005f0c:	0800bbf3 	.word	0x0800bbf3
 8005f10:	0800bc21 	.word	0x0800bc21

08005f14 <atof>:
 8005f14:	2100      	movs	r1, #0
 8005f16:	f001 bef5 	b.w	8007d04 <strtod>

08005f1a <atoi>:
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f001 bfdb 	b.w	8007ed8 <strtol>
	...

08005f24 <__errno>:
 8005f24:	4b01      	ldr	r3, [pc, #4]	; (8005f2c <__errno+0x8>)
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000014 	.word	0x20000014

08005f30 <fiprintf>:
 8005f30:	b40e      	push	{r1, r2, r3}
 8005f32:	b503      	push	{r0, r1, lr}
 8005f34:	4601      	mov	r1, r0
 8005f36:	ab03      	add	r3, sp, #12
 8005f38:	4805      	ldr	r0, [pc, #20]	; (8005f50 <fiprintf+0x20>)
 8005f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3e:	6800      	ldr	r0, [r0, #0]
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	f000 f953 	bl	80061ec <_vfiprintf_r>
 8005f46:	b002      	add	sp, #8
 8005f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f4c:	b003      	add	sp, #12
 8005f4e:	4770      	bx	lr
 8005f50:	20000014 	.word	0x20000014

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4d0d      	ldr	r5, [pc, #52]	; (8005f8c <__libc_init_array+0x38>)
 8005f58:	4c0d      	ldr	r4, [pc, #52]	; (8005f90 <__libc_init_array+0x3c>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	2600      	movs	r6, #0
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	4d0b      	ldr	r5, [pc, #44]	; (8005f94 <__libc_init_array+0x40>)
 8005f66:	4c0c      	ldr	r4, [pc, #48]	; (8005f98 <__libc_init_array+0x44>)
 8005f68:	f005 fc94 	bl	800b894 <_init>
 8005f6c:	1b64      	subs	r4, r4, r5
 8005f6e:	10a4      	asrs	r4, r4, #2
 8005f70:	2600      	movs	r6, #0
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	0800c2c8 	.word	0x0800c2c8
 8005f90:	0800c2c8 	.word	0x0800c2c8
 8005f94:	0800c2c8 	.word	0x0800c2c8
 8005f98:	0800c2cc 	.word	0x0800c2cc

08005f9c <malloc>:
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <malloc+0xc>)
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	f000 b885 	b.w	80060b0 <_malloc_r>
 8005fa6:	bf00      	nop
 8005fa8:	20000014 	.word	0x20000014

08005fac <memcpy>:
 8005fac:	440a      	add	r2, r1
 8005fae:	4291      	cmp	r1, r2
 8005fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb4:	d100      	bne.n	8005fb8 <memcpy+0xc>
 8005fb6:	4770      	bx	lr
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc2:	4291      	cmp	r1, r2
 8005fc4:	d1f9      	bne.n	8005fba <memcpy+0xe>
 8005fc6:	bd10      	pop	{r4, pc}

08005fc8 <memset>:
 8005fc8:	4402      	add	r2, r0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d100      	bne.n	8005fd2 <memset+0xa>
 8005fd0:	4770      	bx	lr
 8005fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd6:	e7f9      	b.n	8005fcc <memset+0x4>

08005fd8 <_free_r>:
 8005fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fda:	2900      	cmp	r1, #0
 8005fdc:	d044      	beq.n	8006068 <_free_r+0x90>
 8005fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8005fea:	bfb8      	it	lt
 8005fec:	18e4      	addlt	r4, r4, r3
 8005fee:	f003 fc7b 	bl	80098e8 <__malloc_lock>
 8005ff2:	4a1e      	ldr	r2, [pc, #120]	; (800606c <_free_r+0x94>)
 8005ff4:	9801      	ldr	r0, [sp, #4]
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	b933      	cbnz	r3, 8006008 <_free_r+0x30>
 8005ffa:	6063      	str	r3, [r4, #4]
 8005ffc:	6014      	str	r4, [r2, #0]
 8005ffe:	b003      	add	sp, #12
 8006000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006004:	f003 bc76 	b.w	80098f4 <__malloc_unlock>
 8006008:	42a3      	cmp	r3, r4
 800600a:	d908      	bls.n	800601e <_free_r+0x46>
 800600c:	6825      	ldr	r5, [r4, #0]
 800600e:	1961      	adds	r1, r4, r5
 8006010:	428b      	cmp	r3, r1
 8006012:	bf01      	itttt	eq
 8006014:	6819      	ldreq	r1, [r3, #0]
 8006016:	685b      	ldreq	r3, [r3, #4]
 8006018:	1949      	addeq	r1, r1, r5
 800601a:	6021      	streq	r1, [r4, #0]
 800601c:	e7ed      	b.n	8005ffa <_free_r+0x22>
 800601e:	461a      	mov	r2, r3
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b10b      	cbz	r3, 8006028 <_free_r+0x50>
 8006024:	42a3      	cmp	r3, r4
 8006026:	d9fa      	bls.n	800601e <_free_r+0x46>
 8006028:	6811      	ldr	r1, [r2, #0]
 800602a:	1855      	adds	r5, r2, r1
 800602c:	42a5      	cmp	r5, r4
 800602e:	d10b      	bne.n	8006048 <_free_r+0x70>
 8006030:	6824      	ldr	r4, [r4, #0]
 8006032:	4421      	add	r1, r4
 8006034:	1854      	adds	r4, r2, r1
 8006036:	42a3      	cmp	r3, r4
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	d1e0      	bne.n	8005ffe <_free_r+0x26>
 800603c:	681c      	ldr	r4, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	6053      	str	r3, [r2, #4]
 8006042:	4421      	add	r1, r4
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	e7da      	b.n	8005ffe <_free_r+0x26>
 8006048:	d902      	bls.n	8006050 <_free_r+0x78>
 800604a:	230c      	movs	r3, #12
 800604c:	6003      	str	r3, [r0, #0]
 800604e:	e7d6      	b.n	8005ffe <_free_r+0x26>
 8006050:	6825      	ldr	r5, [r4, #0]
 8006052:	1961      	adds	r1, r4, r5
 8006054:	428b      	cmp	r3, r1
 8006056:	bf04      	itt	eq
 8006058:	6819      	ldreq	r1, [r3, #0]
 800605a:	685b      	ldreq	r3, [r3, #4]
 800605c:	6063      	str	r3, [r4, #4]
 800605e:	bf04      	itt	eq
 8006060:	1949      	addeq	r1, r1, r5
 8006062:	6021      	streq	r1, [r4, #0]
 8006064:	6054      	str	r4, [r2, #4]
 8006066:	e7ca      	b.n	8005ffe <_free_r+0x26>
 8006068:	b003      	add	sp, #12
 800606a:	bd30      	pop	{r4, r5, pc}
 800606c:	20000cf4 	.word	0x20000cf4

08006070 <sbrk_aligned>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4e0e      	ldr	r6, [pc, #56]	; (80060ac <sbrk_aligned+0x3c>)
 8006074:	460c      	mov	r4, r1
 8006076:	6831      	ldr	r1, [r6, #0]
 8006078:	4605      	mov	r5, r0
 800607a:	b911      	cbnz	r1, 8006082 <sbrk_aligned+0x12>
 800607c:	f000 fede 	bl	8006e3c <_sbrk_r>
 8006080:	6030      	str	r0, [r6, #0]
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 fed9 	bl	8006e3c <_sbrk_r>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d00a      	beq.n	80060a4 <sbrk_aligned+0x34>
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d007      	beq.n	80060a8 <sbrk_aligned+0x38>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4628      	mov	r0, r5
 800609c:	f000 fece 	bl	8006e3c <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d101      	bne.n	80060a8 <sbrk_aligned+0x38>
 80060a4:	f04f 34ff 	mov.w	r4, #4294967295
 80060a8:	4620      	mov	r0, r4
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	20000cf8 	.word	0x20000cf8

080060b0 <_malloc_r>:
 80060b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b4:	1ccd      	adds	r5, r1, #3
 80060b6:	f025 0503 	bic.w	r5, r5, #3
 80060ba:	3508      	adds	r5, #8
 80060bc:	2d0c      	cmp	r5, #12
 80060be:	bf38      	it	cc
 80060c0:	250c      	movcc	r5, #12
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	4607      	mov	r7, r0
 80060c6:	db01      	blt.n	80060cc <_malloc_r+0x1c>
 80060c8:	42a9      	cmp	r1, r5
 80060ca:	d905      	bls.n	80060d8 <_malloc_r+0x28>
 80060cc:	230c      	movs	r3, #12
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	2600      	movs	r6, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d8:	4e2e      	ldr	r6, [pc, #184]	; (8006194 <_malloc_r+0xe4>)
 80060da:	f003 fc05 	bl	80098e8 <__malloc_lock>
 80060de:	6833      	ldr	r3, [r6, #0]
 80060e0:	461c      	mov	r4, r3
 80060e2:	bb34      	cbnz	r4, 8006132 <_malloc_r+0x82>
 80060e4:	4629      	mov	r1, r5
 80060e6:	4638      	mov	r0, r7
 80060e8:	f7ff ffc2 	bl	8006070 <sbrk_aligned>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	4604      	mov	r4, r0
 80060f0:	d14d      	bne.n	800618e <_malloc_r+0xde>
 80060f2:	6834      	ldr	r4, [r6, #0]
 80060f4:	4626      	mov	r6, r4
 80060f6:	2e00      	cmp	r6, #0
 80060f8:	d140      	bne.n	800617c <_malloc_r+0xcc>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	4631      	mov	r1, r6
 80060fe:	4638      	mov	r0, r7
 8006100:	eb04 0803 	add.w	r8, r4, r3
 8006104:	f000 fe9a 	bl	8006e3c <_sbrk_r>
 8006108:	4580      	cmp	r8, r0
 800610a:	d13a      	bne.n	8006182 <_malloc_r+0xd2>
 800610c:	6821      	ldr	r1, [r4, #0]
 800610e:	3503      	adds	r5, #3
 8006110:	1a6d      	subs	r5, r5, r1
 8006112:	f025 0503 	bic.w	r5, r5, #3
 8006116:	3508      	adds	r5, #8
 8006118:	2d0c      	cmp	r5, #12
 800611a:	bf38      	it	cc
 800611c:	250c      	movcc	r5, #12
 800611e:	4629      	mov	r1, r5
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff ffa5 	bl	8006070 <sbrk_aligned>
 8006126:	3001      	adds	r0, #1
 8006128:	d02b      	beq.n	8006182 <_malloc_r+0xd2>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	442b      	add	r3, r5
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	e00e      	b.n	8006150 <_malloc_r+0xa0>
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	1b52      	subs	r2, r2, r5
 8006136:	d41e      	bmi.n	8006176 <_malloc_r+0xc6>
 8006138:	2a0b      	cmp	r2, #11
 800613a:	d916      	bls.n	800616a <_malloc_r+0xba>
 800613c:	1961      	adds	r1, r4, r5
 800613e:	42a3      	cmp	r3, r4
 8006140:	6025      	str	r5, [r4, #0]
 8006142:	bf18      	it	ne
 8006144:	6059      	strne	r1, [r3, #4]
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	bf08      	it	eq
 800614a:	6031      	streq	r1, [r6, #0]
 800614c:	5162      	str	r2, [r4, r5]
 800614e:	604b      	str	r3, [r1, #4]
 8006150:	4638      	mov	r0, r7
 8006152:	f104 060b 	add.w	r6, r4, #11
 8006156:	f003 fbcd 	bl	80098f4 <__malloc_unlock>
 800615a:	f026 0607 	bic.w	r6, r6, #7
 800615e:	1d23      	adds	r3, r4, #4
 8006160:	1af2      	subs	r2, r6, r3
 8006162:	d0b6      	beq.n	80060d2 <_malloc_r+0x22>
 8006164:	1b9b      	subs	r3, r3, r6
 8006166:	50a3      	str	r3, [r4, r2]
 8006168:	e7b3      	b.n	80060d2 <_malloc_r+0x22>
 800616a:	6862      	ldr	r2, [r4, #4]
 800616c:	42a3      	cmp	r3, r4
 800616e:	bf0c      	ite	eq
 8006170:	6032      	streq	r2, [r6, #0]
 8006172:	605a      	strne	r2, [r3, #4]
 8006174:	e7ec      	b.n	8006150 <_malloc_r+0xa0>
 8006176:	4623      	mov	r3, r4
 8006178:	6864      	ldr	r4, [r4, #4]
 800617a:	e7b2      	b.n	80060e2 <_malloc_r+0x32>
 800617c:	4634      	mov	r4, r6
 800617e:	6876      	ldr	r6, [r6, #4]
 8006180:	e7b9      	b.n	80060f6 <_malloc_r+0x46>
 8006182:	230c      	movs	r3, #12
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4638      	mov	r0, r7
 8006188:	f003 fbb4 	bl	80098f4 <__malloc_unlock>
 800618c:	e7a1      	b.n	80060d2 <_malloc_r+0x22>
 800618e:	6025      	str	r5, [r4, #0]
 8006190:	e7de      	b.n	8006150 <_malloc_r+0xa0>
 8006192:	bf00      	nop
 8006194:	20000cf4 	.word	0x20000cf4

08006198 <__sfputc_r>:
 8006198:	6893      	ldr	r3, [r2, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	b410      	push	{r4}
 80061a0:	6093      	str	r3, [r2, #8]
 80061a2:	da08      	bge.n	80061b6 <__sfputc_r+0x1e>
 80061a4:	6994      	ldr	r4, [r2, #24]
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	db01      	blt.n	80061ae <__sfputc_r+0x16>
 80061aa:	290a      	cmp	r1, #10
 80061ac:	d103      	bne.n	80061b6 <__sfputc_r+0x1e>
 80061ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b2:	f001 be9b 	b.w	8007eec <__swbuf_r>
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	1c58      	adds	r0, r3, #1
 80061ba:	6010      	str	r0, [r2, #0]
 80061bc:	7019      	strb	r1, [r3, #0]
 80061be:	4608      	mov	r0, r1
 80061c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <__sfputs_r>:
 80061c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c8:	4606      	mov	r6, r0
 80061ca:	460f      	mov	r7, r1
 80061cc:	4614      	mov	r4, r2
 80061ce:	18d5      	adds	r5, r2, r3
 80061d0:	42ac      	cmp	r4, r5
 80061d2:	d101      	bne.n	80061d8 <__sfputs_r+0x12>
 80061d4:	2000      	movs	r0, #0
 80061d6:	e007      	b.n	80061e8 <__sfputs_r+0x22>
 80061d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061dc:	463a      	mov	r2, r7
 80061de:	4630      	mov	r0, r6
 80061e0:	f7ff ffda 	bl	8006198 <__sfputc_r>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d1f3      	bne.n	80061d0 <__sfputs_r+0xa>
 80061e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061ec <_vfiprintf_r>:
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	460d      	mov	r5, r1
 80061f2:	b09d      	sub	sp, #116	; 0x74
 80061f4:	4614      	mov	r4, r2
 80061f6:	4698      	mov	r8, r3
 80061f8:	4606      	mov	r6, r0
 80061fa:	b118      	cbz	r0, 8006204 <_vfiprintf_r+0x18>
 80061fc:	6983      	ldr	r3, [r0, #24]
 80061fe:	b90b      	cbnz	r3, 8006204 <_vfiprintf_r+0x18>
 8006200:	f002 fece 	bl	8008fa0 <__sinit>
 8006204:	4b89      	ldr	r3, [pc, #548]	; (800642c <_vfiprintf_r+0x240>)
 8006206:	429d      	cmp	r5, r3
 8006208:	d11b      	bne.n	8006242 <_vfiprintf_r+0x56>
 800620a:	6875      	ldr	r5, [r6, #4]
 800620c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800620e:	07d9      	lsls	r1, r3, #31
 8006210:	d405      	bmi.n	800621e <_vfiprintf_r+0x32>
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	059a      	lsls	r2, r3, #22
 8006216:	d402      	bmi.n	800621e <_vfiprintf_r+0x32>
 8006218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800621a:	f003 fad2 	bl	80097c2 <__retarget_lock_acquire_recursive>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	071b      	lsls	r3, r3, #28
 8006222:	d501      	bpl.n	8006228 <_vfiprintf_r+0x3c>
 8006224:	692b      	ldr	r3, [r5, #16]
 8006226:	b9eb      	cbnz	r3, 8006264 <_vfiprintf_r+0x78>
 8006228:	4629      	mov	r1, r5
 800622a:	4630      	mov	r0, r6
 800622c:	f001 feb0 	bl	8007f90 <__swsetup_r>
 8006230:	b1c0      	cbz	r0, 8006264 <_vfiprintf_r+0x78>
 8006232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006234:	07dc      	lsls	r4, r3, #31
 8006236:	d50e      	bpl.n	8006256 <_vfiprintf_r+0x6a>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	b01d      	add	sp, #116	; 0x74
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	4b7b      	ldr	r3, [pc, #492]	; (8006430 <_vfiprintf_r+0x244>)
 8006244:	429d      	cmp	r5, r3
 8006246:	d101      	bne.n	800624c <_vfiprintf_r+0x60>
 8006248:	68b5      	ldr	r5, [r6, #8]
 800624a:	e7df      	b.n	800620c <_vfiprintf_r+0x20>
 800624c:	4b79      	ldr	r3, [pc, #484]	; (8006434 <_vfiprintf_r+0x248>)
 800624e:	429d      	cmp	r5, r3
 8006250:	bf08      	it	eq
 8006252:	68f5      	ldreq	r5, [r6, #12]
 8006254:	e7da      	b.n	800620c <_vfiprintf_r+0x20>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	0598      	lsls	r0, r3, #22
 800625a:	d4ed      	bmi.n	8006238 <_vfiprintf_r+0x4c>
 800625c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800625e:	f003 fab1 	bl	80097c4 <__retarget_lock_release_recursive>
 8006262:	e7e9      	b.n	8006238 <_vfiprintf_r+0x4c>
 8006264:	2300      	movs	r3, #0
 8006266:	9309      	str	r3, [sp, #36]	; 0x24
 8006268:	2320      	movs	r3, #32
 800626a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800626e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006272:	2330      	movs	r3, #48	; 0x30
 8006274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006438 <_vfiprintf_r+0x24c>
 8006278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800627c:	f04f 0901 	mov.w	r9, #1
 8006280:	4623      	mov	r3, r4
 8006282:	469a      	mov	sl, r3
 8006284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006288:	b10a      	cbz	r2, 800628e <_vfiprintf_r+0xa2>
 800628a:	2a25      	cmp	r2, #37	; 0x25
 800628c:	d1f9      	bne.n	8006282 <_vfiprintf_r+0x96>
 800628e:	ebba 0b04 	subs.w	fp, sl, r4
 8006292:	d00b      	beq.n	80062ac <_vfiprintf_r+0xc0>
 8006294:	465b      	mov	r3, fp
 8006296:	4622      	mov	r2, r4
 8006298:	4629      	mov	r1, r5
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ff93 	bl	80061c6 <__sfputs_r>
 80062a0:	3001      	adds	r0, #1
 80062a2:	f000 80aa 	beq.w	80063fa <_vfiprintf_r+0x20e>
 80062a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a8:	445a      	add	r2, fp
 80062aa:	9209      	str	r2, [sp, #36]	; 0x24
 80062ac:	f89a 3000 	ldrb.w	r3, [sl]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80a2 	beq.w	80063fa <_vfiprintf_r+0x20e>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c0:	f10a 0a01 	add.w	sl, sl, #1
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	9307      	str	r3, [sp, #28]
 80062c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062cc:	931a      	str	r3, [sp, #104]	; 0x68
 80062ce:	4654      	mov	r4, sl
 80062d0:	2205      	movs	r2, #5
 80062d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d6:	4858      	ldr	r0, [pc, #352]	; (8006438 <_vfiprintf_r+0x24c>)
 80062d8:	f7f9 ffaa 	bl	8000230 <memchr>
 80062dc:	9a04      	ldr	r2, [sp, #16]
 80062de:	b9d8      	cbnz	r0, 8006318 <_vfiprintf_r+0x12c>
 80062e0:	06d1      	lsls	r1, r2, #27
 80062e2:	bf44      	itt	mi
 80062e4:	2320      	movmi	r3, #32
 80062e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ea:	0713      	lsls	r3, r2, #28
 80062ec:	bf44      	itt	mi
 80062ee:	232b      	movmi	r3, #43	; 0x2b
 80062f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f4:	f89a 3000 	ldrb.w	r3, [sl]
 80062f8:	2b2a      	cmp	r3, #42	; 0x2a
 80062fa:	d015      	beq.n	8006328 <_vfiprintf_r+0x13c>
 80062fc:	9a07      	ldr	r2, [sp, #28]
 80062fe:	4654      	mov	r4, sl
 8006300:	2000      	movs	r0, #0
 8006302:	f04f 0c0a 	mov.w	ip, #10
 8006306:	4621      	mov	r1, r4
 8006308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630c:	3b30      	subs	r3, #48	; 0x30
 800630e:	2b09      	cmp	r3, #9
 8006310:	d94e      	bls.n	80063b0 <_vfiprintf_r+0x1c4>
 8006312:	b1b0      	cbz	r0, 8006342 <_vfiprintf_r+0x156>
 8006314:	9207      	str	r2, [sp, #28]
 8006316:	e014      	b.n	8006342 <_vfiprintf_r+0x156>
 8006318:	eba0 0308 	sub.w	r3, r0, r8
 800631c:	fa09 f303 	lsl.w	r3, r9, r3
 8006320:	4313      	orrs	r3, r2
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	46a2      	mov	sl, r4
 8006326:	e7d2      	b.n	80062ce <_vfiprintf_r+0xe2>
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	1d19      	adds	r1, r3, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	9103      	str	r1, [sp, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	bfbb      	ittet	lt
 8006334:	425b      	neglt	r3, r3
 8006336:	f042 0202 	orrlt.w	r2, r2, #2
 800633a:	9307      	strge	r3, [sp, #28]
 800633c:	9307      	strlt	r3, [sp, #28]
 800633e:	bfb8      	it	lt
 8006340:	9204      	strlt	r2, [sp, #16]
 8006342:	7823      	ldrb	r3, [r4, #0]
 8006344:	2b2e      	cmp	r3, #46	; 0x2e
 8006346:	d10c      	bne.n	8006362 <_vfiprintf_r+0x176>
 8006348:	7863      	ldrb	r3, [r4, #1]
 800634a:	2b2a      	cmp	r3, #42	; 0x2a
 800634c:	d135      	bne.n	80063ba <_vfiprintf_r+0x1ce>
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	9203      	str	r2, [sp, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfb8      	it	lt
 800635a:	f04f 33ff 	movlt.w	r3, #4294967295
 800635e:	3402      	adds	r4, #2
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006448 <_vfiprintf_r+0x25c>
 8006366:	7821      	ldrb	r1, [r4, #0]
 8006368:	2203      	movs	r2, #3
 800636a:	4650      	mov	r0, sl
 800636c:	f7f9 ff60 	bl	8000230 <memchr>
 8006370:	b140      	cbz	r0, 8006384 <_vfiprintf_r+0x198>
 8006372:	2340      	movs	r3, #64	; 0x40
 8006374:	eba0 000a 	sub.w	r0, r0, sl
 8006378:	fa03 f000 	lsl.w	r0, r3, r0
 800637c:	9b04      	ldr	r3, [sp, #16]
 800637e:	4303      	orrs	r3, r0
 8006380:	3401      	adds	r4, #1
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006388:	482c      	ldr	r0, [pc, #176]	; (800643c <_vfiprintf_r+0x250>)
 800638a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800638e:	2206      	movs	r2, #6
 8006390:	f7f9 ff4e 	bl	8000230 <memchr>
 8006394:	2800      	cmp	r0, #0
 8006396:	d03f      	beq.n	8006418 <_vfiprintf_r+0x22c>
 8006398:	4b29      	ldr	r3, [pc, #164]	; (8006440 <_vfiprintf_r+0x254>)
 800639a:	bb1b      	cbnz	r3, 80063e4 <_vfiprintf_r+0x1f8>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	3307      	adds	r3, #7
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	3308      	adds	r3, #8
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063aa:	443b      	add	r3, r7
 80063ac:	9309      	str	r3, [sp, #36]	; 0x24
 80063ae:	e767      	b.n	8006280 <_vfiprintf_r+0x94>
 80063b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b4:	460c      	mov	r4, r1
 80063b6:	2001      	movs	r0, #1
 80063b8:	e7a5      	b.n	8006306 <_vfiprintf_r+0x11a>
 80063ba:	2300      	movs	r3, #0
 80063bc:	3401      	adds	r4, #1
 80063be:	9305      	str	r3, [sp, #20]
 80063c0:	4619      	mov	r1, r3
 80063c2:	f04f 0c0a 	mov.w	ip, #10
 80063c6:	4620      	mov	r0, r4
 80063c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063cc:	3a30      	subs	r2, #48	; 0x30
 80063ce:	2a09      	cmp	r2, #9
 80063d0:	d903      	bls.n	80063da <_vfiprintf_r+0x1ee>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0c5      	beq.n	8006362 <_vfiprintf_r+0x176>
 80063d6:	9105      	str	r1, [sp, #20]
 80063d8:	e7c3      	b.n	8006362 <_vfiprintf_r+0x176>
 80063da:	fb0c 2101 	mla	r1, ip, r1, r2
 80063de:	4604      	mov	r4, r0
 80063e0:	2301      	movs	r3, #1
 80063e2:	e7f0      	b.n	80063c6 <_vfiprintf_r+0x1da>
 80063e4:	ab03      	add	r3, sp, #12
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	462a      	mov	r2, r5
 80063ea:	4b16      	ldr	r3, [pc, #88]	; (8006444 <_vfiprintf_r+0x258>)
 80063ec:	a904      	add	r1, sp, #16
 80063ee:	4630      	mov	r0, r6
 80063f0:	f000 f8cc 	bl	800658c <_printf_float>
 80063f4:	4607      	mov	r7, r0
 80063f6:	1c78      	adds	r0, r7, #1
 80063f8:	d1d6      	bne.n	80063a8 <_vfiprintf_r+0x1bc>
 80063fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063fc:	07d9      	lsls	r1, r3, #31
 80063fe:	d405      	bmi.n	800640c <_vfiprintf_r+0x220>
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	059a      	lsls	r2, r3, #22
 8006404:	d402      	bmi.n	800640c <_vfiprintf_r+0x220>
 8006406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006408:	f003 f9dc 	bl	80097c4 <__retarget_lock_release_recursive>
 800640c:	89ab      	ldrh	r3, [r5, #12]
 800640e:	065b      	lsls	r3, r3, #25
 8006410:	f53f af12 	bmi.w	8006238 <_vfiprintf_r+0x4c>
 8006414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006416:	e711      	b.n	800623c <_vfiprintf_r+0x50>
 8006418:	ab03      	add	r3, sp, #12
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	462a      	mov	r2, r5
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <_vfiprintf_r+0x258>)
 8006420:	a904      	add	r1, sp, #16
 8006422:	4630      	mov	r0, r6
 8006424:	f000 fb56 	bl	8006ad4 <_printf_i>
 8006428:	e7e4      	b.n	80063f4 <_vfiprintf_r+0x208>
 800642a:	bf00      	nop
 800642c:	0800bed0 	.word	0x0800bed0
 8006430:	0800bef0 	.word	0x0800bef0
 8006434:	0800beb0 	.word	0x0800beb0
 8006438:	0800bc28 	.word	0x0800bc28
 800643c:	0800bc32 	.word	0x0800bc32
 8006440:	0800658d 	.word	0x0800658d
 8006444:	080061c7 	.word	0x080061c7
 8006448:	0800bc2e 	.word	0x0800bc2e

0800644c <__cvt>:
 800644c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	ec55 4b10 	vmov	r4, r5, d0
 8006454:	2d00      	cmp	r5, #0
 8006456:	460e      	mov	r6, r1
 8006458:	4619      	mov	r1, r3
 800645a:	462b      	mov	r3, r5
 800645c:	bfbb      	ittet	lt
 800645e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006462:	461d      	movlt	r5, r3
 8006464:	2300      	movge	r3, #0
 8006466:	232d      	movlt	r3, #45	; 0x2d
 8006468:	700b      	strb	r3, [r1, #0]
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006470:	4691      	mov	r9, r2
 8006472:	f023 0820 	bic.w	r8, r3, #32
 8006476:	bfbc      	itt	lt
 8006478:	4622      	movlt	r2, r4
 800647a:	4614      	movlt	r4, r2
 800647c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006480:	d005      	beq.n	800648e <__cvt+0x42>
 8006482:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006486:	d100      	bne.n	800648a <__cvt+0x3e>
 8006488:	3601      	adds	r6, #1
 800648a:	2102      	movs	r1, #2
 800648c:	e000      	b.n	8006490 <__cvt+0x44>
 800648e:	2103      	movs	r1, #3
 8006490:	ab03      	add	r3, sp, #12
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	ab02      	add	r3, sp, #8
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	ec45 4b10 	vmov	d0, r4, r5
 800649c:	4653      	mov	r3, sl
 800649e:	4632      	mov	r2, r6
 80064a0:	f001 fe76 	bl	8008190 <_dtoa_r>
 80064a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064a8:	4607      	mov	r7, r0
 80064aa:	d102      	bne.n	80064b2 <__cvt+0x66>
 80064ac:	f019 0f01 	tst.w	r9, #1
 80064b0:	d022      	beq.n	80064f8 <__cvt+0xac>
 80064b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064b6:	eb07 0906 	add.w	r9, r7, r6
 80064ba:	d110      	bne.n	80064de <__cvt+0x92>
 80064bc:	783b      	ldrb	r3, [r7, #0]
 80064be:	2b30      	cmp	r3, #48	; 0x30
 80064c0:	d10a      	bne.n	80064d8 <__cvt+0x8c>
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7fa fb25 	bl	8000b18 <__aeabi_dcmpeq>
 80064ce:	b918      	cbnz	r0, 80064d8 <__cvt+0x8c>
 80064d0:	f1c6 0601 	rsb	r6, r6, #1
 80064d4:	f8ca 6000 	str.w	r6, [sl]
 80064d8:	f8da 3000 	ldr.w	r3, [sl]
 80064dc:	4499      	add	r9, r3
 80064de:	2200      	movs	r2, #0
 80064e0:	2300      	movs	r3, #0
 80064e2:	4620      	mov	r0, r4
 80064e4:	4629      	mov	r1, r5
 80064e6:	f7fa fb17 	bl	8000b18 <__aeabi_dcmpeq>
 80064ea:	b108      	cbz	r0, 80064f0 <__cvt+0xa4>
 80064ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80064f0:	2230      	movs	r2, #48	; 0x30
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	454b      	cmp	r3, r9
 80064f6:	d307      	bcc.n	8006508 <__cvt+0xbc>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064fc:	1bdb      	subs	r3, r3, r7
 80064fe:	4638      	mov	r0, r7
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	b004      	add	sp, #16
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	9103      	str	r1, [sp, #12]
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e7f0      	b.n	80064f2 <__cvt+0xa6>

08006510 <__exponent>:
 8006510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006512:	4603      	mov	r3, r0
 8006514:	2900      	cmp	r1, #0
 8006516:	bfb8      	it	lt
 8006518:	4249      	neglt	r1, r1
 800651a:	f803 2b02 	strb.w	r2, [r3], #2
 800651e:	bfb4      	ite	lt
 8006520:	222d      	movlt	r2, #45	; 0x2d
 8006522:	222b      	movge	r2, #43	; 0x2b
 8006524:	2909      	cmp	r1, #9
 8006526:	7042      	strb	r2, [r0, #1]
 8006528:	dd2a      	ble.n	8006580 <__exponent+0x70>
 800652a:	f10d 0407 	add.w	r4, sp, #7
 800652e:	46a4      	mov	ip, r4
 8006530:	270a      	movs	r7, #10
 8006532:	46a6      	mov	lr, r4
 8006534:	460a      	mov	r2, r1
 8006536:	fb91 f6f7 	sdiv	r6, r1, r7
 800653a:	fb07 1516 	mls	r5, r7, r6, r1
 800653e:	3530      	adds	r5, #48	; 0x30
 8006540:	2a63      	cmp	r2, #99	; 0x63
 8006542:	f104 34ff 	add.w	r4, r4, #4294967295
 8006546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800654a:	4631      	mov	r1, r6
 800654c:	dcf1      	bgt.n	8006532 <__exponent+0x22>
 800654e:	3130      	adds	r1, #48	; 0x30
 8006550:	f1ae 0502 	sub.w	r5, lr, #2
 8006554:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006558:	1c44      	adds	r4, r0, #1
 800655a:	4629      	mov	r1, r5
 800655c:	4561      	cmp	r1, ip
 800655e:	d30a      	bcc.n	8006576 <__exponent+0x66>
 8006560:	f10d 0209 	add.w	r2, sp, #9
 8006564:	eba2 020e 	sub.w	r2, r2, lr
 8006568:	4565      	cmp	r5, ip
 800656a:	bf88      	it	hi
 800656c:	2200      	movhi	r2, #0
 800656e:	4413      	add	r3, r2
 8006570:	1a18      	subs	r0, r3, r0
 8006572:	b003      	add	sp, #12
 8006574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800657a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800657e:	e7ed      	b.n	800655c <__exponent+0x4c>
 8006580:	2330      	movs	r3, #48	; 0x30
 8006582:	3130      	adds	r1, #48	; 0x30
 8006584:	7083      	strb	r3, [r0, #2]
 8006586:	70c1      	strb	r1, [r0, #3]
 8006588:	1d03      	adds	r3, r0, #4
 800658a:	e7f1      	b.n	8006570 <__exponent+0x60>

0800658c <_printf_float>:
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	ed2d 8b02 	vpush	{d8}
 8006594:	b08d      	sub	sp, #52	; 0x34
 8006596:	460c      	mov	r4, r1
 8006598:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800659c:	4616      	mov	r6, r2
 800659e:	461f      	mov	r7, r3
 80065a0:	4605      	mov	r5, r0
 80065a2:	f003 f909 	bl	80097b8 <_localeconv_r>
 80065a6:	f8d0 a000 	ldr.w	sl, [r0]
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7f9 fe38 	bl	8000220 <strlen>
 80065b0:	2300      	movs	r3, #0
 80065b2:	930a      	str	r3, [sp, #40]	; 0x28
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	f8d8 3000 	ldr.w	r3, [r8]
 80065bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065c0:	3307      	adds	r3, #7
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	f103 0208 	add.w	r2, r3, #8
 80065ca:	f8c8 2000 	str.w	r2, [r8]
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065de:	9307      	str	r3, [sp, #28]
 80065e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80065e4:	ee08 0a10 	vmov	s16, r0
 80065e8:	4b9f      	ldr	r3, [pc, #636]	; (8006868 <_printf_float+0x2dc>)
 80065ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ee:	f04f 32ff 	mov.w	r2, #4294967295
 80065f2:	f7fa fac3 	bl	8000b7c <__aeabi_dcmpun>
 80065f6:	bb88      	cbnz	r0, 800665c <_printf_float+0xd0>
 80065f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fc:	4b9a      	ldr	r3, [pc, #616]	; (8006868 <_printf_float+0x2dc>)
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006602:	f7fa fa9d 	bl	8000b40 <__aeabi_dcmple>
 8006606:	bb48      	cbnz	r0, 800665c <_printf_float+0xd0>
 8006608:	2200      	movs	r2, #0
 800660a:	2300      	movs	r3, #0
 800660c:	4640      	mov	r0, r8
 800660e:	4649      	mov	r1, r9
 8006610:	f7fa fa8c 	bl	8000b2c <__aeabi_dcmplt>
 8006614:	b110      	cbz	r0, 800661c <_printf_float+0x90>
 8006616:	232d      	movs	r3, #45	; 0x2d
 8006618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661c:	4b93      	ldr	r3, [pc, #588]	; (800686c <_printf_float+0x2e0>)
 800661e:	4894      	ldr	r0, [pc, #592]	; (8006870 <_printf_float+0x2e4>)
 8006620:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006624:	bf94      	ite	ls
 8006626:	4698      	movls	r8, r3
 8006628:	4680      	movhi	r8, r0
 800662a:	2303      	movs	r3, #3
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	9b05      	ldr	r3, [sp, #20]
 8006630:	f023 0204 	bic.w	r2, r3, #4
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	f04f 0900 	mov.w	r9, #0
 800663a:	9700      	str	r7, [sp, #0]
 800663c:	4633      	mov	r3, r6
 800663e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006640:	4621      	mov	r1, r4
 8006642:	4628      	mov	r0, r5
 8006644:	f000 f9d8 	bl	80069f8 <_printf_common>
 8006648:	3001      	adds	r0, #1
 800664a:	f040 8090 	bne.w	800676e <_printf_float+0x1e2>
 800664e:	f04f 30ff 	mov.w	r0, #4294967295
 8006652:	b00d      	add	sp, #52	; 0x34
 8006654:	ecbd 8b02 	vpop	{d8}
 8006658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	4640      	mov	r0, r8
 8006662:	4649      	mov	r1, r9
 8006664:	f7fa fa8a 	bl	8000b7c <__aeabi_dcmpun>
 8006668:	b140      	cbz	r0, 800667c <_printf_float+0xf0>
 800666a:	464b      	mov	r3, r9
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfbc      	itt	lt
 8006670:	232d      	movlt	r3, #45	; 0x2d
 8006672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006676:	487f      	ldr	r0, [pc, #508]	; (8006874 <_printf_float+0x2e8>)
 8006678:	4b7f      	ldr	r3, [pc, #508]	; (8006878 <_printf_float+0x2ec>)
 800667a:	e7d1      	b.n	8006620 <_printf_float+0x94>
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006682:	9206      	str	r2, [sp, #24]
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	d13f      	bne.n	8006708 <_printf_float+0x17c>
 8006688:	2306      	movs	r3, #6
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	9b05      	ldr	r3, [sp, #20]
 800668e:	6861      	ldr	r1, [r4, #4]
 8006690:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006694:	2300      	movs	r3, #0
 8006696:	9303      	str	r3, [sp, #12]
 8006698:	ab0a      	add	r3, sp, #40	; 0x28
 800669a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800669e:	ab09      	add	r3, sp, #36	; 0x24
 80066a0:	ec49 8b10 	vmov	d0, r8, r9
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066ac:	4628      	mov	r0, r5
 80066ae:	f7ff fecd 	bl	800644c <__cvt>
 80066b2:	9b06      	ldr	r3, [sp, #24]
 80066b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066b6:	2b47      	cmp	r3, #71	; 0x47
 80066b8:	4680      	mov	r8, r0
 80066ba:	d108      	bne.n	80066ce <_printf_float+0x142>
 80066bc:	1cc8      	adds	r0, r1, #3
 80066be:	db02      	blt.n	80066c6 <_printf_float+0x13a>
 80066c0:	6863      	ldr	r3, [r4, #4]
 80066c2:	4299      	cmp	r1, r3
 80066c4:	dd41      	ble.n	800674a <_printf_float+0x1be>
 80066c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80066ca:	fa5f fb8b 	uxtb.w	fp, fp
 80066ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066d2:	d820      	bhi.n	8006716 <_printf_float+0x18a>
 80066d4:	3901      	subs	r1, #1
 80066d6:	465a      	mov	r2, fp
 80066d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066dc:	9109      	str	r1, [sp, #36]	; 0x24
 80066de:	f7ff ff17 	bl	8006510 <__exponent>
 80066e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e4:	1813      	adds	r3, r2, r0
 80066e6:	2a01      	cmp	r2, #1
 80066e8:	4681      	mov	r9, r0
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	dc02      	bgt.n	80066f4 <_printf_float+0x168>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	07d2      	lsls	r2, r2, #31
 80066f2:	d501      	bpl.n	80066f8 <_printf_float+0x16c>
 80066f4:	3301      	adds	r3, #1
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d09c      	beq.n	800663a <_printf_float+0xae>
 8006700:	232d      	movs	r3, #45	; 0x2d
 8006702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006706:	e798      	b.n	800663a <_printf_float+0xae>
 8006708:	9a06      	ldr	r2, [sp, #24]
 800670a:	2a47      	cmp	r2, #71	; 0x47
 800670c:	d1be      	bne.n	800668c <_printf_float+0x100>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1bc      	bne.n	800668c <_printf_float+0x100>
 8006712:	2301      	movs	r3, #1
 8006714:	e7b9      	b.n	800668a <_printf_float+0xfe>
 8006716:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800671a:	d118      	bne.n	800674e <_printf_float+0x1c2>
 800671c:	2900      	cmp	r1, #0
 800671e:	6863      	ldr	r3, [r4, #4]
 8006720:	dd0b      	ble.n	800673a <_printf_float+0x1ae>
 8006722:	6121      	str	r1, [r4, #16]
 8006724:	b913      	cbnz	r3, 800672c <_printf_float+0x1a0>
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	07d0      	lsls	r0, r2, #31
 800672a:	d502      	bpl.n	8006732 <_printf_float+0x1a6>
 800672c:	3301      	adds	r3, #1
 800672e:	440b      	add	r3, r1
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	65a1      	str	r1, [r4, #88]	; 0x58
 8006734:	f04f 0900 	mov.w	r9, #0
 8006738:	e7de      	b.n	80066f8 <_printf_float+0x16c>
 800673a:	b913      	cbnz	r3, 8006742 <_printf_float+0x1b6>
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	07d2      	lsls	r2, r2, #31
 8006740:	d501      	bpl.n	8006746 <_printf_float+0x1ba>
 8006742:	3302      	adds	r3, #2
 8006744:	e7f4      	b.n	8006730 <_printf_float+0x1a4>
 8006746:	2301      	movs	r3, #1
 8006748:	e7f2      	b.n	8006730 <_printf_float+0x1a4>
 800674a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006750:	4299      	cmp	r1, r3
 8006752:	db05      	blt.n	8006760 <_printf_float+0x1d4>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	07d8      	lsls	r0, r3, #31
 800675a:	d5ea      	bpl.n	8006732 <_printf_float+0x1a6>
 800675c:	1c4b      	adds	r3, r1, #1
 800675e:	e7e7      	b.n	8006730 <_printf_float+0x1a4>
 8006760:	2900      	cmp	r1, #0
 8006762:	bfd4      	ite	le
 8006764:	f1c1 0202 	rsble	r2, r1, #2
 8006768:	2201      	movgt	r2, #1
 800676a:	4413      	add	r3, r2
 800676c:	e7e0      	b.n	8006730 <_printf_float+0x1a4>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	055a      	lsls	r2, r3, #21
 8006772:	d407      	bmi.n	8006784 <_printf_float+0x1f8>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	4642      	mov	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d12c      	bne.n	80067dc <_printf_float+0x250>
 8006782:	e764      	b.n	800664e <_printf_float+0xc2>
 8006784:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006788:	f240 80e0 	bls.w	800694c <_printf_float+0x3c0>
 800678c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	f7fa f9c0 	bl	8000b18 <__aeabi_dcmpeq>
 8006798:	2800      	cmp	r0, #0
 800679a:	d034      	beq.n	8006806 <_printf_float+0x27a>
 800679c:	4a37      	ldr	r2, [pc, #220]	; (800687c <_printf_float+0x2f0>)
 800679e:	2301      	movs	r3, #1
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f af51 	beq.w	800664e <_printf_float+0xc2>
 80067ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b0:	429a      	cmp	r2, r3
 80067b2:	db02      	blt.n	80067ba <_printf_float+0x22e>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07d8      	lsls	r0, r3, #31
 80067b8:	d510      	bpl.n	80067dc <_printf_float+0x250>
 80067ba:	ee18 3a10 	vmov	r3, s16
 80067be:	4652      	mov	r2, sl
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	f43f af41 	beq.w	800664e <_printf_float+0xc2>
 80067cc:	f04f 0800 	mov.w	r8, #0
 80067d0:	f104 091a 	add.w	r9, r4, #26
 80067d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d6:	3b01      	subs	r3, #1
 80067d8:	4543      	cmp	r3, r8
 80067da:	dc09      	bgt.n	80067f0 <_printf_float+0x264>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	f100 8105 	bmi.w	80069ee <_printf_float+0x462>
 80067e4:	68e0      	ldr	r0, [r4, #12]
 80067e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e8:	4298      	cmp	r0, r3
 80067ea:	bfb8      	it	lt
 80067ec:	4618      	movlt	r0, r3
 80067ee:	e730      	b.n	8006652 <_printf_float+0xc6>
 80067f0:	2301      	movs	r3, #1
 80067f2:	464a      	mov	r2, r9
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af27 	beq.w	800664e <_printf_float+0xc2>
 8006800:	f108 0801 	add.w	r8, r8, #1
 8006804:	e7e6      	b.n	80067d4 <_printf_float+0x248>
 8006806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	dc39      	bgt.n	8006880 <_printf_float+0x2f4>
 800680c:	4a1b      	ldr	r2, [pc, #108]	; (800687c <_printf_float+0x2f0>)
 800680e:	2301      	movs	r3, #1
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f af19 	beq.w	800664e <_printf_float+0xc2>
 800681c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006820:	4313      	orrs	r3, r2
 8006822:	d102      	bne.n	800682a <_printf_float+0x29e>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d5d8      	bpl.n	80067dc <_printf_float+0x250>
 800682a:	ee18 3a10 	vmov	r3, s16
 800682e:	4652      	mov	r2, sl
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af09 	beq.w	800664e <_printf_float+0xc2>
 800683c:	f04f 0900 	mov.w	r9, #0
 8006840:	f104 0a1a 	add.w	sl, r4, #26
 8006844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006846:	425b      	negs	r3, r3
 8006848:	454b      	cmp	r3, r9
 800684a:	dc01      	bgt.n	8006850 <_printf_float+0x2c4>
 800684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684e:	e792      	b.n	8006776 <_printf_float+0x1ea>
 8006850:	2301      	movs	r3, #1
 8006852:	4652      	mov	r2, sl
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f aef7 	beq.w	800664e <_printf_float+0xc2>
 8006860:	f109 0901 	add.w	r9, r9, #1
 8006864:	e7ee      	b.n	8006844 <_printf_float+0x2b8>
 8006866:	bf00      	nop
 8006868:	7fefffff 	.word	0x7fefffff
 800686c:	0800bc39 	.word	0x0800bc39
 8006870:	0800bc3d 	.word	0x0800bc3d
 8006874:	0800bc45 	.word	0x0800bc45
 8006878:	0800bc41 	.word	0x0800bc41
 800687c:	0800bc49 	.word	0x0800bc49
 8006880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006884:	429a      	cmp	r2, r3
 8006886:	bfa8      	it	ge
 8006888:	461a      	movge	r2, r3
 800688a:	2a00      	cmp	r2, #0
 800688c:	4691      	mov	r9, r2
 800688e:	dc37      	bgt.n	8006900 <_printf_float+0x374>
 8006890:	f04f 0b00 	mov.w	fp, #0
 8006894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006898:	f104 021a 	add.w	r2, r4, #26
 800689c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689e:	9305      	str	r3, [sp, #20]
 80068a0:	eba3 0309 	sub.w	r3, r3, r9
 80068a4:	455b      	cmp	r3, fp
 80068a6:	dc33      	bgt.n	8006910 <_printf_float+0x384>
 80068a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ac:	429a      	cmp	r2, r3
 80068ae:	db3b      	blt.n	8006928 <_printf_float+0x39c>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	07da      	lsls	r2, r3, #31
 80068b4:	d438      	bmi.n	8006928 <_printf_float+0x39c>
 80068b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b8:	9a05      	ldr	r2, [sp, #20]
 80068ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068bc:	1a9a      	subs	r2, r3, r2
 80068be:	eba3 0901 	sub.w	r9, r3, r1
 80068c2:	4591      	cmp	r9, r2
 80068c4:	bfa8      	it	ge
 80068c6:	4691      	movge	r9, r2
 80068c8:	f1b9 0f00 	cmp.w	r9, #0
 80068cc:	dc35      	bgt.n	800693a <_printf_float+0x3ae>
 80068ce:	f04f 0800 	mov.w	r8, #0
 80068d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d6:	f104 0a1a 	add.w	sl, r4, #26
 80068da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	eba3 0309 	sub.w	r3, r3, r9
 80068e4:	4543      	cmp	r3, r8
 80068e6:	f77f af79 	ble.w	80067dc <_printf_float+0x250>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4652      	mov	r2, sl
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f aeaa 	beq.w	800664e <_printf_float+0xc2>
 80068fa:	f108 0801 	add.w	r8, r8, #1
 80068fe:	e7ec      	b.n	80068da <_printf_float+0x34e>
 8006900:	4613      	mov	r3, r2
 8006902:	4631      	mov	r1, r6
 8006904:	4642      	mov	r2, r8
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	d1c0      	bne.n	8006890 <_printf_float+0x304>
 800690e:	e69e      	b.n	800664e <_printf_float+0xc2>
 8006910:	2301      	movs	r3, #1
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	9205      	str	r2, [sp, #20]
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f ae97 	beq.w	800664e <_printf_float+0xc2>
 8006920:	9a05      	ldr	r2, [sp, #20]
 8006922:	f10b 0b01 	add.w	fp, fp, #1
 8006926:	e7b9      	b.n	800689c <_printf_float+0x310>
 8006928:	ee18 3a10 	vmov	r3, s16
 800692c:	4652      	mov	r2, sl
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d1be      	bne.n	80068b6 <_printf_float+0x32a>
 8006938:	e689      	b.n	800664e <_printf_float+0xc2>
 800693a:	9a05      	ldr	r2, [sp, #20]
 800693c:	464b      	mov	r3, r9
 800693e:	4442      	add	r2, r8
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	d1c1      	bne.n	80068ce <_printf_float+0x342>
 800694a:	e680      	b.n	800664e <_printf_float+0xc2>
 800694c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800694e:	2a01      	cmp	r2, #1
 8006950:	dc01      	bgt.n	8006956 <_printf_float+0x3ca>
 8006952:	07db      	lsls	r3, r3, #31
 8006954:	d538      	bpl.n	80069c8 <_printf_float+0x43c>
 8006956:	2301      	movs	r3, #1
 8006958:	4642      	mov	r2, r8
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	f43f ae74 	beq.w	800664e <_printf_float+0xc2>
 8006966:	ee18 3a10 	vmov	r3, s16
 800696a:	4652      	mov	r2, sl
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f ae6b 	beq.w	800664e <_printf_float+0xc2>
 8006978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800697c:	2200      	movs	r2, #0
 800697e:	2300      	movs	r3, #0
 8006980:	f7fa f8ca 	bl	8000b18 <__aeabi_dcmpeq>
 8006984:	b9d8      	cbnz	r0, 80069be <_printf_float+0x432>
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006988:	f108 0201 	add.w	r2, r8, #1
 800698c:	3b01      	subs	r3, #1
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	d10e      	bne.n	80069b6 <_printf_float+0x42a>
 8006998:	e659      	b.n	800664e <_printf_float+0xc2>
 800699a:	2301      	movs	r3, #1
 800699c:	4652      	mov	r2, sl
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f ae52 	beq.w	800664e <_printf_float+0xc2>
 80069aa:	f108 0801 	add.w	r8, r8, #1
 80069ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b0:	3b01      	subs	r3, #1
 80069b2:	4543      	cmp	r3, r8
 80069b4:	dcf1      	bgt.n	800699a <_printf_float+0x40e>
 80069b6:	464b      	mov	r3, r9
 80069b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069bc:	e6dc      	b.n	8006778 <_printf_float+0x1ec>
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	f104 0a1a 	add.w	sl, r4, #26
 80069c6:	e7f2      	b.n	80069ae <_printf_float+0x422>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4642      	mov	r2, r8
 80069cc:	e7df      	b.n	800698e <_printf_float+0x402>
 80069ce:	2301      	movs	r3, #1
 80069d0:	464a      	mov	r2, r9
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f ae38 	beq.w	800664e <_printf_float+0xc2>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069e6:	1a5b      	subs	r3, r3, r1
 80069e8:	4543      	cmp	r3, r8
 80069ea:	dcf0      	bgt.n	80069ce <_printf_float+0x442>
 80069ec:	e6fa      	b.n	80067e4 <_printf_float+0x258>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	f104 0919 	add.w	r9, r4, #25
 80069f6:	e7f4      	b.n	80069e2 <_printf_float+0x456>

080069f8 <_printf_common>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	4616      	mov	r6, r2
 80069fe:	4699      	mov	r9, r3
 8006a00:	688a      	ldr	r2, [r1, #8]
 8006a02:	690b      	ldr	r3, [r1, #16]
 8006a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	bfb8      	it	lt
 8006a0c:	4613      	movlt	r3, r2
 8006a0e:	6033      	str	r3, [r6, #0]
 8006a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b10a      	cbz	r2, 8006a1e <_printf_common+0x26>
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	0699      	lsls	r1, r3, #26
 8006a22:	bf42      	ittt	mi
 8006a24:	6833      	ldrmi	r3, [r6, #0]
 8006a26:	3302      	addmi	r3, #2
 8006a28:	6033      	strmi	r3, [r6, #0]
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	f015 0506 	ands.w	r5, r5, #6
 8006a30:	d106      	bne.n	8006a40 <_printf_common+0x48>
 8006a32:	f104 0a19 	add.w	sl, r4, #25
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	6832      	ldr	r2, [r6, #0]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dc26      	bgt.n	8006a8e <_printf_common+0x96>
 8006a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a44:	1e13      	subs	r3, r2, #0
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	bf18      	it	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	0692      	lsls	r2, r2, #26
 8006a4e:	d42b      	bmi.n	8006aa8 <_printf_common+0xb0>
 8006a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a54:	4649      	mov	r1, r9
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c0      	blx	r8
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d01e      	beq.n	8006a9c <_printf_common+0xa4>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	68e5      	ldr	r5, [r4, #12]
 8006a62:	6832      	ldr	r2, [r6, #0]
 8006a64:	f003 0306 	and.w	r3, r3, #6
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	bf08      	it	eq
 8006a6c:	1aad      	subeq	r5, r5, r2
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	bf0c      	ite	eq
 8006a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a78:	2500      	movne	r5, #0
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bfc4      	itt	gt
 8006a7e:	1a9b      	subgt	r3, r3, r2
 8006a80:	18ed      	addgt	r5, r5, r3
 8006a82:	2600      	movs	r6, #0
 8006a84:	341a      	adds	r4, #26
 8006a86:	42b5      	cmp	r5, r6
 8006a88:	d11a      	bne.n	8006ac0 <_printf_common+0xc8>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e008      	b.n	8006aa0 <_printf_common+0xa8>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4649      	mov	r1, r9
 8006a94:	4638      	mov	r0, r7
 8006a96:	47c0      	blx	r8
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d103      	bne.n	8006aa4 <_printf_common+0xac>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	e7c6      	b.n	8006a36 <_printf_common+0x3e>
 8006aa8:	18e1      	adds	r1, r4, r3
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	2030      	movs	r0, #48	; 0x30
 8006aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ab2:	4422      	add	r2, r4
 8006ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006abc:	3302      	adds	r3, #2
 8006abe:	e7c7      	b.n	8006a50 <_printf_common+0x58>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	47c0      	blx	r8
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0e6      	beq.n	8006a9c <_printf_common+0xa4>
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7d9      	b.n	8006a86 <_printf_common+0x8e>
	...

08006ad4 <_printf_i>:
 8006ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	7e0f      	ldrb	r7, [r1, #24]
 8006ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006adc:	2f78      	cmp	r7, #120	; 0x78
 8006ade:	4691      	mov	r9, r2
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aea:	d807      	bhi.n	8006afc <_printf_i+0x28>
 8006aec:	2f62      	cmp	r7, #98	; 0x62
 8006aee:	d80a      	bhi.n	8006b06 <_printf_i+0x32>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	f000 80d8 	beq.w	8006ca6 <_printf_i+0x1d2>
 8006af6:	2f58      	cmp	r7, #88	; 0x58
 8006af8:	f000 80a3 	beq.w	8006c42 <_printf_i+0x16e>
 8006afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b04:	e03a      	b.n	8006b7c <_printf_i+0xa8>
 8006b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b0a:	2b15      	cmp	r3, #21
 8006b0c:	d8f6      	bhi.n	8006afc <_printf_i+0x28>
 8006b0e:	a101      	add	r1, pc, #4	; (adr r1, 8006b14 <_printf_i+0x40>)
 8006b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b81 	.word	0x08006b81
 8006b1c:	08006afd 	.word	0x08006afd
 8006b20:	08006afd 	.word	0x08006afd
 8006b24:	08006afd 	.word	0x08006afd
 8006b28:	08006afd 	.word	0x08006afd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006afd 	.word	0x08006afd
 8006b34:	08006afd 	.word	0x08006afd
 8006b38:	08006afd 	.word	0x08006afd
 8006b3c:	08006afd 	.word	0x08006afd
 8006b40:	08006c8d 	.word	0x08006c8d
 8006b44:	08006bb1 	.word	0x08006bb1
 8006b48:	08006c6f 	.word	0x08006c6f
 8006b4c:	08006afd 	.word	0x08006afd
 8006b50:	08006afd 	.word	0x08006afd
 8006b54:	08006caf 	.word	0x08006caf
 8006b58:	08006afd 	.word	0x08006afd
 8006b5c:	08006bb1 	.word	0x08006bb1
 8006b60:	08006afd 	.word	0x08006afd
 8006b64:	08006afd 	.word	0x08006afd
 8006b68:	08006c77 	.word	0x08006c77
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	602a      	str	r2, [r5, #0]
 8006b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0a3      	b.n	8006cc8 <_printf_i+0x1f4>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	6829      	ldr	r1, [r5, #0]
 8006b84:	0606      	lsls	r6, r0, #24
 8006b86:	f101 0304 	add.w	r3, r1, #4
 8006b8a:	d50a      	bpl.n	8006ba2 <_printf_i+0xce>
 8006b8c:	680e      	ldr	r6, [r1, #0]
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	da03      	bge.n	8006b9c <_printf_i+0xc8>
 8006b94:	232d      	movs	r3, #45	; 0x2d
 8006b96:	4276      	negs	r6, r6
 8006b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b9c:	485e      	ldr	r0, [pc, #376]	; (8006d18 <_printf_i+0x244>)
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	e019      	b.n	8006bd6 <_printf_i+0x102>
 8006ba2:	680e      	ldr	r6, [r1, #0]
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006baa:	bf18      	it	ne
 8006bac:	b236      	sxthne	r6, r6
 8006bae:	e7ef      	b.n	8006b90 <_printf_i+0xbc>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	6820      	ldr	r0, [r4, #0]
 8006bb4:	1d19      	adds	r1, r3, #4
 8006bb6:	6029      	str	r1, [r5, #0]
 8006bb8:	0601      	lsls	r1, r0, #24
 8006bba:	d501      	bpl.n	8006bc0 <_printf_i+0xec>
 8006bbc:	681e      	ldr	r6, [r3, #0]
 8006bbe:	e002      	b.n	8006bc6 <_printf_i+0xf2>
 8006bc0:	0646      	lsls	r6, r0, #25
 8006bc2:	d5fb      	bpl.n	8006bbc <_printf_i+0xe8>
 8006bc4:	881e      	ldrh	r6, [r3, #0]
 8006bc6:	4854      	ldr	r0, [pc, #336]	; (8006d18 <_printf_i+0x244>)
 8006bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8006bca:	bf0c      	ite	eq
 8006bcc:	2308      	moveq	r3, #8
 8006bce:	230a      	movne	r3, #10
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bd6:	6865      	ldr	r5, [r4, #4]
 8006bd8:	60a5      	str	r5, [r4, #8]
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	bfa2      	ittt	ge
 8006bde:	6821      	ldrge	r1, [r4, #0]
 8006be0:	f021 0104 	bicge.w	r1, r1, #4
 8006be4:	6021      	strge	r1, [r4, #0]
 8006be6:	b90e      	cbnz	r6, 8006bec <_printf_i+0x118>
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	d04d      	beq.n	8006c88 <_printf_i+0x1b4>
 8006bec:	4615      	mov	r5, r2
 8006bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8006bf6:	5dc7      	ldrb	r7, [r0, r7]
 8006bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bfc:	4637      	mov	r7, r6
 8006bfe:	42bb      	cmp	r3, r7
 8006c00:	460e      	mov	r6, r1
 8006c02:	d9f4      	bls.n	8006bee <_printf_i+0x11a>
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d10b      	bne.n	8006c20 <_printf_i+0x14c>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	07de      	lsls	r6, r3, #31
 8006c0c:	d508      	bpl.n	8006c20 <_printf_i+0x14c>
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	6861      	ldr	r1, [r4, #4]
 8006c12:	4299      	cmp	r1, r3
 8006c14:	bfde      	ittt	le
 8006c16:	2330      	movle	r3, #48	; 0x30
 8006c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c20:	1b52      	subs	r2, r2, r5
 8006c22:	6122      	str	r2, [r4, #16]
 8006c24:	f8cd a000 	str.w	sl, [sp]
 8006c28:	464b      	mov	r3, r9
 8006c2a:	aa03      	add	r2, sp, #12
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4640      	mov	r0, r8
 8006c30:	f7ff fee2 	bl	80069f8 <_printf_common>
 8006c34:	3001      	adds	r0, #1
 8006c36:	d14c      	bne.n	8006cd2 <_printf_i+0x1fe>
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	b004      	add	sp, #16
 8006c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c42:	4835      	ldr	r0, [pc, #212]	; (8006d18 <_printf_i+0x244>)
 8006c44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c48:	6829      	ldr	r1, [r5, #0]
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c50:	6029      	str	r1, [r5, #0]
 8006c52:	061d      	lsls	r5, r3, #24
 8006c54:	d514      	bpl.n	8006c80 <_printf_i+0x1ac>
 8006c56:	07df      	lsls	r7, r3, #31
 8006c58:	bf44      	itt	mi
 8006c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5e:	6023      	strmi	r3, [r4, #0]
 8006c60:	b91e      	cbnz	r6, 8006c6a <_printf_i+0x196>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	f023 0320 	bic.w	r3, r3, #32
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	e7b0      	b.n	8006bd0 <_printf_i+0xfc>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	f043 0320 	orr.w	r3, r3, #32
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	2378      	movs	r3, #120	; 0x78
 8006c78:	4828      	ldr	r0, [pc, #160]	; (8006d1c <_printf_i+0x248>)
 8006c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c7e:	e7e3      	b.n	8006c48 <_printf_i+0x174>
 8006c80:	0659      	lsls	r1, r3, #25
 8006c82:	bf48      	it	mi
 8006c84:	b2b6      	uxthmi	r6, r6
 8006c86:	e7e6      	b.n	8006c56 <_printf_i+0x182>
 8006c88:	4615      	mov	r5, r2
 8006c8a:	e7bb      	b.n	8006c04 <_printf_i+0x130>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	6826      	ldr	r6, [r4, #0]
 8006c90:	6961      	ldr	r1, [r4, #20]
 8006c92:	1d18      	adds	r0, r3, #4
 8006c94:	6028      	str	r0, [r5, #0]
 8006c96:	0635      	lsls	r5, r6, #24
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	d501      	bpl.n	8006ca0 <_printf_i+0x1cc>
 8006c9c:	6019      	str	r1, [r3, #0]
 8006c9e:	e002      	b.n	8006ca6 <_printf_i+0x1d2>
 8006ca0:	0670      	lsls	r0, r6, #25
 8006ca2:	d5fb      	bpl.n	8006c9c <_printf_i+0x1c8>
 8006ca4:	8019      	strh	r1, [r3, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	4615      	mov	r5, r2
 8006cac:	e7ba      	b.n	8006c24 <_printf_i+0x150>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	1d1a      	adds	r2, r3, #4
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	681d      	ldr	r5, [r3, #0]
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7f9 fab8 	bl	8000230 <memchr>
 8006cc0:	b108      	cbz	r0, 8006cc6 <_printf_i+0x1f2>
 8006cc2:	1b40      	subs	r0, r0, r5
 8006cc4:	6060      	str	r0, [r4, #4]
 8006cc6:	6863      	ldr	r3, [r4, #4]
 8006cc8:	6123      	str	r3, [r4, #16]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd0:	e7a8      	b.n	8006c24 <_printf_i+0x150>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4640      	mov	r0, r8
 8006cda:	47d0      	blx	sl
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d0ab      	beq.n	8006c38 <_printf_i+0x164>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	079b      	lsls	r3, r3, #30
 8006ce4:	d413      	bmi.n	8006d0e <_printf_i+0x23a>
 8006ce6:	68e0      	ldr	r0, [r4, #12]
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	4298      	cmp	r0, r3
 8006cec:	bfb8      	it	lt
 8006cee:	4618      	movlt	r0, r3
 8006cf0:	e7a4      	b.n	8006c3c <_printf_i+0x168>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	47d0      	blx	sl
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d09b      	beq.n	8006c38 <_printf_i+0x164>
 8006d00:	3501      	adds	r5, #1
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	9903      	ldr	r1, [sp, #12]
 8006d06:	1a5b      	subs	r3, r3, r1
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dcf2      	bgt.n	8006cf2 <_printf_i+0x21e>
 8006d0c:	e7eb      	b.n	8006ce6 <_printf_i+0x212>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	f104 0619 	add.w	r6, r4, #25
 8006d14:	e7f5      	b.n	8006d02 <_printf_i+0x22e>
 8006d16:	bf00      	nop
 8006d18:	0800bc4b 	.word	0x0800bc4b
 8006d1c:	0800bc5c 	.word	0x0800bc5c

08006d20 <iprintf>:
 8006d20:	b40f      	push	{r0, r1, r2, r3}
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <iprintf+0x2c>)
 8006d24:	b513      	push	{r0, r1, r4, lr}
 8006d26:	681c      	ldr	r4, [r3, #0]
 8006d28:	b124      	cbz	r4, 8006d34 <iprintf+0x14>
 8006d2a:	69a3      	ldr	r3, [r4, #24]
 8006d2c:	b913      	cbnz	r3, 8006d34 <iprintf+0x14>
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f002 f936 	bl	8008fa0 <__sinit>
 8006d34:	ab05      	add	r3, sp, #20
 8006d36:	9a04      	ldr	r2, [sp, #16]
 8006d38:	68a1      	ldr	r1, [r4, #8]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f7ff fa55 	bl	80061ec <_vfiprintf_r>
 8006d42:	b002      	add	sp, #8
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	b004      	add	sp, #16
 8006d4a:	4770      	bx	lr
 8006d4c:	20000014 	.word	0x20000014

08006d50 <_puts_r>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	460e      	mov	r6, r1
 8006d54:	4605      	mov	r5, r0
 8006d56:	b118      	cbz	r0, 8006d60 <_puts_r+0x10>
 8006d58:	6983      	ldr	r3, [r0, #24]
 8006d5a:	b90b      	cbnz	r3, 8006d60 <_puts_r+0x10>
 8006d5c:	f002 f920 	bl	8008fa0 <__sinit>
 8006d60:	69ab      	ldr	r3, [r5, #24]
 8006d62:	68ac      	ldr	r4, [r5, #8]
 8006d64:	b913      	cbnz	r3, 8006d6c <_puts_r+0x1c>
 8006d66:	4628      	mov	r0, r5
 8006d68:	f002 f91a 	bl	8008fa0 <__sinit>
 8006d6c:	4b2c      	ldr	r3, [pc, #176]	; (8006e20 <_puts_r+0xd0>)
 8006d6e:	429c      	cmp	r4, r3
 8006d70:	d120      	bne.n	8006db4 <_puts_r+0x64>
 8006d72:	686c      	ldr	r4, [r5, #4]
 8006d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d76:	07db      	lsls	r3, r3, #31
 8006d78:	d405      	bmi.n	8006d86 <_puts_r+0x36>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	0598      	lsls	r0, r3, #22
 8006d7e:	d402      	bmi.n	8006d86 <_puts_r+0x36>
 8006d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d82:	f002 fd1e 	bl	80097c2 <__retarget_lock_acquire_recursive>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	d51d      	bpl.n	8006dc8 <_puts_r+0x78>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b1db      	cbz	r3, 8006dc8 <_puts_r+0x78>
 8006d90:	3e01      	subs	r6, #1
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	60a3      	str	r3, [r4, #8]
 8006d9c:	bb39      	cbnz	r1, 8006dee <_puts_r+0x9e>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da38      	bge.n	8006e14 <_puts_r+0xc4>
 8006da2:	4622      	mov	r2, r4
 8006da4:	210a      	movs	r1, #10
 8006da6:	4628      	mov	r0, r5
 8006da8:	f001 f8a0 	bl	8007eec <__swbuf_r>
 8006dac:	3001      	adds	r0, #1
 8006dae:	d011      	beq.n	8006dd4 <_puts_r+0x84>
 8006db0:	250a      	movs	r5, #10
 8006db2:	e011      	b.n	8006dd8 <_puts_r+0x88>
 8006db4:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <_puts_r+0xd4>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d101      	bne.n	8006dbe <_puts_r+0x6e>
 8006dba:	68ac      	ldr	r4, [r5, #8]
 8006dbc:	e7da      	b.n	8006d74 <_puts_r+0x24>
 8006dbe:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <_puts_r+0xd8>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	bf08      	it	eq
 8006dc4:	68ec      	ldreq	r4, [r5, #12]
 8006dc6:	e7d5      	b.n	8006d74 <_puts_r+0x24>
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f001 f8e0 	bl	8007f90 <__swsetup_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d0dd      	beq.n	8006d90 <_puts_r+0x40>
 8006dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8006dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dda:	07da      	lsls	r2, r3, #31
 8006ddc:	d405      	bmi.n	8006dea <_puts_r+0x9a>
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	059b      	lsls	r3, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_puts_r+0x9a>
 8006de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de6:	f002 fced 	bl	80097c4 <__retarget_lock_release_recursive>
 8006dea:	4628      	mov	r0, r5
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da04      	bge.n	8006dfc <_puts_r+0xac>
 8006df2:	69a2      	ldr	r2, [r4, #24]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	dc06      	bgt.n	8006e06 <_puts_r+0xb6>
 8006df8:	290a      	cmp	r1, #10
 8006dfa:	d004      	beq.n	8006e06 <_puts_r+0xb6>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	7019      	strb	r1, [r3, #0]
 8006e04:	e7c5      	b.n	8006d92 <_puts_r+0x42>
 8006e06:	4622      	mov	r2, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f001 f86f 	bl	8007eec <__swbuf_r>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d1bf      	bne.n	8006d92 <_puts_r+0x42>
 8006e12:	e7df      	b.n	8006dd4 <_puts_r+0x84>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	250a      	movs	r5, #10
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	6022      	str	r2, [r4, #0]
 8006e1c:	701d      	strb	r5, [r3, #0]
 8006e1e:	e7db      	b.n	8006dd8 <_puts_r+0x88>
 8006e20:	0800bed0 	.word	0x0800bed0
 8006e24:	0800bef0 	.word	0x0800bef0
 8006e28:	0800beb0 	.word	0x0800beb0

08006e2c <puts>:
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <puts+0xc>)
 8006e2e:	4601      	mov	r1, r0
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f7ff bf8d 	b.w	8006d50 <_puts_r>
 8006e36:	bf00      	nop
 8006e38:	20000014 	.word	0x20000014

08006e3c <_sbrk_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	; (8006e58 <_sbrk_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7fb fd10 	bl	800286c <_sbrk>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_sbrk_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_sbrk_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	20000d00 	.word	0x20000d00

08006e5c <setbuf>:
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e62:	bf0c      	ite	eq
 8006e64:	2202      	moveq	r2, #2
 8006e66:	2200      	movne	r2, #0
 8006e68:	f000 b800 	b.w	8006e6c <setvbuf>

08006e6c <setvbuf>:
 8006e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	461d      	mov	r5, r3
 8006e72:	4b5d      	ldr	r3, [pc, #372]	; (8006fe8 <setvbuf+0x17c>)
 8006e74:	681f      	ldr	r7, [r3, #0]
 8006e76:	4604      	mov	r4, r0
 8006e78:	460e      	mov	r6, r1
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	b127      	cbz	r7, 8006e88 <setvbuf+0x1c>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	b913      	cbnz	r3, 8006e88 <setvbuf+0x1c>
 8006e82:	4638      	mov	r0, r7
 8006e84:	f002 f88c 	bl	8008fa0 <__sinit>
 8006e88:	4b58      	ldr	r3, [pc, #352]	; (8006fec <setvbuf+0x180>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d167      	bne.n	8006f5e <setvbuf+0xf2>
 8006e8e:	687c      	ldr	r4, [r7, #4]
 8006e90:	f1b8 0f02 	cmp.w	r8, #2
 8006e94:	d006      	beq.n	8006ea4 <setvbuf+0x38>
 8006e96:	f1b8 0f01 	cmp.w	r8, #1
 8006e9a:	f200 809f 	bhi.w	8006fdc <setvbuf+0x170>
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	f2c0 809c 	blt.w	8006fdc <setvbuf+0x170>
 8006ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea6:	07db      	lsls	r3, r3, #31
 8006ea8:	d405      	bmi.n	8006eb6 <setvbuf+0x4a>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	0598      	lsls	r0, r3, #22
 8006eae:	d402      	bmi.n	8006eb6 <setvbuf+0x4a>
 8006eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb2:	f002 fc86 	bl	80097c2 <__retarget_lock_acquire_recursive>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f001 ffdd 	bl	8008e78 <_fflush_r>
 8006ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec0:	b141      	cbz	r1, 8006ed4 <setvbuf+0x68>
 8006ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec6:	4299      	cmp	r1, r3
 8006ec8:	d002      	beq.n	8006ed0 <setvbuf+0x64>
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f7ff f884 	bl	8005fd8 <_free_r>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6363      	str	r3, [r4, #52]	; 0x34
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61a3      	str	r3, [r4, #24]
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	0619      	lsls	r1, r3, #24
 8006ede:	d503      	bpl.n	8006ee8 <setvbuf+0x7c>
 8006ee0:	6921      	ldr	r1, [r4, #16]
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f7ff f878 	bl	8005fd8 <_free_r>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	f1b8 0f02 	cmp.w	r8, #2
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	d06c      	beq.n	8006fd4 <setvbuf+0x168>
 8006efa:	ab01      	add	r3, sp, #4
 8006efc:	466a      	mov	r2, sp
 8006efe:	4621      	mov	r1, r4
 8006f00:	4638      	mov	r0, r7
 8006f02:	f002 fc60 	bl	80097c6 <__swhatbuf_r>
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	4318      	orrs	r0, r3
 8006f0a:	81a0      	strh	r0, [r4, #12]
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	d130      	bne.n	8006f72 <setvbuf+0x106>
 8006f10:	9d00      	ldr	r5, [sp, #0]
 8006f12:	4628      	mov	r0, r5
 8006f14:	f7ff f842 	bl	8005f9c <malloc>
 8006f18:	4606      	mov	r6, r0
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d155      	bne.n	8006fca <setvbuf+0x15e>
 8006f1e:	f8dd 9000 	ldr.w	r9, [sp]
 8006f22:	45a9      	cmp	r9, r5
 8006f24:	d14a      	bne.n	8006fbc <setvbuf+0x150>
 8006f26:	f04f 35ff 	mov.w	r5, #4294967295
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	60a2      	str	r2, [r4, #8]
 8006f2e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	6122      	str	r2, [r4, #16]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3c:	6162      	str	r2, [r4, #20]
 8006f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f40:	f043 0302 	orr.w	r3, r3, #2
 8006f44:	07d2      	lsls	r2, r2, #31
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	d405      	bmi.n	8006f56 <setvbuf+0xea>
 8006f4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006f4e:	d102      	bne.n	8006f56 <setvbuf+0xea>
 8006f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f52:	f002 fc37 	bl	80097c4 <__retarget_lock_release_recursive>
 8006f56:	4628      	mov	r0, r5
 8006f58:	b003      	add	sp, #12
 8006f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f5e:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <setvbuf+0x184>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	d101      	bne.n	8006f68 <setvbuf+0xfc>
 8006f64:	68bc      	ldr	r4, [r7, #8]
 8006f66:	e793      	b.n	8006e90 <setvbuf+0x24>
 8006f68:	4b22      	ldr	r3, [pc, #136]	; (8006ff4 <setvbuf+0x188>)
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	bf08      	it	eq
 8006f6e:	68fc      	ldreq	r4, [r7, #12]
 8006f70:	e78e      	b.n	8006e90 <setvbuf+0x24>
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d0cd      	beq.n	8006f12 <setvbuf+0xa6>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	b913      	cbnz	r3, 8006f80 <setvbuf+0x114>
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f002 f810 	bl	8008fa0 <__sinit>
 8006f80:	f1b8 0f01 	cmp.w	r8, #1
 8006f84:	bf08      	it	eq
 8006f86:	89a3      	ldrheq	r3, [r4, #12]
 8006f88:	6026      	str	r6, [r4, #0]
 8006f8a:	bf04      	itt	eq
 8006f8c:	f043 0301 	orreq.w	r3, r3, #1
 8006f90:	81a3      	strheq	r3, [r4, #12]
 8006f92:	89a2      	ldrh	r2, [r4, #12]
 8006f94:	f012 0308 	ands.w	r3, r2, #8
 8006f98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006f9c:	d01c      	beq.n	8006fd8 <setvbuf+0x16c>
 8006f9e:	07d3      	lsls	r3, r2, #31
 8006fa0:	bf41      	itttt	mi
 8006fa2:	2300      	movmi	r3, #0
 8006fa4:	426d      	negmi	r5, r5
 8006fa6:	60a3      	strmi	r3, [r4, #8]
 8006fa8:	61a5      	strmi	r5, [r4, #24]
 8006faa:	bf58      	it	pl
 8006fac:	60a5      	strpl	r5, [r4, #8]
 8006fae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006fb0:	f015 0501 	ands.w	r5, r5, #1
 8006fb4:	d115      	bne.n	8006fe2 <setvbuf+0x176>
 8006fb6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006fba:	e7c8      	b.n	8006f4e <setvbuf+0xe2>
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	f7fe ffed 	bl	8005f9c <malloc>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d0ae      	beq.n	8006f26 <setvbuf+0xba>
 8006fc8:	464d      	mov	r5, r9
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	e7d0      	b.n	8006f76 <setvbuf+0x10a>
 8006fd4:	2500      	movs	r5, #0
 8006fd6:	e7a8      	b.n	8006f2a <setvbuf+0xbe>
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	e7e8      	b.n	8006fae <setvbuf+0x142>
 8006fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8006fe0:	e7b9      	b.n	8006f56 <setvbuf+0xea>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	e7b7      	b.n	8006f56 <setvbuf+0xea>
 8006fe6:	bf00      	nop
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	0800bed0 	.word	0x0800bed0
 8006ff0:	0800bef0 	.word	0x0800bef0
 8006ff4:	0800beb0 	.word	0x0800beb0

08006ff8 <siprintf>:
 8006ff8:	b40e      	push	{r1, r2, r3}
 8006ffa:	b500      	push	{lr}
 8006ffc:	b09c      	sub	sp, #112	; 0x70
 8006ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8007000:	9002      	str	r0, [sp, #8]
 8007002:	9006      	str	r0, [sp, #24]
 8007004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007008:	4809      	ldr	r0, [pc, #36]	; (8007030 <siprintf+0x38>)
 800700a:	9107      	str	r1, [sp, #28]
 800700c:	9104      	str	r1, [sp, #16]
 800700e:	4909      	ldr	r1, [pc, #36]	; (8007034 <siprintf+0x3c>)
 8007010:	f853 2b04 	ldr.w	r2, [r3], #4
 8007014:	9105      	str	r1, [sp, #20]
 8007016:	6800      	ldr	r0, [r0, #0]
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	a902      	add	r1, sp, #8
 800701c:	f003 f9d2 	bl	800a3c4 <_svfiprintf_r>
 8007020:	9b02      	ldr	r3, [sp, #8]
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	b01c      	add	sp, #112	; 0x70
 8007028:	f85d eb04 	ldr.w	lr, [sp], #4
 800702c:	b003      	add	sp, #12
 800702e:	4770      	bx	lr
 8007030:	20000014 	.word	0x20000014
 8007034:	ffff0208 	.word	0xffff0208

08007038 <strcat>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4602      	mov	r2, r0
 800703c:	7814      	ldrb	r4, [r2, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	3201      	adds	r2, #1
 8007042:	2c00      	cmp	r4, #0
 8007044:	d1fa      	bne.n	800703c <strcat+0x4>
 8007046:	3b01      	subs	r3, #1
 8007048:	f811 2b01 	ldrb.w	r2, [r1], #1
 800704c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007050:	2a00      	cmp	r2, #0
 8007052:	d1f9      	bne.n	8007048 <strcat+0x10>
 8007054:	bd10      	pop	{r4, pc}
	...

08007058 <strdup>:
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <strdup+0xc>)
 800705a:	4601      	mov	r1, r0
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	f000 b803 	b.w	8007068 <_strdup_r>
 8007062:	bf00      	nop
 8007064:	20000014 	.word	0x20000014

08007068 <_strdup_r>:
 8007068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	460d      	mov	r5, r1
 8007070:	f7f9 f8d6 	bl	8000220 <strlen>
 8007074:	1c42      	adds	r2, r0, #1
 8007076:	4611      	mov	r1, r2
 8007078:	4620      	mov	r0, r4
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	f7ff f818 	bl	80060b0 <_malloc_r>
 8007080:	4604      	mov	r4, r0
 8007082:	b118      	cbz	r0, 800708c <_strdup_r+0x24>
 8007084:	9a01      	ldr	r2, [sp, #4]
 8007086:	4629      	mov	r1, r5
 8007088:	f7fe ff90 	bl	8005fac <memcpy>
 800708c:	4620      	mov	r0, r4
 800708e:	b003      	add	sp, #12
 8007090:	bd30      	pop	{r4, r5, pc}

08007092 <strstr>:
 8007092:	780a      	ldrb	r2, [r1, #0]
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	b96a      	cbnz	r2, 80070b4 <strstr+0x22>
 8007098:	bd70      	pop	{r4, r5, r6, pc}
 800709a:	429a      	cmp	r2, r3
 800709c:	d109      	bne.n	80070b2 <strstr+0x20>
 800709e:	460c      	mov	r4, r1
 80070a0:	4605      	mov	r5, r0
 80070a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f6      	beq.n	8007098 <strstr+0x6>
 80070aa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80070ae:	429e      	cmp	r6, r3
 80070b0:	d0f7      	beq.n	80070a2 <strstr+0x10>
 80070b2:	3001      	adds	r0, #1
 80070b4:	7803      	ldrb	r3, [r0, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1ef      	bne.n	800709a <strstr+0x8>
 80070ba:	4618      	mov	r0, r3
 80070bc:	e7ec      	b.n	8007098 <strstr+0x6>

080070be <sulp>:
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	460d      	mov	r5, r1
 80070c4:	ec45 4b10 	vmov	d0, r4, r5
 80070c8:	4616      	mov	r6, r2
 80070ca:	f002 ff8b 	bl	8009fe4 <__ulp>
 80070ce:	ec51 0b10 	vmov	r0, r1, d0
 80070d2:	b17e      	cbz	r6, 80070f4 <sulp+0x36>
 80070d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dd09      	ble.n	80070f4 <sulp+0x36>
 80070e0:	051b      	lsls	r3, r3, #20
 80070e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070e6:	2400      	movs	r4, #0
 80070e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070ec:	4622      	mov	r2, r4
 80070ee:	462b      	mov	r3, r5
 80070f0:	f7f9 faaa 	bl	8000648 <__aeabi_dmul>
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070f8 <_strtod_l>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	ed2d 8b02 	vpush	{d8}
 8007100:	b09d      	sub	sp, #116	; 0x74
 8007102:	461f      	mov	r7, r3
 8007104:	2300      	movs	r3, #0
 8007106:	9318      	str	r3, [sp, #96]	; 0x60
 8007108:	4ba2      	ldr	r3, [pc, #648]	; (8007394 <_strtod_l+0x29c>)
 800710a:	9213      	str	r2, [sp, #76]	; 0x4c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	4604      	mov	r4, r0
 8007112:	4618      	mov	r0, r3
 8007114:	4688      	mov	r8, r1
 8007116:	f7f9 f883 	bl	8000220 <strlen>
 800711a:	f04f 0a00 	mov.w	sl, #0
 800711e:	4605      	mov	r5, r0
 8007120:	f04f 0b00 	mov.w	fp, #0
 8007124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	2a2b      	cmp	r2, #43	; 0x2b
 800712e:	d04e      	beq.n	80071ce <_strtod_l+0xd6>
 8007130:	d83b      	bhi.n	80071aa <_strtod_l+0xb2>
 8007132:	2a0d      	cmp	r2, #13
 8007134:	d834      	bhi.n	80071a0 <_strtod_l+0xa8>
 8007136:	2a08      	cmp	r2, #8
 8007138:	d834      	bhi.n	80071a4 <_strtod_l+0xac>
 800713a:	2a00      	cmp	r2, #0
 800713c:	d03e      	beq.n	80071bc <_strtod_l+0xc4>
 800713e:	2300      	movs	r3, #0
 8007140:	930a      	str	r3, [sp, #40]	; 0x28
 8007142:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007144:	7833      	ldrb	r3, [r6, #0]
 8007146:	2b30      	cmp	r3, #48	; 0x30
 8007148:	f040 80b0 	bne.w	80072ac <_strtod_l+0x1b4>
 800714c:	7873      	ldrb	r3, [r6, #1]
 800714e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007152:	2b58      	cmp	r3, #88	; 0x58
 8007154:	d168      	bne.n	8007228 <_strtod_l+0x130>
 8007156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	ab18      	add	r3, sp, #96	; 0x60
 800715c:	9702      	str	r7, [sp, #8]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	4a8d      	ldr	r2, [pc, #564]	; (8007398 <_strtod_l+0x2a0>)
 8007162:	ab19      	add	r3, sp, #100	; 0x64
 8007164:	a917      	add	r1, sp, #92	; 0x5c
 8007166:	4620      	mov	r0, r4
 8007168:	f002 f81e 	bl	80091a8 <__gethex>
 800716c:	f010 0707 	ands.w	r7, r0, #7
 8007170:	4605      	mov	r5, r0
 8007172:	d005      	beq.n	8007180 <_strtod_l+0x88>
 8007174:	2f06      	cmp	r7, #6
 8007176:	d12c      	bne.n	80071d2 <_strtod_l+0xda>
 8007178:	3601      	adds	r6, #1
 800717a:	2300      	movs	r3, #0
 800717c:	9617      	str	r6, [sp, #92]	; 0x5c
 800717e:	930a      	str	r3, [sp, #40]	; 0x28
 8007180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 8590 	bne.w	8007ca8 <_strtod_l+0xbb0>
 8007188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718a:	b1eb      	cbz	r3, 80071c8 <_strtod_l+0xd0>
 800718c:	4652      	mov	r2, sl
 800718e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007192:	ec43 2b10 	vmov	d0, r2, r3
 8007196:	b01d      	add	sp, #116	; 0x74
 8007198:	ecbd 8b02 	vpop	{d8}
 800719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a0:	2a20      	cmp	r2, #32
 80071a2:	d1cc      	bne.n	800713e <_strtod_l+0x46>
 80071a4:	3301      	adds	r3, #1
 80071a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80071a8:	e7be      	b.n	8007128 <_strtod_l+0x30>
 80071aa:	2a2d      	cmp	r2, #45	; 0x2d
 80071ac:	d1c7      	bne.n	800713e <_strtod_l+0x46>
 80071ae:	2201      	movs	r2, #1
 80071b0:	920a      	str	r2, [sp, #40]	; 0x28
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1c2      	bne.n	8007142 <_strtod_l+0x4a>
 80071bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 856e 	bne.w	8007ca4 <_strtod_l+0xbac>
 80071c8:	4652      	mov	r2, sl
 80071ca:	465b      	mov	r3, fp
 80071cc:	e7e1      	b.n	8007192 <_strtod_l+0x9a>
 80071ce:	2200      	movs	r2, #0
 80071d0:	e7ee      	b.n	80071b0 <_strtod_l+0xb8>
 80071d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071d4:	b13a      	cbz	r2, 80071e6 <_strtod_l+0xee>
 80071d6:	2135      	movs	r1, #53	; 0x35
 80071d8:	a81a      	add	r0, sp, #104	; 0x68
 80071da:	f003 f80e 	bl	800a1fa <__copybits>
 80071de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071e0:	4620      	mov	r0, r4
 80071e2:	f002 fbcd 	bl	8009980 <_Bfree>
 80071e6:	3f01      	subs	r7, #1
 80071e8:	2f04      	cmp	r7, #4
 80071ea:	d806      	bhi.n	80071fa <_strtod_l+0x102>
 80071ec:	e8df f007 	tbb	[pc, r7]
 80071f0:	1714030a 	.word	0x1714030a
 80071f4:	0a          	.byte	0x0a
 80071f5:	00          	.byte	0x00
 80071f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80071fa:	0728      	lsls	r0, r5, #28
 80071fc:	d5c0      	bpl.n	8007180 <_strtod_l+0x88>
 80071fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007202:	e7bd      	b.n	8007180 <_strtod_l+0x88>
 8007204:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800720a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800720e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007212:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007216:	e7f0      	b.n	80071fa <_strtod_l+0x102>
 8007218:	f8df b180 	ldr.w	fp, [pc, #384]	; 800739c <_strtod_l+0x2a4>
 800721c:	e7ed      	b.n	80071fa <_strtod_l+0x102>
 800721e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007222:	f04f 3aff 	mov.w	sl, #4294967295
 8007226:	e7e8      	b.n	80071fa <_strtod_l+0x102>
 8007228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	9217      	str	r2, [sp, #92]	; 0x5c
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b30      	cmp	r3, #48	; 0x30
 8007232:	d0f9      	beq.n	8007228 <_strtod_l+0x130>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0a3      	beq.n	8007180 <_strtod_l+0x88>
 8007238:	2301      	movs	r3, #1
 800723a:	f04f 0900 	mov.w	r9, #0
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	f8cd 901c 	str.w	r9, [sp, #28]
 8007248:	464f      	mov	r7, r9
 800724a:	220a      	movs	r2, #10
 800724c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800724e:	7806      	ldrb	r6, [r0, #0]
 8007250:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007254:	b2d9      	uxtb	r1, r3
 8007256:	2909      	cmp	r1, #9
 8007258:	d92a      	bls.n	80072b0 <_strtod_l+0x1b8>
 800725a:	9905      	ldr	r1, [sp, #20]
 800725c:	462a      	mov	r2, r5
 800725e:	f003 fa42 	bl	800a6e6 <strncmp>
 8007262:	b398      	cbz	r0, 80072cc <_strtod_l+0x1d4>
 8007264:	2000      	movs	r0, #0
 8007266:	4632      	mov	r2, r6
 8007268:	463d      	mov	r5, r7
 800726a:	9005      	str	r0, [sp, #20]
 800726c:	4603      	mov	r3, r0
 800726e:	2a65      	cmp	r2, #101	; 0x65
 8007270:	d001      	beq.n	8007276 <_strtod_l+0x17e>
 8007272:	2a45      	cmp	r2, #69	; 0x45
 8007274:	d118      	bne.n	80072a8 <_strtod_l+0x1b0>
 8007276:	b91d      	cbnz	r5, 8007280 <_strtod_l+0x188>
 8007278:	9a04      	ldr	r2, [sp, #16]
 800727a:	4302      	orrs	r2, r0
 800727c:	d09e      	beq.n	80071bc <_strtod_l+0xc4>
 800727e:	2500      	movs	r5, #0
 8007280:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007284:	f108 0201 	add.w	r2, r8, #1
 8007288:	9217      	str	r2, [sp, #92]	; 0x5c
 800728a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800728e:	2a2b      	cmp	r2, #43	; 0x2b
 8007290:	d075      	beq.n	800737e <_strtod_l+0x286>
 8007292:	2a2d      	cmp	r2, #45	; 0x2d
 8007294:	d07b      	beq.n	800738e <_strtod_l+0x296>
 8007296:	f04f 0c00 	mov.w	ip, #0
 800729a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800729e:	2909      	cmp	r1, #9
 80072a0:	f240 8082 	bls.w	80073a8 <_strtod_l+0x2b0>
 80072a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072a8:	2600      	movs	r6, #0
 80072aa:	e09d      	b.n	80073e8 <_strtod_l+0x2f0>
 80072ac:	2300      	movs	r3, #0
 80072ae:	e7c4      	b.n	800723a <_strtod_l+0x142>
 80072b0:	2f08      	cmp	r7, #8
 80072b2:	bfd8      	it	le
 80072b4:	9907      	ldrle	r1, [sp, #28]
 80072b6:	f100 0001 	add.w	r0, r0, #1
 80072ba:	bfda      	itte	le
 80072bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80072c0:	9307      	strle	r3, [sp, #28]
 80072c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072c6:	3701      	adds	r7, #1
 80072c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80072ca:	e7bf      	b.n	800724c <_strtod_l+0x154>
 80072cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ce:	195a      	adds	r2, r3, r5
 80072d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d2:	5d5a      	ldrb	r2, [r3, r5]
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	d037      	beq.n	8007348 <_strtod_l+0x250>
 80072d8:	9005      	str	r0, [sp, #20]
 80072da:	463d      	mov	r5, r7
 80072dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072e0:	2b09      	cmp	r3, #9
 80072e2:	d912      	bls.n	800730a <_strtod_l+0x212>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e7c2      	b.n	800726e <_strtod_l+0x176>
 80072e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ee:	785a      	ldrb	r2, [r3, #1]
 80072f0:	3001      	adds	r0, #1
 80072f2:	2a30      	cmp	r2, #48	; 0x30
 80072f4:	d0f8      	beq.n	80072e8 <_strtod_l+0x1f0>
 80072f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	f200 84d9 	bhi.w	8007cb2 <_strtod_l+0xbba>
 8007300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007302:	9005      	str	r0, [sp, #20]
 8007304:	2000      	movs	r0, #0
 8007306:	9308      	str	r3, [sp, #32]
 8007308:	4605      	mov	r5, r0
 800730a:	3a30      	subs	r2, #48	; 0x30
 800730c:	f100 0301 	add.w	r3, r0, #1
 8007310:	d014      	beq.n	800733c <_strtod_l+0x244>
 8007312:	9905      	ldr	r1, [sp, #20]
 8007314:	4419      	add	r1, r3
 8007316:	9105      	str	r1, [sp, #20]
 8007318:	462b      	mov	r3, r5
 800731a:	eb00 0e05 	add.w	lr, r0, r5
 800731e:	210a      	movs	r1, #10
 8007320:	4573      	cmp	r3, lr
 8007322:	d113      	bne.n	800734c <_strtod_l+0x254>
 8007324:	182b      	adds	r3, r5, r0
 8007326:	2b08      	cmp	r3, #8
 8007328:	f105 0501 	add.w	r5, r5, #1
 800732c:	4405      	add	r5, r0
 800732e:	dc1c      	bgt.n	800736a <_strtod_l+0x272>
 8007330:	9907      	ldr	r1, [sp, #28]
 8007332:	230a      	movs	r3, #10
 8007334:	fb03 2301 	mla	r3, r3, r1, r2
 8007338:	9307      	str	r3, [sp, #28]
 800733a:	2300      	movs	r3, #0
 800733c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800733e:	1c51      	adds	r1, r2, #1
 8007340:	9117      	str	r1, [sp, #92]	; 0x5c
 8007342:	7852      	ldrb	r2, [r2, #1]
 8007344:	4618      	mov	r0, r3
 8007346:	e7c9      	b.n	80072dc <_strtod_l+0x1e4>
 8007348:	4638      	mov	r0, r7
 800734a:	e7d2      	b.n	80072f2 <_strtod_l+0x1fa>
 800734c:	2b08      	cmp	r3, #8
 800734e:	dc04      	bgt.n	800735a <_strtod_l+0x262>
 8007350:	9e07      	ldr	r6, [sp, #28]
 8007352:	434e      	muls	r6, r1
 8007354:	9607      	str	r6, [sp, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	e7e2      	b.n	8007320 <_strtod_l+0x228>
 800735a:	f103 0c01 	add.w	ip, r3, #1
 800735e:	f1bc 0f10 	cmp.w	ip, #16
 8007362:	bfd8      	it	le
 8007364:	fb01 f909 	mulle.w	r9, r1, r9
 8007368:	e7f5      	b.n	8007356 <_strtod_l+0x25e>
 800736a:	2d10      	cmp	r5, #16
 800736c:	bfdc      	itt	le
 800736e:	230a      	movle	r3, #10
 8007370:	fb03 2909 	mlale	r9, r3, r9, r2
 8007374:	e7e1      	b.n	800733a <_strtod_l+0x242>
 8007376:	2300      	movs	r3, #0
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	2301      	movs	r3, #1
 800737c:	e77c      	b.n	8007278 <_strtod_l+0x180>
 800737e:	f04f 0c00 	mov.w	ip, #0
 8007382:	f108 0202 	add.w	r2, r8, #2
 8007386:	9217      	str	r2, [sp, #92]	; 0x5c
 8007388:	f898 2002 	ldrb.w	r2, [r8, #2]
 800738c:	e785      	b.n	800729a <_strtod_l+0x1a2>
 800738e:	f04f 0c01 	mov.w	ip, #1
 8007392:	e7f6      	b.n	8007382 <_strtod_l+0x28a>
 8007394:	0800bf78 	.word	0x0800bf78
 8007398:	0800bc70 	.word	0x0800bc70
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a2:	1c51      	adds	r1, r2, #1
 80073a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80073a6:	7852      	ldrb	r2, [r2, #1]
 80073a8:	2a30      	cmp	r2, #48	; 0x30
 80073aa:	d0f9      	beq.n	80073a0 <_strtod_l+0x2a8>
 80073ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073b0:	2908      	cmp	r1, #8
 80073b2:	f63f af79 	bhi.w	80072a8 <_strtod_l+0x1b0>
 80073b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073bc:	9206      	str	r2, [sp, #24]
 80073be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073c0:	1c51      	adds	r1, r2, #1
 80073c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80073c4:	7852      	ldrb	r2, [r2, #1]
 80073c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073ca:	2e09      	cmp	r6, #9
 80073cc:	d937      	bls.n	800743e <_strtod_l+0x346>
 80073ce:	9e06      	ldr	r6, [sp, #24]
 80073d0:	1b89      	subs	r1, r1, r6
 80073d2:	2908      	cmp	r1, #8
 80073d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073d8:	dc02      	bgt.n	80073e0 <_strtod_l+0x2e8>
 80073da:	4576      	cmp	r6, lr
 80073dc:	bfa8      	it	ge
 80073de:	4676      	movge	r6, lr
 80073e0:	f1bc 0f00 	cmp.w	ip, #0
 80073e4:	d000      	beq.n	80073e8 <_strtod_l+0x2f0>
 80073e6:	4276      	negs	r6, r6
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	d14d      	bne.n	8007488 <_strtod_l+0x390>
 80073ec:	9904      	ldr	r1, [sp, #16]
 80073ee:	4301      	orrs	r1, r0
 80073f0:	f47f aec6 	bne.w	8007180 <_strtod_l+0x88>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f47f aee1 	bne.w	80071bc <_strtod_l+0xc4>
 80073fa:	2a69      	cmp	r2, #105	; 0x69
 80073fc:	d027      	beq.n	800744e <_strtod_l+0x356>
 80073fe:	dc24      	bgt.n	800744a <_strtod_l+0x352>
 8007400:	2a49      	cmp	r2, #73	; 0x49
 8007402:	d024      	beq.n	800744e <_strtod_l+0x356>
 8007404:	2a4e      	cmp	r2, #78	; 0x4e
 8007406:	f47f aed9 	bne.w	80071bc <_strtod_l+0xc4>
 800740a:	499f      	ldr	r1, [pc, #636]	; (8007688 <_strtod_l+0x590>)
 800740c:	a817      	add	r0, sp, #92	; 0x5c
 800740e:	f002 f923 	bl	8009658 <__match>
 8007412:	2800      	cmp	r0, #0
 8007414:	f43f aed2 	beq.w	80071bc <_strtod_l+0xc4>
 8007418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b28      	cmp	r3, #40	; 0x28
 800741e:	d12d      	bne.n	800747c <_strtod_l+0x384>
 8007420:	499a      	ldr	r1, [pc, #616]	; (800768c <_strtod_l+0x594>)
 8007422:	aa1a      	add	r2, sp, #104	; 0x68
 8007424:	a817      	add	r0, sp, #92	; 0x5c
 8007426:	f002 f92b 	bl	8009680 <__hexnan>
 800742a:	2805      	cmp	r0, #5
 800742c:	d126      	bne.n	800747c <_strtod_l+0x384>
 800742e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007430:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007434:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007438:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800743c:	e6a0      	b.n	8007180 <_strtod_l+0x88>
 800743e:	210a      	movs	r1, #10
 8007440:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007444:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007448:	e7b9      	b.n	80073be <_strtod_l+0x2c6>
 800744a:	2a6e      	cmp	r2, #110	; 0x6e
 800744c:	e7db      	b.n	8007406 <_strtod_l+0x30e>
 800744e:	4990      	ldr	r1, [pc, #576]	; (8007690 <_strtod_l+0x598>)
 8007450:	a817      	add	r0, sp, #92	; 0x5c
 8007452:	f002 f901 	bl	8009658 <__match>
 8007456:	2800      	cmp	r0, #0
 8007458:	f43f aeb0 	beq.w	80071bc <_strtod_l+0xc4>
 800745c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800745e:	498d      	ldr	r1, [pc, #564]	; (8007694 <_strtod_l+0x59c>)
 8007460:	3b01      	subs	r3, #1
 8007462:	a817      	add	r0, sp, #92	; 0x5c
 8007464:	9317      	str	r3, [sp, #92]	; 0x5c
 8007466:	f002 f8f7 	bl	8009658 <__match>
 800746a:	b910      	cbnz	r0, 8007472 <_strtod_l+0x37a>
 800746c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800746e:	3301      	adds	r3, #1
 8007470:	9317      	str	r3, [sp, #92]	; 0x5c
 8007472:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076a4 <_strtod_l+0x5ac>
 8007476:	f04f 0a00 	mov.w	sl, #0
 800747a:	e681      	b.n	8007180 <_strtod_l+0x88>
 800747c:	4886      	ldr	r0, [pc, #536]	; (8007698 <_strtod_l+0x5a0>)
 800747e:	f003 f8a3 	bl	800a5c8 <nan>
 8007482:	ec5b ab10 	vmov	sl, fp, d0
 8007486:	e67b      	b.n	8007180 <_strtod_l+0x88>
 8007488:	9b05      	ldr	r3, [sp, #20]
 800748a:	9807      	ldr	r0, [sp, #28]
 800748c:	1af3      	subs	r3, r6, r3
 800748e:	2f00      	cmp	r7, #0
 8007490:	bf08      	it	eq
 8007492:	462f      	moveq	r7, r5
 8007494:	2d10      	cmp	r5, #16
 8007496:	9306      	str	r3, [sp, #24]
 8007498:	46a8      	mov	r8, r5
 800749a:	bfa8      	it	ge
 800749c:	f04f 0810 	movge.w	r8, #16
 80074a0:	f7f9 f858 	bl	8000554 <__aeabi_ui2d>
 80074a4:	2d09      	cmp	r5, #9
 80074a6:	4682      	mov	sl, r0
 80074a8:	468b      	mov	fp, r1
 80074aa:	dd13      	ble.n	80074d4 <_strtod_l+0x3dc>
 80074ac:	4b7b      	ldr	r3, [pc, #492]	; (800769c <_strtod_l+0x5a4>)
 80074ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074b6:	f7f9 f8c7 	bl	8000648 <__aeabi_dmul>
 80074ba:	4682      	mov	sl, r0
 80074bc:	4648      	mov	r0, r9
 80074be:	468b      	mov	fp, r1
 80074c0:	f7f9 f848 	bl	8000554 <__aeabi_ui2d>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4650      	mov	r0, sl
 80074ca:	4659      	mov	r1, fp
 80074cc:	f7f8 ff06 	bl	80002dc <__adddf3>
 80074d0:	4682      	mov	sl, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	2d0f      	cmp	r5, #15
 80074d6:	dc38      	bgt.n	800754a <_strtod_l+0x452>
 80074d8:	9b06      	ldr	r3, [sp, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f43f ae50 	beq.w	8007180 <_strtod_l+0x88>
 80074e0:	dd24      	ble.n	800752c <_strtod_l+0x434>
 80074e2:	2b16      	cmp	r3, #22
 80074e4:	dc0b      	bgt.n	80074fe <_strtod_l+0x406>
 80074e6:	496d      	ldr	r1, [pc, #436]	; (800769c <_strtod_l+0x5a4>)
 80074e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	4652      	mov	r2, sl
 80074f2:	465b      	mov	r3, fp
 80074f4:	f7f9 f8a8 	bl	8000648 <__aeabi_dmul>
 80074f8:	4682      	mov	sl, r0
 80074fa:	468b      	mov	fp, r1
 80074fc:	e640      	b.n	8007180 <_strtod_l+0x88>
 80074fe:	9a06      	ldr	r2, [sp, #24]
 8007500:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007504:	4293      	cmp	r3, r2
 8007506:	db20      	blt.n	800754a <_strtod_l+0x452>
 8007508:	4c64      	ldr	r4, [pc, #400]	; (800769c <_strtod_l+0x5a4>)
 800750a:	f1c5 050f 	rsb	r5, r5, #15
 800750e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007512:	4652      	mov	r2, sl
 8007514:	465b      	mov	r3, fp
 8007516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800751a:	f7f9 f895 	bl	8000648 <__aeabi_dmul>
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	1b5d      	subs	r5, r3, r5
 8007522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800752a:	e7e3      	b.n	80074f4 <_strtod_l+0x3fc>
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	3316      	adds	r3, #22
 8007530:	db0b      	blt.n	800754a <_strtod_l+0x452>
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	1b9e      	subs	r6, r3, r6
 8007536:	4b59      	ldr	r3, [pc, #356]	; (800769c <_strtod_l+0x5a4>)
 8007538:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800753c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007540:	4650      	mov	r0, sl
 8007542:	4659      	mov	r1, fp
 8007544:	f7f9 f9aa 	bl	800089c <__aeabi_ddiv>
 8007548:	e7d6      	b.n	80074f8 <_strtod_l+0x400>
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	eba5 0808 	sub.w	r8, r5, r8
 8007550:	4498      	add	r8, r3
 8007552:	f1b8 0f00 	cmp.w	r8, #0
 8007556:	dd74      	ble.n	8007642 <_strtod_l+0x54a>
 8007558:	f018 030f 	ands.w	r3, r8, #15
 800755c:	d00a      	beq.n	8007574 <_strtod_l+0x47c>
 800755e:	494f      	ldr	r1, [pc, #316]	; (800769c <_strtod_l+0x5a4>)
 8007560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007564:	4652      	mov	r2, sl
 8007566:	465b      	mov	r3, fp
 8007568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756c:	f7f9 f86c 	bl	8000648 <__aeabi_dmul>
 8007570:	4682      	mov	sl, r0
 8007572:	468b      	mov	fp, r1
 8007574:	f038 080f 	bics.w	r8, r8, #15
 8007578:	d04f      	beq.n	800761a <_strtod_l+0x522>
 800757a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800757e:	dd22      	ble.n	80075c6 <_strtod_l+0x4ce>
 8007580:	2500      	movs	r5, #0
 8007582:	462e      	mov	r6, r5
 8007584:	9507      	str	r5, [sp, #28]
 8007586:	9505      	str	r5, [sp, #20]
 8007588:	2322      	movs	r3, #34	; 0x22
 800758a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076a4 <_strtod_l+0x5ac>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	f04f 0a00 	mov.w	sl, #0
 8007594:	9b07      	ldr	r3, [sp, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f43f adf2 	beq.w	8007180 <_strtod_l+0x88>
 800759c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800759e:	4620      	mov	r0, r4
 80075a0:	f002 f9ee 	bl	8009980 <_Bfree>
 80075a4:	9905      	ldr	r1, [sp, #20]
 80075a6:	4620      	mov	r0, r4
 80075a8:	f002 f9ea 	bl	8009980 <_Bfree>
 80075ac:	4631      	mov	r1, r6
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 f9e6 	bl	8009980 <_Bfree>
 80075b4:	9907      	ldr	r1, [sp, #28]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f002 f9e2 	bl	8009980 <_Bfree>
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	f002 f9de 	bl	8009980 <_Bfree>
 80075c4:	e5dc      	b.n	8007180 <_strtod_l+0x88>
 80075c6:	4b36      	ldr	r3, [pc, #216]	; (80076a0 <_strtod_l+0x5a8>)
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	2300      	movs	r3, #0
 80075cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075d0:	4650      	mov	r0, sl
 80075d2:	4659      	mov	r1, fp
 80075d4:	4699      	mov	r9, r3
 80075d6:	f1b8 0f01 	cmp.w	r8, #1
 80075da:	dc21      	bgt.n	8007620 <_strtod_l+0x528>
 80075dc:	b10b      	cbz	r3, 80075e2 <_strtod_l+0x4ea>
 80075de:	4682      	mov	sl, r0
 80075e0:	468b      	mov	fp, r1
 80075e2:	4b2f      	ldr	r3, [pc, #188]	; (80076a0 <_strtod_l+0x5a8>)
 80075e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075ec:	4652      	mov	r2, sl
 80075ee:	465b      	mov	r3, fp
 80075f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80075f4:	f7f9 f828 	bl	8000648 <__aeabi_dmul>
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <_strtod_l+0x5ac>)
 80075fa:	460a      	mov	r2, r1
 80075fc:	400b      	ands	r3, r1
 80075fe:	492a      	ldr	r1, [pc, #168]	; (80076a8 <_strtod_l+0x5b0>)
 8007600:	428b      	cmp	r3, r1
 8007602:	4682      	mov	sl, r0
 8007604:	d8bc      	bhi.n	8007580 <_strtod_l+0x488>
 8007606:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800760a:	428b      	cmp	r3, r1
 800760c:	bf86      	itte	hi
 800760e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076ac <_strtod_l+0x5b4>
 8007612:	f04f 3aff 	movhi.w	sl, #4294967295
 8007616:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800761a:	2300      	movs	r3, #0
 800761c:	9304      	str	r3, [sp, #16]
 800761e:	e084      	b.n	800772a <_strtod_l+0x632>
 8007620:	f018 0f01 	tst.w	r8, #1
 8007624:	d005      	beq.n	8007632 <_strtod_l+0x53a>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f9 f80c 	bl	8000648 <__aeabi_dmul>
 8007630:	2301      	movs	r3, #1
 8007632:	9a04      	ldr	r2, [sp, #16]
 8007634:	3208      	adds	r2, #8
 8007636:	f109 0901 	add.w	r9, r9, #1
 800763a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800763e:	9204      	str	r2, [sp, #16]
 8007640:	e7c9      	b.n	80075d6 <_strtod_l+0x4de>
 8007642:	d0ea      	beq.n	800761a <_strtod_l+0x522>
 8007644:	f1c8 0800 	rsb	r8, r8, #0
 8007648:	f018 020f 	ands.w	r2, r8, #15
 800764c:	d00a      	beq.n	8007664 <_strtod_l+0x56c>
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <_strtod_l+0x5a4>)
 8007650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007654:	4650      	mov	r0, sl
 8007656:	4659      	mov	r1, fp
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f9 f91e 	bl	800089c <__aeabi_ddiv>
 8007660:	4682      	mov	sl, r0
 8007662:	468b      	mov	fp, r1
 8007664:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007668:	d0d7      	beq.n	800761a <_strtod_l+0x522>
 800766a:	f1b8 0f1f 	cmp.w	r8, #31
 800766e:	dd1f      	ble.n	80076b0 <_strtod_l+0x5b8>
 8007670:	2500      	movs	r5, #0
 8007672:	462e      	mov	r6, r5
 8007674:	9507      	str	r5, [sp, #28]
 8007676:	9505      	str	r5, [sp, #20]
 8007678:	2322      	movs	r3, #34	; 0x22
 800767a:	f04f 0a00 	mov.w	sl, #0
 800767e:	f04f 0b00 	mov.w	fp, #0
 8007682:	6023      	str	r3, [r4, #0]
 8007684:	e786      	b.n	8007594 <_strtod_l+0x49c>
 8007686:	bf00      	nop
 8007688:	0800bc46 	.word	0x0800bc46
 800768c:	0800bc84 	.word	0x0800bc84
 8007690:	0800bc3e 	.word	0x0800bc3e
 8007694:	0800be38 	.word	0x0800be38
 8007698:	0800bc21 	.word	0x0800bc21
 800769c:	0800c010 	.word	0x0800c010
 80076a0:	0800bfe8 	.word	0x0800bfe8
 80076a4:	7ff00000 	.word	0x7ff00000
 80076a8:	7ca00000 	.word	0x7ca00000
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	f018 0310 	ands.w	r3, r8, #16
 80076b4:	bf18      	it	ne
 80076b6:	236a      	movne	r3, #106	; 0x6a
 80076b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a68 <_strtod_l+0x970>
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	4650      	mov	r0, sl
 80076c0:	4659      	mov	r1, fp
 80076c2:	2300      	movs	r3, #0
 80076c4:	f018 0f01 	tst.w	r8, #1
 80076c8:	d004      	beq.n	80076d4 <_strtod_l+0x5dc>
 80076ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076ce:	f7f8 ffbb 	bl	8000648 <__aeabi_dmul>
 80076d2:	2301      	movs	r3, #1
 80076d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076d8:	f109 0908 	add.w	r9, r9, #8
 80076dc:	d1f2      	bne.n	80076c4 <_strtod_l+0x5cc>
 80076de:	b10b      	cbz	r3, 80076e4 <_strtod_l+0x5ec>
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	b1c3      	cbz	r3, 800771a <_strtod_l+0x622>
 80076e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	4659      	mov	r1, fp
 80076f4:	dd11      	ble.n	800771a <_strtod_l+0x622>
 80076f6:	2b1f      	cmp	r3, #31
 80076f8:	f340 8124 	ble.w	8007944 <_strtod_l+0x84c>
 80076fc:	2b34      	cmp	r3, #52	; 0x34
 80076fe:	bfde      	ittt	le
 8007700:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007704:	f04f 33ff 	movle.w	r3, #4294967295
 8007708:	fa03 f202 	lslle.w	r2, r3, r2
 800770c:	f04f 0a00 	mov.w	sl, #0
 8007710:	bfcc      	ite	gt
 8007712:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007716:	ea02 0b01 	andle.w	fp, r2, r1
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4650      	mov	r0, sl
 8007720:	4659      	mov	r1, fp
 8007722:	f7f9 f9f9 	bl	8000b18 <__aeabi_dcmpeq>
 8007726:	2800      	cmp	r0, #0
 8007728:	d1a2      	bne.n	8007670 <_strtod_l+0x578>
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	9908      	ldr	r1, [sp, #32]
 8007730:	462b      	mov	r3, r5
 8007732:	463a      	mov	r2, r7
 8007734:	4620      	mov	r0, r4
 8007736:	f002 f98b 	bl	8009a50 <__s2b>
 800773a:	9007      	str	r0, [sp, #28]
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f af1f 	beq.w	8007580 <_strtod_l+0x488>
 8007742:	9b05      	ldr	r3, [sp, #20]
 8007744:	1b9e      	subs	r6, r3, r6
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfb4      	ite	lt
 800774c:	4633      	movlt	r3, r6
 800774e:	2300      	movge	r3, #0
 8007750:	930c      	str	r3, [sp, #48]	; 0x30
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	2500      	movs	r5, #0
 8007756:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800775a:	9312      	str	r3, [sp, #72]	; 0x48
 800775c:	462e      	mov	r6, r5
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	4620      	mov	r0, r4
 8007762:	6859      	ldr	r1, [r3, #4]
 8007764:	f002 f8cc 	bl	8009900 <_Balloc>
 8007768:	9005      	str	r0, [sp, #20]
 800776a:	2800      	cmp	r0, #0
 800776c:	f43f af0c 	beq.w	8007588 <_strtod_l+0x490>
 8007770:	9b07      	ldr	r3, [sp, #28]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	3202      	adds	r2, #2
 8007776:	f103 010c 	add.w	r1, r3, #12
 800777a:	0092      	lsls	r2, r2, #2
 800777c:	300c      	adds	r0, #12
 800777e:	f7fe fc15 	bl	8005fac <memcpy>
 8007782:	ec4b ab10 	vmov	d0, sl, fp
 8007786:	aa1a      	add	r2, sp, #104	; 0x68
 8007788:	a919      	add	r1, sp, #100	; 0x64
 800778a:	4620      	mov	r0, r4
 800778c:	f002 fca6 	bl	800a0dc <__d2b>
 8007790:	ec4b ab18 	vmov	d8, sl, fp
 8007794:	9018      	str	r0, [sp, #96]	; 0x60
 8007796:	2800      	cmp	r0, #0
 8007798:	f43f aef6 	beq.w	8007588 <_strtod_l+0x490>
 800779c:	2101      	movs	r1, #1
 800779e:	4620      	mov	r0, r4
 80077a0:	f002 f9f0 	bl	8009b84 <__i2b>
 80077a4:	4606      	mov	r6, r0
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f aeee 	beq.w	8007588 <_strtod_l+0x490>
 80077ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077ae:	9904      	ldr	r1, [sp, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfab      	itete	ge
 80077b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077be:	bfac      	ite	ge
 80077c0:	eb03 0902 	addge.w	r9, r3, r2
 80077c4:	1ad7      	sublt	r7, r2, r3
 80077c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077c8:	eba3 0801 	sub.w	r8, r3, r1
 80077cc:	4490      	add	r8, r2
 80077ce:	4ba1      	ldr	r3, [pc, #644]	; (8007a54 <_strtod_l+0x95c>)
 80077d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077d4:	4598      	cmp	r8, r3
 80077d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077da:	f280 80c7 	bge.w	800796c <_strtod_l+0x874>
 80077de:	eba3 0308 	sub.w	r3, r3, r8
 80077e2:	2b1f      	cmp	r3, #31
 80077e4:	eba2 0203 	sub.w	r2, r2, r3
 80077e8:	f04f 0101 	mov.w	r1, #1
 80077ec:	f300 80b1 	bgt.w	8007952 <_strtod_l+0x85a>
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	930d      	str	r3, [sp, #52]	; 0x34
 80077f6:	2300      	movs	r3, #0
 80077f8:	9308      	str	r3, [sp, #32]
 80077fa:	eb09 0802 	add.w	r8, r9, r2
 80077fe:	9b04      	ldr	r3, [sp, #16]
 8007800:	45c1      	cmp	r9, r8
 8007802:	4417      	add	r7, r2
 8007804:	441f      	add	r7, r3
 8007806:	464b      	mov	r3, r9
 8007808:	bfa8      	it	ge
 800780a:	4643      	movge	r3, r8
 800780c:	42bb      	cmp	r3, r7
 800780e:	bfa8      	it	ge
 8007810:	463b      	movge	r3, r7
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfc2      	ittt	gt
 8007816:	eba8 0803 	subgt.w	r8, r8, r3
 800781a:	1aff      	subgt	r7, r7, r3
 800781c:	eba9 0903 	subgt.w	r9, r9, r3
 8007820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007822:	2b00      	cmp	r3, #0
 8007824:	dd17      	ble.n	8007856 <_strtod_l+0x75e>
 8007826:	4631      	mov	r1, r6
 8007828:	461a      	mov	r2, r3
 800782a:	4620      	mov	r0, r4
 800782c:	f002 fa6a 	bl	8009d04 <__pow5mult>
 8007830:	4606      	mov	r6, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	f43f aea8 	beq.w	8007588 <_strtod_l+0x490>
 8007838:	4601      	mov	r1, r0
 800783a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800783c:	4620      	mov	r0, r4
 800783e:	f002 f9b7 	bl	8009bb0 <__multiply>
 8007842:	900b      	str	r0, [sp, #44]	; 0x2c
 8007844:	2800      	cmp	r0, #0
 8007846:	f43f ae9f 	beq.w	8007588 <_strtod_l+0x490>
 800784a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800784c:	4620      	mov	r0, r4
 800784e:	f002 f897 	bl	8009980 <_Bfree>
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	9318      	str	r3, [sp, #96]	; 0x60
 8007856:	f1b8 0f00 	cmp.w	r8, #0
 800785a:	f300 808c 	bgt.w	8007976 <_strtod_l+0x87e>
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	dd08      	ble.n	8007876 <_strtod_l+0x77e>
 8007864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007866:	9905      	ldr	r1, [sp, #20]
 8007868:	4620      	mov	r0, r4
 800786a:	f002 fa4b 	bl	8009d04 <__pow5mult>
 800786e:	9005      	str	r0, [sp, #20]
 8007870:	2800      	cmp	r0, #0
 8007872:	f43f ae89 	beq.w	8007588 <_strtod_l+0x490>
 8007876:	2f00      	cmp	r7, #0
 8007878:	dd08      	ble.n	800788c <_strtod_l+0x794>
 800787a:	9905      	ldr	r1, [sp, #20]
 800787c:	463a      	mov	r2, r7
 800787e:	4620      	mov	r0, r4
 8007880:	f002 fa9a 	bl	8009db8 <__lshift>
 8007884:	9005      	str	r0, [sp, #20]
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f ae7e 	beq.w	8007588 <_strtod_l+0x490>
 800788c:	f1b9 0f00 	cmp.w	r9, #0
 8007890:	dd08      	ble.n	80078a4 <_strtod_l+0x7ac>
 8007892:	4631      	mov	r1, r6
 8007894:	464a      	mov	r2, r9
 8007896:	4620      	mov	r0, r4
 8007898:	f002 fa8e 	bl	8009db8 <__lshift>
 800789c:	4606      	mov	r6, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	f43f ae72 	beq.w	8007588 <_strtod_l+0x490>
 80078a4:	9a05      	ldr	r2, [sp, #20]
 80078a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078a8:	4620      	mov	r0, r4
 80078aa:	f002 fb11 	bl	8009ed0 <__mdiff>
 80078ae:	4605      	mov	r5, r0
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f43f ae69 	beq.w	8007588 <_strtod_l+0x490>
 80078b6:	68c3      	ldr	r3, [r0, #12]
 80078b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ba:	2300      	movs	r3, #0
 80078bc:	60c3      	str	r3, [r0, #12]
 80078be:	4631      	mov	r1, r6
 80078c0:	f002 faea 	bl	8009e98 <__mcmp>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	da60      	bge.n	800798a <_strtod_l+0x892>
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	ea53 030a 	orrs.w	r3, r3, sl
 80078ce:	f040 8082 	bne.w	80079d6 <_strtod_l+0x8de>
 80078d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d17d      	bne.n	80079d6 <_strtod_l+0x8de>
 80078da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078de:	0d1b      	lsrs	r3, r3, #20
 80078e0:	051b      	lsls	r3, r3, #20
 80078e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078e6:	d976      	bls.n	80079d6 <_strtod_l+0x8de>
 80078e8:	696b      	ldr	r3, [r5, #20]
 80078ea:	b913      	cbnz	r3, 80078f2 <_strtod_l+0x7fa>
 80078ec:	692b      	ldr	r3, [r5, #16]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	dd71      	ble.n	80079d6 <_strtod_l+0x8de>
 80078f2:	4629      	mov	r1, r5
 80078f4:	2201      	movs	r2, #1
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 fa5e 	bl	8009db8 <__lshift>
 80078fc:	4631      	mov	r1, r6
 80078fe:	4605      	mov	r5, r0
 8007900:	f002 faca 	bl	8009e98 <__mcmp>
 8007904:	2800      	cmp	r0, #0
 8007906:	dd66      	ble.n	80079d6 <_strtod_l+0x8de>
 8007908:	9904      	ldr	r1, [sp, #16]
 800790a:	4a53      	ldr	r2, [pc, #332]	; (8007a58 <_strtod_l+0x960>)
 800790c:	465b      	mov	r3, fp
 800790e:	2900      	cmp	r1, #0
 8007910:	f000 8081 	beq.w	8007a16 <_strtod_l+0x91e>
 8007914:	ea02 010b 	and.w	r1, r2, fp
 8007918:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800791c:	dc7b      	bgt.n	8007a16 <_strtod_l+0x91e>
 800791e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007922:	f77f aea9 	ble.w	8007678 <_strtod_l+0x580>
 8007926:	4b4d      	ldr	r3, [pc, #308]	; (8007a5c <_strtod_l+0x964>)
 8007928:	4650      	mov	r0, sl
 800792a:	4659      	mov	r1, fp
 800792c:	2200      	movs	r2, #0
 800792e:	f7f8 fe8b 	bl	8000648 <__aeabi_dmul>
 8007932:	460b      	mov	r3, r1
 8007934:	4303      	orrs	r3, r0
 8007936:	bf08      	it	eq
 8007938:	2322      	moveq	r3, #34	; 0x22
 800793a:	4682      	mov	sl, r0
 800793c:	468b      	mov	fp, r1
 800793e:	bf08      	it	eq
 8007940:	6023      	streq	r3, [r4, #0]
 8007942:	e62b      	b.n	800759c <_strtod_l+0x4a4>
 8007944:	f04f 32ff 	mov.w	r2, #4294967295
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	ea03 0a0a 	and.w	sl, r3, sl
 8007950:	e6e3      	b.n	800771a <_strtod_l+0x622>
 8007952:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007956:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800795a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800795e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007962:	fa01 f308 	lsl.w	r3, r1, r8
 8007966:	9308      	str	r3, [sp, #32]
 8007968:	910d      	str	r1, [sp, #52]	; 0x34
 800796a:	e746      	b.n	80077fa <_strtod_l+0x702>
 800796c:	2300      	movs	r3, #0
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	2301      	movs	r3, #1
 8007972:	930d      	str	r3, [sp, #52]	; 0x34
 8007974:	e741      	b.n	80077fa <_strtod_l+0x702>
 8007976:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007978:	4642      	mov	r2, r8
 800797a:	4620      	mov	r0, r4
 800797c:	f002 fa1c 	bl	8009db8 <__lshift>
 8007980:	9018      	str	r0, [sp, #96]	; 0x60
 8007982:	2800      	cmp	r0, #0
 8007984:	f47f af6b 	bne.w	800785e <_strtod_l+0x766>
 8007988:	e5fe      	b.n	8007588 <_strtod_l+0x490>
 800798a:	465f      	mov	r7, fp
 800798c:	d16e      	bne.n	8007a6c <_strtod_l+0x974>
 800798e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007994:	b342      	cbz	r2, 80079e8 <_strtod_l+0x8f0>
 8007996:	4a32      	ldr	r2, [pc, #200]	; (8007a60 <_strtod_l+0x968>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d128      	bne.n	80079ee <_strtod_l+0x8f6>
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	4651      	mov	r1, sl
 80079a0:	b1eb      	cbz	r3, 80079de <_strtod_l+0x8e6>
 80079a2:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <_strtod_l+0x960>)
 80079a4:	403b      	ands	r3, r7
 80079a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	d819      	bhi.n	80079e4 <_strtod_l+0x8ec>
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	4299      	cmp	r1, r3
 80079bc:	d117      	bne.n	80079ee <_strtod_l+0x8f6>
 80079be:	4b29      	ldr	r3, [pc, #164]	; (8007a64 <_strtod_l+0x96c>)
 80079c0:	429f      	cmp	r7, r3
 80079c2:	d102      	bne.n	80079ca <_strtod_l+0x8d2>
 80079c4:	3101      	adds	r1, #1
 80079c6:	f43f addf 	beq.w	8007588 <_strtod_l+0x490>
 80079ca:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <_strtod_l+0x960>)
 80079cc:	403b      	ands	r3, r7
 80079ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079d2:	f04f 0a00 	mov.w	sl, #0
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1a4      	bne.n	8007926 <_strtod_l+0x82e>
 80079dc:	e5de      	b.n	800759c <_strtod_l+0x4a4>
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
 80079e2:	e7ea      	b.n	80079ba <_strtod_l+0x8c2>
 80079e4:	4613      	mov	r3, r2
 80079e6:	e7e8      	b.n	80079ba <_strtod_l+0x8c2>
 80079e8:	ea53 030a 	orrs.w	r3, r3, sl
 80079ec:	d08c      	beq.n	8007908 <_strtod_l+0x810>
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	b1db      	cbz	r3, 8007a2a <_strtod_l+0x932>
 80079f2:	423b      	tst	r3, r7
 80079f4:	d0ef      	beq.n	80079d6 <_strtod_l+0x8de>
 80079f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f8:	9a04      	ldr	r2, [sp, #16]
 80079fa:	4650      	mov	r0, sl
 80079fc:	4659      	mov	r1, fp
 80079fe:	b1c3      	cbz	r3, 8007a32 <_strtod_l+0x93a>
 8007a00:	f7ff fb5d 	bl	80070be <sulp>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	ec51 0b18 	vmov	r0, r1, d8
 8007a0c:	f7f8 fc66 	bl	80002dc <__adddf3>
 8007a10:	4682      	mov	sl, r0
 8007a12:	468b      	mov	fp, r1
 8007a14:	e7df      	b.n	80079d6 <_strtod_l+0x8de>
 8007a16:	4013      	ands	r3, r2
 8007a18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a24:	f04f 3aff 	mov.w	sl, #4294967295
 8007a28:	e7d5      	b.n	80079d6 <_strtod_l+0x8de>
 8007a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2c:	ea13 0f0a 	tst.w	r3, sl
 8007a30:	e7e0      	b.n	80079f4 <_strtod_l+0x8fc>
 8007a32:	f7ff fb44 	bl	80070be <sulp>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	ec51 0b18 	vmov	r0, r1, d8
 8007a3e:	f7f8 fc4b 	bl	80002d8 <__aeabi_dsub>
 8007a42:	2200      	movs	r2, #0
 8007a44:	2300      	movs	r3, #0
 8007a46:	4682      	mov	sl, r0
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f7f9 f865 	bl	8000b18 <__aeabi_dcmpeq>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d0c1      	beq.n	80079d6 <_strtod_l+0x8de>
 8007a52:	e611      	b.n	8007678 <_strtod_l+0x580>
 8007a54:	fffffc02 	.word	0xfffffc02
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	39500000 	.word	0x39500000
 8007a60:	000fffff 	.word	0x000fffff
 8007a64:	7fefffff 	.word	0x7fefffff
 8007a68:	0800bc98 	.word	0x0800bc98
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f002 fb90 	bl	800a194 <__ratio>
 8007a74:	ec59 8b10 	vmov	r8, r9, d0
 8007a78:	ee10 0a10 	vmov	r0, s0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f9 f85c 	bl	8000b40 <__aeabi_dcmple>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d07a      	beq.n	8007b82 <_strtod_l+0xa8a>
 8007a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04a      	beq.n	8007b28 <_strtod_l+0xa30>
 8007a92:	4b95      	ldr	r3, [pc, #596]	; (8007ce8 <_strtod_l+0xbf0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ce8 <_strtod_l+0xbf0>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	4b92      	ldr	r3, [pc, #584]	; (8007cec <_strtod_l+0xbf4>)
 8007aa4:	403b      	ands	r3, r7
 8007aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aaa:	4b91      	ldr	r3, [pc, #580]	; (8007cf0 <_strtod_l+0xbf8>)
 8007aac:	429a      	cmp	r2, r3
 8007aae:	f040 80b0 	bne.w	8007c12 <_strtod_l+0xb1a>
 8007ab2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ab6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aba:	ec4b ab10 	vmov	d0, sl, fp
 8007abe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ac2:	f002 fa8f 	bl	8009fe4 <__ulp>
 8007ac6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007aca:	ec53 2b10 	vmov	r2, r3, d0
 8007ace:	f7f8 fdbb 	bl	8000648 <__aeabi_dmul>
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	f7f8 fc01 	bl	80002dc <__adddf3>
 8007ada:	460b      	mov	r3, r1
 8007adc:	4983      	ldr	r1, [pc, #524]	; (8007cec <_strtod_l+0xbf4>)
 8007ade:	4a85      	ldr	r2, [pc, #532]	; (8007cf4 <_strtod_l+0xbfc>)
 8007ae0:	4019      	ands	r1, r3
 8007ae2:	4291      	cmp	r1, r2
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	d960      	bls.n	8007baa <_strtod_l+0xab2>
 8007ae8:	ee18 3a90 	vmov	r3, s17
 8007aec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d104      	bne.n	8007afe <_strtod_l+0xa06>
 8007af4:	ee18 3a10 	vmov	r3, s16
 8007af8:	3301      	adds	r3, #1
 8007afa:	f43f ad45 	beq.w	8007588 <_strtod_l+0x490>
 8007afe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d00 <_strtod_l+0xc08>
 8007b02:	f04f 3aff 	mov.w	sl, #4294967295
 8007b06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 ff39 	bl	8009980 <_Bfree>
 8007b0e:	9905      	ldr	r1, [sp, #20]
 8007b10:	4620      	mov	r0, r4
 8007b12:	f001 ff35 	bl	8009980 <_Bfree>
 8007b16:	4631      	mov	r1, r6
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f001 ff31 	bl	8009980 <_Bfree>
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 ff2d 	bl	8009980 <_Bfree>
 8007b26:	e61a      	b.n	800775e <_strtod_l+0x666>
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	d11b      	bne.n	8007b66 <_strtod_l+0xa6e>
 8007b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b32:	b9f3      	cbnz	r3, 8007b72 <_strtod_l+0xa7a>
 8007b34:	4b6c      	ldr	r3, [pc, #432]	; (8007ce8 <_strtod_l+0xbf0>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fff6 	bl	8000b2c <__aeabi_dcmplt>
 8007b40:	b9d0      	cbnz	r0, 8007b78 <_strtod_l+0xa80>
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <_strtod_l+0xc00>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fd7d 	bl	8000648 <__aeabi_dmul>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	4689      	mov	r9, r1
 8007b52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b5a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b64:	e79d      	b.n	8007aa2 <_strtod_l+0x9aa>
 8007b66:	f1ba 0f01 	cmp.w	sl, #1
 8007b6a:	d102      	bne.n	8007b72 <_strtod_l+0xa7a>
 8007b6c:	2f00      	cmp	r7, #0
 8007b6e:	f43f ad83 	beq.w	8007678 <_strtod_l+0x580>
 8007b72:	4b62      	ldr	r3, [pc, #392]	; (8007cfc <_strtod_l+0xc04>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	e78e      	b.n	8007a96 <_strtod_l+0x99e>
 8007b78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007cf8 <_strtod_l+0xc00>
 8007b7c:	f04f 0800 	mov.w	r8, #0
 8007b80:	e7e7      	b.n	8007b52 <_strtod_l+0xa5a>
 8007b82:	4b5d      	ldr	r3, [pc, #372]	; (8007cf8 <_strtod_l+0xc00>)
 8007b84:	4640      	mov	r0, r8
 8007b86:	4649      	mov	r1, r9
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f7f8 fd5d 	bl	8000648 <__aeabi_dmul>
 8007b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b90:	4680      	mov	r8, r0
 8007b92:	4689      	mov	r9, r1
 8007b94:	b933      	cbnz	r3, 8007ba4 <_strtod_l+0xaac>
 8007b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b9a:	900e      	str	r0, [sp, #56]	; 0x38
 8007b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ba2:	e7dd      	b.n	8007b60 <_strtod_l+0xa68>
 8007ba4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ba8:	e7f9      	b.n	8007b9e <_strtod_l+0xaa6>
 8007baa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1a8      	bne.n	8007b06 <_strtod_l+0xa0e>
 8007bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bba:	0d1b      	lsrs	r3, r3, #20
 8007bbc:	051b      	lsls	r3, r3, #20
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d1a1      	bne.n	8007b06 <_strtod_l+0xa0e>
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	f7f9 f89f 	bl	8000d08 <__aeabi_d2lz>
 8007bca:	f7f8 fd0f 	bl	80005ec <__aeabi_l2d>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f8 fb7f 	bl	80002d8 <__aeabi_dsub>
 8007bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007be0:	ea43 030a 	orr.w	r3, r3, sl
 8007be4:	4313      	orrs	r3, r2
 8007be6:	4680      	mov	r8, r0
 8007be8:	4689      	mov	r9, r1
 8007bea:	d055      	beq.n	8007c98 <_strtod_l+0xba0>
 8007bec:	a336      	add	r3, pc, #216	; (adr r3, 8007cc8 <_strtod_l+0xbd0>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 ff9b 	bl	8000b2c <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f47f acd0 	bne.w	800759c <_strtod_l+0x4a4>
 8007bfc:	a334      	add	r3, pc, #208	; (adr r3, 8007cd0 <_strtod_l+0xbd8>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	4640      	mov	r0, r8
 8007c04:	4649      	mov	r1, r9
 8007c06:	f7f8 ffaf 	bl	8000b68 <__aeabi_dcmpgt>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f43f af7b 	beq.w	8007b06 <_strtod_l+0xa0e>
 8007c10:	e4c4      	b.n	800759c <_strtod_l+0x4a4>
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	b333      	cbz	r3, 8007c64 <_strtod_l+0xb6c>
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c1c:	d822      	bhi.n	8007c64 <_strtod_l+0xb6c>
 8007c1e:	a32e      	add	r3, pc, #184	; (adr r3, 8007cd8 <_strtod_l+0xbe0>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	4640      	mov	r0, r8
 8007c26:	4649      	mov	r1, r9
 8007c28:	f7f8 ff8a 	bl	8000b40 <__aeabi_dcmple>
 8007c2c:	b1a0      	cbz	r0, 8007c58 <_strtod_l+0xb60>
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4640      	mov	r0, r8
 8007c32:	f7f8 ffe1 	bl	8000bf8 <__aeabi_d2uiz>
 8007c36:	2801      	cmp	r0, #1
 8007c38:	bf38      	it	cc
 8007c3a:	2001      	movcc	r0, #1
 8007c3c:	f7f8 fc8a 	bl	8000554 <__aeabi_ui2d>
 8007c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	bb23      	cbnz	r3, 8007c92 <_strtod_l+0xb9a>
 8007c48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c4c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c4e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	9309      	str	r3, [sp, #36]	; 0x24
 8007c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c68:	eeb0 0a48 	vmov.f32	s0, s16
 8007c6c:	eef0 0a68 	vmov.f32	s1, s17
 8007c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c74:	f002 f9b6 	bl	8009fe4 <__ulp>
 8007c78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c7c:	ec53 2b10 	vmov	r2, r3, d0
 8007c80:	f7f8 fce2 	bl	8000648 <__aeabi_dmul>
 8007c84:	ec53 2b18 	vmov	r2, r3, d8
 8007c88:	f7f8 fb28 	bl	80002dc <__adddf3>
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	468b      	mov	fp, r1
 8007c90:	e78d      	b.n	8007bae <_strtod_l+0xab6>
 8007c92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007c96:	e7db      	b.n	8007c50 <_strtod_l+0xb58>
 8007c98:	a311      	add	r3, pc, #68	; (adr r3, 8007ce0 <_strtod_l+0xbe8>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 ff45 	bl	8000b2c <__aeabi_dcmplt>
 8007ca2:	e7b2      	b.n	8007c0a <_strtod_l+0xb12>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	f7ff ba6b 	b.w	8007188 <_strtod_l+0x90>
 8007cb2:	2a65      	cmp	r2, #101	; 0x65
 8007cb4:	f43f ab5f 	beq.w	8007376 <_strtod_l+0x27e>
 8007cb8:	2a45      	cmp	r2, #69	; 0x45
 8007cba:	f43f ab5c 	beq.w	8007376 <_strtod_l+0x27e>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f7ff bb94 	b.w	80073ec <_strtod_l+0x2f4>
 8007cc4:	f3af 8000 	nop.w
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fdfffff 	.word	0x3fdfffff
 8007cd0:	35afe535 	.word	0x35afe535
 8007cd4:	3fe00000 	.word	0x3fe00000
 8007cd8:	ffc00000 	.word	0xffc00000
 8007cdc:	41dfffff 	.word	0x41dfffff
 8007ce0:	94a03595 	.word	0x94a03595
 8007ce4:	3fcfffff 	.word	0x3fcfffff
 8007ce8:	3ff00000 	.word	0x3ff00000
 8007cec:	7ff00000 	.word	0x7ff00000
 8007cf0:	7fe00000 	.word	0x7fe00000
 8007cf4:	7c9fffff 	.word	0x7c9fffff
 8007cf8:	3fe00000 	.word	0x3fe00000
 8007cfc:	bff00000 	.word	0xbff00000
 8007d00:	7fefffff 	.word	0x7fefffff

08007d04 <strtod>:
 8007d04:	460a      	mov	r2, r1
 8007d06:	4601      	mov	r1, r0
 8007d08:	4802      	ldr	r0, [pc, #8]	; (8007d14 <strtod+0x10>)
 8007d0a:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <strtod+0x14>)
 8007d0c:	6800      	ldr	r0, [r0, #0]
 8007d0e:	f7ff b9f3 	b.w	80070f8 <_strtod_l>
 8007d12:	bf00      	nop
 8007d14:	20000014 	.word	0x20000014
 8007d18:	2000007c 	.word	0x2000007c

08007d1c <strtok>:
 8007d1c:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <strtok+0x5c>)
 8007d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d20:	681e      	ldr	r6, [r3, #0]
 8007d22:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007d24:	4605      	mov	r5, r0
 8007d26:	b9fc      	cbnz	r4, 8007d68 <strtok+0x4c>
 8007d28:	2050      	movs	r0, #80	; 0x50
 8007d2a:	9101      	str	r1, [sp, #4]
 8007d2c:	f7fe f936 	bl	8005f9c <malloc>
 8007d30:	9901      	ldr	r1, [sp, #4]
 8007d32:	65b0      	str	r0, [r6, #88]	; 0x58
 8007d34:	4602      	mov	r2, r0
 8007d36:	b920      	cbnz	r0, 8007d42 <strtok+0x26>
 8007d38:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <strtok+0x60>)
 8007d3a:	4811      	ldr	r0, [pc, #68]	; (8007d80 <strtok+0x64>)
 8007d3c:	2157      	movs	r1, #87	; 0x57
 8007d3e:	f7fe f8cb 	bl	8005ed8 <__assert_func>
 8007d42:	e9c0 4400 	strd	r4, r4, [r0]
 8007d46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007d4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007d4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007d52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007d56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007d5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007d5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007d62:	6184      	str	r4, [r0, #24]
 8007d64:	7704      	strb	r4, [r0, #28]
 8007d66:	6244      	str	r4, [r0, #36]	; 0x24
 8007d68:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	b002      	add	sp, #8
 8007d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d74:	f000 b806 	b.w	8007d84 <__strtok_r>
 8007d78:	20000014 	.word	0x20000014
 8007d7c:	0800bcc0 	.word	0x0800bcc0
 8007d80:	0800bcd7 	.word	0x0800bcd7

08007d84 <__strtok_r>:
 8007d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d86:	b908      	cbnz	r0, 8007d8c <__strtok_r+0x8>
 8007d88:	6810      	ldr	r0, [r2, #0]
 8007d8a:	b188      	cbz	r0, 8007db0 <__strtok_r+0x2c>
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d94:	460f      	mov	r7, r1
 8007d96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d9a:	b91e      	cbnz	r6, 8007da4 <__strtok_r+0x20>
 8007d9c:	b965      	cbnz	r5, 8007db8 <__strtok_r+0x34>
 8007d9e:	6015      	str	r5, [r2, #0]
 8007da0:	4628      	mov	r0, r5
 8007da2:	e005      	b.n	8007db0 <__strtok_r+0x2c>
 8007da4:	42b5      	cmp	r5, r6
 8007da6:	d1f6      	bne.n	8007d96 <__strtok_r+0x12>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f0      	bne.n	8007d8e <__strtok_r+0xa>
 8007dac:	6014      	str	r4, [r2, #0]
 8007dae:	7003      	strb	r3, [r0, #0]
 8007db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db2:	461c      	mov	r4, r3
 8007db4:	e00c      	b.n	8007dd0 <__strtok_r+0x4c>
 8007db6:	b915      	cbnz	r5, 8007dbe <__strtok_r+0x3a>
 8007db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007dc2:	42ab      	cmp	r3, r5
 8007dc4:	d1f7      	bne.n	8007db6 <__strtok_r+0x32>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f3      	beq.n	8007db2 <__strtok_r+0x2e>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007dd0:	6014      	str	r4, [r2, #0]
 8007dd2:	e7ed      	b.n	8007db0 <__strtok_r+0x2c>

08007dd4 <_strtol_l.constprop.0>:
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dda:	d001      	beq.n	8007de0 <_strtol_l.constprop.0+0xc>
 8007ddc:	2b24      	cmp	r3, #36	; 0x24
 8007dde:	d906      	bls.n	8007dee <_strtol_l.constprop.0+0x1a>
 8007de0:	f7fe f8a0 	bl	8005f24 <__errno>
 8007de4:	2316      	movs	r3, #22
 8007de6:	6003      	str	r3, [r0, #0]
 8007de8:	2000      	movs	r0, #0
 8007dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007ed4 <_strtol_l.constprop.0+0x100>
 8007df2:	460d      	mov	r5, r1
 8007df4:	462e      	mov	r6, r5
 8007df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dfa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007dfe:	f017 0708 	ands.w	r7, r7, #8
 8007e02:	d1f7      	bne.n	8007df4 <_strtol_l.constprop.0+0x20>
 8007e04:	2c2d      	cmp	r4, #45	; 0x2d
 8007e06:	d132      	bne.n	8007e6e <_strtol_l.constprop.0+0x9a>
 8007e08:	782c      	ldrb	r4, [r5, #0]
 8007e0a:	2701      	movs	r7, #1
 8007e0c:	1cb5      	adds	r5, r6, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d05b      	beq.n	8007eca <_strtol_l.constprop.0+0xf6>
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d109      	bne.n	8007e2a <_strtol_l.constprop.0+0x56>
 8007e16:	2c30      	cmp	r4, #48	; 0x30
 8007e18:	d107      	bne.n	8007e2a <_strtol_l.constprop.0+0x56>
 8007e1a:	782c      	ldrb	r4, [r5, #0]
 8007e1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e20:	2c58      	cmp	r4, #88	; 0x58
 8007e22:	d14d      	bne.n	8007ec0 <_strtol_l.constprop.0+0xec>
 8007e24:	786c      	ldrb	r4, [r5, #1]
 8007e26:	2310      	movs	r3, #16
 8007e28:	3502      	adds	r5, #2
 8007e2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e32:	f04f 0c00 	mov.w	ip, #0
 8007e36:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e3a:	4666      	mov	r6, ip
 8007e3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007e44:	f1be 0f09 	cmp.w	lr, #9
 8007e48:	d816      	bhi.n	8007e78 <_strtol_l.constprop.0+0xa4>
 8007e4a:	4674      	mov	r4, lr
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	dd24      	ble.n	8007e9a <_strtol_l.constprop.0+0xc6>
 8007e50:	f1bc 0f00 	cmp.w	ip, #0
 8007e54:	db1e      	blt.n	8007e94 <_strtol_l.constprop.0+0xc0>
 8007e56:	45b1      	cmp	r9, r6
 8007e58:	d31c      	bcc.n	8007e94 <_strtol_l.constprop.0+0xc0>
 8007e5a:	d101      	bne.n	8007e60 <_strtol_l.constprop.0+0x8c>
 8007e5c:	45a2      	cmp	sl, r4
 8007e5e:	db19      	blt.n	8007e94 <_strtol_l.constprop.0+0xc0>
 8007e60:	fb06 4603 	mla	r6, r6, r3, r4
 8007e64:	f04f 0c01 	mov.w	ip, #1
 8007e68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e6c:	e7e8      	b.n	8007e40 <_strtol_l.constprop.0+0x6c>
 8007e6e:	2c2b      	cmp	r4, #43	; 0x2b
 8007e70:	bf04      	itt	eq
 8007e72:	782c      	ldrbeq	r4, [r5, #0]
 8007e74:	1cb5      	addeq	r5, r6, #2
 8007e76:	e7ca      	b.n	8007e0e <_strtol_l.constprop.0+0x3a>
 8007e78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e7c:	f1be 0f19 	cmp.w	lr, #25
 8007e80:	d801      	bhi.n	8007e86 <_strtol_l.constprop.0+0xb2>
 8007e82:	3c37      	subs	r4, #55	; 0x37
 8007e84:	e7e2      	b.n	8007e4c <_strtol_l.constprop.0+0x78>
 8007e86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e8a:	f1be 0f19 	cmp.w	lr, #25
 8007e8e:	d804      	bhi.n	8007e9a <_strtol_l.constprop.0+0xc6>
 8007e90:	3c57      	subs	r4, #87	; 0x57
 8007e92:	e7db      	b.n	8007e4c <_strtol_l.constprop.0+0x78>
 8007e94:	f04f 3cff 	mov.w	ip, #4294967295
 8007e98:	e7e6      	b.n	8007e68 <_strtol_l.constprop.0+0x94>
 8007e9a:	f1bc 0f00 	cmp.w	ip, #0
 8007e9e:	da05      	bge.n	8007eac <_strtol_l.constprop.0+0xd8>
 8007ea0:	2322      	movs	r3, #34	; 0x22
 8007ea2:	6003      	str	r3, [r0, #0]
 8007ea4:	4646      	mov	r6, r8
 8007ea6:	b942      	cbnz	r2, 8007eba <_strtol_l.constprop.0+0xe6>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	e79e      	b.n	8007dea <_strtol_l.constprop.0+0x16>
 8007eac:	b107      	cbz	r7, 8007eb0 <_strtol_l.constprop.0+0xdc>
 8007eae:	4276      	negs	r6, r6
 8007eb0:	2a00      	cmp	r2, #0
 8007eb2:	d0f9      	beq.n	8007ea8 <_strtol_l.constprop.0+0xd4>
 8007eb4:	f1bc 0f00 	cmp.w	ip, #0
 8007eb8:	d000      	beq.n	8007ebc <_strtol_l.constprop.0+0xe8>
 8007eba:	1e69      	subs	r1, r5, #1
 8007ebc:	6011      	str	r1, [r2, #0]
 8007ebe:	e7f3      	b.n	8007ea8 <_strtol_l.constprop.0+0xd4>
 8007ec0:	2430      	movs	r4, #48	; 0x30
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1b1      	bne.n	8007e2a <_strtol_l.constprop.0+0x56>
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	e7af      	b.n	8007e2a <_strtol_l.constprop.0+0x56>
 8007eca:	2c30      	cmp	r4, #48	; 0x30
 8007ecc:	d0a5      	beq.n	8007e1a <_strtol_l.constprop.0+0x46>
 8007ece:	230a      	movs	r3, #10
 8007ed0:	e7ab      	b.n	8007e2a <_strtol_l.constprop.0+0x56>
 8007ed2:	bf00      	nop
 8007ed4:	0800bd35 	.word	0x0800bd35

08007ed8 <strtol>:
 8007ed8:	4613      	mov	r3, r2
 8007eda:	460a      	mov	r2, r1
 8007edc:	4601      	mov	r1, r0
 8007ede:	4802      	ldr	r0, [pc, #8]	; (8007ee8 <strtol+0x10>)
 8007ee0:	6800      	ldr	r0, [r0, #0]
 8007ee2:	f7ff bf77 	b.w	8007dd4 <_strtol_l.constprop.0>
 8007ee6:	bf00      	nop
 8007ee8:	20000014 	.word	0x20000014

08007eec <__swbuf_r>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	460e      	mov	r6, r1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	b118      	cbz	r0, 8007efe <__swbuf_r+0x12>
 8007ef6:	6983      	ldr	r3, [r0, #24]
 8007ef8:	b90b      	cbnz	r3, 8007efe <__swbuf_r+0x12>
 8007efa:	f001 f851 	bl	8008fa0 <__sinit>
 8007efe:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <__swbuf_r+0x98>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d12b      	bne.n	8007f5c <__swbuf_r+0x70>
 8007f04:	686c      	ldr	r4, [r5, #4]
 8007f06:	69a3      	ldr	r3, [r4, #24]
 8007f08:	60a3      	str	r3, [r4, #8]
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	071a      	lsls	r2, r3, #28
 8007f0e:	d52f      	bpl.n	8007f70 <__swbuf_r+0x84>
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	b36b      	cbz	r3, 8007f70 <__swbuf_r+0x84>
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	6820      	ldr	r0, [r4, #0]
 8007f18:	1ac0      	subs	r0, r0, r3
 8007f1a:	6963      	ldr	r3, [r4, #20]
 8007f1c:	b2f6      	uxtb	r6, r6
 8007f1e:	4283      	cmp	r3, r0
 8007f20:	4637      	mov	r7, r6
 8007f22:	dc04      	bgt.n	8007f2e <__swbuf_r+0x42>
 8007f24:	4621      	mov	r1, r4
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 ffa6 	bl	8008e78 <_fflush_r>
 8007f2c:	bb30      	cbnz	r0, 8007f7c <__swbuf_r+0x90>
 8007f2e:	68a3      	ldr	r3, [r4, #8]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	60a3      	str	r3, [r4, #8]
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	701e      	strb	r6, [r3, #0]
 8007f3c:	6963      	ldr	r3, [r4, #20]
 8007f3e:	3001      	adds	r0, #1
 8007f40:	4283      	cmp	r3, r0
 8007f42:	d004      	beq.n	8007f4e <__swbuf_r+0x62>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	07db      	lsls	r3, r3, #31
 8007f48:	d506      	bpl.n	8007f58 <__swbuf_r+0x6c>
 8007f4a:	2e0a      	cmp	r6, #10
 8007f4c:	d104      	bne.n	8007f58 <__swbuf_r+0x6c>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 ff91 	bl	8008e78 <_fflush_r>
 8007f56:	b988      	cbnz	r0, 8007f7c <__swbuf_r+0x90>
 8007f58:	4638      	mov	r0, r7
 8007f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <__swbuf_r+0x9c>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d101      	bne.n	8007f66 <__swbuf_r+0x7a>
 8007f62:	68ac      	ldr	r4, [r5, #8]
 8007f64:	e7cf      	b.n	8007f06 <__swbuf_r+0x1a>
 8007f66:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <__swbuf_r+0xa0>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	bf08      	it	eq
 8007f6c:	68ec      	ldreq	r4, [r5, #12]
 8007f6e:	e7ca      	b.n	8007f06 <__swbuf_r+0x1a>
 8007f70:	4621      	mov	r1, r4
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 f80c 	bl	8007f90 <__swsetup_r>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d0cb      	beq.n	8007f14 <__swbuf_r+0x28>
 8007f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f80:	e7ea      	b.n	8007f58 <__swbuf_r+0x6c>
 8007f82:	bf00      	nop
 8007f84:	0800bed0 	.word	0x0800bed0
 8007f88:	0800bef0 	.word	0x0800bef0
 8007f8c:	0800beb0 	.word	0x0800beb0

08007f90 <__swsetup_r>:
 8007f90:	4b32      	ldr	r3, [pc, #200]	; (800805c <__swsetup_r+0xcc>)
 8007f92:	b570      	push	{r4, r5, r6, lr}
 8007f94:	681d      	ldr	r5, [r3, #0]
 8007f96:	4606      	mov	r6, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	b125      	cbz	r5, 8007fa6 <__swsetup_r+0x16>
 8007f9c:	69ab      	ldr	r3, [r5, #24]
 8007f9e:	b913      	cbnz	r3, 8007fa6 <__swsetup_r+0x16>
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 fffd 	bl	8008fa0 <__sinit>
 8007fa6:	4b2e      	ldr	r3, [pc, #184]	; (8008060 <__swsetup_r+0xd0>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d10f      	bne.n	8007fcc <__swsetup_r+0x3c>
 8007fac:	686c      	ldr	r4, [r5, #4]
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fb4:	0719      	lsls	r1, r3, #28
 8007fb6:	d42c      	bmi.n	8008012 <__swsetup_r+0x82>
 8007fb8:	06dd      	lsls	r5, r3, #27
 8007fba:	d411      	bmi.n	8007fe0 <__swsetup_r+0x50>
 8007fbc:	2309      	movs	r3, #9
 8007fbe:	6033      	str	r3, [r6, #0]
 8007fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fca:	e03e      	b.n	800804a <__swsetup_r+0xba>
 8007fcc:	4b25      	ldr	r3, [pc, #148]	; (8008064 <__swsetup_r+0xd4>)
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d101      	bne.n	8007fd6 <__swsetup_r+0x46>
 8007fd2:	68ac      	ldr	r4, [r5, #8]
 8007fd4:	e7eb      	b.n	8007fae <__swsetup_r+0x1e>
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <__swsetup_r+0xd8>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	bf08      	it	eq
 8007fdc:	68ec      	ldreq	r4, [r5, #12]
 8007fde:	e7e6      	b.n	8007fae <__swsetup_r+0x1e>
 8007fe0:	0758      	lsls	r0, r3, #29
 8007fe2:	d512      	bpl.n	800800a <__swsetup_r+0x7a>
 8007fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fe6:	b141      	cbz	r1, 8007ffa <__swsetup_r+0x6a>
 8007fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fec:	4299      	cmp	r1, r3
 8007fee:	d002      	beq.n	8007ff6 <__swsetup_r+0x66>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7fd fff1 	bl	8005fd8 <_free_r>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	2300      	movs	r3, #0
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f043 0308 	orr.w	r3, r3, #8
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	b94b      	cbnz	r3, 800802a <__swsetup_r+0x9a>
 8008016:	89a3      	ldrh	r3, [r4, #12]
 8008018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800801c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008020:	d003      	beq.n	800802a <__swsetup_r+0x9a>
 8008022:	4621      	mov	r1, r4
 8008024:	4630      	mov	r0, r6
 8008026:	f001 fbf3 	bl	8009810 <__smakebuf_r>
 800802a:	89a0      	ldrh	r0, [r4, #12]
 800802c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008030:	f010 0301 	ands.w	r3, r0, #1
 8008034:	d00a      	beq.n	800804c <__swsetup_r+0xbc>
 8008036:	2300      	movs	r3, #0
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	6963      	ldr	r3, [r4, #20]
 800803c:	425b      	negs	r3, r3
 800803e:	61a3      	str	r3, [r4, #24]
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	b943      	cbnz	r3, 8008056 <__swsetup_r+0xc6>
 8008044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008048:	d1ba      	bne.n	8007fc0 <__swsetup_r+0x30>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	0781      	lsls	r1, r0, #30
 800804e:	bf58      	it	pl
 8008050:	6963      	ldrpl	r3, [r4, #20]
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	e7f4      	b.n	8008040 <__swsetup_r+0xb0>
 8008056:	2000      	movs	r0, #0
 8008058:	e7f7      	b.n	800804a <__swsetup_r+0xba>
 800805a:	bf00      	nop
 800805c:	20000014 	.word	0x20000014
 8008060:	0800bed0 	.word	0x0800bed0
 8008064:	0800bef0 	.word	0x0800bef0
 8008068:	0800beb0 	.word	0x0800beb0

0800806c <abort>:
 800806c:	b508      	push	{r3, lr}
 800806e:	2006      	movs	r0, #6
 8008070:	f002 fada 	bl	800a628 <raise>
 8008074:	2001      	movs	r0, #1
 8008076:	f7fa fbc9 	bl	800280c <_exit>

0800807a <quorem>:
 800807a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807e:	6903      	ldr	r3, [r0, #16]
 8008080:	690c      	ldr	r4, [r1, #16]
 8008082:	42a3      	cmp	r3, r4
 8008084:	4607      	mov	r7, r0
 8008086:	f2c0 8081 	blt.w	800818c <quorem+0x112>
 800808a:	3c01      	subs	r4, #1
 800808c:	f101 0814 	add.w	r8, r1, #20
 8008090:	f100 0514 	add.w	r5, r0, #20
 8008094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800809e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080a2:	3301      	adds	r3, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80080b2:	d331      	bcc.n	8008118 <quorem+0x9e>
 80080b4:	f04f 0e00 	mov.w	lr, #0
 80080b8:	4640      	mov	r0, r8
 80080ba:	46ac      	mov	ip, r5
 80080bc:	46f2      	mov	sl, lr
 80080be:	f850 2b04 	ldr.w	r2, [r0], #4
 80080c2:	b293      	uxth	r3, r2
 80080c4:	fb06 e303 	mla	r3, r6, r3, lr
 80080c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	ebaa 0303 	sub.w	r3, sl, r3
 80080d2:	f8dc a000 	ldr.w	sl, [ip]
 80080d6:	0c12      	lsrs	r2, r2, #16
 80080d8:	fa13 f38a 	uxtah	r3, r3, sl
 80080dc:	fb06 e202 	mla	r2, r6, r2, lr
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080e8:	b292      	uxth	r2, r2
 80080ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80080f6:	4581      	cmp	r9, r0
 80080f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080fc:	f84c 3b04 	str.w	r3, [ip], #4
 8008100:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008104:	d2db      	bcs.n	80080be <quorem+0x44>
 8008106:	f855 300b 	ldr.w	r3, [r5, fp]
 800810a:	b92b      	cbnz	r3, 8008118 <quorem+0x9e>
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	3b04      	subs	r3, #4
 8008110:	429d      	cmp	r5, r3
 8008112:	461a      	mov	r2, r3
 8008114:	d32e      	bcc.n	8008174 <quorem+0xfa>
 8008116:	613c      	str	r4, [r7, #16]
 8008118:	4638      	mov	r0, r7
 800811a:	f001 febd 	bl	8009e98 <__mcmp>
 800811e:	2800      	cmp	r0, #0
 8008120:	db24      	blt.n	800816c <quorem+0xf2>
 8008122:	3601      	adds	r6, #1
 8008124:	4628      	mov	r0, r5
 8008126:	f04f 0c00 	mov.w	ip, #0
 800812a:	f858 2b04 	ldr.w	r2, [r8], #4
 800812e:	f8d0 e000 	ldr.w	lr, [r0]
 8008132:	b293      	uxth	r3, r2
 8008134:	ebac 0303 	sub.w	r3, ip, r3
 8008138:	0c12      	lsrs	r2, r2, #16
 800813a:	fa13 f38e 	uxtah	r3, r3, lr
 800813e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008142:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008146:	b29b      	uxth	r3, r3
 8008148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800814c:	45c1      	cmp	r9, r8
 800814e:	f840 3b04 	str.w	r3, [r0], #4
 8008152:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008156:	d2e8      	bcs.n	800812a <quorem+0xb0>
 8008158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800815c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008160:	b922      	cbnz	r2, 800816c <quorem+0xf2>
 8008162:	3b04      	subs	r3, #4
 8008164:	429d      	cmp	r5, r3
 8008166:	461a      	mov	r2, r3
 8008168:	d30a      	bcc.n	8008180 <quorem+0x106>
 800816a:	613c      	str	r4, [r7, #16]
 800816c:	4630      	mov	r0, r6
 800816e:	b003      	add	sp, #12
 8008170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	3b04      	subs	r3, #4
 8008178:	2a00      	cmp	r2, #0
 800817a:	d1cc      	bne.n	8008116 <quorem+0x9c>
 800817c:	3c01      	subs	r4, #1
 800817e:	e7c7      	b.n	8008110 <quorem+0x96>
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	3b04      	subs	r3, #4
 8008184:	2a00      	cmp	r2, #0
 8008186:	d1f0      	bne.n	800816a <quorem+0xf0>
 8008188:	3c01      	subs	r4, #1
 800818a:	e7eb      	b.n	8008164 <quorem+0xea>
 800818c:	2000      	movs	r0, #0
 800818e:	e7ee      	b.n	800816e <quorem+0xf4>

08008190 <_dtoa_r>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	ed2d 8b04 	vpush	{d8-d9}
 8008198:	ec57 6b10 	vmov	r6, r7, d0
 800819c:	b093      	sub	sp, #76	; 0x4c
 800819e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081a4:	9106      	str	r1, [sp, #24]
 80081a6:	ee10 aa10 	vmov	sl, s0
 80081aa:	4604      	mov	r4, r0
 80081ac:	9209      	str	r2, [sp, #36]	; 0x24
 80081ae:	930c      	str	r3, [sp, #48]	; 0x30
 80081b0:	46bb      	mov	fp, r7
 80081b2:	b975      	cbnz	r5, 80081d2 <_dtoa_r+0x42>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f7fd fef1 	bl	8005f9c <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6260      	str	r0, [r4, #36]	; 0x24
 80081be:	b920      	cbnz	r0, 80081ca <_dtoa_r+0x3a>
 80081c0:	4ba7      	ldr	r3, [pc, #668]	; (8008460 <_dtoa_r+0x2d0>)
 80081c2:	21ea      	movs	r1, #234	; 0xea
 80081c4:	48a7      	ldr	r0, [pc, #668]	; (8008464 <_dtoa_r+0x2d4>)
 80081c6:	f7fd fe87 	bl	8005ed8 <__assert_func>
 80081ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081ce:	6005      	str	r5, [r0, #0]
 80081d0:	60c5      	str	r5, [r0, #12]
 80081d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	b151      	cbz	r1, 80081ee <_dtoa_r+0x5e>
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	604a      	str	r2, [r1, #4]
 80081dc:	2301      	movs	r3, #1
 80081de:	4093      	lsls	r3, r2
 80081e0:	608b      	str	r3, [r1, #8]
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 fbcc 	bl	8009980 <_Bfree>
 80081e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	1e3b      	subs	r3, r7, #0
 80081f0:	bfaa      	itet	ge
 80081f2:	2300      	movge	r3, #0
 80081f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081f8:	f8c8 3000 	strge.w	r3, [r8]
 80081fc:	4b9a      	ldr	r3, [pc, #616]	; (8008468 <_dtoa_r+0x2d8>)
 80081fe:	bfbc      	itt	lt
 8008200:	2201      	movlt	r2, #1
 8008202:	f8c8 2000 	strlt.w	r2, [r8]
 8008206:	ea33 030b 	bics.w	r3, r3, fp
 800820a:	d11b      	bne.n	8008244 <_dtoa_r+0xb4>
 800820c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800820e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008218:	4333      	orrs	r3, r6
 800821a:	f000 8592 	beq.w	8008d42 <_dtoa_r+0xbb2>
 800821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008220:	b963      	cbnz	r3, 800823c <_dtoa_r+0xac>
 8008222:	4b92      	ldr	r3, [pc, #584]	; (800846c <_dtoa_r+0x2dc>)
 8008224:	e022      	b.n	800826c <_dtoa_r+0xdc>
 8008226:	4b92      	ldr	r3, [pc, #584]	; (8008470 <_dtoa_r+0x2e0>)
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	3308      	adds	r3, #8
 800822c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	9801      	ldr	r0, [sp, #4]
 8008232:	b013      	add	sp, #76	; 0x4c
 8008234:	ecbd 8b04 	vpop	{d8-d9}
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	4b8b      	ldr	r3, [pc, #556]	; (800846c <_dtoa_r+0x2dc>)
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	3303      	adds	r3, #3
 8008242:	e7f3      	b.n	800822c <_dtoa_r+0x9c>
 8008244:	2200      	movs	r2, #0
 8008246:	2300      	movs	r3, #0
 8008248:	4650      	mov	r0, sl
 800824a:	4659      	mov	r1, fp
 800824c:	f7f8 fc64 	bl	8000b18 <__aeabi_dcmpeq>
 8008250:	ec4b ab19 	vmov	d9, sl, fp
 8008254:	4680      	mov	r8, r0
 8008256:	b158      	cbz	r0, 8008270 <_dtoa_r+0xe0>
 8008258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800825a:	2301      	movs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 856b 	beq.w	8008d3c <_dtoa_r+0xbac>
 8008266:	4883      	ldr	r0, [pc, #524]	; (8008474 <_dtoa_r+0x2e4>)
 8008268:	6018      	str	r0, [r3, #0]
 800826a:	1e43      	subs	r3, r0, #1
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	e7df      	b.n	8008230 <_dtoa_r+0xa0>
 8008270:	ec4b ab10 	vmov	d0, sl, fp
 8008274:	aa10      	add	r2, sp, #64	; 0x40
 8008276:	a911      	add	r1, sp, #68	; 0x44
 8008278:	4620      	mov	r0, r4
 800827a:	f001 ff2f 	bl	800a0dc <__d2b>
 800827e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008282:	ee08 0a10 	vmov	s16, r0
 8008286:	2d00      	cmp	r5, #0
 8008288:	f000 8084 	beq.w	8008394 <_dtoa_r+0x204>
 800828c:	ee19 3a90 	vmov	r3, s19
 8008290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008298:	4656      	mov	r6, sl
 800829a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800829e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082a6:	4b74      	ldr	r3, [pc, #464]	; (8008478 <_dtoa_r+0x2e8>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	4630      	mov	r0, r6
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 f813 	bl	80002d8 <__aeabi_dsub>
 80082b2:	a365      	add	r3, pc, #404	; (adr r3, 8008448 <_dtoa_r+0x2b8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f9c6 	bl	8000648 <__aeabi_dmul>
 80082bc:	a364      	add	r3, pc, #400	; (adr r3, 8008450 <_dtoa_r+0x2c0>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f8 f80b 	bl	80002dc <__adddf3>
 80082c6:	4606      	mov	r6, r0
 80082c8:	4628      	mov	r0, r5
 80082ca:	460f      	mov	r7, r1
 80082cc:	f7f8 f952 	bl	8000574 <__aeabi_i2d>
 80082d0:	a361      	add	r3, pc, #388	; (adr r3, 8008458 <_dtoa_r+0x2c8>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f8 f9b7 	bl	8000648 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f7 fffb 	bl	80002dc <__adddf3>
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	f7f8 fc5d 	bl	8000ba8 <__aeabi_d2iz>
 80082ee:	2200      	movs	r2, #0
 80082f0:	9000      	str	r0, [sp, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f8 fc18 	bl	8000b2c <__aeabi_dcmplt>
 80082fc:	b150      	cbz	r0, 8008314 <_dtoa_r+0x184>
 80082fe:	9800      	ldr	r0, [sp, #0]
 8008300:	f7f8 f938 	bl	8000574 <__aeabi_i2d>
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	f7f8 fc06 	bl	8000b18 <__aeabi_dcmpeq>
 800830c:	b910      	cbnz	r0, 8008314 <_dtoa_r+0x184>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	3b01      	subs	r3, #1
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	2b16      	cmp	r3, #22
 8008318:	d85a      	bhi.n	80083d0 <_dtoa_r+0x240>
 800831a:	9a00      	ldr	r2, [sp, #0]
 800831c:	4b57      	ldr	r3, [pc, #348]	; (800847c <_dtoa_r+0x2ec>)
 800831e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	ec51 0b19 	vmov	r0, r1, d9
 800832a:	f7f8 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800832e:	2800      	cmp	r0, #0
 8008330:	d050      	beq.n	80083d4 <_dtoa_r+0x244>
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	3b01      	subs	r3, #1
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	930b      	str	r3, [sp, #44]	; 0x2c
 800833c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800833e:	1b5d      	subs	r5, r3, r5
 8008340:	1e6b      	subs	r3, r5, #1
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	bf45      	ittet	mi
 8008346:	f1c5 0301 	rsbmi	r3, r5, #1
 800834a:	9304      	strmi	r3, [sp, #16]
 800834c:	2300      	movpl	r3, #0
 800834e:	2300      	movmi	r3, #0
 8008350:	bf4c      	ite	mi
 8008352:	9305      	strmi	r3, [sp, #20]
 8008354:	9304      	strpl	r3, [sp, #16]
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	db3d      	blt.n	80083d8 <_dtoa_r+0x248>
 800835c:	9b05      	ldr	r3, [sp, #20]
 800835e:	9a00      	ldr	r2, [sp, #0]
 8008360:	920a      	str	r2, [sp, #40]	; 0x28
 8008362:	4413      	add	r3, r2
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	2300      	movs	r3, #0
 8008368:	9307      	str	r3, [sp, #28]
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	2b09      	cmp	r3, #9
 800836e:	f200 8089 	bhi.w	8008484 <_dtoa_r+0x2f4>
 8008372:	2b05      	cmp	r3, #5
 8008374:	bfc4      	itt	gt
 8008376:	3b04      	subgt	r3, #4
 8008378:	9306      	strgt	r3, [sp, #24]
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	f1a3 0302 	sub.w	r3, r3, #2
 8008380:	bfcc      	ite	gt
 8008382:	2500      	movgt	r5, #0
 8008384:	2501      	movle	r5, #1
 8008386:	2b03      	cmp	r3, #3
 8008388:	f200 8087 	bhi.w	800849a <_dtoa_r+0x30a>
 800838c:	e8df f003 	tbb	[pc, r3]
 8008390:	59383a2d 	.word	0x59383a2d
 8008394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008398:	441d      	add	r5, r3
 800839a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800839e:	2b20      	cmp	r3, #32
 80083a0:	bfc1      	itttt	gt
 80083a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80083ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083b2:	bfda      	itte	le
 80083b4:	f1c3 0320 	rsble	r3, r3, #32
 80083b8:	fa06 f003 	lslle.w	r0, r6, r3
 80083bc:	4318      	orrgt	r0, r3
 80083be:	f7f8 f8c9 	bl	8000554 <__aeabi_ui2d>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4606      	mov	r6, r0
 80083c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083ca:	3d01      	subs	r5, #1
 80083cc:	930e      	str	r3, [sp, #56]	; 0x38
 80083ce:	e76a      	b.n	80082a6 <_dtoa_r+0x116>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7b2      	b.n	800833a <_dtoa_r+0x1aa>
 80083d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80083d6:	e7b1      	b.n	800833c <_dtoa_r+0x1ac>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	9a00      	ldr	r2, [sp, #0]
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	4253      	negs	r3, r2
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	2300      	movs	r3, #0
 80083e6:	930a      	str	r3, [sp, #40]	; 0x28
 80083e8:	e7bf      	b.n	800836a <_dtoa_r+0x1da>
 80083ea:	2300      	movs	r3, #0
 80083ec:	9308      	str	r3, [sp, #32]
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dc55      	bgt.n	80084a0 <_dtoa_r+0x310>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083fa:	461a      	mov	r2, r3
 80083fc:	9209      	str	r2, [sp, #36]	; 0x24
 80083fe:	e00c      	b.n	800841a <_dtoa_r+0x28a>
 8008400:	2301      	movs	r3, #1
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x25c>
 8008404:	2300      	movs	r3, #0
 8008406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008408:	9308      	str	r3, [sp, #32]
 800840a:	9b00      	ldr	r3, [sp, #0]
 800840c:	4413      	add	r3, r2
 800840e:	9302      	str	r3, [sp, #8]
 8008410:	3301      	adds	r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	bfb8      	it	lt
 8008418:	2301      	movlt	r3, #1
 800841a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800841c:	2200      	movs	r2, #0
 800841e:	6042      	str	r2, [r0, #4]
 8008420:	2204      	movs	r2, #4
 8008422:	f102 0614 	add.w	r6, r2, #20
 8008426:	429e      	cmp	r6, r3
 8008428:	6841      	ldr	r1, [r0, #4]
 800842a:	d93d      	bls.n	80084a8 <_dtoa_r+0x318>
 800842c:	4620      	mov	r0, r4
 800842e:	f001 fa67 	bl	8009900 <_Balloc>
 8008432:	9001      	str	r0, [sp, #4]
 8008434:	2800      	cmp	r0, #0
 8008436:	d13b      	bne.n	80084b0 <_dtoa_r+0x320>
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <_dtoa_r+0x2f0>)
 800843a:	4602      	mov	r2, r0
 800843c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008440:	e6c0      	b.n	80081c4 <_dtoa_r+0x34>
 8008442:	2301      	movs	r3, #1
 8008444:	e7df      	b.n	8008406 <_dtoa_r+0x276>
 8008446:	bf00      	nop
 8008448:	636f4361 	.word	0x636f4361
 800844c:	3fd287a7 	.word	0x3fd287a7
 8008450:	8b60c8b3 	.word	0x8b60c8b3
 8008454:	3fc68a28 	.word	0x3fc68a28
 8008458:	509f79fb 	.word	0x509f79fb
 800845c:	3fd34413 	.word	0x3fd34413
 8008460:	0800bcc0 	.word	0x0800bcc0
 8008464:	0800be42 	.word	0x0800be42
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	0800be3e 	.word	0x0800be3e
 8008470:	0800be35 	.word	0x0800be35
 8008474:	0800bc4a 	.word	0x0800bc4a
 8008478:	3ff80000 	.word	0x3ff80000
 800847c:	0800c010 	.word	0x0800c010
 8008480:	0800be9d 	.word	0x0800be9d
 8008484:	2501      	movs	r5, #1
 8008486:	2300      	movs	r3, #0
 8008488:	9306      	str	r3, [sp, #24]
 800848a:	9508      	str	r5, [sp, #32]
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	2312      	movs	r3, #18
 8008498:	e7b0      	b.n	80083fc <_dtoa_r+0x26c>
 800849a:	2301      	movs	r3, #1
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	e7f5      	b.n	800848c <_dtoa_r+0x2fc>
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084a6:	e7b8      	b.n	800841a <_dtoa_r+0x28a>
 80084a8:	3101      	adds	r1, #1
 80084aa:	6041      	str	r1, [r0, #4]
 80084ac:	0052      	lsls	r2, r2, #1
 80084ae:	e7b8      	b.n	8008422 <_dtoa_r+0x292>
 80084b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b2:	9a01      	ldr	r2, [sp, #4]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	2b0e      	cmp	r3, #14
 80084ba:	f200 809d 	bhi.w	80085f8 <_dtoa_r+0x468>
 80084be:	2d00      	cmp	r5, #0
 80084c0:	f000 809a 	beq.w	80085f8 <_dtoa_r+0x468>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dd32      	ble.n	8008530 <_dtoa_r+0x3a0>
 80084ca:	4ab7      	ldr	r2, [pc, #732]	; (80087a8 <_dtoa_r+0x618>)
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	05d8      	lsls	r0, r3, #23
 80084dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084e0:	d516      	bpl.n	8008510 <_dtoa_r+0x380>
 80084e2:	4bb2      	ldr	r3, [pc, #712]	; (80087ac <_dtoa_r+0x61c>)
 80084e4:	ec51 0b19 	vmov	r0, r1, d9
 80084e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084ec:	f7f8 f9d6 	bl	800089c <__aeabi_ddiv>
 80084f0:	f007 070f 	and.w	r7, r7, #15
 80084f4:	4682      	mov	sl, r0
 80084f6:	468b      	mov	fp, r1
 80084f8:	2503      	movs	r5, #3
 80084fa:	4eac      	ldr	r6, [pc, #688]	; (80087ac <_dtoa_r+0x61c>)
 80084fc:	b957      	cbnz	r7, 8008514 <_dtoa_r+0x384>
 80084fe:	4642      	mov	r2, r8
 8008500:	464b      	mov	r3, r9
 8008502:	4650      	mov	r0, sl
 8008504:	4659      	mov	r1, fp
 8008506:	f7f8 f9c9 	bl	800089c <__aeabi_ddiv>
 800850a:	4682      	mov	sl, r0
 800850c:	468b      	mov	fp, r1
 800850e:	e028      	b.n	8008562 <_dtoa_r+0x3d2>
 8008510:	2502      	movs	r5, #2
 8008512:	e7f2      	b.n	80084fa <_dtoa_r+0x36a>
 8008514:	07f9      	lsls	r1, r7, #31
 8008516:	d508      	bpl.n	800852a <_dtoa_r+0x39a>
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008520:	f7f8 f892 	bl	8000648 <__aeabi_dmul>
 8008524:	3501      	adds	r5, #1
 8008526:	4680      	mov	r8, r0
 8008528:	4689      	mov	r9, r1
 800852a:	107f      	asrs	r7, r7, #1
 800852c:	3608      	adds	r6, #8
 800852e:	e7e5      	b.n	80084fc <_dtoa_r+0x36c>
 8008530:	f000 809b 	beq.w	800866a <_dtoa_r+0x4da>
 8008534:	9b00      	ldr	r3, [sp, #0]
 8008536:	4f9d      	ldr	r7, [pc, #628]	; (80087ac <_dtoa_r+0x61c>)
 8008538:	425e      	negs	r6, r3
 800853a:	4b9b      	ldr	r3, [pc, #620]	; (80087a8 <_dtoa_r+0x618>)
 800853c:	f006 020f 	and.w	r2, r6, #15
 8008540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	ec51 0b19 	vmov	r0, r1, d9
 800854c:	f7f8 f87c 	bl	8000648 <__aeabi_dmul>
 8008550:	1136      	asrs	r6, r6, #4
 8008552:	4682      	mov	sl, r0
 8008554:	468b      	mov	fp, r1
 8008556:	2300      	movs	r3, #0
 8008558:	2502      	movs	r5, #2
 800855a:	2e00      	cmp	r6, #0
 800855c:	d17a      	bne.n	8008654 <_dtoa_r+0x4c4>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1d3      	bne.n	800850a <_dtoa_r+0x37a>
 8008562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8082 	beq.w	800866e <_dtoa_r+0x4de>
 800856a:	4b91      	ldr	r3, [pc, #580]	; (80087b0 <_dtoa_r+0x620>)
 800856c:	2200      	movs	r2, #0
 800856e:	4650      	mov	r0, sl
 8008570:	4659      	mov	r1, fp
 8008572:	f7f8 fadb 	bl	8000b2c <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	d079      	beq.n	800866e <_dtoa_r+0x4de>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d076      	beq.n	800866e <_dtoa_r+0x4de>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd36      	ble.n	80085f4 <_dtoa_r+0x464>
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	1e5f      	subs	r7, r3, #1
 800858e:	2200      	movs	r2, #0
 8008590:	4b88      	ldr	r3, [pc, #544]	; (80087b4 <_dtoa_r+0x624>)
 8008592:	f7f8 f859 	bl	8000648 <__aeabi_dmul>
 8008596:	9e02      	ldr	r6, [sp, #8]
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	3501      	adds	r5, #1
 800859e:	4628      	mov	r0, r5
 80085a0:	f7f7 ffe8 	bl	8000574 <__aeabi_i2d>
 80085a4:	4652      	mov	r2, sl
 80085a6:	465b      	mov	r3, fp
 80085a8:	f7f8 f84e 	bl	8000648 <__aeabi_dmul>
 80085ac:	4b82      	ldr	r3, [pc, #520]	; (80087b8 <_dtoa_r+0x628>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	f7f7 fe94 	bl	80002dc <__adddf3>
 80085b4:	46d0      	mov	r8, sl
 80085b6:	46d9      	mov	r9, fp
 80085b8:	4682      	mov	sl, r0
 80085ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085be:	2e00      	cmp	r6, #0
 80085c0:	d158      	bne.n	8008674 <_dtoa_r+0x4e4>
 80085c2:	4b7e      	ldr	r3, [pc, #504]	; (80087bc <_dtoa_r+0x62c>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f7 fe85 	bl	80002d8 <__aeabi_dsub>
 80085ce:	4652      	mov	r2, sl
 80085d0:	465b      	mov	r3, fp
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	f7f8 fac7 	bl	8000b68 <__aeabi_dcmpgt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f040 8295 	bne.w	8008b0a <_dtoa_r+0x97a>
 80085e0:	4652      	mov	r2, sl
 80085e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f8 fa9f 	bl	8000b2c <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f040 8289 	bne.w	8008b06 <_dtoa_r+0x976>
 80085f4:	ec5b ab19 	vmov	sl, fp, d9
 80085f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f2c0 8148 	blt.w	8008890 <_dtoa_r+0x700>
 8008600:	9a00      	ldr	r2, [sp, #0]
 8008602:	2a0e      	cmp	r2, #14
 8008604:	f300 8144 	bgt.w	8008890 <_dtoa_r+0x700>
 8008608:	4b67      	ldr	r3, [pc, #412]	; (80087a8 <_dtoa_r+0x618>)
 800860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	f280 80d5 	bge.w	80087c4 <_dtoa_r+0x634>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f300 80d1 	bgt.w	80087c4 <_dtoa_r+0x634>
 8008622:	f040 826f 	bne.w	8008b04 <_dtoa_r+0x974>
 8008626:	4b65      	ldr	r3, [pc, #404]	; (80087bc <_dtoa_r+0x62c>)
 8008628:	2200      	movs	r2, #0
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f8 f80b 	bl	8000648 <__aeabi_dmul>
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	f7f8 fa8d 	bl	8000b54 <__aeabi_dcmpge>
 800863a:	9e03      	ldr	r6, [sp, #12]
 800863c:	4637      	mov	r7, r6
 800863e:	2800      	cmp	r0, #0
 8008640:	f040 8245 	bne.w	8008ace <_dtoa_r+0x93e>
 8008644:	9d01      	ldr	r5, [sp, #4]
 8008646:	2331      	movs	r3, #49	; 0x31
 8008648:	f805 3b01 	strb.w	r3, [r5], #1
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	e240      	b.n	8008ad6 <_dtoa_r+0x946>
 8008654:	07f2      	lsls	r2, r6, #31
 8008656:	d505      	bpl.n	8008664 <_dtoa_r+0x4d4>
 8008658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865c:	f7f7 fff4 	bl	8000648 <__aeabi_dmul>
 8008660:	3501      	adds	r5, #1
 8008662:	2301      	movs	r3, #1
 8008664:	1076      	asrs	r6, r6, #1
 8008666:	3708      	adds	r7, #8
 8008668:	e777      	b.n	800855a <_dtoa_r+0x3ca>
 800866a:	2502      	movs	r5, #2
 800866c:	e779      	b.n	8008562 <_dtoa_r+0x3d2>
 800866e:	9f00      	ldr	r7, [sp, #0]
 8008670:	9e03      	ldr	r6, [sp, #12]
 8008672:	e794      	b.n	800859e <_dtoa_r+0x40e>
 8008674:	9901      	ldr	r1, [sp, #4]
 8008676:	4b4c      	ldr	r3, [pc, #304]	; (80087a8 <_dtoa_r+0x618>)
 8008678:	4431      	add	r1, r6
 800867a:	910d      	str	r1, [sp, #52]	; 0x34
 800867c:	9908      	ldr	r1, [sp, #32]
 800867e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008686:	2900      	cmp	r1, #0
 8008688:	d043      	beq.n	8008712 <_dtoa_r+0x582>
 800868a:	494d      	ldr	r1, [pc, #308]	; (80087c0 <_dtoa_r+0x630>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f905 	bl	800089c <__aeabi_ddiv>
 8008692:	4652      	mov	r2, sl
 8008694:	465b      	mov	r3, fp
 8008696:	f7f7 fe1f 	bl	80002d8 <__aeabi_dsub>
 800869a:	9d01      	ldr	r5, [sp, #4]
 800869c:	4682      	mov	sl, r0
 800869e:	468b      	mov	fp, r1
 80086a0:	4649      	mov	r1, r9
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7f8 fa80 	bl	8000ba8 <__aeabi_d2iz>
 80086a8:	4606      	mov	r6, r0
 80086aa:	f7f7 ff63 	bl	8000574 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fe0f 	bl	80002d8 <__aeabi_dsub>
 80086ba:	3630      	adds	r6, #48	; 0x30
 80086bc:	f805 6b01 	strb.w	r6, [r5], #1
 80086c0:	4652      	mov	r2, sl
 80086c2:	465b      	mov	r3, fp
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	f7f8 fa30 	bl	8000b2c <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d163      	bne.n	8008798 <_dtoa_r+0x608>
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	4936      	ldr	r1, [pc, #216]	; (80087b0 <_dtoa_r+0x620>)
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7f7 fdfe 	bl	80002d8 <__aeabi_dsub>
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	f7f8 fa24 	bl	8000b2c <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f040 80b5 	bne.w	8008854 <_dtoa_r+0x6c4>
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	429d      	cmp	r5, r3
 80086ee:	d081      	beq.n	80085f4 <_dtoa_r+0x464>
 80086f0:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <_dtoa_r+0x624>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4650      	mov	r0, sl
 80086f6:	4659      	mov	r1, fp
 80086f8:	f7f7 ffa6 	bl	8000648 <__aeabi_dmul>
 80086fc:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <_dtoa_r+0x624>)
 80086fe:	4682      	mov	sl, r0
 8008700:	468b      	mov	fp, r1
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	2200      	movs	r2, #0
 8008708:	f7f7 ff9e 	bl	8000648 <__aeabi_dmul>
 800870c:	4680      	mov	r8, r0
 800870e:	4689      	mov	r9, r1
 8008710:	e7c6      	b.n	80086a0 <_dtoa_r+0x510>
 8008712:	4650      	mov	r0, sl
 8008714:	4659      	mov	r1, fp
 8008716:	f7f7 ff97 	bl	8000648 <__aeabi_dmul>
 800871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871c:	9d01      	ldr	r5, [sp, #4]
 800871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008720:	4682      	mov	sl, r0
 8008722:	468b      	mov	fp, r1
 8008724:	4649      	mov	r1, r9
 8008726:	4640      	mov	r0, r8
 8008728:	f7f8 fa3e 	bl	8000ba8 <__aeabi_d2iz>
 800872c:	4606      	mov	r6, r0
 800872e:	f7f7 ff21 	bl	8000574 <__aeabi_i2d>
 8008732:	3630      	adds	r6, #48	; 0x30
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f7 fdcc 	bl	80002d8 <__aeabi_dsub>
 8008740:	f805 6b01 	strb.w	r6, [r5], #1
 8008744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008746:	429d      	cmp	r5, r3
 8008748:	4680      	mov	r8, r0
 800874a:	4689      	mov	r9, r1
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	d124      	bne.n	800879c <_dtoa_r+0x60c>
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <_dtoa_r+0x630>)
 8008754:	4650      	mov	r0, sl
 8008756:	4659      	mov	r1, fp
 8008758:	f7f7 fdc0 	bl	80002dc <__adddf3>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f8 fa00 	bl	8000b68 <__aeabi_dcmpgt>
 8008768:	2800      	cmp	r0, #0
 800876a:	d173      	bne.n	8008854 <_dtoa_r+0x6c4>
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	4913      	ldr	r1, [pc, #76]	; (80087c0 <_dtoa_r+0x630>)
 8008772:	2000      	movs	r0, #0
 8008774:	f7f7 fdb0 	bl	80002d8 <__aeabi_dsub>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f43f af35 	beq.w	80085f4 <_dtoa_r+0x464>
 800878a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800878c:	1e6b      	subs	r3, r5, #1
 800878e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008794:	2b30      	cmp	r3, #48	; 0x30
 8008796:	d0f8      	beq.n	800878a <_dtoa_r+0x5fa>
 8008798:	9700      	str	r7, [sp, #0]
 800879a:	e049      	b.n	8008830 <_dtoa_r+0x6a0>
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <_dtoa_r+0x624>)
 800879e:	f7f7 ff53 	bl	8000648 <__aeabi_dmul>
 80087a2:	4680      	mov	r8, r0
 80087a4:	4689      	mov	r9, r1
 80087a6:	e7bd      	b.n	8008724 <_dtoa_r+0x594>
 80087a8:	0800c010 	.word	0x0800c010
 80087ac:	0800bfe8 	.word	0x0800bfe8
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	40240000 	.word	0x40240000
 80087b8:	401c0000 	.word	0x401c0000
 80087bc:	40140000 	.word	0x40140000
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	9d01      	ldr	r5, [sp, #4]
 80087c6:	4656      	mov	r6, sl
 80087c8:	465f      	mov	r7, fp
 80087ca:	4642      	mov	r2, r8
 80087cc:	464b      	mov	r3, r9
 80087ce:	4630      	mov	r0, r6
 80087d0:	4639      	mov	r1, r7
 80087d2:	f7f8 f863 	bl	800089c <__aeabi_ddiv>
 80087d6:	f7f8 f9e7 	bl	8000ba8 <__aeabi_d2iz>
 80087da:	4682      	mov	sl, r0
 80087dc:	f7f7 feca 	bl	8000574 <__aeabi_i2d>
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	f7f7 ff30 	bl	8000648 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087f4:	f7f7 fd70 	bl	80002d8 <__aeabi_dsub>
 80087f8:	f805 6b01 	strb.w	r6, [r5], #1
 80087fc:	9e01      	ldr	r6, [sp, #4]
 80087fe:	9f03      	ldr	r7, [sp, #12]
 8008800:	1bae      	subs	r6, r5, r6
 8008802:	42b7      	cmp	r7, r6
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	d135      	bne.n	8008876 <_dtoa_r+0x6e6>
 800880a:	f7f7 fd67 	bl	80002dc <__adddf3>
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f9a7 	bl	8000b68 <__aeabi_dcmpgt>
 800881a:	b9d0      	cbnz	r0, 8008852 <_dtoa_r+0x6c2>
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f978 	bl	8000b18 <__aeabi_dcmpeq>
 8008828:	b110      	cbz	r0, 8008830 <_dtoa_r+0x6a0>
 800882a:	f01a 0f01 	tst.w	sl, #1
 800882e:	d110      	bne.n	8008852 <_dtoa_r+0x6c2>
 8008830:	4620      	mov	r0, r4
 8008832:	ee18 1a10 	vmov	r1, s16
 8008836:	f001 f8a3 	bl	8009980 <_Bfree>
 800883a:	2300      	movs	r3, #0
 800883c:	9800      	ldr	r0, [sp, #0]
 800883e:	702b      	strb	r3, [r5, #0]
 8008840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008842:	3001      	adds	r0, #1
 8008844:	6018      	str	r0, [r3, #0]
 8008846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008848:	2b00      	cmp	r3, #0
 800884a:	f43f acf1 	beq.w	8008230 <_dtoa_r+0xa0>
 800884e:	601d      	str	r5, [r3, #0]
 8008850:	e4ee      	b.n	8008230 <_dtoa_r+0xa0>
 8008852:	9f00      	ldr	r7, [sp, #0]
 8008854:	462b      	mov	r3, r5
 8008856:	461d      	mov	r5, r3
 8008858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885c:	2a39      	cmp	r2, #57	; 0x39
 800885e:	d106      	bne.n	800886e <_dtoa_r+0x6de>
 8008860:	9a01      	ldr	r2, [sp, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d1f7      	bne.n	8008856 <_dtoa_r+0x6c6>
 8008866:	9901      	ldr	r1, [sp, #4]
 8008868:	2230      	movs	r2, #48	; 0x30
 800886a:	3701      	adds	r7, #1
 800886c:	700a      	strb	r2, [r1, #0]
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	3201      	adds	r2, #1
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e790      	b.n	8008798 <_dtoa_r+0x608>
 8008876:	4ba6      	ldr	r3, [pc, #664]	; (8008b10 <_dtoa_r+0x980>)
 8008878:	2200      	movs	r2, #0
 800887a:	f7f7 fee5 	bl	8000648 <__aeabi_dmul>
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	f7f8 f947 	bl	8000b18 <__aeabi_dcmpeq>
 800888a:	2800      	cmp	r0, #0
 800888c:	d09d      	beq.n	80087ca <_dtoa_r+0x63a>
 800888e:	e7cf      	b.n	8008830 <_dtoa_r+0x6a0>
 8008890:	9a08      	ldr	r2, [sp, #32]
 8008892:	2a00      	cmp	r2, #0
 8008894:	f000 80d7 	beq.w	8008a46 <_dtoa_r+0x8b6>
 8008898:	9a06      	ldr	r2, [sp, #24]
 800889a:	2a01      	cmp	r2, #1
 800889c:	f300 80ba 	bgt.w	8008a14 <_dtoa_r+0x884>
 80088a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	f000 80b2 	beq.w	8008a0c <_dtoa_r+0x87c>
 80088a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ac:	9e07      	ldr	r6, [sp, #28]
 80088ae:	9d04      	ldr	r5, [sp, #16]
 80088b0:	9a04      	ldr	r2, [sp, #16]
 80088b2:	441a      	add	r2, r3
 80088b4:	9204      	str	r2, [sp, #16]
 80088b6:	9a05      	ldr	r2, [sp, #20]
 80088b8:	2101      	movs	r1, #1
 80088ba:	441a      	add	r2, r3
 80088bc:	4620      	mov	r0, r4
 80088be:	9205      	str	r2, [sp, #20]
 80088c0:	f001 f960 	bl	8009b84 <__i2b>
 80088c4:	4607      	mov	r7, r0
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	dd0c      	ble.n	80088e4 <_dtoa_r+0x754>
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd09      	ble.n	80088e4 <_dtoa_r+0x754>
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	9a04      	ldr	r2, [sp, #16]
 80088d4:	bfa8      	it	ge
 80088d6:	462b      	movge	r3, r5
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	9204      	str	r2, [sp, #16]
 80088dc:	9a05      	ldr	r2, [sp, #20]
 80088de:	1aed      	subs	r5, r5, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	b31b      	cbz	r3, 8008930 <_dtoa_r+0x7a0>
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80af 	beq.w	8008a4e <_dtoa_r+0x8be>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dd13      	ble.n	800891c <_dtoa_r+0x78c>
 80088f4:	4639      	mov	r1, r7
 80088f6:	4632      	mov	r2, r6
 80088f8:	4620      	mov	r0, r4
 80088fa:	f001 fa03 	bl	8009d04 <__pow5mult>
 80088fe:	ee18 2a10 	vmov	r2, s16
 8008902:	4601      	mov	r1, r0
 8008904:	4607      	mov	r7, r0
 8008906:	4620      	mov	r0, r4
 8008908:	f001 f952 	bl	8009bb0 <__multiply>
 800890c:	ee18 1a10 	vmov	r1, s16
 8008910:	4680      	mov	r8, r0
 8008912:	4620      	mov	r0, r4
 8008914:	f001 f834 	bl	8009980 <_Bfree>
 8008918:	ee08 8a10 	vmov	s16, r8
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	1b9a      	subs	r2, r3, r6
 8008920:	d006      	beq.n	8008930 <_dtoa_r+0x7a0>
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	4620      	mov	r0, r4
 8008928:	f001 f9ec 	bl	8009d04 <__pow5mult>
 800892c:	ee08 0a10 	vmov	s16, r0
 8008930:	2101      	movs	r1, #1
 8008932:	4620      	mov	r0, r4
 8008934:	f001 f926 	bl	8009b84 <__i2b>
 8008938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893a:	2b00      	cmp	r3, #0
 800893c:	4606      	mov	r6, r0
 800893e:	f340 8088 	ble.w	8008a52 <_dtoa_r+0x8c2>
 8008942:	461a      	mov	r2, r3
 8008944:	4601      	mov	r1, r0
 8008946:	4620      	mov	r0, r4
 8008948:	f001 f9dc 	bl	8009d04 <__pow5mult>
 800894c:	9b06      	ldr	r3, [sp, #24]
 800894e:	2b01      	cmp	r3, #1
 8008950:	4606      	mov	r6, r0
 8008952:	f340 8081 	ble.w	8008a58 <_dtoa_r+0x8c8>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	6933      	ldr	r3, [r6, #16]
 800895c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008960:	6918      	ldr	r0, [r3, #16]
 8008962:	f001 f8bf 	bl	8009ae4 <__hi0bits>
 8008966:	f1c0 0020 	rsb	r0, r0, #32
 800896a:	9b05      	ldr	r3, [sp, #20]
 800896c:	4418      	add	r0, r3
 800896e:	f010 001f 	ands.w	r0, r0, #31
 8008972:	f000 8092 	beq.w	8008a9a <_dtoa_r+0x90a>
 8008976:	f1c0 0320 	rsb	r3, r0, #32
 800897a:	2b04      	cmp	r3, #4
 800897c:	f340 808a 	ble.w	8008a94 <_dtoa_r+0x904>
 8008980:	f1c0 001c 	rsb	r0, r0, #28
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	4403      	add	r3, r0
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	4403      	add	r3, r0
 800898e:	4405      	add	r5, r0
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dd07      	ble.n	80089a8 <_dtoa_r+0x818>
 8008998:	ee18 1a10 	vmov	r1, s16
 800899c:	461a      	mov	r2, r3
 800899e:	4620      	mov	r0, r4
 80089a0:	f001 fa0a 	bl	8009db8 <__lshift>
 80089a4:	ee08 0a10 	vmov	s16, r0
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dd05      	ble.n	80089ba <_dtoa_r+0x82a>
 80089ae:	4631      	mov	r1, r6
 80089b0:	461a      	mov	r2, r3
 80089b2:	4620      	mov	r0, r4
 80089b4:	f001 fa00 	bl	8009db8 <__lshift>
 80089b8:	4606      	mov	r6, r0
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d06e      	beq.n	8008a9e <_dtoa_r+0x90e>
 80089c0:	ee18 0a10 	vmov	r0, s16
 80089c4:	4631      	mov	r1, r6
 80089c6:	f001 fa67 	bl	8009e98 <__mcmp>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	da67      	bge.n	8008a9e <_dtoa_r+0x90e>
 80089ce:	9b00      	ldr	r3, [sp, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	ee18 1a10 	vmov	r1, s16
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	220a      	movs	r2, #10
 80089da:	2300      	movs	r3, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fff1 	bl	80099c4 <__multadd>
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	ee08 0a10 	vmov	s16, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 81b1 	beq.w	8008d50 <_dtoa_r+0xbc0>
 80089ee:	2300      	movs	r3, #0
 80089f0:	4639      	mov	r1, r7
 80089f2:	220a      	movs	r2, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 ffe5 	bl	80099c4 <__multadd>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4607      	mov	r7, r0
 8008a00:	f300 808e 	bgt.w	8008b20 <_dtoa_r+0x990>
 8008a04:	9b06      	ldr	r3, [sp, #24]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dc51      	bgt.n	8008aae <_dtoa_r+0x91e>
 8008a0a:	e089      	b.n	8008b20 <_dtoa_r+0x990>
 8008a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a12:	e74b      	b.n	80088ac <_dtoa_r+0x71c>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1e5e      	subs	r6, r3, #1
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	42b3      	cmp	r3, r6
 8008a1c:	bfbf      	itttt	lt
 8008a1e:	9b07      	ldrlt	r3, [sp, #28]
 8008a20:	9607      	strlt	r6, [sp, #28]
 8008a22:	1af2      	sublt	r2, r6, r3
 8008a24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a26:	bfb6      	itet	lt
 8008a28:	189b      	addlt	r3, r3, r2
 8008a2a:	1b9e      	subge	r6, r3, r6
 8008a2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	bfb8      	it	lt
 8008a32:	2600      	movlt	r6, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfb7      	itett	lt
 8008a38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a40:	1a9d      	sublt	r5, r3, r2
 8008a42:	2300      	movlt	r3, #0
 8008a44:	e734      	b.n	80088b0 <_dtoa_r+0x720>
 8008a46:	9e07      	ldr	r6, [sp, #28]
 8008a48:	9d04      	ldr	r5, [sp, #16]
 8008a4a:	9f08      	ldr	r7, [sp, #32]
 8008a4c:	e73b      	b.n	80088c6 <_dtoa_r+0x736>
 8008a4e:	9a07      	ldr	r2, [sp, #28]
 8008a50:	e767      	b.n	8008922 <_dtoa_r+0x792>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	dc18      	bgt.n	8008a8a <_dtoa_r+0x8fa>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d115      	bne.n	8008a8a <_dtoa_r+0x8fa>
 8008a5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a62:	b993      	cbnz	r3, 8008a8a <_dtoa_r+0x8fa>
 8008a64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a68:	0d1b      	lsrs	r3, r3, #20
 8008a6a:	051b      	lsls	r3, r3, #20
 8008a6c:	b183      	cbz	r3, 8008a90 <_dtoa_r+0x900>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	3301      	adds	r3, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	3301      	adds	r3, #1
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	f04f 0801 	mov.w	r8, #1
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f47f af6a 	bne.w	800895a <_dtoa_r+0x7ca>
 8008a86:	2001      	movs	r0, #1
 8008a88:	e76f      	b.n	800896a <_dtoa_r+0x7da>
 8008a8a:	f04f 0800 	mov.w	r8, #0
 8008a8e:	e7f6      	b.n	8008a7e <_dtoa_r+0x8ee>
 8008a90:	4698      	mov	r8, r3
 8008a92:	e7f4      	b.n	8008a7e <_dtoa_r+0x8ee>
 8008a94:	f43f af7d 	beq.w	8008992 <_dtoa_r+0x802>
 8008a98:	4618      	mov	r0, r3
 8008a9a:	301c      	adds	r0, #28
 8008a9c:	e772      	b.n	8008984 <_dtoa_r+0x7f4>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc37      	bgt.n	8008b14 <_dtoa_r+0x984>
 8008aa4:	9b06      	ldr	r3, [sp, #24]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	dd34      	ble.n	8008b14 <_dtoa_r+0x984>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	9302      	str	r3, [sp, #8]
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	b96b      	cbnz	r3, 8008ace <_dtoa_r+0x93e>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 ff84 	bl	80099c4 <__multadd>
 8008abc:	4601      	mov	r1, r0
 8008abe:	4606      	mov	r6, r0
 8008ac0:	ee18 0a10 	vmov	r0, s16
 8008ac4:	f001 f9e8 	bl	8009e98 <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f73f adbb 	bgt.w	8008644 <_dtoa_r+0x4b4>
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	9d01      	ldr	r5, [sp, #4]
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	4631      	mov	r1, r6
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 ff4f 	bl	8009980 <_Bfree>
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	f43f aea4 	beq.w	8008830 <_dtoa_r+0x6a0>
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	d005      	beq.n	8008afa <_dtoa_r+0x96a>
 8008aee:	45b8      	cmp	r8, r7
 8008af0:	d003      	beq.n	8008afa <_dtoa_r+0x96a>
 8008af2:	4641      	mov	r1, r8
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 ff43 	bl	8009980 <_Bfree>
 8008afa:	4639      	mov	r1, r7
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 ff3f 	bl	8009980 <_Bfree>
 8008b02:	e695      	b.n	8008830 <_dtoa_r+0x6a0>
 8008b04:	2600      	movs	r6, #0
 8008b06:	4637      	mov	r7, r6
 8008b08:	e7e1      	b.n	8008ace <_dtoa_r+0x93e>
 8008b0a:	9700      	str	r7, [sp, #0]
 8008b0c:	4637      	mov	r7, r6
 8008b0e:	e599      	b.n	8008644 <_dtoa_r+0x4b4>
 8008b10:	40240000 	.word	0x40240000
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80ca 	beq.w	8008cb0 <_dtoa_r+0xb20>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x9a0>
 8008b24:	4639      	mov	r1, r7
 8008b26:	462a      	mov	r2, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f001 f945 	bl	8009db8 <__lshift>
 8008b2e:	4607      	mov	r7, r0
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	d05b      	beq.n	8008bee <_dtoa_r+0xa5e>
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fee1 	bl	8009900 <_Balloc>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <_dtoa_r+0x9be>
 8008b42:	4b87      	ldr	r3, [pc, #540]	; (8008d60 <_dtoa_r+0xbd0>)
 8008b44:	4602      	mov	r2, r0
 8008b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b4a:	f7ff bb3b 	b.w	80081c4 <_dtoa_r+0x34>
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	3202      	adds	r2, #2
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	f107 010c 	add.w	r1, r7, #12
 8008b58:	300c      	adds	r0, #12
 8008b5a:	f7fd fa27 	bl	8005fac <memcpy>
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4629      	mov	r1, r5
 8008b62:	4620      	mov	r0, r4
 8008b64:	f001 f928 	bl	8009db8 <__lshift>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	f103 0901 	add.w	r9, r3, #1
 8008b6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	9305      	str	r3, [sp, #20]
 8008b76:	f00a 0301 	and.w	r3, sl, #1
 8008b7a:	46b8      	mov	r8, r7
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	4607      	mov	r7, r0
 8008b80:	4631      	mov	r1, r6
 8008b82:	ee18 0a10 	vmov	r0, s16
 8008b86:	f7ff fa78 	bl	800807a <quorem>
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b92:	ee18 0a10 	vmov	r0, s16
 8008b96:	f001 f97f 	bl	8009e98 <__mcmp>
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	9003      	str	r0, [sp, #12]
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f001 f995 	bl	8009ed0 <__mdiff>
 8008ba6:	68c2      	ldr	r2, [r0, #12]
 8008ba8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bac:	4605      	mov	r5, r0
 8008bae:	bb02      	cbnz	r2, 8008bf2 <_dtoa_r+0xa62>
 8008bb0:	4601      	mov	r1, r0
 8008bb2:	ee18 0a10 	vmov	r0, s16
 8008bb6:	f001 f96f 	bl	8009e98 <__mcmp>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	9207      	str	r2, [sp, #28]
 8008bc2:	f000 fedd 	bl	8009980 <_Bfree>
 8008bc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bca:	ea43 0102 	orr.w	r1, r3, r2
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	464d      	mov	r5, r9
 8008bd4:	d10f      	bne.n	8008bf6 <_dtoa_r+0xa66>
 8008bd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bda:	d02a      	beq.n	8008c32 <_dtoa_r+0xaa2>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd02      	ble.n	8008be8 <_dtoa_r+0xa58>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008be8:	f88b a000 	strb.w	sl, [fp]
 8008bec:	e775      	b.n	8008ada <_dtoa_r+0x94a>
 8008bee:	4638      	mov	r0, r7
 8008bf0:	e7ba      	b.n	8008b68 <_dtoa_r+0x9d8>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	e7e2      	b.n	8008bbc <_dtoa_r+0xa2c>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	db04      	blt.n	8008c06 <_dtoa_r+0xa76>
 8008bfc:	9906      	ldr	r1, [sp, #24]
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	9904      	ldr	r1, [sp, #16]
 8008c02:	430b      	orrs	r3, r1
 8008c04:	d122      	bne.n	8008c4c <_dtoa_r+0xabc>
 8008c06:	2a00      	cmp	r2, #0
 8008c08:	ddee      	ble.n	8008be8 <_dtoa_r+0xa58>
 8008c0a:	ee18 1a10 	vmov	r1, s16
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4620      	mov	r0, r4
 8008c12:	f001 f8d1 	bl	8009db8 <__lshift>
 8008c16:	4631      	mov	r1, r6
 8008c18:	ee08 0a10 	vmov	s16, r0
 8008c1c:	f001 f93c 	bl	8009e98 <__mcmp>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dc03      	bgt.n	8008c2c <_dtoa_r+0xa9c>
 8008c24:	d1e0      	bne.n	8008be8 <_dtoa_r+0xa58>
 8008c26:	f01a 0f01 	tst.w	sl, #1
 8008c2a:	d0dd      	beq.n	8008be8 <_dtoa_r+0xa58>
 8008c2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c30:	d1d7      	bne.n	8008be2 <_dtoa_r+0xa52>
 8008c32:	2339      	movs	r3, #57	; 0x39
 8008c34:	f88b 3000 	strb.w	r3, [fp]
 8008c38:	462b      	mov	r3, r5
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c42:	2a39      	cmp	r2, #57	; 0x39
 8008c44:	d071      	beq.n	8008d2a <_dtoa_r+0xb9a>
 8008c46:	3201      	adds	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e746      	b.n	8008ada <_dtoa_r+0x94a>
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	dd07      	ble.n	8008c60 <_dtoa_r+0xad0>
 8008c50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c54:	d0ed      	beq.n	8008c32 <_dtoa_r+0xaa2>
 8008c56:	f10a 0301 	add.w	r3, sl, #1
 8008c5a:	f88b 3000 	strb.w	r3, [fp]
 8008c5e:	e73c      	b.n	8008ada <_dtoa_r+0x94a>
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c66:	4599      	cmp	r9, r3
 8008c68:	d047      	beq.n	8008cfa <_dtoa_r+0xb6a>
 8008c6a:	ee18 1a10 	vmov	r1, s16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	220a      	movs	r2, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 fea6 	bl	80099c4 <__multadd>
 8008c78:	45b8      	cmp	r8, r7
 8008c7a:	ee08 0a10 	vmov	s16, r0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	f04f 020a 	mov.w	r2, #10
 8008c86:	4641      	mov	r1, r8
 8008c88:	4620      	mov	r0, r4
 8008c8a:	d106      	bne.n	8008c9a <_dtoa_r+0xb0a>
 8008c8c:	f000 fe9a 	bl	80099c4 <__multadd>
 8008c90:	4680      	mov	r8, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e772      	b.n	8008b80 <_dtoa_r+0x9f0>
 8008c9a:	f000 fe93 	bl	80099c4 <__multadd>
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	220a      	movs	r2, #10
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fe8c 	bl	80099c4 <__multadd>
 8008cac:	4607      	mov	r7, r0
 8008cae:	e7f1      	b.n	8008c94 <_dtoa_r+0xb04>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	9302      	str	r3, [sp, #8]
 8008cb4:	9d01      	ldr	r5, [sp, #4]
 8008cb6:	ee18 0a10 	vmov	r0, s16
 8008cba:	4631      	mov	r1, r6
 8008cbc:	f7ff f9dd 	bl	800807a <quorem>
 8008cc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	f805 ab01 	strb.w	sl, [r5], #1
 8008cca:	1aea      	subs	r2, r5, r3
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	dd09      	ble.n	8008ce6 <_dtoa_r+0xb56>
 8008cd2:	ee18 1a10 	vmov	r1, s16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	220a      	movs	r2, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fe72 	bl	80099c4 <__multadd>
 8008ce0:	ee08 0a10 	vmov	s16, r0
 8008ce4:	e7e7      	b.n	8008cb6 <_dtoa_r+0xb26>
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfc8      	it	gt
 8008cec:	461d      	movgt	r5, r3
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	bfd8      	it	le
 8008cf2:	2501      	movle	r5, #1
 8008cf4:	441d      	add	r5, r3
 8008cf6:	f04f 0800 	mov.w	r8, #0
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 f859 	bl	8009db8 <__lshift>
 8008d06:	4631      	mov	r1, r6
 8008d08:	ee08 0a10 	vmov	s16, r0
 8008d0c:	f001 f8c4 	bl	8009e98 <__mcmp>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dc91      	bgt.n	8008c38 <_dtoa_r+0xaa8>
 8008d14:	d102      	bne.n	8008d1c <_dtoa_r+0xb8c>
 8008d16:	f01a 0f01 	tst.w	sl, #1
 8008d1a:	d18d      	bne.n	8008c38 <_dtoa_r+0xaa8>
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	461d      	mov	r5, r3
 8008d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d24:	2a30      	cmp	r2, #48	; 0x30
 8008d26:	d0fa      	beq.n	8008d1e <_dtoa_r+0xb8e>
 8008d28:	e6d7      	b.n	8008ada <_dtoa_r+0x94a>
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d184      	bne.n	8008c3a <_dtoa_r+0xaaa>
 8008d30:	9b00      	ldr	r3, [sp, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2331      	movs	r3, #49	; 0x31
 8008d38:	7013      	strb	r3, [r2, #0]
 8008d3a:	e6ce      	b.n	8008ada <_dtoa_r+0x94a>
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <_dtoa_r+0xbd4>)
 8008d3e:	f7ff ba95 	b.w	800826c <_dtoa_r+0xdc>
 8008d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f47f aa6e 	bne.w	8008226 <_dtoa_r+0x96>
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <_dtoa_r+0xbd8>)
 8008d4c:	f7ff ba8e 	b.w	800826c <_dtoa_r+0xdc>
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dcae      	bgt.n	8008cb4 <_dtoa_r+0xb24>
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f73f aea8 	bgt.w	8008aae <_dtoa_r+0x91e>
 8008d5e:	e7a9      	b.n	8008cb4 <_dtoa_r+0xb24>
 8008d60:	0800be9d 	.word	0x0800be9d
 8008d64:	0800bc49 	.word	0x0800bc49
 8008d68:	0800be35 	.word	0x0800be35

08008d6c <__sflush_r>:
 8008d6c:	898a      	ldrh	r2, [r1, #12]
 8008d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	0710      	lsls	r0, r2, #28
 8008d76:	460c      	mov	r4, r1
 8008d78:	d458      	bmi.n	8008e2c <__sflush_r+0xc0>
 8008d7a:	684b      	ldr	r3, [r1, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dc05      	bgt.n	8008d8c <__sflush_r+0x20>
 8008d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dc02      	bgt.n	8008d8c <__sflush_r+0x20>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d0f9      	beq.n	8008d86 <__sflush_r+0x1a>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d98:	682f      	ldr	r7, [r5, #0]
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	d032      	beq.n	8008e04 <__sflush_r+0x98>
 8008d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	075a      	lsls	r2, r3, #29
 8008da4:	d505      	bpl.n	8008db2 <__sflush_r+0x46>
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	1ac0      	subs	r0, r0, r3
 8008daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dac:	b10b      	cbz	r3, 8008db2 <__sflush_r+0x46>
 8008dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	2300      	movs	r3, #0
 8008db4:	4602      	mov	r2, r0
 8008db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db8:	6a21      	ldr	r1, [r4, #32]
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b0      	blx	r6
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	d106      	bne.n	8008dd2 <__sflush_r+0x66>
 8008dc4:	6829      	ldr	r1, [r5, #0]
 8008dc6:	291d      	cmp	r1, #29
 8008dc8:	d82c      	bhi.n	8008e24 <__sflush_r+0xb8>
 8008dca:	4a2a      	ldr	r2, [pc, #168]	; (8008e74 <__sflush_r+0x108>)
 8008dcc:	40ca      	lsrs	r2, r1
 8008dce:	07d6      	lsls	r6, r2, #31
 8008dd0:	d528      	bpl.n	8008e24 <__sflush_r+0xb8>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	6062      	str	r2, [r4, #4]
 8008dd6:	04d9      	lsls	r1, r3, #19
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	d504      	bpl.n	8008de8 <__sflush_r+0x7c>
 8008dde:	1c42      	adds	r2, r0, #1
 8008de0:	d101      	bne.n	8008de6 <__sflush_r+0x7a>
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	b903      	cbnz	r3, 8008de8 <__sflush_r+0x7c>
 8008de6:	6560      	str	r0, [r4, #84]	; 0x54
 8008de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dea:	602f      	str	r7, [r5, #0]
 8008dec:	2900      	cmp	r1, #0
 8008dee:	d0ca      	beq.n	8008d86 <__sflush_r+0x1a>
 8008df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df4:	4299      	cmp	r1, r3
 8008df6:	d002      	beq.n	8008dfe <__sflush_r+0x92>
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7fd f8ed 	bl	8005fd8 <_free_r>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	6360      	str	r0, [r4, #52]	; 0x34
 8008e02:	e7c1      	b.n	8008d88 <__sflush_r+0x1c>
 8008e04:	6a21      	ldr	r1, [r4, #32]
 8008e06:	2301      	movs	r3, #1
 8008e08:	4628      	mov	r0, r5
 8008e0a:	47b0      	blx	r6
 8008e0c:	1c41      	adds	r1, r0, #1
 8008e0e:	d1c7      	bne.n	8008da0 <__sflush_r+0x34>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0c4      	beq.n	8008da0 <__sflush_r+0x34>
 8008e16:	2b1d      	cmp	r3, #29
 8008e18:	d001      	beq.n	8008e1e <__sflush_r+0xb2>
 8008e1a:	2b16      	cmp	r3, #22
 8008e1c:	d101      	bne.n	8008e22 <__sflush_r+0xb6>
 8008e1e:	602f      	str	r7, [r5, #0]
 8008e20:	e7b1      	b.n	8008d86 <__sflush_r+0x1a>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	e7ad      	b.n	8008d88 <__sflush_r+0x1c>
 8008e2c:	690f      	ldr	r7, [r1, #16]
 8008e2e:	2f00      	cmp	r7, #0
 8008e30:	d0a9      	beq.n	8008d86 <__sflush_r+0x1a>
 8008e32:	0793      	lsls	r3, r2, #30
 8008e34:	680e      	ldr	r6, [r1, #0]
 8008e36:	bf08      	it	eq
 8008e38:	694b      	ldreq	r3, [r1, #20]
 8008e3a:	600f      	str	r7, [r1, #0]
 8008e3c:	bf18      	it	ne
 8008e3e:	2300      	movne	r3, #0
 8008e40:	eba6 0807 	sub.w	r8, r6, r7
 8008e44:	608b      	str	r3, [r1, #8]
 8008e46:	f1b8 0f00 	cmp.w	r8, #0
 8008e4a:	dd9c      	ble.n	8008d86 <__sflush_r+0x1a>
 8008e4c:	6a21      	ldr	r1, [r4, #32]
 8008e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e50:	4643      	mov	r3, r8
 8008e52:	463a      	mov	r2, r7
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b0      	blx	r6
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dc06      	bgt.n	8008e6a <__sflush_r+0xfe>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295
 8008e68:	e78e      	b.n	8008d88 <__sflush_r+0x1c>
 8008e6a:	4407      	add	r7, r0
 8008e6c:	eba8 0800 	sub.w	r8, r8, r0
 8008e70:	e7e9      	b.n	8008e46 <__sflush_r+0xda>
 8008e72:	bf00      	nop
 8008e74:	20400001 	.word	0x20400001

08008e78 <_fflush_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	690b      	ldr	r3, [r1, #16]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b913      	cbnz	r3, 8008e88 <_fflush_r+0x10>
 8008e82:	2500      	movs	r5, #0
 8008e84:	4628      	mov	r0, r5
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	b118      	cbz	r0, 8008e92 <_fflush_r+0x1a>
 8008e8a:	6983      	ldr	r3, [r0, #24]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <_fflush_r+0x1a>
 8008e8e:	f000 f887 	bl	8008fa0 <__sinit>
 8008e92:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <_fflush_r+0x6c>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d11b      	bne.n	8008ed0 <_fflush_r+0x58>
 8008e98:	686c      	ldr	r4, [r5, #4]
 8008e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0ef      	beq.n	8008e82 <_fflush_r+0xa>
 8008ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ea4:	07d0      	lsls	r0, r2, #31
 8008ea6:	d404      	bmi.n	8008eb2 <_fflush_r+0x3a>
 8008ea8:	0599      	lsls	r1, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_fflush_r+0x3a>
 8008eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eae:	f000 fc88 	bl	80097c2 <__retarget_lock_acquire_recursive>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f7ff ff59 	bl	8008d6c <__sflush_r>
 8008eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ebc:	07da      	lsls	r2, r3, #31
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	d4e0      	bmi.n	8008e84 <_fflush_r+0xc>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	059b      	lsls	r3, r3, #22
 8008ec6:	d4dd      	bmi.n	8008e84 <_fflush_r+0xc>
 8008ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eca:	f000 fc7b 	bl	80097c4 <__retarget_lock_release_recursive>
 8008ece:	e7d9      	b.n	8008e84 <_fflush_r+0xc>
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <_fflush_r+0x70>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d101      	bne.n	8008eda <_fflush_r+0x62>
 8008ed6:	68ac      	ldr	r4, [r5, #8]
 8008ed8:	e7df      	b.n	8008e9a <_fflush_r+0x22>
 8008eda:	4b04      	ldr	r3, [pc, #16]	; (8008eec <_fflush_r+0x74>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	bf08      	it	eq
 8008ee0:	68ec      	ldreq	r4, [r5, #12]
 8008ee2:	e7da      	b.n	8008e9a <_fflush_r+0x22>
 8008ee4:	0800bed0 	.word	0x0800bed0
 8008ee8:	0800bef0 	.word	0x0800bef0
 8008eec:	0800beb0 	.word	0x0800beb0

08008ef0 <std>:
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	b510      	push	{r4, lr}
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8008efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008efe:	6083      	str	r3, [r0, #8]
 8008f00:	8181      	strh	r1, [r0, #12]
 8008f02:	6643      	str	r3, [r0, #100]	; 0x64
 8008f04:	81c2      	strh	r2, [r0, #14]
 8008f06:	6183      	str	r3, [r0, #24]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	2208      	movs	r2, #8
 8008f0c:	305c      	adds	r0, #92	; 0x5c
 8008f0e:	f7fd f85b 	bl	8005fc8 <memset>
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <std+0x38>)
 8008f14:	6263      	str	r3, [r4, #36]	; 0x24
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <std+0x3c>)
 8008f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <std+0x40>)
 8008f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <std+0x44>)
 8008f20:	6224      	str	r4, [r4, #32]
 8008f22:	6323      	str	r3, [r4, #48]	; 0x30
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	bf00      	nop
 8008f28:	0800a661 	.word	0x0800a661
 8008f2c:	0800a683 	.word	0x0800a683
 8008f30:	0800a6bb 	.word	0x0800a6bb
 8008f34:	0800a6df 	.word	0x0800a6df

08008f38 <_cleanup_r>:
 8008f38:	4901      	ldr	r1, [pc, #4]	; (8008f40 <_cleanup_r+0x8>)
 8008f3a:	f000 b8af 	b.w	800909c <_fwalk_reent>
 8008f3e:	bf00      	nop
 8008f40:	08008e79 	.word	0x08008e79

08008f44 <__sfmoreglue>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	2268      	movs	r2, #104	; 0x68
 8008f48:	1e4d      	subs	r5, r1, #1
 8008f4a:	4355      	muls	r5, r2
 8008f4c:	460e      	mov	r6, r1
 8008f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f52:	f7fd f8ad 	bl	80060b0 <_malloc_r>
 8008f56:	4604      	mov	r4, r0
 8008f58:	b140      	cbz	r0, 8008f6c <__sfmoreglue+0x28>
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f60:	300c      	adds	r0, #12
 8008f62:	60a0      	str	r0, [r4, #8]
 8008f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f68:	f7fd f82e 	bl	8005fc8 <memset>
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}

08008f70 <__sfp_lock_acquire>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sfp_lock_acquire+0x8>)
 8008f72:	f000 bc26 	b.w	80097c2 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	20000cfd 	.word	0x20000cfd

08008f7c <__sfp_lock_release>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sfp_lock_release+0x8>)
 8008f7e:	f000 bc21 	b.w	80097c4 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	20000cfd 	.word	0x20000cfd

08008f88 <__sinit_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sinit_lock_acquire+0x8>)
 8008f8a:	f000 bc1a 	b.w	80097c2 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000cfe 	.word	0x20000cfe

08008f94 <__sinit_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__sinit_lock_release+0x8>)
 8008f96:	f000 bc15 	b.w	80097c4 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000cfe 	.word	0x20000cfe

08008fa0 <__sinit>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	f7ff fff0 	bl	8008f88 <__sinit_lock_acquire>
 8008fa8:	69a3      	ldr	r3, [r4, #24]
 8008faa:	b11b      	cbz	r3, 8008fb4 <__sinit+0x14>
 8008fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb0:	f7ff bff0 	b.w	8008f94 <__sinit_lock_release>
 8008fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8008fba:	4b13      	ldr	r3, [pc, #76]	; (8009008 <__sinit+0x68>)
 8008fbc:	4a13      	ldr	r2, [pc, #76]	; (800900c <__sinit+0x6c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	bf04      	itt	eq
 8008fc6:	2301      	moveq	r3, #1
 8008fc8:	61a3      	streq	r3, [r4, #24]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 f820 	bl	8009010 <__sfp>
 8008fd0:	6060      	str	r0, [r4, #4]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 f81c 	bl	8009010 <__sfp>
 8008fd8:	60a0      	str	r0, [r4, #8]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 f818 	bl	8009010 <__sfp>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	60e0      	str	r0, [r4, #12]
 8008fe4:	2104      	movs	r1, #4
 8008fe6:	6860      	ldr	r0, [r4, #4]
 8008fe8:	f7ff ff82 	bl	8008ef0 <std>
 8008fec:	68a0      	ldr	r0, [r4, #8]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	2109      	movs	r1, #9
 8008ff2:	f7ff ff7d 	bl	8008ef0 <std>
 8008ff6:	68e0      	ldr	r0, [r4, #12]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	2112      	movs	r1, #18
 8008ffc:	f7ff ff78 	bl	8008ef0 <std>
 8009000:	2301      	movs	r3, #1
 8009002:	61a3      	str	r3, [r4, #24]
 8009004:	e7d2      	b.n	8008fac <__sinit+0xc>
 8009006:	bf00      	nop
 8009008:	0800bc24 	.word	0x0800bc24
 800900c:	08008f39 	.word	0x08008f39

08009010 <__sfp>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	4607      	mov	r7, r0
 8009014:	f7ff ffac 	bl	8008f70 <__sfp_lock_acquire>
 8009018:	4b1e      	ldr	r3, [pc, #120]	; (8009094 <__sfp+0x84>)
 800901a:	681e      	ldr	r6, [r3, #0]
 800901c:	69b3      	ldr	r3, [r6, #24]
 800901e:	b913      	cbnz	r3, 8009026 <__sfp+0x16>
 8009020:	4630      	mov	r0, r6
 8009022:	f7ff ffbd 	bl	8008fa0 <__sinit>
 8009026:	3648      	adds	r6, #72	; 0x48
 8009028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800902c:	3b01      	subs	r3, #1
 800902e:	d503      	bpl.n	8009038 <__sfp+0x28>
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	b30b      	cbz	r3, 8009078 <__sfp+0x68>
 8009034:	6836      	ldr	r6, [r6, #0]
 8009036:	e7f7      	b.n	8009028 <__sfp+0x18>
 8009038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800903c:	b9d5      	cbnz	r5, 8009074 <__sfp+0x64>
 800903e:	4b16      	ldr	r3, [pc, #88]	; (8009098 <__sfp+0x88>)
 8009040:	60e3      	str	r3, [r4, #12]
 8009042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009046:	6665      	str	r5, [r4, #100]	; 0x64
 8009048:	f000 fbba 	bl	80097c0 <__retarget_lock_init_recursive>
 800904c:	f7ff ff96 	bl	8008f7c <__sfp_lock_release>
 8009050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009058:	6025      	str	r5, [r4, #0]
 800905a:	61a5      	str	r5, [r4, #24]
 800905c:	2208      	movs	r2, #8
 800905e:	4629      	mov	r1, r5
 8009060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009064:	f7fc ffb0 	bl	8005fc8 <memset>
 8009068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800906c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009070:	4620      	mov	r0, r4
 8009072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009074:	3468      	adds	r4, #104	; 0x68
 8009076:	e7d9      	b.n	800902c <__sfp+0x1c>
 8009078:	2104      	movs	r1, #4
 800907a:	4638      	mov	r0, r7
 800907c:	f7ff ff62 	bl	8008f44 <__sfmoreglue>
 8009080:	4604      	mov	r4, r0
 8009082:	6030      	str	r0, [r6, #0]
 8009084:	2800      	cmp	r0, #0
 8009086:	d1d5      	bne.n	8009034 <__sfp+0x24>
 8009088:	f7ff ff78 	bl	8008f7c <__sfp_lock_release>
 800908c:	230c      	movs	r3, #12
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	e7ee      	b.n	8009070 <__sfp+0x60>
 8009092:	bf00      	nop
 8009094:	0800bc24 	.word	0x0800bc24
 8009098:	ffff0001 	.word	0xffff0001

0800909c <_fwalk_reent>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	4606      	mov	r6, r0
 80090a2:	4688      	mov	r8, r1
 80090a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090a8:	2700      	movs	r7, #0
 80090aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090ae:	f1b9 0901 	subs.w	r9, r9, #1
 80090b2:	d505      	bpl.n	80090c0 <_fwalk_reent+0x24>
 80090b4:	6824      	ldr	r4, [r4, #0]
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	d1f7      	bne.n	80090aa <_fwalk_reent+0xe>
 80090ba:	4638      	mov	r0, r7
 80090bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c0:	89ab      	ldrh	r3, [r5, #12]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d907      	bls.n	80090d6 <_fwalk_reent+0x3a>
 80090c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ca:	3301      	adds	r3, #1
 80090cc:	d003      	beq.n	80090d6 <_fwalk_reent+0x3a>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4630      	mov	r0, r6
 80090d2:	47c0      	blx	r8
 80090d4:	4307      	orrs	r7, r0
 80090d6:	3568      	adds	r5, #104	; 0x68
 80090d8:	e7e9      	b.n	80090ae <_fwalk_reent+0x12>

080090da <rshift>:
 80090da:	6903      	ldr	r3, [r0, #16]
 80090dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80090e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80090e8:	f100 0414 	add.w	r4, r0, #20
 80090ec:	dd45      	ble.n	800917a <rshift+0xa0>
 80090ee:	f011 011f 	ands.w	r1, r1, #31
 80090f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80090f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090fa:	d10c      	bne.n	8009116 <rshift+0x3c>
 80090fc:	f100 0710 	add.w	r7, r0, #16
 8009100:	4629      	mov	r1, r5
 8009102:	42b1      	cmp	r1, r6
 8009104:	d334      	bcc.n	8009170 <rshift+0x96>
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	1eea      	subs	r2, r5, #3
 800910c:	4296      	cmp	r6, r2
 800910e:	bf38      	it	cc
 8009110:	2300      	movcc	r3, #0
 8009112:	4423      	add	r3, r4
 8009114:	e015      	b.n	8009142 <rshift+0x68>
 8009116:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800911a:	f1c1 0820 	rsb	r8, r1, #32
 800911e:	40cf      	lsrs	r7, r1
 8009120:	f105 0e04 	add.w	lr, r5, #4
 8009124:	46a1      	mov	r9, r4
 8009126:	4576      	cmp	r6, lr
 8009128:	46f4      	mov	ip, lr
 800912a:	d815      	bhi.n	8009158 <rshift+0x7e>
 800912c:	1a9a      	subs	r2, r3, r2
 800912e:	0092      	lsls	r2, r2, #2
 8009130:	3a04      	subs	r2, #4
 8009132:	3501      	adds	r5, #1
 8009134:	42ae      	cmp	r6, r5
 8009136:	bf38      	it	cc
 8009138:	2200      	movcc	r2, #0
 800913a:	18a3      	adds	r3, r4, r2
 800913c:	50a7      	str	r7, [r4, r2]
 800913e:	b107      	cbz	r7, 8009142 <rshift+0x68>
 8009140:	3304      	adds	r3, #4
 8009142:	1b1a      	subs	r2, r3, r4
 8009144:	42a3      	cmp	r3, r4
 8009146:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800914a:	bf08      	it	eq
 800914c:	2300      	moveq	r3, #0
 800914e:	6102      	str	r2, [r0, #16]
 8009150:	bf08      	it	eq
 8009152:	6143      	streq	r3, [r0, #20]
 8009154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009158:	f8dc c000 	ldr.w	ip, [ip]
 800915c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009160:	ea4c 0707 	orr.w	r7, ip, r7
 8009164:	f849 7b04 	str.w	r7, [r9], #4
 8009168:	f85e 7b04 	ldr.w	r7, [lr], #4
 800916c:	40cf      	lsrs	r7, r1
 800916e:	e7da      	b.n	8009126 <rshift+0x4c>
 8009170:	f851 cb04 	ldr.w	ip, [r1], #4
 8009174:	f847 cf04 	str.w	ip, [r7, #4]!
 8009178:	e7c3      	b.n	8009102 <rshift+0x28>
 800917a:	4623      	mov	r3, r4
 800917c:	e7e1      	b.n	8009142 <rshift+0x68>

0800917e <__hexdig_fun>:
 800917e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009182:	2b09      	cmp	r3, #9
 8009184:	d802      	bhi.n	800918c <__hexdig_fun+0xe>
 8009186:	3820      	subs	r0, #32
 8009188:	b2c0      	uxtb	r0, r0
 800918a:	4770      	bx	lr
 800918c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009190:	2b05      	cmp	r3, #5
 8009192:	d801      	bhi.n	8009198 <__hexdig_fun+0x1a>
 8009194:	3847      	subs	r0, #71	; 0x47
 8009196:	e7f7      	b.n	8009188 <__hexdig_fun+0xa>
 8009198:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800919c:	2b05      	cmp	r3, #5
 800919e:	d801      	bhi.n	80091a4 <__hexdig_fun+0x26>
 80091a0:	3827      	subs	r0, #39	; 0x27
 80091a2:	e7f1      	b.n	8009188 <__hexdig_fun+0xa>
 80091a4:	2000      	movs	r0, #0
 80091a6:	4770      	bx	lr

080091a8 <__gethex>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	ed2d 8b02 	vpush	{d8}
 80091b0:	b089      	sub	sp, #36	; 0x24
 80091b2:	ee08 0a10 	vmov	s16, r0
 80091b6:	9304      	str	r3, [sp, #16]
 80091b8:	4bb4      	ldr	r3, [pc, #720]	; (800948c <__gethex+0x2e4>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	4618      	mov	r0, r3
 80091c0:	468b      	mov	fp, r1
 80091c2:	4690      	mov	r8, r2
 80091c4:	f7f7 f82c 	bl	8000220 <strlen>
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	f8db 2000 	ldr.w	r2, [fp]
 80091ce:	4403      	add	r3, r0
 80091d0:	4682      	mov	sl, r0
 80091d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80091d6:	9305      	str	r3, [sp, #20]
 80091d8:	1c93      	adds	r3, r2, #2
 80091da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80091de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80091e2:	32fe      	adds	r2, #254	; 0xfe
 80091e4:	18d1      	adds	r1, r2, r3
 80091e6:	461f      	mov	r7, r3
 80091e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091ec:	9100      	str	r1, [sp, #0]
 80091ee:	2830      	cmp	r0, #48	; 0x30
 80091f0:	d0f8      	beq.n	80091e4 <__gethex+0x3c>
 80091f2:	f7ff ffc4 	bl	800917e <__hexdig_fun>
 80091f6:	4604      	mov	r4, r0
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d13a      	bne.n	8009272 <__gethex+0xca>
 80091fc:	9901      	ldr	r1, [sp, #4]
 80091fe:	4652      	mov	r2, sl
 8009200:	4638      	mov	r0, r7
 8009202:	f001 fa70 	bl	800a6e6 <strncmp>
 8009206:	4605      	mov	r5, r0
 8009208:	2800      	cmp	r0, #0
 800920a:	d168      	bne.n	80092de <__gethex+0x136>
 800920c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009210:	eb07 060a 	add.w	r6, r7, sl
 8009214:	f7ff ffb3 	bl	800917e <__hexdig_fun>
 8009218:	2800      	cmp	r0, #0
 800921a:	d062      	beq.n	80092e2 <__gethex+0x13a>
 800921c:	4633      	mov	r3, r6
 800921e:	7818      	ldrb	r0, [r3, #0]
 8009220:	2830      	cmp	r0, #48	; 0x30
 8009222:	461f      	mov	r7, r3
 8009224:	f103 0301 	add.w	r3, r3, #1
 8009228:	d0f9      	beq.n	800921e <__gethex+0x76>
 800922a:	f7ff ffa8 	bl	800917e <__hexdig_fun>
 800922e:	2301      	movs	r3, #1
 8009230:	fab0 f480 	clz	r4, r0
 8009234:	0964      	lsrs	r4, r4, #5
 8009236:	4635      	mov	r5, r6
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	463a      	mov	r2, r7
 800923c:	4616      	mov	r6, r2
 800923e:	3201      	adds	r2, #1
 8009240:	7830      	ldrb	r0, [r6, #0]
 8009242:	f7ff ff9c 	bl	800917e <__hexdig_fun>
 8009246:	2800      	cmp	r0, #0
 8009248:	d1f8      	bne.n	800923c <__gethex+0x94>
 800924a:	9901      	ldr	r1, [sp, #4]
 800924c:	4652      	mov	r2, sl
 800924e:	4630      	mov	r0, r6
 8009250:	f001 fa49 	bl	800a6e6 <strncmp>
 8009254:	b980      	cbnz	r0, 8009278 <__gethex+0xd0>
 8009256:	b94d      	cbnz	r5, 800926c <__gethex+0xc4>
 8009258:	eb06 050a 	add.w	r5, r6, sl
 800925c:	462a      	mov	r2, r5
 800925e:	4616      	mov	r6, r2
 8009260:	3201      	adds	r2, #1
 8009262:	7830      	ldrb	r0, [r6, #0]
 8009264:	f7ff ff8b 	bl	800917e <__hexdig_fun>
 8009268:	2800      	cmp	r0, #0
 800926a:	d1f8      	bne.n	800925e <__gethex+0xb6>
 800926c:	1bad      	subs	r5, r5, r6
 800926e:	00ad      	lsls	r5, r5, #2
 8009270:	e004      	b.n	800927c <__gethex+0xd4>
 8009272:	2400      	movs	r4, #0
 8009274:	4625      	mov	r5, r4
 8009276:	e7e0      	b.n	800923a <__gethex+0x92>
 8009278:	2d00      	cmp	r5, #0
 800927a:	d1f7      	bne.n	800926c <__gethex+0xc4>
 800927c:	7833      	ldrb	r3, [r6, #0]
 800927e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009282:	2b50      	cmp	r3, #80	; 0x50
 8009284:	d13b      	bne.n	80092fe <__gethex+0x156>
 8009286:	7873      	ldrb	r3, [r6, #1]
 8009288:	2b2b      	cmp	r3, #43	; 0x2b
 800928a:	d02c      	beq.n	80092e6 <__gethex+0x13e>
 800928c:	2b2d      	cmp	r3, #45	; 0x2d
 800928e:	d02e      	beq.n	80092ee <__gethex+0x146>
 8009290:	1c71      	adds	r1, r6, #1
 8009292:	f04f 0900 	mov.w	r9, #0
 8009296:	7808      	ldrb	r0, [r1, #0]
 8009298:	f7ff ff71 	bl	800917e <__hexdig_fun>
 800929c:	1e43      	subs	r3, r0, #1
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b18      	cmp	r3, #24
 80092a2:	d82c      	bhi.n	80092fe <__gethex+0x156>
 80092a4:	f1a0 0210 	sub.w	r2, r0, #16
 80092a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092ac:	f7ff ff67 	bl	800917e <__hexdig_fun>
 80092b0:	1e43      	subs	r3, r0, #1
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b18      	cmp	r3, #24
 80092b6:	d91d      	bls.n	80092f4 <__gethex+0x14c>
 80092b8:	f1b9 0f00 	cmp.w	r9, #0
 80092bc:	d000      	beq.n	80092c0 <__gethex+0x118>
 80092be:	4252      	negs	r2, r2
 80092c0:	4415      	add	r5, r2
 80092c2:	f8cb 1000 	str.w	r1, [fp]
 80092c6:	b1e4      	cbz	r4, 8009302 <__gethex+0x15a>
 80092c8:	9b00      	ldr	r3, [sp, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf14      	ite	ne
 80092ce:	2700      	movne	r7, #0
 80092d0:	2706      	moveq	r7, #6
 80092d2:	4638      	mov	r0, r7
 80092d4:	b009      	add	sp, #36	; 0x24
 80092d6:	ecbd 8b02 	vpop	{d8}
 80092da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092de:	463e      	mov	r6, r7
 80092e0:	4625      	mov	r5, r4
 80092e2:	2401      	movs	r4, #1
 80092e4:	e7ca      	b.n	800927c <__gethex+0xd4>
 80092e6:	f04f 0900 	mov.w	r9, #0
 80092ea:	1cb1      	adds	r1, r6, #2
 80092ec:	e7d3      	b.n	8009296 <__gethex+0xee>
 80092ee:	f04f 0901 	mov.w	r9, #1
 80092f2:	e7fa      	b.n	80092ea <__gethex+0x142>
 80092f4:	230a      	movs	r3, #10
 80092f6:	fb03 0202 	mla	r2, r3, r2, r0
 80092fa:	3a10      	subs	r2, #16
 80092fc:	e7d4      	b.n	80092a8 <__gethex+0x100>
 80092fe:	4631      	mov	r1, r6
 8009300:	e7df      	b.n	80092c2 <__gethex+0x11a>
 8009302:	1bf3      	subs	r3, r6, r7
 8009304:	3b01      	subs	r3, #1
 8009306:	4621      	mov	r1, r4
 8009308:	2b07      	cmp	r3, #7
 800930a:	dc0b      	bgt.n	8009324 <__gethex+0x17c>
 800930c:	ee18 0a10 	vmov	r0, s16
 8009310:	f000 faf6 	bl	8009900 <_Balloc>
 8009314:	4604      	mov	r4, r0
 8009316:	b940      	cbnz	r0, 800932a <__gethex+0x182>
 8009318:	4b5d      	ldr	r3, [pc, #372]	; (8009490 <__gethex+0x2e8>)
 800931a:	4602      	mov	r2, r0
 800931c:	21de      	movs	r1, #222	; 0xde
 800931e:	485d      	ldr	r0, [pc, #372]	; (8009494 <__gethex+0x2ec>)
 8009320:	f7fc fdda 	bl	8005ed8 <__assert_func>
 8009324:	3101      	adds	r1, #1
 8009326:	105b      	asrs	r3, r3, #1
 8009328:	e7ee      	b.n	8009308 <__gethex+0x160>
 800932a:	f100 0914 	add.w	r9, r0, #20
 800932e:	f04f 0b00 	mov.w	fp, #0
 8009332:	f1ca 0301 	rsb	r3, sl, #1
 8009336:	f8cd 9008 	str.w	r9, [sp, #8]
 800933a:	f8cd b000 	str.w	fp, [sp]
 800933e:	9306      	str	r3, [sp, #24]
 8009340:	42b7      	cmp	r7, r6
 8009342:	d340      	bcc.n	80093c6 <__gethex+0x21e>
 8009344:	9802      	ldr	r0, [sp, #8]
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	f840 3b04 	str.w	r3, [r0], #4
 800934c:	eba0 0009 	sub.w	r0, r0, r9
 8009350:	1080      	asrs	r0, r0, #2
 8009352:	0146      	lsls	r6, r0, #5
 8009354:	6120      	str	r0, [r4, #16]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fbc4 	bl	8009ae4 <__hi0bits>
 800935c:	1a30      	subs	r0, r6, r0
 800935e:	f8d8 6000 	ldr.w	r6, [r8]
 8009362:	42b0      	cmp	r0, r6
 8009364:	dd63      	ble.n	800942e <__gethex+0x286>
 8009366:	1b87      	subs	r7, r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	4620      	mov	r0, r4
 800936c:	f000 ff68 	bl	800a240 <__any_on>
 8009370:	4682      	mov	sl, r0
 8009372:	b1a8      	cbz	r0, 80093a0 <__gethex+0x1f8>
 8009374:	1e7b      	subs	r3, r7, #1
 8009376:	1159      	asrs	r1, r3, #5
 8009378:	f003 021f 	and.w	r2, r3, #31
 800937c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009380:	f04f 0a01 	mov.w	sl, #1
 8009384:	fa0a f202 	lsl.w	r2, sl, r2
 8009388:	420a      	tst	r2, r1
 800938a:	d009      	beq.n	80093a0 <__gethex+0x1f8>
 800938c:	4553      	cmp	r3, sl
 800938e:	dd05      	ble.n	800939c <__gethex+0x1f4>
 8009390:	1eb9      	subs	r1, r7, #2
 8009392:	4620      	mov	r0, r4
 8009394:	f000 ff54 	bl	800a240 <__any_on>
 8009398:	2800      	cmp	r0, #0
 800939a:	d145      	bne.n	8009428 <__gethex+0x280>
 800939c:	f04f 0a02 	mov.w	sl, #2
 80093a0:	4639      	mov	r1, r7
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7ff fe99 	bl	80090da <rshift>
 80093a8:	443d      	add	r5, r7
 80093aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093ae:	42ab      	cmp	r3, r5
 80093b0:	da4c      	bge.n	800944c <__gethex+0x2a4>
 80093b2:	ee18 0a10 	vmov	r0, s16
 80093b6:	4621      	mov	r1, r4
 80093b8:	f000 fae2 	bl	8009980 <_Bfree>
 80093bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093be:	2300      	movs	r3, #0
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	27a3      	movs	r7, #163	; 0xa3
 80093c4:	e785      	b.n	80092d2 <__gethex+0x12a>
 80093c6:	1e73      	subs	r3, r6, #1
 80093c8:	9a05      	ldr	r2, [sp, #20]
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d019      	beq.n	8009408 <__gethex+0x260>
 80093d4:	f1bb 0f20 	cmp.w	fp, #32
 80093d8:	d107      	bne.n	80093ea <__gethex+0x242>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	9a00      	ldr	r2, [sp, #0]
 80093de:	f843 2b04 	str.w	r2, [r3], #4
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	469b      	mov	fp, r3
 80093ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80093ee:	f7ff fec6 	bl	800917e <__hexdig_fun>
 80093f2:	9b00      	ldr	r3, [sp, #0]
 80093f4:	f000 000f 	and.w	r0, r0, #15
 80093f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80093fc:	4303      	orrs	r3, r0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	f10b 0b04 	add.w	fp, fp, #4
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	e00d      	b.n	8009424 <__gethex+0x27c>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	9a06      	ldr	r2, [sp, #24]
 800940c:	4413      	add	r3, r2
 800940e:	42bb      	cmp	r3, r7
 8009410:	d3e0      	bcc.n	80093d4 <__gethex+0x22c>
 8009412:	4618      	mov	r0, r3
 8009414:	9901      	ldr	r1, [sp, #4]
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	4652      	mov	r2, sl
 800941a:	f001 f964 	bl	800a6e6 <strncmp>
 800941e:	9b07      	ldr	r3, [sp, #28]
 8009420:	2800      	cmp	r0, #0
 8009422:	d1d7      	bne.n	80093d4 <__gethex+0x22c>
 8009424:	461e      	mov	r6, r3
 8009426:	e78b      	b.n	8009340 <__gethex+0x198>
 8009428:	f04f 0a03 	mov.w	sl, #3
 800942c:	e7b8      	b.n	80093a0 <__gethex+0x1f8>
 800942e:	da0a      	bge.n	8009446 <__gethex+0x29e>
 8009430:	1a37      	subs	r7, r6, r0
 8009432:	4621      	mov	r1, r4
 8009434:	ee18 0a10 	vmov	r0, s16
 8009438:	463a      	mov	r2, r7
 800943a:	f000 fcbd 	bl	8009db8 <__lshift>
 800943e:	1bed      	subs	r5, r5, r7
 8009440:	4604      	mov	r4, r0
 8009442:	f100 0914 	add.w	r9, r0, #20
 8009446:	f04f 0a00 	mov.w	sl, #0
 800944a:	e7ae      	b.n	80093aa <__gethex+0x202>
 800944c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009450:	42a8      	cmp	r0, r5
 8009452:	dd72      	ble.n	800953a <__gethex+0x392>
 8009454:	1b45      	subs	r5, r0, r5
 8009456:	42ae      	cmp	r6, r5
 8009458:	dc36      	bgt.n	80094c8 <__gethex+0x320>
 800945a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d02a      	beq.n	80094b8 <__gethex+0x310>
 8009462:	2b03      	cmp	r3, #3
 8009464:	d02c      	beq.n	80094c0 <__gethex+0x318>
 8009466:	2b01      	cmp	r3, #1
 8009468:	d11c      	bne.n	80094a4 <__gethex+0x2fc>
 800946a:	42ae      	cmp	r6, r5
 800946c:	d11a      	bne.n	80094a4 <__gethex+0x2fc>
 800946e:	2e01      	cmp	r6, #1
 8009470:	d112      	bne.n	8009498 <__gethex+0x2f0>
 8009472:	9a04      	ldr	r2, [sp, #16]
 8009474:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	2301      	movs	r3, #1
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	f8c9 3000 	str.w	r3, [r9]
 8009482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009484:	2762      	movs	r7, #98	; 0x62
 8009486:	601c      	str	r4, [r3, #0]
 8009488:	e723      	b.n	80092d2 <__gethex+0x12a>
 800948a:	bf00      	nop
 800948c:	0800bf78 	.word	0x0800bf78
 8009490:	0800be9d 	.word	0x0800be9d
 8009494:	0800bf10 	.word	0x0800bf10
 8009498:	1e71      	subs	r1, r6, #1
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fed0 	bl	800a240 <__any_on>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d1e6      	bne.n	8009472 <__gethex+0x2ca>
 80094a4:	ee18 0a10 	vmov	r0, s16
 80094a8:	4621      	mov	r1, r4
 80094aa:	f000 fa69 	bl	8009980 <_Bfree>
 80094ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094b0:	2300      	movs	r3, #0
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	2750      	movs	r7, #80	; 0x50
 80094b6:	e70c      	b.n	80092d2 <__gethex+0x12a>
 80094b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f2      	bne.n	80094a4 <__gethex+0x2fc>
 80094be:	e7d8      	b.n	8009472 <__gethex+0x2ca>
 80094c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1d5      	bne.n	8009472 <__gethex+0x2ca>
 80094c6:	e7ed      	b.n	80094a4 <__gethex+0x2fc>
 80094c8:	1e6f      	subs	r7, r5, #1
 80094ca:	f1ba 0f00 	cmp.w	sl, #0
 80094ce:	d131      	bne.n	8009534 <__gethex+0x38c>
 80094d0:	b127      	cbz	r7, 80094dc <__gethex+0x334>
 80094d2:	4639      	mov	r1, r7
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 feb3 	bl	800a240 <__any_on>
 80094da:	4682      	mov	sl, r0
 80094dc:	117b      	asrs	r3, r7, #5
 80094de:	2101      	movs	r1, #1
 80094e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80094e4:	f007 071f 	and.w	r7, r7, #31
 80094e8:	fa01 f707 	lsl.w	r7, r1, r7
 80094ec:	421f      	tst	r7, r3
 80094ee:	4629      	mov	r1, r5
 80094f0:	4620      	mov	r0, r4
 80094f2:	bf18      	it	ne
 80094f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80094f8:	1b76      	subs	r6, r6, r5
 80094fa:	f7ff fdee 	bl	80090da <rshift>
 80094fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009502:	2702      	movs	r7, #2
 8009504:	f1ba 0f00 	cmp.w	sl, #0
 8009508:	d048      	beq.n	800959c <__gethex+0x3f4>
 800950a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d015      	beq.n	800953e <__gethex+0x396>
 8009512:	2b03      	cmp	r3, #3
 8009514:	d017      	beq.n	8009546 <__gethex+0x39e>
 8009516:	2b01      	cmp	r3, #1
 8009518:	d109      	bne.n	800952e <__gethex+0x386>
 800951a:	f01a 0f02 	tst.w	sl, #2
 800951e:	d006      	beq.n	800952e <__gethex+0x386>
 8009520:	f8d9 0000 	ldr.w	r0, [r9]
 8009524:	ea4a 0a00 	orr.w	sl, sl, r0
 8009528:	f01a 0f01 	tst.w	sl, #1
 800952c:	d10e      	bne.n	800954c <__gethex+0x3a4>
 800952e:	f047 0710 	orr.w	r7, r7, #16
 8009532:	e033      	b.n	800959c <__gethex+0x3f4>
 8009534:	f04f 0a01 	mov.w	sl, #1
 8009538:	e7d0      	b.n	80094dc <__gethex+0x334>
 800953a:	2701      	movs	r7, #1
 800953c:	e7e2      	b.n	8009504 <__gethex+0x35c>
 800953e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009540:	f1c3 0301 	rsb	r3, r3, #1
 8009544:	9315      	str	r3, [sp, #84]	; 0x54
 8009546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0f0      	beq.n	800952e <__gethex+0x386>
 800954c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009550:	f104 0314 	add.w	r3, r4, #20
 8009554:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009558:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800955c:	f04f 0c00 	mov.w	ip, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f853 2b04 	ldr.w	r2, [r3], #4
 8009566:	f1b2 3fff 	cmp.w	r2, #4294967295
 800956a:	d01c      	beq.n	80095a6 <__gethex+0x3fe>
 800956c:	3201      	adds	r2, #1
 800956e:	6002      	str	r2, [r0, #0]
 8009570:	2f02      	cmp	r7, #2
 8009572:	f104 0314 	add.w	r3, r4, #20
 8009576:	d13f      	bne.n	80095f8 <__gethex+0x450>
 8009578:	f8d8 2000 	ldr.w	r2, [r8]
 800957c:	3a01      	subs	r2, #1
 800957e:	42b2      	cmp	r2, r6
 8009580:	d10a      	bne.n	8009598 <__gethex+0x3f0>
 8009582:	1171      	asrs	r1, r6, #5
 8009584:	2201      	movs	r2, #1
 8009586:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800958a:	f006 061f 	and.w	r6, r6, #31
 800958e:	fa02 f606 	lsl.w	r6, r2, r6
 8009592:	421e      	tst	r6, r3
 8009594:	bf18      	it	ne
 8009596:	4617      	movne	r7, r2
 8009598:	f047 0720 	orr.w	r7, r7, #32
 800959c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800959e:	601c      	str	r4, [r3, #0]
 80095a0:	9b04      	ldr	r3, [sp, #16]
 80095a2:	601d      	str	r5, [r3, #0]
 80095a4:	e695      	b.n	80092d2 <__gethex+0x12a>
 80095a6:	4299      	cmp	r1, r3
 80095a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80095ac:	d8d8      	bhi.n	8009560 <__gethex+0x3b8>
 80095ae:	68a3      	ldr	r3, [r4, #8]
 80095b0:	459b      	cmp	fp, r3
 80095b2:	db19      	blt.n	80095e8 <__gethex+0x440>
 80095b4:	6861      	ldr	r1, [r4, #4]
 80095b6:	ee18 0a10 	vmov	r0, s16
 80095ba:	3101      	adds	r1, #1
 80095bc:	f000 f9a0 	bl	8009900 <_Balloc>
 80095c0:	4681      	mov	r9, r0
 80095c2:	b918      	cbnz	r0, 80095cc <__gethex+0x424>
 80095c4:	4b1a      	ldr	r3, [pc, #104]	; (8009630 <__gethex+0x488>)
 80095c6:	4602      	mov	r2, r0
 80095c8:	2184      	movs	r1, #132	; 0x84
 80095ca:	e6a8      	b.n	800931e <__gethex+0x176>
 80095cc:	6922      	ldr	r2, [r4, #16]
 80095ce:	3202      	adds	r2, #2
 80095d0:	f104 010c 	add.w	r1, r4, #12
 80095d4:	0092      	lsls	r2, r2, #2
 80095d6:	300c      	adds	r0, #12
 80095d8:	f7fc fce8 	bl	8005fac <memcpy>
 80095dc:	4621      	mov	r1, r4
 80095de:	ee18 0a10 	vmov	r0, s16
 80095e2:	f000 f9cd 	bl	8009980 <_Bfree>
 80095e6:	464c      	mov	r4, r9
 80095e8:	6923      	ldr	r3, [r4, #16]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095f0:	6122      	str	r2, [r4, #16]
 80095f2:	2201      	movs	r2, #1
 80095f4:	615a      	str	r2, [r3, #20]
 80095f6:	e7bb      	b.n	8009570 <__gethex+0x3c8>
 80095f8:	6922      	ldr	r2, [r4, #16]
 80095fa:	455a      	cmp	r2, fp
 80095fc:	dd0b      	ble.n	8009616 <__gethex+0x46e>
 80095fe:	2101      	movs	r1, #1
 8009600:	4620      	mov	r0, r4
 8009602:	f7ff fd6a 	bl	80090da <rshift>
 8009606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800960a:	3501      	adds	r5, #1
 800960c:	42ab      	cmp	r3, r5
 800960e:	f6ff aed0 	blt.w	80093b2 <__gethex+0x20a>
 8009612:	2701      	movs	r7, #1
 8009614:	e7c0      	b.n	8009598 <__gethex+0x3f0>
 8009616:	f016 061f 	ands.w	r6, r6, #31
 800961a:	d0fa      	beq.n	8009612 <__gethex+0x46a>
 800961c:	4453      	add	r3, sl
 800961e:	f1c6 0620 	rsb	r6, r6, #32
 8009622:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009626:	f000 fa5d 	bl	8009ae4 <__hi0bits>
 800962a:	42b0      	cmp	r0, r6
 800962c:	dbe7      	blt.n	80095fe <__gethex+0x456>
 800962e:	e7f0      	b.n	8009612 <__gethex+0x46a>
 8009630:	0800be9d 	.word	0x0800be9d

08009634 <L_shift>:
 8009634:	f1c2 0208 	rsb	r2, r2, #8
 8009638:	0092      	lsls	r2, r2, #2
 800963a:	b570      	push	{r4, r5, r6, lr}
 800963c:	f1c2 0620 	rsb	r6, r2, #32
 8009640:	6843      	ldr	r3, [r0, #4]
 8009642:	6804      	ldr	r4, [r0, #0]
 8009644:	fa03 f506 	lsl.w	r5, r3, r6
 8009648:	432c      	orrs	r4, r5
 800964a:	40d3      	lsrs	r3, r2
 800964c:	6004      	str	r4, [r0, #0]
 800964e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009652:	4288      	cmp	r0, r1
 8009654:	d3f4      	bcc.n	8009640 <L_shift+0xc>
 8009656:	bd70      	pop	{r4, r5, r6, pc}

08009658 <__match>:
 8009658:	b530      	push	{r4, r5, lr}
 800965a:	6803      	ldr	r3, [r0, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009662:	b914      	cbnz	r4, 800966a <__match+0x12>
 8009664:	6003      	str	r3, [r0, #0]
 8009666:	2001      	movs	r0, #1
 8009668:	bd30      	pop	{r4, r5, pc}
 800966a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800966e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009672:	2d19      	cmp	r5, #25
 8009674:	bf98      	it	ls
 8009676:	3220      	addls	r2, #32
 8009678:	42a2      	cmp	r2, r4
 800967a:	d0f0      	beq.n	800965e <__match+0x6>
 800967c:	2000      	movs	r0, #0
 800967e:	e7f3      	b.n	8009668 <__match+0x10>

08009680 <__hexnan>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	680b      	ldr	r3, [r1, #0]
 8009686:	115e      	asrs	r6, r3, #5
 8009688:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800968c:	f013 031f 	ands.w	r3, r3, #31
 8009690:	b087      	sub	sp, #28
 8009692:	bf18      	it	ne
 8009694:	3604      	addne	r6, #4
 8009696:	2500      	movs	r5, #0
 8009698:	1f37      	subs	r7, r6, #4
 800969a:	4690      	mov	r8, r2
 800969c:	6802      	ldr	r2, [r0, #0]
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	4682      	mov	sl, r0
 80096a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80096a6:	46b9      	mov	r9, r7
 80096a8:	463c      	mov	r4, r7
 80096aa:	9502      	str	r5, [sp, #8]
 80096ac:	46ab      	mov	fp, r5
 80096ae:	7851      	ldrb	r1, [r2, #1]
 80096b0:	1c53      	adds	r3, r2, #1
 80096b2:	9303      	str	r3, [sp, #12]
 80096b4:	b341      	cbz	r1, 8009708 <__hexnan+0x88>
 80096b6:	4608      	mov	r0, r1
 80096b8:	9205      	str	r2, [sp, #20]
 80096ba:	9104      	str	r1, [sp, #16]
 80096bc:	f7ff fd5f 	bl	800917e <__hexdig_fun>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d14f      	bne.n	8009764 <__hexnan+0xe4>
 80096c4:	9904      	ldr	r1, [sp, #16]
 80096c6:	9a05      	ldr	r2, [sp, #20]
 80096c8:	2920      	cmp	r1, #32
 80096ca:	d818      	bhi.n	80096fe <__hexnan+0x7e>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	459b      	cmp	fp, r3
 80096d0:	dd13      	ble.n	80096fa <__hexnan+0x7a>
 80096d2:	454c      	cmp	r4, r9
 80096d4:	d206      	bcs.n	80096e4 <__hexnan+0x64>
 80096d6:	2d07      	cmp	r5, #7
 80096d8:	dc04      	bgt.n	80096e4 <__hexnan+0x64>
 80096da:	462a      	mov	r2, r5
 80096dc:	4649      	mov	r1, r9
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff ffa8 	bl	8009634 <L_shift>
 80096e4:	4544      	cmp	r4, r8
 80096e6:	d950      	bls.n	800978a <__hexnan+0x10a>
 80096e8:	2300      	movs	r3, #0
 80096ea:	f1a4 0904 	sub.w	r9, r4, #4
 80096ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80096f2:	f8cd b008 	str.w	fp, [sp, #8]
 80096f6:	464c      	mov	r4, r9
 80096f8:	461d      	mov	r5, r3
 80096fa:	9a03      	ldr	r2, [sp, #12]
 80096fc:	e7d7      	b.n	80096ae <__hexnan+0x2e>
 80096fe:	2929      	cmp	r1, #41	; 0x29
 8009700:	d156      	bne.n	80097b0 <__hexnan+0x130>
 8009702:	3202      	adds	r2, #2
 8009704:	f8ca 2000 	str.w	r2, [sl]
 8009708:	f1bb 0f00 	cmp.w	fp, #0
 800970c:	d050      	beq.n	80097b0 <__hexnan+0x130>
 800970e:	454c      	cmp	r4, r9
 8009710:	d206      	bcs.n	8009720 <__hexnan+0xa0>
 8009712:	2d07      	cmp	r5, #7
 8009714:	dc04      	bgt.n	8009720 <__hexnan+0xa0>
 8009716:	462a      	mov	r2, r5
 8009718:	4649      	mov	r1, r9
 800971a:	4620      	mov	r0, r4
 800971c:	f7ff ff8a 	bl	8009634 <L_shift>
 8009720:	4544      	cmp	r4, r8
 8009722:	d934      	bls.n	800978e <__hexnan+0x10e>
 8009724:	f1a8 0204 	sub.w	r2, r8, #4
 8009728:	4623      	mov	r3, r4
 800972a:	f853 1b04 	ldr.w	r1, [r3], #4
 800972e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009732:	429f      	cmp	r7, r3
 8009734:	d2f9      	bcs.n	800972a <__hexnan+0xaa>
 8009736:	1b3b      	subs	r3, r7, r4
 8009738:	f023 0303 	bic.w	r3, r3, #3
 800973c:	3304      	adds	r3, #4
 800973e:	3401      	adds	r4, #1
 8009740:	3e03      	subs	r6, #3
 8009742:	42b4      	cmp	r4, r6
 8009744:	bf88      	it	hi
 8009746:	2304      	movhi	r3, #4
 8009748:	4443      	add	r3, r8
 800974a:	2200      	movs	r2, #0
 800974c:	f843 2b04 	str.w	r2, [r3], #4
 8009750:	429f      	cmp	r7, r3
 8009752:	d2fb      	bcs.n	800974c <__hexnan+0xcc>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	b91b      	cbnz	r3, 8009760 <__hexnan+0xe0>
 8009758:	4547      	cmp	r7, r8
 800975a:	d127      	bne.n	80097ac <__hexnan+0x12c>
 800975c:	2301      	movs	r3, #1
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	2005      	movs	r0, #5
 8009762:	e026      	b.n	80097b2 <__hexnan+0x132>
 8009764:	3501      	adds	r5, #1
 8009766:	2d08      	cmp	r5, #8
 8009768:	f10b 0b01 	add.w	fp, fp, #1
 800976c:	dd06      	ble.n	800977c <__hexnan+0xfc>
 800976e:	4544      	cmp	r4, r8
 8009770:	d9c3      	bls.n	80096fa <__hexnan+0x7a>
 8009772:	2300      	movs	r3, #0
 8009774:	f844 3c04 	str.w	r3, [r4, #-4]
 8009778:	2501      	movs	r5, #1
 800977a:	3c04      	subs	r4, #4
 800977c:	6822      	ldr	r2, [r4, #0]
 800977e:	f000 000f 	and.w	r0, r0, #15
 8009782:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	e7b7      	b.n	80096fa <__hexnan+0x7a>
 800978a:	2508      	movs	r5, #8
 800978c:	e7b5      	b.n	80096fa <__hexnan+0x7a>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0df      	beq.n	8009754 <__hexnan+0xd4>
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	f1c3 0320 	rsb	r3, r3, #32
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097a4:	401a      	ands	r2, r3
 80097a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80097aa:	e7d3      	b.n	8009754 <__hexnan+0xd4>
 80097ac:	3f04      	subs	r7, #4
 80097ae:	e7d1      	b.n	8009754 <__hexnan+0xd4>
 80097b0:	2004      	movs	r0, #4
 80097b2:	b007      	add	sp, #28
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097b8 <_localeconv_r>:
 80097b8:	4800      	ldr	r0, [pc, #0]	; (80097bc <_localeconv_r+0x4>)
 80097ba:	4770      	bx	lr
 80097bc:	2000016c 	.word	0x2000016c

080097c0 <__retarget_lock_init_recursive>:
 80097c0:	4770      	bx	lr

080097c2 <__retarget_lock_acquire_recursive>:
 80097c2:	4770      	bx	lr

080097c4 <__retarget_lock_release_recursive>:
 80097c4:	4770      	bx	lr

080097c6 <__swhatbuf_r>:
 80097c6:	b570      	push	{r4, r5, r6, lr}
 80097c8:	460e      	mov	r6, r1
 80097ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ce:	2900      	cmp	r1, #0
 80097d0:	b096      	sub	sp, #88	; 0x58
 80097d2:	4614      	mov	r4, r2
 80097d4:	461d      	mov	r5, r3
 80097d6:	da08      	bge.n	80097ea <__swhatbuf_r+0x24>
 80097d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	602a      	str	r2, [r5, #0]
 80097e0:	061a      	lsls	r2, r3, #24
 80097e2:	d410      	bmi.n	8009806 <__swhatbuf_r+0x40>
 80097e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e8:	e00e      	b.n	8009808 <__swhatbuf_r+0x42>
 80097ea:	466a      	mov	r2, sp
 80097ec:	f000 ffbe 	bl	800a76c <_fstat_r>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dbf1      	blt.n	80097d8 <__swhatbuf_r+0x12>
 80097f4:	9a01      	ldr	r2, [sp, #4]
 80097f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097fe:	425a      	negs	r2, r3
 8009800:	415a      	adcs	r2, r3
 8009802:	602a      	str	r2, [r5, #0]
 8009804:	e7ee      	b.n	80097e4 <__swhatbuf_r+0x1e>
 8009806:	2340      	movs	r3, #64	; 0x40
 8009808:	2000      	movs	r0, #0
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	b016      	add	sp, #88	; 0x58
 800980e:	bd70      	pop	{r4, r5, r6, pc}

08009810 <__smakebuf_r>:
 8009810:	898b      	ldrh	r3, [r1, #12]
 8009812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009814:	079d      	lsls	r5, r3, #30
 8009816:	4606      	mov	r6, r0
 8009818:	460c      	mov	r4, r1
 800981a:	d507      	bpl.n	800982c <__smakebuf_r+0x1c>
 800981c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	2301      	movs	r3, #1
 8009826:	6163      	str	r3, [r4, #20]
 8009828:	b002      	add	sp, #8
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	ab01      	add	r3, sp, #4
 800982e:	466a      	mov	r2, sp
 8009830:	f7ff ffc9 	bl	80097c6 <__swhatbuf_r>
 8009834:	9900      	ldr	r1, [sp, #0]
 8009836:	4605      	mov	r5, r0
 8009838:	4630      	mov	r0, r6
 800983a:	f7fc fc39 	bl	80060b0 <_malloc_r>
 800983e:	b948      	cbnz	r0, 8009854 <__smakebuf_r+0x44>
 8009840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009844:	059a      	lsls	r2, r3, #22
 8009846:	d4ef      	bmi.n	8009828 <__smakebuf_r+0x18>
 8009848:	f023 0303 	bic.w	r3, r3, #3
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	e7e3      	b.n	800981c <__smakebuf_r+0xc>
 8009854:	4b0d      	ldr	r3, [pc, #52]	; (800988c <__smakebuf_r+0x7c>)
 8009856:	62b3      	str	r3, [r6, #40]	; 0x28
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	6020      	str	r0, [r4, #0]
 800985c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	9b00      	ldr	r3, [sp, #0]
 8009864:	6163      	str	r3, [r4, #20]
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	6120      	str	r0, [r4, #16]
 800986a:	b15b      	cbz	r3, 8009884 <__smakebuf_r+0x74>
 800986c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009870:	4630      	mov	r0, r6
 8009872:	f000 ff8d 	bl	800a790 <_isatty_r>
 8009876:	b128      	cbz	r0, 8009884 <__smakebuf_r+0x74>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	89a0      	ldrh	r0, [r4, #12]
 8009886:	4305      	orrs	r5, r0
 8009888:	81a5      	strh	r5, [r4, #12]
 800988a:	e7cd      	b.n	8009828 <__smakebuf_r+0x18>
 800988c:	08008f39 	.word	0x08008f39

08009890 <__ascii_mbtowc>:
 8009890:	b082      	sub	sp, #8
 8009892:	b901      	cbnz	r1, 8009896 <__ascii_mbtowc+0x6>
 8009894:	a901      	add	r1, sp, #4
 8009896:	b142      	cbz	r2, 80098aa <__ascii_mbtowc+0x1a>
 8009898:	b14b      	cbz	r3, 80098ae <__ascii_mbtowc+0x1e>
 800989a:	7813      	ldrb	r3, [r2, #0]
 800989c:	600b      	str	r3, [r1, #0]
 800989e:	7812      	ldrb	r2, [r2, #0]
 80098a0:	1e10      	subs	r0, r2, #0
 80098a2:	bf18      	it	ne
 80098a4:	2001      	movne	r0, #1
 80098a6:	b002      	add	sp, #8
 80098a8:	4770      	bx	lr
 80098aa:	4610      	mov	r0, r2
 80098ac:	e7fb      	b.n	80098a6 <__ascii_mbtowc+0x16>
 80098ae:	f06f 0001 	mvn.w	r0, #1
 80098b2:	e7f8      	b.n	80098a6 <__ascii_mbtowc+0x16>

080098b4 <memmove>:
 80098b4:	4288      	cmp	r0, r1
 80098b6:	b510      	push	{r4, lr}
 80098b8:	eb01 0402 	add.w	r4, r1, r2
 80098bc:	d902      	bls.n	80098c4 <memmove+0x10>
 80098be:	4284      	cmp	r4, r0
 80098c0:	4623      	mov	r3, r4
 80098c2:	d807      	bhi.n	80098d4 <memmove+0x20>
 80098c4:	1e43      	subs	r3, r0, #1
 80098c6:	42a1      	cmp	r1, r4
 80098c8:	d008      	beq.n	80098dc <memmove+0x28>
 80098ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d2:	e7f8      	b.n	80098c6 <memmove+0x12>
 80098d4:	4402      	add	r2, r0
 80098d6:	4601      	mov	r1, r0
 80098d8:	428a      	cmp	r2, r1
 80098da:	d100      	bne.n	80098de <memmove+0x2a>
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098e6:	e7f7      	b.n	80098d8 <memmove+0x24>

080098e8 <__malloc_lock>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__malloc_lock+0x8>)
 80098ea:	f7ff bf6a 	b.w	80097c2 <__retarget_lock_acquire_recursive>
 80098ee:	bf00      	nop
 80098f0:	20000cfc 	.word	0x20000cfc

080098f4 <__malloc_unlock>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__malloc_unlock+0x8>)
 80098f6:	f7ff bf65 	b.w	80097c4 <__retarget_lock_release_recursive>
 80098fa:	bf00      	nop
 80098fc:	20000cfc 	.word	0x20000cfc

08009900 <_Balloc>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009904:	4604      	mov	r4, r0
 8009906:	460d      	mov	r5, r1
 8009908:	b976      	cbnz	r6, 8009928 <_Balloc+0x28>
 800990a:	2010      	movs	r0, #16
 800990c:	f7fc fb46 	bl	8005f9c <malloc>
 8009910:	4602      	mov	r2, r0
 8009912:	6260      	str	r0, [r4, #36]	; 0x24
 8009914:	b920      	cbnz	r0, 8009920 <_Balloc+0x20>
 8009916:	4b18      	ldr	r3, [pc, #96]	; (8009978 <_Balloc+0x78>)
 8009918:	4818      	ldr	r0, [pc, #96]	; (800997c <_Balloc+0x7c>)
 800991a:	2166      	movs	r1, #102	; 0x66
 800991c:	f7fc fadc 	bl	8005ed8 <__assert_func>
 8009920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009924:	6006      	str	r6, [r0, #0]
 8009926:	60c6      	str	r6, [r0, #12]
 8009928:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800992a:	68f3      	ldr	r3, [r6, #12]
 800992c:	b183      	cbz	r3, 8009950 <_Balloc+0x50>
 800992e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009936:	b9b8      	cbnz	r0, 8009968 <_Balloc+0x68>
 8009938:	2101      	movs	r1, #1
 800993a:	fa01 f605 	lsl.w	r6, r1, r5
 800993e:	1d72      	adds	r2, r6, #5
 8009940:	0092      	lsls	r2, r2, #2
 8009942:	4620      	mov	r0, r4
 8009944:	f000 fc9d 	bl	800a282 <_calloc_r>
 8009948:	b160      	cbz	r0, 8009964 <_Balloc+0x64>
 800994a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800994e:	e00e      	b.n	800996e <_Balloc+0x6e>
 8009950:	2221      	movs	r2, #33	; 0x21
 8009952:	2104      	movs	r1, #4
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fc94 	bl	800a282 <_calloc_r>
 800995a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800995c:	60f0      	str	r0, [r6, #12]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e4      	bne.n	800992e <_Balloc+0x2e>
 8009964:	2000      	movs	r0, #0
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	6802      	ldr	r2, [r0, #0]
 800996a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800996e:	2300      	movs	r3, #0
 8009970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009974:	e7f7      	b.n	8009966 <_Balloc+0x66>
 8009976:	bf00      	nop
 8009978:	0800bcc0 	.word	0x0800bcc0
 800997c:	0800bf8c 	.word	0x0800bf8c

08009980 <_Bfree>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b976      	cbnz	r6, 80099a8 <_Bfree+0x28>
 800998a:	2010      	movs	r0, #16
 800998c:	f7fc fb06 	bl	8005f9c <malloc>
 8009990:	4602      	mov	r2, r0
 8009992:	6268      	str	r0, [r5, #36]	; 0x24
 8009994:	b920      	cbnz	r0, 80099a0 <_Bfree+0x20>
 8009996:	4b09      	ldr	r3, [pc, #36]	; (80099bc <_Bfree+0x3c>)
 8009998:	4809      	ldr	r0, [pc, #36]	; (80099c0 <_Bfree+0x40>)
 800999a:	218a      	movs	r1, #138	; 0x8a
 800999c:	f7fc fa9c 	bl	8005ed8 <__assert_func>
 80099a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099a4:	6006      	str	r6, [r0, #0]
 80099a6:	60c6      	str	r6, [r0, #12]
 80099a8:	b13c      	cbz	r4, 80099ba <_Bfree+0x3a>
 80099aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099ac:	6862      	ldr	r2, [r4, #4]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099b4:	6021      	str	r1, [r4, #0]
 80099b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	0800bcc0 	.word	0x0800bcc0
 80099c0:	0800bf8c 	.word	0x0800bf8c

080099c4 <__multadd>:
 80099c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	690d      	ldr	r5, [r1, #16]
 80099ca:	4607      	mov	r7, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	461e      	mov	r6, r3
 80099d0:	f101 0c14 	add.w	ip, r1, #20
 80099d4:	2000      	movs	r0, #0
 80099d6:	f8dc 3000 	ldr.w	r3, [ip]
 80099da:	b299      	uxth	r1, r3
 80099dc:	fb02 6101 	mla	r1, r2, r1, r6
 80099e0:	0c1e      	lsrs	r6, r3, #16
 80099e2:	0c0b      	lsrs	r3, r1, #16
 80099e4:	fb02 3306 	mla	r3, r2, r6, r3
 80099e8:	b289      	uxth	r1, r1
 80099ea:	3001      	adds	r0, #1
 80099ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099f0:	4285      	cmp	r5, r0
 80099f2:	f84c 1b04 	str.w	r1, [ip], #4
 80099f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099fa:	dcec      	bgt.n	80099d6 <__multadd+0x12>
 80099fc:	b30e      	cbz	r6, 8009a42 <__multadd+0x7e>
 80099fe:	68a3      	ldr	r3, [r4, #8]
 8009a00:	42ab      	cmp	r3, r5
 8009a02:	dc19      	bgt.n	8009a38 <__multadd+0x74>
 8009a04:	6861      	ldr	r1, [r4, #4]
 8009a06:	4638      	mov	r0, r7
 8009a08:	3101      	adds	r1, #1
 8009a0a:	f7ff ff79 	bl	8009900 <_Balloc>
 8009a0e:	4680      	mov	r8, r0
 8009a10:	b928      	cbnz	r0, 8009a1e <__multadd+0x5a>
 8009a12:	4602      	mov	r2, r0
 8009a14:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <__multadd+0x84>)
 8009a16:	480d      	ldr	r0, [pc, #52]	; (8009a4c <__multadd+0x88>)
 8009a18:	21b5      	movs	r1, #181	; 0xb5
 8009a1a:	f7fc fa5d 	bl	8005ed8 <__assert_func>
 8009a1e:	6922      	ldr	r2, [r4, #16]
 8009a20:	3202      	adds	r2, #2
 8009a22:	f104 010c 	add.w	r1, r4, #12
 8009a26:	0092      	lsls	r2, r2, #2
 8009a28:	300c      	adds	r0, #12
 8009a2a:	f7fc fabf 	bl	8005fac <memcpy>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff ffa5 	bl	8009980 <_Bfree>
 8009a36:	4644      	mov	r4, r8
 8009a38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	615e      	str	r6, [r3, #20]
 8009a40:	6125      	str	r5, [r4, #16]
 8009a42:	4620      	mov	r0, r4
 8009a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a48:	0800be9d 	.word	0x0800be9d
 8009a4c:	0800bf8c 	.word	0x0800bf8c

08009a50 <__s2b>:
 8009a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	460c      	mov	r4, r1
 8009a56:	4615      	mov	r5, r2
 8009a58:	461f      	mov	r7, r3
 8009a5a:	2209      	movs	r2, #9
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	4606      	mov	r6, r0
 8009a60:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a64:	2100      	movs	r1, #0
 8009a66:	2201      	movs	r2, #1
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	db09      	blt.n	8009a80 <__s2b+0x30>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff ff47 	bl	8009900 <_Balloc>
 8009a72:	b940      	cbnz	r0, 8009a86 <__s2b+0x36>
 8009a74:	4602      	mov	r2, r0
 8009a76:	4b19      	ldr	r3, [pc, #100]	; (8009adc <__s2b+0x8c>)
 8009a78:	4819      	ldr	r0, [pc, #100]	; (8009ae0 <__s2b+0x90>)
 8009a7a:	21ce      	movs	r1, #206	; 0xce
 8009a7c:	f7fc fa2c 	bl	8005ed8 <__assert_func>
 8009a80:	0052      	lsls	r2, r2, #1
 8009a82:	3101      	adds	r1, #1
 8009a84:	e7f0      	b.n	8009a68 <__s2b+0x18>
 8009a86:	9b08      	ldr	r3, [sp, #32]
 8009a88:	6143      	str	r3, [r0, #20]
 8009a8a:	2d09      	cmp	r5, #9
 8009a8c:	f04f 0301 	mov.w	r3, #1
 8009a90:	6103      	str	r3, [r0, #16]
 8009a92:	dd16      	ble.n	8009ac2 <__s2b+0x72>
 8009a94:	f104 0909 	add.w	r9, r4, #9
 8009a98:	46c8      	mov	r8, r9
 8009a9a:	442c      	add	r4, r5
 8009a9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	3b30      	subs	r3, #48	; 0x30
 8009aa4:	220a      	movs	r2, #10
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7ff ff8c 	bl	80099c4 <__multadd>
 8009aac:	45a0      	cmp	r8, r4
 8009aae:	d1f5      	bne.n	8009a9c <__s2b+0x4c>
 8009ab0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ab4:	444c      	add	r4, r9
 8009ab6:	1b2d      	subs	r5, r5, r4
 8009ab8:	1963      	adds	r3, r4, r5
 8009aba:	42bb      	cmp	r3, r7
 8009abc:	db04      	blt.n	8009ac8 <__s2b+0x78>
 8009abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac2:	340a      	adds	r4, #10
 8009ac4:	2509      	movs	r5, #9
 8009ac6:	e7f6      	b.n	8009ab6 <__s2b+0x66>
 8009ac8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009acc:	4601      	mov	r1, r0
 8009ace:	3b30      	subs	r3, #48	; 0x30
 8009ad0:	220a      	movs	r2, #10
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f7ff ff76 	bl	80099c4 <__multadd>
 8009ad8:	e7ee      	b.n	8009ab8 <__s2b+0x68>
 8009ada:	bf00      	nop
 8009adc:	0800be9d 	.word	0x0800be9d
 8009ae0:	0800bf8c 	.word	0x0800bf8c

08009ae4 <__hi0bits>:
 8009ae4:	0c03      	lsrs	r3, r0, #16
 8009ae6:	041b      	lsls	r3, r3, #16
 8009ae8:	b9d3      	cbnz	r3, 8009b20 <__hi0bits+0x3c>
 8009aea:	0400      	lsls	r0, r0, #16
 8009aec:	2310      	movs	r3, #16
 8009aee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009af2:	bf04      	itt	eq
 8009af4:	0200      	lsleq	r0, r0, #8
 8009af6:	3308      	addeq	r3, #8
 8009af8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009afc:	bf04      	itt	eq
 8009afe:	0100      	lsleq	r0, r0, #4
 8009b00:	3304      	addeq	r3, #4
 8009b02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b06:	bf04      	itt	eq
 8009b08:	0080      	lsleq	r0, r0, #2
 8009b0a:	3302      	addeq	r3, #2
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	db05      	blt.n	8009b1c <__hi0bits+0x38>
 8009b10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b14:	f103 0301 	add.w	r3, r3, #1
 8009b18:	bf08      	it	eq
 8009b1a:	2320      	moveq	r3, #32
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	4770      	bx	lr
 8009b20:	2300      	movs	r3, #0
 8009b22:	e7e4      	b.n	8009aee <__hi0bits+0xa>

08009b24 <__lo0bits>:
 8009b24:	6803      	ldr	r3, [r0, #0]
 8009b26:	f013 0207 	ands.w	r2, r3, #7
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	d00b      	beq.n	8009b46 <__lo0bits+0x22>
 8009b2e:	07da      	lsls	r2, r3, #31
 8009b30:	d423      	bmi.n	8009b7a <__lo0bits+0x56>
 8009b32:	0798      	lsls	r0, r3, #30
 8009b34:	bf49      	itett	mi
 8009b36:	085b      	lsrmi	r3, r3, #1
 8009b38:	089b      	lsrpl	r3, r3, #2
 8009b3a:	2001      	movmi	r0, #1
 8009b3c:	600b      	strmi	r3, [r1, #0]
 8009b3e:	bf5c      	itt	pl
 8009b40:	600b      	strpl	r3, [r1, #0]
 8009b42:	2002      	movpl	r0, #2
 8009b44:	4770      	bx	lr
 8009b46:	b298      	uxth	r0, r3
 8009b48:	b9a8      	cbnz	r0, 8009b76 <__lo0bits+0x52>
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	2010      	movs	r0, #16
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	b90a      	cbnz	r2, 8009b56 <__lo0bits+0x32>
 8009b52:	3008      	adds	r0, #8
 8009b54:	0a1b      	lsrs	r3, r3, #8
 8009b56:	071a      	lsls	r2, r3, #28
 8009b58:	bf04      	itt	eq
 8009b5a:	091b      	lsreq	r3, r3, #4
 8009b5c:	3004      	addeq	r0, #4
 8009b5e:	079a      	lsls	r2, r3, #30
 8009b60:	bf04      	itt	eq
 8009b62:	089b      	lsreq	r3, r3, #2
 8009b64:	3002      	addeq	r0, #2
 8009b66:	07da      	lsls	r2, r3, #31
 8009b68:	d403      	bmi.n	8009b72 <__lo0bits+0x4e>
 8009b6a:	085b      	lsrs	r3, r3, #1
 8009b6c:	f100 0001 	add.w	r0, r0, #1
 8009b70:	d005      	beq.n	8009b7e <__lo0bits+0x5a>
 8009b72:	600b      	str	r3, [r1, #0]
 8009b74:	4770      	bx	lr
 8009b76:	4610      	mov	r0, r2
 8009b78:	e7e9      	b.n	8009b4e <__lo0bits+0x2a>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	4770      	bx	lr
 8009b7e:	2020      	movs	r0, #32
 8009b80:	4770      	bx	lr
	...

08009b84 <__i2b>:
 8009b84:	b510      	push	{r4, lr}
 8009b86:	460c      	mov	r4, r1
 8009b88:	2101      	movs	r1, #1
 8009b8a:	f7ff feb9 	bl	8009900 <_Balloc>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	b928      	cbnz	r0, 8009b9e <__i2b+0x1a>
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <__i2b+0x24>)
 8009b94:	4805      	ldr	r0, [pc, #20]	; (8009bac <__i2b+0x28>)
 8009b96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b9a:	f7fc f99d 	bl	8005ed8 <__assert_func>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	6144      	str	r4, [r0, #20]
 8009ba2:	6103      	str	r3, [r0, #16]
 8009ba4:	bd10      	pop	{r4, pc}
 8009ba6:	bf00      	nop
 8009ba8:	0800be9d 	.word	0x0800be9d
 8009bac:	0800bf8c 	.word	0x0800bf8c

08009bb0 <__multiply>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	4691      	mov	r9, r2
 8009bb6:	690a      	ldr	r2, [r1, #16]
 8009bb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	bfb8      	it	lt
 8009bc0:	460b      	movlt	r3, r1
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	bfbc      	itt	lt
 8009bc6:	464c      	movlt	r4, r9
 8009bc8:	4699      	movlt	r9, r3
 8009bca:	6927      	ldr	r7, [r4, #16]
 8009bcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bd0:	68a3      	ldr	r3, [r4, #8]
 8009bd2:	6861      	ldr	r1, [r4, #4]
 8009bd4:	eb07 060a 	add.w	r6, r7, sl
 8009bd8:	42b3      	cmp	r3, r6
 8009bda:	b085      	sub	sp, #20
 8009bdc:	bfb8      	it	lt
 8009bde:	3101      	addlt	r1, #1
 8009be0:	f7ff fe8e 	bl	8009900 <_Balloc>
 8009be4:	b930      	cbnz	r0, 8009bf4 <__multiply+0x44>
 8009be6:	4602      	mov	r2, r0
 8009be8:	4b44      	ldr	r3, [pc, #272]	; (8009cfc <__multiply+0x14c>)
 8009bea:	4845      	ldr	r0, [pc, #276]	; (8009d00 <__multiply+0x150>)
 8009bec:	f240 115d 	movw	r1, #349	; 0x15d
 8009bf0:	f7fc f972 	bl	8005ed8 <__assert_func>
 8009bf4:	f100 0514 	add.w	r5, r0, #20
 8009bf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4543      	cmp	r3, r8
 8009c02:	d321      	bcc.n	8009c48 <__multiply+0x98>
 8009c04:	f104 0314 	add.w	r3, r4, #20
 8009c08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c0c:	f109 0314 	add.w	r3, r9, #20
 8009c10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c14:	9202      	str	r2, [sp, #8]
 8009c16:	1b3a      	subs	r2, r7, r4
 8009c18:	3a15      	subs	r2, #21
 8009c1a:	f022 0203 	bic.w	r2, r2, #3
 8009c1e:	3204      	adds	r2, #4
 8009c20:	f104 0115 	add.w	r1, r4, #21
 8009c24:	428f      	cmp	r7, r1
 8009c26:	bf38      	it	cc
 8009c28:	2204      	movcc	r2, #4
 8009c2a:	9201      	str	r2, [sp, #4]
 8009c2c:	9a02      	ldr	r2, [sp, #8]
 8009c2e:	9303      	str	r3, [sp, #12]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d80c      	bhi.n	8009c4e <__multiply+0x9e>
 8009c34:	2e00      	cmp	r6, #0
 8009c36:	dd03      	ble.n	8009c40 <__multiply+0x90>
 8009c38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d05a      	beq.n	8009cf6 <__multiply+0x146>
 8009c40:	6106      	str	r6, [r0, #16]
 8009c42:	b005      	add	sp, #20
 8009c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c48:	f843 2b04 	str.w	r2, [r3], #4
 8009c4c:	e7d8      	b.n	8009c00 <__multiply+0x50>
 8009c4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c52:	f1ba 0f00 	cmp.w	sl, #0
 8009c56:	d024      	beq.n	8009ca2 <__multiply+0xf2>
 8009c58:	f104 0e14 	add.w	lr, r4, #20
 8009c5c:	46a9      	mov	r9, r5
 8009c5e:	f04f 0c00 	mov.w	ip, #0
 8009c62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c66:	f8d9 1000 	ldr.w	r1, [r9]
 8009c6a:	fa1f fb82 	uxth.w	fp, r2
 8009c6e:	b289      	uxth	r1, r1
 8009c70:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c78:	f8d9 2000 	ldr.w	r2, [r9]
 8009c7c:	4461      	add	r1, ip
 8009c7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c82:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c8a:	b289      	uxth	r1, r1
 8009c8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c90:	4577      	cmp	r7, lr
 8009c92:	f849 1b04 	str.w	r1, [r9], #4
 8009c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c9a:	d8e2      	bhi.n	8009c62 <__multiply+0xb2>
 8009c9c:	9a01      	ldr	r2, [sp, #4]
 8009c9e:	f845 c002 	str.w	ip, [r5, r2]
 8009ca2:	9a03      	ldr	r2, [sp, #12]
 8009ca4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	f1b9 0f00 	cmp.w	r9, #0
 8009cae:	d020      	beq.n	8009cf2 <__multiply+0x142>
 8009cb0:	6829      	ldr	r1, [r5, #0]
 8009cb2:	f104 0c14 	add.w	ip, r4, #20
 8009cb6:	46ae      	mov	lr, r5
 8009cb8:	f04f 0a00 	mov.w	sl, #0
 8009cbc:	f8bc b000 	ldrh.w	fp, [ip]
 8009cc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cc4:	fb09 220b 	mla	r2, r9, fp, r2
 8009cc8:	4492      	add	sl, r2
 8009cca:	b289      	uxth	r1, r1
 8009ccc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cd0:	f84e 1b04 	str.w	r1, [lr], #4
 8009cd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cd8:	f8be 1000 	ldrh.w	r1, [lr]
 8009cdc:	0c12      	lsrs	r2, r2, #16
 8009cde:	fb09 1102 	mla	r1, r9, r2, r1
 8009ce2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ce6:	4567      	cmp	r7, ip
 8009ce8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cec:	d8e6      	bhi.n	8009cbc <__multiply+0x10c>
 8009cee:	9a01      	ldr	r2, [sp, #4]
 8009cf0:	50a9      	str	r1, [r5, r2]
 8009cf2:	3504      	adds	r5, #4
 8009cf4:	e79a      	b.n	8009c2c <__multiply+0x7c>
 8009cf6:	3e01      	subs	r6, #1
 8009cf8:	e79c      	b.n	8009c34 <__multiply+0x84>
 8009cfa:	bf00      	nop
 8009cfc:	0800be9d 	.word	0x0800be9d
 8009d00:	0800bf8c 	.word	0x0800bf8c

08009d04 <__pow5mult>:
 8009d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d08:	4615      	mov	r5, r2
 8009d0a:	f012 0203 	ands.w	r2, r2, #3
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460f      	mov	r7, r1
 8009d12:	d007      	beq.n	8009d24 <__pow5mult+0x20>
 8009d14:	4c25      	ldr	r4, [pc, #148]	; (8009dac <__pow5mult+0xa8>)
 8009d16:	3a01      	subs	r2, #1
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d1e:	f7ff fe51 	bl	80099c4 <__multadd>
 8009d22:	4607      	mov	r7, r0
 8009d24:	10ad      	asrs	r5, r5, #2
 8009d26:	d03d      	beq.n	8009da4 <__pow5mult+0xa0>
 8009d28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d2a:	b97c      	cbnz	r4, 8009d4c <__pow5mult+0x48>
 8009d2c:	2010      	movs	r0, #16
 8009d2e:	f7fc f935 	bl	8005f9c <malloc>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6270      	str	r0, [r6, #36]	; 0x24
 8009d36:	b928      	cbnz	r0, 8009d44 <__pow5mult+0x40>
 8009d38:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <__pow5mult+0xac>)
 8009d3a:	481e      	ldr	r0, [pc, #120]	; (8009db4 <__pow5mult+0xb0>)
 8009d3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d40:	f7fc f8ca 	bl	8005ed8 <__assert_func>
 8009d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d48:	6004      	str	r4, [r0, #0]
 8009d4a:	60c4      	str	r4, [r0, #12]
 8009d4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d54:	b94c      	cbnz	r4, 8009d6a <__pow5mult+0x66>
 8009d56:	f240 2171 	movw	r1, #625	; 0x271
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff ff12 	bl	8009b84 <__i2b>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d66:	4604      	mov	r4, r0
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	f04f 0900 	mov.w	r9, #0
 8009d6e:	07eb      	lsls	r3, r5, #31
 8009d70:	d50a      	bpl.n	8009d88 <__pow5mult+0x84>
 8009d72:	4639      	mov	r1, r7
 8009d74:	4622      	mov	r2, r4
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ff1a 	bl	8009bb0 <__multiply>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fdfd 	bl	8009980 <_Bfree>
 8009d86:	4647      	mov	r7, r8
 8009d88:	106d      	asrs	r5, r5, #1
 8009d8a:	d00b      	beq.n	8009da4 <__pow5mult+0xa0>
 8009d8c:	6820      	ldr	r0, [r4, #0]
 8009d8e:	b938      	cbnz	r0, 8009da0 <__pow5mult+0x9c>
 8009d90:	4622      	mov	r2, r4
 8009d92:	4621      	mov	r1, r4
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff ff0b 	bl	8009bb0 <__multiply>
 8009d9a:	6020      	str	r0, [r4, #0]
 8009d9c:	f8c0 9000 	str.w	r9, [r0]
 8009da0:	4604      	mov	r4, r0
 8009da2:	e7e4      	b.n	8009d6e <__pow5mult+0x6a>
 8009da4:	4638      	mov	r0, r7
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	bf00      	nop
 8009dac:	0800c0d8 	.word	0x0800c0d8
 8009db0:	0800bcc0 	.word	0x0800bcc0
 8009db4:	0800bf8c 	.word	0x0800bf8c

08009db8 <__lshift>:
 8009db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	6849      	ldr	r1, [r1, #4]
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	4607      	mov	r7, r0
 8009dca:	4691      	mov	r9, r2
 8009dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dd0:	f108 0601 	add.w	r6, r8, #1
 8009dd4:	42b3      	cmp	r3, r6
 8009dd6:	db0b      	blt.n	8009df0 <__lshift+0x38>
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff fd91 	bl	8009900 <_Balloc>
 8009dde:	4605      	mov	r5, r0
 8009de0:	b948      	cbnz	r0, 8009df6 <__lshift+0x3e>
 8009de2:	4602      	mov	r2, r0
 8009de4:	4b2a      	ldr	r3, [pc, #168]	; (8009e90 <__lshift+0xd8>)
 8009de6:	482b      	ldr	r0, [pc, #172]	; (8009e94 <__lshift+0xdc>)
 8009de8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009dec:	f7fc f874 	bl	8005ed8 <__assert_func>
 8009df0:	3101      	adds	r1, #1
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	e7ee      	b.n	8009dd4 <__lshift+0x1c>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f100 0114 	add.w	r1, r0, #20
 8009dfc:	f100 0210 	add.w	r2, r0, #16
 8009e00:	4618      	mov	r0, r3
 8009e02:	4553      	cmp	r3, sl
 8009e04:	db37      	blt.n	8009e76 <__lshift+0xbe>
 8009e06:	6920      	ldr	r0, [r4, #16]
 8009e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e0c:	f104 0314 	add.w	r3, r4, #20
 8009e10:	f019 091f 	ands.w	r9, r9, #31
 8009e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e1c:	d02f      	beq.n	8009e7e <__lshift+0xc6>
 8009e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e22:	468a      	mov	sl, r1
 8009e24:	f04f 0c00 	mov.w	ip, #0
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	fa02 f209 	lsl.w	r2, r2, r9
 8009e2e:	ea42 020c 	orr.w	r2, r2, ip
 8009e32:	f84a 2b04 	str.w	r2, [sl], #4
 8009e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3a:	4298      	cmp	r0, r3
 8009e3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e40:	d8f2      	bhi.n	8009e28 <__lshift+0x70>
 8009e42:	1b03      	subs	r3, r0, r4
 8009e44:	3b15      	subs	r3, #21
 8009e46:	f023 0303 	bic.w	r3, r3, #3
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	f104 0215 	add.w	r2, r4, #21
 8009e50:	4290      	cmp	r0, r2
 8009e52:	bf38      	it	cc
 8009e54:	2304      	movcc	r3, #4
 8009e56:	f841 c003 	str.w	ip, [r1, r3]
 8009e5a:	f1bc 0f00 	cmp.w	ip, #0
 8009e5e:	d001      	beq.n	8009e64 <__lshift+0xac>
 8009e60:	f108 0602 	add.w	r6, r8, #2
 8009e64:	3e01      	subs	r6, #1
 8009e66:	4638      	mov	r0, r7
 8009e68:	612e      	str	r6, [r5, #16]
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	f7ff fd88 	bl	8009980 <_Bfree>
 8009e70:	4628      	mov	r0, r5
 8009e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e76:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	e7c1      	b.n	8009e02 <__lshift+0x4a>
 8009e7e:	3904      	subs	r1, #4
 8009e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e84:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e88:	4298      	cmp	r0, r3
 8009e8a:	d8f9      	bhi.n	8009e80 <__lshift+0xc8>
 8009e8c:	e7ea      	b.n	8009e64 <__lshift+0xac>
 8009e8e:	bf00      	nop
 8009e90:	0800be9d 	.word	0x0800be9d
 8009e94:	0800bf8c 	.word	0x0800bf8c

08009e98 <__mcmp>:
 8009e98:	b530      	push	{r4, r5, lr}
 8009e9a:	6902      	ldr	r2, [r0, #16]
 8009e9c:	690c      	ldr	r4, [r1, #16]
 8009e9e:	1b12      	subs	r2, r2, r4
 8009ea0:	d10e      	bne.n	8009ec0 <__mcmp+0x28>
 8009ea2:	f100 0314 	add.w	r3, r0, #20
 8009ea6:	3114      	adds	r1, #20
 8009ea8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009eac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009eb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009eb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009eb8:	42a5      	cmp	r5, r4
 8009eba:	d003      	beq.n	8009ec4 <__mcmp+0x2c>
 8009ebc:	d305      	bcc.n	8009eca <__mcmp+0x32>
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	bd30      	pop	{r4, r5, pc}
 8009ec4:	4283      	cmp	r3, r0
 8009ec6:	d3f3      	bcc.n	8009eb0 <__mcmp+0x18>
 8009ec8:	e7fa      	b.n	8009ec0 <__mcmp+0x28>
 8009eca:	f04f 32ff 	mov.w	r2, #4294967295
 8009ece:	e7f7      	b.n	8009ec0 <__mcmp+0x28>

08009ed0 <__mdiff>:
 8009ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4620      	mov	r0, r4
 8009edc:	4690      	mov	r8, r2
 8009ede:	f7ff ffdb 	bl	8009e98 <__mcmp>
 8009ee2:	1e05      	subs	r5, r0, #0
 8009ee4:	d110      	bne.n	8009f08 <__mdiff+0x38>
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff fd09 	bl	8009900 <_Balloc>
 8009eee:	b930      	cbnz	r0, 8009efe <__mdiff+0x2e>
 8009ef0:	4b3a      	ldr	r3, [pc, #232]	; (8009fdc <__mdiff+0x10c>)
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f240 2132 	movw	r1, #562	; 0x232
 8009ef8:	4839      	ldr	r0, [pc, #228]	; (8009fe0 <__mdiff+0x110>)
 8009efa:	f7fb ffed 	bl	8005ed8 <__assert_func>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	bfa4      	itt	ge
 8009f0a:	4643      	movge	r3, r8
 8009f0c:	46a0      	movge	r8, r4
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f14:	bfa6      	itte	ge
 8009f16:	461c      	movge	r4, r3
 8009f18:	2500      	movge	r5, #0
 8009f1a:	2501      	movlt	r5, #1
 8009f1c:	f7ff fcf0 	bl	8009900 <_Balloc>
 8009f20:	b920      	cbnz	r0, 8009f2c <__mdiff+0x5c>
 8009f22:	4b2e      	ldr	r3, [pc, #184]	; (8009fdc <__mdiff+0x10c>)
 8009f24:	4602      	mov	r2, r0
 8009f26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f2a:	e7e5      	b.n	8009ef8 <__mdiff+0x28>
 8009f2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f30:	6926      	ldr	r6, [r4, #16]
 8009f32:	60c5      	str	r5, [r0, #12]
 8009f34:	f104 0914 	add.w	r9, r4, #20
 8009f38:	f108 0514 	add.w	r5, r8, #20
 8009f3c:	f100 0e14 	add.w	lr, r0, #20
 8009f40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f48:	f108 0210 	add.w	r2, r8, #16
 8009f4c:	46f2      	mov	sl, lr
 8009f4e:	2100      	movs	r1, #0
 8009f50:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f58:	fa1f f883 	uxth.w	r8, r3
 8009f5c:	fa11 f18b 	uxtah	r1, r1, fp
 8009f60:	0c1b      	lsrs	r3, r3, #16
 8009f62:	eba1 0808 	sub.w	r8, r1, r8
 8009f66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f6e:	fa1f f888 	uxth.w	r8, r8
 8009f72:	1419      	asrs	r1, r3, #16
 8009f74:	454e      	cmp	r6, r9
 8009f76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f7a:	f84a 3b04 	str.w	r3, [sl], #4
 8009f7e:	d8e7      	bhi.n	8009f50 <__mdiff+0x80>
 8009f80:	1b33      	subs	r3, r6, r4
 8009f82:	3b15      	subs	r3, #21
 8009f84:	f023 0303 	bic.w	r3, r3, #3
 8009f88:	3304      	adds	r3, #4
 8009f8a:	3415      	adds	r4, #21
 8009f8c:	42a6      	cmp	r6, r4
 8009f8e:	bf38      	it	cc
 8009f90:	2304      	movcc	r3, #4
 8009f92:	441d      	add	r5, r3
 8009f94:	4473      	add	r3, lr
 8009f96:	469e      	mov	lr, r3
 8009f98:	462e      	mov	r6, r5
 8009f9a:	4566      	cmp	r6, ip
 8009f9c:	d30e      	bcc.n	8009fbc <__mdiff+0xec>
 8009f9e:	f10c 0203 	add.w	r2, ip, #3
 8009fa2:	1b52      	subs	r2, r2, r5
 8009fa4:	f022 0203 	bic.w	r2, r2, #3
 8009fa8:	3d03      	subs	r5, #3
 8009faa:	45ac      	cmp	ip, r5
 8009fac:	bf38      	it	cc
 8009fae:	2200      	movcc	r2, #0
 8009fb0:	441a      	add	r2, r3
 8009fb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fb6:	b17b      	cbz	r3, 8009fd8 <__mdiff+0x108>
 8009fb8:	6107      	str	r7, [r0, #16]
 8009fba:	e7a3      	b.n	8009f04 <__mdiff+0x34>
 8009fbc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fc0:	fa11 f288 	uxtah	r2, r1, r8
 8009fc4:	1414      	asrs	r4, r2, #16
 8009fc6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fca:	b292      	uxth	r2, r2
 8009fcc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fd0:	f84e 2b04 	str.w	r2, [lr], #4
 8009fd4:	1421      	asrs	r1, r4, #16
 8009fd6:	e7e0      	b.n	8009f9a <__mdiff+0xca>
 8009fd8:	3f01      	subs	r7, #1
 8009fda:	e7ea      	b.n	8009fb2 <__mdiff+0xe2>
 8009fdc:	0800be9d 	.word	0x0800be9d
 8009fe0:	0800bf8c 	.word	0x0800bf8c

08009fe4 <__ulp>:
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	ed8d 0b00 	vstr	d0, [sp]
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	4912      	ldr	r1, [pc, #72]	; (800a038 <__ulp+0x54>)
 8009fee:	4019      	ands	r1, r3
 8009ff0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	dd05      	ble.n	800a004 <__ulp+0x20>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	ec43 2b10 	vmov	d0, r2, r3
 800a000:	b002      	add	sp, #8
 800a002:	4770      	bx	lr
 800a004:	4249      	negs	r1, r1
 800a006:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a00a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a00e:	f04f 0200 	mov.w	r2, #0
 800a012:	f04f 0300 	mov.w	r3, #0
 800a016:	da04      	bge.n	800a022 <__ulp+0x3e>
 800a018:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a01c:	fa41 f300 	asr.w	r3, r1, r0
 800a020:	e7ec      	b.n	8009ffc <__ulp+0x18>
 800a022:	f1a0 0114 	sub.w	r1, r0, #20
 800a026:	291e      	cmp	r1, #30
 800a028:	bfda      	itte	le
 800a02a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a02e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a032:	2101      	movgt	r1, #1
 800a034:	460a      	mov	r2, r1
 800a036:	e7e1      	b.n	8009ffc <__ulp+0x18>
 800a038:	7ff00000 	.word	0x7ff00000

0800a03c <__b2d>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	6905      	ldr	r5, [r0, #16]
 800a040:	f100 0714 	add.w	r7, r0, #20
 800a044:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a048:	1f2e      	subs	r6, r5, #4
 800a04a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a04e:	4620      	mov	r0, r4
 800a050:	f7ff fd48 	bl	8009ae4 <__hi0bits>
 800a054:	f1c0 0320 	rsb	r3, r0, #32
 800a058:	280a      	cmp	r0, #10
 800a05a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a0d8 <__b2d+0x9c>
 800a05e:	600b      	str	r3, [r1, #0]
 800a060:	dc14      	bgt.n	800a08c <__b2d+0x50>
 800a062:	f1c0 0e0b 	rsb	lr, r0, #11
 800a066:	fa24 f10e 	lsr.w	r1, r4, lr
 800a06a:	42b7      	cmp	r7, r6
 800a06c:	ea41 030c 	orr.w	r3, r1, ip
 800a070:	bf34      	ite	cc
 800a072:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a076:	2100      	movcs	r1, #0
 800a078:	3015      	adds	r0, #21
 800a07a:	fa04 f000 	lsl.w	r0, r4, r0
 800a07e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a082:	ea40 0201 	orr.w	r2, r0, r1
 800a086:	ec43 2b10 	vmov	d0, r2, r3
 800a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a08c:	42b7      	cmp	r7, r6
 800a08e:	bf3a      	itte	cc
 800a090:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a094:	f1a5 0608 	subcc.w	r6, r5, #8
 800a098:	2100      	movcs	r1, #0
 800a09a:	380b      	subs	r0, #11
 800a09c:	d017      	beq.n	800a0ce <__b2d+0x92>
 800a09e:	f1c0 0c20 	rsb	ip, r0, #32
 800a0a2:	fa04 f500 	lsl.w	r5, r4, r0
 800a0a6:	42be      	cmp	r6, r7
 800a0a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a0ac:	ea45 0504 	orr.w	r5, r5, r4
 800a0b0:	bf8c      	ite	hi
 800a0b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a0b6:	2400      	movls	r4, #0
 800a0b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a0bc:	fa01 f000 	lsl.w	r0, r1, r0
 800a0c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a0c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0c8:	ea40 0204 	orr.w	r2, r0, r4
 800a0cc:	e7db      	b.n	800a086 <__b2d+0x4a>
 800a0ce:	ea44 030c 	orr.w	r3, r4, ip
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	e7d7      	b.n	800a086 <__b2d+0x4a>
 800a0d6:	bf00      	nop
 800a0d8:	3ff00000 	.word	0x3ff00000

0800a0dc <__d2b>:
 800a0dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	4689      	mov	r9, r1
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	ec57 6b10 	vmov	r6, r7, d0
 800a0e8:	4690      	mov	r8, r2
 800a0ea:	f7ff fc09 	bl	8009900 <_Balloc>
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	b930      	cbnz	r0, 800a100 <__d2b+0x24>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	4b25      	ldr	r3, [pc, #148]	; (800a18c <__d2b+0xb0>)
 800a0f6:	4826      	ldr	r0, [pc, #152]	; (800a190 <__d2b+0xb4>)
 800a0f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a0fc:	f7fb feec 	bl	8005ed8 <__assert_func>
 800a100:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a104:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a108:	bb35      	cbnz	r5, 800a158 <__d2b+0x7c>
 800a10a:	2e00      	cmp	r6, #0
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	d028      	beq.n	800a162 <__d2b+0x86>
 800a110:	4668      	mov	r0, sp
 800a112:	9600      	str	r6, [sp, #0]
 800a114:	f7ff fd06 	bl	8009b24 <__lo0bits>
 800a118:	9900      	ldr	r1, [sp, #0]
 800a11a:	b300      	cbz	r0, 800a15e <__d2b+0x82>
 800a11c:	9a01      	ldr	r2, [sp, #4]
 800a11e:	f1c0 0320 	rsb	r3, r0, #32
 800a122:	fa02 f303 	lsl.w	r3, r2, r3
 800a126:	430b      	orrs	r3, r1
 800a128:	40c2      	lsrs	r2, r0
 800a12a:	6163      	str	r3, [r4, #20]
 800a12c:	9201      	str	r2, [sp, #4]
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	61a3      	str	r3, [r4, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	bf14      	ite	ne
 800a136:	2202      	movne	r2, #2
 800a138:	2201      	moveq	r2, #1
 800a13a:	6122      	str	r2, [r4, #16]
 800a13c:	b1d5      	cbz	r5, 800a174 <__d2b+0x98>
 800a13e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a142:	4405      	add	r5, r0
 800a144:	f8c9 5000 	str.w	r5, [r9]
 800a148:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a14c:	f8c8 0000 	str.w	r0, [r8]
 800a150:	4620      	mov	r0, r4
 800a152:	b003      	add	sp, #12
 800a154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a15c:	e7d5      	b.n	800a10a <__d2b+0x2e>
 800a15e:	6161      	str	r1, [r4, #20]
 800a160:	e7e5      	b.n	800a12e <__d2b+0x52>
 800a162:	a801      	add	r0, sp, #4
 800a164:	f7ff fcde 	bl	8009b24 <__lo0bits>
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	6163      	str	r3, [r4, #20]
 800a16c:	2201      	movs	r2, #1
 800a16e:	6122      	str	r2, [r4, #16]
 800a170:	3020      	adds	r0, #32
 800a172:	e7e3      	b.n	800a13c <__d2b+0x60>
 800a174:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a178:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a17c:	f8c9 0000 	str.w	r0, [r9]
 800a180:	6918      	ldr	r0, [r3, #16]
 800a182:	f7ff fcaf 	bl	8009ae4 <__hi0bits>
 800a186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a18a:	e7df      	b.n	800a14c <__d2b+0x70>
 800a18c:	0800be9d 	.word	0x0800be9d
 800a190:	0800bf8c 	.word	0x0800bf8c

0800a194 <__ratio>:
 800a194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	4688      	mov	r8, r1
 800a19a:	4669      	mov	r1, sp
 800a19c:	4681      	mov	r9, r0
 800a19e:	f7ff ff4d 	bl	800a03c <__b2d>
 800a1a2:	a901      	add	r1, sp, #4
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	ec55 4b10 	vmov	r4, r5, d0
 800a1aa:	f7ff ff47 	bl	800a03c <__b2d>
 800a1ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1b6:	eba3 0c02 	sub.w	ip, r3, r2
 800a1ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1be:	1a9b      	subs	r3, r3, r2
 800a1c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a1c4:	ec51 0b10 	vmov	r0, r1, d0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfd6      	itet	le
 800a1cc:	460a      	movle	r2, r1
 800a1ce:	462a      	movgt	r2, r5
 800a1d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1d4:	468b      	mov	fp, r1
 800a1d6:	462f      	mov	r7, r5
 800a1d8:	bfd4      	ite	le
 800a1da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	ee10 2a10 	vmov	r2, s0
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fb56 	bl	800089c <__aeabi_ddiv>
 800a1f0:	ec41 0b10 	vmov	d0, r0, r1
 800a1f4:	b003      	add	sp, #12
 800a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1fa <__copybits>:
 800a1fa:	3901      	subs	r1, #1
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	1149      	asrs	r1, r1, #5
 800a200:	6914      	ldr	r4, [r2, #16]
 800a202:	3101      	adds	r1, #1
 800a204:	f102 0314 	add.w	r3, r2, #20
 800a208:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a20c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a210:	1f05      	subs	r5, r0, #4
 800a212:	42a3      	cmp	r3, r4
 800a214:	d30c      	bcc.n	800a230 <__copybits+0x36>
 800a216:	1aa3      	subs	r3, r4, r2
 800a218:	3b11      	subs	r3, #17
 800a21a:	f023 0303 	bic.w	r3, r3, #3
 800a21e:	3211      	adds	r2, #17
 800a220:	42a2      	cmp	r2, r4
 800a222:	bf88      	it	hi
 800a224:	2300      	movhi	r3, #0
 800a226:	4418      	add	r0, r3
 800a228:	2300      	movs	r3, #0
 800a22a:	4288      	cmp	r0, r1
 800a22c:	d305      	bcc.n	800a23a <__copybits+0x40>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	f853 6b04 	ldr.w	r6, [r3], #4
 800a234:	f845 6f04 	str.w	r6, [r5, #4]!
 800a238:	e7eb      	b.n	800a212 <__copybits+0x18>
 800a23a:	f840 3b04 	str.w	r3, [r0], #4
 800a23e:	e7f4      	b.n	800a22a <__copybits+0x30>

0800a240 <__any_on>:
 800a240:	f100 0214 	add.w	r2, r0, #20
 800a244:	6900      	ldr	r0, [r0, #16]
 800a246:	114b      	asrs	r3, r1, #5
 800a248:	4298      	cmp	r0, r3
 800a24a:	b510      	push	{r4, lr}
 800a24c:	db11      	blt.n	800a272 <__any_on+0x32>
 800a24e:	dd0a      	ble.n	800a266 <__any_on+0x26>
 800a250:	f011 011f 	ands.w	r1, r1, #31
 800a254:	d007      	beq.n	800a266 <__any_on+0x26>
 800a256:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a25a:	fa24 f001 	lsr.w	r0, r4, r1
 800a25e:	fa00 f101 	lsl.w	r1, r0, r1
 800a262:	428c      	cmp	r4, r1
 800a264:	d10b      	bne.n	800a27e <__any_on+0x3e>
 800a266:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d803      	bhi.n	800a276 <__any_on+0x36>
 800a26e:	2000      	movs	r0, #0
 800a270:	bd10      	pop	{r4, pc}
 800a272:	4603      	mov	r3, r0
 800a274:	e7f7      	b.n	800a266 <__any_on+0x26>
 800a276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a27a:	2900      	cmp	r1, #0
 800a27c:	d0f5      	beq.n	800a26a <__any_on+0x2a>
 800a27e:	2001      	movs	r0, #1
 800a280:	e7f6      	b.n	800a270 <__any_on+0x30>

0800a282 <_calloc_r>:
 800a282:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a284:	fba1 2402 	umull	r2, r4, r1, r2
 800a288:	b94c      	cbnz	r4, 800a29e <_calloc_r+0x1c>
 800a28a:	4611      	mov	r1, r2
 800a28c:	9201      	str	r2, [sp, #4]
 800a28e:	f7fb ff0f 	bl	80060b0 <_malloc_r>
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	4605      	mov	r5, r0
 800a296:	b930      	cbnz	r0, 800a2a6 <_calloc_r+0x24>
 800a298:	4628      	mov	r0, r5
 800a29a:	b003      	add	sp, #12
 800a29c:	bd30      	pop	{r4, r5, pc}
 800a29e:	220c      	movs	r2, #12
 800a2a0:	6002      	str	r2, [r0, #0]
 800a2a2:	2500      	movs	r5, #0
 800a2a4:	e7f8      	b.n	800a298 <_calloc_r+0x16>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	f7fb fe8e 	bl	8005fc8 <memset>
 800a2ac:	e7f4      	b.n	800a298 <_calloc_r+0x16>

0800a2ae <_realloc_r>:
 800a2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	460e      	mov	r6, r1
 800a2b8:	b921      	cbnz	r1, 800a2c4 <_realloc_r+0x16>
 800a2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	4611      	mov	r1, r2
 800a2c0:	f7fb bef6 	b.w	80060b0 <_malloc_r>
 800a2c4:	b92a      	cbnz	r2, 800a2d2 <_realloc_r+0x24>
 800a2c6:	f7fb fe87 	bl	8005fd8 <_free_r>
 800a2ca:	4625      	mov	r5, r4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d2:	f000 fa7f 	bl	800a7d4 <_malloc_usable_size_r>
 800a2d6:	4284      	cmp	r4, r0
 800a2d8:	4607      	mov	r7, r0
 800a2da:	d802      	bhi.n	800a2e2 <_realloc_r+0x34>
 800a2dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e0:	d812      	bhi.n	800a308 <_realloc_r+0x5a>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	f7fb fee3 	bl	80060b0 <_malloc_r>
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d0ed      	beq.n	800a2cc <_realloc_r+0x1e>
 800a2f0:	42bc      	cmp	r4, r7
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	bf28      	it	cs
 800a2f8:	463a      	movcs	r2, r7
 800a2fa:	f7fb fe57 	bl	8005fac <memcpy>
 800a2fe:	4631      	mov	r1, r6
 800a300:	4640      	mov	r0, r8
 800a302:	f7fb fe69 	bl	8005fd8 <_free_r>
 800a306:	e7e1      	b.n	800a2cc <_realloc_r+0x1e>
 800a308:	4635      	mov	r5, r6
 800a30a:	e7df      	b.n	800a2cc <_realloc_r+0x1e>

0800a30c <__ssputs_r>:
 800a30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a310:	688e      	ldr	r6, [r1, #8]
 800a312:	429e      	cmp	r6, r3
 800a314:	4682      	mov	sl, r0
 800a316:	460c      	mov	r4, r1
 800a318:	4690      	mov	r8, r2
 800a31a:	461f      	mov	r7, r3
 800a31c:	d838      	bhi.n	800a390 <__ssputs_r+0x84>
 800a31e:	898a      	ldrh	r2, [r1, #12]
 800a320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a324:	d032      	beq.n	800a38c <__ssputs_r+0x80>
 800a326:	6825      	ldr	r5, [r4, #0]
 800a328:	6909      	ldr	r1, [r1, #16]
 800a32a:	eba5 0901 	sub.w	r9, r5, r1
 800a32e:	6965      	ldr	r5, [r4, #20]
 800a330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a338:	3301      	adds	r3, #1
 800a33a:	444b      	add	r3, r9
 800a33c:	106d      	asrs	r5, r5, #1
 800a33e:	429d      	cmp	r5, r3
 800a340:	bf38      	it	cc
 800a342:	461d      	movcc	r5, r3
 800a344:	0553      	lsls	r3, r2, #21
 800a346:	d531      	bpl.n	800a3ac <__ssputs_r+0xa0>
 800a348:	4629      	mov	r1, r5
 800a34a:	f7fb feb1 	bl	80060b0 <_malloc_r>
 800a34e:	4606      	mov	r6, r0
 800a350:	b950      	cbnz	r0, 800a368 <__ssputs_r+0x5c>
 800a352:	230c      	movs	r3, #12
 800a354:	f8ca 3000 	str.w	r3, [sl]
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a368:	6921      	ldr	r1, [r4, #16]
 800a36a:	464a      	mov	r2, r9
 800a36c:	f7fb fe1e 	bl	8005fac <memcpy>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	6126      	str	r6, [r4, #16]
 800a37e:	6165      	str	r5, [r4, #20]
 800a380:	444e      	add	r6, r9
 800a382:	eba5 0509 	sub.w	r5, r5, r9
 800a386:	6026      	str	r6, [r4, #0]
 800a388:	60a5      	str	r5, [r4, #8]
 800a38a:	463e      	mov	r6, r7
 800a38c:	42be      	cmp	r6, r7
 800a38e:	d900      	bls.n	800a392 <__ssputs_r+0x86>
 800a390:	463e      	mov	r6, r7
 800a392:	6820      	ldr	r0, [r4, #0]
 800a394:	4632      	mov	r2, r6
 800a396:	4641      	mov	r1, r8
 800a398:	f7ff fa8c 	bl	80098b4 <memmove>
 800a39c:	68a3      	ldr	r3, [r4, #8]
 800a39e:	1b9b      	subs	r3, r3, r6
 800a3a0:	60a3      	str	r3, [r4, #8]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	4433      	add	r3, r6
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	e7db      	b.n	800a364 <__ssputs_r+0x58>
 800a3ac:	462a      	mov	r2, r5
 800a3ae:	f7ff ff7e 	bl	800a2ae <_realloc_r>
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d1e1      	bne.n	800a37c <__ssputs_r+0x70>
 800a3b8:	6921      	ldr	r1, [r4, #16]
 800a3ba:	4650      	mov	r0, sl
 800a3bc:	f7fb fe0c 	bl	8005fd8 <_free_r>
 800a3c0:	e7c7      	b.n	800a352 <__ssputs_r+0x46>
	...

0800a3c4 <_svfiprintf_r>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	4698      	mov	r8, r3
 800a3ca:	898b      	ldrh	r3, [r1, #12]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	b09d      	sub	sp, #116	; 0x74
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	d50e      	bpl.n	800a3f6 <_svfiprintf_r+0x32>
 800a3d8:	690b      	ldr	r3, [r1, #16]
 800a3da:	b963      	cbnz	r3, 800a3f6 <_svfiprintf_r+0x32>
 800a3dc:	2140      	movs	r1, #64	; 0x40
 800a3de:	f7fb fe67 	bl	80060b0 <_malloc_r>
 800a3e2:	6028      	str	r0, [r5, #0]
 800a3e4:	6128      	str	r0, [r5, #16]
 800a3e6:	b920      	cbnz	r0, 800a3f2 <_svfiprintf_r+0x2e>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	e0d1      	b.n	800a596 <_svfiprintf_r+0x1d2>
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	616b      	str	r3, [r5, #20]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fa:	2320      	movs	r3, #32
 800a3fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a400:	f8cd 800c 	str.w	r8, [sp, #12]
 800a404:	2330      	movs	r3, #48	; 0x30
 800a406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5b0 <_svfiprintf_r+0x1ec>
 800a40a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a40e:	f04f 0901 	mov.w	r9, #1
 800a412:	4623      	mov	r3, r4
 800a414:	469a      	mov	sl, r3
 800a416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41a:	b10a      	cbz	r2, 800a420 <_svfiprintf_r+0x5c>
 800a41c:	2a25      	cmp	r2, #37	; 0x25
 800a41e:	d1f9      	bne.n	800a414 <_svfiprintf_r+0x50>
 800a420:	ebba 0b04 	subs.w	fp, sl, r4
 800a424:	d00b      	beq.n	800a43e <_svfiprintf_r+0x7a>
 800a426:	465b      	mov	r3, fp
 800a428:	4622      	mov	r2, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ff6d 	bl	800a30c <__ssputs_r>
 800a432:	3001      	adds	r0, #1
 800a434:	f000 80aa 	beq.w	800a58c <_svfiprintf_r+0x1c8>
 800a438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43a:	445a      	add	r2, fp
 800a43c:	9209      	str	r2, [sp, #36]	; 0x24
 800a43e:	f89a 3000 	ldrb.w	r3, [sl]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 80a2 	beq.w	800a58c <_svfiprintf_r+0x1c8>
 800a448:	2300      	movs	r3, #0
 800a44a:	f04f 32ff 	mov.w	r2, #4294967295
 800a44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a452:	f10a 0a01 	add.w	sl, sl, #1
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	9307      	str	r3, [sp, #28]
 800a45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a45e:	931a      	str	r3, [sp, #104]	; 0x68
 800a460:	4654      	mov	r4, sl
 800a462:	2205      	movs	r2, #5
 800a464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a468:	4851      	ldr	r0, [pc, #324]	; (800a5b0 <_svfiprintf_r+0x1ec>)
 800a46a:	f7f5 fee1 	bl	8000230 <memchr>
 800a46e:	9a04      	ldr	r2, [sp, #16]
 800a470:	b9d8      	cbnz	r0, 800a4aa <_svfiprintf_r+0xe6>
 800a472:	06d0      	lsls	r0, r2, #27
 800a474:	bf44      	itt	mi
 800a476:	2320      	movmi	r3, #32
 800a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47c:	0711      	lsls	r1, r2, #28
 800a47e:	bf44      	itt	mi
 800a480:	232b      	movmi	r3, #43	; 0x2b
 800a482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a486:	f89a 3000 	ldrb.w	r3, [sl]
 800a48a:	2b2a      	cmp	r3, #42	; 0x2a
 800a48c:	d015      	beq.n	800a4ba <_svfiprintf_r+0xf6>
 800a48e:	9a07      	ldr	r2, [sp, #28]
 800a490:	4654      	mov	r4, sl
 800a492:	2000      	movs	r0, #0
 800a494:	f04f 0c0a 	mov.w	ip, #10
 800a498:	4621      	mov	r1, r4
 800a49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a49e:	3b30      	subs	r3, #48	; 0x30
 800a4a0:	2b09      	cmp	r3, #9
 800a4a2:	d94e      	bls.n	800a542 <_svfiprintf_r+0x17e>
 800a4a4:	b1b0      	cbz	r0, 800a4d4 <_svfiprintf_r+0x110>
 800a4a6:	9207      	str	r2, [sp, #28]
 800a4a8:	e014      	b.n	800a4d4 <_svfiprintf_r+0x110>
 800a4aa:	eba0 0308 	sub.w	r3, r0, r8
 800a4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	46a2      	mov	sl, r4
 800a4b8:	e7d2      	b.n	800a460 <_svfiprintf_r+0x9c>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	1d19      	adds	r1, r3, #4
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	9103      	str	r1, [sp, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bfbb      	ittet	lt
 800a4c6:	425b      	neglt	r3, r3
 800a4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4cc:	9307      	strge	r3, [sp, #28]
 800a4ce:	9307      	strlt	r3, [sp, #28]
 800a4d0:	bfb8      	it	lt
 800a4d2:	9204      	strlt	r2, [sp, #16]
 800a4d4:	7823      	ldrb	r3, [r4, #0]
 800a4d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d8:	d10c      	bne.n	800a4f4 <_svfiprintf_r+0x130>
 800a4da:	7863      	ldrb	r3, [r4, #1]
 800a4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4de:	d135      	bne.n	800a54c <_svfiprintf_r+0x188>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	9203      	str	r2, [sp, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bfb8      	it	lt
 800a4ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f0:	3402      	adds	r4, #2
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5c0 <_svfiprintf_r+0x1fc>
 800a4f8:	7821      	ldrb	r1, [r4, #0]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	f7f5 fe97 	bl	8000230 <memchr>
 800a502:	b140      	cbz	r0, 800a516 <_svfiprintf_r+0x152>
 800a504:	2340      	movs	r3, #64	; 0x40
 800a506:	eba0 000a 	sub.w	r0, r0, sl
 800a50a:	fa03 f000 	lsl.w	r0, r3, r0
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	4303      	orrs	r3, r0
 800a512:	3401      	adds	r4, #1
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	4826      	ldr	r0, [pc, #152]	; (800a5b4 <_svfiprintf_r+0x1f0>)
 800a51c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a520:	2206      	movs	r2, #6
 800a522:	f7f5 fe85 	bl	8000230 <memchr>
 800a526:	2800      	cmp	r0, #0
 800a528:	d038      	beq.n	800a59c <_svfiprintf_r+0x1d8>
 800a52a:	4b23      	ldr	r3, [pc, #140]	; (800a5b8 <_svfiprintf_r+0x1f4>)
 800a52c:	bb1b      	cbnz	r3, 800a576 <_svfiprintf_r+0x1b2>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	3308      	adds	r3, #8
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	4433      	add	r3, r6
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	e767      	b.n	800a412 <_svfiprintf_r+0x4e>
 800a542:	fb0c 3202 	mla	r2, ip, r2, r3
 800a546:	460c      	mov	r4, r1
 800a548:	2001      	movs	r0, #1
 800a54a:	e7a5      	b.n	800a498 <_svfiprintf_r+0xd4>
 800a54c:	2300      	movs	r3, #0
 800a54e:	3401      	adds	r4, #1
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	4619      	mov	r1, r3
 800a554:	f04f 0c0a 	mov.w	ip, #10
 800a558:	4620      	mov	r0, r4
 800a55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55e:	3a30      	subs	r2, #48	; 0x30
 800a560:	2a09      	cmp	r2, #9
 800a562:	d903      	bls.n	800a56c <_svfiprintf_r+0x1a8>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0c5      	beq.n	800a4f4 <_svfiprintf_r+0x130>
 800a568:	9105      	str	r1, [sp, #20]
 800a56a:	e7c3      	b.n	800a4f4 <_svfiprintf_r+0x130>
 800a56c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a570:	4604      	mov	r4, r0
 800a572:	2301      	movs	r3, #1
 800a574:	e7f0      	b.n	800a558 <_svfiprintf_r+0x194>
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	462a      	mov	r2, r5
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <_svfiprintf_r+0x1f8>)
 800a57e:	a904      	add	r1, sp, #16
 800a580:	4638      	mov	r0, r7
 800a582:	f7fc f803 	bl	800658c <_printf_float>
 800a586:	1c42      	adds	r2, r0, #1
 800a588:	4606      	mov	r6, r0
 800a58a:	d1d6      	bne.n	800a53a <_svfiprintf_r+0x176>
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	f53f af2c 	bmi.w	800a3ec <_svfiprintf_r+0x28>
 800a594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a596:	b01d      	add	sp, #116	; 0x74
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <_svfiprintf_r+0x1f8>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f7fc fa94 	bl	8006ad4 <_printf_i>
 800a5ac:	e7eb      	b.n	800a586 <_svfiprintf_r+0x1c2>
 800a5ae:	bf00      	nop
 800a5b0:	0800bc28 	.word	0x0800bc28
 800a5b4:	0800bc32 	.word	0x0800bc32
 800a5b8:	0800658d 	.word	0x0800658d
 800a5bc:	0800a30d 	.word	0x0800a30d
 800a5c0:	0800bc2e 	.word	0x0800bc2e
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <nan>:
 800a5c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a5d0 <nan+0x8>
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	7ff80000 	.word	0x7ff80000

0800a5d8 <_raise_r>:
 800a5d8:	291f      	cmp	r1, #31
 800a5da:	b538      	push	{r3, r4, r5, lr}
 800a5dc:	4604      	mov	r4, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	d904      	bls.n	800a5ec <_raise_r+0x14>
 800a5e2:	2316      	movs	r3, #22
 800a5e4:	6003      	str	r3, [r0, #0]
 800a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5ee:	b112      	cbz	r2, 800a5f6 <_raise_r+0x1e>
 800a5f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5f4:	b94b      	cbnz	r3, 800a60a <_raise_r+0x32>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 f830 	bl	800a65c <_getpid_r>
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	4601      	mov	r1, r0
 800a600:	4620      	mov	r0, r4
 800a602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a606:	f000 b817 	b.w	800a638 <_kill_r>
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d00a      	beq.n	800a624 <_raise_r+0x4c>
 800a60e:	1c59      	adds	r1, r3, #1
 800a610:	d103      	bne.n	800a61a <_raise_r+0x42>
 800a612:	2316      	movs	r3, #22
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	2001      	movs	r0, #1
 800a618:	e7e7      	b.n	800a5ea <_raise_r+0x12>
 800a61a:	2400      	movs	r4, #0
 800a61c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a620:	4628      	mov	r0, r5
 800a622:	4798      	blx	r3
 800a624:	2000      	movs	r0, #0
 800a626:	e7e0      	b.n	800a5ea <_raise_r+0x12>

0800a628 <raise>:
 800a628:	4b02      	ldr	r3, [pc, #8]	; (800a634 <raise+0xc>)
 800a62a:	4601      	mov	r1, r0
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	f7ff bfd3 	b.w	800a5d8 <_raise_r>
 800a632:	bf00      	nop
 800a634:	20000014 	.word	0x20000014

0800a638 <_kill_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_kill_r+0x20>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f7f8 f8d7 	bl	80027f8 <_kill>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <_kill_r+0x1c>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b103      	cbz	r3, 800a654 <_kill_r+0x1c>
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	bd38      	pop	{r3, r4, r5, pc}
 800a656:	bf00      	nop
 800a658:	20000d00 	.word	0x20000d00

0800a65c <_getpid_r>:
 800a65c:	f7f8 b8ca 	b.w	80027f4 <_getpid>

0800a660 <__sread>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	f000 f8bc 	bl	800a7e4 <_read_r>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	bfab      	itete	ge
 800a670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a672:	89a3      	ldrhlt	r3, [r4, #12]
 800a674:	181b      	addge	r3, r3, r0
 800a676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a67a:	bfac      	ite	ge
 800a67c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a67e:	81a3      	strhlt	r3, [r4, #12]
 800a680:	bd10      	pop	{r4, pc}

0800a682 <__swrite>:
 800a682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a686:	461f      	mov	r7, r3
 800a688:	898b      	ldrh	r3, [r1, #12]
 800a68a:	05db      	lsls	r3, r3, #23
 800a68c:	4605      	mov	r5, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	4616      	mov	r6, r2
 800a692:	d505      	bpl.n	800a6a0 <__swrite+0x1e>
 800a694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a698:	2302      	movs	r3, #2
 800a69a:	2200      	movs	r2, #0
 800a69c:	f000 f888 	bl	800a7b0 <_lseek_r>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b6:	f000 b837 	b.w	800a728 <_write_r>

0800a6ba <__sseek>:
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c2:	f000 f875 	bl	800a7b0 <_lseek_r>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	bf15      	itete	ne
 800a6cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6d6:	81a3      	strheq	r3, [r4, #12]
 800a6d8:	bf18      	it	ne
 800a6da:	81a3      	strhne	r3, [r4, #12]
 800a6dc:	bd10      	pop	{r4, pc}

0800a6de <__sclose>:
 800a6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e2:	f000 b833 	b.w	800a74c <_close_r>

0800a6e6 <strncmp>:
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	b17a      	cbz	r2, 800a70a <strncmp+0x24>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	3901      	subs	r1, #1
 800a6ee:	1884      	adds	r4, r0, r2
 800a6f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a6f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a6f8:	4290      	cmp	r0, r2
 800a6fa:	d101      	bne.n	800a700 <strncmp+0x1a>
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	d101      	bne.n	800a704 <strncmp+0x1e>
 800a700:	1a80      	subs	r0, r0, r2
 800a702:	bd10      	pop	{r4, pc}
 800a704:	2800      	cmp	r0, #0
 800a706:	d1f3      	bne.n	800a6f0 <strncmp+0xa>
 800a708:	e7fa      	b.n	800a700 <strncmp+0x1a>
 800a70a:	4610      	mov	r0, r2
 800a70c:	e7f9      	b.n	800a702 <strncmp+0x1c>

0800a70e <__ascii_wctomb>:
 800a70e:	b149      	cbz	r1, 800a724 <__ascii_wctomb+0x16>
 800a710:	2aff      	cmp	r2, #255	; 0xff
 800a712:	bf85      	ittet	hi
 800a714:	238a      	movhi	r3, #138	; 0x8a
 800a716:	6003      	strhi	r3, [r0, #0]
 800a718:	700a      	strbls	r2, [r1, #0]
 800a71a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a71e:	bf98      	it	ls
 800a720:	2001      	movls	r0, #1
 800a722:	4770      	bx	lr
 800a724:	4608      	mov	r0, r1
 800a726:	4770      	bx	lr

0800a728 <_write_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_write_r+0x20>)
 800a72c:	4604      	mov	r4, r0
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	2200      	movs	r2, #0
 800a734:	602a      	str	r2, [r5, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	f7f8 f87c 	bl	8002834 <_write>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_write_r+0x1e>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_write_r+0x1e>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	20000d00 	.word	0x20000d00

0800a74c <_close_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_close_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f8 f87a 	bl	8002850 <_close>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_close_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_close_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20000d00 	.word	0x20000d00

0800a76c <_fstat_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d07      	ldr	r5, [pc, #28]	; (800a78c <_fstat_r+0x20>)
 800a770:	2300      	movs	r3, #0
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	f7f8 f86d 	bl	8002858 <_fstat>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d102      	bne.n	800a788 <_fstat_r+0x1c>
 800a782:	682b      	ldr	r3, [r5, #0]
 800a784:	b103      	cbz	r3, 800a788 <_fstat_r+0x1c>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	bd38      	pop	{r3, r4, r5, pc}
 800a78a:	bf00      	nop
 800a78c:	20000d00 	.word	0x20000d00

0800a790 <_isatty_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d06      	ldr	r5, [pc, #24]	; (800a7ac <_isatty_r+0x1c>)
 800a794:	2300      	movs	r3, #0
 800a796:	4604      	mov	r4, r0
 800a798:	4608      	mov	r0, r1
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	f7f8 f862 	bl	8002864 <_isatty>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_isatty_r+0x1a>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_isatty_r+0x1a>
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20000d00 	.word	0x20000d00

0800a7b0 <_lseek_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d07      	ldr	r5, [pc, #28]	; (800a7d0 <_lseek_r+0x20>)
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	4608      	mov	r0, r1
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	602a      	str	r2, [r5, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f7f8 f852 	bl	8002868 <_lseek>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_lseek_r+0x1e>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_lseek_r+0x1e>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	20000d00 	.word	0x20000d00

0800a7d4 <_malloc_usable_size_r>:
 800a7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7d8:	1f18      	subs	r0, r3, #4
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	bfbc      	itt	lt
 800a7de:	580b      	ldrlt	r3, [r1, r0]
 800a7e0:	18c0      	addlt	r0, r0, r3
 800a7e2:	4770      	bx	lr

0800a7e4 <_read_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	; (800a804 <_read_r+0x20>)
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7f8 f810 	bl	8002818 <_read>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_read_r+0x1e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_read_r+0x1e>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20000d00 	.word	0x20000d00

0800a808 <cos>:
 800a808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a80a:	ec53 2b10 	vmov	r2, r3, d0
 800a80e:	4826      	ldr	r0, [pc, #152]	; (800a8a8 <cos+0xa0>)
 800a810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a814:	4281      	cmp	r1, r0
 800a816:	dc06      	bgt.n	800a826 <cos+0x1e>
 800a818:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a8a0 <cos+0x98>
 800a81c:	b005      	add	sp, #20
 800a81e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a822:	f000 ba51 	b.w	800acc8 <__kernel_cos>
 800a826:	4821      	ldr	r0, [pc, #132]	; (800a8ac <cos+0xa4>)
 800a828:	4281      	cmp	r1, r0
 800a82a:	dd09      	ble.n	800a840 <cos+0x38>
 800a82c:	ee10 0a10 	vmov	r0, s0
 800a830:	4619      	mov	r1, r3
 800a832:	f7f5 fd51 	bl	80002d8 <__aeabi_dsub>
 800a836:	ec41 0b10 	vmov	d0, r0, r1
 800a83a:	b005      	add	sp, #20
 800a83c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a840:	4668      	mov	r0, sp
 800a842:	f000 f835 	bl	800a8b0 <__ieee754_rem_pio2>
 800a846:	f000 0003 	and.w	r0, r0, #3
 800a84a:	2801      	cmp	r0, #1
 800a84c:	d00b      	beq.n	800a866 <cos+0x5e>
 800a84e:	2802      	cmp	r0, #2
 800a850:	d016      	beq.n	800a880 <cos+0x78>
 800a852:	b9e0      	cbnz	r0, 800a88e <cos+0x86>
 800a854:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a858:	ed9d 0b00 	vldr	d0, [sp]
 800a85c:	f000 fa34 	bl	800acc8 <__kernel_cos>
 800a860:	ec51 0b10 	vmov	r0, r1, d0
 800a864:	e7e7      	b.n	800a836 <cos+0x2e>
 800a866:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a86a:	ed9d 0b00 	vldr	d0, [sp]
 800a86e:	f000 fe43 	bl	800b4f8 <__kernel_sin>
 800a872:	ec53 2b10 	vmov	r2, r3, d0
 800a876:	ee10 0a10 	vmov	r0, s0
 800a87a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a87e:	e7da      	b.n	800a836 <cos+0x2e>
 800a880:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a884:	ed9d 0b00 	vldr	d0, [sp]
 800a888:	f000 fa1e 	bl	800acc8 <__kernel_cos>
 800a88c:	e7f1      	b.n	800a872 <cos+0x6a>
 800a88e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a892:	ed9d 0b00 	vldr	d0, [sp]
 800a896:	2001      	movs	r0, #1
 800a898:	f000 fe2e 	bl	800b4f8 <__kernel_sin>
 800a89c:	e7e0      	b.n	800a860 <cos+0x58>
 800a89e:	bf00      	nop
	...
 800a8a8:	3fe921fb 	.word	0x3fe921fb
 800a8ac:	7fefffff 	.word	0x7fefffff

0800a8b0 <__ieee754_rem_pio2>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ed2d 8b02 	vpush	{d8}
 800a8b8:	ec55 4b10 	vmov	r4, r5, d0
 800a8bc:	4bca      	ldr	r3, [pc, #808]	; (800abe8 <__ieee754_rem_pio2+0x338>)
 800a8be:	b08b      	sub	sp, #44	; 0x2c
 800a8c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a8c4:	4598      	cmp	r8, r3
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	9502      	str	r5, [sp, #8]
 800a8ca:	dc08      	bgt.n	800a8de <__ieee754_rem_pio2+0x2e>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	ed80 0b00 	vstr	d0, [r0]
 800a8d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8d8:	f04f 0b00 	mov.w	fp, #0
 800a8dc:	e028      	b.n	800a930 <__ieee754_rem_pio2+0x80>
 800a8de:	4bc3      	ldr	r3, [pc, #780]	; (800abec <__ieee754_rem_pio2+0x33c>)
 800a8e0:	4598      	cmp	r8, r3
 800a8e2:	dc78      	bgt.n	800a9d6 <__ieee754_rem_pio2+0x126>
 800a8e4:	9b02      	ldr	r3, [sp, #8]
 800a8e6:	4ec2      	ldr	r6, [pc, #776]	; (800abf0 <__ieee754_rem_pio2+0x340>)
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	ee10 0a10 	vmov	r0, s0
 800a8ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x300>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	dd39      	ble.n	800a96c <__ieee754_rem_pio2+0xbc>
 800a8f8:	f7f5 fcee 	bl	80002d8 <__aeabi_dsub>
 800a8fc:	45b0      	cmp	r8, r6
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	d01b      	beq.n	800a93c <__ieee754_rem_pio2+0x8c>
 800a904:	a3ac      	add	r3, pc, #688	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x308>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f7f5 fce5 	bl	80002d8 <__aeabi_dsub>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9ca 2300 	strd	r2, r3, [sl]
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f5 fcdd 	bl	80002d8 <__aeabi_dsub>
 800a91e:	a3a6      	add	r3, pc, #664	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x308>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fcd8 	bl	80002d8 <__aeabi_dsub>
 800a928:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a92c:	f04f 0b01 	mov.w	fp, #1
 800a930:	4658      	mov	r0, fp
 800a932:	b00b      	add	sp, #44	; 0x2c
 800a934:	ecbd 8b02 	vpop	{d8}
 800a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	a3a0      	add	r3, pc, #640	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x310>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 fcc9 	bl	80002d8 <__aeabi_dsub>
 800a946:	a3a0      	add	r3, pc, #640	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x318>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	4604      	mov	r4, r0
 800a94e:	460d      	mov	r5, r1
 800a950:	f7f5 fcc2 	bl	80002d8 <__aeabi_dsub>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	e9ca 2300 	strd	r2, r3, [sl]
 800a95c:	4620      	mov	r0, r4
 800a95e:	4629      	mov	r1, r5
 800a960:	f7f5 fcba 	bl	80002d8 <__aeabi_dsub>
 800a964:	a398      	add	r3, pc, #608	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x318>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	e7db      	b.n	800a924 <__ieee754_rem_pio2+0x74>
 800a96c:	f7f5 fcb6 	bl	80002dc <__adddf3>
 800a970:	45b0      	cmp	r8, r6
 800a972:	4604      	mov	r4, r0
 800a974:	460d      	mov	r5, r1
 800a976:	d016      	beq.n	800a9a6 <__ieee754_rem_pio2+0xf6>
 800a978:	a38f      	add	r3, pc, #572	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x308>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fcad 	bl	80002dc <__adddf3>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	e9ca 2300 	strd	r2, r3, [sl]
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7f5 fca3 	bl	80002d8 <__aeabi_dsub>
 800a992:	a389      	add	r3, pc, #548	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x308>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fca0 	bl	80002dc <__adddf3>
 800a99c:	f04f 3bff 	mov.w	fp, #4294967295
 800a9a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9a4:	e7c4      	b.n	800a930 <__ieee754_rem_pio2+0x80>
 800a9a6:	a386      	add	r3, pc, #536	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x310>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f7f5 fc96 	bl	80002dc <__adddf3>
 800a9b0:	a385      	add	r3, pc, #532	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x318>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	f7f5 fc8f 	bl	80002dc <__adddf3>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	e9ca 2300 	strd	r2, r3, [sl]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f5 fc85 	bl	80002d8 <__aeabi_dsub>
 800a9ce:	a37e      	add	r3, pc, #504	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x318>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	e7e0      	b.n	800a998 <__ieee754_rem_pio2+0xe8>
 800a9d6:	4b87      	ldr	r3, [pc, #540]	; (800abf4 <__ieee754_rem_pio2+0x344>)
 800a9d8:	4598      	cmp	r8, r3
 800a9da:	f300 80d9 	bgt.w	800ab90 <__ieee754_rem_pio2+0x2e0>
 800a9de:	f000 fe49 	bl	800b674 <fabs>
 800a9e2:	ec55 4b10 	vmov	r4, r5, d0
 800a9e6:	ee10 0a10 	vmov	r0, s0
 800a9ea:	a379      	add	r3, pc, #484	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x320>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	f7f5 fe29 	bl	8000648 <__aeabi_dmul>
 800a9f6:	4b80      	ldr	r3, [pc, #512]	; (800abf8 <__ieee754_rem_pio2+0x348>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f7f5 fc6f 	bl	80002dc <__adddf3>
 800a9fe:	f7f6 f8d3 	bl	8000ba8 <__aeabi_d2iz>
 800aa02:	4683      	mov	fp, r0
 800aa04:	f7f5 fdb6 	bl	8000574 <__aeabi_i2d>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	ec43 2b18 	vmov	d8, r2, r3
 800aa10:	a367      	add	r3, pc, #412	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x300>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	f7f5 fe17 	bl	8000648 <__aeabi_dmul>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4620      	mov	r0, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	f7f5 fc59 	bl	80002d8 <__aeabi_dsub>
 800aa26:	a364      	add	r3, pc, #400	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x308>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460f      	mov	r7, r1
 800aa30:	ec51 0b18 	vmov	r0, r1, d8
 800aa34:	f7f5 fe08 	bl	8000648 <__aeabi_dmul>
 800aa38:	f1bb 0f1f 	cmp.w	fp, #31
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	460d      	mov	r5, r1
 800aa40:	dc0d      	bgt.n	800aa5e <__ieee754_rem_pio2+0x1ae>
 800aa42:	4b6e      	ldr	r3, [pc, #440]	; (800abfc <__ieee754_rem_pio2+0x34c>)
 800aa44:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4c:	4543      	cmp	r3, r8
 800aa4e:	d006      	beq.n	800aa5e <__ieee754_rem_pio2+0x1ae>
 800aa50:	4622      	mov	r2, r4
 800aa52:	462b      	mov	r3, r5
 800aa54:	4630      	mov	r0, r6
 800aa56:	4639      	mov	r1, r7
 800aa58:	f7f5 fc3e 	bl	80002d8 <__aeabi_dsub>
 800aa5c:	e00f      	b.n	800aa7e <__ieee754_rem_pio2+0x1ce>
 800aa5e:	462b      	mov	r3, r5
 800aa60:	4622      	mov	r2, r4
 800aa62:	4630      	mov	r0, r6
 800aa64:	4639      	mov	r1, r7
 800aa66:	f7f5 fc37 	bl	80002d8 <__aeabi_dsub>
 800aa6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa6e:	9303      	str	r3, [sp, #12]
 800aa70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa78:	f1b8 0f10 	cmp.w	r8, #16
 800aa7c:	dc02      	bgt.n	800aa84 <__ieee754_rem_pio2+0x1d4>
 800aa7e:	e9ca 0100 	strd	r0, r1, [sl]
 800aa82:	e039      	b.n	800aaf8 <__ieee754_rem_pio2+0x248>
 800aa84:	a34e      	add	r3, pc, #312	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x310>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	ec51 0b18 	vmov	r0, r1, d8
 800aa8e:	f7f5 fddb 	bl	8000648 <__aeabi_dmul>
 800aa92:	4604      	mov	r4, r0
 800aa94:	460d      	mov	r5, r1
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fc1b 	bl	80002d8 <__aeabi_dsub>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4680      	mov	r8, r0
 800aaa8:	4689      	mov	r9, r1
 800aaaa:	4630      	mov	r0, r6
 800aaac:	4639      	mov	r1, r7
 800aaae:	f7f5 fc13 	bl	80002d8 <__aeabi_dsub>
 800aab2:	4622      	mov	r2, r4
 800aab4:	462b      	mov	r3, r5
 800aab6:	f7f5 fc0f 	bl	80002d8 <__aeabi_dsub>
 800aaba:	a343      	add	r3, pc, #268	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x318>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	ec51 0b18 	vmov	r0, r1, d8
 800aac8:	f7f5 fdbe 	bl	8000648 <__aeabi_dmul>
 800aacc:	4622      	mov	r2, r4
 800aace:	462b      	mov	r3, r5
 800aad0:	f7f5 fc02 	bl	80002d8 <__aeabi_dsub>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	4640      	mov	r0, r8
 800aade:	4649      	mov	r1, r9
 800aae0:	f7f5 fbfa 	bl	80002d8 <__aeabi_dsub>
 800aae4:	9a03      	ldr	r2, [sp, #12]
 800aae6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b31      	cmp	r3, #49	; 0x31
 800aaee:	dc24      	bgt.n	800ab3a <__ieee754_rem_pio2+0x28a>
 800aaf0:	e9ca 0100 	strd	r0, r1, [sl]
 800aaf4:	4646      	mov	r6, r8
 800aaf6:	464f      	mov	r7, r9
 800aaf8:	e9da 8900 	ldrd	r8, r9, [sl]
 800aafc:	4630      	mov	r0, r6
 800aafe:	4642      	mov	r2, r8
 800ab00:	464b      	mov	r3, r9
 800ab02:	4639      	mov	r1, r7
 800ab04:	f7f5 fbe8 	bl	80002d8 <__aeabi_dsub>
 800ab08:	462b      	mov	r3, r5
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	f7f5 fbe4 	bl	80002d8 <__aeabi_dsub>
 800ab10:	9b02      	ldr	r3, [sp, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab18:	f6bf af0a 	bge.w	800a930 <__ieee754_rem_pio2+0x80>
 800ab1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab20:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab28:	f8ca 8000 	str.w	r8, [sl]
 800ab2c:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab30:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab34:	f1cb 0b00 	rsb	fp, fp, #0
 800ab38:	e6fa      	b.n	800a930 <__ieee754_rem_pio2+0x80>
 800ab3a:	a327      	add	r3, pc, #156	; (adr r3, 800abd8 <__ieee754_rem_pio2+0x328>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	ec51 0b18 	vmov	r0, r1, d8
 800ab44:	f7f5 fd80 	bl	8000648 <__aeabi_dmul>
 800ab48:	4604      	mov	r4, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fbc0 	bl	80002d8 <__aeabi_dsub>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460f      	mov	r7, r1
 800ab60:	4640      	mov	r0, r8
 800ab62:	4649      	mov	r1, r9
 800ab64:	f7f5 fbb8 	bl	80002d8 <__aeabi_dsub>
 800ab68:	4622      	mov	r2, r4
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	f7f5 fbb4 	bl	80002d8 <__aeabi_dsub>
 800ab70:	a31b      	add	r3, pc, #108	; (adr r3, 800abe0 <__ieee754_rem_pio2+0x330>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	ec51 0b18 	vmov	r0, r1, d8
 800ab7e:	f7f5 fd63 	bl	8000648 <__aeabi_dmul>
 800ab82:	4622      	mov	r2, r4
 800ab84:	462b      	mov	r3, r5
 800ab86:	f7f5 fba7 	bl	80002d8 <__aeabi_dsub>
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	e75f      	b.n	800aa50 <__ieee754_rem_pio2+0x1a0>
 800ab90:	4b1b      	ldr	r3, [pc, #108]	; (800ac00 <__ieee754_rem_pio2+0x350>)
 800ab92:	4598      	cmp	r8, r3
 800ab94:	dd36      	ble.n	800ac04 <__ieee754_rem_pio2+0x354>
 800ab96:	ee10 2a10 	vmov	r2, s0
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fb9a 	bl	80002d8 <__aeabi_dsub>
 800aba4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aba8:	e9ca 0100 	strd	r0, r1, [sl]
 800abac:	e694      	b.n	800a8d8 <__ieee754_rem_pio2+0x28>
 800abae:	bf00      	nop
 800abb0:	54400000 	.word	0x54400000
 800abb4:	3ff921fb 	.word	0x3ff921fb
 800abb8:	1a626331 	.word	0x1a626331
 800abbc:	3dd0b461 	.word	0x3dd0b461
 800abc0:	1a600000 	.word	0x1a600000
 800abc4:	3dd0b461 	.word	0x3dd0b461
 800abc8:	2e037073 	.word	0x2e037073
 800abcc:	3ba3198a 	.word	0x3ba3198a
 800abd0:	6dc9c883 	.word	0x6dc9c883
 800abd4:	3fe45f30 	.word	0x3fe45f30
 800abd8:	2e000000 	.word	0x2e000000
 800abdc:	3ba3198a 	.word	0x3ba3198a
 800abe0:	252049c1 	.word	0x252049c1
 800abe4:	397b839a 	.word	0x397b839a
 800abe8:	3fe921fb 	.word	0x3fe921fb
 800abec:	4002d97b 	.word	0x4002d97b
 800abf0:	3ff921fb 	.word	0x3ff921fb
 800abf4:	413921fb 	.word	0x413921fb
 800abf8:	3fe00000 	.word	0x3fe00000
 800abfc:	0800c0e4 	.word	0x0800c0e4
 800ac00:	7fefffff 	.word	0x7fefffff
 800ac04:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac0c:	ee10 0a10 	vmov	r0, s0
 800ac10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ac14:	ee10 6a10 	vmov	r6, s0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	f7f5 ffc5 	bl	8000ba8 <__aeabi_d2iz>
 800ac1e:	f7f5 fca9 	bl	8000574 <__aeabi_i2d>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4630      	mov	r0, r6
 800ac28:	4639      	mov	r1, r7
 800ac2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac2e:	f7f5 fb53 	bl	80002d8 <__aeabi_dsub>
 800ac32:	4b23      	ldr	r3, [pc, #140]	; (800acc0 <__ieee754_rem_pio2+0x410>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	f7f5 fd07 	bl	8000648 <__aeabi_dmul>
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	f7f5 ffb3 	bl	8000ba8 <__aeabi_d2iz>
 800ac42:	f7f5 fc97 	bl	8000574 <__aeabi_i2d>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac52:	f7f5 fb41 	bl	80002d8 <__aeabi_dsub>
 800ac56:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <__ieee754_rem_pio2+0x410>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f7f5 fcf5 	bl	8000648 <__aeabi_dmul>
 800ac5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac62:	ad04      	add	r5, sp, #16
 800ac64:	f04f 0803 	mov.w	r8, #3
 800ac68:	46a9      	mov	r9, r5
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	2700      	movs	r7, #0
 800ac6e:	4632      	mov	r2, r6
 800ac70:	463b      	mov	r3, r7
 800ac72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac76:	46c3      	mov	fp, r8
 800ac78:	3d08      	subs	r5, #8
 800ac7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac7e:	f7f5 ff4b 	bl	8000b18 <__aeabi_dcmpeq>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d1f3      	bne.n	800ac6e <__ieee754_rem_pio2+0x3be>
 800ac86:	4b0f      	ldr	r3, [pc, #60]	; (800acc4 <__ieee754_rem_pio2+0x414>)
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	4622      	mov	r2, r4
 800ac90:	465b      	mov	r3, fp
 800ac92:	4651      	mov	r1, sl
 800ac94:	4648      	mov	r0, r9
 800ac96:	f000 f8df 	bl	800ae58 <__kernel_rem_pio2>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	4683      	mov	fp, r0
 800aca0:	f6bf ae46 	bge.w	800a930 <__ieee754_rem_pio2+0x80>
 800aca4:	e9da 2100 	ldrd	r2, r1, [sl]
 800aca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acac:	e9ca 2300 	strd	r2, r3, [sl]
 800acb0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800acb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acb8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800acbc:	e73a      	b.n	800ab34 <__ieee754_rem_pio2+0x284>
 800acbe:	bf00      	nop
 800acc0:	41700000 	.word	0x41700000
 800acc4:	0800c164 	.word	0x0800c164

0800acc8 <__kernel_cos>:
 800acc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	ec57 6b10 	vmov	r6, r7, d0
 800acd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800acd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800acd8:	ed8d 1b00 	vstr	d1, [sp]
 800acdc:	da07      	bge.n	800acee <__kernel_cos+0x26>
 800acde:	ee10 0a10 	vmov	r0, s0
 800ace2:	4639      	mov	r1, r7
 800ace4:	f7f5 ff60 	bl	8000ba8 <__aeabi_d2iz>
 800ace8:	2800      	cmp	r0, #0
 800acea:	f000 8088 	beq.w	800adfe <__kernel_cos+0x136>
 800acee:	4632      	mov	r2, r6
 800acf0:	463b      	mov	r3, r7
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fca7 	bl	8000648 <__aeabi_dmul>
 800acfa:	4b51      	ldr	r3, [pc, #324]	; (800ae40 <__kernel_cos+0x178>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	460d      	mov	r5, r1
 800ad02:	f7f5 fca1 	bl	8000648 <__aeabi_dmul>
 800ad06:	a340      	add	r3, pc, #256	; (adr r3, 800ae08 <__kernel_cos+0x140>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	4682      	mov	sl, r0
 800ad0e:	468b      	mov	fp, r1
 800ad10:	4620      	mov	r0, r4
 800ad12:	4629      	mov	r1, r5
 800ad14:	f7f5 fc98 	bl	8000648 <__aeabi_dmul>
 800ad18:	a33d      	add	r3, pc, #244	; (adr r3, 800ae10 <__kernel_cos+0x148>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 fadd 	bl	80002dc <__adddf3>
 800ad22:	4622      	mov	r2, r4
 800ad24:	462b      	mov	r3, r5
 800ad26:	f7f5 fc8f 	bl	8000648 <__aeabi_dmul>
 800ad2a:	a33b      	add	r3, pc, #236	; (adr r3, 800ae18 <__kernel_cos+0x150>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fad2 	bl	80002d8 <__aeabi_dsub>
 800ad34:	4622      	mov	r2, r4
 800ad36:	462b      	mov	r3, r5
 800ad38:	f7f5 fc86 	bl	8000648 <__aeabi_dmul>
 800ad3c:	a338      	add	r3, pc, #224	; (adr r3, 800ae20 <__kernel_cos+0x158>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 facb 	bl	80002dc <__adddf3>
 800ad46:	4622      	mov	r2, r4
 800ad48:	462b      	mov	r3, r5
 800ad4a:	f7f5 fc7d 	bl	8000648 <__aeabi_dmul>
 800ad4e:	a336      	add	r3, pc, #216	; (adr r3, 800ae28 <__kernel_cos+0x160>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f7f5 fac0 	bl	80002d8 <__aeabi_dsub>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	f7f5 fc74 	bl	8000648 <__aeabi_dmul>
 800ad60:	a333      	add	r3, pc, #204	; (adr r3, 800ae30 <__kernel_cos+0x168>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fab9 	bl	80002dc <__adddf3>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	f7f5 fc6b 	bl	8000648 <__aeabi_dmul>
 800ad72:	4622      	mov	r2, r4
 800ad74:	462b      	mov	r3, r5
 800ad76:	f7f5 fc67 	bl	8000648 <__aeabi_dmul>
 800ad7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	f7f5 fc5f 	bl	8000648 <__aeabi_dmul>
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4620      	mov	r0, r4
 800ad92:	f7f5 faa1 	bl	80002d8 <__aeabi_dsub>
 800ad96:	4b2b      	ldr	r3, [pc, #172]	; (800ae44 <__kernel_cos+0x17c>)
 800ad98:	4598      	cmp	r8, r3
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	dc10      	bgt.n	800adc2 <__kernel_cos+0xfa>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4650      	mov	r0, sl
 800ada6:	4659      	mov	r1, fp
 800ada8:	f7f5 fa96 	bl	80002d8 <__aeabi_dsub>
 800adac:	460b      	mov	r3, r1
 800adae:	4926      	ldr	r1, [pc, #152]	; (800ae48 <__kernel_cos+0x180>)
 800adb0:	4602      	mov	r2, r0
 800adb2:	2000      	movs	r0, #0
 800adb4:	f7f5 fa90 	bl	80002d8 <__aeabi_dsub>
 800adb8:	ec41 0b10 	vmov	d0, r0, r1
 800adbc:	b003      	add	sp, #12
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	4b22      	ldr	r3, [pc, #136]	; (800ae4c <__kernel_cos+0x184>)
 800adc4:	4920      	ldr	r1, [pc, #128]	; (800ae48 <__kernel_cos+0x180>)
 800adc6:	4598      	cmp	r8, r3
 800adc8:	bfcc      	ite	gt
 800adca:	4d21      	ldrgt	r5, [pc, #132]	; (800ae50 <__kernel_cos+0x188>)
 800adcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800add0:	2400      	movs	r4, #0
 800add2:	4622      	mov	r2, r4
 800add4:	462b      	mov	r3, r5
 800add6:	2000      	movs	r0, #0
 800add8:	f7f5 fa7e 	bl	80002d8 <__aeabi_dsub>
 800addc:	4622      	mov	r2, r4
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	462b      	mov	r3, r5
 800ade4:	4650      	mov	r0, sl
 800ade6:	4659      	mov	r1, fp
 800ade8:	f7f5 fa76 	bl	80002d8 <__aeabi_dsub>
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	f7f5 fa72 	bl	80002d8 <__aeabi_dsub>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4640      	mov	r0, r8
 800adfa:	4649      	mov	r1, r9
 800adfc:	e7da      	b.n	800adb4 <__kernel_cos+0xec>
 800adfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ae38 <__kernel_cos+0x170>
 800ae02:	e7db      	b.n	800adbc <__kernel_cos+0xf4>
 800ae04:	f3af 8000 	nop.w
 800ae08:	be8838d4 	.word	0xbe8838d4
 800ae0c:	bda8fae9 	.word	0xbda8fae9
 800ae10:	bdb4b1c4 	.word	0xbdb4b1c4
 800ae14:	3e21ee9e 	.word	0x3e21ee9e
 800ae18:	809c52ad 	.word	0x809c52ad
 800ae1c:	3e927e4f 	.word	0x3e927e4f
 800ae20:	19cb1590 	.word	0x19cb1590
 800ae24:	3efa01a0 	.word	0x3efa01a0
 800ae28:	16c15177 	.word	0x16c15177
 800ae2c:	3f56c16c 	.word	0x3f56c16c
 800ae30:	5555554c 	.word	0x5555554c
 800ae34:	3fa55555 	.word	0x3fa55555
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	3ff00000 	.word	0x3ff00000
 800ae40:	3fe00000 	.word	0x3fe00000
 800ae44:	3fd33332 	.word	0x3fd33332
 800ae48:	3ff00000 	.word	0x3ff00000
 800ae4c:	3fe90000 	.word	0x3fe90000
 800ae50:	3fd20000 	.word	0x3fd20000
 800ae54:	00000000 	.word	0x00000000

0800ae58 <__kernel_rem_pio2>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	ed2d 8b02 	vpush	{d8}
 800ae60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ae64:	f112 0f14 	cmn.w	r2, #20
 800ae68:	9308      	str	r3, [sp, #32]
 800ae6a:	9101      	str	r1, [sp, #4]
 800ae6c:	4bc4      	ldr	r3, [pc, #784]	; (800b180 <__kernel_rem_pio2+0x328>)
 800ae6e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ae70:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	9b08      	ldr	r3, [sp, #32]
 800ae7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae7e:	bfa8      	it	ge
 800ae80:	1ed4      	subge	r4, r2, #3
 800ae82:	9306      	str	r3, [sp, #24]
 800ae84:	bfb2      	itee	lt
 800ae86:	2400      	movlt	r4, #0
 800ae88:	2318      	movge	r3, #24
 800ae8a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae8e:	f06f 0317 	mvn.w	r3, #23
 800ae92:	fb04 3303 	mla	r3, r4, r3, r3
 800ae96:	eb03 0a02 	add.w	sl, r3, r2
 800ae9a:	9b02      	ldr	r3, [sp, #8]
 800ae9c:	9a06      	ldr	r2, [sp, #24]
 800ae9e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b170 <__kernel_rem_pio2+0x318>
 800aea2:	eb03 0802 	add.w	r8, r3, r2
 800aea6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aea8:	1aa7      	subs	r7, r4, r2
 800aeaa:	ae22      	add	r6, sp, #136	; 0x88
 800aeac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aeb0:	2500      	movs	r5, #0
 800aeb2:	4545      	cmp	r5, r8
 800aeb4:	dd13      	ble.n	800aede <__kernel_rem_pio2+0x86>
 800aeb6:	9b08      	ldr	r3, [sp, #32]
 800aeb8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b170 <__kernel_rem_pio2+0x318>
 800aebc:	aa22      	add	r2, sp, #136	; 0x88
 800aebe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aec2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800aec6:	f04f 0800 	mov.w	r8, #0
 800aeca:	9b02      	ldr	r3, [sp, #8]
 800aecc:	4598      	cmp	r8, r3
 800aece:	dc2f      	bgt.n	800af30 <__kernel_rem_pio2+0xd8>
 800aed0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800aed4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800aed8:	462f      	mov	r7, r5
 800aeda:	2600      	movs	r6, #0
 800aedc:	e01b      	b.n	800af16 <__kernel_rem_pio2+0xbe>
 800aede:	42ef      	cmn	r7, r5
 800aee0:	d407      	bmi.n	800aef2 <__kernel_rem_pio2+0x9a>
 800aee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aee6:	f7f5 fb45 	bl	8000574 <__aeabi_i2d>
 800aeea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aeee:	3501      	adds	r5, #1
 800aef0:	e7df      	b.n	800aeb2 <__kernel_rem_pio2+0x5a>
 800aef2:	ec51 0b18 	vmov	r0, r1, d8
 800aef6:	e7f8      	b.n	800aeea <__kernel_rem_pio2+0x92>
 800aef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aefc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af00:	f7f5 fba2 	bl	8000648 <__aeabi_dmul>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af0c:	f7f5 f9e6 	bl	80002dc <__adddf3>
 800af10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af14:	3601      	adds	r6, #1
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	429e      	cmp	r6, r3
 800af1a:	f1a7 0708 	sub.w	r7, r7, #8
 800af1e:	ddeb      	ble.n	800aef8 <__kernel_rem_pio2+0xa0>
 800af20:	ed9d 7b04 	vldr	d7, [sp, #16]
 800af24:	f108 0801 	add.w	r8, r8, #1
 800af28:	ecab 7b02 	vstmia	fp!, {d7}
 800af2c:	3508      	adds	r5, #8
 800af2e:	e7cc      	b.n	800aeca <__kernel_rem_pio2+0x72>
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	aa0e      	add	r2, sp, #56	; 0x38
 800af34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af38:	930d      	str	r3, [sp, #52]	; 0x34
 800af3a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800af3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af40:	9c02      	ldr	r4, [sp, #8]
 800af42:	930c      	str	r3, [sp, #48]	; 0x30
 800af44:	00e3      	lsls	r3, r4, #3
 800af46:	930a      	str	r3, [sp, #40]	; 0x28
 800af48:	ab9a      	add	r3, sp, #616	; 0x268
 800af4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800af52:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800af56:	ab72      	add	r3, sp, #456	; 0x1c8
 800af58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800af5c:	46c3      	mov	fp, r8
 800af5e:	46a1      	mov	r9, r4
 800af60:	f1b9 0f00 	cmp.w	r9, #0
 800af64:	f1a5 0508 	sub.w	r5, r5, #8
 800af68:	dc77      	bgt.n	800b05a <__kernel_rem_pio2+0x202>
 800af6a:	ec47 6b10 	vmov	d0, r6, r7
 800af6e:	4650      	mov	r0, sl
 800af70:	f000 fc0a 	bl	800b788 <scalbn>
 800af74:	ec57 6b10 	vmov	r6, r7, d0
 800af78:	2200      	movs	r2, #0
 800af7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af7e:	ee10 0a10 	vmov	r0, s0
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 fb60 	bl	8000648 <__aeabi_dmul>
 800af88:	ec41 0b10 	vmov	d0, r0, r1
 800af8c:	f000 fb7c 	bl	800b688 <floor>
 800af90:	4b7c      	ldr	r3, [pc, #496]	; (800b184 <__kernel_rem_pio2+0x32c>)
 800af92:	ec51 0b10 	vmov	r0, r1, d0
 800af96:	2200      	movs	r2, #0
 800af98:	f7f5 fb56 	bl	8000648 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 f998 	bl	80002d8 <__aeabi_dsub>
 800afa8:	460f      	mov	r7, r1
 800afaa:	4606      	mov	r6, r0
 800afac:	f7f5 fdfc 	bl	8000ba8 <__aeabi_d2iz>
 800afb0:	9004      	str	r0, [sp, #16]
 800afb2:	f7f5 fadf 	bl	8000574 <__aeabi_i2d>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 f98b 	bl	80002d8 <__aeabi_dsub>
 800afc2:	f1ba 0f00 	cmp.w	sl, #0
 800afc6:	4606      	mov	r6, r0
 800afc8:	460f      	mov	r7, r1
 800afca:	dd6d      	ble.n	800b0a8 <__kernel_rem_pio2+0x250>
 800afcc:	1e62      	subs	r2, r4, #1
 800afce:	ab0e      	add	r3, sp, #56	; 0x38
 800afd0:	9d04      	ldr	r5, [sp, #16]
 800afd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afd6:	f1ca 0118 	rsb	r1, sl, #24
 800afda:	fa40 f301 	asr.w	r3, r0, r1
 800afde:	441d      	add	r5, r3
 800afe0:	408b      	lsls	r3, r1
 800afe2:	1ac0      	subs	r0, r0, r3
 800afe4:	ab0e      	add	r3, sp, #56	; 0x38
 800afe6:	9504      	str	r5, [sp, #16]
 800afe8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800afec:	f1ca 0317 	rsb	r3, sl, #23
 800aff0:	fa40 fb03 	asr.w	fp, r0, r3
 800aff4:	f1bb 0f00 	cmp.w	fp, #0
 800aff8:	dd65      	ble.n	800b0c6 <__kernel_rem_pio2+0x26e>
 800affa:	9b04      	ldr	r3, [sp, #16]
 800affc:	2200      	movs	r2, #0
 800affe:	3301      	adds	r3, #1
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	4615      	mov	r5, r2
 800b004:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b008:	4294      	cmp	r4, r2
 800b00a:	f300 809c 	bgt.w	800b146 <__kernel_rem_pio2+0x2ee>
 800b00e:	f1ba 0f00 	cmp.w	sl, #0
 800b012:	dd07      	ble.n	800b024 <__kernel_rem_pio2+0x1cc>
 800b014:	f1ba 0f01 	cmp.w	sl, #1
 800b018:	f000 80c0 	beq.w	800b19c <__kernel_rem_pio2+0x344>
 800b01c:	f1ba 0f02 	cmp.w	sl, #2
 800b020:	f000 80c6 	beq.w	800b1b0 <__kernel_rem_pio2+0x358>
 800b024:	f1bb 0f02 	cmp.w	fp, #2
 800b028:	d14d      	bne.n	800b0c6 <__kernel_rem_pio2+0x26e>
 800b02a:	4632      	mov	r2, r6
 800b02c:	463b      	mov	r3, r7
 800b02e:	4956      	ldr	r1, [pc, #344]	; (800b188 <__kernel_rem_pio2+0x330>)
 800b030:	2000      	movs	r0, #0
 800b032:	f7f5 f951 	bl	80002d8 <__aeabi_dsub>
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	d043      	beq.n	800b0c6 <__kernel_rem_pio2+0x26e>
 800b03e:	4650      	mov	r0, sl
 800b040:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b178 <__kernel_rem_pio2+0x320>
 800b044:	f000 fba0 	bl	800b788 <scalbn>
 800b048:	4630      	mov	r0, r6
 800b04a:	4639      	mov	r1, r7
 800b04c:	ec53 2b10 	vmov	r2, r3, d0
 800b050:	f7f5 f942 	bl	80002d8 <__aeabi_dsub>
 800b054:	4606      	mov	r6, r0
 800b056:	460f      	mov	r7, r1
 800b058:	e035      	b.n	800b0c6 <__kernel_rem_pio2+0x26e>
 800b05a:	4b4c      	ldr	r3, [pc, #304]	; (800b18c <__kernel_rem_pio2+0x334>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4630      	mov	r0, r6
 800b060:	4639      	mov	r1, r7
 800b062:	f7f5 faf1 	bl	8000648 <__aeabi_dmul>
 800b066:	f7f5 fd9f 	bl	8000ba8 <__aeabi_d2iz>
 800b06a:	f7f5 fa83 	bl	8000574 <__aeabi_i2d>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	ec43 2b18 	vmov	d8, r2, r3
 800b076:	4b46      	ldr	r3, [pc, #280]	; (800b190 <__kernel_rem_pio2+0x338>)
 800b078:	2200      	movs	r2, #0
 800b07a:	f7f5 fae5 	bl	8000648 <__aeabi_dmul>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 f927 	bl	80002d8 <__aeabi_dsub>
 800b08a:	f7f5 fd8d 	bl	8000ba8 <__aeabi_d2iz>
 800b08e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b092:	f84b 0b04 	str.w	r0, [fp], #4
 800b096:	ec51 0b18 	vmov	r0, r1, d8
 800b09a:	f7f5 f91f 	bl	80002dc <__adddf3>
 800b09e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	460f      	mov	r7, r1
 800b0a6:	e75b      	b.n	800af60 <__kernel_rem_pio2+0x108>
 800b0a8:	d106      	bne.n	800b0b8 <__kernel_rem_pio2+0x260>
 800b0aa:	1e63      	subs	r3, r4, #1
 800b0ac:	aa0e      	add	r2, sp, #56	; 0x38
 800b0ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b0b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b0b6:	e79d      	b.n	800aff4 <__kernel_rem_pio2+0x19c>
 800b0b8:	4b36      	ldr	r3, [pc, #216]	; (800b194 <__kernel_rem_pio2+0x33c>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 fd4a 	bl	8000b54 <__aeabi_dcmpge>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d13d      	bne.n	800b140 <__kernel_rem_pio2+0x2e8>
 800b0c4:	4683      	mov	fp, r0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	f7f5 fd23 	bl	8000b18 <__aeabi_dcmpeq>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f000 80c0 	beq.w	800b258 <__kernel_rem_pio2+0x400>
 800b0d8:	1e65      	subs	r5, r4, #1
 800b0da:	462b      	mov	r3, r5
 800b0dc:	2200      	movs	r2, #0
 800b0de:	9902      	ldr	r1, [sp, #8]
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	da6c      	bge.n	800b1be <__kernel_rem_pio2+0x366>
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	f000 8089 	beq.w	800b1fc <__kernel_rem_pio2+0x3a4>
 800b0ea:	ab0e      	add	r3, sp, #56	; 0x38
 800b0ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800b0f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80ad 	beq.w	800b254 <__kernel_rem_pio2+0x3fc>
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b178 <__kernel_rem_pio2+0x320>
 800b100:	f000 fb42 	bl	800b788 <scalbn>
 800b104:	ab9a      	add	r3, sp, #616	; 0x268
 800b106:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b10a:	ec57 6b10 	vmov	r6, r7, d0
 800b10e:	00ec      	lsls	r4, r5, #3
 800b110:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b114:	46aa      	mov	sl, r5
 800b116:	f1ba 0f00 	cmp.w	sl, #0
 800b11a:	f280 80d6 	bge.w	800b2ca <__kernel_rem_pio2+0x472>
 800b11e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b170 <__kernel_rem_pio2+0x318>
 800b122:	462e      	mov	r6, r5
 800b124:	2e00      	cmp	r6, #0
 800b126:	f2c0 8104 	blt.w	800b332 <__kernel_rem_pio2+0x4da>
 800b12a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b12c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b130:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b198 <__kernel_rem_pio2+0x340>
 800b134:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b138:	f04f 0800 	mov.w	r8, #0
 800b13c:	1baf      	subs	r7, r5, r6
 800b13e:	e0ea      	b.n	800b316 <__kernel_rem_pio2+0x4be>
 800b140:	f04f 0b02 	mov.w	fp, #2
 800b144:	e759      	b.n	800affa <__kernel_rem_pio2+0x1a2>
 800b146:	f8d8 3000 	ldr.w	r3, [r8]
 800b14a:	b955      	cbnz	r5, 800b162 <__kernel_rem_pio2+0x30a>
 800b14c:	b123      	cbz	r3, 800b158 <__kernel_rem_pio2+0x300>
 800b14e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b152:	f8c8 3000 	str.w	r3, [r8]
 800b156:	2301      	movs	r3, #1
 800b158:	3201      	adds	r2, #1
 800b15a:	f108 0804 	add.w	r8, r8, #4
 800b15e:	461d      	mov	r5, r3
 800b160:	e752      	b.n	800b008 <__kernel_rem_pio2+0x1b0>
 800b162:	1acb      	subs	r3, r1, r3
 800b164:	f8c8 3000 	str.w	r3, [r8]
 800b168:	462b      	mov	r3, r5
 800b16a:	e7f5      	b.n	800b158 <__kernel_rem_pio2+0x300>
 800b16c:	f3af 8000 	nop.w
	...
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	0800c2b0 	.word	0x0800c2b0
 800b184:	40200000 	.word	0x40200000
 800b188:	3ff00000 	.word	0x3ff00000
 800b18c:	3e700000 	.word	0x3e700000
 800b190:	41700000 	.word	0x41700000
 800b194:	3fe00000 	.word	0x3fe00000
 800b198:	0800c270 	.word	0x0800c270
 800b19c:	1e62      	subs	r2, r4, #1
 800b19e:	ab0e      	add	r3, sp, #56	; 0x38
 800b1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1a8:	a90e      	add	r1, sp, #56	; 0x38
 800b1aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b1ae:	e739      	b.n	800b024 <__kernel_rem_pio2+0x1cc>
 800b1b0:	1e62      	subs	r2, r4, #1
 800b1b2:	ab0e      	add	r3, sp, #56	; 0x38
 800b1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1bc:	e7f4      	b.n	800b1a8 <__kernel_rem_pio2+0x350>
 800b1be:	a90e      	add	r1, sp, #56	; 0x38
 800b1c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	e789      	b.n	800b0de <__kernel_rem_pio2+0x286>
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b1d0:	2900      	cmp	r1, #0
 800b1d2:	d0fa      	beq.n	800b1ca <__kernel_rem_pio2+0x372>
 800b1d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b1da:	446a      	add	r2, sp
 800b1dc:	3a98      	subs	r2, #152	; 0x98
 800b1de:	920a      	str	r2, [sp, #40]	; 0x28
 800b1e0:	9a08      	ldr	r2, [sp, #32]
 800b1e2:	18e3      	adds	r3, r4, r3
 800b1e4:	18a5      	adds	r5, r4, r2
 800b1e6:	aa22      	add	r2, sp, #136	; 0x88
 800b1e8:	f104 0801 	add.w	r8, r4, #1
 800b1ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	4543      	cmp	r3, r8
 800b1f6:	da04      	bge.n	800b202 <__kernel_rem_pio2+0x3aa>
 800b1f8:	461c      	mov	r4, r3
 800b1fa:	e6a3      	b.n	800af44 <__kernel_rem_pio2+0xec>
 800b1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1fe:	2301      	movs	r3, #1
 800b200:	e7e4      	b.n	800b1cc <__kernel_rem_pio2+0x374>
 800b202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b204:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b208:	f7f5 f9b4 	bl	8000574 <__aeabi_i2d>
 800b20c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b212:	46ab      	mov	fp, r5
 800b214:	461c      	mov	r4, r3
 800b216:	f04f 0900 	mov.w	r9, #0
 800b21a:	2600      	movs	r6, #0
 800b21c:	2700      	movs	r7, #0
 800b21e:	9b06      	ldr	r3, [sp, #24]
 800b220:	4599      	cmp	r9, r3
 800b222:	dd06      	ble.n	800b232 <__kernel_rem_pio2+0x3da>
 800b224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b226:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b22a:	f108 0801 	add.w	r8, r8, #1
 800b22e:	930a      	str	r3, [sp, #40]	; 0x28
 800b230:	e7df      	b.n	800b1f2 <__kernel_rem_pio2+0x39a>
 800b232:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b236:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b23a:	f7f5 fa05 	bl	8000648 <__aeabi_dmul>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	f7f5 f849 	bl	80002dc <__adddf3>
 800b24a:	f109 0901 	add.w	r9, r9, #1
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	e7e4      	b.n	800b21e <__kernel_rem_pio2+0x3c6>
 800b254:	3d01      	subs	r5, #1
 800b256:	e748      	b.n	800b0ea <__kernel_rem_pio2+0x292>
 800b258:	ec47 6b10 	vmov	d0, r6, r7
 800b25c:	f1ca 0000 	rsb	r0, sl, #0
 800b260:	f000 fa92 	bl	800b788 <scalbn>
 800b264:	ec57 6b10 	vmov	r6, r7, d0
 800b268:	4ba0      	ldr	r3, [pc, #640]	; (800b4ec <__kernel_rem_pio2+0x694>)
 800b26a:	ee10 0a10 	vmov	r0, s0
 800b26e:	2200      	movs	r2, #0
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 fc6f 	bl	8000b54 <__aeabi_dcmpge>
 800b276:	b1f8      	cbz	r0, 800b2b8 <__kernel_rem_pio2+0x460>
 800b278:	4b9d      	ldr	r3, [pc, #628]	; (800b4f0 <__kernel_rem_pio2+0x698>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 f9e2 	bl	8000648 <__aeabi_dmul>
 800b284:	f7f5 fc90 	bl	8000ba8 <__aeabi_d2iz>
 800b288:	4680      	mov	r8, r0
 800b28a:	f7f5 f973 	bl	8000574 <__aeabi_i2d>
 800b28e:	4b97      	ldr	r3, [pc, #604]	; (800b4ec <__kernel_rem_pio2+0x694>)
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9d9 	bl	8000648 <__aeabi_dmul>
 800b296:	460b      	mov	r3, r1
 800b298:	4602      	mov	r2, r0
 800b29a:	4639      	mov	r1, r7
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7f5 f81b 	bl	80002d8 <__aeabi_dsub>
 800b2a2:	f7f5 fc81 	bl	8000ba8 <__aeabi_d2iz>
 800b2a6:	1c65      	adds	r5, r4, #1
 800b2a8:	ab0e      	add	r3, sp, #56	; 0x38
 800b2aa:	f10a 0a18 	add.w	sl, sl, #24
 800b2ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b2b2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b2b6:	e720      	b.n	800b0fa <__kernel_rem_pio2+0x2a2>
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f5 fc74 	bl	8000ba8 <__aeabi_d2iz>
 800b2c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b2c2:	4625      	mov	r5, r4
 800b2c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b2c8:	e717      	b.n	800b0fa <__kernel_rem_pio2+0x2a2>
 800b2ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b2cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b2d0:	f7f5 f950 	bl	8000574 <__aeabi_i2d>
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	f7f5 f9b6 	bl	8000648 <__aeabi_dmul>
 800b2dc:	4b84      	ldr	r3, [pc, #528]	; (800b4f0 <__kernel_rem_pio2+0x698>)
 800b2de:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	f7f5 f9ae 	bl	8000648 <__aeabi_dmul>
 800b2ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	e70f      	b.n	800b116 <__kernel_rem_pio2+0x2be>
 800b2f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b2fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b2fe:	f7f5 f9a3 	bl	8000648 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b30a:	f7f4 ffe7 	bl	80002dc <__adddf3>
 800b30e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b312:	f108 0801 	add.w	r8, r8, #1
 800b316:	9b02      	ldr	r3, [sp, #8]
 800b318:	4598      	cmp	r8, r3
 800b31a:	dc01      	bgt.n	800b320 <__kernel_rem_pio2+0x4c8>
 800b31c:	45b8      	cmp	r8, r7
 800b31e:	ddea      	ble.n	800b2f6 <__kernel_rem_pio2+0x49e>
 800b320:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b324:	ab4a      	add	r3, sp, #296	; 0x128
 800b326:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b32a:	ed87 7b00 	vstr	d7, [r7]
 800b32e:	3e01      	subs	r6, #1
 800b330:	e6f8      	b.n	800b124 <__kernel_rem_pio2+0x2cc>
 800b332:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b334:	2b02      	cmp	r3, #2
 800b336:	dc0b      	bgt.n	800b350 <__kernel_rem_pio2+0x4f8>
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dc35      	bgt.n	800b3a8 <__kernel_rem_pio2+0x550>
 800b33c:	d059      	beq.n	800b3f2 <__kernel_rem_pio2+0x59a>
 800b33e:	9b04      	ldr	r3, [sp, #16]
 800b340:	f003 0007 	and.w	r0, r3, #7
 800b344:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b348:	ecbd 8b02 	vpop	{d8}
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b352:	2b03      	cmp	r3, #3
 800b354:	d1f3      	bne.n	800b33e <__kernel_rem_pio2+0x4e6>
 800b356:	ab4a      	add	r3, sp, #296	; 0x128
 800b358:	4423      	add	r3, r4
 800b35a:	9306      	str	r3, [sp, #24]
 800b35c:	461c      	mov	r4, r3
 800b35e:	469a      	mov	sl, r3
 800b360:	9502      	str	r5, [sp, #8]
 800b362:	9b02      	ldr	r3, [sp, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f1aa 0a08 	sub.w	sl, sl, #8
 800b36a:	dc6b      	bgt.n	800b444 <__kernel_rem_pio2+0x5ec>
 800b36c:	46aa      	mov	sl, r5
 800b36e:	f1ba 0f01 	cmp.w	sl, #1
 800b372:	f1a4 0408 	sub.w	r4, r4, #8
 800b376:	f300 8085 	bgt.w	800b484 <__kernel_rem_pio2+0x62c>
 800b37a:	9c06      	ldr	r4, [sp, #24]
 800b37c:	2000      	movs	r0, #0
 800b37e:	3408      	adds	r4, #8
 800b380:	2100      	movs	r1, #0
 800b382:	2d01      	cmp	r5, #1
 800b384:	f300 809d 	bgt.w	800b4c2 <__kernel_rem_pio2+0x66a>
 800b388:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b38c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b390:	f1bb 0f00 	cmp.w	fp, #0
 800b394:	f040 809b 	bne.w	800b4ce <__kernel_rem_pio2+0x676>
 800b398:	9b01      	ldr	r3, [sp, #4]
 800b39a:	e9c3 5600 	strd	r5, r6, [r3]
 800b39e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b3a2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3a6:	e7ca      	b.n	800b33e <__kernel_rem_pio2+0x4e6>
 800b3a8:	3408      	adds	r4, #8
 800b3aa:	ab4a      	add	r3, sp, #296	; 0x128
 800b3ac:	441c      	add	r4, r3
 800b3ae:	462e      	mov	r6, r5
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	da36      	bge.n	800b426 <__kernel_rem_pio2+0x5ce>
 800b3b8:	f1bb 0f00 	cmp.w	fp, #0
 800b3bc:	d039      	beq.n	800b432 <__kernel_rem_pio2+0x5da>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3c4:	9c01      	ldr	r4, [sp, #4]
 800b3c6:	e9c4 2300 	strd	r2, r3, [r4]
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b3d2:	f7f4 ff81 	bl	80002d8 <__aeabi_dsub>
 800b3d6:	ae4c      	add	r6, sp, #304	; 0x130
 800b3d8:	2401      	movs	r4, #1
 800b3da:	42a5      	cmp	r5, r4
 800b3dc:	da2c      	bge.n	800b438 <__kernel_rem_pio2+0x5e0>
 800b3de:	f1bb 0f00 	cmp.w	fp, #0
 800b3e2:	d002      	beq.n	800b3ea <__kernel_rem_pio2+0x592>
 800b3e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	9b01      	ldr	r3, [sp, #4]
 800b3ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b3f0:	e7a5      	b.n	800b33e <__kernel_rem_pio2+0x4e6>
 800b3f2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b3f6:	eb0d 0403 	add.w	r4, sp, r3
 800b3fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b3fe:	2000      	movs	r0, #0
 800b400:	2100      	movs	r1, #0
 800b402:	2d00      	cmp	r5, #0
 800b404:	da09      	bge.n	800b41a <__kernel_rem_pio2+0x5c2>
 800b406:	f1bb 0f00 	cmp.w	fp, #0
 800b40a:	d002      	beq.n	800b412 <__kernel_rem_pio2+0x5ba>
 800b40c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b410:	4619      	mov	r1, r3
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	e9c3 0100 	strd	r0, r1, [r3]
 800b418:	e791      	b.n	800b33e <__kernel_rem_pio2+0x4e6>
 800b41a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b41e:	f7f4 ff5d 	bl	80002dc <__adddf3>
 800b422:	3d01      	subs	r5, #1
 800b424:	e7ed      	b.n	800b402 <__kernel_rem_pio2+0x5aa>
 800b426:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b42a:	f7f4 ff57 	bl	80002dc <__adddf3>
 800b42e:	3e01      	subs	r6, #1
 800b430:	e7c0      	b.n	800b3b4 <__kernel_rem_pio2+0x55c>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	e7c5      	b.n	800b3c4 <__kernel_rem_pio2+0x56c>
 800b438:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b43c:	f7f4 ff4e 	bl	80002dc <__adddf3>
 800b440:	3401      	adds	r4, #1
 800b442:	e7ca      	b.n	800b3da <__kernel_rem_pio2+0x582>
 800b444:	e9da 8900 	ldrd	r8, r9, [sl]
 800b448:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b44c:	9b02      	ldr	r3, [sp, #8]
 800b44e:	3b01      	subs	r3, #1
 800b450:	9302      	str	r3, [sp, #8]
 800b452:	4632      	mov	r2, r6
 800b454:	463b      	mov	r3, r7
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f7f4 ff3f 	bl	80002dc <__adddf3>
 800b45e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f4 ff35 	bl	80002d8 <__aeabi_dsub>
 800b46e:	4632      	mov	r2, r6
 800b470:	463b      	mov	r3, r7
 800b472:	f7f4 ff33 	bl	80002dc <__adddf3>
 800b476:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b47a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b47e:	ed8a 7b00 	vstr	d7, [sl]
 800b482:	e76e      	b.n	800b362 <__kernel_rem_pio2+0x50a>
 800b484:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b488:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b48c:	4640      	mov	r0, r8
 800b48e:	4632      	mov	r2, r6
 800b490:	463b      	mov	r3, r7
 800b492:	4649      	mov	r1, r9
 800b494:	f7f4 ff22 	bl	80002dc <__adddf3>
 800b498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	f7f4 ff18 	bl	80002d8 <__aeabi_dsub>
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	f7f4 ff16 	bl	80002dc <__adddf3>
 800b4b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4b8:	ed84 7b00 	vstr	d7, [r4]
 800b4bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4c0:	e755      	b.n	800b36e <__kernel_rem_pio2+0x516>
 800b4c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4c6:	f7f4 ff09 	bl	80002dc <__adddf3>
 800b4ca:	3d01      	subs	r5, #1
 800b4cc:	e759      	b.n	800b382 <__kernel_rem_pio2+0x52a>
 800b4ce:	9b01      	ldr	r3, [sp, #4]
 800b4d0:	9a01      	ldr	r2, [sp, #4]
 800b4d2:	601d      	str	r5, [r3, #0]
 800b4d4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b4d8:	605c      	str	r4, [r3, #4]
 800b4da:	609f      	str	r7, [r3, #8]
 800b4dc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b4e0:	60d3      	str	r3, [r2, #12]
 800b4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4e6:	6110      	str	r0, [r2, #16]
 800b4e8:	6153      	str	r3, [r2, #20]
 800b4ea:	e728      	b.n	800b33e <__kernel_rem_pio2+0x4e6>
 800b4ec:	41700000 	.word	0x41700000
 800b4f0:	3e700000 	.word	0x3e700000
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <__kernel_sin>:
 800b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	ed2d 8b04 	vpush	{d8-d9}
 800b500:	eeb0 8a41 	vmov.f32	s16, s2
 800b504:	eef0 8a61 	vmov.f32	s17, s3
 800b508:	ec55 4b10 	vmov	r4, r5, d0
 800b50c:	b083      	sub	sp, #12
 800b50e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b512:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b516:	9001      	str	r0, [sp, #4]
 800b518:	da06      	bge.n	800b528 <__kernel_sin+0x30>
 800b51a:	ee10 0a10 	vmov	r0, s0
 800b51e:	4629      	mov	r1, r5
 800b520:	f7f5 fb42 	bl	8000ba8 <__aeabi_d2iz>
 800b524:	2800      	cmp	r0, #0
 800b526:	d051      	beq.n	800b5cc <__kernel_sin+0xd4>
 800b528:	4622      	mov	r2, r4
 800b52a:	462b      	mov	r3, r5
 800b52c:	4620      	mov	r0, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	f7f5 f88a 	bl	8000648 <__aeabi_dmul>
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f5 f882 	bl	8000648 <__aeabi_dmul>
 800b544:	a341      	add	r3, pc, #260	; (adr r3, 800b64c <__kernel_sin+0x154>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	4680      	mov	r8, r0
 800b54c:	4689      	mov	r9, r1
 800b54e:	4650      	mov	r0, sl
 800b550:	4659      	mov	r1, fp
 800b552:	f7f5 f879 	bl	8000648 <__aeabi_dmul>
 800b556:	a33f      	add	r3, pc, #252	; (adr r3, 800b654 <__kernel_sin+0x15c>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 febc 	bl	80002d8 <__aeabi_dsub>
 800b560:	4652      	mov	r2, sl
 800b562:	465b      	mov	r3, fp
 800b564:	f7f5 f870 	bl	8000648 <__aeabi_dmul>
 800b568:	a33c      	add	r3, pc, #240	; (adr r3, 800b65c <__kernel_sin+0x164>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f7f4 feb5 	bl	80002dc <__adddf3>
 800b572:	4652      	mov	r2, sl
 800b574:	465b      	mov	r3, fp
 800b576:	f7f5 f867 	bl	8000648 <__aeabi_dmul>
 800b57a:	a33a      	add	r3, pc, #232	; (adr r3, 800b664 <__kernel_sin+0x16c>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f4 feaa 	bl	80002d8 <__aeabi_dsub>
 800b584:	4652      	mov	r2, sl
 800b586:	465b      	mov	r3, fp
 800b588:	f7f5 f85e 	bl	8000648 <__aeabi_dmul>
 800b58c:	a337      	add	r3, pc, #220	; (adr r3, 800b66c <__kernel_sin+0x174>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	f7f4 fea3 	bl	80002dc <__adddf3>
 800b596:	9b01      	ldr	r3, [sp, #4]
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	b9eb      	cbnz	r3, 800b5da <__kernel_sin+0xe2>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4650      	mov	r0, sl
 800b5a4:	4659      	mov	r1, fp
 800b5a6:	f7f5 f84f 	bl	8000648 <__aeabi_dmul>
 800b5aa:	a325      	add	r3, pc, #148	; (adr r3, 800b640 <__kernel_sin+0x148>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f7f4 fe92 	bl	80002d8 <__aeabi_dsub>
 800b5b4:	4642      	mov	r2, r8
 800b5b6:	464b      	mov	r3, r9
 800b5b8:	f7f5 f846 	bl	8000648 <__aeabi_dmul>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f7f4 fe8a 	bl	80002dc <__adddf3>
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	ec45 4b10 	vmov	d0, r4, r5
 800b5d0:	b003      	add	sp, #12
 800b5d2:	ecbd 8b04 	vpop	{d8-d9}
 800b5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5da:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <__kernel_sin+0x150>)
 800b5dc:	ec51 0b18 	vmov	r0, r1, d8
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f7f5 f831 	bl	8000648 <__aeabi_dmul>
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	ec41 0b19 	vmov	d9, r0, r1
 800b5ec:	463b      	mov	r3, r7
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	f7f5 f829 	bl	8000648 <__aeabi_dmul>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	ec51 0b19 	vmov	r0, r1, d9
 800b5fe:	f7f4 fe6b 	bl	80002d8 <__aeabi_dsub>
 800b602:	4652      	mov	r2, sl
 800b604:	465b      	mov	r3, fp
 800b606:	f7f5 f81f 	bl	8000648 <__aeabi_dmul>
 800b60a:	ec53 2b18 	vmov	r2, r3, d8
 800b60e:	f7f4 fe63 	bl	80002d8 <__aeabi_dsub>
 800b612:	a30b      	add	r3, pc, #44	; (adr r3, 800b640 <__kernel_sin+0x148>)
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	4640      	mov	r0, r8
 800b61e:	4649      	mov	r1, r9
 800b620:	f7f5 f812 	bl	8000648 <__aeabi_dmul>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fe56 	bl	80002dc <__adddf3>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4620      	mov	r0, r4
 800b636:	4629      	mov	r1, r5
 800b638:	f7f4 fe4e 	bl	80002d8 <__aeabi_dsub>
 800b63c:	e7c4      	b.n	800b5c8 <__kernel_sin+0xd0>
 800b63e:	bf00      	nop
 800b640:	55555549 	.word	0x55555549
 800b644:	3fc55555 	.word	0x3fc55555
 800b648:	3fe00000 	.word	0x3fe00000
 800b64c:	5acfd57c 	.word	0x5acfd57c
 800b650:	3de5d93a 	.word	0x3de5d93a
 800b654:	8a2b9ceb 	.word	0x8a2b9ceb
 800b658:	3e5ae5e6 	.word	0x3e5ae5e6
 800b65c:	57b1fe7d 	.word	0x57b1fe7d
 800b660:	3ec71de3 	.word	0x3ec71de3
 800b664:	19c161d5 	.word	0x19c161d5
 800b668:	3f2a01a0 	.word	0x3f2a01a0
 800b66c:	1110f8a6 	.word	0x1110f8a6
 800b670:	3f811111 	.word	0x3f811111

0800b674 <fabs>:
 800b674:	ec51 0b10 	vmov	r0, r1, d0
 800b678:	ee10 2a10 	vmov	r2, s0
 800b67c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b680:	ec43 2b10 	vmov	d0, r2, r3
 800b684:	4770      	bx	lr
	...

0800b688 <floor>:
 800b688:	ec51 0b10 	vmov	r0, r1, d0
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b694:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b698:	2e13      	cmp	r6, #19
 800b69a:	ee10 5a10 	vmov	r5, s0
 800b69e:	ee10 8a10 	vmov	r8, s0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	dc32      	bgt.n	800b70c <floor+0x84>
 800b6a6:	2e00      	cmp	r6, #0
 800b6a8:	da14      	bge.n	800b6d4 <floor+0x4c>
 800b6aa:	a333      	add	r3, pc, #204	; (adr r3, 800b778 <floor+0xf0>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 fe14 	bl	80002dc <__adddf3>
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f7f5 fa56 	bl	8000b68 <__aeabi_dcmpgt>
 800b6bc:	b138      	cbz	r0, 800b6ce <floor+0x46>
 800b6be:	2c00      	cmp	r4, #0
 800b6c0:	da57      	bge.n	800b772 <floor+0xea>
 800b6c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b6c6:	431d      	orrs	r5, r3
 800b6c8:	d001      	beq.n	800b6ce <floor+0x46>
 800b6ca:	4c2d      	ldr	r4, [pc, #180]	; (800b780 <floor+0xf8>)
 800b6cc:	2500      	movs	r5, #0
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	e025      	b.n	800b720 <floor+0x98>
 800b6d4:	4f2b      	ldr	r7, [pc, #172]	; (800b784 <floor+0xfc>)
 800b6d6:	4137      	asrs	r7, r6
 800b6d8:	ea01 0307 	and.w	r3, r1, r7
 800b6dc:	4303      	orrs	r3, r0
 800b6de:	d01f      	beq.n	800b720 <floor+0x98>
 800b6e0:	a325      	add	r3, pc, #148	; (adr r3, 800b778 <floor+0xf0>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fdf9 	bl	80002dc <__adddf3>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f7f5 fa3b 	bl	8000b68 <__aeabi_dcmpgt>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d0eb      	beq.n	800b6ce <floor+0x46>
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	bfbe      	ittt	lt
 800b6fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6fe:	fa43 f606 	asrlt.w	r6, r3, r6
 800b702:	19a4      	addlt	r4, r4, r6
 800b704:	ea24 0407 	bic.w	r4, r4, r7
 800b708:	2500      	movs	r5, #0
 800b70a:	e7e0      	b.n	800b6ce <floor+0x46>
 800b70c:	2e33      	cmp	r6, #51	; 0x33
 800b70e:	dd0b      	ble.n	800b728 <floor+0xa0>
 800b710:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b714:	d104      	bne.n	800b720 <floor+0x98>
 800b716:	ee10 2a10 	vmov	r2, s0
 800b71a:	460b      	mov	r3, r1
 800b71c:	f7f4 fdde 	bl	80002dc <__adddf3>
 800b720:	ec41 0b10 	vmov	d0, r0, r1
 800b724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b728:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b72c:	f04f 33ff 	mov.w	r3, #4294967295
 800b730:	fa23 f707 	lsr.w	r7, r3, r7
 800b734:	4207      	tst	r7, r0
 800b736:	d0f3      	beq.n	800b720 <floor+0x98>
 800b738:	a30f      	add	r3, pc, #60	; (adr r3, 800b778 <floor+0xf0>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f4 fdcd 	bl	80002dc <__adddf3>
 800b742:	2200      	movs	r2, #0
 800b744:	2300      	movs	r3, #0
 800b746:	f7f5 fa0f 	bl	8000b68 <__aeabi_dcmpgt>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0bf      	beq.n	800b6ce <floor+0x46>
 800b74e:	2c00      	cmp	r4, #0
 800b750:	da02      	bge.n	800b758 <floor+0xd0>
 800b752:	2e14      	cmp	r6, #20
 800b754:	d103      	bne.n	800b75e <floor+0xd6>
 800b756:	3401      	adds	r4, #1
 800b758:	ea25 0507 	bic.w	r5, r5, r7
 800b75c:	e7b7      	b.n	800b6ce <floor+0x46>
 800b75e:	2301      	movs	r3, #1
 800b760:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b764:	fa03 f606 	lsl.w	r6, r3, r6
 800b768:	4435      	add	r5, r6
 800b76a:	4545      	cmp	r5, r8
 800b76c:	bf38      	it	cc
 800b76e:	18e4      	addcc	r4, r4, r3
 800b770:	e7f2      	b.n	800b758 <floor+0xd0>
 800b772:	2500      	movs	r5, #0
 800b774:	462c      	mov	r4, r5
 800b776:	e7aa      	b.n	800b6ce <floor+0x46>
 800b778:	8800759c 	.word	0x8800759c
 800b77c:	7e37e43c 	.word	0x7e37e43c
 800b780:	bff00000 	.word	0xbff00000
 800b784:	000fffff 	.word	0x000fffff

0800b788 <scalbn>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	ec55 4b10 	vmov	r4, r5, d0
 800b78e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b792:	4606      	mov	r6, r0
 800b794:	462b      	mov	r3, r5
 800b796:	b99a      	cbnz	r2, 800b7c0 <scalbn+0x38>
 800b798:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b79c:	4323      	orrs	r3, r4
 800b79e:	d036      	beq.n	800b80e <scalbn+0x86>
 800b7a0:	4b39      	ldr	r3, [pc, #228]	; (800b888 <scalbn+0x100>)
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	ee10 0a10 	vmov	r0, s0
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f7f4 ff4d 	bl	8000648 <__aeabi_dmul>
 800b7ae:	4b37      	ldr	r3, [pc, #220]	; (800b88c <scalbn+0x104>)
 800b7b0:	429e      	cmp	r6, r3
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	da10      	bge.n	800b7da <scalbn+0x52>
 800b7b8:	a32b      	add	r3, pc, #172	; (adr r3, 800b868 <scalbn+0xe0>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	e03a      	b.n	800b836 <scalbn+0xae>
 800b7c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7c4:	428a      	cmp	r2, r1
 800b7c6:	d10c      	bne.n	800b7e2 <scalbn+0x5a>
 800b7c8:	ee10 2a10 	vmov	r2, s0
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7f4 fd84 	bl	80002dc <__adddf3>
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	460d      	mov	r5, r1
 800b7d8:	e019      	b.n	800b80e <scalbn+0x86>
 800b7da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7de:	460b      	mov	r3, r1
 800b7e0:	3a36      	subs	r2, #54	; 0x36
 800b7e2:	4432      	add	r2, r6
 800b7e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b7e8:	428a      	cmp	r2, r1
 800b7ea:	dd08      	ble.n	800b7fe <scalbn+0x76>
 800b7ec:	2d00      	cmp	r5, #0
 800b7ee:	a120      	add	r1, pc, #128	; (adr r1, 800b870 <scalbn+0xe8>)
 800b7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f4:	da1c      	bge.n	800b830 <scalbn+0xa8>
 800b7f6:	a120      	add	r1, pc, #128	; (adr r1, 800b878 <scalbn+0xf0>)
 800b7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7fc:	e018      	b.n	800b830 <scalbn+0xa8>
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	dd08      	ble.n	800b814 <scalbn+0x8c>
 800b802:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b80a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b80e:	ec45 4b10 	vmov	d0, r4, r5
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b818:	da19      	bge.n	800b84e <scalbn+0xc6>
 800b81a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b81e:	429e      	cmp	r6, r3
 800b820:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b824:	dd0a      	ble.n	800b83c <scalbn+0xb4>
 800b826:	a112      	add	r1, pc, #72	; (adr r1, 800b870 <scalbn+0xe8>)
 800b828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e2      	bne.n	800b7f6 <scalbn+0x6e>
 800b830:	a30f      	add	r3, pc, #60	; (adr r3, 800b870 <scalbn+0xe8>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	f7f4 ff07 	bl	8000648 <__aeabi_dmul>
 800b83a:	e7cb      	b.n	800b7d4 <scalbn+0x4c>
 800b83c:	a10a      	add	r1, pc, #40	; (adr r1, 800b868 <scalbn+0xe0>)
 800b83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0b8      	beq.n	800b7b8 <scalbn+0x30>
 800b846:	a10e      	add	r1, pc, #56	; (adr r1, 800b880 <scalbn+0xf8>)
 800b848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b84c:	e7b4      	b.n	800b7b8 <scalbn+0x30>
 800b84e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b852:	3236      	adds	r2, #54	; 0x36
 800b854:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b858:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b85c:	4620      	mov	r0, r4
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <scalbn+0x108>)
 800b860:	2200      	movs	r2, #0
 800b862:	e7e8      	b.n	800b836 <scalbn+0xae>
 800b864:	f3af 8000 	nop.w
 800b868:	c2f8f359 	.word	0xc2f8f359
 800b86c:	01a56e1f 	.word	0x01a56e1f
 800b870:	8800759c 	.word	0x8800759c
 800b874:	7e37e43c 	.word	0x7e37e43c
 800b878:	8800759c 	.word	0x8800759c
 800b87c:	fe37e43c 	.word	0xfe37e43c
 800b880:	c2f8f359 	.word	0xc2f8f359
 800b884:	81a56e1f 	.word	0x81a56e1f
 800b888:	43500000 	.word	0x43500000
 800b88c:	ffff3cb0 	.word	0xffff3cb0
 800b890:	3c900000 	.word	0x3c900000

0800b894 <_init>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	bf00      	nop
 800b898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89a:	bc08      	pop	{r3}
 800b89c:	469e      	mov	lr, r3
 800b89e:	4770      	bx	lr

0800b8a0 <_fini>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	bf00      	nop
 800b8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a6:	bc08      	pop	{r3}
 800b8a8:	469e      	mov	lr, r3
 800b8aa:	4770      	bx	lr
